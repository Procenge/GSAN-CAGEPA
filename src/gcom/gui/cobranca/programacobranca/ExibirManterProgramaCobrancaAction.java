/**
 * 
 */
/*
 * Copyright (C) 2007-2007 the GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place – Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * 
 * GSANPCG
 * Virgínia Melo
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */

package gcom.gui.cobranca.programacobranca;

import gcom.cobranca.programacobranca.FiltroProgramaCobranca;
import gcom.cobranca.programacobranca.ProgramaCobranca;
import gcom.gui.ActionServletException;
import gcom.gui.GcomAction;

import java.util.Collection;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * Action responsável por manter um Programa de Cobrança.
 * 
 * @author Virgínia Melo
 * @date 26/08/2008
 */
public class ExibirManterProgramaCobrancaAction
				extends GcomAction {

	public ActionForward execute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest httpServletRequest,
					HttpServletResponse httpServletResponse){

		ActionForward retorno = actionMapping.findForward("exibirManterProgramaCobranca");

		HttpSession sessao = httpServletRequest.getSession(false);

		// Recupera o filtro passado pelo FiltrarFuncionalidadeAction para ser efetuada pesquisa
		FiltroProgramaCobranca filtroPrograma = (FiltroProgramaCobranca) sessao.getAttribute("filtroPrograma");
		filtroPrograma.adicionarCaminhoParaCarregamentoEntidade("criterio");

		// Aciona o controle de paginação para que sejam pesquisados apenas os registros que
		// aparecem na página
		Map resultado = controlarPaginacao(httpServletRequest, retorno, filtroPrograma, ProgramaCobranca.class.getName());
		Collection colecaoPrograma = (Collection) resultado.get("colecaoRetorno");
		retorno = (ActionForward) resultado.get("destinoActionForward");

		/*
		 * Verifica se a coleção retornada pela pesquisa é nula, em caso
		 * afirmativo comunica ao usuário que não existe nenhuma
		 * funcionalidade cadastrada para a pesquisa efetuada e em caso
		 * negativo e se atender a algumas condições seta o retorno para o
		 * ExibirAtualizarFuncionalidadeAction, se não atender manda a
		 * coleção pelo request para ser recuperado e exibido pelo jsp.
		 */

		if(colecaoPrograma != null && !colecaoPrograma.isEmpty()){

			/*
			 * Verifica se a coleção contém apenas um objeto, se está retornando
			 * da paginação (devido ao esquema de paginação de 10 em 10 faz uma
			 * nova busca), evitando, assim, que caso haja 11 elementos no
			 * retorno da pesquisa e o usuário selecione o link para ir para a
			 * segunda página ele não vá para tela de atualizar.
			 */

			if(colecaoPrograma.size() == 1
							&& (httpServletRequest.getParameter("page.offset") == null || httpServletRequest.getParameter("page.offset")
											.equals("1"))){

				/*
				 * Verifica se o usuário marcou o checkbox de atualizar no jsp
				 * programacobranca_filtrar.
				 * Caso todas as condições sejam verdadeiras seta o retorno para o
				 * ExibirAtualizarProgramaCobrancaAction e em caso negativo manda
				 * a coleção pelo request.
				 */

				if(httpServletRequest.getParameter("atualizar") != null){
					retorno = actionMapping.findForward("atualizarProgramaCobranca");
					ProgramaCobranca programa = (ProgramaCobranca) colecaoPrograma.iterator().next();
					sessao.setAttribute("objetoPrograma", programa);

				}else{
					httpServletRequest.setAttribute("programas", colecaoPrograma);
				}
			}else{
				httpServletRequest.setAttribute("programas", colecaoPrograma);
			}
		}else{

			// Nenhum programa encontrado.
			throw new ActionServletException("atencao.pesquisa.nenhumresultado");
		}

		return retorno;
	}
}
