/*
 * Copyright (C) 2007-2007 the GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place – Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Thiago Silva Toscano de Brito
 * Vivianne Barbosa Sousa
 * 
 * GSANPCG
 * André Rangel Nishimura
 * Eduardo Henrique Bandeira Carneiro da Silva
 * Lucas Daniel Souza de Medeiros
 * Saulo Vasconcelos de Lima
 * Virginia Santos de Melo
 * Vitor Cavalcante Hora
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */

package gcom.fachada;

import gcom.acquagis.atendimento.OrdemServicoDetalhesJSONHelper;
import gcom.agenciavirtual.cadastro.cliente.ClienteJSONHelper;
import gcom.arrecadacao.*;
import gcom.arrecadacao.aviso.AvisoBancario;
import gcom.arrecadacao.aviso.AvisoDeducoes;
import gcom.arrecadacao.aviso.bean.*;
import gcom.arrecadacao.banco.Agencia;
import gcom.arrecadacao.banco.Banco;
import gcom.arrecadacao.banco.ContaBancaria;
import gcom.arrecadacao.bean.*;
import gcom.arrecadacao.debitoautomatico.DebitoAutomatico;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoMovimento;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoMovimentoHelper;
import gcom.arrecadacao.pagamento.*;
import gcom.arrecadacao.pagamento.bean.ClassificarLotePagamentosNaoClassificadosHelper;
import gcom.arrecadacao.pagamento.bean.ClassificarPagamentosNaoClassificadosHelper;
import gcom.arrecadacao.pagamento.bean.PagamentoHistoricoAdmiteDevolucaoHelper;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocal;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocalHome;
import gcom.atendimentopublico.bean.EfetuarLigacaoAguaComInstalacaoHidrometroSemRAHelper;
import gcom.atendimentopublico.bean.IntegracaoComercialHelper;
import gcom.atendimentopublico.bean.PercentualCobrancaHelper;
import gcom.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocal;
import gcom.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocalHome;
import gcom.atendimentopublico.ligacaoagua.LigacaoAgua;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoagua.bean.ConsultarHistoricoManutencaoLigacaoHelper;
import gcom.atendimentopublico.ligacaoagua.bean.DadosEfetuacaoCorteLigacaoAguaHelper;
import gcom.atendimentopublico.ligacaoagua.bean.HistoricoManutencaoLigacaoHelper;
import gcom.atendimentopublico.ligacaoesgoto.*;
import gcom.atendimentopublico.ordemservico.*;
import gcom.atendimentopublico.ordemservico.bean.*;
import gcom.atendimentopublico.registroatendimento.*;
import gcom.atendimentopublico.registroatendimento.bean.*;
import gcom.batch.ControladorBatchLocal;
import gcom.batch.ControladorBatchLocalHome;
import gcom.batch.ProcessoIniciado;
import gcom.cadastro.ControladorCadastroLocal;
import gcom.cadastro.ControladorCadastroLocalHome;
import gcom.cadastro.DbVersaoImplementada;
import gcom.cadastro.EnvioEmail;
import gcom.cadastro.aguaparatodos.ImovelAguaParaTodos;
import gcom.cadastro.atendimento.*;
import gcom.cadastro.atendimento.bean.AtendimentoDocumentacaoInformadaHelper;
import gcom.cadastro.cliente.*;
import gcom.cadastro.cliente.bean.ClienteImovelRelacaoHelper;
import gcom.cadastro.dadocensitario.LocalidadeDadosCensitario;
import gcom.cadastro.dadocensitario.MunicipioDadosCensitario;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.endereco.*;
import gcom.cadastro.endereco.bean.AtualizarLogradouroBairroHelper;
import gcom.cadastro.endereco.bean.AtualizarLogradouroCepHelper;
import gcom.cadastro.funcionario.Funcionario;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.ControladorGeograficoLocal;
import gcom.cadastro.geografico.ControladorGeograficoLocalHome;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.imovel.*;
import gcom.cadastro.imovel.bean.*;
import gcom.cadastro.localidade.*;
import gcom.cadastro.sistemaparametro.SistemaAlteracaoHistorico;
import gcom.cadastro.sistemaparametro.SistemaParametro;
import gcom.cadastro.sistemaparametro.bean.DadosEnvioEmailHelper;
import gcom.cadastro.tarifasocial.*;
import gcom.cadastro.unidade.ControladorUnidadeLocal;
import gcom.cadastro.unidade.ControladorUnidadeLocalHome;
import gcom.cadastro.unidade.FiltroUnidadeOrganizacional;
import gcom.cadastro.unidade.UnidadeOrganizacional;
import gcom.cadastro.unidadeoperacional.UnidadeOperacional;
import gcom.cobranca.*;
import gcom.cobranca.bean.*;
import gcom.cobranca.bean.CobrancaAcaoHelper;
import gcom.cobranca.campanhapremiacao.Campanha;
import gcom.cobranca.campanhapremiacao.CampanhaCadastro;
import gcom.cobranca.campanhapremiacao.CampanhaCadastroFone;
import gcom.cobranca.contrato.CobrancaContrato;
import gcom.cobranca.contrato.CobrancaContratoRemuneracaoPorProdutividade;
import gcom.cobranca.contrato.CobrancaContratoRemuneracaoPorSucesso;
import gcom.cobranca.parcelamento.*;
import gcom.contabil.ControladorContabilLocal;
import gcom.contabil.ControladorContabilLocalHome;
import gcom.contabil.EventoComercial;
import gcom.contabil.LancamentoContabilSintetico;
import gcom.contabil.bean.LancamentoContabilAnaliticoConsultaHelper;
import gcom.contabil.bean.LancamentoContabilSinteticoConsultaHelper;
import gcom.faturamento.*;
import gcom.faturamento.bean.*;
import gcom.faturamento.consumofaixaareacategoria.ConsumoFaixaAreaCategoria;
import gcom.faturamento.consumotarifa.ConsumoTarifa;
import gcom.faturamento.consumotarifa.ConsumoTarifaCategoria;
import gcom.faturamento.consumotarifa.ConsumoTarifaVigencia;
import gcom.faturamento.conta.*;
import gcom.faturamento.credito.CreditoARealizar;
import gcom.faturamento.credito.CreditoOrigem;
import gcom.faturamento.credito.CreditoRealizado;
import gcom.faturamento.credito.CreditoTipo;
import gcom.faturamento.debito.*;
import gcom.faturamento.faturamentosimulacaocomando.FaturamentoSimulacaoComando;
import gcom.faturamento.histograma.ControladorHistogramaLocal;
import gcom.faturamento.histograma.ControladorHistogramaLocalHome;
import gcom.financeiro.ContaAReceberContabil;
import gcom.financeiro.ControladorFinanceiroLocal;
import gcom.financeiro.ControladorFinanceiroLocalHome;
import gcom.gerencial.ControladorGerencialLocal;
import gcom.gerencial.ControladorGerencialLocalHome;
import gcom.gerencial.bean.*;
import gcom.gerencial.cadastro.ControladorGerencialCadastroLocal;
import gcom.gerencial.cadastro.ControladorGerencialCadastroLocalHome;
import gcom.gerencial.cadastro.bean.DetalheLigacaoEconomiaGCSHelper;
import gcom.gerencial.cadastro.bean.ResumoLigacaoEconomiaConsultarHelper;
import gcom.gerencial.cadastro.bean.SumarioLigacaoPorCategoriaGCSHelper;
import gcom.gerencial.cobranca.ControladorGerencialCobrancaLocal;
import gcom.gerencial.cobranca.ControladorGerencialCobrancaLocalHome;
import gcom.gerencial.cobranca.bean.ResumoPendenciaAcumuladoHelper;
import gcom.gerencial.faturamento.ControladorGerencialFaturamentoLocal;
import gcom.gerencial.faturamento.ControladorGerencialFaturamentoLocalHome;
import gcom.gerencial.micromedicao.ControladorGerencialMicromedicaoLocal;
import gcom.gerencial.micromedicao.ControladorGerencialMicromedicaoLocalHome;
import gcom.gerencial.micromedicao.ResumoAnormalidadeConsultaHelper;
import gcom.gui.atendimentopublico.ordemservico.GerarRelatorioEstatisticoAtendimentoPorRacaCorActionForm;
import gcom.gui.atendimentopublico.ordemservico.OrdemServicoSeletivaHelper;
import gcom.gui.atendimentopublico.ordemservico.RoteiroOSDadosProgramacaoHelper;
import gcom.gui.cobranca.*;
import gcom.gui.cobranca.spcserasa.RelatorioNegativacoesExcluidasSomatorioDadosParcelamentoHelper;
import gcom.gui.faturamento.bean.FiltrarImovelInserirManterContaHelper;
import gcom.gui.faturamento.bean.GuiaPagamentoPrestacaoHelper;
import gcom.gui.faturamento.bean.ListaDadosPrestacaoGuiaHelper;
import gcom.gui.faturamento.bean.ManterContaHelper;
import gcom.gui.faturamento.consumotarifa.bean.CategoriaFaixaConsumoTarifaHelper;
import gcom.gui.micromedicao.DadosMovimentacao;
import gcom.integracao.acquagis.ControladorIntegracaoAcquaGis;
import gcom.integracao.acquagis.DadosAcquaGis;
import gcom.interceptor.ObjetoTransacao;
import gcom.micromedicao.*;
import gcom.micromedicao.bean.AnaliseConsumoRelatorioOSHelper;
import gcom.micromedicao.bean.FiltroHidrometroHelper;
import gcom.micromedicao.bean.HidrometroRelatorioOSHelper;
import gcom.micromedicao.bean.OrdemServicoManutencaoHidrometroHelper;
import gcom.micromedicao.consumo.ConsumoHistorico;
import gcom.micromedicao.hidrometro.*;
import gcom.micromedicao.leitura.LeituraAnormalidade;
import gcom.micromedicao.leitura.LeituraFiscalizacao;
import gcom.micromedicao.medicao.FiltroMedicaoHistoricoSql;
import gcom.micromedicao.medicao.MedicaoHistorico;
import gcom.micromedicao.medicao.MedicaoTipo;
import gcom.operacional.*;
import gcom.relatorio.arrecadacao.GuiaDevolucaoRelatorioHelper;
import gcom.relatorio.arrecadacao.pagamento.GuiaPagamentoRelatorioHelper;
import gcom.relatorio.atendimentopublico.*;
import gcom.relatorio.cadastro.cliente.FiltrarRelatorioClientesEspeciaisHelper;
import gcom.relatorio.cadastro.imovel.*;
import gcom.relatorio.cobranca.RelatorioRemuneracaoCobrancaAdministrativaBean;
import gcom.relatorio.cobranca.RelatorioRemuneracaoCobrancaAdministrativaHelper;
import gcom.relatorio.cobranca.parcelamento.ExtratoDebitoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.GeradorRelatorioParcelamentoException;
import gcom.relatorio.cobranca.parcelamento.RelacaoParcelamentoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.RelatorioExtratoDebito;
import gcom.relatorio.faturamento.*;
import gcom.relatorio.faturamento.conta.RelatorioContaModelo2Bean;
import gcom.relatorio.faturamento.conta.RelatorioContaModelo3Bean;
import gcom.relatorio.financeiro.FiltroRelatorioPosicaoContasAReceberContabil;
import gcom.relatorio.financeiro.RelatorioEvolucaoContasAReceberContabilBean;
import gcom.relatorio.gerencial.micromedicao.RelatorioResumoAnormalidadeLeituraBean;
import gcom.relatorio.ordemservico.GeradorRelatorioOrdemServico;
import gcom.relatorio.ordemservico.GeradorRelatorioOrdemServicoException;
import gcom.relatorio.ordemservico.OSRelatorioEstruturaHelper;
import gcom.relatorio.ordemservico.OSRelatorioPadraoComOcorrenciaHelper;
import gcom.seguranca.ControladorPermissaoEspecialLocal;
import gcom.seguranca.ControladorPermissaoEspecialLocalHome;
import gcom.seguranca.acesso.*;
import gcom.seguranca.acesso.usuario.*;
import gcom.seguranca.transacao.ControladorTransacaoLocal;
import gcom.seguranca.transacao.ControladorTransacaoLocalHome;
import gcom.seguranca.transacao.Tabela;
import gcom.spcserasa.ControladorSpcSerasaLocal;
import gcom.spcserasa.ControladorSpcSerasaLocalHome;
import gcom.spcserasa.bean.DadosNegativacaoPorImovelHelper;
import gcom.spcserasa.bean.InserirComandoNegativacaoPorCriterioHelper;
import gcom.spcserasa.bean.NegativadorMovimentoHelper;
import gcom.tarefa.TarefaRelatorio;
import gcom.util.*;
import gcom.util.filtro.Filtro;
import gcom.util.filtro.ParametroSimples;
import gcom.util.tabelaauxiliar.ControladorTabelaAuxiliarLocal;
import gcom.util.tabelaauxiliar.ControladorTabelaAuxiliarLocalHome;
import gcom.util.tabelaauxiliar.TabelaAuxiliarAbstrata;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.*;

import javax.ejb.CreateException;

import br.com.procenge.comum.exception.NegocioException;
import br.com.procenge.comum.exception.PCGException;
import br.com.procenge.parametrosistema.api.ControladorParametroSistema;
import br.com.procenge.parametrosistema.api.ParametroSistema;
import br.com.procenge.parametrosistema.impl.ParametroSistemaValor;
import br.com.procenge.util.SpringBeanLocator;

/**
 * < <Descrição da Classe>>
 * 
 * @author Administrador
 * @created 25 de Abril de 2005
 */
/**
 * @author Magno Silveira (magno.silveira@procenge.com.br)
 * @since 22/10/2014
 */
public class Fachada {

	private static Fachada instancia;

	private static SpringBeanLocator springBeanLocator = SpringBeanLocator.getInstancia();

	/**
	 * Construtor da classe Fachada
	 */
	private Fachada() {

	}

	/**
	 * Retorna o valor de instancia
	 * 
	 * @return O valor de instancia
	 */
	public static Fachada getInstancia(){

		if(instancia == null){
			instancia = new Fachada();
		}
		return instancia;
	}

	// *************----Métodos do SERVICE LOCATOR (CONTROLADORES)
	// ----*************//

	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parêmetro
	 */
	private ControladorTabelaAuxiliarLocal getControladorTabelaAuxiliar(){

		ControladorTabelaAuxiliarLocalHome localHome = null;
		ControladorTabelaAuxiliarLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTabelaAuxiliarLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_TABELA_AUXILIAR_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * [UC3126] Auditoria de Serviços a Cobrar
	 * 
	 * @author Eduardo Oliveira
	 * @date 10/03/2014
	 */
	public Collection consultarServicosACobrarFuncionario(Integer idFuncionario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().consultarServicosACobrarFuncionario(idFuncionario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna a interface remota de ControladorUnidade
	 * 
	 * @return A interface remota do controlador unidade
	 */
	private ControladorUnidadeLocal getControladorUnidade(){

		ControladorUnidadeLocalHome localHome = null;
		ControladorUnidadeLocal local = null;

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUnidadeLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_UNIDADE_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorRegistroAtendimento
	 */
	private ControladorRegistroAtendimentoLocal getControladorRegistroAtendimento(){

		ControladorRegistroAtendimentoLocalHome localHome = null;
		ControladorRegistroAtendimentoLocal local = null;

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorRegistroAtendimentoLocalHome) locator
							.getLocalHome(ConstantesJNDI.CONTROLADOR_REGISTRO_ATENDIMENTO_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o controladorCadastro
	 * 
	 * @author Thiago Tenório
	 * @date 18/08/2006
	 */
	private ControladorCadastroLocal getControladorCadastro(){

		ControladorCadastroLocalHome localHome = null;
		ControladorCadastroLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorCadastroLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CADASTRO_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o controladorOrdemServico
	 * 
	 * @author Leonardo Regis
	 * @date 18/08/2006
	 */
	private ControladorOrdemServicoLocal getControladorOrdemServico(){

		ControladorOrdemServicoLocalHome localHome = null;
		ControladorOrdemServicoLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorOrdemServicoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ORDEM_SERVICO_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorUsuarioLocal getControladorUsuario(){

		ControladorUsuarioLocalHome localHome = null;
		ControladorUsuarioLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUsuarioLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_USUARIO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorGerencialFaturamentoLocal getControladorGerencialFaturamento(){

		ControladorGerencialFaturamentoLocalHome localHome = null;
		ControladorGerencialFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGerencialFaturamentoLocalHome) locator
							.getLocalHome(ConstantesJNDI.CONTROLADOR_GERENCIAL_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorTarifaSocial
	 * 
	 * @return O valor de controladorTarifaSocial
	 */
	private ControladorTarifaSocialLocal getControladorTarifaSocial(){

		ControladorTarifaSocialLocalHome localHome = null;
		ControladorTarifaSocialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTarifaSocialLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_TARIFA_SOCIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorTarifaSocial
	 * 
	 * @return O valor de controladorTarifaSocial
	 */
	private ControladorTransacaoLocal getControladorTransacao(){

		ControladorTransacaoLocalHome localHome = null;
		ControladorTransacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTransacaoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_TRANSACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	private ControladorUtilLocal getControladorUtil(){

		ControladorUtilLocalHome localHome = null;
		ControladorUtilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUtilLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_UTIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorMicromedicao
	 * 
	 * @return O valor de controladorMicromedicao
	 */
	private ControladorGerencialMicromedicaoLocal getControladorGerencialMicromedicao(){

		ControladorGerencialMicromedicaoLocalHome localHome = null;
		ControladorGerencialMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGerencialMicromedicaoLocalHome) locator
							.getLocalHome(ConstantesJNDI.CONTROLADOR_GERENCIAL_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorCadastro
	 * 
	 * @return O valor de controladorCadastro
	 */
	private ControladorGerencialCadastroLocal getControladorGerencialCadastro(){

		ControladorGerencialCadastroLocalHome localHome = null;
		ControladorGerencialCadastroLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGerencialCadastroLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_GERENCIAL_CADASTRO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	private ControladorEnderecoLocal getControladorEndereco(){

		ControladorEnderecoLocalHome localHome = null;
		ControladorEnderecoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorEnderecoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ENDERECO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorCliente
	 * 
	 * @return O valor de controladorCliente
	 */
	private ControladorClienteLocal getControladorCliente(){

		ControladorClienteLocalHome localHome = null;
		ControladorClienteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorClienteLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CLIENTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	private ControladorGeograficoLocal getControladorGeografico(){

		ControladorGeograficoLocalHome localHome = null;
		ControladorGeograficoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGeograficoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_GEOGRAFICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorImovel
	 * 
	 * @return O valor de controladorImovel
	 */
	private ControladorImovelLocal getControladorImovel(){

		ControladorImovelLocalHome localHome = null;
		ControladorImovelLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorImovelLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_IMOVEL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorMicromedicao
	 * 
	 * @return O valor de controladorMicromedicao
	 */
	private ControladorMicromedicaoLocal getControladorMicromedicao(){

		ControladorMicromedicaoLocalHome localHome = null;
		ControladorMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorMicromedicaoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorGerencialCobrancaLocal getControladorGerencialCobranca(){

		ControladorGerencialCobrancaLocalHome localHome = null;
		ControladorGerencialCobrancaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGerencialCobrancaLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_GERENCIAL_COBRANCA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o controladorLigacaoEsgoto
	 * 
	 * @author Leonardo Regis
	 * @date 18/08/2006
	 */
	private ControladorLigacaoEsgotoLocal getControladorLigacaoEsgoto(){

		ControladorLigacaoEsgotoLocalHome localHome = null;
		ControladorLigacaoEsgotoLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLigacaoEsgotoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_ESGOTO_SEJB);
			local = localHome.create();
			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o controladorLigacaoAgua
	 * 
	 * @author Leonardo Regis
	 * @date 09/09/2006
	 */
	private ControladorLigacaoAguaLocal getControladorLigacaoAgua(){

		ControladorLigacaoAguaLocalHome localHome = null;
		ControladorLigacaoAguaLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLigacaoAguaLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_AGUA_SEJB);
			local = localHome.create();
			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o controladorContabil
	 * 
	 * @author Genival Barbosa
	 * @date 06/07/2011
	 */
	private ControladorContabilLocal getControladorContabil(){

		ControladorContabilLocalHome localHome = null;
		ControladorContabilLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorContabilLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CONTABIL_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	private void enviarMensagemControladorBatch(int metodo, String queueMDB, Object[] parametros){

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();
			locator.enviarMensagemJms(metodo, queueMDB, parametros);

		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorLocalidadeLocal getControladorLocalidade(){

		ControladorLocalidadeLocalHome localHome = null;
		ControladorLocalidadeLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLocalidadeLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_LOCALIDADE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorLocalidade
	 * 
	 * @return O valor de controladorLocalidade
	 */
	private ControladorFaturamentoLocal getControladorFaturamento(){

		ControladorFaturamentoLocalHome localHome = null;
		ControladorFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFaturamentoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorLocalidade
	 * 
	 * @return O valor de controladorLocalidade
	 */
	private ControladorRelatorioFaturamentoLocal getControladorRelatorioFaturamento(){

		ControladorRelatorioFaturamentoLocalHome localHome = null;
		ControladorRelatorioFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorRelatorioFaturamentoLocalHome) locator
							.getLocalHome(ConstantesJNDI.CONTROLADOR_RELATORIO_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAtendimentoPublico
	 * 
	 * @return O valor de controladorAtendimentoPublico
	 */

	private ControladorAtendimentoPublicoLocal getControladorAtendimentoPublico(){

		ControladorAtendimentoPublicoLocalHome localHome = null;
		ControladorAtendimentoPublicoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAtendimentoPublicoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ATENDIMENTO_PUBLICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorArrecadacao
	 * 
	 * @return O valor de controladorCliente
	 */
	private ControladorArrecadacaoLocal getControladorArrecadacao(){

		ControladorArrecadacaoLocalHome localHome = null;
		ControladorArrecadacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorArrecadacaoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_ARRECADACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorArrecadacao
	 * 
	 * @return O valor de controladorCliente
	 */
	private ControladorHistogramaLocal getControladorHistograma(){

		ControladorHistogramaLocalHome localHome = null;
		ControladorHistogramaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorHistogramaLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_HISTOGRAMA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	private ControladorAcessoLocal getControladorAcesso(){

		ControladorAcessoLocalHome localHome = null;
		ControladorAcessoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAcessoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ACESSO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	private ControladorPermissaoEspecialLocal getControladorPermissaoEspecial(){

		ControladorPermissaoEspecialLocalHome localHome = null;
		ControladorPermissaoEspecialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorPermissaoEspecialLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_PERMISSAO_ESPECIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorGerencial
	 * 
	 * @return O valor de controladorGerencial
	 */
	private ControladorGerencialLocal getControladorGerencial(){

		ControladorGerencialLocalHome localHome = null;
		ControladorGerencialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGerencialLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_GERENCIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	private ControladorBatchLocal getControladorBatch(){

		ControladorBatchLocalHome localHome = null;
		ControladorBatchLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorBatchLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_BATCH_SEJB);
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	private ControladorOperacionalLocal getControladorOperacional(){

		ControladorOperacionalLocalHome localHome = null;
		ControladorOperacionalLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorOperacionalLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_OPERACIONAL_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna a interface remota de ControladorSpcSerasa
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorSpcSerasaLocal getControladorSpcSerasa(){

		ControladorSpcSerasaLocalHome localHome = null;
		ControladorSpcSerasaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorSpcSerasaLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_SPC_SERASA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	// ********************----Métodos TABELA AUXILIAR
	// ----********************//

	/**
	 * < <Descrição do método>>
	 * 
	 * @param tabelaAuxiliarAbstrata
	 *            Descrição do parâmetro
	 */
	public void inserirTabelaAuxiliar(TabelaAuxiliarAbstrata tabelaAuxiliarAbstrata){

		try{
			this.getControladorUtil().inserir(tabelaAuxiliarAbstrata);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere uma marca de hidrometro
	 * 
	 * @param hidrometroMarca
	 * @return
	 */
	public Integer inserirHidrometroMarca(HidrometroMarca hidrometroMarca, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirHidrometroMarca(hidrometroMarca, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Insere um diametro do hidrometro
	 * 
	 * @param hidrometroDiametro
	 * @return
	 */
	public Integer inserirHidrometroDiametro(HidrometroDiametro hidrometroDiametro, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirHidrometroDiametro(hidrometroDiametro, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param filtro
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisarTabelaAuxiliar(Filtro filtro, String pacoteNomeObjeto){

		try{
			return this.getControladorUtil().pesquisar(filtro, pacoteNomeObjeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de Imóveis com uma query especifica
	 * 
	 * @param idLocalidade
	 *            parametros para a consulta
	 * @param idSetorComercial
	 *            parametros para a consulta
	 * @param idQuadra
	 *            parametros para a consulta
	 * @param lote
	 *            Descrição do parâmetro
	 * @return Description of the Return Value
	 */
	public Collection pesquisarImovel(Integer idLocalidade, Integer idSetorComercial, Integer idQuadra, Short lote){

		try{
			return this.getControladorImovel().pesquisarImovel(idLocalidade, idSetorComercial, idQuadra, lote);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de Imóveis com uma query especifica
	 * 
	 * @param idLocalidade
	 *            parametros para a consulta
	 * @param idSetorComercial
	 *            parametros para a consulta
	 * @param idQuadra
	 *            parametros para a consulta
	 * @param lote
	 *            Descrição do parâmetro
	 * @return Description of the Return Value
	 */
	public Collection pesquisarImovelPorInscricao(Integer idLocalidade, Integer codigoSetorComercial, Integer nnQuadra, Short nnLote){

		try{
			return this.getControladorImovel().pesquisarImovelPorInscricao(idLocalidade, codigoSetorComercial, nnQuadra, nnLote);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remove todos os ids de registros de tabela auxiliar
	 * 
	 * @param ids
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 */
	public void removerTabelaAuxiliar(String[] ids, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorUtil().remover(ids, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Remove todos os ids de uma determinada classe no sistema
	 * 
	 * @param ids
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 */
	public void remover(String[] ids, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorUtil().remover(ids, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * FAVOR Não USAR!!! método para ser utilizada apenas em logradouro
	 * (atualizarr
	 * 
	 * @author Tiago Moreno
	 * @date 08/08/2006
	 * @param id
	 *            Description of the Parameter
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 * @throws ControladorException
	 */

	public void verificaObjetoRemocao(int id, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorUtil().verificaObjetoRemocao(id, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Remove um objeto de uma determinada classe no sistema
	 * 
	 * @param ids
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 */
	public void remover(Object object){

		try{
			this.getControladorUtil().remover(object);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Remove todos os ids de uma determinada classe no sistema
	 * 
	 * @param id
	 *            Description of the Parameter
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 */
	public void removerUm(int id, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorUtil().removerUm(id, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param tabelaAuxiliarAbstrata
	 *            Descrição do parâmetro
	 */
	public void atualizarTabelaAuxiliar(TabelaAuxiliarAbstrata tabelaAuxiliarAbstrata){

		try{
			this.getControladorTabelaAuxiliar().atualizarTabelaAuxiliar(tabelaAuxiliarAbstrata);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// ********************----MétODOS DO UTIL----********************//

	/**
	 * < <Descrição do método>>
	 * 
	 * @param classe
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public int registroMaximo(Class classe){

		try{
			return getControladorUtil().registroMaximo(classe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param classe
	 *            Descrição do parâmetro
	 * @param atributo
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public int valorMaximo(Class classe, String atributo){

		try{
			return getControladorUtil().valorMaximo(classe, atributo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param classe
	 *            Descrição do parâmetro
	 * @param atributo
	 *            Descrição do parâmetro
	 * @param parametro1
	 *            Descrição do parâmetro
	 * @param parametro2
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public int valorMaximo(Class classe, String atributo, String parametro1, String parametro2){

		try{
			return getControladorUtil().valorMaximo(classe, atributo, parametro1, parametro2);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// método de pesquisar genérico.Todos as pesquisas utilizarão esse metodo.

	/**
	 * < <Descrição do método>>
	 * 
	 * @param filtro
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisar(Filtro filtro, String pacoteNomeObjeto){

		try{
			return this.getControladorUtil().pesquisar(filtro, pacoteNomeObjeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa um objeto utilizando como exemplo para pesquisa um objeto. Este método retorna uma
	 * coleção de objetos do mesmo tipo do objeto que foi passado como parâmetro e com as
	 * mesmas características.
	 * 
	 * @author Rodrigo Oliveira
	 * @param objeto
	 * @return coleção de objetos do mesmo tipo do objeto que foi passado como parâmetro
	 */
	public Collection<Object> pesquisar(Object objetoExemplo){

		try{
			return this.getControladorUtil().pesquisar(objetoExemplo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisar(Collection ids, Filtro filtro, String pacoteNomeObjeto){

		try{
			return this.getControladorUtil().pesquisar(ids, filtro, pacoteNomeObjeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Object pesquisar(Integer id, Class classz){

		try{
			return this.getControladorUtil().pesquisar(id, classz, false);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// método de inserir genérico.Todos as inserções utilizarão esse metodo.

	/**
	 * < <Descrição do método>>
	 * 
	 * @param objeto
	 *            Description of the Parameter
	 */
	public Object inserir(Object objeto){

		try{
			return this.getControladorUtil().inserir(objeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// **************************-----Métodos
	// IMOVEL-----***************************//

	/**
	 * Retorna a quantidade de economias de um imóvel
	 * 
	 * @param imovel
	 *            imóvel que seráconsultado
	 * @return Quantidade de economias
	 */
	public int obterQuantidadeEconomias(Imovel imovel){

		try{
			return this.getControladorImovel().obterQuantidadeEconomias(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public int[] obterConsumoMedioImovel(Imovel imovel, SistemaParametro sistemaParametro) throws ControladorException{

		try{
			return this.getControladorMicromedicao().obterConsumoMedioImovel(imovel, sistemaParametro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param imovel
	 * @return uma coleção de categorias com suas respectivas quantidades de
	 *         economias.
	 */
	public Collection obterQuantidadeEconomiasCategoria(Imovel imovel){

		try{
			return this.getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param imovel
	 * @return uma coleção de categorias com suas respectivas quantidades de
	 *         economias.
	 */
	public Collection obterQuantidadeEconomiasContaCategoria(Conta conta){

		try{
			return this.getControladorImovel().obterQuantidadeEconomiasContaCategoria(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * verifica se existe algum iptu no imovel ou imovelEconomia
	 * 
	 * @param imoveisEconomia
	 *            Descrição do parâmetro
	 * @param imovel
	 *            Description of the Parameter
	 * @param numeroIptu
	 *            Description of the Parameter
	 * @param dataUltimaAlteracao
	 *            Description of the Parameter
	 */
	public void verificarExistenciaIPTU(Collection imoveisEconomia, Imovel imovel, String numeroIptu, Date dataUltimaAlteracao){

		try{
			this.getControladorImovel().verificarExistenciaIPTU(imoveisEconomia, imovel, numeroIptu, dataUltimaAlteracao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * verifica se existe algum numero da celpe no imovel ou imovelEconomia
	 * 
	 * @param imoveisEconomia
	 *            Descrição do parâmetro
	 * @param imovel
	 *            Description of the Parameter
	 * @param numeroCelpe
	 *            Description of the Parameter
	 * @param dataUltimaAlteracao
	 *            Description of the Parameter
	 */
	public void verificarExistenciaCelpe(Collection imoveisEconomia, Imovel imovel, String numeroCelpe, Date dataUltimaAlteracao){

		try{
			this.getControladorImovel().verificarExistenciaCelpe(imoveisEconomia, imovel, numeroCelpe, dataUltimaAlteracao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna a quantidade de economias de um imóvel
	 * 
	 * @param imovel
	 *            imóvel que será consultado
	 * @return Quantidade de economias
	 */
	public Collection obterColecaoImovelSubcategorias(Imovel imovel, Integer quantidadeMinimaEconomia){

		try{
			return this.getControladorImovel().obterColecaoImovelSubcategorias(imovel, quantidadeMinimaEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere imovel
	 * 
	 * @param imovel
	 *            Descrição do parâmetro
	 */
	public void inserirImovel(Imovel imovel){

		try{
			this.getControladorUtil().inserir(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite inserir um imóvel doação e já obter o Código gerado para o imóvel
	 * doação
	 * 
	 * @author César Araújo, Pedro Alexandre
	 * @date 31/08/2006, 17/11/2006
	 * @param imovelDoacao
	 *            -
	 *            instância de um imóvel doação que servirão de base para a
	 *            inserção
	 * @param usuarioLogado
	 * @return Integer - Código do imóvel doação inserido
	 * @throw FachadaException
	 */
	public Integer inserirImovelDoacaoRetorno(ImovelDoacao imovelDoacao, Usuario usuarioLogado){

		try{
			// return (Integer) this.getControladorUtil().inserir(imovelDoacao);
			return this.getControladorImovel().inserirImovelDoacaoRetorno(imovelDoacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * inseri o imóvel economia e o cliente imovel economia do imóvel
	 * subcategoria
	 * 
	 * @param imoveisEconomias
	 *            Descrição do parâmetro
	 */
	public void informarImovelEconomia(Collection imoveisEconomias, Usuario usuarioLogado){

		try{
			// this.getControladorImovel().informarImovelEconomias(imoveisEconomias);
			/**
			 * alterado por pedro alexandre dia 19/11/2006 alterado para acoplar
			 * o esquema de segurança de acesso por abragência
			 */
			this.getControladorImovel().informarImovelEconomias(imoveisEconomias, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * inseri o imóvel economia e o cliente imovel economia do imóvel
	 * subcategoria
	 * 
	 * @param imovelEconomia
	 *            Description of the Parameter
	 */
	public void removerImovelEconomia(ImovelEconomia imovelEconomia, Usuario usuarioLogado){

		try{
			/**
			 * alterado por pedro alexandre dia 19/11/2006 alterado para acoplar
			 * o esquema de segurança de acesso por abragência
			 */
			// this.getControladorImovel().removerImovelEconomia(imovelEconomia);
			this.getControladorImovel().removerImovelEconomia(imovelEconomia, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param imovel
	 *            Descrição do parâmetro
	 * @param subCategorias
	 *            Descrição do parâmetro
	 * @param enderecoImoveis
	 *            Descrição do parâmetro
	 * @param clientes
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer inserirImovelRetorno(Imovel imovel, Collection subCategorias, Collection categoriasConsumoFaixaAreaCategoria,
					Collection enderecoImoveis, Collection clientes, Usuario usuarioLogado){

		try{
			/**
			 * altera por pedro alexandre dia 17/11/2006 para acoplar a
			 * verificação de abrangência
			 */
			/*
			 * Integer id = (Integer)
			 * this.getControladorImovel().inserirImovelRetorno(imovel,
			 * subCategorias,enderecoImoveis, clientes); return id;
			 */
			return (Integer) this.getControladorImovel().inserirImovelRetorno(imovel, subCategorias, categoriasConsumoFaixaAreaCategoria,
							enderecoImoveis, clientes, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0011] Inserir Imóvel
	 * [UC0014] Manter Imóvel
	 * 
	 * @date 21/01/2014
	 * @author Saulo Lima
	 * @param idLocalidade
	 * @param codigoSetorComercial
	 * @param numeroQuadra
	 * @param idRota
	 */
	public void verificarAlteracaoRota(Integer idLocalidade, Integer codigoSetorComercial, Integer numeroQuadra, Integer idRota){

		try{
			this.getControladorImovel().verificarAlteracaoRota(idLocalidade, codigoSetorComercial, numeroQuadra, idRota);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * atualiza imovel
	 * 
	 * @param imovel
	 *            Descrição do parâmetro
	 * @param subcategorias
	 *            Descrição do parâmetro
	 * @param enderecoImovel
	 *            Descrição do parâmetro
	 * @param clientes
	 *            Descrição do parâmetro
	 * @throws AlteracaoInscricaoImovelException
	 */
	public void atualizarImovel(Imovel imovel, Collection subcategorias, Collection categoriasConsumoFaixaAreaCategoria,
					Collection enderecoImovel, Collection clientes, Collection colecaoClientesImoveisRemovidos,
					Collection colecaoImovelSubcategoriasRemovidas, Usuario usuarioLogado, boolean prepararAlteracaoInscricao){

		try{
			/**
			 * alterado por pedro alexandre no dia 17/11/2006 alteração feita
			 * para acoplar o controle de abrangência de usuário
			 */
			this.getControladorImovel().atualizarImovel(imovel, subcategorias, categoriasConsumoFaixaAreaCategoria, enderecoImovel,
							clientes, colecaoClientesImoveisRemovidos, colecaoImovelSubcategoriasRemovidas, usuarioLogado,
							prepararAlteracaoInscricao);
			/*
			 * this.getControladorImovel().atualizarImovel(imovel,
			 * subcategorias, enderecoImovel, clientes,
			 * colecaoClientesImoveisRemovidos,
			 * colecaoImovelSubcategoriasRemovidas);
			 */
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza apenas os dados (Localidade, Setor, Quadra e lote) do imóvel
	 * 
	 * @author Ailton Sousa
	 * @date 09/02/2011
	 *       Alteração para permitir o controle de transação.
	 * @param imovel
	 *            parametros para a consulta
	 * @throws AlteracaoInscricaoImovelException
	 */
	public void atualizarImovelInscricao(Map<Integer, Collection<Imovel>> mapaRotaImoveis, Usuario usuarioLogado,
					String indicadorAlteracaoRota, boolean usuarioConfirmou) throws AlteracaoInscricaoImovelException{

		try{
			this.getControladorImovel().atualizarImovelInscricao(mapaRotaImoveis, usuarioLogado, indicadorAlteracaoRota, usuarioConfirmou);

		}catch(AlteracaoInscricaoImovelException e){
			throw e;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param imovelSubcategoria
	 *            Descrição do parâmetro
	 */
	public void inserirImovelSubCategoria(ImovelSubcategoria imovelSubcategoria){

		try{
			this.getControladorUtil().inserir(imovelSubcategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// **************************-----Métodos TARIFA
	// SOCIAL-----***************************//

	/**
	 * Pesquisa uma coleção de Tarifa Social Dado Economia.
	 * 
	 * @param filtroTarifaSocialDadoEconomia
	 *            Description of the Parameter
	 * @author Thiago
	 * @date 12/12/2005
	 * @return Description of the Return Value
	 */

	public Collection pesquisarTarifaSocialDadoEconomia(FiltroTarifaSocialDadoEconomia filtroTarifaSocialDadoEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarTarifaSocialDadoEconomia(filtroTarifaSocialDadoEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void removerImovelTarfiaSocial(Integer idImovel, Integer idMotivoTarifaSocial) throws ControladorException{

		try{
			this.getControladorTarifaSocial().removerImovelTarfiaSocial(idImovel, idMotivoTarifaSocial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param tarifaSocialCartaoTipo
	 *            Descrição do parâmetro
	 */
	public void atualizarTarifaSocialCartaoTipo(TarifaSocialCartaoTipo tarifaSocialCartaoTipo){

		try{
			this.getControladorTarifaSocial().atualizarTarifaSocialCartaoTipo(tarifaSocialCartaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social [FS0014] - Verificar duplicidade
	 * do cartão do programa social
	 * 
	 * @param numeroCartao
	 * @throws ControladorException
	 */
	public void verificarDuplicidadeCartaoProgramaSocial(Long numeroCartao, TarifaSocialCartaoTipo tipoCartao, Integer idImovel){

		try{

			this.getControladorTarifaSocial().verificarDuplicidadeCartaoProgramaSocial(numeroCartao, tipoCartao, idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param clienteImovelEconomia
	 * @param numeroCartaoSocial
	 * @param dataValidadeCartaoSocial
	 * @param numeroParcelasCartaoSocial
	 * @param consumoMedio
	 * @param valorRendaFamiliar
	 * @param tarifaSocialCartaoTipo
	 * @param tipoRenda
	 * @param imovel
	 */
	public String[] verificarPreenchimentoInserirDadosTarifaSocialMultiplas(Long numeroCelpe, BigDecimal areaConstruida,
					BigDecimal numeroIPTU, Integer idImovelEconomia, String numeroCartaoSocial, String dataValidadeCartaoSocial,
					String numeroParcelasCartaoSocial, Integer consumoMedio, BigDecimal valorRendaFamiliar, String tarifaSocialCartaoTipo,
					String tipoRenda){

		try{
			return this.getControladorTarifaSocial().verificarPreenchimentoInserirDadosTarifaSocialMultiplas(numeroCelpe, areaConstruida,
							numeroIPTU, idImovelEconomia, numeroCartaoSocial, dataValidadeCartaoSocial, numeroParcelasCartaoSocial,
							consumoMedio, valorRendaFamiliar, tarifaSocialCartaoTipo, tipoRenda);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza um tarifaSocialDadoEconomia
	 * 
	 * @param tarifaSocialDadoEconomia
	 *            Descrição do parâmetro
	 */
	public void atualizarTarifaSocialDadoEconomia(TarifaSocialDadoEconomia tarifaSocialDadoEconomia){

		try{
			getControladorTarifaSocial().atualizarTarifaSocialDadoEconomia(tarifaSocialDadoEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza o perfil do imóvel para tarifa social
	 * 
	 * @param imovel
	 */
	public void atualizarImovelPerfilTarifaSocial(Imovel imovel, boolean recadastramento){

		try{

			getControladorTarifaSocial().atualizarImovelPerfilTarifaSocial(imovel, recadastramento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Atualiza o enquadramento de um imovel no regime de tarifa social
	 * 
	 * @param imovel
	 *            Descrição do parâmetro
	 * @param tarifaSocialDado
	 *            Descrição do parâmetro
	 * @param tarifaSocialDadoEconomia
	 *            Descrição do parâmetro
	 */
	public void atualizarDadosTarifaSocialImovel(TarifaSocialDadoEconomia tarifaSocialDadoEconomia){

		try{

			getControladorTarifaSocial().atualizarDadosTarifaSocialImovel(tarifaSocialDadoEconomia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// **************************-----Métodos
	// CLIENTE-----***************************//
	/**
	 * Insere um cliente no sistema
	 * 
	 * @author Saulo Lima
	 * @date 17/03/2009
	 *       Permitir que seja informado um CNPJ já cadastrado desde que seja igual ao do cliente
	 *       responsável superior
	 * @param cliente
	 *            Cliente a ser inserido
	 * @param telefones
	 *            Telefones do cliente
	 * @param enderecos
	 *            Endereços do cliente
	 * @return Id do cliente inserido
	 * @param usuario
	 * @param responsavelCliente
	 * @param indDadosAdicionais
	 * @return
	 */
	public Integer inserirCliente(Cliente cliente, Collection<ClienteFone> telefones, Collection<ClienteEndereco> enderecos,
					Usuario usuario, ClienteResponsavel responsavelCliente, String indDadosAdicionais){

		try{
			return this.getControladorCliente().inserirCliente(cliente, telefones, enderecos, usuario, responsavelCliente,
							indDadosAdicionais);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza um cliente no sistema
	 * 
	 * @author eduardo henrique
	 * @date 27/06/2008
	 *       Adição de Validação do CPF e RG de CLiente, caso exista
	 * @author Saulo Lima
	 * @date 17/03/2009
	 *       Permitir que seja informado um CNPJ já cadastrado desde que seja igual ao do cliente
	 *       responsável superior
	 * @param cliente
	 *            Cliente a ser atualizado
	 * @param telefones
	 *            Telefones do cliente
	 * @param enderecos
	 * @param responsavelCliente
	 * @param usuario
	 * @param indDadosAdicionais
	 * @param idRegistroAtualizacao
	 */
	public void atualizarCliente(Cliente cliente, Collection<ClienteFone> telefones, Collection<ClienteEndereco> enderecos,
					ClienteResponsavel responsavelCliente, Usuario usuario, String indDadosAdicionais, String idRegistroAtualizacao){

		try{
			this.getControladorCliente().atualizarCliente(cliente, telefones, enderecos, responsavelCliente, usuario, indDadosAdicionais,
							idRegistroAtualizacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza um bairro no sistema
	 * 
	 * @param bairro
	 *            Descrição do parâmetro
	 */
	public void atualizarBairro(Bairro bairro, Collection colecaoBairroArea, Collection colecaoBairroAreaRemover, Usuario usuarioLogado){

		try{
			this.getControladorGeografico().atualizarBairro(bairro, colecaoBairroArea, colecaoBairroAreaRemover, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param codigoSetorComercial
	 *            Descrição do parâmetro
	 * @param idMunicipio
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 * @exception ErroRepositorioException
	 *                Descrição da exceção
	 */
	public Collection pesquisarMunicipoPeloSetorComercial(String codigoSetorComercial, String idMunicipio){

		try{
			return this.getControladorGeografico().pesquisarMunicipoPeloSetorComercial(codigoSetorComercial, idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método que retorna o maior Código do bairro de um Município
	 * 
	 * @author Rafael Corrêa
	 * @date 10/07/2006
	 * @param idMunicipio
	 * @return
	 * @throws ControladorException
	 */
	public int pesquisarMaximoCodigoBairro(Integer idMunicipio){

		try{
			return this.getControladorGeografico().pesquisarMaximoCodigoBairro(idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param clienteImovel
	 *            Descrição do parâmetro
	 */
	public void inserirClienteImovel(ClienteImovel clienteImovel){

		try{
			this.getControladorUtil().inserir(clienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Metodo que retorno todos os clinte do filtro passado
	 * 
	 * @param filtroCliente
	 *            Descrição do parâmetro
	 * @return Description of the Return Value
	 * @autor thiago toscano
	 * @date 15/12/2005
	 * @throws ControladorException
	 */
	public Collection pesquisarCliente(FiltroCliente filtroCliente){

		try{
			return this.getControladorCliente().pesquisarCliente(filtroCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de cliente imovel com uma query especifica
	 * 
	 * @param filtroClienteImovel
	 *            parametros para a consulta
	 * @return Description of the Return Value
	 */

	public Collection pesquisarClienteImovel(FiltroClienteImovel filtroClienteImovel, Integer numeroPagina){

		try{
			return this.getControladorCliente().pesquisarClienteImovel(filtroClienteImovel, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarImovelTarfiaSocial(FiltroClienteImovel filtroClienteImovel, Integer numeroPagina){

		try{
			return this.getControladorTarifaSocial().pesquisarImovelTarfiaSocial(filtroClienteImovel, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de cliente imovel com uma query especifica
	 * 
	 * @param filtroClienteImovel
	 *            parametros para a consulta
	 * @return Description of the Return Value
	 */

	public Collection pesquisarClienteImovel(FiltroClienteImovel filtroClienteImovel){

		try{
			return this.getControladorCliente().pesquisarClienteImovel(filtroClienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de cliente imovel com uma query especifica
	 * 
	 * @param filtroClienteImovel
	 *            parametros para a consulta
	 * @return Description of the Return Value
	 */

	public Collection<Imovel> pesquisarClienteImovelRelatorio(FiltroClienteImovel filtroClienteImovel){

		try{
			return this.getControladorCliente().pesquisarClienteImovelRelatorio(filtroClienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma a quantidade de cliente imovel com uma query especifica
	 * [UC0015] Filtrar Imovel
	 * 
	 * @param filtroClienteImovel
	 *            parametros para a consulta
	 * @author Rafael Santos
	 * @since 26/06/2006
	 * @return Description of the Return Value
	 */

	public int pesquisarQuantidadeClienteImovel(FiltroClienteImovel filtroClienteImovel){

		try{
			return this.getControladorCliente().pesquisarQuantidadeClienteImovel(filtroClienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de cliente imovel com uma query especifica
	 * 
	 * @param filtroClienteEndereco
	 *            Descrição do parâmetro
	 * @return Description of the Return Value
	 */
	public Collection pesquisarClienteEndereco(FiltroClienteEndereco filtroClienteEndereco){

		try{
			return this.getControladorCliente().pesquisarClienteEndereco(filtroClienteEndereco);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param faturamentoGrupo
	 *            Descrição do parâmetro
	 * @param sistemaParametro
	 *            Descrição do parâmetro
	 */
	// public void consistirLeiturasCalcularConsumos(
	// FaturamentoGrupo faturamentoGrupo,
	// SistemaParametro sistemaParametro, Collection<Rota> colecaoRotas) {
	//
	// System.out.println("-----INíCIO CONSISTIR-----");
	//
	// try {
	// this.getControladorMicromedicao()
	// .consistirLeiturasCalcularConsumos(faturamentoGrupo,
	// sistemaParametro, colecaoRotas);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	//
	// System.out.println("-----FIM CONSISTIR-----");
	//
	// }
	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * Cobrança previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de Cobrança do sistema
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados(){

		Collection<CobrancaAcaoAtividadeCronograma> retorno = null;
		try{
			retorno = getControladorCobranca().pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados();
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

		return retorno;

	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * Cobrança previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de Cobrança do sistema
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados(){

		Collection<CobrancaAcaoAtividadeComando> retorno = null;
		try{
			retorno = getControladorCobranca().pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;

	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UC0145] - Inserir Conta
	 * 
	 * @author Raphael Rossiter, Pedro Alexandre
	 * @date 05/12/2005, 20/11/2006
	 * @param mesAnoConta
	 * @param imovel
	 * @param colecaoDebitoCobrado
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param colecaoCategoria
	 * @param consumoAgua
	 * @param consumoEsgoto
	 * @param percentualEsgoto
	 * @param dataVencimentoConta
	 * @param calcularValoresConta
	 * @param contaMotivoInclusao
	 * @param requestMap
	 * @param usuarioLogado
	 * @return
	 */
	public Integer inserirConta(Integer mesAnoConta, Imovel imovel, Collection colecaoDebitoCobrado,
					LigacaoAguaSituacao ligacaoAguaSituacao, LigacaoEsgotoSituacao ligacaoEsgotoSituacao, Collection colecaoCategoria,
					String consumoAgua, String consumoEsgoto, String percentualEsgoto, Date dataVencimentoConta,
					Collection<CalcularValoresAguaEsgotoHelper> calcularValoresConta, ContaMotivoInclusao contaMotivoInclusao,
					Map<String, String[]> requestMap, Usuario usuarioLogado, Integer consumoPoco){

		try{
			/**
			 * alterado por pedro alexandre dia 20/11/2006 alteração realizada
			 * para acoplar o controle de abrangência
			 */
			// Integer id =
			// this.getControladorFaturamento().inserirConta(mesAnoConta,
			// imovel, colecaoDebitoCobrado, ligacaoAguaSituacao,
			// ligacaoEsgotoSituacao, colecaoCategoria, consumoAgua,
			// consumoEsgoto, percentualEsgoto, dataVencimentoConta,
			// calcularValoresConta, contaMotivoInclusao, requestMap);
			Integer id = this.getControladorFaturamento().inserirConta(mesAnoConta, imovel, colecaoDebitoCobrado, ligacaoAguaSituacao,
							ligacaoEsgotoSituacao, colecaoCategoria, consumoAgua, consumoEsgoto, percentualEsgoto, dataVencimentoConta,
							calcularValoresConta, contaMotivoInclusao, requestMap, usuarioLogado, consumoPoco);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Calcula os valores da conta de acordo com os parâmetros passados
	 * [UC0145] - Inserir Conta [SF0001] - Determinar Valores para Faturamento
	 * de Água e/ou Esgoto Author: Raphael Rossiter 05/12/2005
	 * 
	 * @param mesAnoConta
	 * @param imovelID
	 * @param situacaoAguaConta
	 * @param situacaoEsgotoConta
	 * @param colecaoCategoria
	 * @param consumoAgua
	 * @param consumoEsgoto
	 * @param percentualEsgoto
	 * @return Collection<CalcularValoresAguaEsgotoHelper>
	 * @throws ControladorException
	 */
	public Collection<CalcularValoresAguaEsgotoHelper> calcularValoresConta(String mesAnoConta, String imovelID, Integer situacaoAguaConta,
					Integer situacaoEsgotoConta, Collection colecaoCategoria, String consumoAgua, String consumoEsgoto,
					String percentualEsgoto, Integer idConsumoTarifaConta, Usuario usuarioLogado, Date dataLeituraAnterior,
					Date dataLeituraAtual){

		try{
			Collection<CalcularValoresAguaEsgotoHelper> retorno;

			retorno = this.getControladorFaturamento().calcularValoresConta(mesAnoConta, imovelID, situacaoAguaConta, situacaoEsgotoConta,
							colecaoCategoria, consumoAgua, consumoEsgoto, percentualEsgoto, idConsumoTarifaConta, usuarioLogado,
							dataLeituraAnterior, dataLeituraAtual);

			return retorno;

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Calcula o valor total dos débitos de uma conta de acordo com o informado
	 * pelo usuário
	 * [UC0145] - Inserir Conta Author: Raphael Rossiter Data: 10/01/2006
	 * 
	 * @param colecaoDebitoCobrado
	 * @param requestMap
	 * @return BigDecimal valorTotalDebitoConta
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorTotalDebitoConta(Collection<DebitoCobrado> colecaoDebitoCobrado, Map<String, String[]> requestMap){

		try{
			BigDecimal retorno;

			retorno = this.getControladorFaturamento().calcularValorTotalDebitoConta(colecaoDebitoCobrado, requestMap);

			return retorno;

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0150] - Retificar Conta Author: Raphael Rossiter Data: 10/01/2006
	 * Calcula o valor total dos Créditos de uma conta de acordo com o informado
	 * pelo usuário
	 * 
	 * @param colecaoCreditoRealizado
	 * @param requestMap
	 * @return BigDecimal valorTotalCreditoConta
	 */
	public BigDecimal calcularValorTotalCreditoConta(Collection<CreditoRealizado> colecaoCreditoRealizado, Map<String, String[]> requestMap){

		try{
			BigDecimal retorno;

			retorno = this.getControladorFaturamento().calcularValorTotalCreditoConta(colecaoCreditoRealizado, requestMap);

			return retorno;

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0120 - Calcular Valores de Água e/ou Esgoto]
	 * 
	 * @param anoMesReferencia
	 * @param ligacaoSituacaoAguaId
	 * @param ligacaoSituacaoEsgotoId
	 * @param indicadorFaturamentoAgua
	 * @param indicadorFaturamentoEsgoto
	 * @param categoriasImovel
	 * @param consumoFaturadoAguaMes
	 * @param consumoFaturadoEsgotoMes
	 * @param consumoMinimoLigacao
	 * @param dataLeituraAnterior
	 * @param dataLeituraAtual
	 * @param percentualEsgoto
	 * @param tarifaImovel
	 */
	public Collection<CalcularValoresAguaEsgotoHelper> calcularValoresAguaEsgoto(Integer anoMesReferencia, Integer ligacaoSituacaoAguaId,
					Integer ligacaoSituacaoEsgotoId, Short indicadorFaturamentoAgua, Short indicadorFaturamentoEsgoto,
					Collection categoriasImovel, Integer consumoFaturadoAguaMes, Integer consumoFaturadoEsgotoMes,
					int consumoMinimoLigacao, Date dataLeituraAnterior, Date dataLeituraAtual, BigDecimal percentualEsgoto,
					Integer tarifaImovel, Integer idImovel, ConsumoTarifaVigencia consumoTarifaVigencia){

		try{
			Collection<CalcularValoresAguaEsgotoHelper> retorno = this.getControladorFaturamento().calcularValoresAguaEsgoto(
							anoMesReferencia, ligacaoSituacaoAguaId, ligacaoSituacaoEsgotoId, indicadorFaturamentoAgua,
							indicadorFaturamentoEsgoto, categoriasImovel, consumoFaturadoAguaMes, consumoFaturadoEsgotoMes,
							consumoMinimoLigacao, dataLeituraAnterior, dataLeituraAtual, percentualEsgoto, tarifaImovel, idImovel,
							consumoTarifaVigencia);

			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método reponsável pela totalização dos valores de Água e esgoto por
	 * categoria, a partir da coleção retornada pelo [UC0120] - Calcular Valores
	 * de Água e/ou Esgoto
	 * 
	 * @param colecaoCalcularValoresAguaEsgotoHelper
	 * @return
	 */
	public Collection<CalcularValoresAguaEsgotoHelper> calcularValoresAguaEsgotoTotalizandoPorCategoria(
					Collection colecaoCalcularValoresAguaEsgotoHelper){

		try{
			Collection<CalcularValoresAguaEsgotoHelper> retorno = this.getControladorFaturamento()
							.calcularValoresAguaEsgotoTotalizandoPorCategoria(colecaoCalcularValoresAguaEsgotoHelper);

			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UC0147] - Cancelar Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 10/12/2005
	 * @param colecaoContas
	 * @param identificadores
	 * @param contaMotivoCancelamento
	 * @param usuarioLogado
	 */
	public void cancelarConta(Collection<Conta> colecaoContas, String identificadores, ContaMotivoCancelamento contaMotivoCancelamento,
					Usuario usuarioLogado, String numeroRA){

		try{
			this.getControladorFaturamento()
							.cancelarConta(colecaoContas, identificadores, contaMotivoCancelamento, usuarioLogado, numeroRA);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UC0148] - Colocar Conta em Revisão
	 * 
	 * @author Raphael Rossiter
	 * @date 21/12/2005
	 * @param colecaoContas
	 * @param identificadores
	 * @param contaMotivoRevisao
	 */
	public void colocarRevisaoConta(Collection<Conta> colecaoContas, String identificadores, ContaMotivoRevisao contaMotivoRevisao,
					Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().colocarRevisaoConta(colecaoContas, identificadores, contaMotivoRevisao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0149] - Retirar Conta de Revisão Author: Raphael Rossiter Data:
	 * 22/12/2005
	 * 
	 * @param colecaoContas
	 *            -
	 *            coleção com todas as contas do imóvel
	 * @param identificadores
	 *            -
	 *            identifica através do ID, quais as contas que serão retiradas
	 *            de revisão
	 */
	public void retirarRevisaoConta(Collection<Conta> colecaoContas, String identificadores, Usuario usuario){

		try{
			this.getControladorFaturamento().retirarRevisaoConta(colecaoContas, identificadores, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0151] - Alterar Vencimento de Conta Author: Raphael Rossiter Data:
	 * 22/12/2005
	 * 
	 * @param colecaoContas
	 *            -
	 *            coleção com todas as contas do imóvel
	 * @param identificadores
	 *            -
	 *            identifica através do ID, quais as contas que sofrerão
	 *            alteração na sua data de vencimento de revisão
	 * @param dataVencimento
	 *            -
	 *            a nova data de vencimento
	 */
	public void alterarVencimentoConta(Collection<Conta> colecaoContas, String identificadores, Date dataVencimento, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().alterarVencimentoConta(colecaoContas, identificadores, dataVencimento, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0150] - Retificar Conta Author: Raphael Rossiter Data: 26/12/2005
	 * 
	 * @param conta
	 * @return uma coleção com os débitos cobrados de uma conta
	 */
	public Collection obterDebitosCobradosConta(Conta conta){

		try{
			return this.getControladorFaturamento().obterDebitosCobradosConta(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0150] - Retificar Conta Author: Raphael Rossiter Data: 28/12/2005
	 * 
	 * @param conta
	 * @return uma coleção com os Créditos realizados de uma conta
	 */
	public Collection obterCreditosRealizadosConta(Conta conta){

		try{
			return this.getControladorFaturamento().obterCreditosRealizadosConta(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param imovel
	 * @param situacao
	 */
	public Date buscarDataLeituraCronograma(Imovel imovel, boolean situacao, Integer anoMesReferencia){

		try{
			Date retorno = this.getControladorFaturamento().buscarDataLeituraCronograma(imovel, situacao, anoMesReferencia);

			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// **********************-----Métodos LOCALIDADE-----******************//

	/**
	 * Inserir Localidade
	 * 
	 * @param localidade
	 *            Descrição do parâmetro
	 * @param usuario
	 */
	public void inserirLocalidade(Localidade localidade, Usuario usuario, Concessionaria concessionaria){

		try{
			this.getControladorLocalidade().inserirLocalidade(localidade, usuario, concessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir Localidade
	 * 
	 * @param localidade
	 *            Descrição do parâmetro
	 * @param usuario
	 * @return id da localidade
	 */
	public Integer inserirLocalidadeRetorno(Localidade localidade, Usuario usuario, Concessionaria concessionaria){

		try{
			Integer id = (Integer) this.getControladorLocalidade().inserirLocalidade(localidade, usuario, concessionaria);

			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Localidade
	 * 
	 * @param localidade
	 *            Descrição do parâmetro
	 * @param usuario
	 */
	public void atualizarLocalidade(Localidade localidade, Usuario usuario, Integer idConcessionaria, String dataInicioVigencia){

		try{
			this.getControladorLocalidade().atualizarLocalidade(localidade, usuario, idConcessionaria, dataInicioVigencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Localidade
	 * 
	 * @param ids
	 * @param usuario
	 */
	public void removerLocalidade(String[] ids, Usuario usuario){

		try{
			this.getControladorLocalidade().removerLocalidade(ids, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param setorComercial
	 *            Descrição do parâmetro
	 */
	public Integer inserirSetorComercial(SetorComercial setorComercial, Usuario usuarioLogado){

		try{

			return this.getControladorLocalidade().inserirSetorComercial(setorComercial, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param setorComercial
	 *            Descrição do parâmetro
	 */
	public void removerSetorComercial(String[] ids, Usuario usuarioLogado){

		try{

			this.getControladorLocalidade().removerSetorComercial(ids, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * atualiza Setor Comercial
	 * 
	 * @param setorComercial
	 *            Descrição do parâmetro
	 */
	public void atualizarSetorComercial(SetorComercial setorComercial, Collection<SetorComercialVencimento> colSetorComVencIncluir,
					Collection<SetorComercialVencimento> colSetorComVencAtualizar, Usuario usuarioLogado, Collection rotas){

		try{
			this.getControladorLocalidade().atualizarSetorComercial(setorComercial, colSetorComVencIncluir, colSetorComVencAtualizar,
							usuarioLogado, rotas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * atualiza Setor Comercial
	 * 
	 * @param quadra
	 *            Descrição do parâmetro
	 */
	public void atualizarQuadra(Quadra quadra, Usuario usuarioLogado){

		try{
			this.getControladorLocalidade().atualizarQuadra(quadra, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa uma coleção de setor comercial com uma query especifica
	 * 
	 * @param idLocalidade
	 *            Description of the Parameter
	 * @return Description of the Return Value
	 */

	public Collection pesquisarSetorComercial(int idLocalidade){

		try{
			return this.getControladorLocalidade().pesquisarSetorComercial(idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de quadra com uma query especifica
	 * 
	 * @param idSetorComercial
	 *            Description of the Parameter
	 * @return Description of the Return Value
	 */

	public Collection pesquisarQuadra(int idSetorComercial){

		try{
			return this.getControladorLocalidade().pesquisarQuadra(idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * O método recebe uma coleção de faturamento atividades acha as que tem
	 * atividade predecessora e compara a data desta com a data da sua
	 * predecessora.
	 * 
	 * @param faturamentoAtividadeCronogramas
	 *            Descrição do parâmetro
	 * @param faturamentoGrupoCronogramaMensal
	 *            Descrição do parâmetro
	 * @throws ControladorException
	 */
	public void validarFaturamentoCronograma(Collection faturamentoAtividadeCronogramas){

		try{
			getControladorFaturamento().validarFaturamentoCronograma(faturamentoAtividadeCronogramas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo para validar: Caso usuário informe uma data prevista, de qualquer
	 * atividade, com o mês/ano maior que o mês ]/ano do cronograma+1, exibir a
	 * mensagem: "A data prevista da atividade não pode ser superior a <<mês/ano
	 * do cronograma+1>>"
	 * 
	 * @param faturamentoAtividadeCronogramas
	 *            Descrição do parâmetro
	 * @param mesAno
	 * @throws ControladorException
	 */
	public void validarFaturamentoCronogramaAtividadeMaiorQueMesAnoCronograma(int anoMes, Collection faturamentoAtividadeCronogramas){

		try{
			getControladorFaturamento().validarFaturamentoCronogramaAtividadeMaiorQueMesAnoCronograma(anoMes,
							faturamentoAtividadeCronogramas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param faturamentoGrupoCronogramaMensal
	 *            Descrição do parâmetro
	 * @param faturamentoAtividadeCronogramas
	 *            Descrição do parâmetro
	 */
	public String inserirFaturamentoGrupoCronogramaMensal(FaturamentoGrupoCronogramaMensal faturamentoGrupoCronogramaMensal,
					Collection faturamentoAtividadeCronogramas, Usuario usuarioLogado, Integer quantidadeCronogramas){

		try{
			return getControladorFaturamento().inserirFaturamentoGrupoCronogramaMensal(faturamentoGrupoCronogramaMensal,
							faturamentoAtividadeCronogramas, usuarioLogado, quantidadeCronogramas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param faturamentoGrupoCronogramaMensal
	 *            Descrição do parâmetro
	 * @param faturamentoAtividadeCronogramas
	 *            Descrição do parâmetro
	 */
	public String atualizarFaturamentoGrupoCronogramaMensal(FaturamentoGrupoCronogramaMensal faturamentoGrupoCronogramaMensal,
					Collection faturamentoAtividadeCronogramas, Usuario usuarioLogado){

		try{
			return getControladorFaturamento().atualizarFaturamentoGrupoCronogramaMensal(faturamentoGrupoCronogramaMensal,
							faturamentoAtividadeCronogramas, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método permite faturar um conjunto de rotas de um grupo de
	 * faturamento
	 * 
	 * @param rotas
	 *            Descrição do parâmetroa
	 */
	/*
	 * public void faturarGrupoFaturamento(Collection rotas) { try {
	 * getControladorFaturamento().faturarGrupoFaturamento(rotas); } catch
	 * (ControladorException ex) { throw new FachadaException(ex.getMessage(),
	 * ex, ex .getParametroMensagem()); } }
	 */

	// *************************---- FIM Métodos
	// FATURAMENTO----********************
	/**
	 * < <Descrição do método>>
	 * 
	 * @param objeto
	 *            Descrição do parâmetro
	 */
	public void inserirOuAtualizar(Object objeto){

		try{
			this.getControladorUtil().inserirOuAtualizar(objeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * inseri um logradouro na base
	 * 
	 * @param logradouro
	 *            Description of the Parameter
	 * @param bairro
	 *            Description of the Parameter
	 * @return Description of the Return Value
	 */
	public Integer inserirLogradouro(Logradouro logradouro, Collection<Bairro> colecaoBairros, Collection<Cep> colecaoCeps){

		try{
			return this.getControladorEndereco().inserirLogradouro(logradouro, colecaoBairros, colecaoCeps);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * atualiza um logradouro na base e se tiver um bairro inseri na tabela de
	 * ligação logradouroBairro
	 * 
	 * @param logradouro
	 *            Description of the Parameter
	 * @param bairro
	 *            Description of the Parameter
	 */
	public void atualizarLogradouro(Logradouro logradouro, Collection colecaoBairros, Collection colecaoCeps,
					Collection<AtualizarLogradouroBairroHelper> colecaoBairrosAtualizacao,
					Collection<AtualizarLogradouroCepHelper> colecaoCepsAtualizacao){

		try{
			this.getControladorEndereco().atualizarLogradouro(logradouro, colecaoBairros, colecaoCeps, colecaoBairrosAtualizacao,
							colecaoCepsAtualizacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir os ceps importados
	 * 
	 * @param cepsImportados
	 *            Coleção contendo todos os CEPs lidos no arquivo
	 * @return retorno
	 *         Array de String contendo nas posições:
	 *         0- Total de CEPs
	 *         1- CEPs Inseridos
	 *         2- CEPs Atualizados
	 *         3- CEPs Desprezados
	 */
	public String[] inserirCepImportados(Collection cepsImportados){

		// this.enviarMensagemControladorBatch(
		// MetodosBatch.ENDERECO_INSERIR_CEP_IMPORTADOS,
		// ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
		// new Object[] { cepsImportados });

		String[] retorno = {"0", "0", "0", "0"};

		try{
			retorno = this.getControladorEndereco().inserirCepImportados(cepsImportados);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return retorno;
	}

	/**
	 * remove um logradouro e o bairro ta tabela ligação logradouroBairro do
	 * logradouro removido.
	 * 
	 * @param ids
	 *            Description of the Parameter
	 * @param pacoteLogradouro
	 *            Descrição do parâmetro
	 */
	public void removerLogradouro(String[] ids, String pacoteLogradouro, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorEndereco().removerLogradouro(ids, pacoteLogradouro, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 18/11/2006
	 * @param ids
	 * @param usuarioLogado
	 */
	public void removerImovel(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorImovel().removerImovel(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * <<Descrição do método>>
	 * 
	 * @author Saulo Lima
	 * @date 03/03/2009
	 *       Alteração para inserir os hidrômetros e atualizar os que já existem na base;
	 *       Retornar a quantidade de hidrômetros inseridos.
	 * @param hidrometro
	 * @param fixo
	 * @param faixaInicial
	 * @param faixaFinal
	 * @return int
	 *         Quantidade de Hidrômetros inseridos
	 * @throws ControladorException
	 */
	public int inserirHidrometro(Hidrometro hidrometro, String fixo, Integer faixaInicial, Integer faixaFinal, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirHidrometro(hidrometro, fixo, faixaInicial, faixaFinal, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Hidrometro
	 * 
	 * @author Hebert Falcão
	 * @date 18/02/2011
	 * @throws ControladorException
	 */
	public void removerHidrometro(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().removerHidrometro(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param fixo
	 *            Descrição do parâmetro
	 * @param faixaInicial
	 *            Descrição do parâmetro
	 * @param faixaFinal
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisarNumeroHidrometroFaixa(String fixo, String faixaInicial, String faixaFinal){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroHidrometroFaixa(fixo, faixaInicial, faixaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa uma coleção de hidrômetros de acordo com fixo, faixa inicial e
	 * faixa final
	 * 
	 * @param fixo
	 *            Descrição do parâmetro
	 * @param faixaInicial
	 *            Descrição do parâmetro
	 * @param faixaFinal
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisarNumeroHidrometroFaixaRelatorio(String fixo, String faixaInicial, String faixaFinal){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroHidrometroFaixaRelatorio(fixo, faixaInicial, faixaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param fixo
	 *            Descrição do parâmetro
	 * @param faixaInicial
	 *            Descrição do parâmetro
	 * @param faixaFinal
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisarNumeroHidrometroFaixaPaginacao(String fixo, String faixaInicial, String faixaFinal, Integer numeroPagina){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroHidrometroFaixaPaginacao(fixo, faixaInicial, faixaFinal, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param fixo
	 *            Descrição do parâmetro
	 * @param faixaInicial
	 *            Descrição do parâmetro
	 * @param faixaFinal
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection pesquisarNumeroHidrometroFaixaComLimite(String fixo, String faixaInicial, String faixaFinal){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroHidrometroFaixaComLimite(fixo, faixaInicial, faixaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param fixo
	 *            Descrição do parâmetro
	 * @param faixaInicial
	 *            Descrição do parâmetro
	 * @param faixaFinal
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer pesquisarNumeroHidrometroFaixaCount(String fixo, String faixaInicial, String faixaFinal){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroHidrometroFaixaCount(fixo, faixaInicial, faixaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Description of the Method
	 * 
	 * @param hidrometro
	 *            Description of the Parameter
	 */
	public void atualizarHidrometro(Hidrometro hidrometro, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarHidrometro(hidrometro, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Description of the Method
	 * 
	 * @param hidrometros
	 *            Description of the Parameter
	 * @param hidrometroAtualizado
	 *            Description of the Parameter
	 */
	public void atualizarConjuntoHidrometro(Collection hidrometros, Hidrometro hidrometroAtualizado, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarConjuntoHidrometro(hidrometros, hidrometroAtualizado, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param colecaoHidrometro
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public String verificarLocalArmazenagemSituacao(Collection colecaoHidrometro){

		try{
			return this.getControladorMicromedicao().verificarLocalArmazenagemSituacao(colecaoHidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param colecaoHidrometro
	 *            Descrição do parâmetro
	 * @param data
	 *            Descrição do parâmetro
	 * @param hora
	 *            Descrição do parâmetro
	 * @param idLocalArmazenagemDestino
	 *            Descrição do parâmetro
	 * @param idMotivoMovimentacao
	 *            Descrição do parâmetro
	 * @param parecer
	 *            Descrição do parâmetro
	 */
	public void inserirAtualizarMovimentacaoHidrometroIds(Collection colecaoHidrometro, String data, String hora,
					String idLocalArmazenagemDestino, String idMotivoMovimentacao, String parecer, Usuario usuario){

		try{
			this.getControladorMicromedicao().inserirAtualizarMovimentacaoHidrometroIds(colecaoHidrometro, data, hora,
							idLocalArmazenagemDestino, idMotivoMovimentacao, parecer, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param colecaoHidrometro
	 *            Descrição do parâmetro
	 * @param ids
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection obterColecaoObjetosSelecionados(Collection colecaoHidrometro, String[] ids){

		try{
			return this.getControladorMicromedicao().obterColecaoObjetosSelecionados(colecaoHidrometro, ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param faturamentoGrupo
	 *            Descrição do parâmetro
	 * @param imovel
	 *            Descrição do parâmetro
	 */
	public void executarImovelTestesMedicaoConsumo(FaturamentoGrupo faturamentoGrupo, Imovel imovel){

		try{
			this.getControladorMicromedicao().executarImovelTestesMedicaoConsumo(faturamentoGrupo, imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param filtro
	 *            Descrição do parâmetro
	 * @param pacoteNomeObjeto
	 *            Descrição do parâmetro
	 * @param limite
	 *            Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Collection limiteMaximoFiltroPesquisa(Filtro filtro, String pacoteNomeObjeto, int limite){

		try{
			return this.getControladorUtil().limiteMaximoFiltroPesquisa(filtro, pacoteNomeObjeto, limite);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica a existência de cronograma para o grupo de faturamento
	 * 
	 * @param FaturamentoGrupo
	 *            Descrição do parâmetro
	 */
	public void verificarExistenciaCronogramaGrupo(FaturamentoGrupo faturamentoGrupo){

		try{
			this.getControladorFaturamento().verificarExistenciaCronogramaGrupo(faturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verificar existência da atividade no cronograma do grupo do mês corrente
	 * 
	 * @param faturamentoGrupo
	 * @param faturamentoAtividade
	 */
	public boolean verificarExistenciaCronogramaAtividadeGrupo(FaturamentoAtividade faturamentoAtividade, FaturamentoGrupo faturamentoGrupo){

		try{
			return this.getControladorFaturamento().verificarExistenciaCronogramaAtividadeGrupo(faturamentoAtividade, faturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * O sistema seleciona as atividades que podem ser comandadas
	 * 
	 * @return Uma coleção de atividade de faturamento
	 */
	public Collection selecionarAtividadeFaturamentoQuePodeSerComandada(FaturamentoGrupo faturamentoGrupo){

		try{
			return this.getControladorFaturamento().selecionarAtividadeFaturamentoQuePodeSerComandada(faturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar existência de rotas para o grupo
	 * 
	 * @param FaturamentoGrupo
	 *            Descrição do parâmetro
	 */
	public Collection verificarExistenciaRotaGrupo(FaturamentoGrupo faturamentoGrupo){

		try{
			return this.getControladorFaturamento().verificarExistenciaRotaGrupo(faturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verificar existência de rotas para o grupo
	 * 
	 * @param FaturamentoGrupo
	 *            Descrição do parâmetro
	 */
	public Collection verificarSituacaoAtividadeRota(Collection colecaoRotasGrupo, FaturamentoAtividade faturamentoAtividade,
					Integer anoMesReferencia, boolean habilitada){

		try{
			return this.getControladorFaturamento().verificarSituacaoAtividadeRota(colecaoRotasGrupo, faturamentoAtividade,
							anoMesReferencia, habilitada);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0144] Inserir Comando Atividade de Faturamento
	 * 
	 * @param usuarioLogado
	 */

	public Integer inserirComandoAtividadeFaturamento(FaturamentoGrupo faturamentoGrupo, FaturamentoAtividade faturamentoAtividade,
					Collection colecaoRotas, Date dataVencimentoGrupo, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirComandoAtividadeFaturamento(faturamentoGrupo, faturamentoAtividade,
							colecaoRotas, dataVencimentoGrupo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0104] Manter Comando Atividade de Faturamento
	 * 
	 * @return uma lista de atividades de faturamento comandadas e ainda Não
	 *         realizadas
	 */
	public Collection buscarAtividadeComandadaNaoRealizada(Integer numeroPagina, Integer idFaturamentoGrupo, Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento()
							.buscarAtividadeComandadaNaoRealizada(numeroPagina, idFaturamentoGrupo, anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso permite alterar ou excluir um comando de atividade de
	 * faturamento
	 * [UC0104] Manter Comando Atividade de Faturamento
	 * Retorna o count do resultado da pesquisa de Faturamento Atividade
	 * Cronograma Não realizadas
	 * buscarAtividadeComandadaNaoRealizadaCount
	 * 
	 * @author Roberta Costa
	 * @date 18/07/2006
	 * @param filtroFaturamentoAtividadeCronograma
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer buscarAtividadeComandadaNaoRealizadaCount(Integer idFaturamentoGrupo, Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento().buscarAtividadeComandadaNaoRealizadaCount(idFaturamentoGrupo, anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0104] Manter Comando Atividade de Faturamento
	 * [SB0002] - Excluir Comando de Atividade de Faturamento
	 * 
	 * @param usuarioLogado
	 */

	public void removerComandoAtividadeFaturamento(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().removerComandoAtividadeFaturamento(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0104] Manter Comando Atividade de Faturamento
	 * Atualizar Comando de Atividade de Faturamento
	 * 
	 * @param usuarioLogado
	 */

	public void atualizarComandoAtividadeFaturamento(FaturamentoAtividadeCronograma faturamentoAtividadeCronograma,
					Collection colecaoFaturamentoAtividadeCronogramaRota, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarComandoAtividadeFaturamento(faturamentoAtividadeCronograma,
							colecaoFaturamentoAtividadeCronogramaRota, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o Único registro do SistemaParametros.
	 * 
	 * @return Descrição do retorno
	 */
	public SistemaParametro pesquisarParametrosDoSistema(){

		try{
			return this.getControladorUtil().pesquisarParametrosDoSistema();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		/*
		 * }
		 * public HashMap<String, ParametrosGSAN> pesquisarParametrosGsan(){
		 * try{
		 * return this.getControladorUtil().pesquisarParametrosGsan();
		 * }catch(ControladorException ex){
		 * throw new FachadaException(ex.getMessage(), ex, ex
		 * .getParametroMensagem());
		 * }
		 */
	}

	public Collection pesquisarImovelOutrosCriterios(FiltrarImovelOutrosCriteriosHelper filtrarImovelOutrosCriteriosHelper){

		try{
			return this.getControladorImovel().pesquisarImovelOutrosCriterios(filtrarImovelOutrosCriteriosHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<Imovel> pesquisarImovelParametrosClienteImovel(FiltroClienteImovel filtroClienteImovel){

		Collection<Imovel> retorno = null;

		try{
			retorno = this.getControladorImovel().pesquisarImovelParametrosClienteImovel(filtroClienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/*
	 * public BigDecimal calcularValorPrestacao(BigDecimal
	 * taxaJurosFinanciamento, Integer numeroPrestacoes, BigDecimal
	 * valorTotalServico, BigDecimal valorEntrada){
	 * BigDecimal retorno;
	 * retorno = this.getControladorFaturamento().calcularValorPrestacao(
	 * taxaJurosFinanciamento, numeroPrestacoes, valorTotalServico,
	 * valorEntrada);
	 * return retorno; }
	 */
	/*
	 * [UC0121] - Filtrar Exceções de Leituras e Consumos Flávio Leonardo
	 * Cavalcanti Cordeiro
	 */
	public Collection filtrarExcecoesLeiturasConsumos(FaturamentoGrupo faturamentoGrupo,
					FiltroMedicaoHistoricoSql filtroMedicaoHistoricoSql, Integer numeroPagina, boolean todosRegistros){

		Collection<Imovel> retorno = null;

		try{
			retorno = this.getControladorMicromedicao().filtrarExcecoesLeiturasConsumos(faturamentoGrupo, filtroMedicaoHistoricoSql,
							numeroPagina, todosRegistros);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * Retorna uma coleção com os dados das medicoes para apresentação
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 */

	public Collection carregarDadosMedicaoResumo(Integer idImovel, boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().carregarDadosMedicaoResumo(idImovel, ligacaoAgua);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/*
	 * public BigDecimal calcularValorPrestacao(BigDecimal
	 * taxaJurosFinanciamento, Integer numeroPrestacoes, BigDecimal
	 * valorTotalServico, BigDecimal valorEntrada){
	 * BigDecimal retorno;
	 * retorno = this.getControladorFaturamento().calcularValorPrestacao(
	 * taxaJurosFinanciamento, numeroPrestacoes, valorTotalServico,
	 * valorEntrada);
	 * return retorno; }
	 */
	/*
	 * [UC0121] - Filtrar Exceções de Leituras e Consumos Flávio Leonardo
	 * Cavalcanti Cordeiro
	 */
	public Integer filtrarExcecoesLeiturasConsumosCount(FaturamentoGrupo faturamentoGrupo,
					FiltroMedicaoHistoricoSql filtroMedicaoHistoricoSql){

		Integer retorno = null;

		try{
			retorno = this.getControladorMicromedicao().filtrarExcecoesLeiturasConsumosCount(faturamentoGrupo, filtroMedicaoHistoricoSql);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/*
	 * [UC0121] - Filtrar Exceções de Leituras e Consumos Fllávio Leonardo
	 * Cavalcanti Cordeiro
	 */
	public Collection pesquisarLigacoesMedicaoIndividualizada(Integer idImovel, String anoMes){

		Collection retorno = null;

		try{
			retorno = this.getControladorMicromedicao().pesquisarLigacoesMedicaoIndividualizada(idImovel, anoMes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/*
	 * [UC0085] - Obter endereço Autor:Sávio Luiz Data: 26/12/2005
	 */
	public String pesquisarEndereco(Integer idImovel){

		String retorno = null;

		try{
			retorno = this.getControladorEndereco().pesquisarEndereco(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/*
	 * [UC0085] - Obter endereçoFormatado Autor:Fernanda Paiva
	 */
	public String pesquisarEnderecoFormatado(Integer idImovel) throws ControladorException{

		String retorno = null;

		try{
			retorno = this.getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	// ----- Metodo Para Carregar o Objeto ImovelMicromedicao
	// ----- Flávio Leonardo
	public Collection carregarImovelMicromedicao(Collection imoveisMicromedicao) throws ControladorException{

		Collection<Imovel> retorno = null;

		try{
			retorno = this.getControladorImovel().carregarImovelMicromedicao(imoveisMicromedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * [UC0186 - Calcular Prestação] Author: Rafael Santos Data: 26/12/2005
	 * Calcula os Valores da Prestação
	 * 
	 * @param taxaJurosFinanciamento
	 * @param numeroPrestacoes
	 * @param valorTotalServico
	 * @param valorEntrada
	 * @param percentualAbatimento
	 * @return
	 */
	public ArrayList calcularValorPrestacao(BigDecimal taxaJurosFinanciamento, Integer numeroPrestacoes, BigDecimal valorTotalServico,
					BigDecimal valorEntrada, BigDecimal percentualAbatimento, String idTipoDebito, BigDecimal valorTotalServicoAParcelar,
					Imovel imovel, Usuario usuario){

		try{
			return this.getControladorFaturamento().calcularValorPrestacao(taxaJurosFinanciamento, numeroPrestacoes, valorTotalServico,
							valorEntrada, percentualAbatimento, idTipoDebito, valorTotalServicoAParcelar, imovel, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UC0183 - Inserir débito A Cobrar]
	 * 
	 * @author Rafael Santos, Pedro Alexandre
	 * @date 23/12/2005, 21/11/2006
	 * @author Isaac Silva
	 * @date 22/08/2011
	 * @param numeroPrestacoes
	 * @param debitoACobrar
	 * @param valorTotalServico
	 * @param imovel
	 * @param percentualAbatimento
	 * @param valorEntrada
	 * @param usuarioLogado
	 * @param efetuarParcelamento
	 *            se true atualiza os atributos: numeroMesesEntreParcelas, numeroParcelasALancar,
	 *            numeroMesesInicioCobranca que serão usados no faturamento;
	 * @param numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @param numeroMesesInicioCobranca
	 * @return
	 */
	public Integer inserirDebitoACobrar(Integer numeroPrestacoes, DebitoACobrar debitoACobrar, BigDecimal valorTotalServico, Imovel imovel,
					BigDecimal percentualAbatimento, BigDecimal valorEntrada, Usuario usuarioLogado, boolean efetuarParcelamento,
					Integer numeroMesesEntreParcelas, Integer numeroParcelasALancar, Integer numeroMesesInicioCobranca){

		try{
			/**
			 * alteração realizada por pedro alexandre dia 21/11/2006 alteração
			 * realizada para acoplar o controle de abrangência
			 */
			// this.getControladorFaturamento().inserirDebitoACobrar(numeroPrestacoes,
			// debitoACobrar, valorTotalServico, imovel, percentualAbatimento,
			// valorEntrada);
			return this.getControladorFaturamento().inserirDebitoACobrar(numeroPrestacoes, debitoACobrar, valorTotalServico, imovel,
							percentualAbatimento, valorEntrada, usuarioLogado, efetuarParcelamento, numeroMesesEntreParcelas,
							numeroParcelasALancar, numeroMesesInicioCobranca);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0102] - Obter Consumo médio do hidrômetro
	 */
	public int[] obterConsumoMedioHidrometro(Imovel imovel, SistemaParametro sistemaParametro, MedicaoTipo medicaoTipo){

		try{
			return getControladorMicromedicao().obterConsumoMedioHidrometro(imovel, sistemaParametro, medicaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public int obterConsumoMinimoLigacao(Imovel imovel, Collection colecaoCategorias){

		try{
			return getControladorMicromedicao().obterConsumoMinimoLigacao(imovel, colecaoCategorias);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public int obterConsumoMinimoLigacaoPeriodo(Imovel imovel, Collection colecaoCategorias, String mesAnoConta,
					Integer idConsumoTarifaConta){

		try{
			return getControladorMicromedicao().obterConsumoMinimoLigacaoPeriodo(imovel, colecaoCategorias, mesAnoConta,
							idConsumoTarifaConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0123] - Obter Descricao da Categoria do Imovel
	 */
	public Categoria obterDescricoesCategoriaImovel(Imovel imovel){

		try{
			return getControladorImovel().obterDescricoesCategoriaImovel(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método de atualizar genérico Todas as atualizações poderão utilizar esse
	 * método.
	 * 
	 * @param objeto
	 *            Description of the Parameter
	 * @author Roberta Costa
	 */
	public void atualizar(Object objeto){

		try{
			this.getControladorUtil().atualizar(objeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0184 - Manter débito A Cobrar] Author: Rafael Santos Data: 30/12/2005
	 * 
	 * @param ids
	 *            Id de Debito A Cobrar
	 * @param registrarTransacao
	 *            TODO
	 * @throws ControladorException
	 */
	public void cancelarDebitoACobrar(String[] ids, Usuario usuarioLogado, Integer matriculaImovel, Boolean registrarTransacao){

		try{
			this.getControladorFaturamento().cancelarDebitoACobrar(ids, usuarioLogado, matriculaImovel, registrarTransacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0087] - Calcular Faixa de Leitura Falsa Autor: Sávio Luiz Data:
	 * 29/12/2005
	 */
	public Object[] calcularFaixaLeituraFalsa(Imovel imovel, int media, Integer leituraAnterior, MedicaoHistorico medicaoHistorico,
					boolean hidrometroSelecionado, Hidrometro hidrometro) throws ControladorException{

		try{
			return this.getControladorMicromedicao().calcularFaixaLeituraFalsa(imovel, media, leituraAnterior, medicaoHistorico,
							hidrometroSelecionado, hidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarLeituraAnteriorTipoLigacaoAgua(Integer idImovel, Integer anoMesCorrente) throws ControladorException{

		try{
			return this.getControladorMicromedicao().pesquisarLeituraAnteriorTipoLigacaoAgua(idImovel, anoMesCorrente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// public Collection gerarDadosPorLeituraConvencional(Collection rotas,
	// Integer anoMesCorrente, Integer idLeituraTipo)
	// throws ControladorException {
	// try {
	// return this.getControladorMicromedicao()
	// .gerarDadosPorLeituraConvencional(rotas, anoMesCorrente);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }

	/*
	 * public Collection gerarDebitosACobrarDeAcrescimosPorImpontualidade(
	 * Collection rotas, Integer indicadorGeracaoMulta, Integer
	 * indicadorGeracaoJuros, Integer indicadorGeracaoAtualizacao) throws
	 * ControladorException { /*try { return this.getControladorFaturamento()
	 * .gerarDebitosACobrarDeAcrescimosPorImpontualidade(rotas,
	 * indicadorGeracaoMulta, indicadorGeracaoJuros,
	 * indicadorGeracaoAtualizacao); } catch (ControladorException ex) { throw
	 * new FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); }
	 */

	/**
	 * [UC0302] - Gerar Debitos A Cobrar de Acrescimos por Impontualidade
	 * Author: Fernanda Paiva Data: 24/04/2006
	 * Obtém as contas de um imóvel com ano/mes da data de vencimento menor ou
	 * igual ao ano/mes de referencia da arrecadacao corrente e com situacao
	 * atual correspondente a normal, retificada ou incluida.
	 * 
	 * @param imovel
	 * @param situacaoNormal
	 * @param situacaoIncluida
	 * @param situacaoRetificada
	 * @param anoMesReferenciaArrecadacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterContasImovel(Integer imovel, Integer situacaoNormal, Integer situacaoIncluida, Integer situacaoRetificada,
					Integer anoMesReferenciaArrecadacao){

		try{

			return this.getControladorFaturamento().obterContasImovel(imovel, situacaoNormal, situacaoIncluida, situacaoRetificada,
							anoMesReferenciaArrecadacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0302] - Gerar Debitos A Cobrar de Acrescimos por Impontualidade
	 * Author: Fernanda Paiva Data: 24/04/2006
	 * Obtém as contas de um imóvel com ano/mes da data de vencimento menor ou
	 * igual ao ano/mes de referencia da arrecadacao corrente e com situacao
	 * atual correspondente a normal, retificada ou incluida.
	 * 
	 * @param imovel
	 * @param situacaoNormal
	 * @param situacaoIncluida
	 * @param situacaoRetificada
	 * @param anoMesReferenciaArrecadacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterGuiasPagamentoImovel(Integer imovel, Integer situacaoNormal, Integer situacaoIncluida,
					Integer situacaoRetificada, Integer anoMesReferenciaArrecadacao){

		try{

			return this.getControladorFaturamento().obterGuiasPagamentoImovel(imovel, situacaoNormal, situacaoIncluida, situacaoRetificada,
							anoMesReferenciaArrecadacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza uma categoria no sistema
	 * 
	 * @author Roberta Costa
	 * @date 03/01/2006
	 * @param categoria
	 *            Categoria a ser atualizada
	 */
	public void atualizarCategoria(Categoria categoria){

		try{
			this.getControladorImovel().atualizarCategoria(categoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere uma categoria no sistema
	 * 
	 * @author Roberta Costa
	 * @date 04/01/2006
	 * @param categoria
	 *            Categoria a ser inserida
	 */
	public Integer inserirCategoria(Categoria categoria){

		try{
			return this.getControladorImovel().inserirCategoria(categoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza uma subcategoria no sistema
	 * 
	 * @author Fernanda Paiva
	 * @date 09/01/2006
	 * @param subcategoria
	 *            Subcategoria a ser atualizada
	 */
	public void atualizarSubcategoria(Subcategoria subcategoria, Subcategoria subcategoriaVelha){

		try{
			this.getControladorImovel().atualizarSubcategoria(subcategoria, subcategoriaVelha);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Author: Rafael Santos Data: 04/01/2006
	 * Retorna o valor do Controlador de Cobranca
	 * 
	 * @return O valor de controladorCobrancaLocal
	 */
	private ControladorCobrancaLocal getControladorCobranca(){

		ControladorCobrancaLocalHome localHome = null;
		ControladorCobrancaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorCobrancaLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_COBRANCA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o ControladorParcelamento
	 * 
	 * @return O ControladorParcelamento
	 */
	private ControladorParcelamentoLocal getControladorParcelamento(){

		// retorna a referencia de um objeto capaz de fazer chamadas à objetos remotamente
		return ServiceLocator.getInstancia().getControladorParcelamento();
	}

	/**
	 * Author: Rafael Santos Data: 22/05/2013
	 * Retorna o valor do Controlador de Cobranca Ordem Corte
	 * 
	 * @return O valor de controladorCobrancaOrdemCorteLocal
	 */
	private ControladorCobrancaOrdemCorteLocal getControladorCobrancaOrdemCorte(){

		ControladorCobrancaOrdemCorteLocalHome localHome = null;
		ControladorCobrancaOrdemCorteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorCobrancaOrdemCorteLocalHome) locator
							.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_COBRANCA_ORDEM_CORTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * [UC0178] Religar Automaticamente imóvel Cortado Author: Rafael Santos
	 * Data: 04/01/2006 Religar automática de Imóveis cortados
	 */
	public void religarAutomaticamenteImovelCortado(){

		try{
			this.getControladorCobranca().religarAutomaticamenteImovelCortado();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0213] atualizarSituacaoGuiaPagamento Author: Fernanda Paiva Data:
	 * 20/02/2006 Atualiza o parcelamento
	 */
	public void atualizarParcelamento(Integer codigoParcelamento, Integer parcelamentoSituacao, String motivo){

		try{
			this.getControladorCobranca().atualizarParcelamento(codigoParcelamento, parcelamentoSituacao, motivo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0213] remover debito a cobrar referente ao parcelamento Author:
	 * Fernanda Paiva Data: 20/02/2006
	 * public void removerDebitoACobrarDoParcelamento(Integer codigoImovel, Integer
	 * codigoParcelamento){
	 * try{
	 * this.getControladorCobranca().removerDebitoACobrarDoParcelamento(codigoImovel,
	 * codigoParcelamento);
	 * }catch(ControladorException ex){
	 * throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
	 * }
	 * }
	 */

	/**
	 * [UC0213] remover credito a realizar referente ao parcelamento Author:
	 * Fernanda Paiva Data: 20/02/2006
	 */
	public void removerCreditoARealizarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento){

		try{
			this.getControladorCobranca().removerCreditoARealizarDoParcelamento(codigoImovel, codigoParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0213] remover guia pagamento referente ao parcelamento Author:
	 * Fernanda Paiva Data: 20/02/2006
	 */
	public void removerGuiaPagamentoDoParcelamento(Integer codigoImovel, Integer codigoParcelamento){

		try{
			this.getControladorCobranca().removerGuiaPagamentoDoParcelamento(codigoImovel, codigoParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void removerTarifaConsumo(String[] ids){

		try{
			this.getControladorFaturamento().removerTarifaConsumo(ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void atualizarConsumoTarifa(ConsumoTarifaVigencia consumoTarifaVigencia,
					Collection<CategoriaFaixaConsumoTarifaHelper> colecaoCategoriaFaixaConsumoTarifaHelper, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarConsumoTarifa(consumoTarifaVigencia, colecaoCategoriaFaixaConsumoTarifaHelper,
							usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0168] - Inserir Tarifa de Consumo
	 * 
	 * @param consumoTarifa
	 * @param consumoTarifaVigencia
	 * @param colecaoConsumoTarifaCategoria
	 * @param colecaoConsumoTarifaFaixa
	 * @throws ControladorException
	 */
	public void inserirConsumoTarifa(ConsumoTarifa consumoTarifa, ConsumoTarifaVigencia consumoTarifaVigencia,
					Collection<ConsumoTarifaCategoria> colecaoConsumoTarifaCategoria, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().inserirConsumoTarifa(consumoTarifa, consumoTarifaVigencia, colecaoConsumoTarifaCategoria,
							usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informar Tarifa de Consumo por Subcategoria
	 * 
	 * @autor Tiago Moreno
	 * @date 05/01/2006
	 * @param consumoTarifa
	 * @param consumoTarifaVigencia
	 * @param colecaoConsumoTarifaCategoria
	 * @param colecaoConsumoTarifaFaixa
	 * @throws ControladorException
	 */

	public void informarConsumoTarifaSubcategoria(ConsumoTarifa consumoTarifa, ConsumoTarifaVigencia consumoTarifaVigencia,
					Collection<ConsumoTarifaCategoria> colecaoConsumoTarifaCategoria){

		try{
			this.getControladorFaturamento().informarConsumoTarifaSubcategoria(consumoTarifa, consumoTarifaVigencia,
							colecaoConsumoTarifaCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void reajustarTarifaConsumo(Map<ConsumoTarifaVigencia, Map<ConsumoTarifaCategoria, BigDecimal>> mapReajuste,
					Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().reajustarTarifaConsumo(mapReajuste, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0200] Inserir débito automático
	 * 
	 * @author Roberta Costa
	 * @since 04/01/2006 Permite a Inclusão de um imóvel no débito automático
	 */
	public String[] inserirDebitoAutomatico(String matriculaImovel, String codigoBanco, String codigoAgencia, String identificacaoCliente,
					Date dataOpcao){

		try{
			return this.getControladorCobranca().inserirDebitoAutomatico(matriculaImovel, codigoBanco, codigoAgencia, identificacaoCliente,
							dataOpcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0200] Excluir débito automático
	 * 
	 * @author Roberta Costa
	 * @since 05/01/2006 Permite a exclusão de um imóvel no débito automático
	 */
	public String removerDebitoAutomatico(String matriculaImovel, String codigoBanco, String codigoAgencia, String identificacaoCliente,
					Date dataOpcao, Usuario usuarioLogado){

		try{
			return this.getControladorCobranca().removerDebitoAutomatico(matriculaImovel, codigoBanco, codigoAgencia, identificacaoCliente,
							dataOpcao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Rhawi Dantas
	 * @created 09/01/2006
	 */

	public Collection pesquisarImovelSituacaoEspecialFaturamento(String valor,
					SituacaoEspecialFaturamentoHelper situacaoEspecialFaturamentoHelper){

		try{
			return this.getControladorImovel().pesquisarImovelSituacaoEspecialFaturamento(valor, situacaoEspecialFaturamentoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// /**
	// * Pesquisa a coleção de Faturamento Situação Historico do Imovel Ativos [UC0156]
	// *
	// * @author Saulo Lima
	// * @date 22/08/2008
	// * @param Integer
	// * idFaturamentoSituacaoTipo
	// *
	// * @return Collection
	// * FaruramentoSituacaoHistorico
	// *
	// * @exception ErroRepositorioException
	// */
	// public Collection pesquisarFaturamentosSituacaoHistoricoAtivos(Integer
	// idFaturamentoSituacaoTipo){
	// try {
	// return this.getControladorImovel()
	// .pesquisarFaturamentosSituacaoHistoricoAtivos(idFaturamentoSituacaoTipo);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }

	/**
	 * Pesquisa a coleção de Faturamento Situação Historico do Imovel Ativos [UC0156]
	 * 
	 * @author Saulo Lima
	 * @date 22/08/2008
	 * @param Integer
	 *            idFaturamentoSituacaoTipo
	 * @return Collection
	 *         FaruramentoSituacaoHistorico
	 * @exception ErroRepositorioException
	 */
	public Collection pesquisarFaturamentosSituacaoHistoricoAtivos(SituacaoEspecialFaturamentoHelper situacaoEspecialFaturamentoHelper){

		try{
			return this.getControladorImovel().pesquisarFaturamentosSituacaoHistoricoAtivos(situacaoEspecialFaturamentoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0067] Obter débito do imóvel ou Cliente Author: Rafael Santos Data:
	 * 04/01/2006 Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * 
	 * @param indicadorDebito
	 *            Inidicador de débito(1 - Imovel e 2 - Cliente
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param codigoCliente
	 *            Codigo do Cliente
	 * @param clienteRelacaoTipo
	 *            Relação do Imovel com o Cliente
	 * @param anoMesInicialReferenciaDebito
	 *            Perãodo de Referencia de débito - Inicial
	 * @param anoMesFinalReferenciaDebito
	 *            Perãodo de Referencia de débito - Final
	 * @param anoMesInicialVencimentoDebito
	 *            Perãodo de Vencimento de débito - Inicial
	 * @param anoMesFinalVencimentoDebito
	 *            Perãodo de Vencimento de débito - Final
	 * @param indicadorPagamento
	 *            Indicador de Pagamento
	 * @param indicadorConta
	 *            Indicador de Conta
	 * @param indicadorDebitoACobrar
	 *            Indicador de Debito a Cobrar
	 * @param indicadorCreditoARealizar
	 *            Indicador de Credito a Realizar
	 * @param indicadorNotasPromissorias
	 *            Indicador de Notas Promissorias
	 * @param indicadorGuiasPagamento
	 *            Indicador de Guias de Pagamento
	 * @param indicadorCalcularAcrescimoImpontualidade
	 *            Indicador de Calculasr Acrescimo por Inpontualidade
	 * @exception ControladorException
	 *                Controlador Execption
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente(int indicadorDebito, String idImovel, String codigoCliente,
					Integer clienteRelacaoTipo, String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito,
					Date anoMesInicialVencimentoDebito, Date anoMesFinalVencimentoDebito, int indicadorPagamento, int indicadorConta,
					int indicadorDebitoACobrar, int indicadorCreditoARealizar, int indicadorNotasPromissorias, int indicadorGuiasPagamento,
					int indicadorCalcularAcrescimoImpontualidade, Boolean indicadorContas, SistemaParametro sistemaParametro,
					Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Short indicadorConsiderarPagamentoNaoClassificado,
					Short indicadorMulta, Short indicadorJurosMora, Short indicadorAtualizaoMonetaria,
					int indicadorCalcularAcrescimosSucumbenciaAnterior, Integer indicadorDividaAtiva){

		try{
			return getControladorCobranca().obterDebitoImovelOuCliente(indicadorDebito, idImovel, codigoCliente, clienteRelacaoTipo,
							anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito,
							anoMesFinalVencimentoDebito, indicadorPagamento, indicadorConta, indicadorDebitoACobrar,
							indicadorCreditoARealizar, indicadorNotasPromissorias, indicadorGuiasPagamento,
							indicadorCalcularAcrescimoImpontualidade, indicadorContas, sistemaParametro, dataEmissaoDocumento,
							indicadorEmissaoDocumento, indicadorConsiderarPagamentoNaoClassificado, indicadorMulta, indicadorJurosMora,
							indicadorAtualizaoMonetaria, indicadorCalcularAcrescimosSucumbenciaAnterior, indicadorDividaAtiva);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<Cliente> pesquisarClienteEnderecoClienteImovel(FiltroClienteEndereco filtroClienteEndereco){

		try{
			return getControladorCliente().pesquisarClienteEnderecoClienteImovel(filtroClienteEndereco);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0098] Manter Vinculos de Imoveis para Rateio de Consumo
	 * 
	 * @author Rafael Santos
	 * @since 12/01/2006
	 * @param imovel
	 *            imovel
	 * @throws ControladorException
	 */
	public void atualizarTipoRateio(Imovel imovel, HidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoAgua,
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoPoco, Usuario usuarioLogado){

		try{
			/**
			 * alterado por pedro alexandre dia 19/11/2006 atualização realizada
			 * para acoplar controle de abrangência
			 */
			this.getControladorMicromedicao().atualizarTipoRateio(imovel, hidrometroInstalacaoHistoricoAgua,
							hidrometroInstalacaoHistoricoPoco, usuarioLogado);

			/*
			 * this.getControladorMicromedicao().atualizarTipoRateio(imovel,
			 * hidrometroInstalacaoHistoricoAgua,
			 * hidrometroInstalacaoHistoricoPoco);
			 */
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0098] Manter Vinculos de Imoveis para Rateio de Consumo Desvincular
	 * Imovel
	 * 
	 * @author Rafael Santos,Pedro Alexandre
	 * @since 16/01/2006, 20/11/2006
	 * @param imovel
	 *            imovel
	 * @throws ControladorException
	 */
	public void desfazerVinculo(Imovel imovel, String[] ids, boolean desvincular, Usuario usuarioLogado){

		try{
			/**
			 * alterado por pedro alexandre dia 20/11/2006 alteração ralaizada
			 * para acoplar o controle de abrangência
			 */
			this.getControladorMicromedicao().desfazerVinculo(imovel, ids, desvincular, usuarioLogado);
			// this.getControladorMicromedicao().desfazerVinculo(imovel, ids,
			// desvincular,usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Rhawi Dantas
	 * @created 09/01/2006
	 */

	/*
	 * public Collection pesquisarImovelCollectionSituacaoEspecialFaturamento(
	 * SituacaoEspecialFaturamentoHelper situacaoEspecialFaturamentoHelper) {
	 * try { return this.getControladorImovel()
	 * .pesquisarImovelCollectionSituacaoEspecialFaturamento(
	 * situacaoEspecialFaturamentoHelper); } catch (ControladorException ex) {
	 * throw new FachadaException(ex.getMessage(), ex, ex
	 * .getParametroMensagem()); } }
	 */
	/**
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Rhawi Dantas
	 * @created 09/01/2006
	 */

	public Integer validarMesAnoReferencia(SituacaoEspecialFaturamentoHelper situacaoEspecialFaturamentoHelper){

		try{
			return this.getControladorImovel().validarMesAnoReferencia(situacaoEspecialFaturamentoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Rhawi Dantas
	 * @created 16/01/2006
	 * @author Felipe Rosacruz
	 * @date 16/04/2014
	 * @param collectionFaturmentoSituaoHistorico
	 *            Alteração para inserir o registro de transação
	 * @param usuarioLogado
	 * @param helperParaSeremRemovidos
	 */

	public void atualizarFaturamentoSituacaoTipo(Integer idFaturamentoTipo,
					Collection<SituacaoEspecialFaturamentoHelper> helperParaSeremInserirdos, Usuario usuarioLogado,
					Collection<SituacaoEspecialFaturamentoHelper> helperParaSeremRemovidos){

		try{
			this.getControladorImovel().atualizarFaturamentoSituacaoTipo(idFaturamentoTipo, helperParaSeremInserirdos, usuarioLogado,
							helperParaSeremRemovidos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0098] Manter Vinculos de Imoveis para Rateio de Consumo
	 * 
	 * @author Rafael Santos, Pedro Alexandre
	 * @since 16/01/2006, 20/11/2006
	 * @param imovel
	 *            imovel
	 * @throws ControladorException
	 */
	public void estabelecerVinculo(Imovel imovel, Collection imoveisASerVinculados, Collection imoveisASerDesvinculados,
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoAgua,
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoPoco, Usuario usuarioLogado){

		try{
			/**
			 * alterado por pedroa lexandre dia 20/11/2006 alteração realizada
			 * para acoplar o controle de abrangência
			 */
			this.getControladorMicromedicao().estabelecerVinculo(imovel, imoveisASerVinculados, imoveisASerDesvinculados,
							hidrometroInstalacaoHistoricoAgua, hidrometroInstalacaoHistoricoPoco, usuarioLogado);

			/*
			 * this.getControladorMicromedicao().estabelecerVinculo(imovel,
			 * imoveisASerVinculados, imoveisASerDesvinculados,
			 * hidrometroInstalacaoHistoricoAgua,
			 * hidrometroInstalacaoHistoricoPoco);
			 */}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0187] Inserir Guia de Pagamento
	 * 
	 * @author Rafael Corrêa, Pedro Alexandre
	 * @since 16/01/2006, 23/11/2006
	 * @author eduardo henrique
	 * @date 04/08/2008
	 *       Alterações realizadas no UC, basicamente incluído o conceito de Prestações de Guia de
	 *       Pagamento
	 * @param guiaPagamento
	 * @param usuarioLogado
	 * @param dataVencimento
	 *            TODO
	 * @param colecaoPrestacoesGuiaPagamento
	 *            TODO
	 * @throws ControladorException
	 */
	public Integer inserirGuiaPagamento(GuiaPagamento guiaPagamento, Usuario usuarioLogado, String dataVencimento,
					Integer qtdeDiasVencimento, Collection<GuiaPagamentoPrestacaoHelper> colecaoPrestacoesGuiaPagamento,
					Collection<ListaDadosPrestacaoGuiaHelper> colecaoListaDadosPrestacoesGuia, String numeroContratoParcelOrgaoPublico){

		try{
			return this.getControladorFaturamento().inserirGuiaPagamento(guiaPagamento, usuarioLogado, dataVencimento, qtdeDiasVencimento,
							colecaoPrestacoesGuiaPagamento, colecaoListaDadosPrestacoesGuia, numeroContratoParcelOrgaoPublico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0187] Inserir Guia de Pagamento
	 * Processos das execuções especiais pendentes de cobrança do valor de sucumbência
	 * 
	 * @date 08/09/2014
	 * @author Gicevalter Couto
	 */
	public Collection<Integer> pesquisarProcessosExecucaoEspeciaisPendentesCobranca(Integer idImovel){

		try{
			return this.getControladorFaturamento().pesquisarProcessosExecucaoEspeciaisPendentesCobranca(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0188] - Manter Guia de Pagamento
	 * 
	 * @author Rafael Corrêa, Pedro Alexandre
	 * @param usuarioLogado
	 * @since 16/01/2006, 23/11/2006
	 * @author eduardo henrique
	 * @date 07/08/2008
	 *       Alterações no UC, [SB0001] - Cancelar Guia Pagamento para a v0.04.
	 * @throws ControladorException
	 */
	public void manterGuiaPagamento(Collection<GuiaPagamentoPrestacaoHelper> guiasPagamento, String[] registrosRemocao,
					Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().cancelarGuiaPagamento(guiasPagamento, registrosRemocao, true, usuarioLogado);
			// this.getControladorFaturamento().manterGuiaPagamento(guiaPagamento,
			// guiasPagamento, registrosRemocao, imovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Rhawi Dantas
	 * @created 17/01/2006
	 */

	public void retirarSituacaoEspecialFaturamento(Collection<SituacaoEspecialFaturamentoHelper> colecaoSituacaoEspecialFaturamentoHelper,
					Usuario usuarioLogado){

		try{
			this.getControladorImovel().retirarSituacaoEspecialFaturamento(colecaoSituacaoEspecialFaturamentoHelper, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o mês/Ano informado éinferior ao mês/Ano do Sistema
	 * 
	 * @param anoMesFaturamento
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarReferenciaFaturamentoCorrente(String anoMesFaturamento){

		try{
			return getControladorFaturamento().verificarReferenciaFaturamentoCorrente(anoMesFaturamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0082] - Registrar Leituras e Anormalidades Autor: Sávio Luiz Data:
	 * 04/01/2006
	 */
	/*
	 * public Collection registrarLeiturasAnormalidades( Collection
	 * colecaoMedicaoHistorico, Integer idFaturamentoGrupo, Integer
	 * anoMesReferencia) { try { return this.getControladorMicromedicao()
	 * .registrarLeiturasAnormalidades(colecaoMedicaoHistorico,
	 * idFaturamentoGrupo, anoMesReferencia); } catch (ControladorException ex) {
	 * throw new FachadaException(ex.getMessage(), ex, ex
	 * .getParametroMensagem()); } }
	 */
	/**
	 * [UC0242] - Registrar movimento dos Arrecadadores Author: Sávio Luiz Data:
	 * 09/01/2006
	 * registra movimento dos arrecadadores no sistema
	 */
	public void registrarLeituraAnormalidade(Collection colecaoMedicaoHistorico, Integer idFaturamentoGrupo, Integer anoMesReferencia,
					Usuario usuario){

		this.enviarMensagemControladorBatch(MetodosBatch.REGISTRAR_LEITURAS_ANORMALIDADES,
						ConstantesJNDI.QUEUE_CONTROLADOR_MICROMEDICAO_MDB,
						new Object[] {colecaoMedicaoHistorico, idFaturamentoGrupo, anoMesReferencia, usuario});

	}

	/**
	 * Consulta ResumoFaturamento para a geração do Relatório '[UC0173] Gerar
	 * Relatório de Resumo Faturamento' de acordo com a opção de totalização.
	 * 
	 * @author Rodrigo Silveira
	 * @created 18/01/2006
	 * @param opcaoTotalizacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarResumoFaturamentoRelatorio(String opcaoTotalizacao, int anoMesReferencia, Integer gerenciaRegional,
					Integer localidade, Integer unidadeNegocio){

		try{
			return getControladorFaturamento().consultarResumoFaturamentoRelatorio(opcaoTotalizacao, anoMesReferencia, gerenciaRegional,
							localidade, unidadeNegocio);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0194] - Inserir Crédito a Realizar
	 * 
	 * @author Roberta Costa
	 * @since 12/01/2006
	 * @param creditoARealizar
	 *            CreditoARealizar
	 * @throws ControladorException
	 */
	public void inserirCreditoARealizar(Imovel imovel, CreditoARealizar creditoARealizar, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().inserirCreditoARealizar(imovel, creditoARealizar, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0195] - Manter Crédito a Realizar
	 * 
	 * @author Roberta Costa
	 * @since 18/01/2006
	 * @param creditoARealizar
	 *            CreditoARealizar
	 * @throws ControladorException
	 */
	public void cancelarCreditoARealizar(String[] ids, Imovel imovel, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().cancelarCreditoARealizar(ids, imovel, usuarioLogado, false);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarHidrometroPorHidrometroMovimentacao(Filtro filtro){

		try{
			return this.getControladorMicromedicao().pesquisarHidrometroPorHidrometroMovimentacao(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] - Manter Conta Author: Raphael Rossiter Data: 21/01/2006
	 * Obtém as contas de um imóvel que poderão ser mantidas
	 * 
	 * @author Saulo Lima
	 * @date 10/09/2008
	 *       Alteração na chamada do método pra satifazer as especificações do UC0146 (ADA):
	 *       Remover os parâmetros: situacaoNormal, situacaoIncluida e situacaoRetificada
	 * @param imovel
	 * @return Collection<Conta>
	 * @throws ControladorException
	 */
	public Collection<Conta> obterContasImovelManter(Imovel imovel){

		try{

			return this.getControladorFaturamento().obterContasImovelManter(imovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] - Manter Conta
	 * Obtém as contas de um imóvel que poderão ser mantidas
	 * 
	 * @author Hugo Lima
	 * @date 09/05/2012
	 * @param manterContaHelper
	 * @return
	 */
	public Collection<Conta> obterContasImovelManter(ManterContaHelper manterContaHelper){

		try{

			return this.getControladorFaturamento().obterContasImovelManterParametros(manterContaHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UC0150] - Retificar Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 05/12/2005
	 * @author eduardo henrique
	 * @date 16/02/2009
	 *       Alteracao no Retificar Conta para permitir Alterar Dados de Leitura
	 * @param mesAnoConta
	 * @param contaAtual
	 * @param imovel
	 * @param colecaoDebitoCobrado
	 * @param colecaoCreditoRealizado
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param colecaoCategoria
	 * @param consumoAgua
	 * @param consumoEsgoto
	 * @param percentualEsgoto
	 * @param dataVencimentoConta
	 * @param calcularValoresConta
	 * @param contaMotivoRetificacao
	 * @param requestMap
	 * @param colecaoMedicaoHistorico
	 */
	public Integer retificarConta(Integer mesAnoConta, Conta contaAtual, Imovel imovel, Collection colecaoDebitoCobrado,
					Collection colecaoCreditoRealizado, LigacaoAguaSituacao ligacaoAguaSituacao,
					LigacaoEsgotoSituacao ligacaoEsgotoSituacao, Collection colecaoCategoria, String consumoAgua, String consumoEsgoto,
					String percentualEsgoto, Date dataVencimentoConta, Collection<CalcularValoresAguaEsgotoHelper> calcularValoresConta,
					ContaMotivoRetificacao contaMotivoRetificacao, Map<String, String[]> requestMap, Usuario usuarioLogado,
					Collection<MedicaoHistorico> colecaoMedicaoHistorico, ConsumoTarifa consumoTarifa, Cliente clienteResponsavelConta){

		try{
			return this.getControladorFaturamento().retificarConta(mesAnoConta, contaAtual, imovel, colecaoDebitoCobrado,
							colecaoCreditoRealizado, ligacaoAguaSituacao, ligacaoEsgotoSituacao, colecaoCategoria, consumoAgua,
							consumoEsgoto, percentualEsgoto, dataVencimentoConta, calcularValoresConta, contaMotivoRetificacao, requestMap,
							usuarioLogado, colecaoMedicaoHistorico, consumoTarifa, clienteResponsavelConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Carlos Chrystian
	 * @date 31/07/2012
	 *       [UC0146 - ManterConta]
	 *       [SB0003] - Retificar Conta
	 *       Caucionar Conta
	 * @throws ControladorException
	 */
	public Map<Conta, Collection<Collection<ContaCategoriaConsumoFaixa>>> caucionarConta(Integer anoMesConta, Conta contaAtual,
					Imovel imovel, Collection colecaoDebitoCobrado, Collection colecaoCreditoRealizado,
					LigacaoAguaSituacao ligacaoAguaSituacao, LigacaoEsgotoSituacao ligacaoEsgotoSituacao, Collection colecaoCategoria,
					String consumoAgua, String consumoEsgoto, String percentualEsgoto, Date dataVencimentoConta,
					Collection<CalcularValoresAguaEsgotoHelper> calcularValoresConta, ContaMotivoRevisao contaMotivoRevisao,
					Map<String, String[]> requestMap, Usuario usuarioLogado, Collection<MedicaoHistorico> colecaoMedicaoHistorico,
					ConsumoTarifa consumoTarifa, Collection<Conta> colecaoContaImovel){

		try{
			return this.getControladorFaturamento().caucionarConta(anoMesConta, contaAtual, contaAtual.getImovel(), colecaoDebitoCobrado,
							colecaoCreditoRealizado, ligacaoAguaSituacao, ligacaoEsgotoSituacao, colecaoCategoria, consumoAgua,
							consumoEsgoto, percentualEsgoto, dataVencimentoConta, calcularValoresConta, contaMotivoRevisao, requestMap,
							usuarioLogado, colecaoMedicaoHistorico, consumoTarifa, colecaoContaImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar Historico Medição Individualizada Auhtor: Rafael Santos Data:
	 * 23/01/2006 [UC001779] Consultar histórico Medição Individualizada
	 * 
	 * @param imovelCondominio
	 *            Imovel Condominio
	 * @param anoMesFaturamento
	 *            Ano mês Fauramento
	 * @return Dados do Historico Medição Individualizada
	 * @throws ControladorException
	 */
	public Collection consultarHistoricoMedicaoIndividualizada(Imovel imovelCondominio, String anoMesFaturamento){

		try{
			return this.getControladorMicromedicao().consultarHistoricoMedicaoIndividualizada(imovelCondominio, anoMesFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0155] - Encerrar Faturamento do mês Author: Pedro Alexandre Data:
	 * 09/01/2006
	 * Encerra o faturamento do ano mês de referência
	 * 
	 * @throws ControladorException
	 */
	public void encerrarFaturamentoMes(){

		/*
		 * try {
		 * this.getControladorFaturamento().encerrarFaturamentoMes(); } catch
		 * (ControladorException ex) { throw new
		 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); }
		 */
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Administrador
	 * @date 17/03/2006
	 * @param codigoBarras
	 * @param dataPagamento
	 * @param idFormaPagamento
	 * @param sistemaParametro
	 * @param idArrecadadorMovimentoItem
	 * @return
	 */
	public PagamentoHelperCodigoBarras processarPagamentosCodigoBarras(RegistroHelperCodigoBarras registroHelperCodigoBarras,
					Date dataPagamento, Integer idFormaPagamento, SistemaParametro sistemaParametro, String subStringIdPagamento,
					Integer idConcessionaria){

		try{

			return this.getControladorArrecadacao().processarPagamentosCodigoBarras(registroHelperCodigoBarras, dataPagamento,
							idFormaPagamento, sistemaParametro, subStringIdPagamento, idConcessionaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Administrador
	 * @date 17/03/2006
	 * @param codigoBarras
	 * @return
	 */
	public RegistroHelperCodigoBarras distribuirDadosCodigoBarras(String codigoBarras){

		try{
			return this.getControladorArrecadacao().distribuirDadosCodigoBarras(codigoBarras);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0242] - Registrar movimento dos Arrecadadores
	 * 
	 * @author Sávio Luiz
	 * @date 09/01/2006
	 *       Registra movimento dos arrecadadores no sistema
	 * @author Saulo Lima
	 * @date 19/02/2009
	 *       Remover o retorno do método.
	 */
	public void registrarMovimentoArrecadadores(StringBuilder stringBuilderTxt, Arrecadador arrecadador, String idTipoMovimento,
					int quantidadeRegistros, Usuario usuario){

		this.enviarMensagemControladorBatch(MetodosBatch.REGISTRAR_MOVIMENTOS_ARRECADADORES,
						ConstantesJNDI.QUEUE_CONTROLADOR_ARRECADACAO_MDB,
						new Object[] {stringBuilderTxt, arrecadador, idTipoMovimento, quantidadeRegistros, usuario});
	}

	/**
	 * Relatório para acompanhar o movimento dos arrecadadores
	 * 
	 * @author Sávio Luiz
	 * @param concessionaria
	 * @date 02/04/2007
	 * @param idDebitoACobrar
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public void gerarResumoAcompanhamentoMovimentoArrecadadores(Usuario usuario, String mesAnoReferencia, Arrecadador arrecadador,
					ArrecadacaoForma arrecadacaoForma, Concessionaria concessionaria){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_RELATORIO_ACOMPANHAMENTO_MOVIMENTO_ARRECADADORES,
						ConstantesJNDI.QUEUE_CONTROLADOR_ARRECADACAO_MDB,
						new Object[] {usuario, mesAnoReferencia, arrecadador, arrecadacaoForma, concessionaria});

	}

	public Collection<Cliente> pesquisarClienteDadosClienteEndereco(FiltroCliente filtroCliente, Integer numeroPagina){

		try{
			return this.getControladorCliente().pesquisarClienteDadosClienteEndereco(filtroCliente, numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<Cliente> pesquisarClienteDadosClienteEnderecoRelatorio(FiltroCliente filtroCliente){

		try{
			return this.getControladorCliente().pesquisarClienteDadosClienteEnderecoRelatorio(filtroCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * Retrona a quantidade de endereços que existem para o Cliente
	 * pesquisarClienteDadosClienteEnderecoCount
	 * 
	 * @author Roberta Costa
	 * @date 29/06/2006
	 * @param filtroCliente
	 * @return
	 */
	public Integer pesquisarClienteDadosClienteEnderecoCount(FiltroCliente filtroCliente){

		try{
			return this.getControladorCliente().pesquisarClienteDadosClienteEnderecoCount(filtroCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<Cliente> pesquisarClienteOutrosCriterios(FiltroCliente filtroCliente){

		try{
			return this.getControladorCliente().pesquisarClienteOutrosCriterios(filtroCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0155] - Executar Atividade de Ação de Cobrança Author: Pedro Alexandre
	 * Data: 03/02/2006
	 * Executa as atividades de ação de Cobrança
	 * 
	 * @throws ControladorException
	 */
	public void executarAcaoAtividadeCobranca(String[] idsAtividadesCobrancaCronograma, String[] idsAtividadesCobrancaEventuais,
					Usuario usuario){

		try{
			// chama o Método do controlador de Cobrança
			this.getControladorCobranca().executarAtividadeAcaoCobranca(idsAtividadesCobrancaCronograma, idsAtividadesCobrancaEventuais,
							usuario);

			// erro no controlador
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeCronograma
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(){

		try{
			return this.getControladorCobranca().pesquisarCobrancaAcaoAtividadeCronograma();
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeComando
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando(){

		try{
			return this.getControladorCobranca().pesquisarCobrancaAcaoAtividadeComando();
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public String pesquisarMensagemDocumentoCobrancaAcao(Integer idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarMensagemDocumentoCobrancaAcao(idCobrancaAcao);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que registra uma operacao ao sistema
	 * 
	 * @param operacaoEfetuada
	 * @param tabelaLinhaAlteracao
	 * @param tabelaLinhaColunaAlteracoes
	 * @throws ControladorException
	 *             public void inserirOperacaoEfetuada(Usuario usuario,
	 *             UsuarioAcao usuarioAcao, OperacaoEfetuada operacaoEfetuada,
	 *             TabelaLinhaAlteracao tabelaLinhaAlteracao, Collection<TabelaLinhaColunaAlteracao>
	 *             tabelaLinhaColunaAlteracoes) throws ControladorException {
	 *             try { this.getControladorTransacao().inserirOperacaoEfetuada(usuario,
	 *             usuarioAcao, operacaoEfetuada, tabelaLinhaAlteracao,
	 *             tabelaLinhaColunaAlteracoes); } catch (ControladorException ex) { //
	 *             levanta o erro para a próxima camada throw new
	 *             FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */

	/**
	 * @param codigoAgente
	 * @param dataLancamento
	 * @param numeroSequencial
	 * @return Double
	 */
	public Double pesquisarDeducoesAvisoBancario(String codigoAgente, Date dataLancamento, String numeroSequencial){

		try{
			return this.getControladorArrecadacao().pesquisarDeducoesAvisoBancario(codigoAgente, dataLancamento, numeroSequencial);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Métodos para Inserir Aviso Bancário Rafael Corrêa
	 * [FS0003] Verificar existência de avisos bancários Não realizados [FS0004]
	 * Verificar seleção de aviso Retorna o valor do maior número sequencial do
	 * arrecadador selecionado
	 * 
	 * @throws ControladorException
	 */
	public Short pesquisarValorMaximoNumeroSequencial(Date dataLancamento, String idArrecadador){

		try{
			return this.getControladorArrecadacao().pesquisarValorMaximoNumeroSequencial(dataLancamento, idArrecadador);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Métodos para Filtrar Devoluções Rafael Corrêa
	 * 
	 * @throws ControladorException
	 */
	public Collection<Devolucao> pesquisarDevolucao(FiltroDevolucao filtroDevolucao){

		try{
			return this.getControladorArrecadacao().pesquisarDevolucao(filtroDevolucao);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta os usuario alteracao de uma determinada operacao com
	 * as restricoes passadas
	 * 
	 * @param idOperacao
	 * @param idUsuario
	 * @param dataInicial
	 * @param dataFinal
	 * @param horaInicial
	 * @param hotaFinal
	 * @param idTabela
	 * @param idTabelaColuna
	 * @param id1
	 * @return
	 * @throws ControladorException
	 * @author Romulo Aurelio / Rafael Correa
	 * @date 26/04/2007
	 */
	// COMENTADO POR SAVIO
	public Collection pesquisarEntidadeOperacoesEfetuadasHql(Integer chaveEntidade, Integer numeroPagina){

		try{
			return this.getControladorTransacao().pesquisarEntidadeOperacoesEfetuadasHql(chaveEntidade, numeroPagina);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarUsuarioAlteracaoDasOperacoesEfetuadas(Integer idUsuarioAcao, String[] idOperacoes, String idUsuario,
					Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Hashtable<Integer, String> argumentos, Integer id1,
					Integer numeroPagina){

		try{
			return this.getControladorTransacao().pesquisarUsuarioAlteracaoDasOperacoesEfetuadasHql(idUsuarioAcao, idOperacoes, idUsuario,
							dataInicial, dataFinal, horaInicial, horaFinal, argumentos, id1, numeroPagina);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarUsuarioAlteracaoDasOperacoesEfetuadasHqlCount(Integer idUsuarioAcao, String[] idOperacoes, String idUsuario,
					Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Hashtable<Integer, String> argumentos, Integer id1){

		try{
			return this.getControladorTransacao().pesquisarUsuarioAlteracaoDasOperacoesEfetuadasHqlCount(idUsuarioAcao, idOperacoes,
							idUsuario, dataInicial, dataFinal, horaInicial, horaFinal, argumentos, id1);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarUsuarioAlteracaoDasOperacoesEfetuadasHqlRelatorio(Integer idUsuarioAcao, String[] idOperacoes,
					String idUsuario, Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal,
					Hashtable<Integer, String> argumentos, Integer id1){

		try{
			return this.getControladorTransacao().pesquisarUsuarioAlteracaoDasOperacoesEfetuadasHqlRelatorio(idUsuarioAcao, idOperacoes,
							idUsuario, dataInicial, dataFinal, horaInicial, horaFinal, argumentos, id1);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0167] - Obter Valor a Cobrar de Curto e Longo Prazo Author: Pedro
	 * Alexandre Data: 10/01/2006
	 * 
	 * @param numeroPrestacoes
	 *            número de prestações
	 * @param numeroPrestacoesCobradas
	 *            número de prestaçõeses cobradas
	 * @param valorCategoria
	 *            valor da categoria
	 * @throws ControladorException
	 */
	public BigDecimal[] obterValorACobrarDeCurtoELongoPrazo(short numeroPrestacoes, short numeroPrestacoesCobradas,
					BigDecimal valorCategoria){

		try{
			return this.getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(numeroPrestacoes, numeroPrestacoesCobradas,
							valorCategoria);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer verificarExistenciaImovel(Integer idImovel){

		try{
			return this.getControladorImovel().verificarExistenciaImovel(idImovel);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar Imoveis com Medição Indiviualizada Auhtor: Sávio Luiz Data:
	 * 06/02/2006 [UC0180] Consultar Imoveis com Medição Indiviualizada
	 */

	public String pesquisarDescricaoRateioTipoLigacaoAgua(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisarDescricaoRateioTipoLigacaoAgua(idImovel);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar Imoveis com Medição Indiviualizada Auhtor: Sávio Luiz Data:
	 * 06/02/2006 [UC0180] Consultar Imoveis com Medição Indiviualizada
	 */

	public String pesquisarDescricaoRateioTipoLigacaoEsgoto(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisarDescricaoRateioTipoLigacaoEsgoto(idImovel);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @param grupoCobranca
	 *            Grupo de Cobrança
	 * @param anoMesReferenciaCicloCobranca
	 *            Ano/mês de referência do ciclo de Cobrança
	 * @param idCronogramaAtividadeAcaoCobranca
	 *            Código do cronograma da atividade da ação de Cobrança
	 * @param idComandoAtividadeAcaoCobranca
	 *            Código do comando da atividade da ação de Cobrança
	 * @param rotas
	 *            Coleção de rotas
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param indicadorCriterio
	 *            Indicador do Critério a ser utilizado
	 * @param criterioCobranca
	 *            Critério de Cobrança
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param anoMesReferenciaInicial
	 *            Ano/mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	/*
	 * public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobranca(
	 * CobrancaGrupo grupoCobranca, int anoMesReferenciaCicloCobranca, Integer
	 * idCronogramaAtividadeAcaoCobranca, Integer
	 * idComandoAtividadeAcaoCobranca, Collection<Rota> rotas, CobrancaAcao
	 * acaoCobranca, CobrancaAtividade atividadeCobranca, Integer
	 * indicadorCriterio, CobrancaCriterio criterioCobranca, Cliente cliente,
	 * ClienteRelacaoTipo relacaoClienteImovel, String anoMesReferenciaInicial,
	 * String anoMesReferenciaFinal, Date dataVencimentoInicial, Date
	 * dataVencimentoFinal) {
	 * try { return this.getControladorCobranca().gerarAtividadeAcaoCobranca(
	 * grupoCobranca, anoMesReferenciaCicloCobranca,
	 * idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, rotas,
	 * acaoCobranca, atividadeCobranca, indicadorCriterio, criterioCobranca,
	 * cliente, relacaoClienteImovel, anoMesReferenciaInicial,
	 * anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal); }
	 * catch (ControladorException ex) { throw new
	 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */
	/**
	 * [UC0177] Informar Situacao Especial de Cobranca
	 * 
	 * @author Sávio Luiz
	 * @created 07/03/2006
	 */
	public Collection pesquisarImovelSituacaoEspecialCobranca(String valor, SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper){

		try{
			return this.getControladorImovel().pesquisarImovelSituacaoEspecialCobranca(valor, situacaoEspecialCobrancaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 07/03/2006 / public int validarMesAnoReferenciaCobranca(
	 *          SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper) {
	 *          try { return
	 *          this.getControladorImovel().validarMesAnoReferenciaCobranca(
	 *          situacaoEspecialCobrancaHelper); } catch (ControladorException
	 *          ex) { throw new FachadaException(ex.getMessage(), ex, ex
	 *          .getParametroMensagem()); } }
	 */
	/**
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 07/03/2006 / public Collection atualizarCobrancaSituacaoTipo(
	 *          SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper) {
	 *          try { return this.getControladorImovel().atualizarCobrancaSituacaoTipo(
	 *          situacaoEspecialCobrancaHelper); } catch (ControladorException ex) {
	 *          throw new FachadaException(ex.getMessage(), ex, ex
	 *          .getParametroMensagem()); } }
	 */
	/**
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 17/01/2006 / public void retirarSituacaoEspecialCobranca(
	 *          SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper) {
	 *          try {
	 *          this.getControladorImovel().retirarSituacaoEspecialCobranca(
	 *          situacaoEspecialCobrancaHelper); } catch (ControladorException
	 *          ex) { throw new FachadaException(ex.getMessage(), ex, ex
	 *          .getParametroMensagem()); } }
	 */
	/**
	 * Este caso de uso cria um filtro do movimento dos arrecadadores
	 * [UC0263] - Filtrar Movimento dos Arrecadadores
	 * 
	 * @author Raphael Rossiter
	 * @date 23/02/2006
	 * @param filtroArrecadadorMovimento
	 * @param movimentoOcorrencia
	 * @param movimentoAceito
	 * @param movimentoAbertoFechado
	 * @return Uma coleção com os movimentos selecionados
	 */
	public FiltroArrecadadorMovimento filtrarMovimentoArrecadadores(FiltroArrecadadorMovimento filtroArrecadadorMovimento,
					String movimentoOcorrencia, String movimentoAceito, String movimentoAbertoFechado){

		try{

			return this.getControladorArrecadacao().filtrarMovimentoArrecadadores(filtroArrecadadorMovimento, movimentoOcorrencia,
							movimentoAceito, movimentoAbertoFechado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém o número de registros em ocorrência de um determinado movimento
	 * (número de linhas da tabela ARRECADADOR_MOVIMENTO_ITEM com ARMV_ID =
	 * ARMV_ID da tabela ARRECADADOR_MOVIMENTO e AMIT_DSOCORRENCIA diferente de
	 * "OK")
	 * 
	 * @author Raphael Rossiter
	 * @date 08/03/2006
	 * @param arrecadadorMovimento
	 * @return Um integer que representa a quantidade de registros selecionados
	 * @throws ControladorException
	 */
	public Integer obterNumeroRegistrosEmOcorrenciaPorMovimentoArrecadadores(ArrecadadorMovimento arrecadadorMovimento,
					String descricaoOcorrencia){

		try{

			return this.getControladorArrecadacao().obterNumeroRegistrosEmOcorrenciaPorMovimentoArrecadadores(arrecadadorMovimento,
							descricaoOcorrencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém o número de registros que Não foram aceitos de um determinado
	 * movimento (número de linhas da tabela ARRECADADOR_MOVIMENTO_ITEM com
	 * ARMV_ID = ARMV_ID da tabela ARRECADADOR_MOVIMENTO e AMIT_ICACEITACAO
	 * igual a 2 (Não))
	 * 
	 * @author Raphael Rossiter
	 * @date 08/03/2006
	 * @param arrecadadorMovimento
	 * @return Um integer que representa a quantidade de registros selecionados
	 * @throws ControladorException
	 */
	public Integer obterNumeroRegistrosNaoAceitosPorMovimentoArrecadadores(ArrecadadorMovimento arrecadadorMovimento,
					Short indicadorAceitacao){

		try{

			return this.getControladorArrecadacao().obterNumeroRegistrosNaoAceitosPorMovimentoArrecadadores(arrecadadorMovimento,
							indicadorAceitacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Lista os avisos bancários associados ao movimento com os seguintes dados:
	 * Data do lançamento Sequencial do Aviso Tipo do Aviso Data do Crédito
	 * Valor do Crédito Valor da Arrecadação Valor Total dos pagamentos
	 * associados ao aviso Situação do Aviso
	 * 
	 * @author Raphael Rossiter
	 * @date 08/03/2006
	 * @param arrecadadorMovimento
	 * @return Uma Collection<AvisoBancarioHelper> que representa a os avisos
	 *         bancários selecionados
	 * @throws ControladorException
	 */
	public Collection<AvisoBancarioHelper> obterColecaoAvisosBancariosPorArrecadadorMovimento(ArrecadadorMovimento arrecadadorMovimento){

		try{

			return this.getControladorArrecadacao().obterColecaoAvisosBancariosPorArrecadadorMovimento(arrecadadorMovimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void verificarExistenciaContaParaAvisoBancario(String idArrecadador, String idConta){

		try{

			this.getControladorArrecadacao().verificarExistenciaContaParaAvisoBancario(idArrecadador, idConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso apresenta a análise do aviso bancário e os
	 * pagamentos/devoluções associados.
	 * [UC0267] - Apresentar análise do Aviso bancário
	 * 
	 * @author Raphael Rossiter
	 * @date 23/03/2006
	 * @param avisoBancario
	 * @return AvisoBancarioHelper
	 */
	public AvisoBancarioHelper apresentarAnaliseAvisoBancario(AvisoBancario avisoBancario){

		try{

			return this.getControladorArrecadacao().apresentarAnaliseAvisoBancario(avisoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0113 - Faturar Grupo de Faturamento] Autor: Leonardo Vieira, Raphael
	 * Rossiter,Rafael Santos Data: 16/02/2006
	 * 
	 * @param colecaoRotas
	 *            Lista de Rotas
	 * @param sistemaParametro
	 *            Sistema Paramentro - Para obter o ANo/mês do Faturamento
	 * @param atividade
	 *            Atividade a Ser executada - Geração ou Simulação do
	 *            Faturamento
	 * @throws ControladorException
	 */
	// public void faturarGrupoFaturamento(
	// Collection colecaoFaturamentoAtividadeCronogramaRota,
	// FaturamentoGrupo faturamentoGrupo,
	// SistemaParametro sistemaParametro, int atividade)
	// {
	//
	// try {
	// this.getControladorFaturamento().faturarGrupoFaturamento(
	// colecaoFaturamentoAtividadeCronogramaRota,
	// faturamentoGrupo, sistemaParametro, atividade);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	//
	// }
	public void removerFaturamentoCronograma(String[] ids, String pacoteNomeObjeto, Usuario usuarioLogado) throws ControladorException{

		try{
			this.getControladorFaturamento().removerFaturamentoCronograma(ids, pacoteNomeObjeto, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo que verifica se ja tem um imovel ou um imovel economia com o
	 * numero do iptu passado caso a pessoa passe o idSetorComercial verifica
	 * apenas no mesmo municipio
	 * 
	 * @param numeroIptu
	 * @param idSetorComercial
	 * @throws ControladorException
	 */
	public void verificarExistenciaIPTU(String numeroIptu, Integer idSetorComercial){

		try{
			this.getControladorImovel().verificarExistenciaIPTU(numeroIptu, idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo que verifica se ja tem um imovel ou um imovel economia com o
	 * numero do iptu passado caso a pessoa passe o idSetorComercial verifica
	 * apenas no mesmo municipio
	 * 
	 * @param numeroIptu
	 * @param idSetorComercial
	 * @throws ControladorException
	 */
	public void verificarExistenciaCELPE(String numeroCelp, Integer idSetorComercial){

		try{
			this.getControladorImovel().verificarExistenciaCELPE(numeroCelp, idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo que atualiza uma medição histórico verificando a ultima alteracao
	 * para o controle de concorrência
	 * 
	 * @param medicaoHistorico
	 * @throws ControladorException
	 */
	public void atualizarMedicaoHistorico(MedicaoHistorico medicaoHistorico){

		try{
			this.getControladorMicromedicao().atualizarMedicaoHistorico(medicaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que verifica se o usuario esta cadastrado em outro imovel que
	 * esteja na tarifa social e verifica se ja esta cadastrado como usuario de
	 * algum imovel economia,
	 * Caso o idImovel seja diferente de nula ele verifa se o usuario esta
	 * cadastrado num imovel diferente do id passado.
	 * Caso o idImovelEconomia seja diferente de nula ele verifaca se o usuario
	 * esta cadastrado num imovel economia do idImovelEconomia passado.
	 * 
	 * @param idImovel
	 * @param idImovelEconomia
	 * @param idEconomiaAtual
	 * @param idClienteUsuario
	 */
	public void verificarClienteUsuarioEmOutroEconomia(Integer idImovel, Integer idImovelEconomia, Integer idClienteUsuario){

		try{
			this.getControladorTarifaSocial().verificarClienteUsuarioEmOutroEconomia(idImovel, idImovelEconomia, idClienteUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que atualiza o aviso bancario, adiciona as deducoes e acertos
	 * novas e remove as deducoes e os acertos que forma para remover
	 * 
	 * @author thiago
	 * @date 14/03/2006
	 * @param avisoBancario
	 * @param duducoes
	 * @param deducoesParaRemover
	 * @param acertos
	 * @param acertosParaRemover
	 */
	public void atualizarAvisoBancario(AvisoBancario avisoBancario, Collection duducoes, Collection deducoesParaRemover,
					Collection acertos, Collection acertosParaRemover, Usuario usuario){

		try{

			this.getControladorArrecadacao().atualizarAvisoBancario(avisoBancario, duducoes, deducoesParaRemover, acertos,
							acertosParaRemover, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Validar Filtrar Aviso Bancário
	 * 
	 * @author Vivianne Sousa
	 * @date 18/03/2006
	 * @param dataLancamentoInicio
	 * @param dataLancamentoFim
	 * @param periodoArrecadacaoInicio
	 * @param periodoArrecadacaoFim
	 * @param dataPrevisaoCreditoDebitoInicio
	 * @param dataPrevisaoCreditoDebitoFim
	 * @param intervaloValorPrevistoInicio
	 * @param intervaloValorPrevistoFim
	 * @param dataRealizacaoCreditoDebitoInicio
	 * @param dataRealizacaoCreditoDebitoFim
	 * @param intervaloValorRealizadoInicio
	 * @param intervaloValorRealizadoFim
	 *            return void
	 * @throws ControladorException
	 */
	public void validacaoFinal(Date dataLancamentoInicio, Date dataLancamentoFim, Integer periodoArrecadacaoInicio,
					Integer periodoArrecadacaoFim, Date dataPrevisaoCreditoDebitoInicio, Date dataPrevisaoCreditoDebitoFim,
					BigDecimal intervaloValorPrevistoInicio, BigDecimal intervaloValorPrevistoFim, Date dataRealizacaoCreditoDebitoInicio,
					Date dataRealizacaoCreditoDebitoFim, BigDecimal intervaloValorRealizadoInicio, BigDecimal intervaloValorRealizadoFim){

		try{

			this.getControladorArrecadacao().validacaoFinal(dataLancamentoInicio, dataLancamentoFim, periodoArrecadacaoInicio,
							periodoArrecadacaoFim, dataPrevisaoCreditoDebitoInicio, dataPrevisaoCreditoDebitoFim,
							intervaloValorPrevistoInicio, intervaloValorPrevistoFim, dataRealizacaoCreditoDebitoInicio,
							dataRealizacaoCreditoDebitoFim, intervaloValorRealizadoInicio, intervaloValorRealizadoFim);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa o maior ano mes de referencia da tabela de faturamento grupo
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 18/03/2006
	 * @param situacaoEspecialCobrancaHelper
	 * @return
	 */
	public Integer validarMesAnoReferenciaCobranca(SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper){

		try{
			return this.getControladorImovel().validarMesAnoReferenciaCobranca(situacaoEspecialCobrancaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza o id da Cobrança situação tipo da tabela imóvel com o id da
	 * situação escolhido pelo usuario
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 18/03/2006
	 * @param situacaoEspecialCobrancaHelper
	 * @return
	 */
	public void atualizarCobrancaSituacaoTipo(Collection colecaoIdsImoveis, Integer idCobrancaTipo){

		try{
			this.getControladorImovel().atualizarCobrancaSituacaoTipo(colecaoIdsImoveis, idCobrancaTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Seta para null o id da Cobrança situação tipo da tabela imóvel
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 18/03/2006
	 * @param situacaoEspecialCobrancaHelper
	 * @return
	 */
	public void retirarSituacaoEspecialCobranca(SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper, Usuario usuarioExclusao){

		try{
			this.getControladorImovel().retirarSituacaoEspecialCobranca(situacaoEspecialCobrancaHelper, usuarioExclusao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri a Cobrança situação historico na base passando a coleção de
	 * Cobrança situação historico
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 20/03/2006
	 * @param collectionCobrancaSituacaoHistorico
	 * @return
	 */
	public void inserirCobrancaSituacaoHistorico(Collection collectionCobrancaSituacaoHistorico){

		try{
			this.getControladorCobranca().inserirCobrancaSituacaoHistorico(collectionCobrancaSituacaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que recebe um array de Integer e remove os Avisos Bancarios dos
	 * ids passado, caso exista um Aviso Bancario que tenha um relacionamento
	 * com outra tabela entao nao remove nenhum. Outra tabela fora aviso_deducao
	 * e aviso_acerto
	 * 
	 * @author Thiago Toscano
	 * @date 20/03/2006
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerAvisosBancarios(Integer[] ids, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorArrecadacao().removerAvisosBancarios(ids, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0270] Apresentar análise do Movimento dos Arrecadadores
	 * O sistema seleciona os itens do movimento do arrecadador com os seguintes
	 * dados: 1 - Código do Registro 2 - Identificação do imóvel/Cliente 3 -
	 * ocorrência 4 - Indicador de Aceitação 5 - Descrição do Indicador de
	 * Aceitação
	 * [SF0001] Consultar os Itens do Movimento do Arrecadador
	 * 
	 * @author Raphael Rossiter
	 * @data 20/03/2006
	 * @param arrecadadorMovimento
	 * @return Collection<ArrecadadorMovimentoItemHelper>
	 */
	public Collection<ArrecadadorMovimentoItemHelper> consultarItensMovimentoArrecadador(ArrecadadorMovimento arrecadadorMovimento,
					Integer idImovel, Short indicadorAceitacao, String descricaoOcorrencia){

		try{

			return this.getControladorArrecadacao().consultarItensMovimentoArrecadador(arrecadadorMovimento, idImovel, indicadorAceitacao,
							descricaoOcorrencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Atualiza a situação das Contas para Efetuar Parcelamento
	 * atualizarContaEfetuarParcelamentoDebito
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	public void atualizarContaEfetuarParcelamentoDebito(Conta conta){

		try{
			this.getControladorCobranca().atualizarContaEfetuarParcelamentoDebito(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Verifica a existência de parcelamento no mês
	 * [FS0012] Verifica a existência de parcelamento no mês
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @param codigoImovel
	 * @return Collection<Parcelamento>
	 */
	public Collection<Parcelamento> verificarParcelamentoMesImovel(Integer codigoImovel){

		try{
			return this.getControladorCobranca().verificarParcelamentoMesImovel(codigoImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0270] Apresentar análise do Movimento dos Arrecadadores
	 * O sistema captura os dados referentes ao conteúdo do registro de
	 * Movimento do arrecadador
	 * [SF0002] Apresentar Dados do conteúdo do Registro de Movimento do
	 * Arrecadador
	 * 
	 * @author Raphael Rossiter
	 * @data 21/03/2006
	 * @param arrecadadorMovimentoItem
	 * @return DadosConteudoRegistroMovimentoArrecadador
	 */
	public DadosConteudoRegistroMovimentoArrecadadorHelper apresentarDadosConteudoRegistroMovimentoArrecadador(
					ArrecadadorMovimentoItem arrecadadorMovimentoItem){

		try{

			return this.getControladorArrecadacao().apresentarDadosConteudoRegistroMovimentoArrecadador(arrecadadorMovimentoItem);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Pedro Alexandre
	 * @date 22/03/2006
	 * @param idsPagamentos
	 */
	public void removerPagamentos(String[] idsPagamentos, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().removerPagamentos(idsPagamentos, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void removerPagamentosAjusteDESO(String idMovimentoCorreto, String idMovimentoDuplicado){

		try{
			this.getControladorArrecadacao().removerPagamentosAjusteDESO(idMovimentoCorreto, idMovimentoDuplicado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta todas as TabelaColunas que estejam ligadas a uma
	 * Operacao
	 * 
	 * @author Thiago Toscano
	 * @date 23/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection getTabelaColunaPertencenteOperacao(){

		try{
			return this.getControladorAcesso().getTabelaColunaPertencenteOperacao();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que pesquisa todas as tabelas colunas que tem ligacao com operacao
	 * pela operacao tabela
	 * 
	 * @author thiago toscano
	 * @date 23/03/2006
	 * @param idOperacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection getTabelaColunaDasOperacaoTabela(Integer idOperacao){

		try{
			return this.getControladorAcesso().getTabelaColunaDasOperacaoTabela(idOperacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtem uma coleção com as listas de atividades de cronograma ação cobranca
	 * que estão comandadas
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Verificar Seleção de pelo menos uma atividade de Cobrança
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListaAtividadeCronogramaAcaoCobrancaComandadas() throws FachadaException{

		try{
			return this.getControladorCobranca().obterListaAtividadeCronogramaAcaoCobrancaComandadas();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtem uma coleção com as listas de eventual de comando ação cobranca que
	 * estão comandadas
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Verificar Seleção de pelo menos uma atividade de Cobrança
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListaAtividadesEventuaisAcaoCobrancaComandadas() throws FachadaException{

		try{
			return this.getControladorCobranca().obterListaAtividadesEventuaisAcaoCobrancaComandadas();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Este fluxo secundário tem como objetivo pesquisar a localidade digitada
	 * pelo usuário
	 * [FS0007] - Verificar existência da localidade
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idLocalidadeDigitada
	 * @return
	 */
	public Localidade pesquisarLocalidadeDigitada(Integer idLocalidadeDigitada){

		try{
			return this.getControladorLocalidade().pesquisarLocalidadeDigitada(idLocalidadeDigitada);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Este fluxo secundário tem como objetivo pesquisar o imóvel digitado pelo
	 * usuário
	 * [FS0008] - Verificar existência da matrícula do imóvel
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idImovelDigitado
	 * @return
	 */
	public Imovel pesquisarImovelDigitado(Integer idImovelDigitado){

		try{
			return this.getControladorImovel().pesquisarImovelDigitado(idImovelDigitado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se a localidade informada é a mesma do imóvel informado
	 * [FS0009] - Verificar localidade da matrícula do imóvel
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idLocalidadeInformada
	 * @param imovelInformado
	 * @return
	 */
	public boolean verificarLocalidadeMatriculaImovel(String idLocalidadeInformada, Imovel imovelInformado){

		try{
			return this.getControladorImovel().verificarLocalidadeMatriculaImovel(idLocalidadeInformada, imovelInformado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Este fluxo secundário tem como objetivo pesquisar o cliente digitado pelo
	 * usuário
	 * [FS0011] - Verificar existência do Código do cliente
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idClienteDigitado
	 * @return
	 */
	public Cliente pesquisarClienteDigitado(Integer idClienteDigitado){

		try{
			return this.getControladorCliente().pesquisarClienteDigitado(idClienteDigitado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa a conta do imóvel com a referência informada pelo usuário
	 * [FS0012] - Verificar existência da conta
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idImovel
	 * @param referenciaConta
	 * @return
	 */
	public Conta pesquisarContaDigitada(String idImovel, String referenciaConta){

		try{
			return this.getControladorFaturamento().pesquisarContaDigitada(idImovel, referenciaConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa o tipo de débito informado pelo usuário
	 * [FS0020] - Verificar existência do tipo de débito
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idTipoDebitoDigitado
	 * @return
	 */
	public DebitoTipo pesquisarTipoDebitoDigitado(Integer idTipoDebitoDigitado){

		try{
			return this.getControladorFaturamento().pesquisarTipoDebitoDigitado(idTipoDebitoDigitado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa o débito a cobrar do imóvel informado pelo usuário
	 * [FS0024] - Verificar existência do débito a cobrar
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idImovel
	 * @param idDebitoACobrar
	 * @return
	 */
	public DebitoACobrar pesquisarDebitoACobrarDigitado(String idImovel, String idDebitoACobrar){

		try{
			return this.getControladorArrecadacao().pesquisarDebitoACobrarDigitado(idImovel, idDebitoACobrar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa o débito a cobrar do imóvel informado pelo usuário
	 * [FS0024] - Verificar existência do débito a cobrar
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idImovel
	 * @param idDebitoACobrar
	 * @return
	 */
	public DebitoACobrar pesquisarDebitoACobrarDigitado2(String idImovel, String idDebitoACobrar){

		try{
			return this.getControladorArrecadacao().pesquisarDebitoACobrarDigitado2(idImovel, idDebitoACobrar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o débito a cobrar do imóvel informado pelo usuário
	 * 
	 * @param idImovel
	 * @param idDebitoACobrar
	 * @return DebitoACobrarHistorico
	 */
	public DebitoACobrarHistorico pesquisarDebitoACobrarHistoricoDigitado(String idImovel, String idDebitoACobrar){

		try{
			return this.getControladorArrecadacao().pesquisarDebitoACobrarHistoricoDigitado(idImovel, idDebitoACobrar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa a guia de pagamento do imóvel informado pelo usuário
	 * [FS0022] - Verificar existência da guia de pagamento
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idImovel
	 * @param idCliente
	 * @param idGuiaPagamento
	 * @return
	 */
	public GuiaPagamento pesquisarGuiaPagamentoDigitada(String idImovel, String idCliente, String idGuiaPagamento){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaPagamentoDigitada(idImovel, idCliente, idGuiaPagamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar uma coleção de pagamentos no sistema
	 * [UC0265] Atualizar Pagamentos
	 * Pesquisa a guia de pagamento histórico do imóvel informado pelo usuário
	 * 
	 * @author Carlos Chrystian Ramos
	 * @date 18/06/2013
	 * @param idImovel
	 * @param idCliente
	 * @param idGuiaPagamento
	 * @return
	 * @throws ControladorException
	 */
	public GuiaPagamentoHistorico pesquisarGuiaPagamentoHistoricoDigitada(String idImovel, String idCliente, String idGuiaPagamento){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaPagamentoHistoricoDigitada(idImovel, idCliente, idGuiaPagamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se o usuário informou o imóvel ou o cliente, Não pode existir os
	 * doi nem nenhum
	 * [FS0010] Verificar preenchimento do imóvel e do cliente
	 * 
	 * @author Pedro Alexandre
	 * @date 24/03/2006
	 * @param idImovel
	 * @param idCliente
	 */
	public void verificarPreeenchimentoImovelECliente(String idImovel, String idCliente){

		try{
			this.getControladorImovel().verificarPreeenchimentoImovelECliente(idImovel, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se o usuário informou o Código da guia de pagamento e o tipo de
	 * débito, só pode ser informado um dos dois
	 * [FS0021] Verificar preenchimento da guia de pagamento e do tipo de débito
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idGuiaPagamento
	 * @param idTipoDebito
	 */
	public void verificarPreeenchimentoGuiaPagamentoETipoDebito(String idGuiaPagamento, String idTipoDebito){

		try{
			this.getControladorArrecadacao().verificarPreeenchimentoGuiaPagamentoETipoDebito(idGuiaPagamento, idTipoDebito);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se o usuário informou o Código do débito a cobrar e o tipo de
	 * débito, só pode ser informado um dos dois
	 * [FS0023] Verificar preenchimento do débito a cobrar e do tipo de débito
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param idDebitoACobrar
	 * @param idTipoDebito
	 */
	public void verificarPreeenchimentoDebitoACobrarETipoDebito(String idDebitoACobrar, String idTipoDebito){

		try{
			this.getControladorArrecadacao().verificarPreeenchimentoDebitoACobrarETipoDebito(idDebitoACobrar, idTipoDebito);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se a localidade informada é a mesma da guia de pagamento
	 * [FS0014] Verificar localidade da guia de pagamento
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param guiaPagamento
	 * @param idLocalidade
	 */
	public void verificarLocalidadeGuiaPagamento(GuiaPagamento guiaPagamento, String idLocalidade){

		try{
			this.getControladorArrecadacao().verificarLocalidadeGuiaPagamento(guiaPagamento, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica se a localidade informada é a mesma do débito a cobrar
	 * [FS0017] Verificar localidade do débito a cobrar
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param debitoACobrar
	 * @param idLocalidade
	 */
	public void verificarLocalidadeDebitoACobrar(DebitoACobrar debitoACobrar, String idLocalidade){

		try{
			this.getControladorArrecadacao().verificarLocalidadeDebitoACobrar(debitoACobrar, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * * Verifica se a localidade informada é a mesma do débito a cobrar
	 * 
	 * @param debitoACobrarHistorico
	 * @param idLocalidade
	 */
	public void verificarLocalidadeDebitoACobrarHistorico(DebitoACobrarHistorico debitoACobrarHistorico, String idLocalidade){

		try{
			this.getControladorArrecadacao().verificarLocalidadeDebitoACobrarHistorico(debitoACobrarHistorico, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica a existência de débito a cobrar com o tipo de débito e o imóvel
	 * informados
	 * [FS0016] Verificar existência de débito a cobrar com tipo de débito
	 * informado
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param tipoDebito
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public DebitoACobrar verificarExistenciaDebitoACobrarComTipoDebito(DebitoTipo tipoDebito, String idImovel){

		try{
			return this.getControladorArrecadacao().verificarExistenciaDebitoACobrarComTipoDebito(tipoDebito, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existência de débito a cobrar com o tipo de débito e o imóvel
	 * informados
	 * 
	 * @param tipoDebito
	 * @param idImovel
	 * @return
	 */
	public DebitoACobrarHistorico verificarExistenciaDebitoACobrarHistoricoComTipoDebito(DebitoTipo tipoDebito, String idImovel){

		try{
			return this.getControladorArrecadacao().verificarExistenciaDebitoACobrarHistoricoComTipoDebito(tipoDebito, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Verifica a existência de guia de pagamento com o tipo de débito e o
	 * imóvel informados
	 * [FS0013] Verificar existência de guia de pagamento com tipo de débito
	 * informado
	 * 
	 * @author Pedro Alexandre
	 * @date 16/02/2006
	 * @param tipoDebito
	 * @param idImovel
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */
	public GuiaPagamento verificarExistenciaGuiaPagamentoComTipoDebito(DebitoTipo tipoDebito, String idImovel, String idCliente){

		try{
			return this.getControladorArrecadacao().verificarExistenciaGuiaPagamentoComTipoDebito(tipoDebito, idImovel, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Atualizar uma coleção de pagamentos no sistema
	 * [UC0265] Atualizar Pagamentos
	 * Pesquisa a guia de pagamento histórico do imóvel informado pelo usuário
	 * 
	 * @author Carlos Chrystian Ramos
	 * @date 19/06/2013
	 * @param idImovel
	 * @param idCliente
	 * @param tipoDebito
	 * @return
	 * @throws ControladorException
	 */
	public GuiaPagamentoHistorico verificarExistenciaGuiaPagamentoHistoricoComTipoDebito(DebitoTipo tipoDebito, String idImovel,
					String idCliente){

		try{
			return this.getControladorArrecadacao().verificarExistenciaGuiaPagamentoHistoricoComTipoDebito(tipoDebito, idImovel, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Obtém as Opções de Parcelamento do débito do imóvel
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 23/03/2006
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	public NegociacaoOpcoesParcelamentoHelper obterOpcoesDeParcelamento(Integer resolucaoDiretoria, Integer codigoImovel,
					BigDecimal valorEntradaInformado, Integer situacaoAguaId, Integer situacaoEsgotoId, Integer perfilImovel,
					String inicioIntervaloParcelamento, Integer indicadorRestabelecimento, Collection colecaoContaValores,
					BigDecimal valorDebitoAtualizado, BigDecimal valorTotalMultas, BigDecimal valorTotalJurosMora,
					BigDecimal valorTotalAtualizacoesMonetarias, Integer numeroReparcelamentoConsecutivos,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoHelper, Usuario usuarioLogado,
					BigDecimal valorDebitoACobrarParcelamentoImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito, IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
					String dataVencimentoEntradaParcelamento, BigDecimal valorTotalSucumbencia, Integer quantidadeParcelasSucumbencia,
					BigDecimal valorSucumbenciaAtual, BigDecimal valorDiligencias){

		try{
			return this.getControladorCobranca().obterOpcoesDeParcelamento(resolucaoDiretoria, codigoImovel, valorEntradaInformado,
							situacaoAguaId, situacaoEsgotoId, perfilImovel, inicioIntervaloParcelamento, indicadorRestabelecimento,
							colecaoContaValores, valorDebitoAtualizado, valorTotalMultas, valorTotalJurosMora,
							valorTotalAtualizacoesMonetarias, numeroReparcelamentoConsecutivos, colecaoGuiaPagamentoHelper, usuarioLogado,
							valorDebitoACobrarParcelamentoImovel, anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito,
							indicadoresParcelamentoHelper, dataVencimentoEntradaParcelamento, false, null, valorTotalSucumbencia,
							quantidadeParcelasSucumbencia, valorSucumbenciaAtual, valorDiligencias);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Map<Integer, BigDecimal> determinarValorSucumbenciaAtual(Integer idImovel, Collection<ContaValoresHelper> colecaoContaHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoHelper, String chavesSucumbenciasConta,
					String chavesSucumbenciasGuia){

		try{
			return this.getControladorCobranca().determinarValorSucumbenciaAtual(idImovel, colecaoContaHelper, colecaoGuiaPagamentoHelper,
							chavesSucumbenciasConta, chavesSucumbenciasGuia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0049] Distribuir Valor de Sucumbência Atual Entre os Processos de Execução Fiscal
	 * [SB0050] Distribuir Valor de Diligências Entre os Processos de Execução Fiscal
	 * 
	 * @author Saulo Lima
	 * @date 15/07/2014
	 */
	public Map<Integer, BigDecimal> distribuirValorEntreProcessosExecucaoFiscal(BigDecimal valorDigitado,
					Map<Integer, BigDecimal> mapProcessosValorSucumbenciaAtual, Integer idImovel){

		try{
			return this.getControladorCobranca().distribuirValorEntreProcessosExecucaoFiscal(valorDigitado,
							mapProcessosValorSucumbenciaAtual, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0038] Inserir Rota e [UC0039]Manter Rota
	 * Validar Inserir Rota e Alterar Rota
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2006
	 * @param collectionRotaAcaoCriterio
	 *            return void
	 * @param idLocalidade
	 *            ,
	 * @param idSetorComercial
	 *            ,
	 * @param codigoRota
	 *            ,
	 * @param idCobrancaGrupo
	 *            ,
	 * @param idFaturamentoGrupo
	 *            ,
	 * @param idLeituraTipo
	 *            ,
	 * @param idEmpresaLeituristica
	 *            ,
	 * @param dataAjusteLeitura
	 *            ,
	 * @param indicadorAjusteConsumo
	 *            ,
	 * @param indicadorFiscalizarCortado
	 *            ,
	 * @param indicadorFiscalizarSuprimido
	 *            ,
	 * @param indicadorGerarFalsaFaixa
	 *            ,
	 * @param percentualGeracaoFaixaFalsa
	 *            ,
	 * @param indicadorGerarFiscalizacao
	 *            ,
	 * @param percentualGeracaoFiscalizacao
	 *            ,
	 * @param indicadorUso
	 *            ,
	 * @param acao
	 *            ,
	 * @throws ControladorException
	 */
	public void validacaoFinalRota(String idLocalidade, String idSetorComercial, String codigoRota, String idCobrancaGrupo,
					String idFaturamentoGrupo, String idLeituraTipo, String idEmpresaLeituristica, String indicadorFiscalizarCortado,
					String indicadorFiscalizarSuprimido, String indicadorGerarFalsaFaixa, String percentualGeracaoFaixaFalsa,
					String indicadorGerarFiscalizacao, String percentualGeracaoFiscalizacao, String indicadorUso, String idLeiturista,
					String acao, Collection collectionRotaAcaoCriterio){

		try{

			this.getControladorMicromedicao().validacaoFinalRota(idLocalidade, idSetorComercial, codigoRota, idCobrancaGrupo,
							idFaturamentoGrupo, idLeituraTipo, idEmpresaLeituristica, indicadorFiscalizarCortado,
							indicadorFiscalizarSuprimido, indicadorGerarFalsaFaixa, percentualGeracaoFaixaFalsa,
							indicadorGerarFiscalizacao, percentualGeracaoFiscalizacao, indicadorUso, idLeiturista, acao,
							collectionRotaAcaoCriterio, true);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * responsável pela manutenção das informAções de pagamento
	 * [UC0266] Manter Pagamentos
	 * Atualiza um pagamento no sistema, verificando se a atualização já foi
	 * executada por outro usuário
	 * [SB0001] Atualizar Pagamento
	 * 
	 * @author Pedro Alexandre
	 * @date 25/03/2006
	 * @param pagamento
	 * @param valorPagamentoAnteriror
	 * @param usuarioLogado
	 */
	public void atualizarPagamento(Pagamento pagamento, Usuario usuarioLogado, String gerarDevolucaoValores, Integer idCreditoTipo,
					PagamentoSituacao situacaoPagamentoOriginal, boolean gerarDebitoACobrar){

		try{
			this.getControladorArrecadacao().atualizarPagamento(pagamento, usuarioLogado, gerarDevolucaoValores, idCreditoTipo,
							situacaoPagamentoOriginal, gerarDebitoACobrar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtem a Lista de Rotas
	 * [UC0244] Manter Comando Ação Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * @param codigoImovel
	 * @param idRotaInicial
	 * @param idRotaFinal
	 * @param idSetorComercialInicial
	 * @param idSetorComercialFinal
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param idGerenciaRegional
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListasRotas(String idRotaInicial, String idRotaFinal, String idSetorComercialInicial,
					String idSetorComercialFinal, String idLocalidadeInicial, String idLocalidadeFinal, String idGerenciaRegional,
					String idUnidadeNegocio){

		try{
			return this.getControladorCobranca().obterListasRotas(idRotaInicial, idRotaFinal, null, null, idSetorComercialInicial,
							idSetorComercialFinal, idLocalidadeInicial, idLocalidadeFinal, idGerenciaRegional, idUnidadeNegocio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Executa o Comando Eventual
	 * [SF0009] Executar Comando Eventual
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @param cobrancaAtividade
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcao
	 * @param colecaoRotas
	 * @return
	 * @throws ControladorException
	 */
	public GerarAtividadeAcaoCobrancaHelper executarComandoEventual(CobrancaAtividade cobrancaAtividade,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, CobrancaAcao cobrancaAcao, Collection colecaoRotas,
					Usuario usuario){

		try{
			return this.getControladorCobranca().executarComandoEventual(cobrancaAtividade, cobrancaAcaoAtividadeComando, cobrancaAcao,
							colecaoRotas, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Exclui Comando de Atividade do Cronograma de Ação de Cobrança
	 * [SB0001] - Excluir Comando de Atividade de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeCronogramaAcaoCobranca(String[] idsCobrancaAcaoAtividadeCronograma){

		try{
			this.getControladorCobranca().excluirComandoAtividadeCronogramaAcaoCobranca(idsCobrancaAcaoAtividadeCronograma);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Exclui Comando de Atividade de Eventual de Ação de Cobrança
	 * [SB0003] - Excluir Comando de Atividade Eventual de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeEventualAcaoCobranca(String[] idsCobrancaAcaoAtividadeEventual){

		try{
			this.getControladorCobranca().excluirComandoAtividadeEventualAcaoCobranca(idsCobrancaAcaoAtividadeEventual);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar Linhas do Criterios
	 * [SB0005] - Consultar Linhas do Criterios
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCriterioCobranca
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarLinhasCriterio(String idCriterioCobranca){

		try{
			return this.getControladorCobranca().consultarLinhasCriterio(idCriterioCobranca);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Selecionar Critérios do Comando
	 * [SB0004] - Selecionar Critérios do Comando
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcao
	 * @param idCobrancaAcaoAtividadeComando
	 * @param indicadorCriterioComandoMarcado
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarCriteriosComando(String idCobrancaAcao){

		try{
			return this.getControladorCobranca().consultarCriteriosComando(idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar O Periodo Final da Conta para usar em Cobranca Ação Atividade
	 * Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public String consultarPeriodoFinalContaCobrancaAcaoAtividadeComando(){

		try{
			return this.getControladorCobranca().consultarPeriodoFinalContaCobrancaAcaoAtividadeComando();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar O Periodo Vencimento da Conta para usar em Cobranca Ação
	 * Atividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 */
	public String consultarPeriodoVencimentoContaFinalCobrancaAcaoAtividadeComando(){

		try{
			return this.getControladorCobranca().consultarPeriodoVencimentoContaFinalCobrancaAcaoAtividadeComando();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Grupo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaGrupo(){

		try{
			return this.getControladorCobranca().obterColecaoCobrancaGrupo();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAtividade(){

		try{
			return this.getControladorCobranca().obterColecaoCobrancaAtividade();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Acao
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAcao(){

		try{
			return this.getControladorCobranca().obterColecaoCobrancaAcao();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Gerencia Regionais
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoGerenciaRegional(){

		try{
			return this.getControladorCobranca().obterColecaoGerenciaRegional();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Unidade Negocio
	 * 
	 * @author Rafael Santos
	 * @date 11/10/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoUnidadeNegocio(){

		try{
			return this.getControladorCobranca().obterColecaoUnidadeNegocio();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Relações Cliente Tipo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoClienteRelacaoTipo(){

		try{
			return this.getControladorCobranca().obterColecaoClienteRelacaoTipo();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobrança Atividade pela Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade obterCobrancaAtividade(String idCobrancaAtividade){

		try{
			return this.getControladorCobranca().obterCobrancaAtividade(idCobrancaAtividade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Coleção de Rotas do Setor Comercial
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRota(String idSetorComercial){

		try{
			return this.getControladorCobranca().obterColecaoRota(idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0038] Inserir Situação do imóvel
	 * Validar Inserir Situação do imóvel
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/03/2006
	 * @param idImovelSituacaoTipo
	 * @param idLigacaoAguaSituacao
	 * @param idLigacaoEsgotoSituacao
	 * @return
	 * @throws ControladorException
	 */
	public Integer inserirSituacaoImovel(String idImovelSituacaoTipo, String idLigacaoAguaSituacao, String idLigacaoEsgotoSituacao){

		try{

			return this.getControladorImovel().inserirSituacaoImovel(idImovelSituacaoTipo, idLigacaoAguaSituacao, idLigacaoEsgotoSituacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite executar as atividades do faturamento previamente comandadas
	 * [UC0111] Executar Atividade do Faturamento
	 * Lista as atividades de faturamento do cronograma que foram comandadas
	 * obterAtividadesFaturamentoCronogramaComandada
	 * 
	 * @author Raphael Rossiter, Roberta Costa
	 * @date 29/03/2006, 29/04/20004
	 * @return Collection<ExecutarAtividadeFaturamentoHelper>
	 * @throws ControladorException
	 */
	public Collection<ExecutarAtividadeFaturamentoHelper> obterAtividadesFaturamentoCronogramaComandada(Integer numeroPagina){

		try{
			return this.getControladorFaturamento().obterAtividadesFaturamentoCronogramaComandada(numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método de pesquisa serve para localizar qualquer objeto no sistema.
	 * Ele aceita como parâmetro um offset que indica a página desejada no
	 * esquema de paginação. A paginação procura 10 registros de casa vez.
	 * 
	 * @author Rodrigo Silveira
	 * @date 30/03/2006
	 * @param filtro
	 *            Filtro da pesquisa
	 * @param pageOffset
	 *            Indicador da página desejada do esquema de paginação
	 * @param pacoteNomeObjeto
	 *            Pacote do objeto
	 * @return Coleção dos resultados da pesquisa
	 */

	public Collection pesquisar(Filtro filtro, int pageOffset, String pacoteNomeObjeto){

		try{
			return this.getControladorUtil().pesquisar(filtro, pageOffset, pacoteNomeObjeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informa o número total de registros de uma pesquisa, auxiliando o esquema
	 * de paginação
	 * 
	 * @author Rodrigo Silveira
	 * @date 30/03/2006
	 * @param Filtro
	 *            da Pesquisa
	 * @param Pacote
	 *            do objeto pesquisado
	 * @return número de registros da pesquisa
	 */

	public int totalRegistrosPesquisa(Filtro filtro, String pacoteNomeObjeto){

		try{
			return this.getControladorUtil().totalRegistrosPesquisa(filtro, pacoteNomeObjeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite inserir uma Resolução de Diretoria
	 * [UC0217] Inserir Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @date 30/03/2006
	 */

	public Integer inserirResolucaoDiretoria(ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado){

		try{
			return this.getControladorCobranca().inserirResolucaoDiretoria(resolucaoDiretoria, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite inserir um Historico Alteração de Sistema
	 * [UC0217] Inserir Historico AlterAções de Sistema
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirHistoricoAlteracaoSistema(SistemaAlteracaoHistorico sistemaAlteracaoHistorico){

		try{
			return this.getControladorCadastro().inserirHistoricoAlteracaoSistema(sistemaAlteracaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite atualizar uma Resolução de Diretoria
	 * [UC0218] Manter Resolução de Diretoria
	 * [SB0001] - Atualizar Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @date 10/04/2006
	 */

	public void atualizarResolucaoDiretoria(ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado){

		try{
			this.getControladorCobranca().atualizarResolucaoDiretoria(resolucaoDiretoria, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir Debito A Cobrar para o Imovel
	 * [UC0183] - Inserir Debito a Cobrar
	 * 
	 * @author Rafael Santos
	 * @date 01/04/2006
	 * @param idDebitoTipo
	 * @return
	 */
	public DebitoTipo pesquisarDebitoTipo(String idDebitoTipo){

		try{
			return this.getControladorFaturamento().pesquisarDebitoTipo(idDebitoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * O sistema seleciona os grupos de faturamento que possuem cronograma para
	 * o mês corrente * [UC0144] Inserir Comando Atividade de Faturamento
	 * 
	 * @author Raphael Rossiter
	 * @date 03/03/2006
	 * @return Collection<FaturamentoGrupo>
	 * @throws ErroRepositorioException
	 */
	public Collection<FaturamentoGrupo> pesquisarFaturamentoGrupoComCronogramaMensalParaMesCorrente(){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoGrupoComCronogramaMensalParaMesCorrente();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * O sistema seleciona os grupos de faturamento que possuem cronograma para
	 * o mês corrente
	 * [UC0104] Manter Comando Atividade de Faturamento
	 * Caso esteja no atualizar pode escolher todos os grupos exceto o
	 * selecionado para atualização
	 * pesquisarFaturamentoGrupoComCronogramaMensalParaMesCorrenteSemGupoSelecionado
	 * 
	 * @author Roberta Costa
	 * @date 20/07/2006
	 * @return Collection<FaturamentoGrupo>
	 * @throws ControladorException
	 */
	public Collection<FaturamentoGrupo> pesquisarFaturamentoGrupoComCronogramaMensalParaMesCorrenteSemGupoSelecionado(
					Integer grupoSelecionado){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoGrupoComCronogramaMensalParaMesCorrenteSemGupoSelecionado(
							grupoSelecionado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Administrador
	 * @date 03/04/2006
	 * @param rotas
	 * @throws ControladorException
	 */

	public void gerarTaxaEntregaDeContaEmOutroEndereco(Collection<Rota> rotas, Integer anoMes){

		/*
		 * try {
		 * this.getControladorFaturamento()
		 * .gerarTaxaEntregaDeContaEmOutroEndereco(rotas, anoMes); } catch
		 * (ControladorException ex) { throw new
		 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); }
		 */
	}

	/**
	 * Inserir um comando de atividade de Cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Verificar referência final menor que referência inicial
	 * [FS0012] - Verificar referência final menor que referência inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void validarAnoMesInicialFinalComandoAcaoCobranca(String anoMesContaInicial, String anoMesContaFinal){

		try{
			this.getControladorCobranca().validarAnoMesInicialFinalComandoAcaoCobranca(anoMesContaInicial, anoMesContaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir um comando de atividade de Cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Verificar data final menos que data inicial
	 * [FS0014] - Verificar data final menos que data inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void verificarVencimentoContaComandoAcaoCobranca(String anoMesVencimentoInicial, String anoMesVencimentoFinal){

		try{
			this.getControladorCobranca().verificarVencimentoContaComandoAcaoCobranca(anoMesVencimentoInicial, anoMesVencimentoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite a consulta de documentos de Cobrança
	 * [UC0257] - Consultar Documentos de Cobrança
	 * Apresenta os itens dos documentos de Cobrança
	 * [SB0001] - Apresenta Itens do Documento de Cobrança
	 * 
	 * @author Rafael Corrêa & Raphael Rossiter
	 * @date 05/04/2006
	 */
	public CobrancaDocumentoHelper apresentaItensDocumentoCobranca(CobrancaDocumento cobrancaDocumento){

		try{
			return this.getControladorCobranca().apresentaItensDocumentoCobranca(cobrancaDocumento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0039] Manter Rota
	 * Altera um objeto do tipo rota no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 06/04/2006
	 * @param rota
	 * @param collectionRotaAcaoCriterio
	 * @return void
	 * @throws ControladorException
	 */
	public void atualizarRota(Rota rota, String idLocalidade, Collection collectionRotaAcaoCriterio, Usuario usuarioLogado, boolean criticar){

		try{
			this.getControladorMicromedicao().atualizarRota(rota, idLocalidade, collectionRotaAcaoCriterio, usuarioLogado, criticar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0038] Inserir Rota
	 * Insere um objeto do tipo rota no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 17/04/2006
	 * @param rota
	 * @param idLocalidade
	 * @param collectionRotaAcaoCriterio
	 * @return idRota
	 * @throws ControladorException
	 */
	public Integer inserirRota(Rota rota, String idLocalidade, Collection collectionRotaAcaoCriterio, Usuario usuarioLogado,
					boolean criticar){

		try{
			Integer id = (Integer) this.getControladorMicromedicao().inserirRota(rota, idLocalidade, collectionRotaAcaoCriterio,
							usuarioLogado, criticar);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Consultar Cobranca Ação
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcao consultarCobrancaAcao(String idCobrancaAcao){

		try{
			return this.getControladorCobranca().consultarCobrancaAcao(idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Consultar CobrancaAtividade
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade consultarCobrancaAtividade(String idCobrancaAtividade){

		try{
			return this.getControladorCobranca().consultarCobrancaAtividade(idCobrancaAtividade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Atualizar Comando
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarCobrancaAcaoAtividadeComando(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper){

		try{
			this.getControladorCobranca().atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando,
							gerarAtividadeAcaoCobrancaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection executarComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String[] idsCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String rotaInicial, String rotaFinal, String setorComercialOrigemID,
					String setorComercialDestinoID, String idComando, Usuario usuarioLogado, String titulo, String descricaoSolicitacao,
					String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior){

		try{
			return this.getControladorCobranca().executarComandoAcaoCobranca(periodoInicialConta, periodoFinalConta,
							periodoVencimentoContaInicial, periodoVencimentoContaFinal, idsCobrancaAcao, idCobrancaAtividade,
							idCobrancaGrupo, idGerenciaRegional, localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD,
							setorComercialDestinoCD, idCliente, clienteRelacaoTipo, indicador, rotaInicial, rotaFinal,
							setorComercialOrigemID, setorComercialDestinoID, idComando, usuarioLogado, titulo, descricaoSolicitacao,
							prazoExecucao, quantidadeMaximaDocumentos, indicadorImoveisDebito, indicadorGerarBoletimCadastro,
							codigoClienteSuperior);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @author eduardo henrique
	 * @date 30/08/2008
	 *       Alterações no [UC0243] para a v0.04
	 * @author Virgínia Melo
	 * @date 07/11/2008
	 *       Alterações no [UC0243] para a v0.06
	 * @author Virgínia Melo
	 * @date 05/08/2009
	 *       Adicionado campo valorLimiteEmissao
	 * @param dataPrevistaAcao
	 *            TODO
	 * @param idEmpresa
	 *            TODO
	 * @param idProgramaCobranca
	 *            TODO
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection concluirComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String[] idsCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String quadraInicial, String quadraFinal, String rotaInicial,
					String rotaFinal, String setorComercialOrigemID, String setorComercialDestinoID, String idComando,
					String unidadeNegocio, Usuario usuarioLogado, String titulo, String descricaoSolicitacao, String prazoExecucao,
					String quantidadeMaximaDocumentos, String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
					String codigoClienteSuperior, String empresa, String valorLimiteEmissao, byte[] arquivoImoveis, String arrecadador,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente, CobrancaCriterio cobrancaCriterio,
					String indicadorGerarRelacaoDocumento, String idCobrancaAcaoAtividadeComando, String formatoArquivo){

		try{
			return this.getControladorCobranca().concluirComandoAcaoCobranca(periodoInicialConta, periodoFinalConta,
							periodoVencimentoContaInicial, periodoVencimentoContaFinal, idsCobrancaAcao, idCobrancaAtividade,
							idCobrancaGrupo, idGerenciaRegional, localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD,
							setorComercialDestinoCD, idCliente, clienteRelacaoTipo, indicador, quadraInicial, quadraFinal, rotaInicial,
							rotaFinal, setorComercialOrigemID, setorComercialDestinoID, idComando, unidadeNegocio, usuarioLogado, titulo,
							descricaoSolicitacao, prazoExecucao, quantidadeMaximaDocumentos, indicadorImoveisDebito,
							indicadorGerarBoletimCadastro, codigoClienteSuperior, empresa, valorLimiteEmissao, arquivoImoveis, arrecadador,
							cobrancaAcaoAtividadeComandoPrecedente, cobrancaCriterio, indicadorGerarRelacaoDocumento,
							idCobrancaAcaoAtividadeComando, formatoArquivo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite excluir um comando de atividade de Cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de Cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar Cobranca Ação CAtividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando consultarCobrancaAcaoAtividadeComando(String idCobrancaAcaoAtividadeComando){

		try{
			return this.getControladorCobranca().consultarCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere os aviso deduções no aviso bancário
	 * [UC0000] Inserir Aviso bancário
	 * 
	 * @author Rafael Corrêa
	 * @date 18/04/2006
	 * @throws ControladorException
	 */
	public void inserirAvisosDeducoes(AvisoDeducoes avisoDeducoes, AvisoBancario avisoBancario){

		try{
			this.getControladorArrecadacao().inserirAvisosDeducoes(avisoDeducoes, avisoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que efetua o Rateio do consumo para todos os Imóveis de uma rota
	 * que sejam imóvel condominio
	 * [UC0103] - Efetuar Rateio de Consumo
	 * 
	 * @author Thiago Toscano
	 * @date 07/04/2006
	 * @param colecaoRotas
	 * @param anoMesFaturamento
	 */

	/*
	 * public void efetuarRateioDeConsumo(Collection rotas, Integer
	 * anoMesFaturamento) { try {
	 * this.getControladorMicromedicao().efetuarRateioDeConsumo(rotas,
	 * anoMesFaturamento); } catch (ControladorException ex) { throw new
	 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */

	/**
	 * [UC0319] Gerar Movimento de débito automático para o banco
	 * pesquisa todos os bancos que tenham contrato vigente para arrecadador
	 * contas com forma de arrecadação correspondente a debito automático
	 * [SB0002] - Carregar Lista de Bancos
	 * 
	 * @author Sávio Luiz
	 * @date 18/04/2006
	 * @return Coleção de Bancos
	 */

	/*
	 * public Collection<Banco> pesquisaBancosDebitoAutomatico() { try { return
	 * this.getControladorArrecadacao() .pesquisaBancosDebitoAutomatico(); }
	 * catch (ControladorException ex) { throw new
	 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */

	/**
	 * [UC0319] Gerar Movimento de débito automático para o banco
	 * pesquisa os movimentos de débito automático para o banco,referentes ao
	 * grupo e ano/mês de faturamento informados
	 * [SB0002] - Carregar Lista de Bancos
	 * 
	 * @author Sávio Luiz
	 * @date 18/04/2006
	 * @param idFaturamentoGrupo
	 *            ,anoMesReferenciaFaturamento,idBanco
	 * @return Coleção de DebitoAutomaticoMovimento
	 */

	public Map<Banco, Collection<DebitoAutomaticoMovimento>> pesquisaDebitoAutomaticoMovimento(Collection colecaoIdsFaturamentoGrupo,
					Integer anoMesReferenciaFaturamento, String opcaoDebitoAutomatico){

		try{
			return this.getControladorArrecadacao().pesquisaDebitoAutomaticoMovimento(colecaoIdsFaturamentoGrupo,
							anoMesReferenciaFaturamento, opcaoDebitoAutomatico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0319] Filtrar Aviso Bancario
	 * 
	 * @author Vivianne Sousa
	 * @date 20/04/2006
	 * @param avisoBancarioHelper
	 * @return Coleção de DebitoAutomaticoMovimento
	 * @throws ErroRepositorioException
	 */

	public Collection filtrarAvisoBancarioAbertoFechado(AvisoBancarioHelper avisoBancarioHelper){

		try{
			return this.getControladorArrecadacao().filtrarAvisoBancarioAbertoFechado(avisoBancarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Obtém as Opções de Parcelamento do débito do imóvel
	 * [SF0002] Obter Opções Parcelamento
	 * Obtém o perfil do imóvel
	 * 
	 * @author Roberta Costa
	 * @date 24/04/2006
	 * @param situacaoAguaId
	 * @param situacaoEsgotoId
	 * @return ImovelSituacao
	 */

	public ImovelSituacao obterSituacaoImovel(Integer situacaoAguaId, Integer situacaoEsgotoId){

		try{
			return this.getControladorImovel().obterSituacaoImovel(situacaoAguaId, situacaoEsgotoId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Obtém o Perfil do parcelamento para o imóvel
	 * 
	 * @author Roberta Costa
	 * @date 24/04/2006
	 * @param codigoImovel
	 * @param imovelSituacao
	 * @param subcategoria
	 * @param resolucaoDiretoria
	 * @return ParcelamentoPerfil
	 */
	public ParcelamentoPerfil obterPerfilParcelamento(Integer codigoImovel, Integer imovelSituacaoId, Integer perfilImovelId,
					Integer subcategoriaId, Integer resolucaoDiretoria){

		try{
			return this.getControladorCobranca().obterPerfilParcelamento(codigoImovel, imovelSituacaoId, perfilImovelId, subcategoriaId,
							resolucaoDiretoria, false);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0319] Gerar Movimento de débito automático para o banco
	 * gera o movimento do débito automático e gera o txt para o banco
	 * [SB0001] - Gerar Movimento para débito automático
	 * 
	 * @author Sávio Luiz
	 * @date 18/04/2006
	 * @param debitosAutomaticoBancosMap
	 * @return
	 */

	public void gerarMovimentoDebitoAutomaticoBanco(Map<Banco, Collection<DebitoAutomaticoMovimento>> debitosAutomaticoBancosMap,
					Usuario usuario, Integer anoMesReferencia, String opcaoDebitoAutomatico){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_MOVIMENTO_DEBITO_AUTOMATICO_BANCO,
						ConstantesJNDI.QUEUE_CONTROLADOR_ARRECADACAO_MDB,
						new Object[] {debitosAutomaticoBancosMap, usuario, anoMesReferencia, opcaoDebitoAutomatico});
	}

	/**
	 * [UC0319] Gerar Movimento de débito automático para o banco
	 * Cria uma linha de 150 posições com o registro tipo E.
	 * [SB0003] - Regerar arquivo TXT para um movimento de débito automático
	 * gerado anteriormente
	 * 
	 * @author Sávio Luiz
	 * @date 25/04/2006
	 * @param arrecadadorMovimento
	 * @return Object[]
	 * @throws ControladorException
	 */
	public void regerarArquivoTxtMovimentoDebitoAutomatico(ArrecadadorMovimento arrecadadorMovimento, String enviaBanco, Usuario usuario){

		this.enviarMensagemControladorBatch(MetodosBatch.REGERAR_MOVIMENTO_DEBITO_AUTOMATICO_BANCO,
						ConstantesJNDI.QUEUE_CONTROLADOR_ARRECADACAO_MDB, new Object[] {arrecadadorMovimento, enviaBanco, usuario});

	}

	/**
	 * Manter um comando de atividade de Cobrança eventual
	 * [UC0244] - Manter Comando Ação de Cobrança
	 * Manter cobranca acao atividade comando
	 * [SB0006] - Atualizar Comando Eventual
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 24/04/2006
	 * @deprecated
	 */
	public CobrancaAcaoAtividadeComando atualizarComandoAcaoCobrancaEventual(String idCobrancaAcao, String idCobrancaAtividade,
					String idCobrancaGrupo, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String idSetorComercialInicial,
					String idSetorComercialFinal, String idCliente, String idClienteRelacaoTipo, String anoMesReferencialInicial,
					String anoMesReferencialFinal, String dataVencimentoContaInicial, String dataVencimentoContaFinal, String indicador,
					String idRotaInicial, String idRotaFinal, String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao,
					Date comando, Date realizacao, Usuario usuario, Empresa empresa, Integer quantidadeDocumentos,
					BigDecimal valorDocumentos, Integer quantidadeItensCobrados, String idComando, String unidadeNegocio, String titulo,
					String descricaoSolicitacao, String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior){

		/*
		 * try {
		 * return this.getControladorCobranca()
		 * .atualizarComandoAcaoCobrancaEventual(idCobrancaAcao,
		 * idCobrancaAtividade, idCobrancaGrupo,
		 * idGerenciaRegional, idLocalidadeInicial,
		 * idLocalidadeFinal, codigoSetorComercialInicial,
		 * codigoSetorComercialFinal, idSetorComercialInicial,
		 * idSetorComercialFinal, anoMesReferencialInicial,
		 * anoMesReferencialFinal, dataVencimentoContaInicial,
		 * dataVencimentoContaFinal, indicador,
		 * idRotaInicial, idRotaFinal, idCobrancaAcaoAtividadeComando,
		 * ultimaDataAtualizacao, comando,
		 * realizacao, usuario, empresa,
		 * idComando, unidadeNegocio, titulo,
		 * descricaoSolicitacao, null,
		 * null, null);
		 * } catch (ControladorException ex) {
		 * throw new FachadaException(ex.getMessage(), ex, ex
		 * .getParametroMensagem());
		 * }
		 */
		return null;
	}

	/**
	 * Manter Comando de Ação de Cobrança
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void executarComandoManterAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String idCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String rotaInicial, String rotaFinal, String setorComercialOrigemID,
					String setorComercialDestinoID, String idComando, String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao,
					Date comando, Date realizacao, Usuario usuario, Empresa empresa, Integer quantidadeDocumentos,
					BigDecimal valorDocumentos, Integer quantidadeItensCobrados, String titulo, String descricaoSolicitacao,
					String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior){

		try{
			this.getControladorCobranca().executarComandoManterAcaoCobranca(periodoInicialConta, periodoFinalConta,
							periodoVencimentoContaInicial, periodoVencimentoContaFinal, idCobrancaAcao, idCobrancaAtividade,
							idCobrancaGrupo, idGerenciaRegional, localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD,
							setorComercialDestinoCD, idCliente, clienteRelacaoTipo, indicador, rotaInicial, rotaFinal,
							setorComercialOrigemID, setorComercialDestinoID, idComando, idCobrancaAcaoAtividadeComando,
							ultimaDataAtualizacao, comando, realizacao, usuario, empresa, quantidadeDocumentos, valorDocumentos,
							quantidadeItensCobrados, titulo, descricaoSolicitacao, prazoExecucao, quantidadeMaximaDocumentos,
							indicadorImoveisDebito, indicadorGerarBoletimCadastro, codigoClienteSuperior);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Manter Comando de Ação de Cobrança
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * @author eduardo henrique
	 * @date 02/09/2008
	 *       Alterações no [UC0244] para a v0.04
	 * @author Virgínia Melo
	 * @date 07/11/2008
	 *       Alterações no [UC0244] para a v0.06
	 * @param idCobrancaAcaoAtividadeComando
	 * @param dataPrevistaAcao
	 *            TODO
	 * @param dataLimiteAcao
	 *            TODO
	 * @param idProgramaCobranca
	 *            TODO
	 * @return
	 * @throws ControladorException
	 */
	public void concluirManterComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String idCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String quadraInicial, String quadraFinal, String rotaInicial,
					String rotaFinal, String setorComercialOrigemID, String setorComercialDestinoID, String idCobrancaAcaoAtividadeComando,
					Date realizacao, Date comando, Date ultimaDataAtualizacao, Usuario usuario, Empresa empresa,
					Integer quantidadeDocumentos, BigDecimal valorDocumentos, Integer quantidadeItensCobrados, String idComando,
					String unidadeNegocio, String titulo, String descricaoSolicitacao, String prazoExecucao,
					String quantidadeMaximaDocumentos, String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
					String codigoClienteSuperior, String valorLimiteEmissao, byte[] arquivoImoveis, String arrecadador,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente, CobrancaCriterio cobrancaCriterio,
					String indicadorGerarRelacaoDocumento, String formatoArquivo){

		try{
			this.getControladorCobranca().concluirManterComandoAcaoCobranca(periodoInicialConta, periodoFinalConta,
							periodoVencimentoContaInicial, periodoVencimentoContaFinal, idCobrancaAcao, idCobrancaAtividade,
							idCobrancaGrupo, idGerenciaRegional, localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD,
							setorComercialDestinoCD, idCliente, clienteRelacaoTipo, indicador, quadraInicial, quadraFinal, rotaInicial,
							rotaFinal, setorComercialOrigemID, setorComercialDestinoID, idCobrancaAcaoAtividadeComando, realizacao,
							comando, ultimaDataAtualizacao, usuario, empresa, quantidadeDocumentos, valorDocumentos,
							quantidadeItensCobrados, idComando, unidadeNegocio, titulo, descricaoSolicitacao, prazoExecucao,
							quantidadeMaximaDocumentos, indicadorImoveisDebito, indicadorGerarBoletimCadastro, codigoClienteSuperior,
							valorLimiteEmissao, arquivoImoveis, arrecadador, cobrancaAcaoAtividadeComandoPrecedente, cobrancaCriterio,
							indicadorGerarRelacaoDocumento, formatoArquivo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Faz as atualizações e inserções do parcelamento do débito
	 * concluirParcelamentoDebitos
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 26/04/2006 - 26/09/2006
	 * @author Isaac Silva
	 * @date 20/08/2011
	 *       Adicionar paramentros para configurar freqüência de cobrança de debitos à cobrar no
	 *       parcelamento
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamentoValores
	 * @param colecaoDebitoACobrar
	 * @param colecaoCreditoARealizar
	 * @param indicadorRestabelecimento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param imovel
	 * @param valorEntradaInformado
	 * @param valorASerNegociado
	 * @param valorASerParcelado
	 * @param dataParcelamento
	 * @param valorTotalContaValores
	 * @param valorGuiasPagamento
	 * @param valorDebitoACobrarServico
	 * @param valorDebitoACobrarParcelamento
	 * @param valorCreditoARealizar
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param valorDebitoTotalAtualizado
	 * @param descontoAcrescimosImpontualidade
	 * @param descontoAntiguidadeDebito
	 * @param descontoInatividadeLigacaoAgua
	 * @param percentualDescontoAcrescimosImpontualidade
	 * @param percentualDescontoAntiguidadeDebito
	 * @param percentualDescontoInatividadeLigacaoAgua
	 * @param parcelamentoPerfilId
	 * @param valorAcrescimosImpontualidade
	 * @param valorDebitoACobrarServicoLongoPrazo
	 * @param valorDebitoACobrarServicoCurtoPrazo
	 * @param valorDebitoACobrarParcelamentoLongoPrazo
	 * @param valorDebitoACobrarParcelamentoCurtoPrazo
	 * @param numeroPrestacoes
	 * @param valorPrestacao
	 * @param valorEntradaMinima
	 * @param taxaJuros
	 * @param indicadorConfirmacaoParcelamento
	 * @param cliente
	 * @param usuarioLogado
	 * @param cpfClienteParcelamentoDigitado
	 * @param descontoSancoesRDEspecial
	 * @param descontoTarifaSocialRDEspecial
	 * @param dataEntradaParcelamento
	 * @param numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @return
	 */
	public Integer concluirParcelamentoDebitos(Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, Collection<DebitoACobrar> colecaoDebitoACobrar,
					Collection<CreditoARealizar> colecaoCreditoARealizar, String indicadorRestabelecimento, String indicadorContasRevisao,
					String indicadorGuiasPagamento, String indicadorAcrescimosImpotualidade, String indicadorDebitosACobrar,
					String indicadorCreditoARealizar, Imovel imovel, BigDecimal valorEntradaInformado, BigDecimal valorASerNegociado,
					BigDecimal valorASerParcelado, Date dataParcelamento, BigDecimal valorTotalContaValores,
					BigDecimal valorGuiasPagamento, BigDecimal valorDebitoACobrarServico, BigDecimal valorDebitoACobrarParcelamento,
					BigDecimal valorCreditoARealizar, BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora,
					BigDecimal valorMulta, BigDecimal valorDebitoTotalAtualizado, BigDecimal descontoAcrescimosImpontualidade,
					BigDecimal descontoAntiguidadeDebito, BigDecimal descontoInatividadeLigacaoAgua,
					BigDecimal percentualDescontoAcrescimosImpontualidade, BigDecimal percentualDescontoAntiguidadeDebito,
					BigDecimal percentualDescontoInatividadeLigacaoAgua, Integer parcelamentoPerfilId,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDebitoACobrarServicoLongoPrazo,
					BigDecimal valorDebitoACobrarServicoCurtoPrazo, BigDecimal valorDebitoACobrarParcelamentoLongoPrazo,
					BigDecimal valorDebitoACobrarParcelamentoCurtoPrazo, Short numeroPrestacoes, BigDecimal valorPrestacao,
					BigDecimal valorEntradaMinima, BigDecimal taxaJuros, String indicadorConfirmacaoParcelamento, Cliente cliente,
					Usuario usuarioLogado, String cpfCnpjClienteParcelamentoDigitado, BigDecimal descontoSancoesRDEspecial,
					BigDecimal descontoTarifaSocialRDEspecial, Date dataEntradaParcelamento, Integer numeroMesesEntreParcelas,
					Integer numeroParcelasALancar, Integer numeroMesesInicioCobranca, Integer idBoletoBancario,
					String indicadorCobrancaParcelamento, String indicadorParcelamentoCobrancaBancaria,
					Integer numeroDiasVencimentoEntrada, String indicadorPessoaFisicaJuridica, Integer anoMesReferenciaDebitoInicial,
					Integer anoMesReferenciaDebitoFinal, BigDecimal percentualDescontoJurosMora, BigDecimal percentualDescontoMulta,
					BigDecimal percentualDescontoCorrecaoMonetaria, BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao,
					BigDecimal valorFinalFinanciamento,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao,
					byte[] conteudoTermoParcelamentoInicial, byte[] conteudoTermoParcelamentoFinal,
					ParcelamentoTermoTestemunhas parcelamentoTermoTestemunhas, ParcelamentoDadosTermo parcelamentoDadosTermo,
					BigDecimal valorSucumbenciaAnterior, Map<Integer, BigDecimal> mapProcessosSucumbencias,
					Short quantidadeParcelasSucumbencia, Map<Integer, BigDecimal> mapProcessosDiligencias,
					BigDecimal valorAtualizacaoMonetariaSucumbencia, BigDecimal valorJurosMoraSucumbencia){

		try{
			return this.getControladorCobranca().concluirParcelamentoDebitos(colecaoContaValores, colecaoGuiaPagamentoValores,
							colecaoDebitoACobrar, colecaoCreditoARealizar, indicadorRestabelecimento, indicadorContasRevisao,
							indicadorGuiasPagamento, indicadorAcrescimosImpotualidade, indicadorDebitosACobrar, indicadorCreditoARealizar,
							imovel, valorEntradaInformado, valorASerNegociado, valorASerParcelado, dataParcelamento,
							valorTotalContaValores, valorGuiasPagamento, valorDebitoACobrarServico, valorDebitoACobrarParcelamento,
							valorCreditoARealizar, valorAtualizacaoMonetaria, valorJurosMora, valorMulta, valorDebitoTotalAtualizado,
							descontoAcrescimosImpontualidade, descontoAntiguidadeDebito, descontoInatividadeLigacaoAgua,
							percentualDescontoAcrescimosImpontualidade, percentualDescontoAntiguidadeDebito,
							percentualDescontoInatividadeLigacaoAgua, parcelamentoPerfilId, valorAcrescimosImpontualidade,
							valorDebitoACobrarServicoLongoPrazo, valorDebitoACobrarServicoCurtoPrazo,
							valorDebitoACobrarParcelamentoLongoPrazo, valorDebitoACobrarParcelamentoCurtoPrazo, numeroPrestacoes,
							valorPrestacao, valorEntradaMinima, taxaJuros, indicadorConfirmacaoParcelamento, cliente, usuarioLogado,
							cpfCnpjClienteParcelamentoDigitado, descontoSancoesRDEspecial, descontoTarifaSocialRDEspecial,
							dataEntradaParcelamento, null, numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca,
							idBoletoBancario, indicadorCobrancaParcelamento, indicadorParcelamentoCobrancaBancaria,
							numeroDiasVencimentoEntrada, indicadorPessoaFisicaJuridica, anoMesReferenciaDebitoInicial,
							anoMesReferenciaDebitoFinal, percentualDescontoJurosMora, percentualDescontoMulta,
							percentualDescontoCorrecaoMonetaria, valorDescontoAcrescimosImpontualidadeNaPrestacao, valorFinalFinanciamento,
							colecaoParcelamentoConfiguracaoPrestacao, conteudoTermoParcelamentoInicial, conteudoTermoParcelamentoFinal,
							parcelamentoTermoTestemunhas, parcelamentoDadosTermo, valorSucumbenciaAnterior, mapProcessosSucumbencias,
							quantidadeParcelasSucumbencia, mapProcessosDiligencias, valorAtualizacaoMonetariaSucumbencia,
							valorJurosMoraSucumbencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0280] Inserir Funcionalidade
	 * Metodo que verifica os dados da tabela e inseri a funcionalidade
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/04/2006
	 * @param funcionalidade
	 */

	public Integer inserirFuncionalidade(Funcionalidade funcionalidade, Collection colecaoFuncionalidadeDependencia){

		try{
			return this.getControladorAcesso().inserirFuncionalidade(funcionalidade, colecaoFuncionalidadeDependencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0281] Manter Funcionalidade [SB0001] Atualizar Funcionalidade Metodo
	 * que atualiza a funcionalidade
	 * 
	 * @author Rômulo Aurélio
	 * @date 17/05/2006
	 * @param funcionalidade
	 */
	public void atualizarFuncionalidade(Funcionalidade funcionalidade, Collection colecaoFuncionalidadeDependencia){

		try{
			this.getControladorAcesso().atualizarFuncionalidade(funcionalidade, colecaoFuncionalidadeDependencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0197] Filtrar Operações Efetuadas
	 * 
	 * @author Saulo Lima
	 * @date 18/05/2012
	 * @param
	 * @throws ControladorException
	 */
	public Collection<Funcionalidade> pesquisarFuncionalidadesComOperacaoAuditavel(){

		try{
			return this.getControladorAcesso().pesquisarFuncionalidadesComOperacaoAuditavel();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0291] Bloquear/Desbloquear Acesso
	 * 
	 * @author Rômulo Aurélio
	 * @date 15/06/2006
	 * @param usuario
	 */
	public void bloquearDesbloquearUsuarioSituacao(Usuario usuario){

		try{

			this.getControladorUsuario().bloquearDesbloquearUsuarioSituacao(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri um Cornograma de Cobrança com as Ações de Cobranças e suas
	 * Atividades
	 * [UC0312] Inserir Cornograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @data 25/04/2006
	 * @param cobrancaGrupoCronogramaMes
	 *            ,
	 *            cobrancaAcaoCronograma,
	 *            cobrancasAtividadesParaInsercao(Collection)
	 */
	public void inserirCobrancaCronograma(Collection colecaoCobrancaCronogramaHelper, Usuario usuarioLogado){

		try{
			getControladorCobranca().inserirCobrancaCronograma(colecaoCobrancaCronogramaHelper, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public FiltroCobrancaAcaoAtividadeCronograma filtrarCobrancaCronograma(String idGrupoCobranca, String mesAno){

		try{
			return getControladorCobranca().filtrarCobrancaCronograma(idGrupoCobranca, mesAno);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0322] - Inserir Guia de Devolução
	 * Insere uma Guia de Devolução
	 * 
	 * @author Rafael Corrêa, Pedro Alexandre
	 * @date 29/04/2006, 21/11/2006
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer inserirGuiaDevolucao(GuiaDevolucao guiaDevolucao, Usuario usuarioLogado){

		try{
			// return
			// getControladorArrecadacao().inserirGuiaDevolucao(guiaDevolucao);
			return getControladorArrecadacao().inserirGuiaDevolucao(guiaDevolucao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito atualizar na tabela imovel o
	 * parcelamento e reparcelamento
	 * 
	 * @author Fernanda Paiva
	 * @date 29/04/2006
	 * @param codigoImovel
	 */
	public void atualizarDadosParcelamentoParaImovel(Integer codigoImovel){

		try{
			this.getControladorCobranca().atualizarDadosParcelamentoParaImovel(codigoImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Devolucao
	 * 
	 * @author Fernanda Paiva
	 * @created 03/05/2006
	 *          Atualiza o valor da arrecadacao no aviso bancario
	 */
	public void atualizaValorArrecadacaoAvisoBancario(BigDecimal valor, Integer codigoAvisoBancario){

		try{
			this.getControladorArrecadacao().atualizaValorArrecadacaoAvisoBancario(valor, codigoAvisoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void inserirMensagemConta(ContaMensagem contaMensagem, String[] setorComercial){

		try{
			this.getControladorFaturamento().inserirMensagemConta(contaMensagem, setorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada Não Paga Author: Fernanda
	 * Paiva
	 * Data: 02/05/2006
	 * desfaz os parcelamentos de débitos efetuados no mês de faturamento
	 * corrente e que estejam com situação normal
	 * 
	 * @param codigoImovel
	 */

	public void desfazerParcelamentosPorEntradaNaoPaga(){

		try{
			this.getControladorCobranca().desfazerParcelamentosPorEntradaNaoPaga(0);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Desfazer Parcelamentos de débitos Author: Fernanda Paiva
	 * Data: 02/05/2006
	 * desfaz os parcelamentos de débitos
	 * 
	 * @param codigoImovel
	 */
	public void desfazerParcelamentosDebito(String motivo, Integer codigo, Usuario usuario){

		try{
			this.getControladorCobranca().desfazerParcelamentosDebito(motivo, codigo, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite executar as atividades do faturamento previamente comandadas
	 * [UC0111] Executar Atividade do Faturamento
	 * Executa as atividade do Faturamento
	 * executarAtividadeFaturamento
	 * 
	 * @author Roberta Costa
	 * @date 03/05/20006
	 * @param idsFaturamentoAtividadeCronograma
	 * @throws ControladorException
	 */
	public void executarAtividadeFaturamento(String[] idsFaturamentoAtividadeCronograma){

		try{
			this.getControladorFaturamento().executarAtividadeFaturamento(idsFaturamentoAtividadeCronograma);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém o CEP PADRão para um determinado Município
	 * 
	 * @author Raphael Rossiter
	 * @date 04/05/2006
	 * @param municipio
	 * @return Cep
	 */
	public Cep obterCepInicialMunicipio(Municipio municipio){

		try{

			return this.getControladorEndereco().obterCepInicialMunicipio(municipio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0316] Inserir Critério de Cobrança
	 * Este caso de uso inseri a Cobrança Critério e as linhas da Cobrança
	 * Critério
	 * 
	 * @author Sávio luiz
	 * @created 04/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Integer inserirCobrancaCriterio(CobrancaCriterio cobrancaCriterio, Usuario usuarioLogado){

		try{

			return this.getControladorCobranca().inserirCobrancaCriterio(cobrancaCriterio, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * Este caso de uso atualiza a Cobrança Critério e as linhas da Cobrança
	 * Critério
	 * [SB0001] Atualizar Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @created 11/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void atualizarCobrancaCriterio(CobrancaCriterio cobrancaCriterio, Collection colecaoCobrancaCriterioLinha,
					Collection colecaoCobrancaCriterioLinhaRemovidas, Collection colecaoCriterioSituacaoCobrancaNovos,
					Collection colecaoCriterioSituacaoLigacaoAguaNovos, Collection colecaoCriterioSituacaoLigacaoEsgotoNovos,
					Usuario usuarioLogado){

		try{

			this.getControladorCobranca().atualizarCobrancaCriterio(cobrancaCriterio, colecaoCobrancaCriterioLinha,
							colecaoCobrancaCriterioLinhaRemovidas, colecaoCriterioSituacaoCobrancaNovos,
							colecaoCriterioSituacaoLigacaoAguaNovos, colecaoCriterioSituacaoLigacaoEsgotoNovos, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * Este caso de uso atualiza a Cobrança Critério e as linhas da Cobrança
	 * Critério
	 * [SB0001] Atualizar Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @created 11/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerCobrancaCriterio(String[] idsCobrancaCriterio, Usuario usuarioLogado){

		try{

			this.getControladorCobranca().removerCobrancaCriterio(idsCobrancaCriterio, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Contratos de Cobrança
	 * 
	 * @author Virgínia Melo
	 * @date 04/12/2008
	 * @param idsCobrancaCriterio
	 * @param usuarioLogado
	 */
	public void removerContratoCobranca(Integer[] idsContratoCobranca, Usuario usuarioLogado){

		try{

			this.getControladorCobranca().removerContratoCobranca(idsContratoCobranca, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o count do resultado da pesquisa de Faturamento Atividade
	 * Cronograma
	 * pesquisarFaturamentoAtividadeCronogramaCount
	 * 
	 * @author Roberta Costa
	 * @date 05/05/2006
	 * @param FaturamentoGrupoCronogramaMensal
	 *            faturamentoGrupoCronogramaMensal
	 * @param Integer
	 *            numeroPagina
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarFaturamentoAtividadeCronogramaComandadaNaoRealizadaCount(){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoAtividadeCronogramaComandadaNaoRealizadaCount();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0329] Restabelecer Situação Anterior Conta
	 * 
	 * @author Fernanda Paiva
	 * @date 05/05/2006
	 * @param registrosRemocao
	 * @throws ControladorException
	 */
	public void restabelecerSituacaoAnteriorConta(Collection colecaoContas, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().restabelecerSituacaoAnteriorConta(colecaoContas, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0039] Manter Rota
	 * Remove um objeto do tipo rota no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 05/05/2006
	 * @param ids
	 * @return void
	 * @throws ControladorException
	 */
	// public void removerRota(String[] ids) throws ControladorException {
	// try {
	// this.getControladorMicromedicao().removerRota(ids);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }
	/**
	 * Faz a pesquisa de guia de devolução para o Relatório fazendo os
	 * carregamentos de clienteContas, clienteImoveis, clientesGuiaPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 04/05/2006
	 * @param FiltroGuiaDevolucao
	 * @return Collection<GuiaDevolucao>
	 * @throws ControladorException
	 */

	public Collection<GuiaDevolucao> pesquisarGuiaDevolucaoRelatorio(FiltroGuiaDevolucao filtroGuiaDevolucao){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaDevolucaoRelatorio(filtroGuiaDevolucao);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0324] - Filtrar Guia de Devolucao
	 * [SF0001] - Seleciona Guias de Devolução do Cliente
	 * Faz a pesquisa de guia de devolução fazendo os carregamentos de
	 * clienteContas, clienteImoveis, clientesGuiaPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 04/05/2006
	 * @param FiltroGuiaDevolucao
	 * @return Collection<GuiaDevolucao>
	 * @throws ControladorException
	 */

	public Collection<GuiaDevolucao> pesquisarGuiaDevolucao(FiltroGuiaDevolucao filtroGuiaDevolucao, Integer numeroPagina){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaDevolucao(filtroGuiaDevolucao, numeroPagina);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0324] - Filtrar Guia de Devolucao
	 * [SF0001] - Seleciona Guias de Devolução do Cliente
	 * Faz a pesquisa de guia de devolução fazendo os carregamentos de
	 * clienteContas, clienteImoveis, clientesGuiaPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 04/05/2006
	 * @param FiltroGuiaDevolucao
	 * @return Collection<GuiaDevolucao>
	 * @throws ControladorException
	 */

	public Integer pesquisarGuiaDevolucaoCount(FiltroGuiaDevolucao filtroGuiaDevolucao){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaDevolucaoCount(filtroGuiaDevolucao);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Manter - Atualizar um Cornograma de Cobrança com as Ações de Cobranças e
	 * suas Atividades
	 * [UC0313] Manter Cornograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @data 05/05/2006
	 * @param cobrancaGrupoCronogramaMes
	 *            ,
	 *            cobrancaAcaoCronograma,
	 *            cobrancasAtividadesParaInsercao(Collection)
	 */
	public void atualizarCobrancaCronograma(Collection colecaoCobrancaCronogramaHelper, Collection colecaoCronogramaHelperErroAtualizacao,
					Usuario usuarioLogado){

		try{
			getControladorCobranca().atualizarCobrancaCronograma(colecaoCobrancaCronogramaHelper, colecaoCronogramaHelperErroAtualizacao,
							usuarioLogado);
		}catch(ControladorException ex){
			try{
				getControladorCobranca().atualizarCobrancaCronograma(colecaoCronogramaHelperErroAtualizacao,
								colecaoCronogramaHelperErroAtualizacao, usuarioLogado);
			}catch(ControladorException e){
				e.printStackTrace();
			}
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que insere um grupo e suas funcionalidades com as operacoes
	 * [UC0278] Inserir Grupo
	 * 
	 * @author Thiago Toscano
	 * @date 08/05/2006
	 * @param grupo
	 * @param grupoFuncionalidadeOperacao
	 */
	public void inserirGrupo(Grupo grupo, Collection grupoFuncionalidadeOperacao){

		try{
			this.getControladorAcesso().inserirGrupo(grupo, grupoFuncionalidadeOperacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que atualiza um grupo e suas funcionalidades com as operacoes
	 * [UC0279] Atualiza Grupo
	 * 
	 * @author Thiago Toscano
	 * @date 08/05/2006
	 * @param grupo
	 * @param grupoFuncionalidadeOperacao
	 */
	public void atualizarGrupo(Grupo grupo, Collection grupoFuncionalidadeOperacao){

		try{
			this.getControladorAcesso().atualizarGrupo(grupo, grupoFuncionalidadeOperacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Remove os grupos selecionados na tela de manter gruo e os relacionamentos
	 * existentes para o grupo(remove da tabela GrupoFuncionalidadeOperacao).
	 * [UC0279] - Manter Grupo
	 * 
	 * @author Pedro Alexandre
	 * @date 30/06/2006
	 * @param idsRemocao
	 */
	public void removerGrupo(String[] idsRemocao){

		try{
			this.getControladorAcesso().removerGrupo(idsRemocao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0297] Inserir Situação Usuario
	 * Metodo que verifica os dados da tabela e inseri a Situacção usuário
	 * 
	 * @author Thiago Tenório
	 * @date 28/04/2006
	 * @param funcionalidade
	 */

	public Integer inserirSituacaoUsuario(UsuarioSituacao usuarioSituacao){

		try{
			return this.getControladorAcesso().inserirSituacaoUsuario(usuarioSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0266] - Manter Guia de Devolução
	 * [SB0001] - Atualizar Guia de Devolução
	 * Atualiza uma Guia de Devolução e as devoluções associadas a ela
	 * 
	 * @author Rafael Corrêa
	 * @date 10/05/2006
	 * @throws ControladorException
	 */
	public void atualizarGuiaDevolucao(GuiaDevolucao guiaDevolucao, Usuario usuarioLogado){

		try{
			getControladorArrecadacao().atualizarGuiaDevolucao(guiaDevolucao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri uma operação e seus relacionamentos com as tabelas se existir
	 * [UC0284]Inserir Operação
	 * 
	 * @author Pedro Alexandre
	 * @date 08/05/2006
	 * @param operacao
	 * @param colecaoOperacaoTabela
	 * @throws ControladorException
	 */
	public void inserirOperacao(Operacao operacao, Collection<Tabela> colecaoOperacaoTabela, Usuario usuarioLogado){

		try{
			getControladorAcesso().inserirOperacao(operacao, colecaoOperacaoTabela, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer inserirAtendimentoProcedimento(AtendimentoProcedimento atendimentoProcedimento,
					Collection<AtendProcDocumentoPessoaTipo> colecaoAtendProcDocumentoPessoaTipo,
					Collection<AtendProcNormaProcedimental> colecaoAtendProcNormaProcedimental, Usuario usuarioLogado){

		try{
			return getControladorCadastro().inserirAtendimentoProcedimento(atendimentoProcedimento, colecaoAtendProcDocumentoPessoaTipo,
							colecaoAtendProcNormaProcedimental, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer inserirDocumentoTipoLayout(DocumentoTipoLayout documentoTipoLayout,
					Collection<DocumentoLayoutAssinatura> colecaoDocumentoLayoutAssinatura, Usuario usuarioLogado){

		try{
			return getControladorCobranca()
							.inserirDocumentoTipoLayout(documentoTipoLayout, colecaoDocumentoLayoutAssinatura, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void atualizarDocumentoTipoLayout(DocumentoTipoLayout documentoTipoLayout,
					Collection<DocumentoLayoutAssinatura> colecaoDocumentoLayoutAssinatura, Usuario usuarioLogado){

		try{
			getControladorCobranca().atualizarDocumentoTipoLayout(documentoTipoLayout, colecaoDocumentoLayoutAssinatura, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer inserirAtendimento(Atendimento atendimento,
					Collection<AtendimentoDocumentacaoInformadaHelper> colecaoAtendimentoDocumentacaoInformadaHelper){

		try{
			return getControladorCadastro().inserirAtendimento(atendimento, colecaoAtendimentoDocumentacaoInformadaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void inserirDocumentoEletronico(Collection<DocumentoEletronico> colecaoDocumentoEletronico){

		try{
			getControladorCadastro().inserirDocumentoEletronico(colecaoDocumentoEletronico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerCobrancaCronograma(Collection<CobrancaCronogramaHelper> colecaocobrancaCronogramaHelperRemover){

		try{
			getControladorCobranca().removerCobrancaCronograma(colecaocobrancaCronogramaHelperRemover);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerCobrancaCronograma(String[] idsCobrancaCronograma, Usuario usuarioLogado){

		try{
			getControladorCobranca().removerCobrancaCronograma(idsCobrancaCronograma, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerCobrancaAtividadeCronograma(String[] ids){

		try{
			getControladorCobranca().removerCobrancaAtividadeCronograma(ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri o Perfil de Parcelamento na base
	 * [UC0220] Inserir Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/05/2006
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @return o idPerfilParcelamneto
	 */
	public Integer inserirPerfilParcelamento(ParcelamentoPerfil parcelamentoPerfilNova,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelper, Collection collectionParcelamentoDescontoInatividade,
					Collection collectionParcelamentoDescontoAntiguidade, Usuario usuarioLogado){

		try{
			Integer id = (Integer) getControladorCobranca().inserirPerfilParcelamento(parcelamentoPerfilNova,
							collectionParcelamentoQuantidadeReparcelamentoHelper, collectionParcelamentoDescontoInatividade,
							collectionParcelamentoDescontoAntiguidade, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0221] Manter Perfil de Parcelamento
	 * Remove um objeto do tipo ParcelamentoPerfil no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 11/05/2006
	 * @param ids
	 * @return
	 */
	public void removerPerfilParcelamento(String[] ids, Usuario usuarioLogado){

		try{
			getControladorCobranca().removerPerfilParcelamento(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar o Perfil de Parcelamento na base
	 * [UC0221] Manter Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 17/05/2006
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
	 * @param collectionParcelamentoDescontoInatividadeLinhaRemovidas
	 * @param collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
	 * @param collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
	 * @return
	 */
	public void atualizarPerfilParcelamento(ParcelamentoPerfil parcelamentoPerfil,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelper, Collection collectionParcelamentoDescontoInatividade,
					Collection collectionParcelamentoDescontoAntiguidade,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas,
					Collection collectionParcelamentoDescontoInatividadeLinhaRemovidas,
					Collection collectionParcelamentoDescontoAntiguidadeLinhaRemovidas,
					Collection collectionParcelamentoQuantidadePrestacaoLinhaRemovidas, Usuario usuarioLogado){

		try{
			getControladorCobranca().atualizarPerfilParcelamento(parcelamentoPerfil, collectionParcelamentoQuantidadeReparcelamentoHelper,
							collectionParcelamentoDescontoInatividade, collectionParcelamentoDescontoAntiguidade,
							collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas,
							collectionParcelamentoDescontoInatividadeLinhaRemovidas,
							collectionParcelamentoDescontoAntiguidadeLinhaRemovidas,
							collectionParcelamentoQuantidadePrestacaoLinhaRemovidas, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica se o CEP é Único de Município
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param cep
	 * @return boolean
	 */
	public boolean verificarCepUnicoMunicipio(Cep cep){

		try{

			return this.getControladorEndereco().verificarCepUnicoMunicipio(cep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o Bairro é do tipo "BAIRRO NAO INFORMADO"
	 * 
	 * @author Raphael Rossiter
	 * @date 22/02/2007
	 * @param bairro
	 * @return boolean
	 */
	public boolean verificarBairroTipoBairroNaoInformado(Bairro bairro){

		try{

			return this.getControladorEndereco().verificarBairroTipoBairroNaoInformado(bairro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o CEP inicial de Município
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param cep
	 * @return boolean
	 */
	public boolean verificarCepInicialMunicipio(Cep cep){

		try{

			return this.getControladorEndereco().verificarCepInicialMunicipio(cep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar se o CEP está associado a outro logradouro
	 * 
	 * @author Raphael Rossiter
	 * @date 04/05/2006
	 * @param cep
	 * @return Logradouro
	 */
	public Logradouro verificarCepAssociadoOutroLogradouro(Cep cep){

		try{

			return this.getControladorEndereco().verificarCepAssociadoOutroLogradouro(cep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Seleciona os bairros em que o logradouro está contido
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param Logradouro
	 * @return Collection<Bairro>
	 */
	public Collection<Bairro> obterBairrosPorLogradouro(Logradouro logradouro){

		try{

			return this.getControladorEndereco().obterBairrosPorLogradouro(logradouro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param Logradouro
	 * @return Integer
	 */
	public Integer inserirAssociacaoLogradouroCep(LogradouroCep logradouroCep){

		try{

			return this.getControladorEndereco().inserirAssociacaoLogradouroCep(logradouroCep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o Município possui CEP por logradouro
	 * 
	 * @author Raphael Rossiter
	 * @date 16/05/2006
	 * @param municipio
	 * @return boolean
	 */
	public boolean verificarMunicipioComCepPorLogradouro(Municipio municipio){

		try{

			return this.getControladorGeografico().verificarMunicipioComCepPorLogradouro(municipio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0003] Informar endereço
	 * Pesquisar associação de LogradouroCep apenas por logradouro
	 * 
	 * @author Raphael Rossiter
	 * @data 12/05/2006
	 * @param idLogradouro
	 * @return LogradouroCep
	 */
	public Collection<LogradouroCep> pesquisarAssociacaoLogradouroCepPorLogradouro(Logradouro logradouro){

		try{

			return this.getControladorEndereco().pesquisarAssociacaoLogradouroCepPorLogradouro(logradouro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o logradouro já está associado a CEPs do tipo logradouro
	 * 
	 * @author Raphael Rossiter
	 * @date 17/05/2006
	 * @param logradouro
	 * @return boolean
	 */
	public boolean verificarLogradouroAssociadoCepTipoLogradouro(Logradouro logradouro){

		try{

			return this.getControladorEndereco().verificarLogradouroAssociadoCepTipoLogradouro(logradouro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri um usuario com seus grupos
	 * [UC0230]Inserir Usuario
	 * 
	 * @author Thiago Toscano
	 * @date 19/05/2006
	 * @param usuario
	 * @param idGrupo
	 *            grupos que o usuario faz parte
	 * @throws ControladorException
	 */
	public void inserirUsuario(Usuario usuario, Integer[] idGrupos, Collection<UsuarioAcesso> colecaoUsuarioAcesso){

		try{
			this.getControladorUsuario().inserirUsuario(usuario, idGrupos, colecaoUsuarioAcesso);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza um usuario com seus grupos
	 * [UC0231]Inserir Usuario
	 * 
	 * @author Thiago Toscano
	 * @date 19/05/2006
	 * @param usuario
	 * @param idGrupo
	 *            grupos que o usuario faz parte
	 * @throws ControladorException
	 */
	public void atualizarUsuario(Usuario usuario, Integer[] idGrupos, String processo, Usuario usuarioLogado,
					Collection<UsuarioAcesso> colecaoUsuarioAcesso, String indicadorHorarioAcessoRestrito){

		try{
			this.getControladorUsuario().atualizarUsuario(usuario, idGrupos, processo, usuarioLogado, colecaoUsuarioAcesso,
							indicadorHorarioAcessoRestrito);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<UsuarioAcesso> atualizarHorarioAcessoRestrito(Map<String, String[]> mapParametros){

		try{
			return this.getControladorUsuario().atualizarHorarioAcessoRestrito(mapParametros);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0297] Inserir abrangência Usuario
	 * Metodo que verifica os dados da tabela e inseri a abrangência
	 * 
	 * @author Thiago Tenório
	 * @date 28/04/2006
	 * @param Usuario
	 *            abrangência
	 */

	public Integer inserirAbrangenciaUsuario(UsuarioAbrangencia usuarioAbrangencia){

		try{
			return this.getControladorAcesso().inserirAbrangenciaUsuario(usuarioAbrangencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Esta funcionalidade permite informar dados para geração de Relatórios ou
	 * consultas
	 * [UC0304] - Informar Dados para Geração de Relatório ou Consulta
	 * 
	 * @author Raphael Rossiter
	 * @date 22/05/2006
	 * @param mesAnoFaturamento
	 * @param opcaoTotalizacao
	 * @param idFauramentoGrupo
	 * @param idGerenciaRegional
	 * @param idEloPolo
	 * @param idLocalidade
	 * @param cdSetorComercial
	 * @param nmQuadra
	 * @param idsImovelPerfil
	 * @param idsLigacaoAguaSituacao
	 * @param idsLigacaoEsgotoSituacao
	 * @param idsCategoria
	 * @param idsEsferaPoder
	 * @return InformarDadosGeracaoRelatorioConsultaHelper
	 * @throws ControladorException
	 */
	public InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsulta(String mesAnoFaturamento,
					Integer opcaoTotalizacao, Integer idFauramentoGrupo, Integer idCobrancaGrupo, Integer idGerenciaRegional,
					Integer idEloPolo, Integer idLocalidade, Integer cdSetorComercial, Integer nmQuadra, String[] idsImovelPerfil,
					String[] idsLigacaoAguaSituacao, String[] idsLigacaoEsgotoSituacao, String[] idsCategoria, String[] idsEsferaPoder,
					Integer tipoAnaliseFaturamento, Integer tipoRelatorio, Integer idUnidadeNegocio){

		try{

			return this.getControladorGerencial().informarDadosGeracaoRelatorioConsulta(mesAnoFaturamento, opcaoTotalizacao,
							idFauramentoGrupo, idCobrancaGrupo, idGerenciaRegional, idEloPolo, idLocalidade, cdSetorComercial, nmQuadra,
							idsImovelPerfil, idsLigacaoAguaSituacao, idsLigacaoEsgotoSituacao, idsCategoria, idsEsferaPoder,
							tipoAnaliseFaturamento, tipoRelatorio, idUnidadeNegocio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Cronograma
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @author Virgínia Melo
	 * @date 10/11/2008
	 *       Alterações no [UC0326] para a v0.06
	 * @return filtroCobrancaAcaoAtividadeCronograma
	 * @throws ControladorException
	 */
	public FiltroCobrancaAcaoAtividadeCronograma construirFiltroCobrancaAcaoAtividadeCronograma(
					String anoMesPeriodoReferenciaCobrancaInicial, String anoMesPeriodoReferenciaCobrancaFinal, String[] grupoCobranca,
					String[] acaoCobranca, String[] atividadeCobranca, String dataPeriodoPrevisaoComandoInicial,
					String dataPeriodoPrevisaoComandoFinal, String dataPeriodoComandoInicial, String dataPeriodoComandoFinal,
					String dataPeriodoRealizacaoComandoInicial, String dataPeriodoRealizacaoComandoFinal,
					String intervaloValorDocumentosInicial, String intervaloValorDocumentosFinal,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String intervaloQuantidadeItensDocumentosInicial, String intervaloQuantidadeItensDocumentosFinal,
					String situacaoCronograma, String situacaoComando){

		try{
			return getControladorCobranca().construirFiltroCobrancaAcaoAtividadeCronograma(anoMesPeriodoReferenciaCobrancaInicial,
							anoMesPeriodoReferenciaCobrancaFinal, grupoCobranca, acaoCobranca, atividadeCobranca,
							dataPeriodoPrevisaoComandoInicial, dataPeriodoPrevisaoComandoFinal, dataPeriodoComandoInicial,
							dataPeriodoComandoFinal, dataPeriodoRealizacaoComandoInicial, dataPeriodoRealizacaoComandoFinal,
							intervaloValorDocumentosInicial, intervaloValorDocumentosFinal, intervaloQuantidadeDocumentosInicial,
							intervaloQuantidadeDocumentosFinal, intervaloQuantidadeItensDocumentosInicial,
							intervaloQuantidadeItensDocumentosFinal, situacaoCronograma, situacaoComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * [UC0325] - Consultar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(
					FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma){

		try{
			return getControladorCobranca().pesquisarCobrancaAcaoAtividadeCronograma(filtroCobrancaAcaoAtividadeCronograma);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * Consultar Comando Cobranca Ação Atividade CobrancaVerificar pelo ID
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeCronograma obterCobrancaAcaoAtividadeCronograma(String idCobrancaAcaoAtividadeCronograma){

		try{
			return getControladorCobranca().obterCobrancaAcaoAtividadeCronograma(idCobrancaAcaoAtividadeCronograma);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consultar Comando de Ação de Cobrança - Cronograma
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @return Collection<CobrancaAcaoAtividadeCronograma>
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(Integer idCobrancaGrupo,
					Integer idCobrancaAcao, Integer idComando, Date dataInicial, Date dataFinal){

		Collection<CobrancaAcaoAtividadeCronograma> colecaoCobrancaAcaoAtividadeCronograma = null;
		try{
			colecaoCobrancaAcaoAtividadeCronograma = this.getControladorCobranca().pesquisarCobrancaAcaoAtividadeCronograma(
							idCobrancaGrupo, idCobrancaAcao, idComando, dataInicial, dataFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return colecaoCobrancaAcaoAtividadeCronograma;
	}

	/**
	 * Consultar Comando de Ação de Cobrança - Comando
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @param idLocalidade
	 * @param idSetorComercial
	 * @return Collection<CobrancaAcaoAtividadeComando>
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando(Integer idCobrancaGrupo, Integer idCobrancaAcao,
					Integer idComando, Date dataInicial, Date dataFinal, Integer idLocalidade, Integer idSetorComercial){

		Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando = null;
		try{
			colecaoCobrancaAcaoAtividadeComando = this.getControladorCobranca().pesquisarCobrancaAcaoAtividadeComando(idCobrancaGrupo,
							idCobrancaAcao, idComando, dataInicial, dataFinal, idLocalidade, idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 12/05/2006
	 * @return filtroCobrancaAcaoAtividadeComando
	 * @throws ControladorException
	 * @author Virgínia Melo
	 * @date 11/11/2008
	 *       Alterações no [UC0326] para a v0.06
	 */
	public FiltroCobrancaAcaoAtividadeComando construirFiltroCobrancaAcaoAtividadeEventual(String[] grupoCobranca, String[] acaoCobranca,
					String[] atividadeCobranca, String anoMesPeriodoReferenciaContasInicial, String anoMesPeriodoReferenciaContasFinal,
					String dataPeriodoComandoInicial, String dataPeriodoComandoFinal, String dataPeriodoRealizacaoComandoInicial,
					String dataPeriodoRealizacaoComandoFinal, String dataPeriodoVencimentoContasInicial,
					String dataPeriodoVencimentoContasFinal, String intervaloValorDocumentosInicial, String intervaloValorDocumentosFinal,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String intervaloQuantidadeItensDocumentosInicial, String intervaloQuantidadeItensDocumentosFinal,
					String situacaoComando, String indicadorCriterio, String idGerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String codigoSetorComercialInicial, String codigoSetorComercialFinal, String nuQuadraInicial,
					String nuQuadraFinal, String idRotaInicial, String idRotaFinal, String idCliente, String idClienteRelacaoTipo,
					String criterioCobranca, String unidadeNegocio){

		try{
			return getControladorCobranca().construirFiltroCobrancaAcaoAtividadeEventual(grupoCobranca, acaoCobranca, atividadeCobranca,
							anoMesPeriodoReferenciaContasInicial, anoMesPeriodoReferenciaContasFinal, dataPeriodoComandoInicial,
							dataPeriodoComandoFinal, dataPeriodoRealizacaoComandoInicial, dataPeriodoRealizacaoComandoFinal,
							dataPeriodoVencimentoContasInicial, dataPeriodoVencimentoContasFinal, intervaloValorDocumentosInicial,
							intervaloValorDocumentosFinal, intervaloQuantidadeDocumentosInicial, intervaloQuantidadeDocumentosFinal,
							intervaloQuantidadeItensDocumentosInicial, intervaloQuantidadeItensDocumentosFinal, situacaoComando,
							indicadorCriterio, idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, codigoSetorComercialInicial,
							codigoSetorComercialFinal, nuQuadraInicial, nuQuadraFinal, idRotaInicial, idRotaFinal, idCliente,
							idClienteRelacaoTipo, criterioCobranca, unidadeNegocio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param localidadeID
	 * @param setorComercialCD
	 * @return
	 * @throws ControladorException
	 */
	public SetorComercial obterSetorComercialLocalidade(String localidadeID, String setorComercialCD){

		try{
			return getControladorCobranca().obterSetorComercialLocalidade(localidadeID, setorComercialCD);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param codigoSetorComercial
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRotaSetorComercial(String codigoSetorComercial, String idLocaldiade){

		try{
			return getControladorCobranca().obterColecaoRotaSetorComercialLocalidade(codigoSetorComercial, idLocaldiade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param localidadeID
	 * @return
	 */
	public Localidade obterLocalidadeGerenciaRegional(String localidadeID){

		try{
			return getControladorCobranca().obterLocalidadeGerenciaRegional(localidadeID);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param idCliente
	 * @return
	 */
	public Cliente obterCliente(String idCliente){

		try{
			return getControladorCobranca().obterCliente(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Administrador
	 * @date 19/05/2006
	 * @param idCobrancaCriterio
	 * @return
	 */
	public CobrancaCriterio obterCobrancaCriterio(String idCobrancaCriterio){

		try{
			return getControladorCobranca().obterCobrancaCriterio(idCobrancaCriterio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * [UC0325] - Consultar Comandos de Ação de Cobrança - Tipo Eventual
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeEventual(
					FiltroCobrancaAcaoAtividadeComando pesquisarCobrancaAcaoAtividadeEventual){

		try{
			return getControladorCobranca().pesquisarCobrancaAcaoAtividadeEventual(pesquisarCobrancaAcaoAtividadeEventual);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * Consultar Comando Cobranca Ação Atividade Cobranca - Verificar pelo ID
	 * [SB0004] - Consultar Dados do Comando de Ação de Cobrança Eventual
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando obterCobrancaAcaoAtividadeComando(String idCobrancaAcaoAtividadeComando){

		try{
			return getControladorCobranca().obterCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0339] - Consultar Dados Diarios da Arrecadacao
	 * [SB0001] - Apresentar Dados Diarios da Arrecadacao por gerência
	 * Acumula as gerências e os Valores do Pagamento de uma Colecao de Dados
	 * Diarios da Arrecadação
	 * 
	 * @author Fernanda Paiva
	 * @date 23/05/2006
	 * @throws ControladorException
	 */
	public void acumularDadosArrecadacao(Collection colecaoGerenciaRegionalArrecadacaoDadosDiarios,
					ArrecadacaoDadosDiarios arrecadacaoDadosDiarios, int indicador, String idElo, String idGerencia, String idLocalidade){

		try{
			this.getControladorArrecadacao().acumularDadosArrecadacao(colecaoGerenciaRegionalArrecadacaoDadosDiarios,
							arrecadacaoDadosDiarios, indicador, idElo, idGerencia, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarResumoFatSitEspecial(Integer[] idSituacaoTipo, Integer[] idSituacaoMotivo){

		try{
			return getControladorGerencialFaturamento().recuperaResumoSituacaoEspecialFaturamento(idSituacaoTipo, idSituacaoMotivo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection pesquisarResumoCobSitEspecial(Integer[] idSituacaoTipo, Integer[] idSituacaoMotivo){

		try{
			return getControladorGerencialCobranca().recuperaResumoSituacaoEspecialCobranca(idSituacaoTipo, idSituacaoMotivo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gera lançamentos Contabeis do Faturamento
	 * [UC000348] - Gerar lançamento Constábeis da Arrecadação
	 * 
	 * @author Rafael Santos
	 * @date 22/05/2006
	 * @param anoMesArrecadacao
	 * @throws ControladorException
	 */
	public void gerarLancamentoContabeisArrecadacao(Integer anoMesArrecadacao, Integer idLocalidade, Integer idFuncionalidadeIniciada){

		try{
			getControladorFinanceiro().gerarLancamentoContabeisArrecadacao(anoMesArrecadacao, idLocalidade, idFuncionalidadeIniciada);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o valor de controladorFinanceiro
	 * 
	 * @return O valor de controladorLocalidade
	 */
	private ControladorFinanceiroLocal getControladorFinanceiro(){

		ControladorFinanceiroLocalHome localHome = null;
		ControladorFinanceiroLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFinanceiroLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FINANCEIRO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	public List consultarResumoAnormalidadeLeitura(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper,
					Integer tipoLigacao){

		try{
			return getControladorGerencialMicromedicao().consultarResumoAnormalidadeLeitura(informarDadosGeracaoRelatorioConsultaHelper,
							tipoLigacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer consultarTotalResumoSemAnormalidade(int opcaoTotalizacao,
					InformarDadosGeracaoRelatorioConsultaHelper dadosParametrosConsulta, ResumoAnormalidadeConsultaHelper itemAnterior,
					RelatorioResumoAnormalidadeLeituraBean bean){

		try{
			return getControladorGerencialMicromedicao().consultarTotalResumoSemAnormalidade(opcaoTotalizacao, dadosParametrosConsulta,
							itemAnterior, bean);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public List<ResumoLigacaoEconomiaConsultarHelper> consultarResumoLigacoesEconomias(
					InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencialCadastro().consultarResumoLigacoesEconomias(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Integer consultarQtdRegistrosResumoLigacoesEconomias(
					InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencialCadastro().consultarQtdRegistrosResumoLigacoesEconomias(
							informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Obtém o CEP Único para um determinado Município
	 * 
	 * @author Raphael Rossiter
	 * @date 23/05/2006
	 * @param municipio
	 * @return Cep
	 */
	public Cep obterCepUnicoMunicipio(Municipio municipio){

		try{

			return this.getControladorEndereco().obterCepUnicoMunicipio(municipio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta ResumoArrecadacao para a geração do Relatório '[UC0345] Gerar
	 * Relatório de Resumo do Arrecadacao' de acordo com a opção de totalização.
	 * 
	 * @author Vivianne Sousa
	 * @created 24/05/2006
	 * @param opcaoTotalizacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarResumoArrecadacaoRelatorio(String opcaoTotalizacao, int mesAnoReferencia, Integer gerenciaRegional,
					Integer localidade, Integer unidadeNegocio, Integer idSetorComercial){

		try{
			return getControladorArrecadacao().consultarResumoArrecadacaoRelatorio(opcaoTotalizacao, mesAnoReferencia, gerenciaRegional,
							localidade, unidadeNegocio, idSetorComercial);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0003] Informar endereço
	 * Pesquisar associação de LogradouroBairro já existente
	 * 
	 * @author Raphael Rossiter
	 * @data 24/05/2006
	 * @param idBairro
	 *            ,
	 *            idLogradouro
	 * @return LogradouroBairro
	 */
	public LogradouroBairro pesquisarAssociacaoLogradouroBairro(Integer idBairro, Integer idLogradouro){

		try{
			return getControladorEndereco().pesquisarAssociacaoLogradouroBairro(idBairro, idLogradouro);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0003] Informar endereço
	 * Pesquisar associação de LogradouroCep já existente
	 * 
	 * @author Raphael Rossiter
	 * @data 24/05/2006
	 * @param idCep
	 *            ,
	 *            idLogradouro
	 * @return LogradouroBairro
	 */
	public LogradouroCep pesquisarAssociacaoLogradouroCep(Integer idCep, Integer idLogradouro){

		try{
			return getControladorEndereco().pesquisarAssociacaoLogradouroCep(idCep, idLogradouro);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * método para auxilio de Casos de Uso de resumos
	 */
	public Collection criarColecaoAgrupamentoResumos(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencial().criarColecaoAgrupamentoResumos(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * método para auxilio de Casos de Uso de resumos
	 */
	public Collection criarColecaoAgrupamentoResumosCobrancaAcao(
					InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsultaHelper){

		try{
			return getControladorGerencial().criarColecaoAgrupamentoResumosCobrancaAcao(informarDadosGeracaoResumoAcaoConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}


	public Collection gerarRelacaoDebitos(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String[] tipoDebito, String valorDebitoInicial,
					String valorDebitoFinal, String qtdContasInicial, String qtdContasFinal, String referenciaFaturaInicial,
					String referenciaFaturaFinal, String vencimentoInicial, String vencimentoFinal, String qtdImoveis, String qtdMaiores,
					String indicadorOrdenacao, String idUnidadeNegocio, String consumoFixadoEsgotoPocoInicial,
					String consumoFixadoEsgotoPocoFinal, String indicadorOpcaoAgrupamento, String indicadorOrdenacaoAscDesc){

		try{
			return getControladorCobranca().gerarRelacaoDebitos(idImovelCondominio, idImovelPrincipal, idNomeConta, idSituacaoLigacaoAgua,
							consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto, consumoMinimoInicialEsgoto,
							consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial, intervaloValorPercentualEsgotoFinal,
							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo,
							idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade, areaConstruidaInicial,
							areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional, idLocalidadeInicial,
							idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal, loteOrigem,
							loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria, idCategoria,
							quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, tipoDebito, valorDebitoInicial, valorDebitoFinal, qtdContasInicial, qtdContasFinal,
							referenciaFaturaInicial, referenciaFaturaFinal, vencimentoInicial, vencimentoFinal, qtdImoveis, qtdMaiores,
							indicadorOrdenacao, idUnidadeNegocio, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal,
							indicadorOpcaoAgrupamento, indicadorOrdenacaoAscDesc);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	public List<Object[]> gerarRelatorioContasReceberValoresCorrigidos(Integer matriculaImovel, Integer referencia){

		try{
			return getControladorCobranca().gerarRelatorioContasReceberValoresCorrigidos(matriculaImovel, referencia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}

	}

	public Long quantidadeRegistrosRelatorioContasReceberValoresCorrigidos(Integer matriculaImovel, Integer referencia){

		try{
			return getControladorCobranca().quantidadeRegistrosRelatorioContasReceberValoresCorrigidos(matriculaImovel, referencia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}

	}

	/**
	 * [UC0294] Manter Situacao Usuario [] Atualizar Situacao do Usuario
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * @param Situacao
	 *            Usuario
	 */

	public void atualizarSituacaoUsuario(UsuarioSituacao usuarioSituacao, Collection colecaoUsuarioSituacao){

		try{
			this.getControladorAcesso().atualizarSituacaoUsuario(usuarioSituacao, colecaoUsuarioSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso permite consultar o resumo da Pendência, com a opção de
	 * impressão da consulta. Dependendo da opção de totalização sempre é gerado
	 * o Relatório, sem a feração da consulta.
	 * [UC0338] Consultar Resumo da Pendência
	 * 
	 * @author Roberta Costa
	 * @date 26/05/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return List
	 */
	public List consultarResumoPendencia(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencialCobranca().consultarResumoPendencia(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0294] Manter Situacao Usuario [] Atualizar abrangência do Usuario
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * @param Situacao
	 *            Usuario
	 */
	public void atualizarAbrangenciaUsuario(UsuarioAbrangencia usuarioAbrangencia){

		try{
			this.getControladorAcesso().atualizarAbrangenciaUsuario(usuarioAbrangencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso permite consultar o resumo da Pendência, com a opção de
	 * impressão da consulta. Dependendo da opção de totalização sempre é gerado
	 * o Relatório, sem a feração da consulta.
	 * [UC0305] Consultar análise Faturamento
	 * 
	 * @author Fernanda Paiva
	 * @date 31/05/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return List
	 */
	public List consultarResumoAnaliseFaturamento(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencialFaturamento().consultarResumoAnaliseFaturamento(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite consultar o resumo da Pendência, com a opção de
	 * impressão da consulta. Dependendo da opção de totalização sempre é gerado
	 * o Relatório, sem a feração da consulta.
	 * [UC0338] Consultar Resumo da Pendência
	 * Retorna os registro de resumo Pendência dividindo em coleções de
	 * categoria RESIDENCIAL, COMERCIAL, INDUSTRIAL e PUBLICA
	 * retornaConsultaResumoPendencia
	 * 
	 * @author Roberta Costa
	 * @date 31/05/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResumoPendenciaAcumuladoHelper> retornaConsultaResumoPendencia(
					InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return getControladorGerencialCobranca().retornaConsultaResumoPendencia(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Consulta a qtde de registros ResumoArrecadacao para a geração do
	 * Relatório '[UC0345] Gerar Relatório de Resumo do Arrecadacao' de acordo
	 * com a opção de totalização.
	 * 
	 * @author Vivianne Sousa
	 * @created 02/06/2006
	 * @param opcaoTotalizacao
	 * @param mesAnoReferencia
	 * @param gerenciaRegional
	 * @param localidade
	 * @return
	 * @throws ControladorException
	 */
	public Integer consultarQtdeRegistrosResumoArrecadacaoRelatorio(String opcaoTotalizacao, int mesAnoReferencia,
					Integer gerenciaRegional, Integer localidade, Integer idSetorComercial){

		try{
			return getControladorArrecadacao().consultarQtdeRegistrosResumoArrecadacaoRelatorio(opcaoTotalizacao, mesAnoReferencia,
							gerenciaRegional, localidade, idSetorComercial);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void atualizarMensagemConta(ContaMensagem contaMensagem){

		try{
			getControladorFaturamento().atualizarMensagemConta(contaMensagem);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Collection gerarRelacaoAcompanhamentoFaturamento(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,

					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal,

					String idImovelPerfil, String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo,
					String idSituacaoEspecialCobranca, String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal,
					String idCadastroOcorrencia, String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String setorComercialInicial, String setorComercialFinal, String quadraInicial,
					String quadraFinal, String loteOrigem, String loteDestno, String cep, String logradouro, String bairro,
					String municipio, String idTipoMedicao, String indicadorMedicao, String idSubCategoria, String idCategoria,
					String quantidadeEconomiasInicial, String quantidadeEconomiasFinal, String diaVencimento, String idCliente,
					String idClienteTipo, String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal,
					String numeroMoradoresInicial, String numeroMoradoresFinal, String idAreaConstruidaFaixa, int anoMesReferencia,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{
			return getControladorFaturamento().gerarRelacaoAcompanhamentoFaturamento(idImovelCondominio, idImovelPrincipal, idNomeConta,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal,

							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal,

							idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca,
							idEloAnormalidade, areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa,
							idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal,
							quadraInicial, quadraFinal, loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao,
							indicadorMedicao, idSubCategoria, idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal,
							diaVencimento, idCliente, idClienteTipo, idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal,
							numeroMoradoresInicial, numeroMoradoresFinal, idAreaConstruidaFaixa, anoMesReferencia,
							consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal

			);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 09/06/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return
	 */
	public List consultarComparativoResumosFaturamentoArrecadacaoPendencia(
					InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return this.getControladorGerencial().consultarComparativoResumosFaturamentoArrecadacaoPendencia(
							informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o valor e a quantidade de contas do resumo da faturamento
	 * [UC0350] - Consultar Comparativo entre os Resumos do Faturamento,
	 * Arrecadação e da Pendência.
	 * 
	 * @author Pedro Alexandre
	 * @date 09/06/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return
	 */
	public List consultarResumoFaturamento(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return this.getControladorGerencial().consultarResumoFaturamento(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o valor e a quantidade de contas do resumo da arrecadação
	 * [UC0350] - Consultar Comparativo entre os Resumos do Faturamento,
	 * Arrecadação e da Pendência.
	 * 
	 * @author Pedro Alexandre
	 * @date 10/06/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return
	 */
	public List consultarResumoArrecadacao(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return this.getControladorGerencial().consultarResumoArrecadacao(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o valor e a quantidade de contas do resumo da Pendência.
	 * [UC0350] - Consultar Comparativo entre os Resumos do Faturamento,
	 * Arrecadação e da Pendência.
	 * 
	 * @author Pedro Alexandre
	 * @date 10/06/2006
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @return
	 */
	public List consultarResumoComparativoPendencia(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper){

		try{
			return this.getControladorGerencial().consultarResumoComparativoPendencia(informarDadosGeracaoRelatorioConsultaHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Collection pesquisarLogradouro(FiltroLogradouro filtroLogradouro, Integer numeroPaginas){

		try{
			return this.getControladorEndereco().pesquisarLogradouro(filtroLogradouro, numeroPaginas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarLogradouroCount(FiltroLogradouro filtroLogradouro){

		try{
			return this.getControladorEndereco().pesquisarLogradouroCount(filtroLogradouro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Tiago Moreno, Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoImovel(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoImovel(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Collection<Pagamento> pesquisarPagamentoImovel(String idImovel){

		return this.getControladorArrecadacao().pesquisarPagamentoImovel(idImovel);

	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Conta do Cliente
	 * pesquisarPagamentoClienteConta
	 * 
	 * @author Tiago Moreno, Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoClienteConta(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoClienteConta(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Guia de Pagamento do Cliente
	 * pesquisarPagamentoClienteGuiaPagamento
	 * 
	 * @author Tiago Moreno, Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoClienteGuiaPagamento(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoClienteGuiaPagamento(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Debito a Cobrar do Cliente
	 * pesquisarPagamentoClienteDebitoACobrar
	 * 
	 * @author Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoClienteDebitoACobrar(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoClienteDebitoACobrar(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos da Localidade pesquisarPagamentoLocalidade
	 * 
	 * @author Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoLocalidade(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoLocalidade(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Aviso Bancario pesquisarPagamentoAvisoBancario
	 * 
	 * @author Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoAvisoBancario(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoAvisoBancario(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Movimento de Arrecadador
	 * pesquisarPagamentoMovimentoArrecadador
	 * 
	 * @author Roberta Costa
	 * @date 12/06/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<Pagamento> pesquisarPagamentoMovimentoArrecadador(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoMovimentoArrecadador(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * obtem colecao com dados diarios da arrecadacao
	 * 
	 * @author Fernanda Paiva
	 * @date 09/06/2006
	 * @param anoMesReferencia
	 *            ,
	 *            id
	 * @return Uma Colecao
	 * @throws ControladorException
	 */
	public Collection consultarDadosDiarios(int anoMesReferencia, int id, String descricao, int idElo){

		try{
			return getControladorArrecadacao().consultarDadosDiarios(anoMesReferencia, id, descricao, idElo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0164] Filtrar Imoveis por Outros Criterios
	 * Filtra para saber a quantidade de imoveis antes de executar o filtro
	 * 
	 * @author Rafael Santos
	 * @date 01/08/2006
	 */
	public Integer obterQuantidadadeRelacaoImoveisDebitos(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, Integer relatorio,
					String cdRotaInicial, String cdRotaFinal, String sequencialRotaInicial, String sequencialRotaFinal,
					String segmentoInicial, String segmentoFinal, String subloteInicial, String subloteFinal,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{
			return getControladorImovel().obterQuantidadadeRelacaoImoveisDebitos(idImovelCondominio, idImovelPrincipal,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria,
							idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, relatorio, cdRotaInicial, cdRotaFinal, sequencialRotaInicial,
							sequencialRotaFinal, segmentoInicial, segmentoFinal, subloteInicial, subloteFinal,
							consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Retorna o count do resultado da pesquisa de Cobranca Cronograma
	 * 
	 * @author Flávio Cordeiro
	 * @date 14/06/2006
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarCobrancaCronogramaCount(Filtro filtro){

		try{
			return this.getControladorCobranca().pesquisarCobrancaCronogramaCount(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<FaturamentoAtividadeCronograma> pesquisarRelacaoAtividadesGrupo(Integer faturamentoGrupoId){

		try{
			return this.getControladorFaturamento().pesquisarRelacaoAtividadesGrupo(faturamentoGrupoId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Efetuar a Ligação da Água no imovel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 15/06/2006
	 * @return void retorno
	 * @throws ErroRepositorioException
	 */
	/*--<merge>--
	 public void inserirLigacaoAgua(LigacaoAgua ligacaoAgua, Imovel imovel) {

	 try {
	 this.getControladorAtendimentoPublico().inserirLigacaoAgua(
	 ligacaoAgua, imovel);

	 } catch (ControladorException ex) {
	 throw new FachadaException(ex.getMessage(), ex, ex
	 .getParametroMensagem());
	 }
	 }*/

	/**
	 * método que retorna o maior id de Localidade
	 * 
	 * @author Vivianne Sousa
	 * @date 12/07/2006
	 * @return
	 * @throws ControladorException
	 */

	public int pesquisarMaximoIdLocalidade(){

		try{
			return this.getControladorLocalidade().pesquisarMaximoIdLocalidade();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que retorna o próximo id para cadastrar uma Empresa.
	 * 
	 * @author Virgínia Melo
	 * @date 05/08/2008
	 */
	public int pesquisarProximoIdEmpresa(){

		try{
			return this.getControladorCadastro().pesquisarProximoIdEmpresa();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que retorna o próximo id para cadastrar uma Norma Procedimental.
	 * 
	 * @author Gicevalter Couto
	 * @date 22/09/2014
	 */
	public int pesquisarProximoIdNormaProcedimental(){

		try{
			return this.getControladorCadastro().pesquisarProximoIdNormaProcedimental();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por atualizar as datas de expiração do login do
	 * usuário assim como definir uma nova senha para o login
	 * [UC0289] Efetuar Alteração da Senha
	 * 
	 * @author Pedro Alexandre
	 * @date 13/07/2006
	 * @param usuarioLogado
	 * @param dataNascimentoString
	 * @param cpf
	 * @param lembreteSenha
	 * @param novaSenha
	 * @param confirmacaoNovaSenha
	 * @throws ControladorException
	 */
	public void efetuarAlteracaoSenha(Usuario usuarioLogado, String dataNascimentoString, String cpf, String lembreteSenha,
					String novaSenha, String confirmacaoNovaSenha){

		try{
			this.getControladorAcesso().efetuarAlteracaoSenha(usuarioLogado, dataNascimentoString, cpf, lembreteSenha, novaSenha,
							confirmacaoNovaSenha);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna 2 coleções e um array ,com os valores que vão retornar
	 * marcados,uma com as permissões do usuário que ele possa marcar/desmarcar
	 * e a outra o usuário logado Não vai poder marcar/desmarcar
	 * [UC0231] - Manter usuário [SB0010] - Selecionar permissões Especiais (n2)
	 * 
	 * @author Sávio Luiz
	 * @date 13/07/2006
	 */
	public Object[] pesquisarPermissoesEspeciaisUsuarioEUsuarioLogado(Usuario usuarioAtualizar, Usuario usuarioLogado){

		try{
			return this.getControladorUsuario().pesquisarPermissoesEspeciaisUsuarioEUsuarioLogado(usuarioAtualizar, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna um array com os ids dos objetos da coleção
	 * 
	 * @author Sávio Luiz
	 * @date 13/07/2006
	 */
	public String[] retornarPermissoesMarcadas(Collection permissoesEspeciais){

		return this.getControladorUsuario().retornarPermissoesMarcadas(permissoesEspeciais);

	}

	/**
	 * método que atualiza o controle de acesso do usuário
	 * [UC0231] - Manter usuário
	 * 
	 * @author Sávio Luiz
	 * @date 14/07/2006
	 * @param String
	 *            []
	 * @param grupoFuncionalidadeOperacao
	 */
	public void atualizarControleAcessoUsuario(String[] permissoesEspeciais,
					Map<Integer, Map<Integer, Collection<Operacao>>> funcionalidadesMap, Usuario usuarioAtualizar, Integer[] idsGrupos,
					String permissoesCheckBoxVazias){

		try{
			this.getControladorUsuario().atualizarControleAcessoUsuario(permissoesEspeciais, funcionalidadesMap, usuarioAtualizar,
							idsGrupos, permissoesCheckBoxVazias);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0287] - Efetuar Login
	 * Método responsável por enviar uma nova senha para o e-mail do usuário com
	 * situação pendente
	 * [SB0002] - Lembrar senha
	 * 
	 * @author Pedro Alexandre
	 * @date 14/07/2006
	 * @param login
	 * @param cpf
	 * @param dataNascimentoString
	 */
	public void lembrarSenha(String login, String cpf, String dataNascimentoString){

		try{
			this.getControladorAcesso().lembrarSenha(login, cpf, dataNascimentoString);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna um map com o indicador dizendo se vai aparecer
	 * marcado(1),desmarcado(2) ou desabilitado(3) para cada operação da
	 * funcionalidade escolhida
	 * [UC0231] - Manter usuário [SB0008] - Selecionar Restrições (n2)
	 * 
	 * @author Sávio Luiz
	 * @date 17/07/2006
	 */
	public Map<Integer, Map<Integer, Collection<Operacao>>> organizarOperacoesComValor(Integer codigoFuncionalidade,
					Map<Integer, Map<Integer, Collection<Operacao>>> funcionalidadesMap, Integer[] idsGrupos, Usuario usuarioAtualizar){

		try{
			return this.getControladorUsuario().organizarOperacoesComValor(codigoFuncionalidade, funcionalidadesMap, idsGrupos,
							usuarioAtualizar);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna um map com o indicador dizendo se vai aparecer
	 * marcado(1),desmarcado(2) ou desabilitado(3) para cada operação da
	 * funcionalidade escolhida e a coleção com as operAções e funcionalidades
	 * que que foram desmarcados
	 * [UC0231] - Manter usuário [SB0008] - Selecionar Restrições (n2)
	 * 
	 * @author Sávio Luiz
	 * @date 17/07/2006
	 */
	public Map<Integer, Map<Integer, Collection<Operacao>>> recuperaFuncionalidadeOperacaoRestrincao(Integer codigoFuncionalidade,
					String[] idsOperacoes, Map<Integer, Map<Integer, Collection<Operacao>>> funcionalidadesMap){

		try{
			return this.getControladorUsuario().recuperaFuncionalidadeOperacaoRestrincao(codigoFuncionalidade, idsOperacoes,
							funcionalidadesMap);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se uma url solicitada para o servidor é uma funcionalidade ou
	 * uma operação
	 * 
	 * @author Pedro Alexandre
	 * @date 18/07/2006
	 * @param url
	 * @return
	 */
	public Map<Integer, String> verificarTipoURL(String url){

		try{
			return this.getControladorAcesso().verificarTipoURL(url);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que verifica se o usuário tem permissão para acessar a
	 * funcionalidade que está sendo requisitada (existe ocorrência na tabela
	 * GrupoFuncionalidadeOperacao). Verifica se o(s) grupo(s) que o usuário
	 * pertence tem acesso a funcionalidade e se todas as operAções desta
	 * funcionalidade Não estão com restrições(existe ocorrência na tabela
	 * UsuarioGrupoRestricao)
	 * 
	 * @author Pedro Alexandre
	 * @date 18/07/2006
	 * @param usuarioLogado
	 * @param urlFuncionalidade
	 * @param colecaoGruposUsuario
	 * @return
	 */
	public boolean verificarAcessoPermitidoFuncionalidade(Usuario usuarioLogado, String urlFuncionalidade, Collection colecaoGruposUsuario){

		try{
			return this.getControladorAcesso().verificarAcessoPermitidoFuncionalidade(usuarioLogado, urlFuncionalidade,
							colecaoGruposUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que verifica se o usuário tem permissão para acessar a operação
	 * que está sendo requisitada (existe ocorrência na tabela
	 * GrupoFuncionalidadeOperacao). Verifica se o(s) grupo(s) que o usuário
	 * pertence tem acesso a operação e se a operação desta funcionalidade Não
	 * estão com restrição(existe ocorrência na tabela UsuarioGrupoRestricao)
	 * 
	 * @author Pedro Alexandre
	 * @date 18/07/2006
	 * @param usuarioLogado
	 * @param urlOperacao
	 * @param colecaoGruposUsuario
	 * @return
	 */
	public boolean verificarAcessoPermitidoOperacao(Usuario usuarioLogado, String urlOperacao, Collection colecaoGruposUsuario){

		try{
			return this.getControladorAcesso().verificarAcessoPermitidoOperacao(usuarioLogado, urlOperacao, colecaoGruposUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0169] Manter Taraifa de Consumo Prepara a Vigência para Ser reajustada
	 * 
	 * @author Rafel Santos
	 * @date 21/07/2006
	 */
	public void iniciarProcessoReajustarTarifaConsumo(Map listaParametrosValoresCategoria, Date dataNovaVigencia, String[] idsRecuperados,
					Usuario usuarioLogado, String descricaoAtoAdministrativo){

		try{
			this.getControladorFaturamento().iniciarProcessoReajustarTarifaConsumo(listaParametrosValoresCategoria, dataNovaVigencia,
							idsRecuperados, usuarioLogado, descricaoAtoAdministrativo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gerar Relatório de Imóveis Outros Critérios
	 * 
	 * @author Rafael Corrêa
	 * @date 25/07/2006
	 * @param idImovelCondominio
	 * @param idImovelPrincipal
	 * @param idNomeConta
	 * @param idSituacaoLigacaoAgua
	 * @param consumoMinimoInicialAgua
	 * @param consumoMinimoFinalAgua
	 * @param idSituacaoLigacaoEsgoto
	 * @param consumoMinimoInicialEsgoto
	 * @param consumoMinimoFinalEsgoto
	 * @param intervaloValorPercentualEsgotoInicial
	 * @param intervaloValorPercentualEsgotoFinal
	 * @param intervaloMediaMinimaImovelInicial
	 * @param intervaloMediaMinimaImovelFinal
	 * @param intervaloMediaMinimaHidrometroInicial
	 * @param intervaloMediaMinimaHidrometroFinal
	 * @param idImovelPerfil
	 * @param idPocoTipo
	 * @param idFaturamentoSituacaoTipo
	 * @param idCobrancaSituacaoTipo
	 * @param idSituacaoEspecialCobranca
	 * @param idEloAnormalidade
	 * @param areaConstruidaInicial
	 * @param areaConstruidaFinal
	 * @param idCadastroOcorrencia
	 * @param idConsumoTarifa
	 * @param idGerenciaRegional
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param setorComercialInicial
	 * @param setorComercialFinal
	 * @param quadraInicial
	 * @param quadraFinal
	 * @param loteOrigem
	 * @param loteDestno
	 * @param cep
	 * @param logradouro
	 * @param bairro
	 * @param municipio
	 * @param idTipoMedicao
	 * @param indicadorMedicao
	 * @param idSubCategoria
	 * @param idCategoria
	 * @param quantidadeEconomiasInicial
	 * @param quantidadeEconomiasFinal
	 * @param diaVencimento
	 * @param idCliente
	 * @param idClienteTipo
	 * @param idClienteRelacaoTipo
	 * @param numeroPontosInicial
	 * @param numeroPontosFinal
	 * @param numeroMoradoresInicial
	 * @param numeroMoradoresFinal
	 * @param idAreaConstruidaFaixa
	 * @return
	 * @throws ControladorException
	 */
	public Collection gerarRelatorioImovelOutrosCriterios(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,

					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal,

					String idImovelPerfil, String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo,
					String idSituacaoEspecialCobranca, String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal,
					String idCadastroOcorrencia, String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String setorComercialInicial, String setorComercialFinal, String quadraInicial,
					String quadraFinal, String loteOrigem, String loteDestno, String cep, String logradouro, String bairro,
					String municipio, String idTipoMedicao, String indicadorMedicao, String idSubCategoria, String idCategoria,
					String quantidadeEconomiasInicial, String quantidadeEconomiasFinal, String diaVencimento, String idCliente,
					String idClienteTipo, String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal,
					String numeroMoradoresInicial, String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio,
					String cdRotaInicial, String cdRotaFinal, String sequencialRotaInicial, String sequencialRotaFinal,
					String segmentoInicial, String segmentoFinal, String subloteInicial, String subloteFinal,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{

			return getControladorImovel().gerarRelatorioImovelOutrosCriterios(idImovelCondominio, idImovelPrincipal, idSituacaoLigacaoAgua,
							consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto, consumoMinimoInicialEsgoto,
							consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial, intervaloValorPercentualEsgotoFinal,

							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal,

							idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca,
							idEloAnormalidade, areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa,
							idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal,
							quadraInicial, quadraFinal, loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao,
							indicadorMedicao, idSubCategoria, idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal,
							diaVencimento, idCliente, idClienteTipo, idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal,
							numeroMoradoresInicial, numeroMoradoresFinal, idAreaConstruidaFaixa, idUnidadeNegocio, cdRotaInicial,
							cdRotaFinal, sequencialRotaInicial, sequencialRotaFinal, segmentoInicial, segmentoFinal, subloteInicial,
							subloteFinal, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Insere um processo iniciado no sistema e suas funcionalidades iniciadas
	 * 
	 * @author Rodrigo Silveira
	 * @date 28/07/2006
	 * @param processoIniciado
	 * @throws ControladorException
	 * @throws ControladorException
	 */
	public Integer inserirProcessoIniciado(ProcessoIniciado processoIniciado){

		try{
			return getControladorBatch().inserirProcessoIniciado(processoIniciado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa uma gerência regional pelo id
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idGerenciaRegional
	 * @throws ControladorException
	 */
	public GerenciaRegional pesquisarObjetoGerenciaRegionalRelatorio(Integer idGerenciaRegional){

		try{
			return getControladorLocalidade().pesquisarObjetoGerenciaRegionalRelatorio(idGerenciaRegional);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa uma localidade pelo id
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idLocalidade
	 * @throws ControladorException
	 */
	public Localidade pesquisarObjetoLocalidadeRelatorio(Integer idLocalidade){

		try{
			return getControladorLocalidade().pesquisarObjetoLocalidadeRelatorio(idLocalidade);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa um setor comercial pelo Código e pelo id da localidade
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idLocalidade
	 * @throws ControladorException
	 */
	public SetorComercial pesquisarObjetoSetorComercialRelatorio(Integer codigoSetorComercial, Integer idLocalidade){

		try{
			return getControladorLocalidade().pesquisarObjetoSetorComercialRelatorio(codigoSetorComercial, idLocalidade);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0391] Atualizar Tipo de Retorno da OS_Referida.
	 * 
	 * @author Thiago Tenório
	 * @date 01/11/2006
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarTipoRetornoOrdemServicoReferida(OsReferidaRetornoTipo osReferidaRetornoTipo){

		try{
			this.getControladorOrdemServico().atualizarTipoRetornoOrdemServicoReferida(osReferidaRetornoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa um cliente pelo id
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idCliente
	 * @throws ControladorException
	 */
	public Cliente pesquisarObjetoClienteRelatorio(Integer idCliente){

		try{
			return getControladorCliente().pesquisarObjetoClienteRelatorio(idCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa as quantidades de imóveis e as quantidades de economias
	 * associadas a um cliente
	 * 
	 * @author Rafael Corrêa
	 * @date 23/08/2007
	 * @return Object[]
	 */
	public Object[] pesquisarQtdeImoveisEEconomiasCliente(Integer idCliente){

		try{
			return getControladorCliente().pesquisarQtdeImoveisEEconomiasCliente(idCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa um Município pelo id
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idMunicipio
	 * @throws ControladorException
	 */
	public Municipio pesquisarObjetoMunicipioRelatorio(Integer idMunicipio){

		try{
			return getControladorGeografico().pesquisarObjetoMunicipioRelatorio(idMunicipio);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Pesquisa um bairro pelo Código e pelo id do Município
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @return Bairro
	 * @exception ErroRepositorioException
	 *                Erro no hibernate
	 */
	public Bairro pesquisarObjetoBairroRelatorio(Integer codigoBairro, Integer idMunicipio){

		try{
			return getControladorGeografico().pesquisarObjetoBairroRelatorio(codigoBairro, idMunicipio);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Gerar Relatório de Dados das Economias do imóvel
	 * 
	 * @author Rafael Corrêa
	 * @date 01/08/2006
	 * @param idImovelCondominio
	 * @param idImovelPrincipal
	 * @param idNomeConta
	 * @param idSituacaoLigacaoAgua
	 * @param consumoMinimoInicialAgua
	 * @param consumoMinimoFinalAgua
	 * @param idSituacaoLigacaoEsgoto
	 * @param consumoMinimoInicialEsgoto
	 * @param consumoMinimoFinalEsgoto
	 * @param intervaloValorPercentualEsgotoInicial
	 * @param intervaloValorPercentualEsgotoFinal
	 * @param intervaloMediaMinimaImovelInicial
	 * @param intervaloMediaMinimaImovelFinal
	 * @param intervaloMediaMinimaHidrometroInicial
	 * @param intervaloMediaMinimaHidrometroFinal
	 * @param idImovelPerfil
	 * @param idPocoTipo
	 * @param idFaturamentoSituacaoTipo
	 * @param idCobrancaSituacaoTipo
	 * @param idSituacaoEspecialCobranca
	 * @param idEloAnormalidade
	 * @param areaConstruidaInicial
	 * @param areaConstruidaFinal
	 * @param idCadastroOcorrencia
	 * @param idConsumoTarifa
	 * @param idGerenciaRegional
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param setorComercialInicial
	 * @param setorComercialFinal
	 * @param quadraInicial
	 * @param quadraFinal
	 * @param loteOrigem
	 * @param loteDestno
	 * @param cep
	 * @param logradouro
	 * @param bairro
	 * @param municipio
	 * @param idTipoMedicao
	 * @param indicadorMedicao
	 * @param idSubCategoria
	 * @param idCategoria
	 * @param quantidadeEconomiasInicial
	 * @param quantidadeEconomiasFinal
	 * @param diaVencimento
	 * @param idCliente
	 * @param idClienteTipo
	 * @param idClienteRelacaoTipo
	 * @param numeroPontosInicial
	 * @param numeroPontosFinal
	 * @param numeroMoradoresInicial
	 * @param numeroMoradoresFinal
	 * @param idAreaConstruidaFaixa
	 * @return
	 */
	public Collection gerarRelatorioDadosEconomiaImovel(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, String segmentoInicial,
					String segmentoFinal, String rotaInicial, String rotaFinal, String sequencialRotaInicial, String sequencialRotaFinal,
					String subloteInicial, String subloteFinal, String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{

			return getControladorImovel().gerarRelatorioDadosEconomiaImovel(idImovelCondominio, idImovelPrincipal, idSituacaoLigacaoAgua,
							consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto, consumoMinimoInicialEsgoto,
							consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial, intervaloValorPercentualEsgotoFinal,
							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo,
							idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade, areaConstruidaInicial,
							areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional, idLocalidadeInicial,
							idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal, loteOrigem,
							loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria, idCategoria,
							quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, segmentoInicial, segmentoFinal, rotaInicial, rotaFinal,
							sequencialRotaInicial, sequencialRotaFinal, subloteInicial, subloteFinal, consumoFixadoEsgotoPocoInicial,
							consumoFixadoEsgotoPocoFinal);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0285] - Manter Operação
	 * Método responsável por atualizar uma operação no sistema e os
	 * relacionamentos entre a tabela e a operação
	 * [SB0001] - Atualizar Operação
	 * 
	 * @author Pedro Alexandre
	 * @date 02/08/2006
	 * @param operacao
	 * @param colecaoOperacaoTabela
	 */
	public void atualizarOperacao(Operacao operacao, Collection<OperacaoTabela> colecaoOperacaoTabela, Usuario usuarioLogado){

		try{
			this.getControladorAcesso().atualizarOperacao(operacao, colecaoOperacaoTabela, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void atualizarAtendimentoProcedimento(AtendimentoProcedimento atendimentoProcedimento,
					Collection<AtendProcDocumentoPessoaTipo> colecaoAtendProcDocumentoPessoaTipo,
					Collection<AtendProcNormaProcedimental> colecaoAtendProcNormaProcedimental, Usuario usuarioLogado){

		try{
			getControladorCadastro().atualizarAtendimentoProcedimento(atendimentoProcedimento, colecaoAtendProcDocumentoPessoaTipo,
							colecaoAtendProcNormaProcedimental, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0285] - Manter Operação
	 * Método responsável por remover uma operação no sistema e os
	 * relacionamentos entre a tabela e a operação
	 * [SB0002] - Excluir Operação
	 * 
	 * @author Pedro Alexandre
	 * @date 02/08/2006
	 * @param idsOperacao
	 */
	public void removerOperacao(String[] idsOperacao, Usuario usuarioLogado){

		try{
			this.getControladorAcesso().removerOperacao(idsOperacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer calcularConsumoTotalAguaOuEsgotoPorCategoria(
					Collection<CalcularValoresAguaEsgotoHelper> calcularValoresAguaEsgotoHelper, String tipoRetorno){

		try{
			return this.getControladorFaturamento().calcularConsumoTotalAguaOuEsgotoPorCategoria(calcularValoresAguaEsgotoHelper,
							tipoRetorno);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método para auxilio de Casos de Uso de resumos
	 */
	public Boolean confirmarImovelExcluido(Integer idImovel){

		return getControladorImovel().confirmarImovelExcluido(idImovel);

	}

	/**
	 * método que apresenta os dados do imovel
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 * 
	 * @author Sávio Luiz
	 * @date 04/08/2006
	 * @param idImovel
	 * @return Collection
	 */
	public Collection pesquiarImovelExcecoesApresentaDados(Integer idImovel, boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().pesquiarImovelExcecoesApresentaDados(idImovel, ligacaoAgua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que apresenta os dados do imovel
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 * 
	 * @author Sávio Luiz
	 * @date 04/08/2006
	 * @param idImovel
	 * @return Collection
	 */
	public Collection pesquiarMedicaoConsumoHistoricoExcecoesApresentaDados(FaturamentoGrupo faturamentoGrupo, Integer idImovel,
					boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().pesquiarMedicaoConsumoHistoricoExcecoesApresentaDados(faturamentoGrupo, idImovel,
							ligacaoAgua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que apresenta os dados do imovel
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 * 
	 * @author Sávio Luiz
	 * @date 04/08/2006
	 * @param idImovel
	 * @return Collection
	 */
	public Collection pesquisarMedicaoConsumoHistoricoExcecoesApresentaDadosConsultarImovel(Integer anoMesReferencia, Integer idImovel,
					boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().pesquisarMedicaoConsumoHistoricoExcecoesApresentaDadosConsultarImovel(
							anoMesReferencia, idImovel, ligacaoAgua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza o valor de cshi_nnconsumoFaturadomes consumo historico [UC0106] -
	 * Substituir Consumos Anteriores
	 * 
	 * @param consumoHistorico
	 * @param usuarioLogado
	 */
	public void atualizarConsumosAnteriores(ConsumoHistorico consumoHistorico, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarConsumosAnteriores(consumoHistorico, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna uma coleção com os dados das medicoes para apresentação
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 */

	public Collection carregarDadosMedicao(Integer idImovel, boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().carregarDadosMedicao(idImovel, ligacaoAgua);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna uma coleção com os dados das medicoes para apresentação
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 */
	public Collection carregarDadosConsumo(Integer idImovel, int mesAno, boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().carregarDadosConsumo(idImovel, mesAno, ligacaoAgua);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso calcula a tarifa Miníma de Água para um imóvel
	 * [UC0451] Obter Tarifa Miníma de Água para um imóvel
	 * 
	 * @author Roberta Costa
	 * @date 09/08/2006
	 * @param imovel
	 * @param colecaoCategorias
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal obterTarifaMinimaAguaImovel(Imovel imovel){

		try{
			return this.getControladorFaturamento().obterTarifaMinimaAguaImovel(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Relatório de Critério de Cobrança
	 * Pesquisa as linhas de Critério de Cobrança através do id do Critério de
	 * Cobrança
	 * 
	 * @author Rafael Corrêa
	 * @data 09/08/2006
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection pesquisarCobrancaCriterioLinha(Integer idCriterioCobranca){

		try{
			return this.getControladorCobranca().pesquisarCobrancaCriterioLinha(idCriterioCobranca);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso inicia um processo para o mecanismo batch
	 * [UC0111] - Iniciar Processo
	 * Este subfluxo tem o papel de iniciar um processo de faturamento
	 * comandado, neste método é feita uma busca para obter as atividades
	 * comandadas e Não realizadas
	 * [SB0001] - Iniciar Processo de Faturamento Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 14/08/2006
	 * @return
	 * @throws ControladorException
	 */

	public Collection<FaturamentoAtividadeCronograma> pesquisarFaturamentoAtividadeCronogramaComandadasNaoRealizadas(int numeroPagina){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoAtividadeCronogramaComandadasNaoRealizadas(numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso inicia um processo para o mecanismo batch
	 * [UC0111] - Iniciar Processo
	 * Este subfluxo tem o papel de iniciar um processo de faturamento
	 * comandado, neste método é feita uma busca para obter as atividades
	 * comandadas e Não realizadas
	 * [SB0001] - Iniciar Processo de Faturamento Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 14/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public int pesquisarFaturamentoAtividadeCronogramaComandadasNaoRealizadasCount(){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoAtividadeCronogramaComandadasNaoRealizadasCount();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void inserirProcessoIniciadoFaturamentoComandado(Collection<Integer> idsFaturamentoAtividadeCronograma,
					Collection<Integer> idsFaturamentoSimulacaoComando, Date dataHoraAgendamento, Usuario usuario){

		try{
			this.getControladorBatch().inserirProcessoIniciadoFaturamentoComandado(idsFaturamentoAtividadeCronograma,
							idsFaturamentoSimulacaoComando, dataHoraAgendamento, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método utilizado para pesquisar os consumo historicos a serem
	 * substituidos pelo caso de uso [UC0106] Substituir Consumos Anteriores
	 */
	public Collection pesquisaConsumoHistoricoSubstituirConsumo(Integer idImovel, Integer anoMesInicial, Integer anoMesFinal){

		try{
			return this.getControladorMicromedicao().pesquisaConsumoHistoricoSubstituirConsumo(idImovel, anoMesInicial, anoMesFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0319] Filtrar Aviso Bancario
	 * 
	 * @author Fernanda Paiva
	 * @date 16/08/2006
	 * @param avisoBancarioHelper
	 * @return Coleção de DebitoAutomaticoMovimento
	 * @throws ErroRepositorioException
	 */

	public Collection filtrarAvisoBancarioAbertoFechadoParaPaginacao(AvisoBancarioHelper avisoBancarioHelper, Integer numeroPagina){

		try{
			return this.getControladorArrecadacao().filtrarAvisoBancarioAbertoFechadoParaPaginacao(avisoBancarioHelper, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Cliente
	 * 
	 * @author Vivianne Sousa
	 * @date 21/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<Pagamento> pesquisarPagamentoCliente(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoCliente(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Cliente
	 * 
	 * @author Vivianne Sousa
	 * @date 21/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarPagamentoClienteCount(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoClienteCount(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Aviso Bancario
	 * pesquisarPagamentoAvisoBancario
	 * 
	 * @author Vivianne Sousa
	 * @date 21/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<Pagamento> pesquisarPagamentoAvisoBancarioParaPaginacao(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoAvisoBancarioParaPaginacao(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Aviso Bancario
	 * pesquisarPagamentoAvisoBancario
	 * 
	 * @author Vivianne Sousa
	 * @date 21/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarPagamentoAvisoBancarioCount(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoAvisoBancarioCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Antiguidade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoAntiguidade(Integer idParcelamentoPerfil){

		try{
			return this.getControladorCobranca().pesquisarParcelamentoDescontoAntiguidade(idParcelamentoPerfil);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Inatividade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoInatividade(Integer idParcelamentoPerfil){

		try{
			return this.getControladorCobranca().pesquisarParcelamentoDescontoInatividade(idParcelamentoPerfil);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Reparcelamentos Consecutivos através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarReparcelamentoConsecutivo(Integer idParcelamentoPerfil){

		try{
			return this.getControladorCobranca().pesquisarReparcelamentoConsecutivo(idParcelamentoPerfil);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Vivianne Sousa
	 * @date 22/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarPagamentoImovelCount(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoImovelCount(idImovel, idCliente, idTipoRelacao, localidadeInicial,
							localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal, idsPagamentosSituacoes,
							idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Vivianne Sousa
	 * @date 22/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Collection<Pagamento> pesquisarPagamentoImovelParaPaginacao(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoImovelParaPaginacao(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que Pesquisa a existencia de uma conta pelo id da conta e pela
	 * data da ultima alteracao
	 * 
	 * @author Fernanda Paiva
	 * @date 23/08/2006
	 * @param id
	 *            Descrição do parâmetro
	 * @param ultimaAlteracao
	 *            Descrição do parâmetro
	 * @return
	 * @throws ControladorException
	 */
	@Deprecated
	public Integer pesquisarExistenciaContaParaConcorrencia(String idConta, Date ultimaAlteracao){

		try{
			return this.getControladorFaturamento().pesquisarExistenciaContaParaConcorrencia(idConta, ultimaAlteracao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de débitos
	 * Pesquisa os débitos do imóvel a partir das informAções do formulário
	 * pesquisarDebitosImovel
	 * 
	 * @author Roberta Costa
	 * @date 23/08/2006
	 * @param codigoImovel
	 * @param codigoImovelAntes
	 * @param dataParcelamento
	 * @param resolucaoDiretoria
	 * @param fimIntervaloParcelamento
	 * @param inicioIntervaloParcelamento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param chavesPrestacoes
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarDebitosImovel(String codigoImovel, String codigoImovelAntes, String dataParcelamento,
					String resolucaoDiretoria, String fimIntervaloParcelamento, String inicioIntervaloParcelamento,
					String indicadorContasRevisao, String indicadorGuiasPagamento, String indicadorAcrescimosImpotualidade,
					String indicadorDebitosACobrar, String indicadorCreditoARealizar, Boolean indicadorContas, String chavesPrestacoes){

		try{
			return this.getControladorCobranca().pesquisarDebitosImovel(codigoImovel, codigoImovelAntes, dataParcelamento,
							resolucaoDiretoria, fimIntervaloParcelamento, inicioIntervaloParcelamento, indicadorContasRevisao,
							indicadorGuiasPagamento, indicadorAcrescimosImpotualidade, indicadorDebitosACobrar, indicadorCreditoARealizar,
							indicadorContas, chavesPrestacoes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite pesquisar imóvel doação [UC0389] Inserir Autorização para Doação Mensal
	 * 
	 * @author César Araújo
	 * @date 30/08/2006
	 * @param filtroImoveldoacao
	 *            -
	 *            Filtro com os valores para pesquisa
	 * @return Collection<ImovelDoacao> - Coleção de imóvei(s) doação
	 * @throws ErroRepositorioException
	 */

	/**
	 * Permite pesquisar imóvel doação [UC0389] Inserir Autorização para Doação
	 * Mensal
	 * 
	 * @author César Araújo
	 * @date 30/08/2006
	 * @param idImovelDoacao
	 *            -
	 *            Código do imóvel doação
	 * @return Collection<ImovelDoacao> - Coleção de Imóveis doação
	 * @throws FachadaException
	 */
	public Collection<ImovelDoacao> pesquisarImovelDoacao(FiltroImovelDoacao filtroImovelDoacao){

		try{
			return this.getControladorImovel().pesquisarImovelDoacao(filtroImovelDoacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite verificar a existência de um imóvel doação [UC0389] Inserir
	 * Autorização para Doação Mensal
	 * 
	 * @author César Araújo
	 * @date 31/08/2006
	 * @param idImovel
	 *            -
	 *            Código do imóvel
	 * @param idEntidadeBeneficenteContrato
	 *            -
	 *            Código do Contrato da Entidade Beneficente
	 * @return ImovelDoacao - retorna o imóvel doação correspondente à
	 *         combinação de imóvel e entidade beneficente
	 */
	public ImovelDoacao verificarExistenciaImovelDoacao(Integer idImovel, Integer idEntidadeBeneficenteContrato){

		try{
			return this.getControladorImovel().verificarExistenciaImovelDoacao(idImovel, idEntidadeBeneficenteContrato);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite pesquisar entidades beneficentes [UC0389] Inserir Autorização
	 * para Doação Mensal
	 * 
	 * @author César Araújo
	 * @date 31/08/2006
	 * @param idEntidadeBeneficente
	 *            -
	 *            Código da entidade beneficente
	 * @return Collection<EntidadeBeneficente> - Coleção de entidades
	 *         beneficentes
	 */
	public Collection<EntidadeBeneficente> pesquisarEntidadeBeneficente(Integer idEntidadeBeneficente){

		try{
			return this.getControladorImovel().pesquisarEntidadeBeneficente(idEntidadeBeneficente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @param FiltroPagamento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoImovelRelatorio(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String indicadorTotalizarPorDataPagamento, Collection<Integer> idsArrecadadores, String[] idsCategorias){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoImovelRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategorias);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @param FiltroPagamento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoImovelAmbosRelatorio(String idImovel){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoImovelAmbosRelatorio(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @param FiltroPagamento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoClienteRelatorio(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String indicadorTotalizarPorDataPagamento, Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoClienteRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @param FiltroPagamento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoAvisoBancarioRelatorio(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoAvisoBancarioRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @param FiltroPagamento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoMovimentoArrecadadorRelatorio(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoMovimentoArrecadadorRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do imóvel pesquisarPagamento
	 * 
	 * @author Rafael Corrêa
	 * @date 29/08/06
	 * @author Saulo Lima
	 * @date 08/01/2009
	 *       Inclusão do Generics (<PagamentoRelatorioHelper>) na coleção de retorno
	 * @param FiltroPagamento
	 * @return Collection<PagamentoRelatorioHelper>
	 * @throws ControladorException
	 */
	public Collection<PagamentoRelatorioHelper> pesquisarPagamentoLocalidadeRelatorio(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoLocalidadeRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Vivianne Sousa
	 * @date 22/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarPagamentoMovimentoArrecadadorCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoMovimentoArrecadadorCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Saulo Lima
	 * @date 25/08/2009
	 * @return Integer
	 */
	public Integer pesquisarPagamentoHistoricoMovimentoArrecadadorCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoMovimentoArrecadadorCount(idImovel, idCliente,
							idTipoRelacao, localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Vivianne Sousa
	 * @date 22/08/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarPagamentoLocalidadeCount(String idImovel, String idCliente, String idTipoRelacao, String localidadeInicial,
					String localidadeFinal, String idAvisoBancario, String idArrecadador, String periodoArrecadacaoInicial,
					String periodoArrecadacaoFinal, String periodoPagamentoInicio, String periodoPagamentoFim, Date dataPagamentoInicial,
					Date dataPagamentoFinal, String[] idsPagamentosSituacoes, String[] idsDebitosTipos, String[] idsArrecadacaoForma,
					String[] idsDocumentosTipos, String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoLocalidadeCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existencia do cliente
	 * 
	 * @param codigo
	 *            cliente Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer verificarExistenciaCliente(Integer codigoCliente){

		try{
			Integer id = (Integer) this.getControladorCliente().verificarExistenciaCliente(codigoCliente);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existencia da localidade
	 * 
	 * @param id
	 *            Localidade Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer verificarExistenciaLocalidade(Integer idLocalidade){

		try{
			Integer id = (Integer) this.getControladorLocalidade().verificarExistenciaLocalidade(idLocalidade);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existencia da Guia Devolucao
	 * 
	 * @param id
	 *            GuiaDevolucao Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer verificarExistenciaGuiaDevolucao(Integer idGuiaDevolucao){

		try{
			Integer id = (Integer) this.getControladorArrecadacao().verificarExistenciaGuiaDevolucao(idGuiaDevolucao);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existencia da localidade
	 * 
	 * @param id
	 *            GuiaDevolucao Descrição do parâmetro
	 * @return Descrição do retorno
	 */
	public Integer verificarExistenciaDebitoTipo(Integer idDebitoTipo){

		try{
			Integer id = (Integer) this.getControladorFaturamento().verificarExistenciaDebitoTipo(idDebitoTipo);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0367]Atualizar Ligação de Agua no sistema.
	 * [SB002] Atualiza ligação de agua.
	 * 
	 * @author Rafael Pinto
	 * @date 20/07/2006
	 * @param ligacaoAgua
	 * @throws ControladorException
	 */
	public void atualizarLigacaoAgua(LigacaoAgua ligacaoAgua){

		try{
			this.getControladorAtendimentoPublico().atualizarLigacaoAgua(ligacaoAgua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * ligação de agua do imóvel no momento da exibição.
	 * [FS0001] Verificar existência da matrícula do imóvel. [FS0002] Verificar
	 * Situação do Imovel. [FS0003] Validar Situação de Esgoto do imóvel.
	 * 
	 * @author Rafael Pinto
	 * @date 20/07/2006
	 * @param Imovel
	 */
	public void validarExibirLigacaoAguaImovel(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirLigacaoAguaImovel(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0373] Inserir Unidade Organizacional
	 * Metodo inserção da unidade organizacional
	 * [FS0001] é Verificar existência de unidade centralizadora
	 * 
	 * @author Raphael Pinto
	 * @date 31/07/2006
	 * @param unidadeOrganizacional
	 * @return Object
	 * @throws ControladorException
	 */
	public Object inserirUnidadeOrganizacional(UnidadeOrganizacional unidadeOrganizacional, Usuario usuario){

		try{
			return this.getControladorUnidade().inserirUnidadeOrganizacional(unidadeOrganizacional, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Efetuar a Ligação da Esgoto no imovel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 15/06/2006
	 * @return void retorno
	 * @throws ErroRepositorioException
	 */
	public void inserirLigacaoEsgoto(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorAtendimentoPublico().inserirLigacaoEsgoto(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar a Ligação da Esgoto no imovel
	 * 
	 * @author Leonardo Regis
	 * @date 18/07/2006
	 * @throws ErroRepositorioException
	 */
	public void atualizarLigacaoEsgoto(LigacaoEsgoto ligacaoEsgoto){

		try{
			this.getControladorLigacaoEsgoto().atualizarLigacaoEsgoto(ligacaoEsgoto);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * ligação de esgoto no momento da exibição.
	 * [FS0001] Verificar existência da matrícula do imóvel. [FS0002] Verificar
	 * Situação do Imovel. [FS0003] Validar Situação de Esgoto do imóvel.
	 * 
	 * @author Leonardo Regis
	 * @date 20/07/2006
	 * @param ligacaoEsgoto
	 */
	public void validarLigacaoEsgotoImovelExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{
			this.getControladorLigacaoEsgoto().validarLigacaoEsgotoImovelExibir(ordem, veioEncerrarOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * ligação de esgoto no momento da atualização.
	 * [FS0006] Validar Percentual de Coleta. [FS0007] Validar Volume Mínimo
	 * Fixado.
	 * 
	 * @author Leonardo Regis
	 * @date 20/07/2006
	 * @param ligacaoEsgoto
	 */
	public void validarLigacaoEsgotoImovelAtualizar(Imovel imovel){

		try{
			this.getControladorLigacaoEsgoto().validarLigacaoEsgotoImovelAtualizar(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir equipe
	 * 
	 * @author Leonardo Regis
	 * @date 25/07/2006
	 * @throws ErroRepositorioException
	 */
	public long inserirEquipe(Equipe equipe){

		try{
			return this.getControladorOrdemServico().inserirEquipe(equipe);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserção de equipe.
	 * [FS0001] Verificar existência da Unidade Organizacional. [FS0002]
	 * Verificar existência do Tipo de Perfil do servirão. [FS0003] Verificar
	 * Equipe Componente já Existente.
	 * 
	 * @author Leonardo Regis
	 * @date 25/07/2006
	 * @param equipe
	 */
	public void validarInsercaoEquipe(Equipe equipe){

		try{
			this.getControladorOrdemServico().validarInsercaoEquipe(equipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserção da especificacao situacao criterio imovel.
	 * [FS0001] Validar especificação da situaçãoo já existente [FS0002] Validar
	 * existência de hidrômetro na ligação Água [FS0003] Validar existência de
	 * hidrômetro no poão
	 * 
	 * @author Rafael Pinto
	 * @date 04/08/2006
	 * @param equipeComponentes
	 */
	public void validarExibirInsercaoEspecificacaoImovSitCriterio(Collection colecaoEspecificacaoImovSitCriterio,
					EspecificacaoImovSitCriterio especImovSitCriterio){

		try{
			this.getControladorAtendimentoPublico().validarExibirInsercaoEspecificacaoImovSitCriterio(colecaoEspecificacaoImovSitCriterio,
							especImovSitCriterio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Componentes da equipe
	 * 
	 * @author Leonardo Regis
	 * @date 25/07/2006
	 * @throws ErroRepositorioException
	 */
	public long inserirEquipeComponentes(EquipeComponentes equipeComponentes){

		try{
			return this.getControladorOrdemServico().inserirEquipeComponentes(equipeComponentes);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserção de componentes da equipe.
	 * [FS0003] Validar equipe componente já existente [FS0004] Verificar
	 * existência do funcionário [FS0007] Verificar quantidade de indicador de
	 * responsável
	 * 
	 * @author Leonardo Regis
	 * @date 25/07/2006
	 * @param equipe
	 */
	public void validarExibirInsercaoEquipeComponentes(Collection colecaoEquipeComponentes, EquipeComponentes equipeComponentes){

		try{
			this.getControladorOrdemServico().validarExibirInsercaoEquipeComponentes(colecaoEquipeComponentes, equipeComponentes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserção de componentes da equipe.
	 * [FS0006] Verificar quantidade de componentes da equipe em Tipo Perfil
	 * serviço Validar se possui algum responsável
	 * 
	 * @author Leonardo Regis
	 * @date 29/07/2006
	 * @param equipeComponentes
	 * @throws ControladorException
	 */
	public void validarInsercaoEquipeComponentes(Collection colecaoEquipeComponentes, Equipe equipe){

		try{
			this.getControladorOrdemServico().validarInsercaoEquipeComponentes(colecaoEquipeComponentes, equipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0406] Filtrar Registro de Atendimento
	 * [FS007] Verificar existência de unidades subordinadas
	 * 
	 * @author Leonardo Regis
	 * @date 05/08/2006
	 * @param unidadeOrganizacional
	 */
	public void verificarExistenciaUnidadesSubordinadas(UnidadeOrganizacional unidadeOrganizacional){

		try{
			this.getControladorUnidade().verificarExistenciaUnidadesSubordinadas(unidadeOrganizacional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0406] Filtrar Registro de Atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 07/08/2006
	 * @param filtroRA
	 * @return Collection<RegistroAtendimento>
	 */
	public Collection<RegistroAtendimento> filtrarRegistroAtendimento(FiltrarRegistroAtendimentoHelper filtroRA){

		try{
			return this.getControladorRegistroAtendimento().filtrarRegistroAtendimento(filtroRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0406] Filtrar Registro de Atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 07/08/2006
	 * @param filtroRA
	 * @return Collection<RegistroAtendimento>
	 */
	public Integer filtrarRegistroAtendimentoTamanho(FiltrarRegistroAtendimentoHelper filtroRA){

		try{
			return this.getControladorRegistroAtendimento().filtrarRegistroAtendimentoTamanho(filtroRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Constroi um menu de acesso de acordo com as permissões que o usuário que
	 * está logado no sistema conteme monta o link de retorno com o link
	 * informado.
	 * [UC0277] - Construir menu de acesso
	 * 
	 * @author Pedro Alexandre
	 * @date 10/07/2006
	 * @param usuarioLogado
	 * @param linkRetorno
	 * @return
	 */
	public String construirMenuAcesso(Usuario usuarioLogado, String linkRetorno){

		try{
			return getControladorAcesso().construirMenuAcesso(usuarioLogado, linkRetorno);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @author Vivianne Sousa, Pedro Alexandre
	 * @date 27/06/2006, 16/11/2006
	 * @param quadra
	 * @return id da quadra inserida
	 */
	public Integer inserirQuadra(Quadra quadra, Usuario usuarioLogado){

		try{
			/*
			 * Integer id = (Integer) this.getControladorUtil().inserir(quadra);
			 * return id;
			 */

			return this.getControladorLocalidade().inserirQuadra(quadra, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método que consulta os grupos do usuário
	 * 
	 * @author Sávio Luiz
	 * @date 27/06/2006
	 */
	public Collection pesquisarGruposUsuario(Integer idUsuario){

		try{
			return this.getControladorUsuario().pesquisarGruposUsuario(idUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que consulta os grupos do usuário da tabela grupoAcessos
	 * 
	 * @author Sávio Luiz
	 * @date 21/02/2007
	 */
	public Collection pesquisarGruposUsuarioAcesso(Collection colecaoUsuarioGrupos){

		try{
			return this.getControladorUsuario().pesquisarGruposUsuarioAcesso(colecaoUsuarioGrupos);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta as abrangências dos usuário pelos os ids das
	 * abrangências superiores e com o id da abrangência diferente do id da
	 * abrangência do usuário que está inserindo(usuário logado)
	 * 
	 * @author Sávio Luiz
	 * @date 28/06/2006
	 */
	public Collection pesquisarUsuarioAbrangenciaPorSuperior(Collection colecaoUsuarioAbrangencia, Integer idUsuarioAbrangenciaLogado){

		try{
			return this.getControladorUsuario().pesquisarUsuarioAbrangenciaPorSuperior(colecaoUsuarioAbrangencia,
							idUsuarioAbrangenciaLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informa o número total de registros de usuario grupo, auxiliando o
	 * esquema de paginação
	 * 
	 * @author Sávio Luiz
	 * @date 30/06/2006
	 * @param Filtro
	 *            da Pesquisa
	 * @param Pacote
	 *            do objeto pesquisado
	 * @return número de registros da pesquisa
	 * @throws ErroRepositorioException
	 *             Exceção do repositório
	 */
	public int totalRegistrosPesquisaUsuarioGrupo(FiltroUsuarioGrupo filtroUsuarioGrupo){

		try{
			return this.getControladorUsuario().totalRegistrosPesquisaUsuarioGrupo(filtroUsuarioGrupo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarLogradouroCompleto(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular, Integer numeroPaginas){

		try{
			return this.getControladorEndereco().pesquisarLogradouroCompleto(codigoMunicipio, codigoBairro, nome, nomePopular,
							logradouroTipo, logradouroTitulo, cep, codigoLogradouro, indicadorUso, tipoPesquisa, tipoPesquisaPopular,
							numeroPaginas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarLogradouroCompletoRelatorio(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular){

		try{
			return this.getControladorEndereco().pesquisarLogradouroCompletoRelatorio(codigoMunicipio, codigoBairro, nome, nomePopular,
							logradouroTipo, logradouroTitulo, cep, codigoLogradouro, indicadorUso, tipoPesquisa, tipoPesquisaPopular);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informa o número total de registros de usuario grupo, auxiliando o
	 * esquema de paginação
	 * 
	 * @author Sávio Luiz
	 * @date 30/06/2006
	 * @param Filtro
	 *            da Pesquisa
	 * @param Pacote
	 *            do objeto pesquisado
	 * @return número de registros da pesquisa
	 * @throws ErroRepositorioException
	 *             Exceção do repositório
	 */
	public Collection pesquisarUsuariosDosGruposUsuarios(FiltroUsuarioGrupo filtroUsuarioGrupo, Integer numeroPagina){

		try{
			return this.getControladorUsuario().pesquisarUsuariosDosGruposUsuarios(filtroUsuarioGrupo, numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarLogradouroCompletoCount(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular){

		try{
			return this.getControladorEndereco().pesquisarLogradouroCompletoCount(codigoMunicipio, codigoBairro, nome, nomePopular,
							logradouroTipo, logradouroTitulo, cep, codigoLogradouro, indicadorUso, tipoPesquisa, tipoPesquisaPopular);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 04/07/2006
	 * @param login
	 * @param senha
	 * @return
	 * @throws ErroCriptografiaException
	 */
	public Usuario validarUsuario(String login, String senha){

		try{
			return this.getControladorAcesso().validarUsuario(login, senha);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remove usuario(s)
	 * [UC0231] Manter Usuario
	 * 
	 * @author Sávio Luiz
	 * @date 07/07/2006
	 * @param idsUsuario
	 * @param usuario
	 * @throws ControladorException
	 */
	public void removerUsuario(String[] idsUsuario, Usuario usuario){

		try{
			this.getControladorUsuario().removerUsuario(idsUsuario, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Ativa/Inativa usuario(s)
	 * [UC0231] Manter Usuario
	 * 
	 * @param idsUsuario
	 * @param usuario
	 * @param ativar
	 */
	public void ativarInativarUsuario(String[] idsUsuario, Usuario usuario, boolean ativar){

		try{
			this.getControladorUsuario().ativarInativarUsuario(idsUsuario, usuario, ativar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Administrador
	 * @date 04/07/2006
	 * @param usuario
	 */
	public void registrarAcessoUsuario(Usuario usuario){

		try{
			this.getControladorAcesso().registrarAcessoUsuario(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * <Breve descrição sobre o subfluxo>
	 * <Identificador e nome do subfluxo>
	 * <Breve descrição sobre o fluxo secundário>
	 * <Identificador e nome do fluxo secundário>
	 * 
	 * @author Administrador
	 * @date 04/07/2006
	 * @param permissoesUsuario
	 * @return
	 */
	public FuncionalidadeCategoria pesquisarArvoreFuncionalidades(Collection permissoesUsuario){

		try{
			return this.getControladorAcesso().pesquisarArvoreFuncionalidades(permissoesUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0355] Efetuar Corte de Ligação de Água.
	 * 
	 * @author Leonardo Regis.
	 * @date 25/09/2006
	 * @param helper
	 */
	public void efetuarCorteLigacaoAgua(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoAgua().efetuarCorteLigacaoAgua(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3144] Efetuar Corte de Ligação de Água com Retirada de Hidrômetro
	 * 
	 * @author Eduardo Oliveira
	 * @date 22/04/2014
	 * @param helper
	 */
	public void efetuarCorteLigacaoAguaComRetiradaHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoAgua().efetuarCorteLigacaoAguaComRetiradaHidrometro(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0365] Efetuar Retirada de hidrômetro [SB0001] Atualizar Histórico de
	 * instalação do hidrômetro
	 * 
	 * @author Thiago Tenório
	 * @date 05/07/2006
	 * @param hidrometroInstalacaoHistorico
	 * @throws ControladorException
	 */

	public void efetuarRetiradaHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarRetiradaHidrometro(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0365] Efetuar Corte Administrativo da Ligação Agua
	 * 
	 * @author Thiago Tenório
	 * @date 30/06/2006
	 * @param ligacaoAgua
	 * @throws ControladorException
	 */
	public void efetuarCorteAdministrativoLigacaoAgua(DadosEfetuacaoCorteLigacaoAguaHelper helper, Usuario usuario){

		try{

			this.getControladorLigacaoAgua().efetuarCorteAdministrativoLigacaoAgua(helper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta os grupos funcionários operAções passando os ids dos
	 * grupos
	 * 
	 * @author Sávio Luiz
	 * @date 11/07/2006
	 */

	public Collection pesquisarGruposFuncionalidadeOperacoes(Integer[] idsGrupos){

		try{

			return getControladorUsuario().pesquisarGruposFuncionalidadeOperacoes(idsGrupos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta os grupos funcionários operAções passando os ids dos
	 * grupos e o id da funcionalidade
	 * 
	 * @author Sávio Luiz
	 * @date 11/07/2006
	 */
	public Collection pesquisarGruposFuncionalidadesOperacoesPelaFuncionalidade(Integer[] idsGrupos, Integer idFuncionalidade){

		try{

			return getControladorUsuario().pesquisarGruposFuncionalidadesOperacoesPelaFuncionalidade(idsGrupos, idFuncionalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta os usuários restrinção passando os ids dos grupos , o
	 * id da funcionalidade e o id do usuário
	 * 
	 * @author Sávio Luiz
	 * @date 11/07/2006
	 */
	public Collection pesquisarUsuarioRestrincao(Integer[] idsGrupos, Integer idFuncionalidade, Integer idUsuario){

		try{

			return getControladorUsuario().pesquisarUsuarioRestrincao(idsGrupos, idFuncionalidade, idUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna o maior número da quadra de um setor comercial
	 * 
	 * @author Rafael Corrêa
	 * @date 11/07/2006
	 * @param idSetorComercial
	 * @return
	 * @throws ControladorException
	 */
	public int pesquisarMaximoCodigoQuadra(Integer idSetorComercial){

		try{
			return this.getControladorLocalidade().pesquisarMaximoCodigoQuadra(idSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método que retorna o maior Código de setor comercial de uma localidade
	 * 
	 * @author Rafael Corrêa
	 * @date 11/07/2006
	 * @param idLocalidade
	 * @return
	 * @throws ControladorException
	 */
	public int pesquisarMaximoCodigoSetorComercial(Integer idLocalidade){

		try{
			return this.getControladorLocalidade().pesquisarMaximoCodigoSetorComercial(idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método que retorna o maior Código de Rota de um Setor Comercial
	 * 
	 * @author Vivianne Sousa
	 * @date 12/07/2006
	 * @param idSetorComercial
	 * @return
	 * @throws ControladorException
	 */
	public Short pesquisarMaximoCodigoRota(Integer idSetorComercial){

		try{
			return this.getControladorMicromedicao().pesquisarMaximoCodigoRota(idSetorComercial);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * método que retorna o maior Código de Rota a partir de um Grupo de Faturamento
	 * 
	 * @author Virgínia Melo
	 * @date 18/02/2009
	 * @param idGrupoFaturamento
	 * @return
	 * @throws ControladorException
	 */
	public Short pesquisarMaximoCodigoRotaGrupoFaturamento(Integer idGrupoFaturamento){

		try{
			return this.getControladorMicromedicao().pesquisarMaximoCodigoRotaGrupoFaturamento(idGrupoFaturamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta as funcionalidades da(s) funcionalidade(s)
	 * princpial(is)
	 * 
	 * @author Sávio Luiz
	 * @date 12/07/2006
	 */
	public Collection pesquisarFuncionanidadesDependencia(Collection idsFuncionalidades){

		try{
			return this.getControladorUsuario().pesquisarFuncionanidadesDependencia(idsFuncionalidades);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta as operAções da(s) funcionalidade(s)
	 * 
	 * @author Sávio Luiz
	 * @date 12/07/2006
	 */
	public Collection pesquisarOperacoes(Collection idsFuncionalidades){

		try{
			return this.getControladorUsuario().pesquisarOperacoes(idsFuncionalidades);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta as operAções da(s) funcionalidade(s) e das
	 * funcionalidades dependencia
	 * 
	 * @author Sávio Luiz
	 * @date 12/07/2006
	 */
	public Collection recuperarOperacoesFuncionalidadesEDependentes(Integer idFuncionalidade){

		try{
			return this.getControladorUsuario().recuperarOperacoesFuncionalidadesEDependentes(idFuncionalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existência da matrícula do imóvel. Caso exista, verifica se o
	 * imóvel está ativo.
	 * [UC0368] Atualizar Instalação do hidrômetro
	 * [FS0001] - Verificar a existência da matrícula do imóvel [FS0002] -
	 * Verificar a situação do imóvel
	 * 
	 * @author lms
	 * @created 19/07/2006
	 * @throws FachadaException
	 */
	public Imovel pesquisarImovelSituacaoAtiva(FiltroImovel filtroImovel) throws FachadaException{

		try{
			return this.getControladorImovel().pesquisarImovelSituacaoAtiva(filtroImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Verifica a existência do hidrômetro de acordo com tipo de medição
	 * informado (MedicaoTipo.LIGACAO_AGUA ou MedicaoTipo.POCO).
	 * [UC0368] Atualizar Instalação do hidrômetro
	 * [FS0003] - Validar existência do hidrômetro
	 * 
	 * @author lms
	 * @created 24/07/2006
	 * @throws FachadaException
	 */
	public void validarExistenciaHidrometro(Imovel imovel, Integer medicaoTipo) throws FachadaException{

		try{
			this.getControladorImovel().validarExistenciaHidrometro(imovel, medicaoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0362] Efetuar Instalacao de hidrômetro
	 * [SB0001] Gerar Histórico de instalação do hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 12/07/2006
	 * @param hidrometroInstalacaoHistorico
	 * @param matriculaImovel
	 * @throws ControladorException
	 */

	public void efetuarInstalacaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarInstalacaoHidrometro(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0356] Efetuar Mudança de Situação de Faturamento da Ligação de Esgoto
	 * Permite Efetuar Mudança de Situação de Faturamento da Ligação de Esgoto .
	 * [FS0001]- Validar Ordem de serviço [FS0002] Verificar Situação do Imovel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 18/07/2006
	 * @param ordemServicoId
	 * @param imovel
	 * @param dataMudanca
	 * @param volumeMinimoFixado
	 * @param novaSituacaoEsgoto
	 * @throws ControladorException
	 */
	public void efetuarMudancaSituacaoFaturamentoLiagacaoEsgoto(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorAtendimentoPublico().efetuarMudancaSituacaoFaturamentoLiagacaoEsgoto(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0356]- Efetuar Mudança de Faturamento na Ligação de Água
	 * [FS0006]-Atualizar Ligação de Esgoto
	 * Permite atualizar a Tabele de Ligação Esdoto . Update LIGACAO_ESGOTO
	 * LESG_NNCONSUMOMINIMOESGOTO (volume Mínimo fixado) LESG_TMULTIMAALTERADAO
	 * (data e hora correntes) Where LESG_ID=IMOV_ID da tabela IMOVEL
	 * 
	 * @author Leandro Cavalcanti
	 * @date 18/07/2006
	 * @param imovel
	 * @param volumeMinimoFixado
	 * @throws ControladorException
	 */
	public void atualizarLigacaoEsgoto(Imovel imovel, String volumeMinimoFixado){

		try{
			this.getControladorAtendimentoPublico().atualizarLigacaoEsgoto(imovel, volumeMinimoFixado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0356]- Efetuar Mudança de Faturamento na Ligação de Água
	 * [FS0007]- Validar Situação da Ligação de Água do imóvel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 18/07/2006
	 * @param imovel
	 * @param volumeMinimoFixado
	 * @throws ControladorException
	 */
	public String validarSituacaoAguaImovel(Imovel imovel, Integer tipoServico){

		try{
			return this.getControladorAtendimentoPublico().validarSituacaoAguaImovel(imovel, tipoServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0356] Efetuar Mudança de Situação de Faturamento da Ligação de Esgoto
	 * Permite Efetuar Mudança de Situação de Faturamento da Ligação de Esgoto .
	 * [FS0001]- Validar Ordem de serviço [FS0002] Verificar Situação do Imovel
	 * [FS0002] Verificar Situação do Imovel [FS0003]- Validar Situação da
	 * Ligação de Esgoto do imóvel [FS0007]- Validar Situação da Ligação de Água
	 * do imóvel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 18/07/2006
	 * @param ordemServicoId
	 * @param imovel
	 * @param dataMudanca
	 * @param volumeMinimoFixado
	 * @param novaSituacaoEsgoto
	 * @throws ControladorException
	 */
	public String validarMudancaSituacaoFaturamentoLigacaoesgotoExibir(OrdemServico ordemServico, boolean veioEncerrarOS){

		{
			try{
				return this.getControladorAtendimentoPublico().validarMudancaSituacaoFaturamentoLigacaoesgotoExibir(ordemServico,
								veioEncerrarOS);
			}catch(ControladorException ex){
				throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
			}
		}
	}

	/**
	 * [UC0364] Efetuar Substituição de hidrômetro
	 * [SB0001] Atualiza o histórico da instalação com os dados do hidrômetro
	 * substituido [SB0002] Gerar Histórico de instalação do hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 24/07/2006
	 * @param hidrometroInstalacaoHistorico
	 * @param matriculaImovel
	 * @param hidrometroSubstituicaoHistorico
	 * @throws ControladorException
	 */

	public void efetuarSubstituicaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarSubstituicaoHidrometro(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0360]- Efetuar Supressão da Ligação de Água
	 * [SB0001]- Atualizar Ligação de Água [SB0002]- Atualizar imóvel [SB0004]-
	 * Atualizar Histórico de Instalação de hidrômetro
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/07/2006
	 * @param imovel
	 * @throws ControladorException
	 */
	public void efetuarSupressaoLigacaoAgua(IntegracaoComercialHelper integracaoComercialHelper, boolean retirarHidrometro){

		try{

			this.getControladorAtendimentoPublico().efetuarSupressaoLigacaoAgua(integracaoComercialHelper, retirarHidrometro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Obtém a unidade associada ao usuário que estiver efetuando o registro de
	 * atendimento (UNID_ID e UNID_DSUNIDADE da tabela UNIDADE_ORGANIZACIONAL
	 * com UNID_ID=(UNID_ID da tabela USUARIO com USUR_NMLOGIN= Login do usuário
	 * que estiver efetuando o registro de atendimento) e UNID_ICABERTURARA=1)
	 * 
	 * @author Raphael Rossiter
	 * @date 25/07/2006
	 * @param login
	 * @return UnidadeOrganizacional
	 */
	public UnidadeOrganizacional obterUnidadeOrganizacionalAberturaRAAtivoUsuario(String loginUsuario){

		try{

			return this.getControladorUnidade().obterUnidadeOrganizacionalAberturaRAAtivoUsuario(loginUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a unidade de atendimento Não tenha autorização para efetuar a
	 * abertura de registros de atendimento (UNID_ICABERTURARA com o valor
	 * correspondente a dois na tabela UNIDADE_ORGANIZACIONAL com UNID_ID=Id da
	 * Unidade de Atendimento), exibir a mensagem A unidade <<UNID_NMUNIDADE da
	 * tabela UNIDADE_ORGANIZACIONAL>> Não tem autorização para efetuar a
	 * abertura de registro de atendimento e retornar para o passo
	 * correspondente no fluxo principal.
	 * [FS0004] é Verificar existência da unidade de atendimento
	 * [FS0033] é Verificar autorização da unidade de atendimento para abertura
	 * de registro de atendimento
	 * 
	 * @author Raphael Rossiter
	 * @date 25/07/2006
	 * @param idUnidadeOrganizacional
	 *            ,
	 *            levantarExceptionUnidadeInexistente
	 * @return UnidadeOrganizacional
	 */
	public UnidadeOrganizacional verificarAutorizacaoUnidadeAberturaRA(Integer idUnidadeOrganizacional,
					boolean levantarExceptionUnidadeInexistente){

		try{

			return this.getControladorUnidade().verificarAutorizacaoUnidadeAberturaRA(idUnidadeOrganizacional,
							levantarExceptionUnidadeInexistente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0368] Atualizar Instalação do hidrômetro
	 * [FS0001] - Verificar a existência da matrícula do imóvel [FS0002] -
	 * Verificar a situação do imóvel [FS0003] - Validar existência do
	 * hidrômetro [FS0004] - Validar leitura instalação hidrômetro [FS0005] -
	 * Validar leitura retirada hidrômetro [FS0006] - Validar leitura retirada
	 * corte [FS0007] - Validar Leitura Supressão [FS0009] - Verificar sucesso
	 * da transação
	 * 
	 * @author lms
	 * @created 21/07/2006
	 * @throws ControladorException
	 */
	public void atualizarInstalacaoHidrometro(Imovel imovel, Integer medicaoTipo) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().atualizarInstalacaoHidrometro(imovel, medicaoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Data Prevista = Data Válida obtida a partir da Data do Atendimento +
	 * número de dias previstos para a especificação do tipo de solicitação
	 * (STEP_NNDIAPRAZO da tabela SOLICITACAO_TIPO_ESPECIFICACAO).
	 * Caso o sistema deva sugerir a unidade destino para o primeiro
	 * encaminhamento do Registro de Atendimento (PARM_ICSUGESTAOTRAMITE=1 na
	 * tabela SISTEMA_PARAMETROS)
	 * Caso a Especificação esteja associada a uma unidade (UNID_ID da tabela
	 * SOLICITACAO_TIPO_ESPECIFICACAO com o valor diferente de nulo), definir a
	 * unidade destino a partir da Especificação (UNID_ID e UNID_DSUNIDADE da
	 * tabela UNIDADE_ORGANIZACIONAL com UNID_ICTRAMITE=1 e UNID_ID=UNID_ID da
	 * tabela SOLICITACAO_TIPO_ESPECIFICACAO com SETP_ID=Id da Especificação
	 * selecionada).
	 * [SB0003] é Define Data Prevista e Unidade Destino da Especificação
	 * 
	 * @author Raphael Rossiter
	 * @date 25/07/2006
	 * @param login
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	public DefinirDataPrevistaUnidadeDestinoEspecificacaoHelper definirDataPrevistaUnidadeDestinoEspecificacao(Date dataAtendimento,
					Integer idSolicitacaoTipoEspecificacao){

		try{

			return this.getControladorRegistroAtendimento().definirDataPrevistaUnidadeDestinoEspecificacao(dataAtendimento,
							idSolicitacaoTipoEspecificacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0359] Efetuar Restabelecimento Ligação de Água
	 * [SB0001] Atualizar imóvel/Ligação de Água/Ligação de Esgoto
	 * 
	 * @author Rômulo Aurélio
	 * @date 12/07/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */

	public void efetuarRestabelecimentoLigacaoAgua(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarRestabelecimentoLigacaoAgua(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Valida os dados gerais do atendimento
	 * 
	 * @author Raphael Rossiter
	 * @param string
	 * @date 27/07/2006
	 * @param dataAtendimento
	 *            ,
	 *            horaAtendimento, tempoEsperaInicial, tempoEsperaFinal,
	 *            idUnidadeOrganizacional
	 * @return void
	 * @throws ControladorException
	 */
	public void validarInserirRegistroAtendimentoDadosGerais(String dataAtendimento, String horaAtendimento, String tempoEsperaInicial,
					String tempoEsperaFinal, String idUnidadeOrganizacional, String numeroRAManual, String especificacao,
					String idRaReiteracao){

		try{

			this.getControladorRegistroAtendimento().validarInserirRegistroAtendimentoDadosGerais(dataAtendimento, horaAtendimento,
							tempoEsperaInicial, tempoEsperaFinal, idUnidadeOrganizacional, numeroRAManual, especificacao, idRaReiteracao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Valida os dados gerais do atendimento
	 * 
	 * @author Raphael Rossiter
	 * @param string
	 * @date 27/07/2006
	 * @param dataAtendimento
	 *            ,
	 *            horaAtendimento, tempoEsperaInicial, tempoEsperaFinal,
	 *            idUnidadeOrganizacional
	 * @return void
	 * @throws ControladorException
	 */
	public void validarInserirRegistroAtendimentoDadosGeraisIncompleto(String dataAtendimento, String horaAtendimento,
					String tempoEsperaInicial, String tempoEsperaFinal, String idUnidadeOrganizacional, String numeroRAManual,
					String especificacao, String idRaReiteracao){

		try{

			this.getControladorRegistroAtendimento().validarInserirRegistroAtendimentoDadosGeraisIncompleto(dataAtendimento,
							horaAtendimento, tempoEsperaInicial, tempoEsperaFinal, idUnidadeOrganizacional, numeroRAManual, especificacao,
							idRaReiteracao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a Especificação exija a matrícula do imóvel (STEP_ICMATRICULA com o
	 * valor correspondente a um na tabela SOLICITACAO_TIPO_ESPECIFICACAO),
	 * obrigatório; caso contrário, opcional
	 * 
	 * @author Raphael Rossiter
	 * @date 28/07/2006
	 * @param idSolicitacaoTipoEspecificacao
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificarExigenciaImovelPelaEspecificacao(Integer idSolicitacaoTipoEspecificacao){

		try{

			return this.getControladorRegistroAtendimento().verificarExigenciaImovelPelaEspecificacao(idSolicitacaoTipoEspecificacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0354] Efetuar Ligação de Água.
	 * Permite validar ligação de Água Exibir ou pelo menu ou pela
	 * funcionalidade encerrar a execução da ordem de serão.
	 * [FS0008] Verificar Situação Rede de Água na Quadra. [FS0007] Verificar
	 * Situação do Imovel. [FS0002] Validar Situação de Água do imóvel
	 * 
	 * @author Leandro Cavalcanti.
	 * @date 12/07/2006
	 * @param imovel
	 * @throws ControladorException
	 */
	public void validarLigacaoAguaExibir(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarLigacaoAguaExibir(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0353] Efetuar Ligação de Esgoto.
	 * Permite validar ligação de esgoto Exibir ou pelo menu ou pela
	 * funcionalidade encerrar a execução da ordem de serão.
	 * [FS0008] Verificar Situação Rede de Esgoto na Quadra. [FS0007] Verificar
	 * Situação do Imovel. [FS0002] Validar Situação de Esgoto do imóvel
	 * 
	 * @author Leandro Cavalcanti.
	 * @date 12/07/2006
	 * @param imovel
	 * @throws ControladorException
	 */
	public void validarLigacaoEsgotoExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarLigacaoEsgotoExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Obter e habilitar/desabilitar os Dados da Identificação do Local da
	 * ocorrência de acordo com as situações abaixo descritas no caso de uso
	 * 
	 * @author Raphael Rossiter
	 * @date 28/07/2006
	 * @param idImovel
	 *            ,
	 *            idSolicitacaoTipoEspecificacao, idSolicitacaoTipo,
	 *            levantarExceptionImovelInexistente
	 * @return ObterDadosIdentificacaoLocalOcorrenciaHelper
	 * @throws ControladorException
	 */
	public ObterDadosIdentificacaoLocalOcorrenciaHelper obterDadosIdentificacaoLocalOcorrencia(Integer idImovel,
					Integer idSolicitacaoTipoEspecificacao, Integer idSolicitacaoTipo, boolean levantarExceptionImovelInexistente,
					Usuario usuario){

		try{

			return this.getControladorRegistroAtendimento().obterDadosIdentificacaoLocalOcorrencia(idImovel,
							idSolicitacaoTipoEspecificacao, idSolicitacaoTipo, levantarExceptionImovelInexistente, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * Obter e habilitar/desabilitar os Dados da Identificação do Local da
	 * ocorrência de acordo com as situações abaixo descritas no caso de uso
	 * 
	 * @author Sávio Luiz
	 * @date 21/08/2006
	 * @param idImovel
	 *            ,
	 *            idSolicitacaoTipoEspecificacao, idSolicitacaoTipo,
	 *            levantarExceptionImovelInexistente
	 * @return ObterDadosIdentificacaoLocalOcorrenciaHelper
	 * @throws ControladorException
	 */
	public ObterDadosIdentificacaoLocalOcorrenciaHelper obterDadosIdentificacaoLocalOcorrenciaAtualizar(Integer idImovel,
					Integer idSolicitacaoTipoEspecificacao, Integer idSolicitacaoTipo, Integer idRegistroAtendimento,
					boolean levantarExceptionImovelInexistente, Usuario usuario){

		try{

			return this.getControladorRegistroAtendimento().obterDadosIdentificacaoLocalOcorrenciaAtualizar(idImovel,
							idSolicitacaoTipoEspecificacao, idSolicitacaoTipo, idRegistroAtendimento, levantarExceptionImovelInexistente,
							usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso exista registro de atendimento pendente para o imóvel (existe
	 * ocorrência na tabela REGISTRO_ATENDIMENTO com IMOV_ID=matrícula do imóvel
	 * e RGAT_CDSITUACAO=1)
	 * [SB0021] Verifica existência de Registro de Atendimento Pendente para o
	 * imóvel
	 * 
	 * @author Raphael Rossiter
	 * @date 31/07/2006
	 * @param idImovel
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificaExistenciaRAPendenteImovel(Integer idImovel){

		try{

			return this.getControladorRegistroAtendimento().verificaExistenciaRAPendenteImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0381] Inserir Material com Unidade
	 * Permite a inclusao de um novo material
	 * [SB0001] Gerar Material com Unidade
	 * 1.1Inclui o material na tabela Material
	 * 
	 * @author Rômulo Aurélio
	 * @date 31/07/2006
	 * @param descricao
	 * @param descricaoAbreviada
	 * @param unidadeMaterial
	 * @throws ControladorException
	 */

	public Integer inserirMaterial(String descricao, String descricaoAbreviada, String unidadeMaterial, BigDecimal materialValor,
					Usuario usuarioLogado){

		try{

			return this.getControladorAtendimentoPublico().inserirMaterial(descricao, descricaoAbreviada, unidadeMaterial, materialValor,
							usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que consulta uma coleção por filtro e valida se encontrou
	 * registros.
	 * [FS0001] - Verificar existência de dados
	 * 
	 * @param filtro
	 *            Filtro
	 * @param pacoteNomeObjeto
	 *            pacoteNomeObjeto
	 * @param nomeTabela
	 *            nomeTabela
	 * @return Collection
	 * @throws FachadaException
	 */
	public Collection pesquisar(Filtro filtro, String pacoteNomeObjeto, String nomeTabela) throws FachadaException{

		try{
			return this.getControladorUtil().pesquisar(filtro, pacoteNomeObjeto, nomeTabela);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0396] Inserir Tipo de Retorno da OS Referida
	 * [FS0003] - Validar atendimento do motivo de encerramento.
	 * 
	 * @author lms
	 * @created 21/07/2006
	 * @throws ControladorException
	 */
	public void validarAtendimentoMotivoEncerramento(OsReferidaRetornoTipo osReferidaRetornoTipo) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarAtendimentoMotivoEncerramento(osReferidaRetornoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0396] Inserir Tipo de Retorno da OS Referida
	 * [FS0002] - Solicitar o indicador de troca de serviço, situação e motivo
	 * de encerramento [FS0003] - Validar atendimento do motivo de encerramento
	 * [FS0005] - Validar indicador de deferimento [FS0006] - Validar indicador
	 * de deferimento x indicador de troca de serviço [FS0007] - Verificar
	 * sucesso da transação
	 * 
	 * @author lms
	 * @created 21/07/2006
	 * @throws ControladorException
	 */
	public Integer inserirOSReferidaRetornoTipo(OsReferidaRetornoTipo osReferidaRetornoTipo) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().inserirOSReferidaRetornoTipo(osReferidaRetornoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Tipo Perfil serviço
	 * 
	 * @author Ana Maria
	 * @date 01/08/2006
	 * @throws ErroRepositorioException
	 */
	public Integer inserirServicoTipoPerfil(ServicoPerfilTipo servicoPerfilTipo){

		try{
			return this.getControladorAtendimentoPublico().inserirServicoTipoPerfil(servicoPerfilTipo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0391] Inserir Valor de Cobrança de serviço.
	 * Permite a Inclusão de um novo valor de Cobrança de serviço na tabela
	 * SERVICO_COBRANCA_VALOR.
	 * 
	 * @author Leonardo Regis
	 * @date 29/09/2006
	 * @param servicoCobrancaValor
	 */
	public void inserirValorCobrancaServico(ServicoCobrancaValor servicoCobrancaValor){

		try{
			this.getControladorOrdemServico().inserirValorCobrancaServico(servicoCobrancaValor);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0391] Atualizar Valor de Cobrança de serviço.
	 * Permite a atualização de um novo valor de Cobrança de serviço na tabela
	 * SERVICO_COBRANCA_VALOR.
	 * 
	 * @author Rômulo Aurélio
	 * @date 01/11/2006
	 * @param servicoCobrancaValor
	 * @throws ControladorException
	 */
	public void atualizarValorCobrancaServico(ServicoCobrancaValor servicoCobrancaValor){

		try{
			this.getControladorOrdemServico().atualizarValorCobrancaServico(servicoCobrancaValor);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0399] Inserir Tipo de Solicitação com Especificação
	 * [SB0001] - Gerar Tipo Solicitação com EspecificAções
	 * 
	 * @author Sávio Luiz
	 * @date 01/08/2006
	 * @param solicitacaoTipo
	 *            ,
	 *            colecaoSolicitacaoTipoEspecificacao, usuarioLogado
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer inserirTipoSolicitacaoEspecificacao(SolicitacaoTipo solicitacaoTipo, Collection colecaoSolicitacaoTipoEspecificacao,
					Usuario usuarioLogado){

		try{
			return this.getControladorRegistroAtendimento().inserirTipoSolicitacaoEspecificacao(solicitacaoTipo,
							colecaoSolicitacaoTipoEspecificacao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0002] é Habilita/Desabilita Município, Bairro, área do Bairro e
	 * Divisão de Esgoto
	 * 
	 * @author Raphael Rossiter
	 * @date 02/08/2006
	 * @param idSolicitacaoTipo
	 * @return ObterDadosIdentificacaoLocalOcorrenciaHelper
	 * @throws ControladorException
	 */
	public ObterDadosIdentificacaoLocalOcorrenciaHelper habilitarGeograficoDivisaoEsgoto(Integer idSolicitacaoTipo){

		try{
			return this.getControladorRegistroAtendimento().habilitarGeograficoDivisaoEsgoto(idSolicitacaoTipo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0003] - Validar Tipo de débito
	 * 
	 * @author lms
	 * @date 01/08/2006
	 */
	public DebitoTipo pesquisarDebitoTipo(Integer idDebitoTipo) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarDebitoTipo(idDebitoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0004] - Validar Perfil do serviço
	 * 
	 * @author lms
	 * @date 01/08/2006
	 */
	public ServicoPerfilTipo pesquisarServicoPerfilTipo(Integer idServicoPerfilTipo) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarServicoPerfilTipo(idServicoPerfilTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0005] - Validar Tipo de serviço de referência
	 * 
	 * @author lms
	 * @date 02/08/2006
	 */
	public ServicoTipoReferencia pesquisarServicoTipoReferencia(Integer idServicoTipoReferencia) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarServicoTipoReferencia(idServicoTipoReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0009] - Validar Atividade
	 * 
	 * @author lms
	 * @date 05/08/2006
	 */
	public Atividade pesquisarAtividade(Integer idAtividade, String atividadeUnica) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarAtividade(idAtividade, atividadeUnica);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0010] - Validar Material
	 * 
	 * @author lms
	 * @date 08/08/2006
	 */
	public Material pesquisarMaterial(Integer idMaterial) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarMaterial(idMaterial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * [FS0006] - Validar Ordem de Execução
	 * 
	 * @author lms
	 * @date 05/08/2006
	 */
	public void validarOrdemExecucao(Collection colecaoServicoTipoAtividade, Short ordemExecucao) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarOrdemExecucao(colecaoServicoTipoAtividade, ordemExecucao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 07/08/2006
	 */
	public Integer inserirServicoTipo(ServicoTipo servicoTipo, Usuario usuarioLogado) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().inserirServicoTipo(servicoTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0412] - Atualizar Tipo de serviço
	 * 
	 * @author vsm
	 * @date 10/12/2008
	 */
	public Integer atualizarServicoTipo(ServicoTipo servicoTipo) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().atualizarServicoTipo(servicoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 01708/2006
	 */
	public ServicoTipoSubgrupo pesquisarServicoTipoSubgrupo(Integer idServicoTipoSubgrupo) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarServicoTipoSubgrupo(idServicoTipoSubgrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 07/08/2006
	 */
	public CreditoTipo pesquisarCreditoTipo(Integer idCreditoTipo) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarCreditoTipo(idCreditoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 07/08/2006
	 */
	public ServicoTipoPrioridade pesquisarServicoTipoPrioridade(Integer idServicoTipoPrioridade) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarServicoTipoPrioridade(idServicoTipoPrioridade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 07/08/2006
	 */
	public void validarAdicionarAtividade(Collection colecaoServicoTipoAtividade, Integer idAtividade) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarAdicionarAtividade(colecaoServicoTipoAtividade, idAtividade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0410] - Inserir Tipo de serviço
	 * 
	 * @author lms
	 * @date 07/08/2006
	 */
	public void validarAdicionarMaterial(Collection colecaoServicoTipoMaterial, Integer idMaterial) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarAdicionarMaterial(colecaoServicoTipoMaterial, idMaterial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void validarAdicionarServicoAssociado(Collection colecaoServicoAssociado, Integer idServico) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarAdicionarServicoAssociado(colecaoServicoAssociado, idServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso o sistema deva sugerir a unidade destino para o primeiro encaminhamento do Registro de
	 * Atendimento (PARM_ICSUGESTAOTRAMITE=1 na tabela
	 * SISTEMA_PARAMETROS), definir a Unidade Destino da Localidade de acordo com as regras abaixo.
	 * Caso a Especificação Não esteja associada a uma
	 * unidade (UNID_ID da tabela SOLICITACAO_TIPO_ESPECIFICACAO com o valor nulo): Caso o Tipo de
	 * Solicitação Não seja relativo é área de esgoto
	 * (SOTG_ICESGOTO da tabela SOLICITACAO_TIPO_GRUPO com o valor correspondente a dois para
	 * SOTG_ID=SOTG_ID da tabela SOLICITACAO_TIPO com
	 * SOTP_ID=Id do Tipo de Solicitação selecionado), definir a unidade destino a partir da
	 * localidade informada/selecionada (UNID_ID e
	 * UNID_DSUNIDADE da tabela UNIDADE_ORGANIZACIONAL com UNID_ICTRAMITE=1 e UNID_ID=UNID_ID da
	 * tabela LOCALIDADE_SOLIC_TIPO_GRUPO com LOCA_ID=Id da
	 * Localidade e SOTG_ID=SOTG_ID da tabela SOLICITACAO_TIPO com SOTP_ID=Id do Tipo de Solicitação
	 * selecionado) [FS0018 é Verificar existência de
	 * unidade centralizadora].
	 * [SB0005] é Define Unidade Destino da Localidade
	 * 
	 * @author Raphael Rossiter
	 * @date 04/08/2006
	 * @param idLocalidade
	 *            ,
	 *            idSolicitacaoTipo, idSolicitacaoTipoEspecificacao
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	// public UnidadeOrganizacional definirUnidadeDestinoLocalidade(
	// Integer idSolicitacaoTipoEspecificacao, Integer idLocalidade,
	// Integer idSolicitacaoTipo, boolean solicitacaoTipoRelativoAreaEsgoto) {
	//
	// try {
	// return this.getControladorRegistroAtendimento()
	// .definirUnidadeDestinoLocalidade(
	// idSolicitacaoTipoEspecificacao, idLocalidade,
	// idSolicitacaoTipo,
	// solicitacaoTipoRelativoAreaEsgoto);
	//
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso o Tipo de Solicitação seja relativo é área de esgoto (SOTG_ICESGOTO
	 * da tabela SOLICITACAO_TIPO_GRUPO com o valor correspondente a um para
	 * SOTG_ID=SOTG_ID da tabela SOLICITACAO_TIPO com SOTP_ID=Id do Tipo de
	 * Solicitação selecionado). Caso a quadra esteja preenchida, obter a
	 * divisão de esgoto da quadra (DVES_ID e DVES_DSDIVISAOESGOTO da tabela
	 * DIVISAO_ESGOTO com DVES_ID=DVES_ID da tabela SISTEMA_ESGOTO com
	 * SESG_ID=SESG_ID da tabela BACIA com BACI_ID=BACI_ID da tabela QUADRA com
	 * QDRA_ID=Id da quadra informada/selecionada).
	 * [SB0006] é Obtém Divisão de Esgoto
	 * 
	 * @author Raphael Rossiter
	 * @date 07/08/2006
	 * @param solicitacaoTipoRelativoAreaEsgoto
	 *            ,
	 *            idQuadra
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	public DivisaoEsgoto obterDivisaoEsgoto(Integer idQuadra, boolean solicitacaoTipoRelativoAreaEsgoto){

		try{
			return this.getControladorRegistroAtendimento().obterDivisaoEsgoto(idQuadra, solicitacaoTipoRelativoAreaEsgoto);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0436] Inserir Tipo de serviço de referência.
	 * Permite a Inclusão de um tipo de serviço de referência.
	 * [FS0003] Validar indicador de existencia x Situação da Os de referencia
	 * 
	 * @author Rômulo Aurélio.
	 * @date 05/08/2006
	 * @param servicoTipoReferencia
	 * @throws ControladorException
	 */

	public Integer inserirTipoServicoReferencia(ServicoTipoReferencia servicoTipoReferencia, Usuario usuarioLogado){

		try{

			return this.getControladorAtendimentoPublico().inserirTipoServicoReferencia(servicoTipoReferencia, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso informe a divisão de esgoto: Caso tenha informado a quadra e a mesma
	 * Não pertença a divisão de esgoto informada (Id da divisão de esgoto é
	 * diferente de DVES_ID da tabela QUADRA com QDRA_ID=Id da quadra
	 * informada).
	 * Caso tenha informado o setor comercial sem a quadra e o setor comercial
	 * Não pertença é divisão de esgoto informada (Id da divisão de esgoto é
	 * diferente de todos os DVES_ID da tabela QUADRA com STCM_ID=Id do setor
	 * comercial informado).
	 * Caso tenha informado a localidade sem o setor comercial e a localidade
	 * Não pertença é divisão de esgoto informada (Id da divisão de esgoto é
	 * diferente de todos os DVES_ID da tabela QUADRA com STCM_ID=STCM_ID da
	 * tabela SETOR_COMERCIAL com LOCA_ID=Id da localidade informada).
	 * [FS0013] é Verificar compatibilidade entre divisão de esgoto e
	 * localidade/setor/quadra
	 * 
	 * @author Raphael Rossiter
	 * @date 08/08/2006
	 * @param idLocalidade
	 *            ,
	 *            idSetorComercial, idQuadra, idDivisaoEsgoto
	 * @return void
	 * @throws ControladorException
	 */
	public void verificarCompatibilidadeDivisaoEsgotoLocalidadeSetorQuadra(Integer idLocalidade, Integer idSetorComercial,
					Integer idQuadra, int idDivisaoEsgoto){

		try{

			this.getControladorRegistroAtendimento().verificarCompatibilidadeDivisaoEsgotoLocalidadeSetorQuadra(idLocalidade,
							idSetorComercial, idQuadra, idDivisaoEsgoto);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso o sistema deva sugerir a unidade destino para o primeiro
	 * encaminhamento do Registro de Atendimento (PARM_ICSUGESTAOTRAMITE=1 na
	 * tabela SISTEMA_PARAMETROS).
	 * Caso a Especificação Não esteja associada a uma unidade (UNID_ID da
	 * tabela SOLICITACAO_TIPO_ESPECIFICACAO com o valor nulo):
	 * Caso o Tipo de Solicitação Não seja relativo é área de esgoto
	 * (SOTG_ICESGOTO da tabela SOLICITACAO_TIPO_GRUPO com o valor
	 * correspondente a um para SOTG_ID=SOTG_ID da tabela SOLICITACAO_TIPO com
	 * SOTP_ID=Id do Tipo de Solicitação selecionado).
	 * Definir a unidade destino a partir da divisão de esgoto
	 * informada/selecionada (UNID_ID e UNID_DSUNIDADE da tabela
	 * UNIDADE_ORGANIZACIONAL com UNID_ICTRAMITE=1 e UNID_ID=UNID_ID da tabela
	 * DIVISAO_ESGOTO com DVES_ID=Id da divisão selecionada) [FS0018 é Verificar
	 * existência de unidade centralizadora].
	 * [SB0007] é Define Unidade Destino da Divisão de Esgoto
	 * 
	 * @author Raphael Rossiter
	 * @date 08/08/2006
	 * @param idDivisaoEsgoto
	 *            ,
	 *            idSolicitacaoTipoEspecificacao,
	 *            solicitacaoTipoRelativoAreaEsgoto
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	// public UnidadeOrganizacional definirUnidadeDestinoDivisaoEsgoto(
	// Integer idSolicitacaoTipoEspecificacao, Integer idDivisaoEsgoto,
	// boolean solicitacaoTipoRelativoAreaEsgoto) {
	//
	// try {
	//
	// return this.getControladorRegistroAtendimento()
	// .definirUnidadeDestinoDivisaoEsgoto(
	// idSolicitacaoTipoEspecificacao, idDivisaoEsgoto,
	// solicitacaoTipoRelativoAreaEsgoto);
	//
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a unidade destino informada Não possa receber registros de
	 * atendimento (UNID_ICTRAMITE=2 na tabela UNIDADE_ORGANIZACIONAL com
	 * UNID_ID=Id da unidade destino informada).
	 * [FS0021] - Verificar possibilidade de encaminhamento para a unidade
	 * destino
	 * 
	 * @author Raphael Rossiter
	 * @date 08/08/2006
	 * @param UnidadeOrganizacional
	 * @return void
	 * @throws ControladorException
	 */
	public void verificaPossibilidadeEncaminhamentoUnidadeDestino(UnidadeOrganizacional unidadeDestino){

		try{

			this.getControladorRegistroAtendimento().verificaPossibilidadeEncaminhamentoUnidadeDestino(unidadeDestino);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0399] Inserir Tipo de Solicitação com EspecificAções
	 * Verifica se o serviço tipo tem como srevião automatico geração
	 * automática.
	 * [SF0003] é Validar Tipo de serviço
	 * 
	 * @author Sávio Luiz
	 * @date 08/08/2006
	 * @param idServicoTipo
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public void verificarServicoTipoReferencia(Integer idServicoTipo){

		try{

			this.getControladorRegistroAtendimento().verificarServicoTipoReferencia(idServicoTipo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0399] Inserir Tipo de Solicitação com EspecificAções
	 * Verifica se na coleção existe algum ordem de execução .
	 * [SF0004] é Validar valor ordem execução 1ª parte
	 * 
	 * @author Sávio Luiz
	 * @date 08/08/2006
	 * @param colecaoEspecificacaoServicoTipo
	 *            ,ordemExecucao
	 * @throws ErroRepositorioException
	 */
	public void verificarExistenciaOrdemExecucao(Collection colecaoEspecificacaoServicoTipo, Short ordemExecucao){

		try{

			this.getControladorRegistroAtendimento().verificarExistenciaOrdemExecucao(colecaoEspecificacaoServicoTipo, ordemExecucao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0399] Inserir Tipo de Solicitação com Especificações
	 * Verifica se na coleção existe algum ordem de execução fora da
	 * ordem(1,2,3,4,5,6).Ex.:Não exista numero 2.
	 * [SF0004] é Validar valor ordem execução 2ª parte
	 * 
	 * @author Sávio Luiz
	 * @date 08/08/2006
	 * @param colecaoEspecificacaoServicoTipo
	 * @throws ErroRepositorioException
	 */
	public void verificarOrdemExecucaoForaOrdem(Collection colecaoEspecificacaoServicoTipo){

		try{

			this.getControladorRegistroAtendimento().verificarOrdemExecucaoForaOrdem(colecaoEspecificacaoServicoTipo);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0420] Obter Descrição da situação da RA
	 * Este caso de uso permite obter a descrição de um registro de atendimento
	 * 
	 * @author Ana Maria
	 * @date 04/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public ObterDescricaoSituacaoRAHelper obterDescricaoSituacaoRA(Integer idRa){

		try{
			return this.getControladorRegistroAtendimento().obterDescricaoSituacaoRA(idRa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0418] Obter Unidade Atual do RA
	 * Este caso de uso permite obter a unidade atual de um registro de
	 * atendimento
	 * 
	 * @author Ana Maria
	 * @date 03/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public UnidadeOrganizacional obterUnidadeAtualRA(Integer idRa){

		try{
			return this.getControladorRegistroAtendimento().obterUnidadeAtualRA(idRa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso exista registro de atendimento pendente para o imóvel com a mesma
	 * especificação (existe ocorrência na tabela REGISTRO_ATENDIMENTO com
	 * IMOV_ID=matrícula do imóvel e STEP_ID=Id da Especificação selecionada e
	 * RGAT_CDSITUACAO=1).
	 * [FS0020] - Verificar existência de registro de atendimento para o imóvel
	 * com a mesma especificação
	 * 
	 * @author Raphael Rossiter
	 * @date 31/07/2006
	 * @param idImovel
	 *            ,
	 *            idSolicitacaoTipoEspecificacao
	 * @return void
	 * @throws ControladorException
	 */
	public void verificarExistenciaRAImovelMesmaEspecificacao(Integer idImovel, Integer idSolicitacaoTipoEspecificacao){

		try{
			this.getControladorRegistroAtendimento()
							.verificarExistenciaRAImovelMesmaEspecificacao(idImovel, idSolicitacaoTipoEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0424] Consultar Registro Atendimento
	 * Retorno o Tramite mais atual a partir
	 * 
	 * @author Rafael Pinto
	 * @date 10/08/2006
	 * @param idRA
	 * @return Tramite
	 * @throws ErroRepositorioException
	 */
	public Tramite recuperarTramiteMaisAtualPorRA(Integer idRA){

		try{
			return this.getControladorRegistroAtendimento().recuperarTramiteMaisAtualPorRA(idRA);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0433] Obter Registro de Atendimento Associado
	 * Este caso de uso permite obter o registro de atendimento associado a
	 * outro
	 * 
	 * @author Ana Maria
	 * @date 08/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public ObterRAAssociadoHelper obterRAAssociado(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterRAAssociado(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0422] Obter endereço da ocorrência do RA
	 * Este caso de uso permite obter o endereço da ocorrência de um registro de
	 * atendimento
	 * 
	 * @author Ana Maria
	 * @date 07/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public String obterEnderecoOcorrenciaRA(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterEnderecoOcorrenciaRA(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0423] Obter endereço do Solicitante do RA
	 * Este caso de uso permite obter o endereço do solicitante de um registro
	 * de atendimento
	 * 
	 * @author Ana Maria
	 * @date 07/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public String obterEnderecoSolicitanteRA(Integer idRegistroAtendimentoSolicitante){

		try{
			return this.getControladorRegistroAtendimento().obterEnderecoSolicitanteRA(idRegistroAtendimentoSolicitante);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0421] Obter Unidade de Atendimento do RA
	 * Este caso de uso permite obter a unidade de atendimento de um registro de
	 * atendimento
	 * 
	 * @author Ana Maria
	 * @date 04/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public UnidadeOrganizacional obterUnidadeAtendimentoRA(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterUnidadeAtendimentoRA(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0434] Obter Unidade de Encerramento do RA
	 * Este caso de uso permite obter a unidade de encerramento de um registro
	 * de atendimento
	 * 
	 * @author Ana Maria
	 * @date 07/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public UnidadeOrganizacional obterUnidadeEncerramentoRA(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterUnidadeEncerramentoRA(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0425] - Reiterar Registro de Atendimento
	 * 
	 * @author lms
	 * @date 10/08/2006
	 * @param raNovo
	 *            TODO
	 */
	public Integer reiterarRegistroAtendimento(RegistroAtendimento registroAtendimento, Usuario usuario, RegistroAtendimento raNovo)
					throws FachadaException{

		try{
			return this.getControladorRegistroAtendimento().reiterarRegistroAtendimento(registroAtendimento, usuario, raNovo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0020] é Verifica Situação do imóvel e Especificação
	 * 
	 * @author Raphael Rossiter
	 * @date 11/08/2006
	 * @param idSolicitacaoTipoEspecificacao
	 * @return void
	 * @throws ControladorException
	 */
	public void verificarSituacaoImovelEspecificacao(Imovel imovel, Integer idSolicitacaoTipoEspecificacao){

		try{

			this.getControladorRegistroAtendimento().verificarSituacaoImovelEspecificacao(imovel, idSolicitacaoTipoEspecificacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0449] Inserir Prioridade do Tipo de serviço
	 * Permite a Inclusão de uma prioridade do tipo de serviço.
	 * 
	 * @author Rômulo Aurélio.
	 * @date 11/08/2006
	 * @param servicoTipoPrioridade
	 */

	public Integer inserirPrioridadeTipoServico(ServicoTipoPrioridade servicoTipoPrioridade, Usuario usuarioLogado){

		try{

			return this.getControladorAtendimentoPublico().inserirPrioridadeTipoServico(servicoTipoPrioridade, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * Verificar existencia ordem de serviço para o registro atendimento
	 * pesquisado
	 * 
	 * @author Sávio Luiz
	 * @date 11/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public Integer verificarOrdemServicoParaRA(Integer idRegistroAtendimento){

		try{

			return this.getControladorRegistroAtendimento().verificarOrdemServicoParaRA(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * Pesquisar os parametros para atualizar o registro atendimento escolhido
	 * pelo usuário
	 * 
	 * @author Sávio Luiz
	 * @date 11/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public Object[] pesquisarParmsRegistroAtendimento(Integer idRegistroAtendimento){

		try{

			return this.getControladorRegistroAtendimento().pesquisarParmsRegistroAtendimento(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0446] Consultar trâmites
	 * Este caso de uso permite obter os trâmites de um registro de atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 11/08/2006
	 * @param idRegistroAtendimento
	 * @return Collection<Tramite>
	 * @throws ControladorException
	 */
	public Collection<Tramite> obterTramitesRA(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterTramitesRA(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0447] Consultar RA Solicitantes
	 * Retorna a Coleção de registro de atendimento solicitantes
	 * 
	 * @author Rafael Pinto
	 * @date 14/08/2006
	 * @param idRA
	 * @return Collection<RegistroAtendimentoSolicitante>
	 * @throws ControladorException
	 */
	public Collection<RegistroAtendimentoSolicitante> obterRASolicitante(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterRASolicitante(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0454] Obter Descrição da situação da OS
	 * Este caso de uso permite obter a descrição de uma ordem de serviço
	 * 
	 * @author Leonardo Regis
	 * @date 11/08/2006
	 * @param idOrdemServico
	 */
	public ObterDescricaoSituacaoOSHelper obterDescricaoSituacaoOS(Integer idOS){

		try{
			return this.getControladorOrdemServico().obterDescricaoSituacaoOS(idOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0431] Consultar Ordens de serviço do Registro Atendimento
	 * Retorna a Coleção de OS's do registro de atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 11/08/2006
	 * @param idRA
	 * @return Collection<OrdemServico>
	 * @throws ControladorException
	 */
	public Collection<OrdemServico> obterOSRA(Integer idRA){

		try{
			return this.getControladorRegistroAtendimento().obterOSRA(idRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0419] Obter Indicador de Autorização para Manutenção do RA
	 * Este caso de uso Obtém o indicador de autorização para manutenção do RA,
	 * ou seja, se o usuário tem autorização para efetuar a manutenção do RA
	 * 
	 * @author Ana Maria
	 * @date 08/08/2006
	 * @param idUnidadeOrganizacional
	 * @param idUusuario
	 * @throws ControladorException
	 */
	public Short obterIndicadorAutorizacaoManutencaoRA(Integer idUnidadeOrganizacional, Integer idUsuario){

		try{
			return this.getControladorRegistroAtendimento().obterIndicadorAutorizacaoManutencaoRA(idUnidadeOrganizacional, idUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * [FS0012] - Verificar possibilidade de atualização do registro de
	 * atendimento
	 * 
	 * @author Sávio Luiz
	 * @date 14/08/2006
	 * @param idRA
	 *            ,idUsuarioLogado
	 * @throws ControladorException
	 */

	public UnidadeOrganizacional verificarPossibilidadeAtualizacaoRA(Integer idRA, Integer idUsuarioLogado){

		try{
			return this.getControladorRegistroAtendimento().verificarPossibilidadeAtualizacaoRA(idRA, idUsuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * [SB0024] - Verificar registro de Atendimento Sem Identificação do Local
	 * de ocorrência
	 * 
	 * @author Sávio Luiz
	 * @date 15/08/2006
	 * @param idRA
	 *            ,idImovel
	 * @throws ControladorException
	 */

	public int verificarRASemIdentificacaoLO(Integer idImovel, Integer idRA){

		try{
			return this.getControladorRegistroAtendimento().verificarRASemIdentificacaoLO(idImovel, idRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * O método abaixo realiza uma pesquisa em imovel e retorna os campos
	 * necessários para a criação da inscrição do imóvel para exibição.
	 * aki é montada a inscrição
	 */
	public String pesquisarInscricaoImovel(Integer idImovel, boolean inscricaoFormatada){

		try{
			return this.getControladorImovel().pesquisarInscricaoImovel(idImovel, inscricaoFormatada);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * REGISTRO_ATENDIMENTO com IMOV_ID=nulo e RGAT_CDSITUACAO=1 e
	 * LGBR_ID=LGBR_ID do endereço da ocorrência e LGCP_ID=LGCP_ID do endereço
	 * da ocorrência e STEP_ID=Id da Especificação selecionada e STEP_ID=STEP_ID
	 * da tabela SOLICITACAO_TIPO_ESPECIFICACAO com SOTP_ID=SOTP_ID da tabela
	 * SOLICITACAO_TIPO para SOTP_ICFALTAAGUA com o valor correspondente a dois
	 * [SB0008] é Verifica existência de Registro de Atendimento Pendente para o
	 * Local da ocorrência
	 * 
	 * @author Raphael Rossiter
	 * @date 15/08/2006
	 * @param idSolicitacaoTipoEspecificacao
	 *            ,
	 *            idLogradouroBairro, idLogradouroCep
	 * @return RegistroAtendimento
	 * @throws ErroRepositorioException
	 */
	public RegistroAtendimento verificaExistenciaRAPendenteLocalOcorrencia(Integer idSolicitacaoTipoEspecificacao,
					Integer idLogradouroBairro, Integer idLogradouroCep){

		try{
			return this.getControladorRegistroAtendimento().verificaExistenciaRAPendenteLocalOcorrencia(idSolicitacaoTipoEspecificacao,
							idLogradouroBairro, idLogradouroCep);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * REGISTRO_ATENDIMENTO com IMOV_ID=nulo e RGAT_CDSITUACAO=1 e
	 * LGBR_ID=LGBR_ID do endereço da ocorrência e LGCP_ID=LGCP_ID do endereço
	 * da ocorrência e STEP_ID=Id da Especificação selecionada e STEP_ID=STEP_ID
	 * da tabela SOLICITACAO_TIPO_ESPECIFICACAO com SOTP_ID=SOTP_ID da tabela
	 * SOLICITACAO_TIPO para SOTP_ICFALTAAGUA com o valor correspondente a dois
	 * 
	 * @author Raphael Rossiter
	 * @date 16/08/2006
	 * @param idSolicitacaoTipoEspecificacao
	 *            ,
	 *            idLogradouroCep, idLogradouroBairro
	 * @return RegistroAtendimentoPendenteLocalOcorrenciaHelper
	 * @throws ErroRepositorioException
	 */
	public RegistroAtendimentoPendenteLocalOcorrenciaHelper pesquisarRAPendenteLocalOcorrencia(Integer idSolicitacaoTipoEspecificacao,
					Integer idLogradouroCep, Integer idLogradouroBairro){

		try{
			return this.getControladorRegistroAtendimento().pesquisarRAPendenteLocalOcorrencia(idSolicitacaoTipoEspecificacao,
							idLogradouroCep, idLogradouroBairro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0441] Consultar Dados da Ordem de serviço
	 * 
	 * @author Leonardo Regis
	 * @date 15/08/2006
	 * @param idOrdemServico
	 * @return OrdemServico
	 */
	public OrdemServico consultarDadosOrdemServico(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().consultarDadosOrdemServico(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar ordem de serviço.
	 * 
	 * @author Genival Barbosa
	 * @date 30/09/2014
	 * @return Ordem Servico
	 */
	public OrdemServico pesquisarOrdemServicoPrincipal(Integer idOrdemServico) throws ControladorException{

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoPrincipal(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0450] Pesquisar Ordem de Servico
	 * [SB001] Selecionar Ordem de Servico por Situação [SB002] Selecionar Ordem
	 * de Servico por Situação da Programação [SB003] Selecionar Ordem de
	 * Servico por Matricula do Imovel [SB004] Selecionar Ordem de Servico por
	 * Codigo do Cliente [SB005] Selecionar Ordem de Servico por Unidade
	 * Superior [SB006] Selecionar Ordem de Servico por Município [SB007]
	 * Selecionar Ordem de Servico por Bairro [SB008] Selecionar Ordem de
	 * Servico por Bairro Logradouro
	 * 
	 * @author Rafael Pinto
	 * @date 18/08/2006
	 * @param PesquisarOrdemServicoHelper
	 * @return Collection<OrdemServico>
	 * @throws ControladorException
	 */
	public Collection<OrdemServico> pesquisarOrdemServico(PesquisarOrdemServicoHelper filtro){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServico(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter o objeto de registro atendimento para recuperar endereço Autor:
	 * Sávio Luiz
	 */

	public RegistroAtendimento pesquisarRegistroAtendimentoEndereco(Integer idRegistroAtendimento){

		try{
			return this.getControladorEndereco().pesquisarRegistroAtendimentoEndereco(idRegistroAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public RegistroAtendimento pesquisarRegistroAtendimento(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().pesquisarRegistroAtendimento(idRegistroAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0452] Obter Dados do Registro de Atendimento
	 * Este caso de uso permite obter dados de um registro de atendimento
	 * 
	 * @author Ana Maria
	 * @date 14/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public ObterDadosRegistroAtendimentoHelper obterDadosRegistroAtendimento(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().obterDadosRegistroAtendimento(idRegistroAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * [SB0017] - Verificar registro de Atendimento de falta de Água
	 * 
	 * @author Sávio Luiz
	 * @date 16/08/2006
	 * @param idRA
	 * @throws ControladorException
	 */
	public VerificarRAFaltaAguaHelper verificarRegistroAtendimentoFaltaAgua(Integer idRegistroAtendimento, Date dataAtendimento,
					Integer idBairroArea, Integer idBairro, Integer idEspecificacao, Short indFaltaAgua, Integer indMatricula,
					String continua){

		try{
			return this.getControladorRegistroAtendimento().verificarRegistroAtendimentoFaltaAgua(idRegistroAtendimento, dataAtendimento,
							idBairroArea, idBairro, idEspecificacao, indFaltaAgua, indMatricula, continua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0427] Tramitar Registro de Atendimento
	 * Validar Tramitação
	 * [FS0001] Verificar se o RA está cancelado ou bloqueado. [FS0002]
	 * Verificar situações das OS(ordem de servirão) associadas ao RA [FS0003]
	 * Verificar se o tipo de solicitação Tarifa Social [FS0008] Validar Unidade
	 * de Destino
	 * 
	 * @author Leonardo Regis
	 * @date 18/08/2006
	 * @param tramite
	 */
	public void validarTramitacao(Tramite tramite, Usuario usuario){

		try{
			this.getControladorRegistroAtendimento().validarTramitacao(tramite, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0427] Tramitar Registro de Atendimento
	 * Tramitar
	 * 
	 * @author Leonardo Regis
	 * @date 18/08/2006
	 * @param tramite
	 * @param dataConcorrente
	 */
	public void tramitar(Tramite tramite, Date dataConcorrente){

		try{
			this.getControladorRegistroAtendimento().tramitar(tramite, dataConcorrente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * [SB0019] - Exibe Registros de Atendimentos de falta de Água no imóvel
	 * 
	 * @author Sávio Luiz
	 * @date 21/08/2006
	 * @param idRA
	 * @throws ControladorException
	 */
	public RAFaltaAguaPendenteHelper carregarObjetoRAFaltaAguaPendente(Integer idRegistroAtendimento, Integer idBairroArea,
					Integer idEspecificacao){

		try{
			return this.getControladorRegistroAtendimento().carregarObjetoRAFaltaAguaPendente(idRegistroAtendimento, idBairroArea,
							idEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a matrícula do imóvel da Aba Dados do Local da ocorrência tenha sido
	 * informada e o Cliente informado Não seja um cliente do imóvel (inexiste
	 * ocorrência na tabela CLIENTE_IMOVEL com CLIE_ID=Id do cliente e
	 * IMOV_ID=matrícula do imóvel e CLIM_DTRELACAOFIM com o valor nulo).
	 * [FS0027] é Verificar informação do imóvel
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2006
	 * @param idCliente
	 *            ,
	 *            idImovel
	 * @return Cliente
	 * @throws ErroRepositorioException
	 */
	public Cliente verificarInformacaoImovel(Integer idCliente, Integer idImovel, boolean levantarException){

		try{
			return this.getControladorRegistroAtendimento().verificarInformacaoImovel(idCliente, idImovel, levantarException);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso esteja adicionando um novo solicitante e o cliente já seja um
	 * solicitante do registro de atendimento (existe ocorrência na tabela
	 * REGISTRO_ATENDIMENTO_SOLICITANTE com RGAT_ID=RGAT_ID do registro de
	 * atendimento selecionado e CLIE_ID=Id do Cliente informado).
	 * [FS0012] é Verificar existência do cliente solicitante
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2006
	 * @param idRegistroAtendimento
	 *            ,
	 *            idCliente
	 * @throws ErroRepositorioException
	 */
	public void verificarExistenciaClienteSolicitante(Integer idRegistroAtendimento, Integer idCliente){

		try{
			this.getControladorRegistroAtendimento().verificarExistenciaClienteSolicitante(idRegistroAtendimento, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2006
	 * @param idCliente
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarEnderecosClienteAbreviado(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarEnderecosClienteAbreviado(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa todos os telefones de um cliente
	 * 
	 * @author Raphael Rossiter
	 * @date 23/08/2006
	 * @param idCliente
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarClienteFone(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarClienteFone(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso esteja adicionando um novo solicitante e a unidade já seja um
	 * solicitante do registro de atendimento (existe ocorrência na tabela
	 * REGISTRO_ATENDIMENTO_SOLICITANTE com RGAT_ID=RGAT_ID do registro de
	 * atendimento selecionado e UNID_ID=Id da Unidade informada).
	 * [FS0026] é Verificar existência da unidade solicitante
	 * 
	 * @author Raphael Rossiter
	 * @date 23/08/2006
	 * @param idRegistroAtendimento
	 *            ,
	 *            idUnidade
	 * @throws ControladorException
	 */
	public void verificarExistenciaUnidadeSolicitante(Integer idRegistroAtendimento, Integer idUnidade){

		try{
			this.getControladorRegistroAtendimento().verificarExistenciaUnidadeSolicitante(idRegistroAtendimento, idUnidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento e [UC0408] Atualizar Registro de
	 * Atendimento
	 * [FS0040] é Verificar preenchimento campos. 2ª ABA
	 * 
	 * @author Sávio Luiz
	 * @date 24/08/2006
	 * @throws ControladorException
	 */
	public void validarCamposObrigatoriosRA_2ABA(String idImovel, String pontoReferencia, String idMunicipio, String descricaoMunicipio,
					String cdBairro, String descricaoBairro, String idAreaBairro, String idlocalidade, String descricaoLocalidade,
					String cdSetorComercial, String descricaoSetorComercial, String numeroQuadra, String idDivisaoEsgoto, String idUnidade,
					String descricaoUnidade, String idLocalOcorrencia, String idPavimentoRua, String idPavimentoCalcada,
					String descricaoLocalOcorrencia, String imovelObrigatorio, String pavimentoRuaObrigatorio,
					String pavimentoCalcadaObrigatorio, String solicitacaoTipoRelativoFaltaAgua, String solicitacaoTipoRelativoAreaEsgoto,
					String desabilitarMunicipioBairro, String indRuaLocalOcorrencia, String indCalcadaLocalOcorrencia,
					Integer idEspecificacao, Integer idRAAtualizacao, Collection colecaoEndereco, String idCliente, String idUnidadeDestino){

		try{

			this.getControladorRegistroAtendimento().validarCamposObrigatoriosRA_2ABA(idImovel, pontoReferencia, idMunicipio,
							descricaoMunicipio, cdBairro, descricaoBairro, idAreaBairro, idlocalidade, descricaoLocalidade,
							cdSetorComercial, descricaoSetorComercial, numeroQuadra, idDivisaoEsgoto, idUnidade, descricaoUnidade,
							idLocalOcorrencia, idPavimentoRua, idPavimentoCalcada, descricaoLocalOcorrencia, imovelObrigatorio,
							pavimentoRuaObrigatorio, pavimentoCalcadaObrigatorio, solicitacaoTipoRelativoFaltaAgua,
							solicitacaoTipoRelativoAreaEsgoto, desabilitarMunicipioBairro, indRuaLocalOcorrencia,
							indCalcadaLocalOcorrencia, idEspecificacao, idRAAtualizacao, colecaoEndereco, idCliente, idUnidadeDestino);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC413]- Pesquisar Tipo de serviço
	 * 
	 * @author Leandro Cavalcanti
	 * @date 23/08/2006
	 * @param idTipoServico
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarServicoTipo(Integer idTipoServico){

		try{
			return this.getControladorOrdemServico().pesquisarServicoTipo(idTipoServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0413] Pesquisar Tipo de serviço
	 * 
	 * @author Leandro Cavalcanti
	 * @date 17/08/2006
	 * @param
	 * @return Collection
	 */

	public Collection<ServicoTipo> filtrarST(ServicoTipo servicoTipo, Collection colecaoAtividades, Collection colecaoMaterial,
					String valorServicoInicial, String valorServicoFinal, String tempoMedioExecucaoInicial, String tempoMedioExecucaoFinal,
					String tipoPesquisa, String tipoPesquisaAbreviada, Integer numeroPaginasPesquisa, Integer idUnidadeOrganizacionalDestino){

		try{
			return this.getControladorOrdemServico().filtrarST(servicoTipo, colecaoAtividades, colecaoMaterial, valorServicoInicial,
							valorServicoFinal, tempoMedioExecucaoInicial, tempoMedioExecucaoFinal, tipoPesquisa, tipoPesquisaAbreviada,
							numeroPaginasPesquisa, idUnidadeOrganizacionalDestino);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0413] Pesquisar Tipo de serviço
	 * 
	 * @author Flávio
	 * @date 17/08/2006
	 * @param
	 * @return Collection
	 */

	public Integer filtrarSTCount(ServicoTipo servicoTipo, Collection colecaoAtividades, Collection colecaoMaterial,
					String valorServicoInicial, String valorServicoFinal, String tempoMedioExecucaoInicial, String tempoMedioExecucaoFinal,
					String tipoPesquisa, String tipoPesquisaAbreviada, Integer idUnidadeOrganizacionalDestino){

		try{
			return this.getControladorOrdemServico().filtrarSTCount(servicoTipo, colecaoAtividades, colecaoMaterial, valorServicoInicial,
							valorServicoFinal, tempoMedioExecucaoInicial, tempoMedioExecucaoFinal, tipoPesquisa, tipoPesquisaAbreviada,
							idUnidadeOrganizacionalDestino);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0413] Pesquisar Tipo de serviço
	 * 
	 * @author Leandro Cavalcanti
	 * @date 17/08/2006
	 * @param
	 * @return Collection
	 */
	public Collection recuperarAtividadeServicoTipoConsulta(Integer idServicoTipoAtividade){

		try{
			return this.getControladorOrdemServico().recuperarAtividadeServicoTipoConsulta(idServicoTipoAtividade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0413] Pesquisar Tipo de serviço
	 * 
	 * @author Leandro Cavalcanti
	 * @date 17/08/2006
	 * @param
	 * @return Collection
	 */
	public Collection recuperarMaterialServicoTipoConsulta(Integer idServicoTipoMaterial){

		try{
			return this.getControladorOrdemServico().recuperarMaterialServicoTipoConsulta(idServicoTipoMaterial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0367] Atualizar Dados da Ligação Agua
	 * Consulta a ordem de servico pelo id
	 * 
	 * @author Rafael Pinto
	 * @date 24/08/2006
	 * @param idOS
	 * @return OrdemServico
	 * @throws ControladorException
	 */
	public OrdemServico recuperaOSPorId(Integer idOS){

		try{
			return this.getControladorOrdemServico().recuperaOSPorId(idOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 11/08/2006
	 */
	public RegistroAtendimento validarRegistroAtendimento(Integer idRA) throws FachadaException{

		try{
			return this.getControladorRegistroAtendimento().validarRegistroAtendimento(idRA);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 17/08/2006
	 */
	public ServicoTipo pesquisarSevicoTipo(Integer id) throws FachadaException{

		try{
			return this.getControladorOrdemServico().pesquisarSevicoTipo(id);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 17/08/2006
	 */
	public OrdemServico pesquisarOrdemServico(Integer id) throws FachadaException{

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServico(id);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 18/08/2006
	 */
	public void validarOrdemServico(OrdemServico ordemServico) throws FachadaException{

		try{
			this.getControladorOrdemServico().validarOrdemServico(ordemServico);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 18/08/2006
	 * @author Saulo Lima
	 * @date 27/06/2012
	 */
	public Integer gerarOrdemServico(OrdemServico ordemServico, Usuario usuario,
					Map<Integer, ServicoAssociadoAutorizacaoHelper> mapServicosAutorizados, Integer idLocalidade, Integer idSetorComercial,
					Integer idBairro, Integer idUnidadeOrigem, Integer idUnidadeDestino, String parecerUnidadeDestino,
					String idOSPrincipal, Short qtdPrestacaoGuiaPagamento) throws FachadaException{

		try{
			return this.getControladorOrdemServico().gerarOrdemServico(ordemServico, usuario, mapServicosAutorizados, idLocalidade,
							idSetorComercial, idBairro, idUnidadeOrigem, idUnidadeDestino, parecerUnidadeDestino, idOSPrincipal, false,
							qtdPrestacaoGuiaPagamento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0467] - Atualizar Ordem de serviço
	 * 
	 * @author lms
	 * @date 18/09/2006
	 */
	public void atualizarOrdemServico(OrdemServico ordemServico, Usuario usuario) throws FachadaException{

		try{
			this.getControladorOrdemServico().atualizarOrdemServico(ordemServico, usuario);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades do
	 * corte ligação de agua
	 * 
	 * @author Rafael Pinto
	 * @date 25/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirCorteLigacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorLigacaoAgua().validarExibirCorteLigacaoAgua(ordemServico, veioEncerrarOS);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades
	 * do corte ligação de agua com retirada de hidrometro
	 * 
	 * @author Eduardo Oliveira
	 * @date 22/04/2014
	 * @param OrdemServico
	 */
	public void validarExibirCorteLigacaoAguaComRetiradaHidrometro(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorLigacaoAgua().validarExibirCorteLigacaoAguaComRetiradaHidrometro(ordemServico, veioEncerrarOS);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades do
	 * supressao ligação de agua
	 * 
	 * @author Rafael Pinto
	 * @date 28/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirSupressaoLigacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirSupressaoLigacaoAgua(ordemServico, veioEncerrarOS);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [FS0030] é Verificar preenchimento dos dados de identificação do
	 * solicitante
	 * 
	 * @author Raphael Rossiter
	 * @date 24/08/2006
	 * @throws ControladorException
	 */
	public void verificaDadosSolicitante(Integer idCliente, Integer idUnidadeSolicitante, Integer idFuncionario, String nomeSolicitante,
					Collection colecaoEndereco, Collection colecaoFone, Short indicadorClienteEspecificacao, Integer idImovel,
					Integer idRegistroAtendimento, Integer idEspecificacao){

		try{
			this.getControladorRegistroAtendimento().verificaDadosSolicitante(idCliente, idUnidadeSolicitante, idFuncionario,
							nomeSolicitante, colecaoEndereco, colecaoFone, indicadorClienteEspecificacao, idImovel, idRegistroAtendimento,
							idEspecificacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0027] é Inclui Solicitante do Registro de Atendimento
	 * (REGISTRO_ATENDIMENTO_SOLICITANTE)
	 * 
	 * @author Raphael Rossiter
	 * @date 24/08/2006
	 * @throws ControladorException
	 */
	public void inserirRegistroAtendimentoSolicitante(Integer idRegistroAtendimento, Integer idCliente, Collection colecaoEndereco,
					String pontoReferencia, String nomeSolicitante, boolean novoSolicitante, Integer idUnidadeSolicitante,
					Integer idFuncionario, Collection colecaoFone, String tipoCliente, String numeroCpf, String numeroRg,
					String orgaoExpedidorRg, String unidadeFederacaoRG, String numeroCnpj){

		try{
			this.getControladorRegistroAtendimento().inserirRegistroAtendimentoSolicitante(idRegistroAtendimento, idCliente,
							colecaoEndereco, pontoReferencia, nomeSolicitante, novoSolicitante, idUnidadeSolicitante, idFuncionario,
							colecaoFone, tipoCliente, numeroCpf, numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * passa os parametros do registro atendimento solicitante e a coleção de
	 * fones do solicitante e retorna um objeto de Registro Atendimento
	 * Solicitante
	 * 
	 * @author Sávio Luiz
	 * @date 02/09/2006
	 * @throws ControladorException
	 */
	public RegistroAtendimentoSolicitante inserirDadosNoRegistroAtendimentoSolicitante(Integer idRegistroAtendimento, Integer idCliente,
					Collection colecaoEndereco, String pontoReferencia, String nomeSolicitante, Integer idUnidadeSolicitante,
					Integer idFuncionario, Collection colecaoFone, String fonePadrao, String tipoCliente, String numeroCpf,
					String numeroRg, String orgaoExpedidorRg, String unidadeFederacaoRG, String numeroCnpj){

		try{
			return this.getControladorRegistroAtendimento().inserirDadosNoRegistroAtendimentoSolicitante(idRegistroAtendimento, idCliente,
							colecaoEndereco, pontoReferencia, nomeSolicitante, idUnidadeSolicitante, idFuncionario, colecaoFone,
							fonePadrao, tipoCliente, numeroCpf, numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0017] - Verificar registro de Atendimento de falta de Água
	 * 
	 * @author Raphael Rossiter
	 * @date 16/08/2006
	 * @throws ControladorException
	 */
	public VerificarRAFaltaAguaHelper verificarRegistroAtendimentoFaltaAguaInserir(Date dataAtendimento, Integer idBairroArea,
					Integer idBairro, Integer idEspecificacao, Short indFaltaAgua, Integer indMatricula, String continua){

		try{
			return this.getControladorRegistroAtendimento().verificarRegistroAtendimentoFaltaAguaInserir(dataAtendimento, idBairroArea,
							idBairro, idEspecificacao, indFaltaAgua, indMatricula, continua);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] Encerrar Registro de Atendimento
	 * Validar Pré-Encerramento
	 * [FS0001] Verificar possibilidade de encerramento do registro de
	 * atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 25/08/2006
	 * @param registroAtendimento
	 * @param usuarioLogado
	 * @param indicadorAutorizacaoManutencaoRA
	 */
	public void validarPreEncerramentoRA(RegistroAtendimento registroAtendimento, Usuario usuarioLogado,
					Short indicadorAutorizacaoManutencaoRA){

		try{
			this.getControladorRegistroAtendimento().validarPreEncerramentoRA(registroAtendimento, usuarioLogado,
							indicadorAutorizacaoManutencaoRA);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] Encerrar Registro de Atendimento
	 * Validar Pré-Encerramento
	 * [FS0001] Verificar possibilidade de encerramento do registro de
	 * atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 25/08/2006
	 * @param registroAtendimento
	 * @param usuarioLogado
	 * @param indicadorAutorizacaoManutencaoRA
	 */
	public void validarPreEncerramentoRASemTarifaSocial(RegistroAtendimento registroAtendimento, Usuario usuarioLogado,
					Short indicadorAutorizacaoManutencaoRA){

		try{
			this.getControladorRegistroAtendimento().validarPreEncerramentoRASemTarifaSocial(registroAtendimento, usuarioLogado,
							indicadorAutorizacaoManutencaoRA);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] - Encerrar Registro de Atendimento
	 * [FS003] Validar RA de referência
	 * 
	 * @author Leonardo Regis
	 * @date 26/08/2006
	 */
	public RegistroAtendimento validarRAReferencia(Integer idRA, Integer idRAReferencia){

		try{
			return this.getControladorRegistroAtendimento().validarRAReferencia(idRA, idRAReferencia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] Encerrar Registro de Atendimento
	 * Validar Encerramento
	 * [FS0004] Verificar data do encerramento [FS0005] Verificar hora do
	 * encerrameto
	 * 
	 * @author Leonardo Regis
	 * @date 26/08/2006
	 * @param registroAtendimento
	 * @throws ControladorException
	 */
	public void validarEncerramentoRA(RegistroAtendimento registroAtendimento){

		try{
			this.getControladorRegistroAtendimento().validarEncerramentoRA(registroAtendimento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] Encerrar Registro de Atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 26/08/2006
	 * @param registroAtendimento
	 * @param registroAtendimentoUnidade
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void encerrarRegistroAtendimento(RegistroAtendimento registroAtendimento, RegistroAtendimentoUnidade registroAtendimentoUnidade,
					Usuario usuarioLogado){

		try{
			this.getControladorRegistroAtendimento().encerrarRegistroAtendimento(registroAtendimento, registroAtendimentoUnidade,
							usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0435] Encerrar Registro de Atendimento
	 * 
	 * @author Leonardo Regis
	 * @date 26/08/2006
	 * @param registroAtendimento
	 * @param registroAtendimentoUnidade
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void encerrarRegistroAtendimento(Collection<RegistroAtendimento> colecaoRegistroAtendimento,
					Collection<RegistroAtendimentoUnidade> colecaoRegistroAtendimentoUnidade, Usuario usuarioLogado){

		try{
			this.getControladorRegistroAtendimento().encerrarRegistroAtendimento(colecaoRegistroAtendimento,
							colecaoRegistroAtendimentoUnidade, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0028] é Inclui Registro de Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @date 28/08/2006
	 * @param sequenceRA
	 *            TODO
	 * @throws ControladorException
	 */
	public Integer[] inserirRegistroAtendimento(short indicadorAtendimentoOnLine, String dataAtendimento, String horaAtendimento,
					String tempoEsperaInicial, String tempoEsperaFinal, Integer idMeioSolicitacao, Integer senhaAtendimento,
					Integer idSolicitacaoTipoEspecificacao, String dataPrevista, String observacao, Integer idImovel,
					String descricaoLocalOcorrencia, Integer idSolicitacaoTipo, Collection colecaoEndereco,
					String pontoReferenciaLocalOcorrencia, Integer idBairroArea, Integer idLocalidade, Integer idSetorComercial,
					Integer idQuadra, Integer idDivisaoEsgoto, Integer idLocalOcorrencia, Integer idPavimentoRua,
					Integer idPavimentoCalcada, Integer idUnidadeAtendimento, Integer idUsuarioLogado, Integer idCliente,
					String pontoReferenciaSolicitante, String nomeSolicitante, boolean novoSolicitante, Integer idUnidadeSolicitante,
					Integer idFuncionario, Collection colecaoFone, Collection colecaoEnderecoSolicitante, Integer idUnidadeDestino,
					String parecerUnidadeDestino, Collection<Integer> colecaoIdServicoTipo, String numeroRAManual, Integer idRAJAGerado,
					BigDecimal coordenadaNorte, BigDecimal coordenadaLeste, Integer sequenceRA, Integer idRaReiterada, String tipoCliente,
					String numeroCpf, String numeroRg, String orgaoExpedidorRg, String unidadeFederacaoRG, String numeroCnpj,
					Collection<Conta> colecaoContas, String identificadores, ContaMotivoRevisao contaMotivoRevisao,
					String indicadorProcessoAdmJud, String numeroProcessoAgencia, Short quantidadePrestacoesGuiaPagamento){

		try{
			return this.getControladorRegistroAtendimento().inserirRegistroAtendimento(indicadorAtendimentoOnLine, dataAtendimento,
							horaAtendimento, tempoEsperaInicial, tempoEsperaFinal, idMeioSolicitacao, senhaAtendimento,
							idSolicitacaoTipoEspecificacao, dataPrevista, observacao, idImovel, descricaoLocalOcorrencia,
							idSolicitacaoTipo, colecaoEndereco, pontoReferenciaLocalOcorrencia, idBairroArea, idLocalidade,
							idSetorComercial, idQuadra, idDivisaoEsgoto, idLocalOcorrencia, idPavimentoRua, idPavimentoCalcada,
							idUnidadeAtendimento, idUsuarioLogado, idCliente, pontoReferenciaSolicitante, nomeSolicitante, novoSolicitante,
							idUnidadeSolicitante, idFuncionario, colecaoFone, colecaoEnderecoSolicitante, idUnidadeDestino,
							parecerUnidadeDestino, colecaoIdServicoTipo, numeroRAManual, idRAJAGerado, coordenadaNorte, coordenadaLeste,
							sequenceRA, idRaReiterada, tipoCliente, numeroCpf, numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj,
							colecaoContas, identificadores, contaMotivoRevisao, indicadorProcessoAdmJud, numeroProcessoAgencia,
							quantidadePrestacoesGuiaPagamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0440] Consultar Programação de Abastecimento
	 * Caso exista Programação de Abastecimento de uma determinada área de
	 * Bairro
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/08/2006
	 * @param idMunicipio
	 * @param idBairro
	 * @param areaBairro
	 * @param mesAnoReferencia
	 * @return Collection<AbastecimentoProgramacao>
	 * @throws ControladorException
	 * @throws ControladorException
	 */

	public Collection consultarProgramacaoAbastecimento(String idMunicipio, String idBairro, String areaBairro, String mesAnoReferencia){

		try{
			return this.getControladorRegistroAtendimento().consultarProgramacaoAbastecimento(idMunicipio, idBairro, areaBairro,
							mesAnoReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0440] Consultar Programação de Manutenção
	 * Caso exista Programação de Manutenção de uma determinada área de Bairro
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/08/2006
	 * @param idMunicipio
	 * @param idBairro
	 * @param areaBairro
	 * @param mesAnoReferencia
	 * @return Collection<ManutencaoProgramacao>
	 * @throws ControladorException
	 * @throws ControladorException
	 */
	public Collection consultarProgramacaoManutencao(String idMunicipio, String idBairro, String areaBairro, String mesAnoReferencia){

		try{
			return this.getControladorRegistroAtendimento().consultarProgramacaoManutencao(idMunicipio, idBairro, areaBairro,
							mesAnoReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a Especificação esteja associada a um tipo de serviço (SVTP_ID da
	 * tabela SOLICITACAO_TIPO_ESPECIFICACAO com o valor diferente de nulo).
	 * (automáticA)
	 * [SB0030] é Gerar Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 29/08/2006
	 * @param idSolicitacaoTipoEspecificacao
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean gerarOrdemServicoAutomatica(Integer idSolicitacaoTipoEspecificacao){

		try{
			return this.getControladorRegistroAtendimento().gerarOrdemServicoAutomatica(idSolicitacaoTipoEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a Especificação possa gerar alguma ordem de serviço
	 * (STEP_ICGERACAOORDEMSERVICO da tabela SOLICITACAO_TIPO_ESPECIFICACAO com
	 * o valor correspondente a um). (OPCIONAL) [SB0030] é Gerar Ordem de
	 * serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 29/08/2006
	 * @param idSolicitacaoTipoEspecificacao
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean gerarOrdemServicoOpcional(Integer idSolicitacaoTipoEspecificacao){

		try{
			return this.getControladorRegistroAtendimento().gerarOrdemServicoOpcional(idSolicitacaoTipoEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades do
	 * restabelecimento ligação de agua
	 * 
	 * @author Rafael Pinto
	 * @date 29/07/2006
	 * @param ordemServico
	 *            ,veioEncerrarOS
	 */
	public void validarExibirRestabelecimentoLigacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirRestabelecimentoLigacaoAgua(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades de
	 * religação de Água
	 * 
	 * @author Rafael Pinto
	 * @date 29/07/2006
	 * @param ordemServico
	 *            ,veioEncerrarOS
	 */
	public void validarExibirReligacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirReligacaoAgua(ordemServico, veioEncerrarOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades de
	 * corte adimistrativo de ligação de Água
	 * 
	 * @author Rafael Pinto
	 * @date 29/07/2006
	 * @param ordemServico
	 *            ,veioEncerrarOS
	 */
	public void validarExibirCorteAdministrativoLigacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirCorteAdministrativoLigacaoAgua(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades de
	 * corte adimistrativo de ligação de Água
	 * 
	 * @author Rafael Pinto
	 * @date 29/07/2006
	 * @param ordemServico
	 *            ,veioEncerrarOS
	 */
	public Integer[] atualizarRegistroAtendimento(Integer idRA, short indicadorAtendimentoOnLine, String dataAtendimento,
					String horaAtendimento, String tempoEsperaInicial, String tempoEsperaFinal, Integer idMeioSolicitacao,
					Integer senhaAtendimento, Integer idSolicitacaoTipoEspecificacao, String dataPrevista, String observacao,
					Integer idImovel, String descricaoLocalOcorrencia, Integer idSolicitacaoTipo, Collection colecaoEndereco,
					String pontoReferenciaLocalOcorrencia, Integer idBairroArea, Integer idLocalidade, Integer idSetorComercial,
					Integer idQuadra, Integer idDivisaoEsgoto, Integer idLocalOcorrencia, Integer idPavimentoRua,
					Integer idPavimentoCalcada, Integer idUnidadeAtendimento, Usuario usuarioLogado, Integer imovelObrigatorio,
					Date ultimaAlteracao, Collection colecaoRASolicitante, Collection colecaoRASolicitanteRemovida,
					Collection<Integer> colecaoIdServicoTipo, Integer especificacaoNaBase, Collection<Conta> colecaoContas,
					String identificadores, ContaMotivoRevisao contaMotivoRevisao, String indicadorProcessoAdmJud,
					String numeroProcessoAgencia){

		try{
			return this.getControladorRegistroAtendimento().atualizarRegistroAtendimento(idRA, indicadorAtendimentoOnLine, dataAtendimento,
							horaAtendimento, tempoEsperaInicial, tempoEsperaFinal, idMeioSolicitacao, senhaAtendimento,
							idSolicitacaoTipoEspecificacao, dataPrevista, observacao, idImovel, descricaoLocalOcorrencia,
							idSolicitacaoTipo, colecaoEndereco, pontoReferenciaLocalOcorrencia, idBairroArea, idLocalidade,
							idSetorComercial, idQuadra, idDivisaoEsgoto, idLocalOcorrencia, idPavimentoRua, idPavimentoCalcada,
							idUnidadeAtendimento, usuarioLogado, imovelObrigatorio, ultimaAlteracao, colecaoRASolicitante,
							colecaoRASolicitanteRemovida, colecaoIdServicoTipo, especificacaoNaBase, colecaoContas, identificadores,
							contaMotivoRevisao, indicadorProcessoAdmJud, numeroProcessoAgencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0426] Reativar Registro de Atendimento
	 * [SB0001] é Define Data Prevista
	 * 
	 * @author Ana Maria
	 * @date 24/08/2006
	 * @param login
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	public Date definirDataPrevistaRA(Date dataAtendimento, Integer idSolicitacaoTipoEspecificacao){

		try{
			return this.getControladorRegistroAtendimento().definirDataPrevistaRA(dataAtendimento, idSolicitacaoTipoEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0426] Reativar Registro de Atendimento
	 * [SB0001],[SB0002],[SB0003] é Define Unidade Destino
	 * 
	 * @author Ana Maria
	 * @date 24/08/2006
	 * @param login
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	// public UnidadeOrganizacional definirUnidadeDestino(
	// Integer idSolicitacaoTipoEspecificacao, Integer idLocalidade,
	// Integer idSolicitacaoTipo,
	// boolean solicitacaoTipoRelativoAreaEsgoto, Integer idDivisaoEsgoto) {
	// try {
	// return this.getControladorRegistroAtendimento()
	// .definirUnidadeDestino(idSolicitacaoTipoEspecificacao,
	// idLocalidade, idSolicitacaoTipo,
	// solicitacaoTipoRelativoAreaEsgoto, idDivisaoEsgoto);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }

	/**
	 * [UC0426] Reativar Registro de Atendimento
	 * [SB0006]Incluir Registro de Atendimento
	 * 
	 * @author Ana Maria
	 * @date 29/08/2006
	 * @throws ControladorException
	 */
	public Integer[] reativarRegistroAtendimento(RegistroAtendimento ra, Integer idUnidadeAtendimento, Integer idUsuarioLogado,
					Integer idCliente, Integer idRaSolicitante, Integer idUnidadeDestino, String parecerUnidadeDestino,
					Integer idSolicitacaoTipo){

		try{
			return this.getControladorRegistroAtendimento().reativarRegistroAtendimento(ra, idUnidadeAtendimento, idUsuarioLogado,
							idCliente, idRaSolicitante, idUnidadeDestino, parecerUnidadeDestino, idSolicitacaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0445] Obter Nome do Solicitante do RA
	 * Este caso de uso permite obter o nome do solicitante de um registro de
	 * atendimento
	 * 
	 * @author Ana Maria
	 * @date 09/08/2006
	 * @param idRegistroAtendimentoSolicitante
	 * @throws ControladorException
	 */
	public String obterNomeSolicitanteRA(Integer idRegistroAtendimentoSolicitante){

		try{
			return this.getControladorRegistroAtendimento().obterNomeSolicitanteRA(idRegistroAtendimentoSolicitante);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades do
	 * substituição de hidrometro
	 * 
	 * @author Rafael Pinto
	 * @date 31/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirSubstituicaoHidrometro(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirSubstituicaoHidrometro(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * SOTP_ICFALTAAGUA da tabela SOLICITACAO_TIPO com o valor correspondente a
	 * um e STEP_ICMATRICULA com o valor correspondente a dois na tabela
	 * SOLICITACAO_TIPO_ESPECIFICACAO).
	 * 
	 * @author Raphael Rossiter
	 * @date 29/08/2006
	 * @return SolicitacaoTipoEspecificacao
	 * @throws ControladorException
	 */
	public SolicitacaoTipoEspecificacao pesquisarTipoEspecificacaoFaltaAguaGeneralizada(){

		try{
			return this.getControladorRegistroAtendimento().pesquisarTipoEspecificacaoFaltaAguaGeneralizada();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0463] Atualizar Consumo Mínimo de Ligação Água
	 * Este método se destina a validar todas as situações e particularidades da
	 * atualização do consumo Mínimo da ligação de agua
	 * 
	 * @author Leonardo Regis
	 * @date 30/08/2006
	 * @param OrdemServico
	 * @param veioEncerrarOS
	 */
	public void validarExibirAtualizarConsumoMinimoLigacaoAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorLigacaoAgua().validarExibirAtualizarConsumoMinimoLigacaoAgua(ordemServico, veioEncerrarOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0463] Atualizar Consumo Mínimo de Ligação de Água
	 * [FS004] Validar Consumo Mínimo
	 * 
	 * @author Leonardo Regis
	 * @date 30/08/2006
	 * @param imovel
	 */
	public void validarConsumoMinimoLigacaoAgua(Imovel imovel){

		try{
			this.getControladorLigacaoAgua().validarConsumoMinimoLigacaoAgua(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados da Tarifa Social
	 * Recupera o consumo mínimo fixado do Imóvel
	 * 
	 * @author Rafael Corrêa
	 * @date 04/0/2006
	 * @param idImovel
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarConsumoMinimoFixado(Integer idImovel){

		try{
			return this.getControladorLigacaoAgua().pesquisarConsumoMinimoFixado(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0463] Atualizar Consumo Mínimo da Ligação de Água
	 * [SB0001] Atualizar Ligação de Água.
	 * 
	 * @author Leonardo Regis
	 * @date 30/07/2006
	 * @param ligacaoAgua
	 */
	public void atualizarConsumoMinimoLigacaoAgua(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoAgua().atualizarConsumoMinimoLigacaoAgua(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * retirada de hidrometro
	 * 
	 * @author Rafael Pinto
	 * @date 25/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirRetiradaHidrometroAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirRetiradaHidrometroAgua(ordemServico, veioEncerrarOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * remanejamento de hidrometro
	 * 
	 * @author Rafael Pinto
	 * @date 25/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirRemanejmentoHidrometroAgua(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirRemanejmentoHidrometroAgua(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0362] Efetuar Instalacao de hidrômetro
	 * Validar Instalacao de hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 13/07/2006
	 * @param matriculaImovel
	 *            ,
	 * @param numeroHidrometro
	 *            ,
	 * @param tipoMedicao
	 *            return void
	 * @throws ControladorException
	 */
	public void validarExibirInstalacaoHidrometro(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarExibirInstalacaoHidrometro(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0426] Reativar Registro de Atendimento
	 * Caso a unidade destino informada Não possa receber registros de
	 * atendimento (UNID_ICTRAMITE=2 na tabela UNIDADE_ORGANIZACIONAL com
	 * UNID_ID=Id da unidade destino informada).
	 * [FS0013] - Verificar possibilidade de encaminhamento para a unidade
	 * destino
	 * 
	 * @author Ana Maria
	 * @date 03/09/2006
	 * @param idUnidadeOrganizacional
	 * @return void
	 * @throws ControladorException
	 */
	public void verificaPossibilidadeEncaminhamentoUnidadeDestino(Integer idUnidadeDestino){

		try{
			this.getControladorUnidade().verificaPossibilidadeEncaminhamentoUnidadeDestino(idUnidadeDestino);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que apresenta os dados do imovel
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 * 
	 * @author Flávio Cordeiro
	 * @date 04/08/2006
	 * @param idImovel
	 * @return Collection
	 */
	public ImovelMicromedicao pesquiarImovelExcecoesApresentaDadosResumido(Integer idImovel, boolean ligacaoAgua){

		try{
			return this.getControladorMicromedicao().pesquiarImovelExcecoesApresentaDadosResumido(idImovel, ligacaoAgua);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Retorna um objeto com os dados das medicoes para apresentação
	 * Flávio
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 */
	public ImovelMicromedicao carregarDadosMedicaoResumido(Integer idImovel, boolean ligacaoAgua, String anoMes){

		try{
			return this.getControladorMicromedicao().carregarDadosMedicaoResumido(idImovel, ligacaoAgua, anoMes);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0426] Reativar Registro de Atendimento
	 * [FS0001]Valida possibilidade de reativação
	 * 
	 * @author Ana Maria
	 * @date 29/08/2006
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public void validaPossibilidadeReativacaoRA(Integer idRegistroAtendimento, Integer idUsuario){

		try{
			this.getControladorRegistroAtendimento().validaPossibilidadeReativacaoRA(idRegistroAtendimento, idUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Efetuar a Ligação da Água no imovel
	 * 
	 * @author Leandro Cavalcanti
	 * @date 15/06/2006
	 * @return void retorno
	 * @throws ErroRepositorioException
	 */
	public void efetuarLigacaoAgua(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorAtendimentoPublico().efetuarLigacaoAgua(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0357] Efetuar Religação de Água
	 * Permite efetuar religação da ligação de Água ou pelo menu ou pela
	 * funcionalidade encerrar a execução da ordem de serviço.
	 * [SB0001] Atualizar imóvel/Ligação de Água/Ligação de Esgoto
	 * 
	 * @author Rômulo Aurélio
	 * @date 07/07/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void efetuarReligacaoAgua(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarReligacaoAgua(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0365] Efetuar Remanejamento de hidrômetro [SB0001] Atualizar Histórico
	 * de instalação do hidrômetro
	 * 
	 * @author Rômulo Aurélio
	 * @date 05/07/2006
	 * @param hidrometroInstalacaoHistorico
	 * @throws ControladorException
	 */

	public void efetuarRemanejamentoHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorAtendimentoPublico().efetuarRemanejamentoHidrometro(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0456] Elaborar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 04/09/2006
	 */
	public Collection pesquisarTipoServicoDisponivelPorCriterio(UnidadeOrganizacional unidadeLotacao, int tipoCriterio, int origemServico){

		try{

			return this.getControladorOrdemServico().pesquisarTipoServicoDisponivelPorCriterio(unidadeLotacao, tipoCriterio, origemServico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa dos dados Diários da arrecadação
	 * [UC0333] Filtrar Dados Diários da Arrecadação
	 * 
	 * @author Rafael Santos
	 * @date 05/09/2006
	 * @return
	 */
	public Collection filtrarDadosDiariosArrecadacao(String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String idLocalidade,
					String idGerenciaRegional, String unidadeNegocioId, String idArrecadador, String idElo, String[] idsImovelPerfil,
					String[] idsLigacaoAgua, String[] idsLigacaoEsgoto, String[] idsDocumentosTipos, String[] idsCategoria,
					String[] idsEsferaPoder, String setorComercial, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarDadosDiariosArrecadacao(periodoArrecadacaoInicial, periodoArrecadacaoFinal,
							idLocalidade, idGerenciaRegional, unidadeNegocioId, idArrecadador, idElo, idsImovelPerfil, idsLigacaoAgua,
							idsLigacaoEsgoto, idsDocumentosTipos, idsCategoria, idsEsferaPoder, setorComercial, idConcessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa dos dados Diários da arrecadação pela Gerencia
	 * [UC0333] Filtrar Dados Diários da Arrecadação
	 * 
	 * @author Rafael Santos
	 * @date 05/09/2006
	 * @return
	 */
	public Collection filtrarDadosDiariosArrecadacaoValoresDiarios(String idGerenciaRegional){

		try{
			return this.getControladorArrecadacao().filtrarDadosDiariosArrecadacaoValoresDiarios(idGerenciaRegional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Análise de Exceções e Consumos
	 * 
	 * @author eduardo henrique
	 * @date 09/06/2009
	 *       Transferência e correção de Regras de Situação de Leituras para o Controlador
	 * @param idImovel
	 *            [obrigatório]
	 * @param mesAno
	 *            [obrigatório]
	 * @param dataLeituraAnteriorFaturamento
	 * @param leituraAnteriorFaturamento
	 * @param dataLeituraAtualInformada
	 * @param leituraAtualInformada
	 *            [obrigatório]
	 * @param consumo
	 * @param ligacaoAgua
	 * @param idAnormalidadeLeitura
	 * @param idConfirmacaoLeitura
	 *            [obrigatório] (0 - Não Confirmada / 1 - Confirmada)
	 * @throws NullPointerException
	 *             , caso algum parâmetro obrigatório não seja informado.
	 */
	public void atualizarLeituraConsumoResumido(Integer idImovel, String mesAno, String dataLeituraAnteriorFaturamento,
					String leituraAnteriorFaturamento, String dataLeituraAtualInformada, String leituraAtualInformada, String consumo,
					boolean ligacaoAgua, Integer idAnormalidadeLeitura, Integer idConfirmacaoLeitura, Usuario usuario){

		try{
			this.getControladorMicromedicao().atualizarLeituraConsumoResumido(idImovel, mesAno, dataLeituraAnteriorFaturamento,
							leituraAnteriorFaturamento, dataLeituraAtualInformada, leituraAtualInformada, consumo, ligacaoAgua,
							idAnormalidadeLeitura, idConfirmacaoLeitura, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta os Dados Cadastrais do Imovel
	 * 
	 * @author Rafael Santos
	 * @date 07/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel consultarImovelDadosCadastrais(Integer idImovel){

		try{
			return this.getControladorImovel().consultarImovelDadosCadastrais(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Consulta os Clientes do Imovel [UC0472] Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 07/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarClientesImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarClientesImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * [UC0450] Pesquisar Ordem de Servico
	 * [SB0003] Seleciona Ordem de Servico por Criterio de Seleção [SB0004]
	 * Seleciona Ordem de Servico por Situacao de Diagnostico [SB0005] Seleciona
	 * Ordem de Servico por Situacao de Acompanhamento pela Agencia [SB0006]
	 * Seleciona Ordem de Servico por Critério Geral
	 * 
	 * @author Rafael Pinto
	 * @date 07/09/2006
	 * @param PesquisarOrdemServicoHelper
	 * @return Collection<OrdemServico>
	 * @throws ControladorException
	 */
	public Collection<OrdemServico> pesquisarOrdemServicoElaborarProgramacao(PesquisarOrdemServicoHelper filtro){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoElaborarProgramacao(filtro);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de categorias do imovel [UC0472] Consultar Imovel
	 * 
	 * @param idImovel
	 *            parametros para a consulta
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarCategoriasImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarCategoriasImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * atualização da instalação de hidrômetro do imóvel no momento da exibição.
	 * 
	 * @author Rafael Pinto
	 * @date 20/07/2006
	 * @param OrdemServico
	 */
	public void validarExibirAtualizarInstalacaoHidrometro(OrdemServico ordemServico, boolean menu) throws FachadaException{

		try{
			this.getControladorAtendimentoPublico().validarExibirAtualizarInstalacaoHidrometro(ordemServico, menu);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0462] Obter Dados das Atividades da OS
	 * 
	 * @author Leonardo Regis
	 * @date 09/09/2006
	 * @param idOS
	 * @return Collection<ObterDadosAtividadesOSHelper>
	 */
	public Collection<ObterDadosAtividadesOSHelper> obterDadosAtividadesOS(Integer idOS){

		try{
			return this.getControladorOrdemServico().obterDadosAtividadesOS(idOS);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Consulta os dados da conta
	 * 
	 * @param idConta
	 *            Id da Conta
	 * @author Fernanda Paiva
	 * @date 04/09/2006
	 * @return uma colecao de conta
	 */

	public Conta consultarConta(Integer idConta){

		try{
			return this.getControladorFaturamento().consultarConta(idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public DebitoAutomatico obterObjetoDebitoAutomatico(Integer idImovel){

		try{
			return this.getControladorFaturamento().obterObjetoDebitoAutomatico(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta os Dados Complementares do Imovel
	 * 
	 * @author Rafael Santos
	 * @date 11/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel consultarImovelDadosComplementares(Integer idImovel){

		try{
			return this.getControladorImovel().consultarImovelDadosComplementares(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de vencimento alternativos do imovel [UC0473]
	 * Consultar Imovel Dados Complementares
	 * 
	 * @author Rafael Santos
	 * @date 11/09/2006
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarVencimentoAlternativoImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarVencimentoAlternativoImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Inserir Vencimento Alternativo
	 * 
	 * @author Hebert Falcão
	 * @created 18/02/2010
	 * @param vencimentoAlternativo
	 * @param imovel
	 * @param cliente
	 * @param novoDiaVencimento
	 * @param usuario
	 */
	public void inserirVencimentoAlternativo(VencimentoAlternativo vencimentoAlternativo, Imovel imovel, Cliente cliente,
					Short novoDiaVencimento, Usuario usuario){

		try{
			getControladorImovel().inserirVencimentoAlternativo(vencimentoAlternativo, imovel, cliente, novoDiaVencimento, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Excluir Vencimento Alternativo
	 * 
	 * @author Hebert Falcão
	 * @created 18/02/2010
	 * @param vencimentoAlternativo
	 * @param imovel
	 * @param usuario
	 */
	public void excluirVencimentoAlternativo(VencimentoAlternativo vencimentoAlternativo, Imovel imovel, Usuario usuario){

		try{
			getControladorImovel().excluirVencimentoAlternativo(vencimentoAlternativo, imovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de Debitos Automaticos do imovel [UC0473] Consultar
	 * Imovel Dados Complementares
	 * 
	 * @author Rafael Santos
	 * @date 11/09/2006
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarDebitosAutomaticosImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarDebitosAutomaticosImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de Faturamento Situação Historico do Imovel [UC0473]
	 * Consultar Imovel Dados Complementares
	 * 
	 * @author Rafael Santos
	 * @date 11/09/2006
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarFaturamentosSituacaoHistorico(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarFaturamentosSituacaoHistorico(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de Faturamento Situação Historico do Imovel
	 * UC0069-ManterDadosTarifaSocial
	 * 
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarFaturamentoSituacaoHistorico(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarFaturamentoSituacaoHistorico(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a coleção de Cobranças Situação Historico do Imovel [UC0473]
	 * Consultar Imovel Dados Complementares
	 * 
	 * @author Rafael Santos
	 * @date 11/09/2006
	 * @return Description of the Return Value
	 * @exception ErroRepositorioException
	 *                Description of the Exception
	 */
	public Collection pesquisarCobrancasSituacaoHistorico(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarCobrancasSituacaoHistorico(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * pesquisa os fones do regsitro atendimento solicitante e joga na coleção
	 * de ClientesFones
	 * 
	 * @author Sávio Luiz
	 * @date 05/09/2006
	 * @return idRASolicitante
	 * @throws ControladorException
	 */
	public Collection pesquisarParmsFoneRegistroAtendimentoSolicitante(Integer idRASolicitante){

		try{
			return this.getControladorRegistroAtendimento().pesquisarParmsFoneRegistroAtendimentoSolicitante(idRASolicitante);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter os parametros de logradouroCep para o endereço
	 * 
	 * @author Sávio Luiz
	 * @date 05/09/2006
	 * @return idLogradouroCep
	 * @throws ControladorException
	 */
	public LogradouroCep pesquisarLogradouroCepEndereco(Integer idLogradouroCep){

		try{
			return this.getControladorEndereco().pesquisarLogradouroCepEndereco(idLogradouroCep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter os parametros de logradouroCep para o endereço
	 * 
	 * @author Sávio Luiz
	 * @date 05/09/2006
	 * @return idLogradouroBairro
	 * @throws ControladorException
	 */
	public LogradouroBairro pesquisarLogradouroBairroEndereco(Integer idLogradouroBairro){

		try{
			return this.getControladorEndereco().pesquisarLogradouroBairroEndereco(idLogradouroBairro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Atualizar Registro de Atendimento
	 * [FS0030] é Verificar preenchimento dos dados de identificação do
	 * solicitante
	 * 
	 * @author Sávio Luiz
	 * @date 07/09/2006
	 * @throws ControladorException
	 */

	/**
	 * Pesquisa os avisos bancários para o Relatório através das Opções
	 * selecionadas no Filtrar Aviso bancário
	 * 
	 * @author Rafael Corrêa
	 * @date 04/09/06
	 * @return Collection<AvisoBancarioRelatorioHelper>
	 */

	public Collection pesquisarAvisoBancarioRelatorio(AvisoBancarioHelper avisoBancarioHelper){

		try{
			Collection retorno = this.getControladorArrecadacao().pesquisarAvisoBancarioRelatorio(avisoBancarioHelper);
			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os avisos deduções de um aviso bancário para o Relatório através
	 * do id do aviso bancário
	 * 
	 * @author Rafael Corrêa
	 * @date 05/09/06
	 * @return Collection<DeducoesRelatorioHelper>
	 */

	public Collection pesquisarAvisoDeducoesAvisoBancarioRelatorio(Integer idAvisoBancario){

		try{
			Collection retorno = this.getControladorArrecadacao().pesquisarAvisoDeducoesAvisoBancarioRelatorio(idAvisoBancario);
			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os avisos acertos de um aviso bancário para o Relatório através
	 * do id do aviso bancário
	 * 
	 * @author Rafael Corrêa
	 * @date 05/09/06
	 * @return Collection<AcertosRelatorioHelper>
	 */

	public Collection pesquisarAvisoAcertosAvisoBancarioRelatorio(Integer idAvisoBancario){

		try{
			Collection retorno = this.getControladorArrecadacao().pesquisarAvisoAcertosAvisoBancarioRelatorio(idAvisoBancario);
			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void verificaDadosSolicitanteAtualizar(Integer idCliente, Integer idUnidadeSolicitante, Integer idFuncionario,
					String nomeSolicitante, Collection colecaoEndereco, Collection colecaoFone, Short indicadorClienteEspecificacao,
					Integer idImovel, Integer idRegistroAtendimento, Integer idRASolicitante){

		try{
			this.getControladorRegistroAtendimento().verificaDadosSolicitanteAtualizar(idCliente, idUnidadeSolicitante, idFuncionario,
							nomeSolicitante, colecaoEndereco, colecaoFone, indicadorClienteEspecificacao, idImovel, idRegistroAtendimento,
							idRASolicitante);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0408] Inserir Registro de Atendimento
	 * Caso esteja adicionando um novo solicitante e o cliente já seja um
	 * solicitante do registro de atendimento (existe ocorrência na tabela
	 * REGISTRO_ATENDIMENTO_SOLICITANTE com RGAT_ID=RGAT_ID do registro de
	 * atendimento selecionado e CLIE_ID=Id do Cliente informado e o registro
	 * atendimento solicitante for diferente do que está sendo atualizado).
	 * [FS0027] é Verificar existência do cliente solicitante
	 * 
	 * @author Sávio Luiz
	 * @date 21/08/2006
	 * @param idRegistroAtendimento
	 *            ,
	 *            idCliente
	 * @throws ErroRepositorioException
	 */
	public void verificarExistenciaClienteSolicitanteAtualizar(Integer idRegistroAtendimento, Integer idCliente, Integer idRASolicitante){

		try{
			this.getControladorRegistroAtendimento().verificarExistenciaClienteSolicitanteAtualizar(idRegistroAtendimento, idCliente,
							idRASolicitante);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0408] Inserir Registro de Atendimento
	 * Caso esteja adicionando um novo solicitante e a unidade já seja um
	 * solicitante do registro de atendimento (existe ocorrência na tabela
	 * REGISTRO_ATENDIMENTO_SOLICITANTE com RGAT_ID=RGAT_ID do registro de
	 * atendimento selecionado e UNID_ID=Id da Unidade informada e RASO_ID<>id
	 * do Registro atendimento solicitante).
	 * [FS0018] é Verificar existência da unidade solicitante
	 * 
	 * @author Sávio Luiz
	 * @date 07/09/2006
	 * @param idRegistroAtendimento
	 *            ,
	 *            idUnidade
	 * @throws ControladorException
	 */
	public void verificarExistenciaUnidadeSolicitanteAtualizar(Integer idRegistroAtendimento, Integer idUnidade, Integer idRASolicitante){

		try{
			this.getControladorRegistroAtendimento().verificarExistenciaClienteSolicitanteAtualizar(idRegistroAtendimento, idUnidade,
							idRASolicitante);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0456] Elaborar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 11/09/2006
	 * @param dataRoteiro
	 * @return collection
	 * @throws ErroRepositorioException
	 */
	public Collection<OrdemServicoProgramacao> recuperaOSProgramacaoPorDataRoteiro(Date dataRoteiro){

		try{
			return this.getControladorOrdemServico().recuperaOSProgramacaoPorDataRoteiro(dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0475] Obter Valor do débito
	 * 
	 * @author Leonardo Regis
	 * @date 11/09/2006
	 * @param servicoTipoId
	 * @param imovelId
	 * @param tipoMedicao
	 * @return valor
	 */
	public BigDecimal obterValorDebito(Integer servicoTipoId, Integer imovelId, Short tipoMedicao){

		try{
			return this.getControladorAtendimentoPublico().obterValorDebito(servicoTipoId, imovelId, tipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Obter os campos necessário para o endereço do imóvel Autor:Sávio Luiz
	 */

	public Imovel pesquisarImovelParaEndereco(Integer idImovel){

		try{
			return this.getControladorEndereco().pesquisarImovelParaEndereco(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consutlar os Dados de Analise da Medição e Consumo do Imovel [UC0473]
	 * Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 12/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel consultarImovelAnaliseMedicaoConsumo(Integer idImovel){

		try{
			return this.getControladorImovel().consultarImovelAnaliseMedicaoConsumo(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void emitirContasOrgaoPublico(Integer anoMesReferenciaFaturamento, FaturamentoGrupo faturamentoGrupo){

		try{
			this.getControladorFaturamento().emitirContasOrgaoPublico(anoMesReferenciaFaturamento, faturamentoGrupo, 0, 5, 1,
							new Short("0"));
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0479] Gerar débito da Ordem de Servirão
	 * [FS0001] Verificar existência da Ordem de Servirão [FS0002] Verificar
	 * existência do Tipo de débito [FS0003] Validar Valor do débito [FS0004]
	 * Validar Quantidade de Parcelas
	 * 
	 * @author Leonardo Regis
	 * @date 11/09/2006
	 * @param ordemServicoId
	 * @param tipoDebitoId
	 * @param valorDebito
	 * @param qtdeParcelas
	 * @throws ControladorException
	 */
	public void gerarDebitoOrdemServico(Integer ordemServicoId, Integer tipoDebitoId, BigDecimal valorDebito, int qtdeParcelas){

		try{
			this.getControladorOrdemServico().gerarDebitoOrdemServico(ordemServicoId, tipoDebitoId, valorDebito, qtdeParcelas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0456] Elaborar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 13/09/2006
	 * @param idRa
	 * @return dataPrevisaoAtual
	 */
	public Date obterDataAgenciaReguladoraPrevisaoAtual(Integer idRa){

		try{
			return this.getControladorRegistroAtendimento().obterDataAgenciaReguladoraPrevisaoAtual(idRa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0456] Elaborar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 13/09/2006
	 * @param colecaoOrdemServicoProgramacao
	 * @throws ControladorException
	 */
	public void elaborarRoteiro(Collection colecaoOrdemServicoProgramacao, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().elaboraRoteiro(colecaoOrdemServicoProgramacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gerar Integracao para Contabilidade
	 * este metodo pesquisa no banco os campos necessários para a contrucao do
	 * txt e depois gera o txt para a integracao com a contabilidade
	 * 
	 * @param idLancamentoOrigem
	 * @param anoMes
	 * @param data
	 */
	public void gerarIntegracaoContabilidade(String idLancamentoOrigem, String anoMes, String data){

		try{
			this.getControladorFinanceiro().gerarIntegracaoContabilidade(idLancamentoOrigem, anoMes, data);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite gerar e emitir extrato dos débitos de um imóvel
	 * [UC0444] Gerar e Emitir Extrato de débito
	 * 
	 * @author Roberta Costa, Vivianne Sousa
	 * @date 06/09/2006, 11/09/2006
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @return
	 * @throws ControladorException
	 */
	// Quando implementar Notas Promissórias acrescentar nos parâmetros
	public ExtratoDebitoRelatorioHelper gerarEmitirExtratoDebito(Imovel imovel, Short indicadorGeracaoTaxaCobranca,
					Collection colecaoContas, Collection colecaoGuiasPagamento, Collection colecaoDebitosACobrar,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto, BigDecimal valorDocumento,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Cliente cliente,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, Integer idResolucaoDiretoria,
					Map<Integer, BigDecimal> mapProcessosExecFiscal){

		try{
			return this.getControladorCobranca().gerarEmitirExtratoDebito(imovel, indicadorGeracaoTaxaCobranca, colecaoContas,
							colecaoGuiasPagamento, colecaoDebitosACobrar, valorAcrescimosImpontualidade, valorDesconto, valorDocumento,
							colecaoCreditoARealizar, cliente, opcoesParcelamento, idResolucaoDiretoria, mapProcessosExecFiscal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0349] Emitir Documento de Cobrança
	 * Calcular valor e Data de vencimento anterior
	 * [SB0001] - Calcular Valor e Data de Vencimento Anterior
	 * 
	 * @author Raphael Rossiter, Vivianne Sousa
	 * @data 30/05/2006, 14/09/2006
	 * @param Collection
	 *            <CobrancaDocumentoItem>
	 * @return CalcularValorDataVencimentoAnteriorHelper
	 */
	public CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnterior(
					Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem, int qtdMaxItens){

		try{
			return this.getControladorCobranca().calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, qtdMaxItens);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0462] Obter Dados das Atividades da OS
	 * 
	 * @author Leonardo Regis
	 * @date 14/09/2006
	 * @param idOS
	 * @param idAtividade
	 * @param tipoAtividade
	 * @return Collection<ObterDadosAtividadeOSHelper>
	 * @throws ControladorException
	 */
	public Collection<ObterDadosAtividadeOSHelper> obterDadosAtividadeOS(Integer idOS, Integer idAtividade, int tipoAtividade){

		try{
			return this.getControladorOrdemServico().obterDadosAtividadeOS(idOS, idAtividade, tipoAtividade);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Consutlar os Dados do Historico de Faturamento [UC0473] Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel consultarImovelHistoricoFaturamento(Integer idImovel){

		try{
			return this.getControladorImovel().consultarImovelHistoricoFaturamento(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consutlar o cliente usuário do Imovel [UC0473] Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public String consultarClienteUsuarioImovel(Integer idImovel){

		try{
			return this.getControladorImovel().consultarClienteUsuarioImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consutlar as contas do Imovel [UC0473] Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @author Saulo Lima
	 * @date 10/08/2009
	 *       Novo atributo preenchido na colecao de Conta: valorImposto
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<Conta> consultarContasImovel(Integer idImovel, boolean ordemAscendente){

		try{
			return this.getControladorImovel().consultarContasImovel(idImovel, ordemAscendente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consutlar as contas Historicos do Imovel [UC0473] Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @author Saulo Lima
	 * @date 10/08/2009
	 *       Novo atributo preenchido na colecao de ContaHistorico: valorImposto
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<ContaHistorico> consultarContasHistoricosImovel(Integer idImovel){

		try{
			return this.getControladorImovel().consultarContasHistoricosImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados do Cliente
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @param idCliente
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Cliente consultarCliente(Integer idCliente){

		try{
			return this.getControladorCliente().consultarCliente(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa todos os endereços do cliente
	 * 
	 * @author Rafael Santos
	 * @date 13/09/2006
	 * @param idCliente
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarEnderecoCliente(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarEnderecoCliente(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0460] Obter Carga de Trabalho da Equipe
	 * 
	 * @author Leonardo Regis
	 * @date 14/09/2006
	 * @param equipeId
	 * @param colecaoIdOSProgramadas
	 * @param colecaoOSDistribuidasPorEquipe
	 * @param dataFinalProgramacao
	 * @param dataRoteiro
	 * @return carga de trabalho da equipe
	 * @throws ControladorException
	 */
	public ObterCargaTrabalhoEquipeHelper obterCargaTrabalhoEquipe(Integer equipeId, Collection<Integer> colecaoIdOSProgramadas,
					Collection<ObterOSDistribuidasPorEquipeHelper> colecaoOSDistribuidasPorEquipe, Date dataRoteiro){

		try{
			return this.getControladorOrdemServico().obterCargaTrabalhoEquipe(equipeId, colecaoIdOSProgramadas,
							colecaoOSDistribuidasPorEquipe, dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta os
	 * documentos de Cobrança do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 19/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> consultarImovelDocumentosCobranca(Integer idImovel, Integer numeroPagina){

		try{
			return this.getControladorCobranca().consultarImovelDocumentosCobranca(idImovel, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de Cobrança do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosCobranca(Integer idImovel){

		try{

			return this.getControladorCobranca().consultarQuantidadeImovelDocumentosCobranca(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de itens de Cobrança do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosItemCobranca(Integer idImovel){

		try{

			return this.getControladorCobranca().consultarQuantidadeImovelDocumentosItemCobranca(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 15/09/2006
	 * @param numeroOS
	 * @return Collection<Atividade>
	 * @throws ErroRepositorioException
	 */
	public Collection<Atividade> obterAtividadesOrdemServico(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().obterAtividadesOrdemServico(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 18/09/2006
	 * @param numeroOS
	 * @return Collection<Equipe>
	 * @throws ErroRepositorioException
	 */
	public Collection<Equipe> obterEquipesProgramadas(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().obterEquipesProgramadas(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [FS0001] - Verificar Unidade do usuário
	 * 
	 * @author Sávio Luiz
	 * @date 18/09/2006
	 * @throws ControladorException
	 */
	public void verificarUnidadeUsuario(Integer numeroOS, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().verificarUnidadeUsuario(numeroOS, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [FS0001] - Verificar Unidade do usuário
	 * 
	 * @author Sávio Luiz
	 * @date 18/09/2006
	 * @throws ControladorException
	 */
	public void verificarUnidadeUsuario(RegistroAtendimento registroAtendimento, Usuario usuarioLogado){

		try{
			this.getControladorRegistroAtendimento().verificarUnidadeUsuario(registroAtendimento, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [FS0006] - Verificar Origem do Encerramento da Ordem de serviço
	 * 
	 * @author Sávio Luiz
	 * @date 18/09/2006
	 * @throws ControladorException
	 */
	public void verificarOrigemEncerramentoOS(Integer numeroOS, Date dataEncerramento){

		try{
			this.getControladorOrdemServico().verificarOrigemEncerramentoOS(numeroOS, dataEncerramento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [SB0001] - Encerrar sem execução
	 * 
	 * @author Sávio Luiz
	 * @date 18/09/2006
	 * @param origemEncerramento
	 *            TODO
	 * @throws ControladorException
	 */
	public void encerrarOSSemExecucao(OSEncerramentoHelper osEncerramentoHelper,
					Map<Integer, ServicoAssociadoAutorizacaoHelper> autorizacoesServicos,
					OrigemEncerramentoOrdemServico origemEncerramento,
					DadosAtividadesOrdemServicoHelper dadosAtividadeorAtividadesOrdemServicoHelper){

		try{
			this.getControladorOrdemServico().encerrarOSSemExecucao(osEncerramentoHelper, autorizacoesServicos, origemEncerramento,
							dadosAtividadeorAtividadesOrdemServicoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2006
	 * @param numeroOS
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificarOSAssociadaDocumentoCobranca(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().verificarOSAssociadaDocumentoCobranca(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2006
	 * @param numeroOS
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificarOSAssociadaRA(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().verificarOSAssociadaRA(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2006
	 * @author Saulo Lima
	 * @date 04/06/2009
	 *       Correção + alteração para retornar a UnidadeOrganizacional
	 * @param numeroOS
	 * @return UnidadeOrganizacional
	 * @throws ControladorException
	 */
	public UnidadeOrganizacional obterUnidadeDestinoUltimoTramite(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().obterUnidadeDestinoUltimoTramite(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2006
	 * @param numeroOS
	 * @return Collection<Equipe>
	 * @throws ControladorException
	 */
	public Collection<Equipe> obterEquipesPorUnidade(Integer idUnidade){

		try{
			return this.getControladorOrdemServico().obterEquipesPorUnidade(idUnidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0362] Efetuar Instalação de hidrômetro
	 * 
	 * @author Leonardo Regis
	 * @date 19/09/2006
	 * @param dadosOS
	 */
	public void atualizarOSParaEfetivacaoInstalacaoHidrometro(DadosAtualizacaoOSParaInstalacaoHidrometroHelper dadosOS){

		try{
			this.getControladorOrdemServico().atualizarOSParaEfetivacaoInstalacaoHidrometro(dadosOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de consulta os endereços dos cliente
	 * [UC0474] - Consultar Cliente
	 * 
	 * @author Rafael Santos
	 * @date 19/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarClientesEnderecosAbreviado(Integer idCliente){

		try{

			return this.getControladorEndereco().pesquisarClientesEnderecosAbreviado(idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 20/09/2006
	 * @param dataExecucao
	 *            ,
	 *            horaInicio, horaFim, idEquipe
	 * @return void
	 */
	public void verificaDadosAdicionarPeriodoEquipe(String dataExecucao, String horaInicio, String horaFim, Integer idEquipe,
					String dataEncerramentoOS, Integer numeroOS){

		try{
			this.getControladorOrdemServico().verificaDadosAdicionarPeriodoEquipe(dataExecucao, horaInicio, horaFim, idEquipe,
							dataEncerramentoOS, numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 11/09/2006
	 * @param dataRoteiro
	 *            ,idUnidadeOrganizacional
	 * @return collection<OrdemServicoProgramacao>
	 * @throws ControladorException
	 */
	public Collection<OrdemServicoProgramacao> recuperaOSProgramacaoPorDataRoteiroUnidade(Date dataRoteiro, Integer idUnidadeOrganizacional){

		try{
			return this.getControladorOrdemServico().recuperaOSProgramacaoPorDataRoteiroUnidade(dataRoteiro, idUnidadeOrganizacional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consultar os dados de parcelamentos do Imovel [UC0473] Consultar imóvel
	 * 
	 * @author Rafael Santos
	 * @date 20/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel consultarParcelamentosDebitosImovel(Integer idImovel){

		try{
			return this.getControladorImovel().consultarParcelamentosDebitosImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0482]Emitir 2º Via de Conta
	 * 
	 * @author Vivianne Sousa
	 * @date 15/09/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public Collection<EmitirContaHelper> emitir2ViaContas(Collection idsContaEP, boolean cobrarTaxaEmissaoConta, Short contaSemCodigoBarras){

		try{
			return this.getControladorFaturamento().emitir2ViaContas(idsContaEP, cobrarTaxaEmissaoConta, contaSemCodigoBarras);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0482]Emitir 2ª Via de Conta
	 * 
	 * @author Carlos Chrystian
	 * @date 14/08/2012
	 *       Emitir Contas Caucionadas
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public Collection<EmitirContaHelper> emitir2ViaContasCaucionadas(Collection colecaoContaCaucionamento, boolean cobrarTaxaEmissaoConta,
					Short contaSemCodigoBarras, Collection<MedicaoHistorico> colecaoDadosMedicaoLeitura,
					Collection<Collection<ContaCategoriaConsumoFaixa>> colecaoContaCategoriaConsumoFaixa){

		try{
			return this.getControladorFaturamento().emitir2ViaContasCaucionadas(colecaoContaCaucionamento, cobrarTaxaEmissaoConta,
							contaSemCodigoBarras, colecaoDadosMedicaoLeitura, colecaoContaCategoriaConsumoFaixa);
		}catch(ControladorException ex){
			// levanta o erro para a próxima camada
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Recupera o id do cliente responsável pela conta [UC0348] - Emitir Contas
	 * 
	 * @author Sávio Luiz
	 * @date 15/05/2006
	 * @return
	 * @throws ControladorException
	 */
	public Integer pesquisarIdClienteResponsavelConta(Integer idConta, boolean contaHistorico){

		try{
			return this.getControladorFaturamento().pesquisarIdClienteResponsavelConta(idConta, contaHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB0002] Determinar tipo de ligação e tipo de medição
	 * 
	 * @author Sávio Luiz
	 * @date 15/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public Integer[] determinarTipoLigacaoMedicao(EmitirContaHelper emitirContaHelper){

		try{
			return this.getControladorFaturamento().determinarTipoLigacaoMedicao(emitirContaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB0003] Obter Dados do Consumo e Medicao Anterior
	 * 
	 * @author Sávio Luiz
	 * @date 17/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public StringBuilder obterDadosConsumoAnterior(Integer idImovel, int anoMes, int qtdMeses, Integer tipoLigacao, Integer tipoMedicao){

		try{
			return this.getControladorFaturamento().obterDadosConsumoAnterior(idImovel, anoMes, qtdMeses, tipoLigacao, tipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB0004] Obter Dados da Medição da Conta
	 * 
	 * @author Sávio Luiz
	 * @date 17/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public Object[] obterDadosMedicaoConta(EmitirContaHelper emitirContaHelper, Integer tipoMedicao){

		try{
			return this.getControladorFaturamento().obterDadosMedicaoConta(emitirContaHelper, tipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB0005] Obter Consumo Faturado e Consumo médio Diário
	 * 
	 * @author Sávio Luiz
	 * @date 17/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public String[] obterConsumoFaturadoConsumoMedioDiario(EmitirContaHelper emitirContaHelper, Integer tipoMedicao, String diasConsumo){

		try{
			return this.getControladorFaturamento().obterConsumoFaturadoConsumoMedioDiario(emitirContaHelper, tipoMedicao, diasConsumo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna a soma de quantidade economia
	 * [UC0348] Emitir Contas
	 * [SB0007] Obter Quantidade de Economias da Conta
	 * 
	 * @author Sávio Luiz
	 * @date 19/05/2006
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Short obterQuantidadeEconomiasConta(Integer idConta, boolean contaHistorico){

		try{
			return this.getControladorFaturamento().obterQuantidadeEconomiasConta(idConta, contaHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB0009] Obter Mensagem de Rateio de Consumo ou Consumo fixo de Esgoto
	 * 
	 * @author Sávio Luiz
	 * @date 19/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public StringBuilder obterMensagemRateioConsumo(EmitirContaHelper emitirContaHelper, String consumoRateio,
					Object[] parmsMedicaoHistorico, Integer tipoMedicao){

		try{
			return this.getControladorFaturamento().obterMensagemRateioConsumo(emitirContaHelper, consumoRateio, parmsMedicaoHistorico,
							tipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB00016] Obter Mensagem da Conta em 3 Partes
	 * 
	 * @author Sávio Luiz
	 * @date 24/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public String[] obterMensagemConta3Partes(EmitirContaHelper emitirContaHelper, SistemaParametro sistemaParametro){

		try{
			return this.getControladorFaturamento().obterMensagemConta3Partes(emitirContaHelper, sistemaParametro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna uma array de object de qualidade de agua
	 * [UC0348] Emitir Contas
	 * 
	 * @author Sávio Luiz
	 * @date 25/05/2006
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarParmsQualidadeAgua(EmitirContaHelper emitirContaHelper){

		try{
			return this.getControladorFaturamento().pesquisarParmsQualidadeAgua(emitirContaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB00018] Gerar Linhas das Contas com débito automático
	 * 
	 * @author Sávio Luiz
	 * @date 24/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public StringBuilder[] gerarLinhasDemaisContas(EmitirContaHelper emitirContaHelper, Integer sequencialEmpresa, BigDecimal valorConta){

		try{
			return this.getControladorFaturamento().gerarLinhasDemaisContas(emitirContaHelper, sequencialEmpresa, valorConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0085] - Obter endereço Autor: Sávio Luiz Data: 14/06/2006
	 */

	public String pesquisarEnderecoClienteAbreviado(Integer idCliente){

		try{
			return this.getControladorEndereco().pesquisarEnderecoClienteAbreviado(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna um arrey de Object com informações do histórico de
	 * consumo com tipo de medição poco
	 * [UC0348] Emitir Contas
	 * [SB0006] Obter Dados de consumo da conta
	 * 
	 * @author Sávio Luiz
	 * @date 19/05/2006
	 * @param idImovel
	 * @param anoMes
	 * @param idTipoLigacao
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] obterDadosConsumoConta(Integer idImovel, int anoMesReferencia, Integer idTipoLigacao) throws ControladorException{

		try{
			return this.getControladorMicromedicao().obterDadosConsumoConta(idImovel, anoMesReferencia, idTipoLigacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Método responsável por emitir os txts das contas.
	 * [UC0348] Emitir Contas
	 * [SB00010] Gerar Linhas da Descrição dos serviços e Tarifas
	 * 
	 * @author Sávio Luiz
	 * @date 26/05/2006
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public StringBuilder gerarLinhasDescricaoServicoTarifas(EmitirContaHelper emitirContaHelper, String consumoRateio,
					Object[] parmsMedicaoHistorico, Integer tipoMedicao){

		try{
			return this.getControladorFaturamento().gerarLinhasDescricaoServicoTarifas(emitirContaHelper, consumoRateio,
							parmsMedicaoHistorico, tipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0471] Obter Dados da Equipe
	 * 
	 * @author Raphael Rossiter
	 * @date 01/09/2006
	 * @return idQuipe
	 * @throws ControladorException
	 */
	public ObterDadosEquipe obterDadosEquipe(Integer idEquipe){

		try{
			return this.getControladorOrdemServico().obterDadosEquipe(idEquipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0471] Obter Dados da Equipe
	 * 
	 * @author Raphael Rossiter
	 * @date 01/09/2006
	 * @return idQuipe
	 * @throws ControladorException
	 */
	/*
	 * public Collection gerarDadosPorLeituraConvencional(Rota rota, Integer
	 * anoMes, Integer idFun) { try { return this.getControladorMicromedicao()
	 * .gerarDadosPorLeituraConvencional(rota, anoMes, idFun); } catch
	 * (ControladorException ex) { throw new FachadaException(ex.getMessage(),
	 * ex, ex .getParametroMensagem()); } }
	 */
	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço [FS0008] -
	 * Verificar possibilidade da Inclusão da ordem de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void validarInclusaoOsNaProgramacao(OrdemServico ordemServico, Integer unidadeLotacao){

		try{
			this.getControladorOrdemServico().validarInclusaoOsNaProgramacao(ordemServico, unidadeLotacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço [FS0012] -
	 * Reordena Sequencial de Programação - Inclusão de Ordem de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void reordenaSequencialProgramacaoInclusaoOrdemServico(Date dataRoteiro, short sequencialAlterado){

		try{
			this.getControladorOrdemServico().reordenaSequencialProgramacaoInclusaoOrdemServico(dataRoteiro, sequencialAlterado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço [FS0012] -
	 * Reordena Sequencial de Programação - Inclusão de Ordem de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 09/11/2010
	 * @param ordemServico
	 * @throws ControladorException
	 */
	/**
	 * @param dataRoteiro
	 * @param equipe
	 * @param sequencialAlterado
	 */
	public void reordenaSequencialProgramacaoInclusaoOrdemServico(Date dataRoteiro, Equipe equipe, short sequencialAlterado){

		try{
			this.getControladorOrdemServico().reordenaSequencialProgramacaoInclusaoOrdemServico(dataRoteiro, equipe, sequencialAlterado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0455] Exibir Calendário para Elaboração ou Acompanhamento de Roteiro
	 * 
	 * @author Rômulo Aurélio
	 * @date 21/09/2006
	 * @param mesAnoReferencia
	 * @return Collection<ProgramacaoRoteiro>
	 * @throws ControladorException
	 */

	public Collection consultarProgramacaoRoteiro(String mesAnoReferencia, Integer unidadeOrganizacional){

		try{
			return this.getControladorOrdemServico().consultarProgramacaoRoteiro(mesAnoReferencia, unidadeOrganizacional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programacao de Ordens de Servico
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @throws ControladorException
	 */
	public void alocaEquipeParaOs(Integer numeroOS, Date dataRoteiro, Integer idEquipe){

		try{
			this.getControladorOrdemServico().alocaEquipeParaOs(numeroOS, dataRoteiro, idEquipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programacao de Ordens de Servico
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @throws ControladorException
	 */
	public void incluirOrdemServicoProgramacao(OrdemServicoProgramacao ordemServicoProgramacao, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().incluirOrdemServicoProgramacao(ordemServicoProgramacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Acompanhar Roteiro de Programacao de Ordens de Servico
	 * com sequencial informado
	 * 
	 * @author isilva
	 * @date 16/11/2011
	 * @param ordemServicoProgramacao
	 * @param usuarioLogado
	 * @param verificaVazio
	 */
	public void incluirOrdemServicoProgramacaoComSequencialInformado(OrdemServicoProgramacao ordemServicoProgramacao,
					Usuario usuarioLogado, boolean verificaVazio){

		try{
			this.getControladorOrdemServico().incluirOrdemServicoProgramacaoComSequencialInformado(ordemServicoProgramacao, usuarioLogado,
							verificaVazio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0464] Atualizar Volume Mínimo de Ligação de Esgoto
	 * Este método se destina a validar todas as situações e particularidades da
	 * atualização do volume Mínimo da ligação de esgoto
	 * 
	 * @author Leonardo Regis
	 * @date 22/09/2006
	 * @param OrdemServico
	 * @param veioEncerrarOS
	 */
	public void validarExibirAtualizarVolumeMinimoLigacaoEsgoto(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorLigacaoEsgoto().validarExibirAtualizarVolumeMinimoLigacaoEsgoto(ordemServico, veioEncerrarOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0464] Atualizar Volume Mínimo de Ligação de Esgoto
	 * [FS004] Validar Volume Mínimo
	 * 
	 * @author Leonardo Regis
	 * @date 22/09/2006
	 * @param imovel
	 */
	public void validarVolumeMinimoLigacaoEsgoto(Imovel imovel){

		try{
			this.getControladorLigacaoEsgoto().validarVolumeMinimoLigacaoEsgoto(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0464] Atualizar Volume Mínimo da Ligação de Esgoto
	 * [SB0001] Atualizar Ligação de Esgoto.
	 * 
	 * @author Leonardo Regis
	 * @date 22/09/2006
	 * @param ligacaoEsgoto
	 */
	public void atualizarVolumeMinimoLigacaoEsgoto(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoEsgoto().atualizarVolumeMinimoLigacaoEsgoto(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar os registros de atendimento do Imovel [UC0472] Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 25/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection consultarRegistroAtendimentoImovel(Integer idImovel, String situacao){

		try{
			return this.getControladorRegistroAtendimento().consultarRegistroAtendimentoImovel(idImovel, situacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 25/09/2006
	 * @param idOs
	 *            ,dataRoteiro
	 * @return Equipe
	 * @throws ErroRepositorioException
	 */
	public Collection<Equipe> recuperaEquipeDaOSProgramacaoPorDataRoteiro(Integer idOs, Date dataRoteiro){

		try{
			return this.getControladorOrdemServico().recuperaEquipeDaOSProgramacaoPorDataRoteiro(idOs, dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerrar Ordem de serviço
	 * 
	 * @author Sávio Luiz
	 * @date 25/09/2006
	 * @param numeroOS
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarColecaoServicoTipo(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().pesquisarColecaoServicoTipo(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna o número da leitura de retirada do hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 25/09/2006
	 * @param idLigacaoAgua
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarNumeroLeituraRetiradaLigacaoAgua(Integer idLigacaoAgua){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroLeituraRetiradaLigacaoAgua(idLigacaoAgua);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que retorna o número da leitura de retirada do hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 25/09/2006
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarNumeroLeituraRetiradaImovel(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisarNumeroLeituraRetiradaImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados do parcelamentos necessários para o Relatório através
	 * do id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 */
	public ParcelamentoRelatorioHelper pesquisarParcelamentoRelatorio(Integer idIParcelamento){

		try{
			return this.getControladorCobranca().pesquisarParcelamentoRelatorio(idIParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a Unidade Organizacional do usuário Logado
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * @param id
	 * @return UnidadeOrganizacional
	 */
	public UnidadeOrganizacional pesquisarUnidadeUsuario(Integer idUsuario){

		try{
			return this.getControladorUnidade().pesquisarUnidadeUsuario(idUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite atualizar as informações do imóvel doação [UC0390] Manter
	 * Autorização para Doação Mensal
	 * 
	 * @author César Araújo,Pedro Alexandre
	 * @date 30/08/2006, 17/11/2006
	 * @param imovelDoacao
	 *            -
	 *            Código do Imóvel doação
	 * @param usuarioLogado
	 *            -
	 *            usuário logado no sistema
	 */
	public void atualizarImovelDoacao(ImovelDoacao imovelDoacao, Usuario usuarioLogado){

		try{
			this.getControladorImovel().atualizarImovelDoacao(imovelDoacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 25/09/2006
	 * @param idOs
	 *            ,dataRoteiro
	 * @return Equipe
	 * @throws ErroRepositorioException
	 */
	public void verificaExitenciaProgramacaoAtivaParaDiasAnteriores(Integer idOs, Date dataRoteiro){

		try{
			this.getControladorOrdemServico().verificaExitenciaProgramacaoAtivaParaDiasAnteriores(idOs, dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programacao de Ordens de Servico
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @throws ControladorException
	 */

	public void atualizarOrdemServicoProgramacaoSituacaoOs(Integer numeroOS, Date dataRoteiro, short situacaoFechamento,
					Integer idOsProgramNaoEncerMotivo, Date dataHoraVisita, Usuario usuario){

		try{
			this.getControladorOrdemServico().atualizarOrdemServicoProgramacaoSituacaoOs(numeroOS, dataRoteiro, situacaoFechamento,
							idOsProgramNaoEncerMotivo, dataHoraVisita, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [SB0002] - Encerrar com execução e sem referência
	 * 
	 * @author Sávio Luiz
	 * @date 25/09/2006
	 * @author Saulo Lima
	 * @date 18/05/2009
	 *       Alteração para receber como parâmetro um OSEncerramentoHelper (OS's Associadas)
	 * @param origemEncerramento
	 *            TODO
	 * @throws ControladorException
	 */
	public void encerrarOSComExecucaoSemReferencia(OSEncerramentoHelper osEncerramentoHelper,
					Map<Integer, ServicoAssociadoAutorizacaoHelper> autorizacoesServicos,
					OrigemEncerramentoOrdemServico origemEncerramento,
					DadosAtividadesOrdemServicoHelper dadosAtividadeorAtividadesOrdemServicoHelper){

		try{
			this.getControladorOrdemServico().encerrarOSComExecucaoSemReferencia(osEncerramentoHelper, autorizacoesServicos,
							origemEncerramento, dadosAtividadeorAtividadesOrdemServicoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [SB0003] - Encerrar com execução e com referência
	 * 
	 * @author Sávio Luiz
	 * @date 27/09/2006
	 *       * @author Saulo Lima
	 * @date 18/05/2009
	 *       Alteração para receber como parâmetro um OSEncerramentoHelper (OS's Associadas)
	 * @param origemEncerramento
	 *            TODO
	 * @throws ControladorException
	 */
	public Integer encerrarOSComExecucaoComReferencia(OSEncerramentoHelper osEncerramentoHelper,
					Map<Integer, ServicoAssociadoAutorizacaoHelper> autorizacoesServicos,
					OrigemEncerramentoOrdemServico origemEncerramento,
					DadosAtividadesOrdemServicoHelper dadosAtividadeorAtividadesOrdemServicoHelper){

		try{
			return this.getControladorOrdemServico().encerrarOSComExecucaoComReferencia(osEncerramentoHelper, autorizacoesServicos,
							origemEncerramento, dadosAtividadeorAtividadesOrdemServicoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0025] é Verifica Registro de Atendimento de Água Generalizada
	 * 
	 * @author Raphael Rossiter
	 * @date 28/08/2006
	 * @throws ControladorException
	 */
	public RegistroAtendimentoFaltaAguaGeneralizadaHelper verificarRegistroAtendimentoFaltaAguaGeneralizafa(Integer idEspecificacao,
					Integer idBairroArea){

		try{
			return this.getControladorRegistroAtendimento()
							.verificarRegistroAtendimentoFaltaAguaGeneralizafa(idEspecificacao, idBairroArea);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Acompanhar Roteiro de Programação de Ordens de Serviço
	 * Reordena Sequencial de Programação
	 * 
	 * @author isilva
	 * @date 12/11/2010
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void reordenaSequencialOrdemServicoProgramacao(Date dataRoteiro, Integer idEquipe){

		try{
			this.getControladorOrdemServico().reordenaSequencialOrdemServicoProgramacao(dataRoteiro, idEquipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de serviço [FS0012]
	 * Reordena Sequencial de Programação - Nova Ordem para Ordem de serviço
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void reordenaSequencialProgramacaoNovaOrdem(Date dataRoteiro, short sequencialInformado, short sequencialAtual,
					Integer idEquipe, boolean verificaVazio){

		try{
			this.getControladorOrdemServico().reordenaSequencialProgramacaoNovaOrdem(dataRoteiro, sequencialInformado, sequencialAtual,
							idEquipe, verificaVazio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0000] - Efetuar Retirada de hidrômetro
	 * Pesquisa todos os campos do Hidrometro e seus relacionamentos
	 * obrigatórios.
	 * 
	 * @author Thiago Tenório
	 * @date 28/09/2006
	 * @param idHidrometro
	 */
	public Hidrometro pesquisarHidrometroPeloId(Integer idHidrometro){

		try{
			return this.getControladorMicromedicao().pesquisarHidrometroPeloId(idHidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa um imóvel a partir do seu id.Retorna os dados que compõem a
	 * inscrição e o endereço do mesmo
	 * 
	 * @author Raphael Rossiter
	 * @date 01/08/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Imovel pesquisarImovelRegistroAtendimento(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarImovelRegistroAtendimento(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de serviço
	 * [FS0002] - Validar Tipo serviço [FS0004] - Verificar preenchimento dos
	 * campos [FS0007] - Validar Data de Encerramento [FS0008] - Validar Data do
	 * roteiro
	 * 
	 * @author Sávio Luiz
	 * @date 29/09/2006
	 * @throws ControladorException
	 */
	public void validarCamposEncerrarOS(String indicadorExecucao, String numeroOS, String motivoEncerramento, String dataEncerramento,
					String tipoServicoReferenciaId, String indicadorPavimento, String pavimento, String idTipoRetornoOSReferida,
					String indicadorDeferimento, String indicadorTrocaServicoTipo, String idServicoTipo, String dataRoteiro, String idRA,
					String indicadorVistoriaServicoTipo, String codigoRetornoVistoriaOs, String horaEncerramento, Usuario usuarioLogado,
					String indicadorAfericaoHidrometro, String idHidrometroCondicao, String indicadorResultado, String idFuncionario,
					String indicadorClienteAcompanhou){

		try{
			this.getControladorOrdemServico().validarCamposEncerrarOS(indicadorExecucao, numeroOS, motivoEncerramento, dataEncerramento,
							tipoServicoReferenciaId, indicadorPavimento, pavimento, idTipoRetornoOSReferida, indicadorDeferimento,
							indicadorTrocaServicoTipo, idServicoTipo, dataRoteiro, idRA, indicadorVistoriaServicoTipo,
							codigoRetornoVistoriaOs, horaEncerramento, usuarioLogado, indicadorAfericaoHidrometro, idHidrometroCondicao,
							indicadorResultado, idFuncionario, indicadorClienteAcompanhou);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os itens do parcelamento necessários para o Relatório através do
	 * id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * @return Collection
	 */
	public Collection pesquisarParcelamentoItemPorIdParcelamentoRelatorio(Integer idParcelamento){

		try{
			return this.getControladorCobranca().pesquisarParcelamentoItemPorIdParcelamentoRelatorio(idParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @date 27/09/2006
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Cliente pesquisarClienteUsuarioImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 11/08/2011
	 * @param idImovel
	 * @return Collection
	 * @throws ControladorException
	 */
	public Cliente pesquisarClienteResponsavelImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarClienteResponsavelImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0457] Encerra Ordem de Servirão
	 * 
	 * @author Sávio Luiz
	 * @date 27/09/2006
	 * @throws ControladorException
	 */
	public boolean tramitarOuEncerrarRADaOSEncerrada(Integer numeroOS, Usuario usuarioLogado, String idMotivoEncerramento, String idRA,
					String dataRoteiro){

		try{
			return this.getControladorOrdemServico().tramitarOuEncerrarRADaOSEncerrada(numeroOS, usuarioLogado, idMotivoEncerramento, idRA,
							dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados da Guia de Pagamento necessários para o Relatório
	 * através do id da Guia de Pagamento
	 * 
	 * @author Vivianne Sousa
	 * @date 03/10/06
	 * @author eduardo henrique
	 * @date 20/08/2008
	 *       Alteração para Impressão de Guia de Pagamento por Prestação
	 * @param registrosImpressao
	 *            TODO
	 * @param prestacoesGuiaPagamento
	 *            Coleção de GuiaPagamentoPrestação que poderá(ão) será(ão) impressa(s)
	 * @param registrosImpressao
	 *            Id's selecionados na Apresentação ou de 'Outra Origem'.
	 * @return Collection<GuiaPagamentoRelatorioHelper>
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */

	public Collection<GuiaPagamentoRelatorioHelper> pesquisarGuiaPagamentoRelatorio(
					Collection<GuiaPagamentoPrestacaoHelper> prestacoesGuiaPagamento, String[] registrosImpressao){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaPagamentoRelatorio(prestacoesGuiaPagamento, registrosImpressao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * método que pesquisa a quantidade de tarifa social
	 * 
	 * @author Rafael Santos
	 * @since 05/09/2006
	 * @param filtroClienteImovel
	 * @return
	 * @throws ControladorException
	 */
	public int pesquisarQuantidadeImovelTarfiaSocial(FiltroClienteImovel filtroClienteImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarQuantidadeImovelTarfiaSocial(filtroClienteImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados da Guia de Devolução necessários para o Relatório
	 * através do id da Guia de Devolução
	 * 
	 * @author Ana Maria
	 * @date 05/10/06
	 * @return Collection<GuiaDevolucaoRelatorioHelper>
	 */

	public Collection<GuiaDevolucaoRelatorioHelper> pesquisarGuiaDevolucaoRelatorio(String[] ids){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaDevolucaoRelatorio(ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0320] - Gerar Fatura Cliente Responsável
	 * Gera fatura para os clientes e respectivas contas selecionadas pelo usuário
	 * 
	 * @author Saulo Lima
	 * @date 17/09/2008
	 * @author Luciano Galvao
	 * @date 28/06/2013
	 */
	public Collection<Fatura> gerarFaturaClienteResponsavel(Map<Cliente, Collection<Conta>> mapClienteContas, Date dataVencimento){

		try{
			return this.getControladorFaturamento().gerarFaturaClienteResponsavel(mapClienteContas, dataVencimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consulta as contas por cliente para geração de fatura do cliente responsável
	 * 
	 * @author Luciano Galvao
	 * @date 26/06/2013
	 */
	public Map<Cliente, Collection<Conta>> consultarContasParaGerarFaturaClienteResponsavel(Collection<Cliente> clientes,
					GerarFaturaClienteResponsavelHelper gerarFaturaClienteResponsavelHelper) throws FachadaException{

		try{
			return this.getControladorFaturamento().consultarContasParaGerarFaturaClienteResponsavel(clientes,
							gerarFaturaClienteResponsavelHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metódo responsável gerar os objetos do tipo FaturaClienteResponsavelHelper
	 * que serão usados no [UC0321] - Emitir Fatura de Cliente Responsável
	 * 
	 * @author Saulo Lima
	 * @date 23/09/2008
	 * @param Collection
	 *            <Integer>
	 *            Colecção de Inteiros com os Ids das faturas que serão impressas.
	 * @return Collection<FaturaClienteResponsavelHelper>
	 *         Coleção de FaturaClienteResponsavelHelper
	 * @throws ControladorException
	 */
	public Collection<FaturaClienteResponsavelHelper> gerarColecaoFaturaClienteResponsavelHelper(Collection<Integer> idsFaturas)
					throws ControladorException{

		try{
			return this.getControladorFaturamento().gerarColecaoFaturaClienteResponsavelHelper(idsFaturas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de serviço
	 * 
	 * @author lms
	 * @date 14/08/2006
	 */
	public void validarServicoTipo(Integer idRegistroAtendimento, Integer idServicoTipo){

		try{
			this.getControladorOrdemServico().validarServicoTipo(idRegistroAtendimento, idServicoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * para pesquisar os pagamento historicos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos historicos do imóvel
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ControladorException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoImovel(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoImovel(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoImovel(String idImovel){

		return this.getControladorArrecadacao().pesquisarPagamentoHistoricoImovel(idImovel);
	}

	/**
	 * Método que pesquisa os pagamentos histórico para tela de consulta de Imóvel
	 * 
	 * @author Saulo Lima
	 * @date 09/02/2009
	 * @param idImovel
	 * @return Collection<PagamentoHistorico>
	 * @throws ControladorException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoConsultaImovel(Integer idImovel){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoConsultaImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Filtar a quantiade de pagamento historicos do imovel [UC0255] Filtrar
	 * Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarPagamentoHistoricoImovelCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoImovelCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os pagamento historicos do Imovel para paginação
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoImovelParaPaginacao(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoImovelParaPaginacao(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os Pagamento Historicos do Cliente Conta
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoClienteConta(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoClienteConta(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtrar os pagamentos historicos do Cliente Guia Pagamento
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/06
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoClienteGuiaPagamento(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoClienteGuiaPagamento(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os pagamentos historicos do debito a cobrar
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 12/06/06,06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoClienteDebitoACobrar(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoClienteDebitoACobrar(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtrar a quantidade de pagamento historicos do cliente
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Cliente
	 * 
	 * @author Rafael Santos
	 * @date 06/10/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarPagamentoHistoricoClienteCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoClienteCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os pagamento historicos do cliente
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 21/08/06,06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoCliente(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoCliente(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra a quantiadade dos Pagamento Historicos da Localidade
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do Imovel pesquisarPagamentoImovelParaPaginacao
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarPagamentoHistoricoLocalidadeCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoLocalidadeCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os Pagamento Historicos da Localidade
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoLocalidade(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoLocalidade(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra oas pagamento historicos do Aviso Bancario
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoAvisoBancario(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoAvisoBancario(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra a quantidade de pagamento historicos do avio bancario
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarPagamentoHistoricoAvisoBancarioCount(String idImovel, String idCliente, String idTipoRelacao,
					String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, Collection<Integer> idsArrecadadores,
					String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoAvisoBancarioCount(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra os pagamento historicos do aviso bancario para paginação
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoAvisoBancarioParaPaginacao(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoAvisoBancarioParaPaginacao(idImovel, idCliente,
							idTipoRelacao, localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtrar pagamentos historicos do movimento arrecador
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Santos
	 * @date 06/10/2006
	 * @param FiltroPagamento
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoMovimentoArrecadador(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoMovimentoArrecadador(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa todos as funcionalidades iniciadas que representam os Relatórios
	 * batch do sistema
	 * 
	 * @author Rodrigo Silveira
	 * @date 09/10/2006
	 */
	public Collection<Object[]> pesquisarRelatoriosBatchSistema(){

		try{
			return getControladorBatch().pesquisarRelatoriosBatchSistema();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Consulta os dados das ordens de serviço para a geração do Relatório
	 * 
	 * @author Rafael Corrêa
	 * @created 07/10/2006
	 * @return
	 */
	public Collection pesquisarOrdemServicoProgramacaoRelatorio(Integer idEquipe, Date dataRoteiro){

		try{
			return this.getControladorAtendimentoPublico().pesquisarOrdemServicoProgramacaoRelatorio(idEquipe, dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0015] é Verifica Registro de Atendimento Encerrado para o Local da
	 * ocorrência
	 * 
	 * @author Raphael Rossiter
	 * @date 28/08/2006
	 * @throws ControladorException
	 */
	public RegistroAtendimentoEncerradoLocalOcorrenciaHelper verificarRegistroAtendimentoEncerradoLocalOcorrencia(Integer idImovel,
					Integer idEspecificacao, Integer idLogradouroBairro, Integer idLogradouroCep){

		try{
			return this.getControladorRegistroAtendimento().verificarRegistroAtendimentoEncerradoLocalOcorrencia(idImovel, idEspecificacao,
							idLogradouroBairro, idLogradouroCep);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite gerar os débitos de doações para os Imóveis contidos na coleção
	 * [UC0394] Gerar débitos a Cobrar de doações
	 * 
	 * @author César Araújo
	 * @date 05/08/2006
	 * @param Collection
	 *            <ImovelCobrarDoacaoHelper> imovelCobrarDoacaoHelpers - Coleção
	 *            de imovelCobrarDoacaoHelpers
	 * @return Collection<ImovelCobrarDoacaoHelper> - Coleção de
	 *         ImovelCobrarDoacaoHelper já com as informações necessárias para
	 *         registro da Cobrança
	 * @throws ErroRepositorioException
	 */
	public void gerarDebitoACobrarDoacao(Collection<Rota> rotas){

		try{
			this.getControladorFaturamento().gerarDebitoACobrarDoacao(rotas, 1);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Faz a pesquisa de devoluçãoHistorico fazendo os carregamentos de
	 * clienteContas, clienteImoveis, clientesGuiaPagamento
	 * 
	 * @author Vivianne Sousa
	 * @date 09/10/2006
	 * @param FiltroDevolucaoHistorico
	 * @return Collection<DevolucaoHistorico>
	 * @throws ErroRepositorioException
	 */
	public Collection<DevolucaoHistorico> pesquisarDevolucaoHistorico(FiltroDevolucaoHistorico filtroDevolucaoHistorico){

		try{
			return this.getControladorArrecadacao().pesquisarDevolucaoHistorico(filtroDevolucaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0364] Efetuar Substituição de hidrômetro
	 * Validar Substituição de hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 25/07/2006
	 * @param matriculaImovel
	 *            ,
	 * @param numeroHidrometro
	 *            ,
	 * @param situacaoHidrometroSubstituido
	 *            return void
	 * @throws ControladorException
	 */
	public void validacaoSubstituicaoHidrometro(String matriculaImovel, String numeroHidrometro, String situacaoHidrometroSubstituido){

		try{
			this.getControladorAtendimentoPublico().validacaoSubstituicaoHidrometro(matriculaImovel, numeroHidrometro,
							situacaoHidrometroSubstituido);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0362] Efetuar Instalacao de hidrômetro
	 * Validar Instalacao de hidrômetro
	 * 
	 * @author Ana Maria
	 * @date 13/07/2006
	 * @param matriculaImovel
	 *            ,
	 * @param numeroHidrometro
	 *            ,
	 * @param tipoMedicao
	 *            return void
	 * @throws ControladorException
	 */
	public void validacaoInstalacaoHidrometro(String numeroHidrometro){

		try{
			this.getControladorAtendimentoPublico().validacaoInstalacaoHidrometro(numeroHidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * histórico para o Relatório
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos histórico do tipo Debito a Cobrar do Cliente
	 * 
	 * @author Vivianne Sousa
	 * @date 17/10/06
	 * @author Saulo Lima
	 * @date 08/01/2009
	 *       Nova forma de preencher o PagamentoRelatorioHelper e acréscimo do Generics nas coleções
	 * @return Collection<PagamentoRelatorioHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoRelatorioHelper> pesquisarPagamentoHistoricoLocalidadeRelatorio(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoLocalidadeRelatorio(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, codigoSetorComercialInicial,
							codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores, idsCategoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0458] - Imprimir Ordem de serviço
	 * Pesquisa os campos da OS que serão impressos no Relatório de Ordem de
	 * Servico
	 * 
	 * @author Rafael Corrêa
	 * @date 17/10/2006
	 * @param idOrdemServico
	 * @return OSRelatorioHelper
	 */
	public Collection pesquisarOSRelatorio(Collection idsOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarOSRelatorio(idsOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0482] - Obter endereço Abreviado da ocorrência do RA
	 * Pesquisa o endereço abreviado da ocorrência do RA
	 * 
	 * @author Rafael Corrêa
	 * @date 17/10/2006
	 * @param idRegistroAtendimento
	 */

	public String obterEnderecoAbreviadoOcorrenciaRA(Integer idRA){

		try{
			return this.getControladorRegistroAtendimento().obterEnderecoAbreviadoOcorrenciaRA(idRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0482] - Obter endereço Abreviado da ocorrência do RA
	 * Pesquisa o Endereco Abreviado da OS
	 * 
	 * @author Rafael Corrêa
	 * @date 19/10/2006
	 * @param idOrdemServico
	 * @throws ControladorException
	 */

	public String obterEnderecoAbreviadoOS(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().obterEnderecoAbreviadoOS(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 15/09/2006
	 * @param numeroOS
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection<Material> obterMateriaisProgramados(Integer numeroOS){

		try{
			return this.getControladorOrdemServico().obterMateriaisProgramados(numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] Manter Dados das Atividades da Ordem de serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 15/09/2006
	 * @param numeroOS
	 *            ,
	 *            idMaterial
	 * @return BigDecimal
	 * @throws ErroRepositorioException
	 */
	public BigDecimal obterQuantidadePadraoMaterial(Integer numeroOS, Integer idMaterial){

		try{
			return this.getControladorOrdemServico().obterQuantidadePadraoMaterial(numeroOS, idMaterial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public ArrecadacaoDadosDiarios consultarDadosDiarios(int idGerenciaRegional, int idLocalidade, int idElo){

		try{
			return getControladorArrecadacao().consultarDadosDiarios(idGerenciaRegional, idLocalidade, idElo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa todos as funcionalidades iniciadas que representam os Relatórios
	 * batch do sistema por usuário
	 * 
	 * @author Rodrigo Silveira
	 * @date 25/10/2006
	 */
	public Collection<Object[]> pesquisarRelatoriosBatchPorUsuarioSistema(int idProcesso, int pageOffset){

		try{
			return getControladorBatch().pesquisarRelatoriosBatchPorUsuarioSistema(idProcesso, pageOffset);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Long pesquisarQuantidadeRelatoriosBatchPorUsuarioSistema(int idProcesso){

		try{
			return getControladorBatch().pesquisarQuantidadeRelatoriosBatchPorUsuarioSistema(idProcesso);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Caso Não exista para o imóvel RA encerrada por execução com especificação
	 * da solicitação que permita a manuntenção de imóvel
	 * 
	 * @author Rafael Santos
	 * @since 26/10/2006
	 */
	public void verificarExistenciaRegistroAtendimento(Integer idImovel, String mensagemErro, char codigoConstante){

		try{
			getControladorRegistroAtendimento().verificarExistenciaRegistroAtendimento(idImovel, mensagemErro, codigoConstante);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Caso Não exista para o imóvel RA encerrada por execução com especificação
	 * da solicitação No caso de Tarifa Social
	 * 
	 * @author Rafael Santos
	 * @since 26/10/2006
	 */
	/**
	 * Caso Não exista para o imóvel RA encerrada por execução com especificação
	 * da solicitação que permita a manuntenção de imóvel
	 * 
	 * @author Rafael Santos
	 * @since 26/10/2006
	 */
	public void verificarExistenciaRegistroAtendimentoTarifaSocial(Integer idImovel, String mensagemErro){

		try{
			getControladorRegistroAtendimento().verificarExistenciaRegistroAtendimentoTarifaSocial(idImovel, mensagemErro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Imprimir OS
	 * Atualiza a data de emissão e a de última alteração de OS quando gerar o
	 * Relatório
	 * 
	 * @author Rafael Corrêa
	 * @date 26/10/2006
	 * @param colecaoIdsOrdemServico
	 */
	public void atualizarOrdemServicoRelatorio(Collection colecaoIdsOrdemServico){

		try{
			getControladorOrdemServico().atualizarOrdemServicoRelatorio(colecaoIdsOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método valida os dados que são necessarios para a inserção do
	 * serviço tipo referencia.
	 * 
	 * @author Flávio Leonardo
	 * @date 31/10/2006
	 * @param servicoTipoReferencia
	 * @return
	 * @throws ControladorException
	 */
	public void validarTipoServicoReferenciaParaInsercao(ServicoTipoReferencia servicoTipoReferencia){

		try{
			getControladorAtendimentoPublico().validarTipoServicoReferenciaParaInsercao(servicoTipoReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Raphael Rossiter
	 * @date 30/10/2006
	 * @return Object[]
	 * @throws ErroRepositorioException
	 */
	public Conta pesquisarContaRetificacao(Integer idConta){

		try{

			return this.getControladorFaturamento().pesquisarContaRetificacao(idConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de Cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda Não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das ações de Cobrança do Cronograma
	 * Pós-condição: Resumo das ações de Cobrança gerado e atividade encerrar da
	 * ação de Cobrança, se for o caso, realizada
	 * 
	 * @author Rafael Santos
	 * @date 16/10/2006
	 */
	public void gerarResumoAcoesCobrancaCronograma(Usuario usuarioLogado){

		/*
		 * try {
		 * this.getControladorCobranca().gerarResumoAcoesCobrancaCronograma(
		 * usuarioLogado); } catch (ControladorException ex) { throw new
		 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); }
		 */
	}

	/**
	 * [UC0387] Manter Tipo Perfil Servico [SB0001]Atualizar Tipo Perfil serviço
	 * 
	 * @author Kassia Albuquerque
	 * @date 01/11/2006
	 * @throws ErroRepositorioException
	 */
	public void atualizarServicoTipoPerfil(ServicoPerfilTipo servicoPerfilTipo, Usuario usuarioLogado){

		try{
			this.getControladorAtendimentoPublico().atualizarServicoTipoPerfil(servicoPerfilTipo, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtra o Pagamento Historico pelo seu id carregando os dados necessários
	 * [UC0549] Consultar Dados do Pagamento
	 * 
	 * @author Kássia Albuquerque
	 * @date 12/07/2007
	 * @throws ErroRepositorioException
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoPeloId(Integer idPagamentoHistorico){

		try{
			return this.getControladorImovel().pesquisarPagamentoHistoricoPeloId(idPagamentoHistorico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtra o Pagamento pelo seu id carregando os dados necessários
	 * [UC0549] Consultar Dados do Pagamento
	 * 
	 * @author Kássia Albuquerque
	 * @date 12/07/2007
	 * @throws ErroRepositorioException
	 */
	public Collection<Pagamento> pesquisarPagamentoPeloId(Integer idPagamento){

		try{
			return this.getControladorImovel().pesquisarPagamentoPeloId(idPagamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserir guia de pagamento no momento da exibição.
	 * [FS0003] Validar registro de atendimento [FS0007] Validar ordem de
	 * servico.
	 * 
	 * @author Rafael Pinto
	 * @date 02/11/2006
	 * @param RegistroAtendimento
	 *            ,OrdemServico,idImovel,idCliente
	 */
	public void validarExibirInserirGuiaPagamento(RegistroAtendimento ra, OrdemServico ordemServico, Integer idImovel, Integer idCliente){

		try{
			this.getControladorFaturamento().validarExibirInserirGuiaPagamento(ra, ordemServico, idImovel, idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0461] - Manter Dados das Atividades da Ordem de serviço
	 * Pesquisa os dados da OrdemServicoAtividade
	 * 
	 * @author Raphael Rossiter
	 * @date 01/11/2006
	 * @param idOrdemServico
	 *            ,
	 *            idAtividade
	 * @throws ErroRepositorioException
	 */
	public OrdemServicoAtividade pesquisarOrdemServicoAtividade(Integer numeroOS, Integer idAtividade){

		try{

			return this.getControladorOrdemServico().pesquisarOrdemServicoAtividade(numeroOS, idAtividade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0461] - Manter Dados das Atividades da Ordem de serviço
	 * Pesquisa os dados da OsAtividadeMaterialExecucao associada à
	 * OrdemServicoAtividade para a data informada
	 * 
	 * @author Raphael Rossiter
	 * @date 01/11/2006
	 * @param idOrdemServicoAtividade
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarOsAtividadeMaterialExecucao(Integer idOrdemServicoAtividade){

		try{

			return this.getControladorOrdemServico().pesquisarOsAtividadeMaterialExecucao(idOrdemServicoAtividade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0494] Gerar Numeração de RA Manual
	 * 
	 * @author Raphael Rossiter
	 * @date 06/11/2006
	 * @throws ControladorException
	 */
	public GerarNumeracaoRAManualHelper gerarNumeracaoRAManual(Integer quantidade, Integer idUnidadeOrganizacional){

		try{

			return this.getControladorRegistroAtendimento().gerarNumeracaoRAManual(quantidade, idUnidadeOrganizacional);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método se destina a validar todas as situações e particularidades da
	 * inserir guia de devolução no momento da exibição.
	 * [FS0002] Validar registro de atendimento [FS0004] Validar ordem de
	 * servico.
	 * 
	 * @author Rafael Pinto
	 * @date 06/11/2006
	 * @param RegistroAtendimento
	 *            ,OrdemServico
	 */

	public void validarExibirInserirGuiaDevolucao(RegistroAtendimento ra, OrdemServico ordemServico){

		try{
			this.getControladorArrecadacao().validarExibirInserirGuiaDevolucao(ra, ordemServico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica as permissões especiais do usuário por funcionalidade informada
	 * no sistema
	 * 
	 * @author Rodrigo Silveira
	 * @date 07/11/2006
	 * @param permissaoEspecial
	 * @param usuario
	 * @return
	 */
	public boolean verificarPermissaoEspecial(int permissaoEspecial, Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoEspecial(permissaoEspecial, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o resultado da pesquisa de OS
	 * [UC0492] - Gerar Relatório Acompanhamento de Execução de Ordem de serviço
	 * 
	 * @author Rafael Corrêa
	 * @date 01/11/06
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @param tipoOrdenacao
	 * @return Collection
	 */
	public Collection pesquisarOSGerarRelatorioAcompanhamentoExecucao(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String tipoOrdenacao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarOSGerarRelatorioAcompanhamentoExecucao(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, tipoOrdenacao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o resultado da pesquisa de OS
	 * [UC0492] - Gerar Relatório Produtividade de Equipe
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 11/04/2011
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @param tipoOrdenacao
	 * @return Collection
	 */
	public Collection pesquisarGerarRelatorioProdutividadeEquipe(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String tipoOrdenacao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarGerarRelatorioProdutividadeEquipe(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, tipoOrdenacao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0387] Manter Tipo Perfil serviço [SB0002] Remover Tipo Perfil serviço
	 * 
	 * @author Kassia Albuquerque
	 * @date 08/11/2006
	 * @pparam servicoPerfilTipo
	 * @throws ControladorException
	 */
	public void removerServicoTipoPerfil(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorAtendimentoPublico().removerServicoTipoPerfil(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna a quantidade resultado da pesquisa de OS
	 * [UC0492] - Gerar Relatório Acompanhamento de Execução de Ordem de serviço
	 * 
	 * @author Rafael Corrêa
	 * @date 01/11/06
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @return int
	 */
	public int pesquisarOSGerarRelatorioAcompanhamentoExecucaoCount(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarOSGerarRelatorioAcompanhamentoExecucaoCount(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna a quantidade resultado da pesquisa de OS
	 * [UC0492] - Gerar Relatório Produtividade de Equipe
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 11/04/2011
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @return int
	 */
	public int pesquisarGerarRelatorioProdutividadeEquipeCount(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarGerarRelatorioProdutividadeEquipeCount(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o resultado da pesquisa para
	 * "Gerar relatório Resumo de Ordens de Serviço não Executados por Equipe"
	 * 
	 * @author Péricles TAvares
	 * @date 09/05/2011
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @return int
	 */
	public int pesquisarGerarRelatorioResumoOSNaoExecutadasEquipeCount(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarGerarRelatorioResumoOSNaoExecutadasEquipeCount(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna o resultado da pesquisa para
	 * "Gerar relatório Resumo de Ordens de Serviço não Executados por Equipe"
	 * 
	 * @author Péricles TAvares
	 * @date 09/05/2011
	 * @param origemServico
	 * @param situacaoOS
	 * @param idsServicosTipos
	 * @param idUnidadeAtendimento
	 * @param idUnidadeAtual
	 * @param idUnidadeEncerramento
	 * @param periodoAtendimentoInicial
	 * @param periodoAtendimentoFinal
	 * @param periodoEncerramentoInicial
	 * @param periodoEncerramentoFinal
	 * @param idEquipeProgramacao
	 * @param idEquipeExecucao
	 * @return int
	 */
	public Collection pesquisarGerarRelatorioResumoOSNaoExecutadasEquipe(String origemServico, String situacaoOS,
					String[] idsServicosTipos, String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento,
					Date periodoAtendimentoInicial, Date periodoAtendimentoFinal, Date periodoEncerramentoInicial,
					Date periodoEncerramentoFinal, String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return this.getControladorOrdemServico().pesquisarGerarRelatorioResumoOSNaoExecutadasEquipe(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * retorna o objeto ResolucaoDiretoria com a maior data Vigência inicial
	 * [UC0214] - Efetuar Parcelamento de débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(Collection<Integer> idsGrupoUsuario){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(idsGrupoUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * retorna o objeto ResolucaoDiretoria com a maior data Vigência inicial e sem entrada
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 24/03/2011
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioComEntrada(){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioComEntrada();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0404] Manter Especificação da Situação do Imovel
	 * Este caso de uso remove a especificação e os Critério
	 * [SB0002] Remover Especificação da situacao
	 * 
	 * @author Rafael Pinto
	 * @created 08/11/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerEspecificacaoSituacaoImovel(String[] idsEspecificacaoSituacaoImovel, Usuario usuario, Date ultimaAlteracao){

		try{
			this.getControladorAtendimentoPublico().removerEspecificacaoSituacaoImovel(idsEspecificacaoSituacaoImovel, usuario,
							ultimaAlteracao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0404] - Manter Especificação da Situação do imóvel
	 * [SB0001] Atualizar Critério de Cobrança
	 * 
	 * @author Rafael Pinto
	 * @created 09/11/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void atualizarEspecificacaoSituacaoImovel(EspecificacaoImovelSituacao especificacaoImovelSituacao,
					Collection colecaoEspecificacaoCriterios, Collection colecaoEspecificacaoCriteriosRemovidas, Usuario usuario){

		try{
			this.getControladorRegistroAtendimento().atualizarEspecificacaoSituacaoImovel(especificacaoImovelSituacao,
							colecaoEspecificacaoCriterios, colecaoEspecificacaoCriteriosRemovidas, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa as equipes de acordo com os parâmetros informado pelo usuário
	 * [UC0370] - Filtrar Equipe
	 * 
	 * @author Rafael Corrêa
	 * @date 09/11/06
	 * @param idEquipe
	 * @param nome
	 * @param placa
	 * @param cargaTrabalho
	 * @param idUnidade
	 * @param idFuncionario
	 * @param idPerfilServico
	 * @param indicadorUso
	 * @param numeroPagina
	 * @return Collection
	 */
	public Collection pesquisarEquipes(String idEquipe, String nome, String placa, String cargaTrabalho, String idUnidade,
					String idFuncionario, String idPerfilServico, String indicadorUso, Integer idEquipeTipo, Integer numeroPagina){

		try{
			return this.getControladorOrdemServico().pesquisarEquipes(idEquipe, nome, placa, cargaTrabalho, idUnidade, idFuncionario,
							idPerfilServico, indicadorUso, idEquipeTipo, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a quantidade de registros retornados da pesquisa de equipe
	 * [UC0370] - Filtrar Equipe
	 * 
	 * @author Rafael Corrêa
	 * @date 09/11/06
	 * @param idEquipe
	 * @param nome
	 * @param placa
	 * @param cargaTrabalho
	 * @param idUnidade
	 * @param idFuncionario
	 * @param idPerfilServico
	 * @param indicadorUso
	 * @return int
	 */
	public int pesquisarEquipesCount(String idEquipe, String nome, String placa, String cargaTrabalho, String idUnidade,
					String idFuncionario, String idPerfilServico, String indicadorUso, Integer idEquipeTipo){

		try{
			return this.getControladorOrdemServico().pesquisarEquipesCount(idEquipe, nome, placa, cargaTrabalho, idUnidade, idFuncionario,
							idPerfilServico, indicadorUso, idEquipeTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica as permissões especiais do usuário por funcionalidade informada
	 * no sistema
	 * 
	 * @author Vivianne Sousa
	 * @date 09/11/2006
	 * @param permissaoEspecial
	 * @param usuario
	 * @param objeto
	 */
	public void verificarPermissaoEspecial(int permissaoEspecial, Usuario usuario, Object objeto){

		try{
			this.getControladorPermissaoEspecial().verificarPermissaoEspecial(permissaoEspecial, usuario, objeto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remove as equipes selecionadas pelo usuário e as equipes componentes
	 * associadas a ela
	 * [UC0372] - Manter Equipe
	 * 
	 * @author Rafael Corrêa
	 * @date 09/11/06
	 * @param idsEquipes
	 */
	public void removerEquipes(String[] idsEquipes, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().removerEquipes(idsEquipes, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remove os contratos de demanda selecionados pelo usuário
	 * [UC0513] - Manter Contrato de Demanda
	 * 
	 * @author Rafael Corrêa
	 * @date 27/06/2007
	 * @param idsContratosDemanda
	 * @throws ControladorException
	 */
	public void removerContratosDemanda(String[] idsContratosDemanda, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().removerContratosDemanda(idsContratosDemanda, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Faz verificações da inserção de dados de tarifa social de um imóvel
	 * 
	 * @param idImovel
	 *            Código do imóvel
	 */
	/*
	 * public void verificarProprietarioImovel(Integer idImovel) { try {
	 * this.getControladorTarifaSocial() .verificarProprietarioImovel(idImovel); }
	 * catch (ControladorException ex) { throw new
	 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */
	/**
	 * Faz verificações da inserção de dados de tarifa social de um imóvel
	 * 
	 * @param idImovel
	 *            Código do imóvel
	 */
	/*
	 * public void verificarUsuarioImovel(Integer idImovel) { try {
	 * this.getControladorTarifaSocial() .verificarUsuarioImovel(idImovel); }
	 * catch (ControladorException ex) { throw new
	 * FachadaException(ex.getMessage(), ex, ex .getParametroMensagem()); } }
	 */

	/**
	 * Valida a ordem de serviço
	 * [UC0488] - Informar Retorno Ordem de Fiscalização
	 * 
	 * @author Sávio Luiz
	 * @date 01/11/06
	 * @return Integer
	 */
	public void validarOrdemServico(Integer idOrdemServico){

		try{
			this.getControladorOrdemServico().validarOrdemServico(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0367] Informar Retorno Ordem de Fiscalização
	 * Recupera os parâmetros necessários da OS
	 * 
	 * @author Sávio Luiz
	 * @date 24/08/2006
	 * @param idOS
	 * @return OrdemServico
	 * @throws ControladorException
	 */
	public Object[] pesquisarParmsOS(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarParmsOS(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por verificar se o usuário tem abrangência sobre a
	 * operação e o nível de informação que estão sendo informados.
	 * [UC0XXX] Verificar Acesso abrangência
	 * 
	 * @author Pedro Alexandre
	 * @date 13/11/2006
	 * @param abrangencia
	 * @return
	 */
	public boolean verificarAcessoAbrangencia(Abrangencia abrangencia){

		try{
			return this.getControladorAcesso().verificarAcessoAbrangencia(abrangencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0372] - Manter Equipe
	 * Atualiza a equipe e seus componentes na base
	 * 
	 * @author Rafael Corrêa
	 * @date 14/11/2006
	 * @param equipe
	 */
	public void atualizarEquipe(Equipe equipe, Collection colecaoEquipeComponentes, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().atualizarEquipe(equipe, colecaoEquipeComponentes, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Faz verificações da inserção de dados de tarifa social de um imóvel
	 * 
	 * @param idImovel
	 *            Código do imóvel
	 */
	public void verificarProprietarioImovel(Integer idImovel){

		try{
			this.getControladorTarifaSocial().verificarProprietarioImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Faz verificações da inserção de dados de tarifa social de um imóvel
	 * 
	 * @param idImovel
	 *            Código do imóvel
	 */
	public Cliente verificarUsuarioImovel(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().verificarUsuarioImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar os pré-requisitos para o cadastramento de um imóvel na tarifa
	 * social
	 * 
	 * @param idImovel
	 *            Código do imovel
	 */
	public String[] verificarPreRequisitosCadastramentoTarifaSocial(Integer idImovel, Integer qtdEconomiasImovell){

		try{
			return this.getControladorTarifaSocial().verificarPreRequisitosCadastramentoTarifaSocial(idImovel, qtdEconomiasImovell);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @param clienteImovel
	 *            Descrição do parâmetro
	 * @param numeroCartaoSocial
	 *            Descrição do parâmetro
	 * @param dataValidadeCartaoSocial
	 *            Descrição do parâmetro
	 * @param numeroParcelasCartaoSocial
	 *            Descrição do parâmetro
	 * @param valorRendaFamiliar
	 *            Descrição do parâmetro
	 * @param tarifaSocialCartaoTipo
	 *            Descrição do parâmetro
	 * @param tipoRenda
	 *            Descrição do parâmetro
	 */
	public String[] verificarPreenchimentoInserirDadosTarifaSocial(Long numeroCelpe, BigDecimal areaConstruida, BigDecimal numeroIPTU,
					Integer idImovel, String numeroCartaoSocial, String dataValidadeCartaoSocial, String numeroParcelasCartaoSocial,
					Integer consumoMedio, BigDecimal valorRendaFamiliar, String tarifaSocialCartaoTipo, String tipoRenda){

		try{
			return this.getControladorTarifaSocial().verificarPreenchimentoInserirDadosTarifaSocial(numeroCelpe, areaConstruida,
							numeroIPTU, idImovel, numeroCartaoSocial, dataValidadeCartaoSocial, numeroParcelasCartaoSocial, consumoMedio,
							valorRendaFamiliar, tarifaSocialCartaoTipo, tipoRenda);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC00054] Inserir Tarifa Social
	 * [FS00001] Verificar Registro Atendimento
	 * 
	 * @author Rafael Santos
	 * @date 10/11/2006
	 * @param idRegistroAtendimento
	 * @return
	 * @throws ControladorException
	 */
	public RegistroAtendimento verificarRegistroAtendimentoTarifaSocial(String idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().verificarRegistroAtendimentoTarifaSocial(idRegistroAtendimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0489] - Consultar Resumo das ações de Cobrança
	 * 
	 * @author Ana Maria
	 * @date 06/11/2006
	 * @return CobrancaAcaoHelper
	 * @throws ErroRepositorioException
	 */
	public Collection consultarResumoCobrancaAcao(InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsultaHelper){

		try{

			return this.getControladorGerencialCobranca().consultarResumoCobrancaAcao(informarDadosGeracaoResumoAcaoConsultaHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0489] - Consultar Resumo das ações de Cobrança
	 * 
	 * @author Ana Maria
	 * @date 06/11/2006
	 * @return CobrancaAcaoHelper
	 * @throws ErroRepositorioException
	 */
	public Collection consultarResumoCobrancaAcaoPerfil(int anoMesReferencia, Integer idCobrancaAcao, Integer idCobrancaAcaoSituacao,
					Integer idCobrancaAcaoDebito, Short idIndicador,
					InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsultaHelper){

		try{

			return this.getControladorGerencialCobranca().consultarResumoCobrancaAcaoPerfil(anoMesReferencia, idCobrancaAcao,
							idCobrancaAcaoSituacao, idCobrancaAcaoDebito, idIndicador, informarDadosGeracaoResumoAcaoConsultaHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/*
	 * [SB0006] - Atualizar Programação de Abastecimento na Base de Dados
	 * [SB0007] - Atualizar Programação de Manutenção na Base de Dados
	 * @author Rafael Pinto @created 09/11/2006
	 * @throws ControladorException Controlador Exception
	 */
	public void atualizarProgramacaoAbastecimentoManutencao(Collection colecaoProgramacaoAbastecimento,
					Collection colecaoProgramacaoAbastecimentoRemovidas, Collection colecaoProgramacaoManutencao,
					Collection colecaoProgramacaoManutencaoRemovidas, Usuario usuario){

		try{
			this.getControladorOperacional().atualizarProgramacaoAbastecimentoManutencao(colecaoProgramacaoAbastecimento,
							colecaoProgramacaoAbastecimentoRemovidas, colecaoProgramacaoManutencao, colecaoProgramacaoManutencaoRemovidas,
							usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Integer inserirProcessoIniciadoCobrancaComandado(Collection<Integer> idsCronograma, Collection<Integer> idsEventuais,
					Date dataHoraAgendamento, Usuario usuario, Integer idProcessoIniciadoVinculado,
					Integer idFaturamentoGrupoCronogramaMensal){

		try{
			return this.getControladorBatch().inserirProcessoIniciadoCobrancaComandado(idsCronograma, idsEventuais, dataHoraAgendamento,
							usuario, idProcessoIniciadoVinculado, idFaturamentoGrupoCronogramaMensal);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0383] Manter Material [SB0003] Remover Material
	 * 
	 * @author Kassia Albuquerque
	 * @date 16/11/2006
	 * @pparam material
	 * @throws ControladorException
	 */
	public void removerMaterial(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorAtendimentoPublico().removerMaterial(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por verificar se o usuário que está tentando remover
	 * as quadras tem abrangência
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 18/11/2006
	 * @param ids
	 * @param pacoteNomeObjeto
	 * @param operacaoEfetuada
	 * @param acaoUsuarioHelper
	 * @param usuarioLogado
	 */
	public void removerQuadra(String[] ids, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper, Usuario usuarioLogado){

		try{
			this.getControladorLocalidade().removerQuadra(ids, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0383] Manter Material [SB0001] Atualizar Material
	 * 
	 * @author Kassia Albuquerque
	 * @date 20/11/2006
	 * @throws ErroRepositorioException
	 */
	public void atualizarMaterial(Material material, Usuario usuarioLogado){

		try{
			this.getControladorAtendimentoPublico().atualizarMaterial(material, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0383] Manter Material [FS0001] Atualizar Material [FS0002] Atualizar
	 * Material
	 * 
	 * @author Kassia Albuquerque
	 * @date 20/11/2006
	 * @throws ErroRepositorioException
	 */

	// [FS0001] VERIFICAR EXISTENCIA DA DESCRIção
	// [FS0002] VERIFICAR EXISTENCIA DA DESCRIção ABREVIADA
	public void verificarExistenciaDescricaoMaterial(Material material){

		try{
			this.getControladorOrdemServico().verificarExistenciaDescricaoMaterial(material);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 23/11/2006
	 * @param filtroImovel
	 * @param usuarioLogado
	 * @return
	 */
	public Imovel pesquisarImovelContaManter(FiltroImovel filtroImovel, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().pesquisarImovelContaManter(filtroImovel, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar hidrômetro
	 * Pesquisa o imóvel no qual o hidrômetro está instalado
	 * 
	 * @author Rafael Corrêa
	 * @date 23/11/2006
	 * @param idHidrometro
	 * @return String
	 * @throws ControladorException
	 */
	public String pesquisarImovelHidrometroInstalado(Integer idHidrometro){

		try{
			return this.getControladorMicromedicao().pesquisarImovelHidrometroInstalado(idHidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0401] Atualizar Tipo de Solicitação com Especificação
	 * [SB0001] - Atualizar Tipo Solicitação com Especificações
	 * 
	 * @author Rômulo Aurélio
	 * @date 01/08/2006
	 * @param solicitacaoTipo
	 *            ,
	 *            colecaoSolicitacaoTipoEspecificacao, usuarioLogado
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer atualizarTipoSolicitacaoEspecificacao(SolicitacaoTipo solicitacaoTipo, Collection colecaoSolicitacaoTipoEspecificacao,
					Usuario usuarioLogado, Collection colecaoSolicitacaoTipoEspecificacaoRemovidos){

		try{
			return this.getControladorRegistroAtendimento().atualizarTipoSolicitacaoEspecificacao(solicitacaoTipo,
							colecaoSolicitacaoTipoEspecificacao, usuarioLogado, colecaoSolicitacaoTipoEspecificacaoRemovidos);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 23/11/2006
	 * @param filtroImovel
	 * @param usuarioLogado
	 * @return
	 */
	public Object pesquisarDataUltimaAlteracaoConta(Integer idConta){

		try{
			return this.getControladorFaturamento().pesquisarDataUltimaAlteracaoConta(idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0450] Pesquisar Ordem de Servico verifica o tamanho da consulta
	 * [SB001] Selecionar Ordem de Servico por Situação [SB002] Selecionar Ordem
	 * de Servico por Situação da Programação [SB003] Selecionar Ordem de
	 * Servico por Matricula do Imovel [SB004] Selecionar Ordem de Servico por
	 * Codigo do Cliente [SB005] Selecionar Ordem de Servico por Unidade
	 * Superior [SB006] Selecionar Ordem de Servico por Município [SB007]
	 * Selecionar Ordem de Servico por Bairro [SB008] Selecionar Ordem de
	 * Servico por Bairro Logradouro
	 * 
	 * @author Rafael Pinto
	 * @date 18/08/2006
	 * @param PesquisarOrdemServicoHelper
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarOrdemServicoTamanho(PesquisarOrdemServicoHelper filtro){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoTamanho(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo responsável pela remoção das guias de devolução
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 24/11/2006
	 * @param idImovel
	 * @param usuarioLogado
	 * @param ids
	 * @param pacoteNomeObjeto
	 * @param operacaoEfetuada
	 * @param acaoUsuarioHelper
	 */
	public void removerGuiaDevolucao(String idImovel, Usuario usuarioLogado, String[] ids, String pacoteNomeObjeto,
					OperacaoEfetuada operacaoEfetuada, Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		try{
			this.getControladorArrecadacao().removerGuiaDevolucao(idImovel, usuarioLogado, ids, pacoteNomeObjeto, operacaoEfetuada,
							acaoUsuarioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Usado pelo Filtrar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 27/11/2006
	 */
	public Collection pesquisarImovel(String idImovel, String idLocalidade, String codigoSetorComercial, String numeroQuadra,
					String idHidrometroHistInst, String lote, String subLote, String codigoCliente, String idMunicipio, String cep,
					String idBairro, String idLogradouro, boolean pesquisarImovelManterVinculo, boolean pesquisarImovelCondominio,
					Integer numeroPagina){

		try{
			return this.getControladorImovel().pesquisarImovel(idImovel, idLocalidade, codigoSetorComercial, numeroQuadra,
							idHidrometroHistInst, lote, subLote, codigoCliente, idMunicipio, cep, idBairro, idLogradouro,
							pesquisarImovelManterVinculo, pesquisarImovelCondominio, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Usado pelo Filtrar Imovel e o Pesquisar Imovel Pesquisa a quantidade de
	 * imoveis
	 * 
	 * @author Rafael Santos
	 * @param numeroHidrometroImovel
	 *            TODO
	 * @param numeroImovel
	 *            TODO
	 * @param idLogradouro2
	 * @date 27/11/2006
	 * @author eduardo henrique
	 * @date 16/12/2008
	 *       Alteração no filtro de Num. de Hidrômetro do Pesquisar Imóvel.
	 */
	public Integer pesquisarQuantidadeImovel(String idImovel, String idLocalidade, String codigoSetorComercial, String numeroQuadra,
					String idHidrometroHistInst, String lote, String subLote, String codigoCliente, String idMunicipio, String cep,
					String idBairro, String idLogradouro, boolean pesquisarImovelManterVinculo, boolean pesquisarImovelCondominio,
					String numeroHidrometroImovel, String numeroImovel){

		try{
			return this.getControladorImovel().pesquisarQuantidadeImovel(idImovel, idLocalidade, codigoSetorComercial, numeroQuadra,
							idHidrometroHistInst, lote, subLote, codigoCliente, idMunicipio, cep, idBairro, idLogradouro,
							pesquisarImovelManterVinculo, pesquisarImovelCondominio, numeroHidrometroImovel, numeroImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Usado pelo Pesquisar Imovel Retorno o Imovel, com o Nome do Cliente,
	 * Matricula e endereço
	 * 
	 * @author Rafael Santos
	 * @date 27/11/2006
	 * @author eduardo henrique
	 * @date 30/01/2009
	 *       Inclusao do Filtro de Numero do Imovel.
	 */
	public Collection pesquisarImovelInscricao(String idImovel, String idLocalidade, String codigoSetorComercial, String numeroQuadra,
					String idHidrometro, String lote, String subLote, String codigoCliente, String idMunicipio, String cep,
					String idBairro, String idLogradouro, boolean pesquisarImovelCondominio, String numeroImovel, Integer numeroPagina){

		try{
			return this.getControladorImovel().pesquisarImovelInscricao(idImovel, idLocalidade, codigoSetorComercial, numeroQuadra,
							idHidrometro, lote, subLote, codigoCliente, idMunicipio, cep, idBairro, idLogradouro,
							pesquisarImovelCondominio, numeroImovel, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Usado pelo Pesquisar Imovel Retorno o Imovel, com o Nome do Cliente,
	 * Matricula e endereço
	 * 
	 * @author Rafael Santos
	 * @date 27/11/2006
	 */
	/*
	 * public Collection pesquisarImovelInscricaoNew(String idImovel, String
	 * idLocalidade, String codigoSetorComercial, String numeroQuadra, String
	 * lote, String subLote, String codigoCliente, String idMunicipio, String
	 * cep, String idBairro, String idLogradouro, boolean
	 * pesquisarImovelCondominio, Integer numeroPagina) {
	 * try { return this.getControladorImovel().pesquisarImovelInscricaoNew(
	 * idImovel, idLocalidade, codigoSetorComercial, numeroQuadra, lote,
	 * subLote, codigoCliente, idMunicipio, cep, idBairro, idLogradouro,
	 * pesquisarImovelCondominio, numeroPagina); } catch (ControladorException
	 * ex) { throw new FachadaException(ex.getMessage(), ex, ex
	 * .getParametroMensagem()); } }
	 */

	/**
	 * <Breve descrição sobre o caso de uso>
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 23/11/2006
	 * @param filtroImovel
	 * @param usuarioLogado
	 * @return
	 */
	public Collection<Imovel> pesquisarImovelEfetuarParcelamento(FiltroImovel filtroImovel, Usuario usuarioLogado){

		try{
			return this.getControladorCobranca().pesquisarImovelEfetuarParcelamento(filtroImovel, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0490] Informar Ocorrencia de Cadastro e/ou Anormalidade de Elo
	 * 
	 * @author Tiago Moreno
	 * @date 27/11/2006
	 * @param idImovel
	 * @param idOcorrenciaCadastro
	 * @param idAnormalidadeElo
	 * @param dataOcorrenciaCadastro
	 * @param dataAnormalidadeElo
	 * @param uploadPictureCadastro
	 * @param uploadPictureAnormalidade
	 * @param idFuncionarioOcorrencia
	 *            TODO
	 * @param idFuncionarioAnormalidade
	 *            TODO
	 * @param usuarioLogado
	 * @return
	 * @throws ControladorException
	 */
	public void informarOcorrenciaCadastroAnormalidadeElo(String idImovel, String idOcorrenciaCadastro, String idAnormalidadeElo,
					String dataOcorrenciaCadastro, String dataAnormalidadeElo, byte[] uploadPictureCadastro,
					byte[] uploadPictureAnormalidade, String idFuncionarioOcorrencia, String idFuncionarioAnormalidade,
					Usuario usuarioLogado){

		try{
			this.getControladorImovel().informarOcorrenciaCadastroAnormalidadeElo(idImovel, idOcorrenciaCadastro, idAnormalidadeElo,
							dataOcorrenciaCadastro, dataAnormalidadeElo, uploadPictureCadastro, uploadPictureAnormalidade,
							idFuncionarioOcorrencia, idFuncionarioAnormalidade, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0214] - Efetuar Parcelamento de débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Boolean verificarQtdeReparcelamentoPerfil(Integer idPerfilParc, Short numeroReparcelamentoConsecutivos){

		try{
			return this.getControladorCobranca().verificarQtdeReparcelamentoPerfil(idPerfilParc, numeroReparcelamentoConsecutivos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0498] Efetuar Ligação de Água com Instalação de hidrômetro.
	 * Permite validar o efetuar ligação de Água com Instalação de hidrômetro
	 * Exibir ou pelo menu ou pela funcionalidade encerrar a execução da ordem
	 * de serão.
	 * [FS0008] Verificar Situação Rede de Água na Quadra. [FS0007] Verificar
	 * Situação do Imovel. [FS0002] Validar Situação de Água do imóvel
	 * 
	 * @author Rafael Corrêa
	 * @date 27/11/2006
	 * @param imovel
	 * @throws ControladorException
	 */
	public void validarLigacaoAguaComInstalacaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarLigacaoAguaComInstalacaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para aceitar um valor de entrada menor q o
	 * valor Mínimo de entrada na terceira página de Efetuar Parcelamento
	 * débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2006
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoValMinimoEntrada(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoValMinimoEntrada(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0498] Efetuar Ligação de Água com Instalação de hidrômetro.
	 * Permite efetuar ligação de Água com Instalação de Hidrometro ou pelo menu
	 * ou pela funcionalidade encerrar a execução da ordem de serão.
	 * 
	 * @author Rafael Corrêa
	 * @date 29/11/2006
	 * @param integracaoComercialHelper
	 */
	public void efetuarLigacaoAguaComInstalacaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper, Usuario usuario){

		try{

			this.getControladorAtendimentoPublico().efetuarLigacaoAguaComInstalacaoHidrometro(integracaoComercialHelper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite efetuar a Ligação de Água com Instalação de Hidrometro sem RA
	 * 
	 * @author Saulo Lima
	 * @since 12/02/2009
	 * @param LigacaoAgua
	 * @param HidrometroInstalacaoHistorico
	 */
	public void efetuarLigacaoAguaComInstalacaoHidrometroSemRA(LigacaoAgua ligacaoAgua,
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico){

		try{
			this.getControladorAtendimentoPublico().efetuarLigacaoAguaComInstalacaoHidrometroSemRA(ligacaoAgua,
							hidrometroInstalacaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Efetua a instalaçao de varios hidrometros em lote
	 * 
	 * @author Andre Nishimura
	 * @param usuario
	 * @date 17/08/2009
	 */

	public Collection[] efetuarInstalacaoHidrometrosEmLote(InputStream inputStream, Usuario usuario){

		try{
			return getControladorAtendimentoPublico().efetuarInstalacaoHidrometroEmLote(inputStream, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Usado pelo Filtrar Cliente Filtra o Cliente usando os paramentos
	 * informados
	 * 
	 * @author Rafael Santos
	 * @date 27/11/2006
	 * @param inscricaoEstadual
	 *            adicionado à consulta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection filtrarCliente(String codigo, String cpf, String rg, String cnpj, String nome, String nomeMae, String cep,
					String idMunicipio, String idBairro, String idLogradouro, String indicadorUso, String tipoPesquisa,
					String tipoPesquisaNomeMae, String clienteTipo, Integer numeroPagina, String inscricaoEstadual,
					String indicadorContaBraille, String documentoValidado, String numeroBeneficio){

		try{
			return this.getControladorCliente().filtrarCliente(codigo, cpf, rg, cnpj, nome, nomeMae, cep, idMunicipio, idBairro,
							idLogradouro, indicadorUso, tipoPesquisa, tipoPesquisaNomeMae, clienteTipo, numeroPagina, inscricaoEstadual,
							indicadorContaBraille, documentoValidado, numeroBeneficio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Usado pelo Filtrar Cliente Filtra a quantidade de Clientes usando os
	 * paramentos informados
	 * 
	 * @author Rafael Santos
	 * @date 27/11/2006
	 * @param inscricaoEstadual
	 *            adicinado ao Filtro
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object filtrarQuantidadeCliente(String codigo, String cpf, String rg, String cnpj, String nome, String nomeMae, String cep,
					String idMunicipio, String idBairro, String idLogradouro, String indicadorUso, String tipoPesquisa,
					String tipoPesquisaNomeMae, String clienteTipo, String inscricaoEstadual, String indicadorContaBraille,
					String documentoValidado, String numeroBeneficio){

		try{
			return this.getControladorCliente().filtrarQuantidadeCliente(codigo, cpf, rg, cnpj, nome, nomeMae, cep, idMunicipio, idBairro,
							idLogradouro, indicadorUso, tipoPesquisa, tipoPesquisaNomeMae, clienteTipo, inscricaoEstadual,
							indicadorContaBraille, documentoValidado, numeroBeneficio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0375] Manter Unidade Organizacional
	 * 
	 * @author Ana Maria
	 * @date 24/11/2006
	 * @param unidadeOrganizacional
	 * @throws ControladorException
	 */
	public void atualizarUnidadeOrganizacional(UnidadeOrganizacional unidadeOrganizacional, Usuario usuario){

		try{
			this.getControladorUnidade().atualizarUnidadeOrganizacional(unidadeOrganizacional, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0375] Manter Unidade Organizacional
	 * 
	 * @author Ana Maria
	 * @date 28/11/2006
	 * @param unidadeOrganizacional
	 * @throws ControladorException
	 */
	public UnidadeOrganizacional pesquisarUnidadeOrganizacional(Integer idUnidadeOrganizacional){

		try{
			return this.getControladorUnidade().pesquisarUnidadeOrganizacional(idUnidadeOrganizacional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarUnidadeOrganizacionalFiltro(FiltroUnidadeOrganizacional filtroUnidadeOrganizacional, Integer numeroPagina){

		try{
			return this.getControladorUnidade().pesquisarUnidadeOrganizacionalFiltro(filtroUnidadeOrganizacional, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarUnidadeOrganizacionalFiltroCount(FiltroUnidadeOrganizacional filtroUnidadeOrganizacional){

		try{
			return this.getControladorUnidade().pesquisarUnidadeOrganizacionalFiltroCount(filtroUnidadeOrganizacional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0498] - Efetuar Ligação de Água com Instalaação de hidrômetro
	 * Pesquisa o id do hidrômetro e a sua situação pelo número
	 * 
	 * @author Rafael Corrêa
	 * @date 29/11/2006
	 * @param numeroHidrometro
	 * @return Hidrometro
	 * @throws ControladorException
	 */
	public Hidrometro pesquisarHidrometroPeloNumero(String numeroHidrometro){

		try{
			return this.getControladorMicromedicao().pesquisarHidrometroPeloNumero(numeroHidrometro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0263] Filtrar Movimento dos Arrecadadores
	 * 
	 * @author Vivianne Sousa
	 * @date 30/11/06
	 * @param codigoBanco
	 * @param codigoRemessa
	 * @param descricaoIdentificacaoServico
	 * @param numeroSequencialArquivo
	 * @param dataGeracaoInicio
	 * @param dataGeracaoFim
	 * @param ultimaAlteracaoInicio
	 * @param ultimaAlteracaoFim
	 * @param descricaoOcorrencia
	 * @param indicadorAceitacao
	 * @param numeroPagina
	 * @param concessionaria
	 * @param indicadorAbertoFechado
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<FiltrarMovimentoArrecadadoresHelper> filtrarMovimentoArrecadadorParaPaginacao(String codigoBanco,
					String codigoRemessa, String descricaoIdentificacaoServico, String idImovel, String numeroSequencialArquivo,
					Date dataGeracaoInicio, Date dataGeracaoFim, Date ultimaAlteracaoInicio, Date ultimaAlteracaoFim,
					String descricaoOcorrencia, String indicadorAceitacao, Integer numeroPagina, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarMovimentoArrecadadorParaPaginacao(codigoBanco, codigoRemessa,
							descricaoIdentificacaoServico, idImovel, numeroSequencialArquivo, dataGeracaoInicio, dataGeracaoFim,
							ultimaAlteracaoInicio, ultimaAlteracaoFim, descricaoOcorrencia, indicadorAceitacao, numeroPagina,
							idConcessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0263] Filtrar Movimento dos Arrecadadores
	 * 
	 * @author Vivianne Sousa
	 * @date 30/11/06
	 * @param codigoBanco
	 * @param codigoRemessa
	 * @param descricaoIdentificacaoServico
	 * @param numeroSequencialArquivo
	 * @param dataGeracaoInicio
	 * @param dataGeracaoFim
	 * @param ultimaAlteracaoInicio
	 * @param ultimaAlteracaoFim
	 * @param descricaoOcorrencia
	 * @param indicadorAceitacao
	 * @param concessionaria
	 * @param indicadorAbertoFechado
	 * @throws ControladorException
	 */
	public Integer filtrarMovimentoArrecadadoresCount(String codigoBanco, String codigoRemessa, String descricaoIdentificacaoServico,
					String idImovel, String numeroSequencialArquivo, Date dataGeracaoInicio, Date dataGeracaoFim,
					Date ultimaAlteracaoInicio, Date ultimaAlteracaoFim, String descricaoOcorrencia, String indicadorAceitacao,
					String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarMovimentoArrecadadoresCount(codigoBanco, codigoRemessa,
							descricaoIdentificacaoServico, idImovel, numeroSequencialArquivo, dataGeracaoInicio, dataGeracaoFim,
							ultimaAlteracaoInicio, ultimaAlteracaoFim, descricaoOcorrencia, indicadorAceitacao, idConcessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [SB0027] é Inclui Solicitante do Registro de Atendimento
	 * (REGISTRO_ATENDIMENTO_SOLICITANTE)
	 * 
	 * @author Raphael Rossiter
	 * @date 24/08/2006
	 * @throws ControladorException
	 */
	public boolean clienteObrigatorioInserirRegistroAtendimento(Integer idEspecificacao){

		try{
			return this.getControladorRegistroAtendimento().clienteObrigatorioInserirRegistroAtendimento(idEspecificacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o imóvel pelo id fazendo os carregamentos necessários
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Corrêa
	 * @date 16/12/06
	 * @return Imovel
	 */
	public Imovel pesquisarImovelPagamento(Integer idImovel){

		try{
			return this.getControladorArrecadacao().pesquisarImovelPagamento(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o cliente pelo id fazendo os carregamentos necessários
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Corrêa
	 * @date 16/12/06
	 * @return Cliente
	 * @throws ErroRepositorioException
	 */
	public Cliente pesquisarClientePagamento(Integer idCliente){

		try{
			return this.getControladorArrecadacao().pesquisarClientePagamento(idCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o endereço de correspondência do cliente pelo seu id fazendo os
	 * carregamentos necessários
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Corrêa
	 * @date 16/12/06
	 * @return ClienteEndereco
	 */
	public ClienteEndereco pesquisarClienteEnderecoPagamento(Integer idCliente){

		try{
			return this.getControladorArrecadacao().pesquisarClienteEnderecoPagamento(idCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o telefone padrão do cliente pelo seu id fazendo os
	 * carregamentos necessários
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Corrêa
	 * @date 16/12/06
	 * @return ClienteFone
	 */
	public ClienteFone pesquisarClienteFonePagamento(Integer idCliente){

		try{
			return this.getControladorArrecadacao().pesquisarClienteFonePagamento(idCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os clientes do imóvel pelo seu id do imóvel fazendo os
	 * carregamentos necessários
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Rafael Corrêa
	 * @date 16/12/06
	 * @return Collection<ClienteImovel>
	 * @throws ControladorException
	 */
	public Collection<ClienteImovel> pesquisarClientesImoveisPagamento(Integer idImovel){

		try{
			return this.getControladorArrecadacao().pesquisarClientesImoveisPagamento(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * Pesquisa os pagamentos do tipo Debito a Cobrar do Cliente
	 * pesquisarPagamentoLocalidade
	 * 
	 * @author Rafael Corrêa
	 * @date 21/12/06
	 * @return Collection<Pagamento>
	 * @throws ErroRepositorioException
	 */
	public Collection<Pagamento> pesquisarPagamentoMovimentoArrecadadorParaPaginacao(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{

			return this.getControladorArrecadacao().pesquisarPagamentoMovimentoArrecadadorParaPaginacao(idImovel, idCliente, idTipoRelacao,
							localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * Este caso de uso cria um filtro que será usado na pesquisa de pagamentos
	 * [UC0255] Filtrar Pagamentos
	 * 
	 * @author Saulo Lima
	 * @date 25/08/2009
	 * @return Collection<PagamentoHistorico>
	 */
	public Collection<PagamentoHistorico> pesquisarPagamentoHistoricoMovimentoArrecadadorParaPaginacao(String idImovel, String idCliente,
					String idTipoRelacao, String localidadeInicial, String localidadeFinal, String idAvisoBancario, String idArrecadador,
					String periodoArrecadacaoInicial, String periodoArrecadacaoFinal, String periodoPagamentoInicio,
					String periodoPagamentoFim, Date dataPagamentoInicial, Date dataPagamentoFinal, String[] idsPagamentosSituacoes,
					String[] idsDebitosTipos, String[] idsArrecadacaoForma, String[] idsDocumentosTipos, Integer numeroPagina,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String indicadorTotalizarPorDataPagamento,
					Collection<Integer> idsArrecadadores, String[] idsCategoria){

		try{

			return this.getControladorArrecadacao().pesquisarPagamentoHistoricoMovimentoArrecadadorParaPaginacao(idImovel, idCliente,
							idTipoRelacao, localidadeInicial, localidadeFinal, idAvisoBancario, idArrecadador, periodoArrecadacaoInicial,
							periodoArrecadacaoFinal, periodoPagamentoInicio, periodoPagamentoFim, dataPagamentoInicial, dataPagamentoFinal,
							idsPagamentosSituacoes, idsDebitosTipos, idsArrecadacaoForma, idsDocumentosTipos, numeroPagina,
							codigoSetorComercialInicial, codigoSetorComercialFinal, indicadorTotalizarPorDataPagamento, idsArrecadadores,
							idsCategoria);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0490] Informar Situação de Cobrança
	 * 
	 * @author Tiago Moreno
	 * @date 09/12/2006
	 * @param imovel
	 * @param situacaoCobranca
	 * @param cliente
	 * @param dataImplantação
	 * @param anoMesInicio
	 * @param anoMesFim
	 * @return
	 * @throws ControladorException
	 */
	public void inserirImovelSitucaoCobranca(Imovel imovel, CobrancaSituacao cobrancaSituacao, Cliente cliente, Cliente clienteEscritorio,
					Cliente clienteAdvogado, Date dataImplantacao, Integer anoMesInicio, Integer anoMesFim, Usuario usuarioLogado){

		try{
			this.getControladorImovel().inserirImovelSitucaoCobranca(imovel, cobrancaSituacao, cliente, clienteEscritorio, clienteAdvogado,
							dataImplantacao, anoMesInicio, anoMesFim, usuarioLogado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void retirarImovelSitucaoCobranca(String[] idRemocao, Usuario usuarioLogado){

		try{
			this.getControladorImovel().retirarImovelSitucaoCobranca(idRemocao, usuarioLogado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0488] Informar Retorno Ordem de Fiscalização
	 * 
	 * @author Sávio Luiz
	 * @date 14/11/2006
	 * @param idOS
	 * @return Integer[]
	 * @throws ControladorException
	 */
	public Integer[] informarRetornoOSFiscalizacao(Integer idOrdemServico, FiscalizacaoSituacao fiscalizacaoSituacao,
					String indicadorDocumentoEntregue, Integer idLigacaoAguaSituacaoImovel, Integer idLigacaoEsgotoSituacaoImovel,
					Integer idImovel, String indicadorMedicaoTipo, String indicadorGeracaoDebito, Usuario usuarioLogado){

		try{
			return this.getControladorOrdemServico().informarRetornoOSFiscalizacao(idOrdemServico, fiscalizacaoSituacao,
							indicadorDocumentoEntregue, idLigacaoAguaSituacaoImovel, idLigacaoEsgotoSituacaoImovel, idImovel,
							indicadorMedicaoTipo, indicadorGeracaoDebito, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0367] Informar Retorno Ordem de Fiscalização
	 * Recupera o id da situação da ligação de agua
	 * 
	 * @author Sávio Luiz
	 * @date 14/11/2006
	 * @param idOS
	 * @return OrdemServico
	 * @throws ControladorException
	 */
	public Integer pesquisarIdLigacaoAguaSituacao(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarIdLigacaoAguaSituacao(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0367] Informar Retorno Ordem de Fiscalização
	 * Recupera o id da situação da ligação de esgoto
	 * 
	 * @author Sávio Luiz
	 * @date 14/11/2006
	 * @param idOS
	 * @return OrdemServico
	 * @throws ControladorException
	 */
	public Integer pesquisarIdLigacaoEsgotoSituacao(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarIdLigacaoEsgotoSituacao(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] Ligacoes Medicao Individualizada
	 * 
	 * @author Flávio Cordeiro
	 * @date 17/12/2006
	 * @param colecaoLigacoesMedicao
	 * @throws ControladorException
	 */
	public void atualizarLigacoesMedicaoIndividualizada(Collection colecaoLigacoesMedicao, Usuario usuarioLogado, Integer anoMes){

		try{
			this.getControladorMicromedicao().atualizarLigacoesMedicaoIndividualizada(colecaoLigacoesMedicao, usuarioLogado, anoMes);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0268] - Apresentar análise do Aviso bancário
	 * 
	 * @author Vivianne Sousa
	 * @date 13/12/2006
	 * @return Collection<DeducoesHelper>
	 * @throws ControladorException
	 */

	public Collection<DeducoesHelper> pesquisarDeducoesAvisoBancario(Integer idAvisoBancario){

		try{
			return this.getControladorArrecadacao().pesquisarDeducoesAvisoBancario(idAvisoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0268] - Apresentar análise do Aviso bancário
	 * 
	 * @author Vivianne Sousa
	 * @date 13/12/2006
	 * @return Collection<AcertosAvisoBancarioHelper>
	 * @throws ControladorException
	 */

	public Collection<AcertosAvisoBancarioHelper> pesquisarAcertosAvisoBancario(Integer idAvisoBancario,
					Integer indicadorArrecadacaoDevolucao){

		try{
			return this.getControladorArrecadacao().pesquisarAcertosAvisoBancario(idAvisoBancario, indicadorArrecadacaoDevolucao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0001] Inserir Município
	 * 
	 * @author Kassia Albuquerque
	 * @date 18/12/2006
	 * @param municipio
	 *            Descrição do parâmetro
	 */

	public Integer inserirMunicipio(Municipio municipio, Usuario usuarioLogado){

		try{
			return this.getControladorGeografico().inserirMunicipio(municipio, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa os Imóveis com determinada tarifa de consumo
	 * [UC0378] Associar Tarifa de Consumo a Imóveis
	 * 
	 * @author Rômulo Aurelio
	 * @created 19/12/2006
	 * @param idLocalidadeInicial
	 *            ,
	 *            idLocalidadeFinal, codigoSetorComercialInicial,
	 *            codigoSetorComercialFinal, quadraInicial, quadraFinal,
	 *            loteInicial, loteFinal, subLoteInicial, subLoteFinal,
	 *            idTarifaAnterior
	 */

	public Collection pesquisarImoveisTarifaConsumo(String idLocalidadeInicial, String idLocalidadeFinal,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String quadraInicial, String quadraFinal,
					String loteInicial, String loteFinal, String subLoteInicial, String subLoteFinal, String idTarifaAnterior,
					String idsCategorias, String idsSubcategorias){

		try{
			return this.getControladorImovel().pesquisarImoveisTarifaConsumo(idLocalidadeInicial, idLocalidadeFinal,
							codigoSetorComercialInicial, codigoSetorComercialFinal, quadraInicial, quadraFinal, loteInicial, loteFinal,
							subLoteInicial, subLoteFinal, idTarifaAnterior, idsCategorias, idsSubcategorias);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza a tarifa de consumo de um ou mais imoveis
	 * [UC0378] Associar Tarifa de Consumo a Imóveis
	 * 
	 * @author Rômulo Aurelio
	 * @created 19/12/2006
	 * @author Hugo Lima
	 * @date 06/03/2012
	 *       Alteracao na consulta para atualizacao por mais dois novos campos (tarifaEspecial,
	 *       dataValidadeTarifaEspecial)
	 * @param matricula
	 * @param tarifaAtual
	 * @param tarifaEspecial
	 * @param dataValidadeTarifaEspecial
	 * @param colecaoImoveis
	 * @throws FachadaException
	 */

	public void atualizarImoveisTarifaConsumo(String matricula, String tarifaAtual, String tarifaEspecial, Date dataValidadeTarifaEspecial,
					Collection colecaoImoveis){

		try{
			this.getControladorImovel().atualizarImoveisTarifaConsumo(matricula, tarifaAtual, tarifaEspecial, dataValidadeTarifaEspecial,
							colecaoImoveis);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Pesquisa os Clientes Imóveis pelo id do Cliente, indicador de uso, motivo
	 * do fim da relação, pelo perfil do imóvel e pelo tipo da relação do
	 * cliente carregando o imóvel
	 * Autor: Rafael Corrêa
	 * Data: 27/12/2006
	 */
	public Collection pesquisarClienteImovelPeloClienteTarifaSocial(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarClienteImovelPeloClienteTarifaSocial(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Pesquisa os Clientes Imóveis pelo id do imóvel carregando o imóvel, o
	 * cliente, o perfil do imóvel, o orgão expedidor do RG e a unidade da
	 * federação
	 * Autor: Rafael Corrêa
	 * Data: 27/12/2006
	 */
	public Collection pesquisarClienteImovelPeloImovelTarifaSocial(Integer idImovel){

		try{
			return this.getControladorCliente().pesquisarClienteImovelPeloImovelTarifaSocial(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0035] Inserir Bairro
	 * Insere um objeto do tipo bairro no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 22/12/2006
	 * @param bairro
	 * @param colecaoBairroArea
	 * @return idBairro
	 * @throws ControladorException
	 */
	public Integer inserirBairro(Bairro bairro, Collection colecaoBairroArea, Usuario usuarioLogado){

		try{
			return this.getControladorGeografico().inserirBairro(bairro, colecaoBairroArea, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Vivianne Sousa
	 * @date 26/12/2006
	 * @return colecao de BairroArea
	 * @exception ErroRepositorioException
	 *                Erro no hibernate
	 */
	public Collection pesquisarBairroArea(Integer idBairro){

		try{
			return this.getControladorGeografico().pesquisarBairroArea(idBairro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Bairro
	 * Remove os bairros e area bairro selecionados na lista da funcionalidade
	 * Manter Bairro
	 * 
	 * @author Vivianne Sousa
	 * @date 26/12/2006
	 * @param bairro
	 * @param colecaoBairroArea
	 * @return idBairro
	 * @throws ControladorException
	 */
	public void removerBairro(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorGeografico().removerBairro(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Pesquisa os Clientes Imóveis pelo id do imóvel carregando os dados
	 * necessários para retornar o seu endereço
	 * Autor: Rafael Corrêa
	 * Data: 27/12/2006
	 */
	public Collection pesquisarClienteImovelPeloImovelParaEndereco(Integer idImovel){

		try{
			return this.getControladorCliente().pesquisarClienteImovelPeloImovelParaEndereco(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Pesquisa as Tarifas Sociais Dado Economia pelo id do imóvel carregando a
	 * Tarifa Social Revisao Motivo
	 * Autor: Rafael Corrêa
	 * Data: 27/12/2006
	 */
	public Collection pesquisarTarifaSocialDadoEconomia(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarTarifaSocialDadoEconomia(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Pesquisa as Tarifas Sociais Dado Economia pelo id do imóvel carregando a
	 * Tarifa Social Revisao Motivo
	 * Autor: Rafael Corrêa
	 * Data: 27/12/2006
	 */
	public Collection pesquisarTarifaSocialDadoEconomiaImovelEconomia(Integer idImovelEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarTarifaSocialDadoEconomiaImovelEconomia(idImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0263] Filtrar Movimento dos Arrecadadores
	 * 
	 * @author Vivianne Sousa
	 * @date 30/11/06
	 * @param codigoBanco
	 * @param codigoRemessa
	 * @param descricaoIdentificacaoServico
	 * @param numeroSequencialArquivo
	 * @param dataGeracaoInicio
	 * @param dataGeracaoFim
	 * @param ultimaAlteracaoInicio
	 * @param ultimaAlteracaoFim
	 * @param descricaoOcorrencia
	 * @param indicadorAceitacao
	 * @param indicadorAbertoFechado
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection filtrarMovimentoArrecadadorParaRelatorio(String codigoBanco, String codigoRemessa,
					String descricaoIdentificacaoServico, String numeroSequencialArquivo, Date dataGeracaoInicio, Date dataGeracaoFim,
					Date ultimaAlteracaoInicio, Date ultimaAlteracaoFim, String descricaoOcorrencia, String indicadorAceitacao,
					String indicadorAbertoFechado, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarMovimentoArrecadadorParaRelatorio(codigoBanco, codigoRemessa,
							descricaoIdentificacaoServico, numeroSequencialArquivo, dataGeracaoInicio, dataGeracaoFim,
							ultimaAlteracaoInicio, ultimaAlteracaoFim, descricaoOcorrencia, indicadorAceitacao, indicadorAbertoFechado,
							idConcessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Verifica se o cliente usuário do imóvel já está relacionado em outro
	 * imóvel na tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 02/01/2007
	 */
	public Collection verificarClienteCadastradoTarifaSocial(Integer idCliente){

		try{
			return this.getControladorTarifaSocial().verificarClienteCadastradoTarifaSocial(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0009] - Manter Cliente
	 * Verifica se o cliente usuário está na tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 16/02/2007
	 */
	public Collection verificarClienteUsuarioCadastradoTarifaSocial(Integer idCliente){

		try{
			return this.getControladorTarifaSocial().verificarClienteUsuarioCadastradoTarifaSocial(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Verifica se o cliente usuário do imóvel já está relacionado em outro
	 * imóvel na tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 30/01/2007
	 */
	public Collection verificarClienteCadastradoManterTarifaSocialUmaEconomia(Integer idCliente, Integer idImovel){

		try{
			return this.getControladorTarifaSocial().verificarClienteCadastradoManterTarifaSocialUmaEconomia(idCliente, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Verifica se o cliente usuário do imóvel já está relacionado em outro
	 * imóvel na tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 30/01/2007
	 */
	public Collection verificarClienteCadastradoManterTarifaSocialMultiplasEconomias(Integer idCliente, Integer idImovelEconomia){

		try{
			return this.getControladorTarifaSocial().verificarClienteCadastradoManterTarifaSocialMultiplasEconomias(idCliente,
							idImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Verifica se o mesmo cliente está vinculado a mais de uma economia como
	 * usuário
	 * Autor: Rafael Corrêa
	 * Data: 03/01/2007
	 */
	public int pesquisarClienteImovelEconomiaCount(Integer idImovel, Integer idCliente){

		try{
			return this.getControladorTarifaSocial().pesquisarClienteImovelEconomiaCount(idImovel, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Verifica se o mesmo cliente está vinculado a mais de uma economia como
	 * usuário
	 * Autor: Rafael Corrêa
	 * Data: 03/01/2007
	 */
	public int verificarExistenciaDebitosCliente(Integer idCliente){

		try{
			return this.getControladorTarifaSocial().verificarExistenciaDebitosCliente(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Retorna os clientes usuários das economias do imóvel
	 * Autor: Rafael Corrêa
	 * Data: 03/01/2007
	 */
	public Collection pesquisarClientesUsuariosImovelEconomia(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarClientesUsuariosImovelEconomia(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Verifica se o cliente usuário está vinculado na tarifa social a outro
	 * imóvel ou economia com motivo de revisão que permita recadastramento
	 * Autor: Rafael Corrêa
	 * Data: 04/01/2007
	 */
	public Collection pesquisarClientesUsuarioExistenteTarifaSocial(Integer idCliente){

		try{
			return this.getControladorTarifaSocial().pesquisarClientesUsuarioExistenteTarifaSocial(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0263] Filtrar Movimento dos Arrecadadores
	 * 
	 * @author Vivianne Sousa
	 * @date 04/01/07
	 * @param codigoBanco
	 * @param codigoRemessa
	 * @param descricaoIdentificacaoServico
	 * @param numeroSequencialArquivo
	 * @param dataGeracaoInicio
	 * @param dataGeracaoFim
	 * @param ultimaAlteracaoInicio
	 * @param ultimaAlteracaoFim
	 * @param descricaoOcorrencia
	 * @param indicadorAceitacao
	 * @param indicadorAbertoFechado
	 * @throws ControladorException
	 */
	public Integer filtrarMovimentoArrecadadoresRelatorioCount(String codigoBanco, String codigoRemessa,
					String descricaoIdentificacaoServico, String numeroSequencialArquivo, Date dataGeracaoInicio, Date dataGeracaoFim,
					Date ultimaAlteracaoInicio, Date ultimaAlteracaoFim, String descricaoOcorrencia, String indicadorAceitacao,
					String indicadorAbertoFechado, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarMovimentoArrecadadoresRelatorioCount(codigoBanco, codigoRemessa,
							descricaoIdentificacaoServico, numeroSequencialArquivo, dataGeracaoInicio, dataGeracaoFim,
							ultimaAlteracaoInicio, ultimaAlteracaoFim, descricaoOcorrencia, indicadorAceitacao, indicadorAbertoFechado,
							idConcessionaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Atualiza o perfil do imóvel para o perfil normal
	 * 
	 * @date 04/01/2007
	 * @author Rafael Corrêa
	 */
	public void atualizarImovelPerfilNormal(Integer idImovel){

		try{
			this.getControladorImovel().atualizarImovelPerfilNormal(idImovel, false);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0006] - FILTRAR MUNICIPIO
	 * Confirma a existencia do Municipio
	 * Autor: Kassia Albuquerque
	 * Data: 04/01/2007
	 */
	public boolean verificarExistenciaMunicipio(Integer codigoMunicipio){

		try{
			return this.getControladorGeografico().verificarExistenciaMunicipio(codigoMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0005] Manter Municipio
	 * Remover Municipio
	 * 
	 * @author Kassia Albuquerque
	 * @date 04/01/2007
	 * @pparam municpio
	 * @throws ControladorException
	 */
	public void removerMunicipio(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorGeografico().removerMunicipio(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Verificar se existe um motivo de exclusão para o cliente que Não permite
	 * recadastramento na tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 05/01/2007
	 */
	public void verificarClienteMotivoExclusaoRecadastramento(Integer idCliente){

		try{
			this.getControladorTarifaSocial().verificarClienteMotivoExclusaoRecadastramento(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir uma gerência Regional
	 * [UC0217] Inserir Gerencia Regional
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirGerenciaRegional(GerenciaRegional gerenciaRegional){

		try{
			return this.getControladorCadastro().inserirGerenciaRegional(gerenciaRegional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Retorna os cliente a partir do id do clienteImovelEconomia
	 * Autor: Rafael Corrêa
	 * Data: 08/01/2007
	 */
	public Integer pesquisarClienteImovelEconomia(Integer idClienteImovelEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarClienteImovelEconomia(idClienteImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0005] Manter Municipio [SB0001] Atualizar Municipio
	 * 
	 * @author Kassia Albuquerque
	 * @date 11/01/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarMunicipio(Municipio municipio, Usuario usuarioLogado){

		try{
			this.getControladorGeografico().atualizarMunicipio(municipio, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informar Parametros do Sistema
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/01/2007
	 */

	public void informarParametrosSistema(SistemaParametro sistemaParametro, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().informarParametrosSistema(sistemaParametro, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0490] - Informar Situação de Cobrança
	 * Pesquisa o imóvel com a situação da ligação de Água e a de esgoto
	 * 
	 * @date 13/01/2007
	 * @author Rafael Corrêa
	 * @throws ControladorException
	 */
	public Imovel pesquisarImovelComSituacaoAguaEsgoto(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarImovelComSituacaoAguaEsgoto(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0532] Gerar Relatório de Faturamento das Ligações com Medição
	 * Individualizada
	 * 
	 * @author Vivianne Sousa
	 * @date 09/01/2007
	 * @throws ControladorException
	 */
	public Collection pesquisarFaturamentoLigacoesMedicaoIndividualizadaRelatorio(FiltroMedicaoHistoricoSql filtroMedicaoHistoricoSql,
					String anoMesfaturamentoGrupo, Integer indicadorRateio){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoLigacoesMedicaoIndividualizadaRelatorio(filtroMedicaoHistoricoSql,
							anoMesfaturamentoGrupo, indicadorRateio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Pesquisa os dados da tarifa social e do cliente usuário
	 * Autor: Rafael Corrêa
	 * Data: 15/01/2007
	 */
	public Collection pesquisarDadosClienteTarifaSocial(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarDadosClienteTarifaSocial(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Retorna a tarifa social a partir do seu id
	 * Autor: Rafael Corrêa
	 * Data: 16/01/2007
	 */
	public TarifaSocialDadoEconomia pesquisarTarifaSocial(Integer idTarifaSocial){

		try{
			return this.getControladorTarifaSocial().pesquisarTarifaSocial(idTarifaSocial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Verifica se existe tarifa social para o imóvel que Não tenha sido
	 * excluído
	 * Autor: Rafael Corrêa
	 * Data: 16/01/2007
	 */
	public Collection pesquisarTarifaSocialImovel(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarTarifaSocialImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0534] Inserir Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 17/01/2007
	 */

	public Integer inserirFeriado(NacionalFeriado nacionalFeriado, MunicipioFeriado municipioFeriado, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirFeriado(nacionalFeriado, municipioFeriado, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa o nome do cliente a partir do imóvel Autor: Sávio Luiz Data:
	 * 21/12/2005
	 */
	public String pesquisarNomeClientePorImovel(Integer idImovel){

		try{
			return this.getControladorCliente().pesquisarNomeClientePorImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC00503]Tramitar Conjunto de Registro de Atendimento
	 * [SB0003]Incluir o Tramite
	 * 
	 * @author Ana Maria
	 * @date 16/01/2007
	 */

	public void tramitarConjuntoRA(Collection tramites){

		try{
			this.getControladorRegistroAtendimento().tramitarConjuntoRA(tramites);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00503]Tramitar Conjunto de Registro de Atendimento
	 * [FS0006] Valida Data [FS0007] Valida Hora [FS0008] Valida Unidade Destino
	 * 
	 * @author Ana Maria
	 * @date 16/01/2007
	 */
	public void validarConjuntoTramitacao(String[] ids, Date dataHoraTramitacao, Integer idUnidadeDestino){

		try{
			this.getControladorRegistroAtendimento().validarConjuntoTramitacao(ids, dataHoraTramitacao, idUnidadeDestino);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00503]Tramitar Conjunto de Registro de Atendimento
	 * [FS0002] Verificar as situações das OS associadas ao RA [FS0003]
	 * Verificar se o tipo de solicitação é Tarifa Social
	 * 
	 * @author Ana Maria
	 * @date 16/01/2007
	 */
	public void validarRATramitacao(String[] ids, Integer idUsuario){

		try{
			this.getControladorRegistroAtendimento().validarRATramitacao(ids, idUsuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0069] - Manter Dados da Tarifa Social
	 * [FS0006] - Verificar número de IPTU
	 * Verifica se já existe outro imóvel ou economia com o mesmo número de IPTU
	 * no mesmo Município
	 * 
	 * @date 18/01/2007
	 * @author Rafael Corrêa
	 * @throws ControladorException
	 */
	public Integer verificarNumeroIptu(BigDecimal numeroIptu, Integer idImovel, Integer idImovelEconomia, Integer idMunicipio){

		try{
			return this.getControladorImovel().verificarNumeroIptu(numeroIptu, idImovel, idImovelEconomia, idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0069] - Manter Dados da Tarifa Social
	 * [FS0007] - Verificar número de contrato da companhia de energia elétrica
	 * Verifica se já existe outro imóvel ou economia com o mesmo número de
	 * contrato da companhia elétrica
	 * 
	 * @date 18/01/2007
	 * @author Rafael Corrêa
	 * @throws ControladorException
	 */
	public Integer verificarNumeroCompanhiaEletrica(Long numeroCompanhiaEletrica, Integer idImovel, Integer idImovelEconomia){

		try{
			return this.getControladorImovel().verificarNumeroCompanhiaEletrica(numeroCompanhiaEletrica, idImovel, idImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * [FS0008] - Verificar Preenchimento dos Campos
	 * Verificar o preenchimento dos campos para uma economia
	 * 
	 * @date 18/01/2007
	 * @author Rafael Corrêa
	 * @param clienteImovel
	 *            Descrição do parâmetro
	 * @param numeroCartaoSocial
	 *            Descrição do parâmetro
	 * @param dataValidadeCartaoSocial
	 *            Descrição do parâmetro
	 * @param numeroParcelasCartaoSocial
	 *            Descrição do parâmetro
	 * @param valorRendaFamiliar
	 *            Descrição do parâmetro
	 * @throws ControladorException
	 */
	public void verificarPreenchimentoManterDadosTarifaSocial(Long numeroCelpe, BigDecimal areaConstruida, BigDecimal numeroIPTU,
					Integer idImovel, String numeroCartaoSocial, String dataValidadeCartaoSocial, String numeroParcelasCartaoSocial,
					Integer consumoMedio, BigDecimal valorRendaFamiliar, String tarifaSocialCartaoTipo, String tipoRenda){

		try{
			this.getControladorTarifaSocial().verificarPreenchimentoManterDadosTarifaSocial(numeroCelpe, areaConstruida, numeroIPTU,
							idImovel, numeroCartaoSocial, dataValidadeCartaoSocial, numeroParcelasCartaoSocial, consumoMedio,
							valorRendaFamiliar, tarifaSocialCartaoTipo, tipoRenda);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * [FS0008] - Verificar Preenchimento dos Campos
	 * Verificar o preenchimento dos campos para múltiplas economias
	 * 
	 * @date 18/01/2007
	 * @author Rafael Corrêa
	 * @throws ControladorException
	 * @param clienteImovel
	 *            Descrição do parâmetro
	 * @param numeroCartaoSocial
	 *            Descrição do parâmetro
	 * @param dataValidadeCartaoSocial
	 *            Descrição do parâmetro
	 * @param numeroParcelasCartaoSocial
	 *            Descrição do parâmetro
	 * @param valorRendaFamiliar
	 *            Descrição do parâmetro
	 * @throws ControladorException
	 */
	public void verificarPreenchimentoManterDadosTarifaSocialMultiplasEconomias(Long numeroCelpe, BigDecimal areaConstruida,
					BigDecimal numeroIPTU, Integer idImovelEconomia, String numeroCartaoSocial, String dataValidadeCartaoSocial,
					String numeroParcelasCartaoSocial, Integer consumoMedio, BigDecimal valorRendaFamiliar, String tarifaSocialCartaoTipo,
					String tipoRenda){

		try{
			this.getControladorTarifaSocial().verificarPreenchimentoManterDadosTarifaSocialMultiplasEconomias(numeroCelpe, areaConstruida,
							numeroIPTU, idImovelEconomia, numeroCartaoSocial, dataValidadeCartaoSocial, numeroParcelasCartaoSocial,
							consumoMedio, valorRendaFamiliar, tarifaSocialCartaoTipo, tipoRenda);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Retorna os clientes do imóvel
	 * Autor: Rafael Corrêa
	 * Data: 19/01/2007
	 */
	public Collection pesquisarClientesImovelTarifaSocial(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarClientesImovelTarifaSocial(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Retorna os clientes do imóvel
	 * Autor: Rafael Corrêa
	 * Data: 19/01/2007
	 */
	public Collection pesquisarClientesImovelEconomiaTarifaSocial(Integer idImovelEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarClientesImovelEconomiaTarifaSocial(idImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0294] Atualizar Prioridade Tipo Servicoi [] Atualizar Prioridade Tipo
	 * Servico
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * @param ServicoTipoPrioridade
	 */

	public void atualizarPrioridadeTipoServico(ServicoTipoPrioridade servicoTipoPrioridade, Collection colecaoServicoTipoPrioridade){

		try{
			this.getControladorAtendimentoPublico().atualizarPrioridadeTipoServico(servicoTipoPrioridade, colecaoServicoTipoPrioridade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Pesquisa o cliente pelo seu id carregando o seu tipo
	 * Autor: Rafael Corrêa
	 * Data: 22/01/2007
	 */
	public Cliente pesquisarClienteComClienteTipoTarifaSocial(Integer idCliente){

		try{
			return this.getControladorTarifaSocial().pesquisarClienteComClienteTipoTarifaSocial(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0173] Gerar Relatório de Resumo do Faturamento
	 * 
	 * @author Vivianne Sousa
	 * @created 24/01/2007
	 * @return
	 * @throws ControladorException
	 */
	public Integer consultarQtdeRegistrosResumoFaturamentoRelatorio(int mesAnoReferencia, Integer localidade, Integer gerenciaRegional,
					String opcaoTotalizacao){

		try{
			return this.getControladorFaturamento().consultarQtdeRegistrosResumoFaturamentoRelatorio(mesAnoReferencia, localidade,
							gerenciaRegional, opcaoTotalizacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Pesquisa os feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 22/01/2007
	 */
	public Collection pesquisarFeriado(Short tipoFeriado, String descricao, Date dataFeriadoInicio, Date dataFeriadoFim,
					Integer idMunicipio, Integer numeroPagina){

		try{
			return this.getControladorCadastro().pesquisarFeriado(tipoFeriado, descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio,
							numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Pesquisa os feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 23/01/2007
	 */
	public Integer pesquisarFeriadoCount(Short tipoFeriado, String descricao, Date dataFeriadoInicio, Date dataFeriadoFim,
					Integer idMunicipio){

		try{
			return this.getControladorCadastro().pesquisarFeriadoCount(tipoFeriado, descricao, dataFeriadoInicio, dataFeriadoFim,
							idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC???] - ????????
	 * 
	 * @author Rômulo Aurélio Filho
	 * @date 25/01/2007
	 * @descricao O método retorna um objeto com a maior data de Implementacao
	 *            do Banco e sua ultima alteracao
	 * @return
	 * @throws ErroRepositorioException
	 */

	public DbVersaoImplementada pesquisarDbVersaoImplementada(){

		try{
			return this.getControladorUtil().pesquisarDbVersaoImplementada();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0488] Informar Retorno Ordem de Fiscalização
	 * 
	 * @author Raphael Rossiter
	 * @date 25/01/2007
	 * @param idOS
	 * @return fiscalizacaoSituacao
	 * @throws ControladorException
	 */
	public void verificarOSJaFiscalizada(Integer idOS){

		try{

			this.getControladorOrdemServico().verificarOSJaFiscalizada(idOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * Obtem os Debitos A Cobrar do Imovel
	 * 
	 * @param imovelID
	 *            Id do Imovel
	 * @param debitoCreditoSituacaoAtualID
	 *            ID do Debito Credito Situação
	 * @return Coleção de Debitos a Cobrar
	 */
	public Collection obterDebitoACobrarImovel(Integer imovelID, Integer debitoCreditoSituacaoAtualID, int anoMesFaturamento){

		try{

			return this.getControladorFaturamento().obterDebitoACobrarImovel(imovelID, debitoCreditoSituacaoAtualID, anoMesFaturamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Pesquisa os dados da tarifa social e do cliente usuário para cada
	 * economia
	 * Autor: Rafael Corrêa
	 * Data: 25/01/2007
	 */
	public Collection pesquisarDadosClienteEconomiaTarifaSocial(Integer idImovel){

		try{
			return this.getControladorTarifaSocial().pesquisarDadosClienteEconomiaTarifaSocial(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Pesquisa no sistema todos os processos que pararam na metade devido a uma
	 * falha no servidor e marca com 'EXECUção INTERROMPIDA'
	 * 
	 * @author Rodrigo Silveira
	 * @date 27/01/2007
	 */
	public void marcarProcessosInterrompidos(){

		try{
			getControladorBatch().marcarProcessosInterrompidos();
		}catch(ControladorException e){
			e.printStackTrace();
		}

	}

	/**
	 * [UC0521] Inserir Distrito Operacional
	 * 
	 * @author Eduardo Bianchi
	 * @date 26/01/2007
	 * @param DistritoOperacional
	 *            Descrição do parâmetro
	 */

	public Integer inserirDistritoOperacional(String descricao, String descricaoAbreviada, Usuario usuarioLogado, String localidade,
					String descricaoLocalidade, String endereco, String telefone, String ramal, String fax, String email,
					String descricaoTipoInstalacao, String numeroCota, String latitude, String longitude, String sistemaAbastecimento,
					String tipoUnidadeOperacional, LogradouroCep cep, Logradouro logradouro, LogradouroBairro bairro,
					EnderecoReferencia enderecoReferencia, String numeroImovel, String complementoEndereco){

		try{
			return this.getControladorOperacional().inserirDistritoOperacional(descricao, descricaoAbreviada, usuarioLogado, localidade,
							descricaoLocalidade, endereco, telefone, ramal, fax, email, descricaoTipoInstalacao, numeroCota, latitude,
							longitude, sistemaAbastecimento, tipoUnidadeOperacional, cep, logradouro, bairro, enderecoReferencia,
							numeroImovel, complementoEndereco);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0535] Manter Feriado [SB0001] Atualizar Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 27/01/2006
	 * @pparam feriado
	 * @throws ControladorException
	 */

	public void atualizarFeriado(NacionalFeriado nacionalFeriado, MunicipioFeriado municipioFeriado, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarFeriado(nacionalFeriado, municipioFeriado, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0488] Informar Retorno Ordem de Fiscalização
	 * [FS0001] - Validar Ordem de Serviço
	 * 
	 * @author Raphael Rossiter
	 * @date 29/01/2007
	 * @param OrdemServico
	 * @return void
	 */
	public void validarOrdemServicoInformarRetornoOrdemFiscalizacao(OrdemServico ordemServico){

		try{

			this.getControladorOrdemServico().validarOrdemServicoInformarRetornoOrdemFiscalizacao(ordemServico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * [UC0506] Inserir Arrecadador
	 * Inclusão de um novo arrecadador.
	 * 
	 * @author Marcio Roberto
	 * @date 29/01/2007
	 * @param String
	 *            idAgente, String idCliente, String inscricaoEstadual, String
	 *            idImovel, Usuario usuarioLogado
	 * @throws ControladorException
	 */
	public Integer inserirArrecadador(String idAgente, String idCliente, String inscricaoEstadual, String idImovel, Usuario usuarioLogado,
					Short indicadorCaixaEmpresa){

		try{
			return this.getControladorArrecadacao().inserirArrecadador(idAgente, idCliente, inscricaoEstadual, idImovel, usuarioLogado,
							indicadorCaixaEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir uma Agência Bancária
	 * [UC0217] Inserir Agencia Bancaria
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirAgenciaBancaria(Agencia agencia){

		try{
			return this.getControladorArrecadacao().inserirAgenciaBancaria(agencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0383] Manter Feriado [SB0003] Remover Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 29/01/2007
	 * @pparam Feriado
	 * @throws ControladorException
	 */
	public void removerFeriado(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerFeriado(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0391] Atualizar Agência Bancária.
	 * 
	 * @author Thiago Tenório
	 * @date 01/11/2006
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarAgenciaBancaria(Agencia agencia){

		try{
			this.getControladorArrecadacao().atualizarAgenciaBancaria(agencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0016] Atualizar Gerência Regional.
	 * 
	 * @author Thiago Tenório
	 * @date 01/11/2006
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarGerenciaRegional(GerenciaRegional gerenciaRegional){

		try{
			this.getControladorCadastro().atualizarGerenciaRegional(gerenciaRegional);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] Gerar Relatório de Contas Emitidas
	 * 
	 * @author Vivianne Sousa
	 * @created 30/01/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection consultarContasEmitidasRelatorio(int anoMesReferencia, Integer grupoFaturamento, Collection esferaPoder){

		try{
			return this.getControladorFaturamento().consultarContasEmitidasRelatorio(anoMesReferencia, grupoFaturamento, esferaPoder);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Pesquisa a economia do imóvel pelo seu id
	 * Autor: Rafael Corrêa
	 * Data: 01/02/2007
	 */
	public ImovelEconomia pesquisarImovelEconomiaPeloId(Integer idImovelEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarImovelEconomiaPeloId(idImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC] Gerar Relatório de Contas Emitidas
	 * 
	 * @author Vivianne Sousa
	 * @created 02/02/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQtdeContasEmitidasRelatorio(int anoMesReferencia, Integer grupoFaturamento, Collection esferaPoder){

		try{
			return this.getControladorFaturamento().consultarQtdeContasEmitidasRelatorio(anoMesReferencia, grupoFaturamento, esferaPoder);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0522] MANTER DISTRITO OPERACIONAL
	 * Remover Distrito Operacional
	 * 
	 * @author Eduardo Bianchi
	 * @date 05/02/2007
	 * @pparam distritoOperacional
	 * @throws ControladorException
	 */
	public void removerDistritoOperacional(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerDistritoOperacional(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Seta o indicador do nome da conta para 2 nos clientes proprietário e
	 * usuários
	 * Autor: Rafael Corrêa
	 * Data: 01/02/2007
	 */
	public void atualizarNomeContaClienteImovelTarifaSocial(Integer idImovel){

		try{
			this.getControladorTarifaSocial().atualizarNomeContaClienteImovelTarifaSocial(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00069] Manter Dados Tarifa Social
	 * [FS00001] Verificar Registro Atendimento
	 * 
	 * @author Rafael Corrêa
	 * @date 05/02/2007
	 * @param idRegistroAtendimento
	 * @return
	 * @throws ControladorException
	 */
	public RegistroAtendimento verificarRegistroAtendimentoManterTarifaSocial(String idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().verificarRegistroAtendimentoManterTarifaSocial(idRegistroAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0508] - FILTRAR ARRECADADOR
	 * Confirma a existencia do Agente
	 * Autor: Marcio Roberto
	 * Data: 07/02/2007
	 */
	public boolean verificarExistenciaAgente(Integer codigoAgente){

		try{
			return this.getControladorArrecadacao().verificarExistenciaAgente(codigoAgente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * 
	 */
	public void atualizarConsumosMedio(Integer idImovel, Integer anoMesGrupoFaturamento, int consumoMedioImovel,
					int consumoMedioHidrometroAgua, int consumoMedioHidrometroEsgoto, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarConsumosMedio(idImovel, anoMesGrupoFaturamento, consumoMedioImovel,
							consumoMedioHidrometroAgua, consumoMedioHidrometroEsgoto, usuarioLogado);
		}catch(FachadaException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0005] Manter Arrecadador
	 * Remover Arrecadador
	 * 
	 * @author Marcio Roberto
	 * @date 08/02/2007
	 * @pparam ids, usuarioLogado
	 * @throws ControladorException
	 */
	public void removerArrecadador(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().removerArrecadador(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0507] Manter Arrecadador
	 * 
	 * @author Marcio Roberto
	 * @date 08/02/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarArrecadador(Arrecadador arrecadador, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().atualizarArrecadador(arrecadador, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0005] Manter Distrito Operacional [SB0001] Atualizar Distrito
	 * Operacional
	 * 
	 * @author Eduardo Bianchi
	 * @date 09/02/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarDistritoOperacional(DistritoOperacional distritoOperacional, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarDistritoOperacional(distritoOperacional, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0539] Manter Prioridade do Tipo de Serviço
	 * Remove um ou mais objeto do tipo ServicoTipoPrioridade no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 12/02/2007
	 * @param ids
	 * @return void
	 */
	public void removerPrioridadeTipoServico(String[] ids, Usuario usuarioLogado) throws ControladorException{

		try{
			this.getControladorOrdemServico().removerPrioridadeTipoServico(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0069] - Manter Dados Tarifa Social
	 * Recadastrar, atualiza ou remove a tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 13/02/2007
	 */
	public void manterTarifaSocial(Imovel imovelSessao, Collection colecaoTarifaSocialHelperAtualizar,
					Collection colecaoImoveisExcluidosTarifaSocial, Collection colecaoTarifaSocialExcluida,
					Collection colecaoTarifasSociaisRecadastradas, Usuario usuarioLogado){

		try{

			this.getControladorTarifaSocial().manterTarifaSocial(imovelSessao, colecaoTarifaSocialHelperAtualizar,
							colecaoImoveisExcluidosTarifaSocial, colecaoTarifaSocialExcluida, colecaoTarifasSociaisRecadastradas,
							usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Recadastrar ou insere a tarifa social
	 * Autor: Rafael Corrêa
	 * Data: 13/02/2007
	 */
	public void inserirTarifaSocial(Imovel imovelSessao, ClienteImovel clienteImovel, RegistroAtendimento registroAtendimento,
					RegistroAtendimentoUnidade registroAtendimentoUnidade, Usuario usuarioLogado,
					Integer idTarifaSocialDadoEconomiaExcluida, Collection colecaoTarifaSocialDadoEconomia,
					Collection colecaoClienteImovelEconomia, Collection colecaoTarifaSocialRecadastrar, Imovel imovelAtualizar,
					Collection colecaoImovelEconomiaAtualizar){

		try{

			this.getControladorTarifaSocial().inserirTarifaSocial(imovelSessao, clienteImovel, registroAtendimento,
							registroAtendimentoUnidade, usuarioLogado, idTarifaSocialDadoEconomiaExcluida, colecaoTarifaSocialDadoEconomia,
							colecaoClienteImovelEconomia, colecaoTarifaSocialRecadastrar, imovelAtualizar, colecaoImovelEconomiaAtualizar);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0455] Exibir Calendário para Elaboração ou Acompanhamento de Roteiro
	 * 
	 * @author Raphael Rossiter
	 * @date 14/02/2007
	 * @param idProgramacaoRoteiro
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer verificarExistenciaOSProgramacao(Integer idProgramacaoRoteiro){

		try{

			return this.getControladorOrdemServico().verificarExistenciaOSProgramacao(idProgramacaoRoteiro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Monta a colecao de resultdos apartir da tbela conta impressao para
	 * geracao do relatorio de MAPA DE CONTROLE DAS CONTAS EMITIDAS
	 * 
	 * @author Flávio Cordeiro
	 * @date 13/02/2007
	 * @param idGrupoFaturamento
	 * @param anoMes
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection filtrarMapaControleContaRelatorio(Integer idGrupoFaturamento, String mesAno, Usuario usuarioLogado,
					String tipoRelatorio, String indicadorFichaCompensacao){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_RELATORIO_MAPA_CONTROLE_CONTA,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {idGrupoFaturamento, mesAno, usuarioLogado, tipoRelatorio, indicadorFichaCompensacao});

		try{
			return this.getControladorFaturamento().filtrarMapaControleContaRelatorio(idGrupoFaturamento, mesAno, usuarioLogado,
							tipoRelatorio, indicadorFichaCompensacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica se existem dados para processamento do Relatório Mapa Controle Contas
	 * 
	 * @author Hugo Lima
	 * @date 10/07/2012
	 * @param idGrupoFaturamento
	 * @param mesAno
	 * @param indicadorFichaCompensacao
	 */
	public void verificarDadosMapaControleContaRelatorio(Integer idGrupoFaturamento, String mesAno, String indicadorFichaCompensacao){

		try{
			this.getControladorFaturamento()
							.verificarDadosMapaControleContaRelatorio(idGrupoFaturamento, mesAno, indicadorFichaCompensacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0054] - Inserir Dados Tarifa Social
	 * Retorna a economia do imóvel a partir do id do clienteImovelEconomia
	 * Autor: Rafael Corrêa
	 * Data: 15/02/2007
	 */
	public ImovelEconomia pesquisarImovelEconomiaPeloCliente(Integer idClienteImovelEconomia){

		try{
			return this.getControladorTarifaSocial().pesquisarImovelEconomiaPeloCliente(idClienteImovelEconomia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Monta a colecao de resultdos apartir da tabela conta impressao para
	 * geracao do relatorio de RESUMO CONTAS EMITIDAS POR LOCALIDADE NO GRUPO
	 * 
	 * @author Flávio Cordeiro
	 * @date 13/02/2007
	 * @param idGrupoFaturamento
	 * @param anoMes
	 * @param idSetorFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection filtrarResumoContasLocalidade(Integer idGrupoFaturamento, String anoMes, Integer idFirma, Integer idSetorFaturamento,
					Integer idLocalidade){

		try{
			return this.getControladorFaturamento().filtrarResumoContasLocalidade(idGrupoFaturamento, anoMes, idFirma, idSetorFaturamento,
							idLocalidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para atualizar um cliente que seja usuário da
	 * tarifa social
	 * 
	 * @author Rafael Corrêa
	 * @date 16/02/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoAtualizarUsuarioTarifaSocial(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoAtualizarUsuarioTarifaSocial(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para consultar os débitos do cliente indicado
	 * na conta
	 * 
	 * @author Rafael Corrêa
	 * @date 13/09/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoConsultarDebitosIndicadoNaContaOuTodos(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoConsultarDebitosIndicadoNaContaOuTodos(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void verificarUnicaFatura(Collection colecaoContas, ParcelamentoPerfil parcelamentoPerfil){

		try{
			this.getControladorCobranca().verificarUnicaFatura(colecaoContas, parcelamentoPerfil);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Caso a especificação informada para o RA tem indicativo que é para
	 * verificar débito (STEP_ICVERIFICADEBITO da tabela
	 * SOLICITACAO_TIPO_ESPECIFICACAO com valor igual a SIM (1)), o sistema
	 * deverá verificar se o imóvel informado tenha débito <<incluir>> [UC0067]
	 * Obter Débito do Imóvel ou Cliente (passando o imóvel). [FS0043] –
	 * Verifica imóvel com débito.
	 * [SB0032] – Verifica se o imóvel informado tem débito.
	 * [FS0043] – Verifica imóvel com débito
	 * 
	 * @author Raphael Rossiter
	 * @date 19/02/2006
	 * @param idSolicitacaoTipoEspecificacao
	 * @return boolean
	 * @throws ControladorException
	 */
	public void verificarImovelComDebitos(Integer idSolicitacaoTipoEspecificacao, Integer idImovel){

		try{

			this.getControladorRegistroAtendimento().verificarImovelComDebitos(idSolicitacaoTipoEspecificacao, idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0475] Obter Valor do Débito
	 * 
	 * @author Rafael Pinto
	 * @date 22/02/2007
	 * @param servicoTipoId
	 * @param imovelId
	 * @param tipoMedicao
	 * @param idHidrometroCapacidade
	 * @return valor do Débito
	 * @throws ControladorException
	 */
	public BigDecimal obterValorDebito(Integer servicoTipoId, Integer imovelId, HidrometroCapacidade hidrometroCapacidade){

		try{

			return this.getControladorAtendimentoPublico().obterValorDebito(servicoTipoId, imovelId, hidrometroCapacidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para inserir Imovel com logradouro.municipio
	 * diferente de setorComercial.municipio
	 * 
	 * @author Rômulo Aurélio
	 * @date 23/02/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoInserirImovelMunicipioLogradouroDiferenteSetor(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoInserirImovelMunicipioLogradouroDiferenteSetor(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica permissão especial para atualizar Imovel com
	 * logradouro.municipio diferente de setorComercial.municipio
	 * 
	 * @author Rômulo Aurélio
	 * @date 23/02/2007
	 * @param httpServletRequest
	 * @param usuario
	 */

	public boolean verificarPermissaoAtualizarImovelMunicipioLogradouroDiferenteSetor(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoAtualizarImovelMunicipioLogradouroDiferenteSetor(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @date 21/02/2007
	 * @author Vivianne Sousa
	 * @param c
	 * @param b
	 * @param idLogradouro
	 * @param idBairro
	 * @param cep
	 * @param idMunicipio
	 * @param codigoCliente
	 * @param subLote
	 * @param lote
	 * @param idHidrometroHistInst
	 * @param numeroQuadra
	 * @param codigoSetorComercial
	 * @param idLocalidade
	 * @param idImovel2
	 * @throws ControladorException
	 */
	public Imovel pesquisarImovel(String idImovel2, String idLocalidade, String codigoSetorComercial, String numeroQuadra, String lote,
					String subLote, String codigoCliente, String idMunicipio, String cep, String idBairro, String idLogradouro, boolean b,
					boolean c, Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para atualizar um LOGRADOURO_BAIRRO
	 * 
	 * @author Raphael Rossiter, Romulo Aurelio
	 * @date 24/02/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoAtualizarLogradouroBairro(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoAtualizarLogradouroBairro(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para atualizar um LOGRADOURO_BAIRRO
	 * 
	 * @author Raphael Rossiter, Romulo Aurelio
	 * @date 24/02/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoGeracaoDebitoOSFiscalizacao(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoGeracaoDebitoOSFiscalizacao(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC__?__] Informar Mensagem do Sistema
	 * 
	 * @author Kassia Albuquerque
	 * @date 02/03/2007
	 * @pparam Mensagem do Sistema
	 * @throws ControladorException
	 */

	public void atualizarMensagemSistema(SistemaParametro sistemaParametro, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarMensagemSistema(sistemaParametro, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica as permissões especiais do usuário para inserir motivo da não
	 * cobrança
	 * 
	 * @author Ana Maraia
	 * @date 03/03/2006
	 * @param permissaoEspecial
	 * @param usuario
	 * @return
	 */
	public boolean verificarPermissaoInformarMotivoNaoCobranca(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInformarMotivoNaoCobranca(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica permissão especial para informar nova data para vencimento
	 * alternativo
	 * 
	 * @author Vivianne Sousa
	 * @date 06/03/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoInformarVencimentoAlternativoNovaData(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInformarVencimentoAlternativoNovaData(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir uma Conta Bancária
	 * [UC0217] Inserir Conta Bancaria
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirContaBancaria(ContaBancaria contaBancaria){

		try{
			return this.getControladorArrecadacao().inserirContaBancaria(contaBancaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0391] Atualizar Conta Bancária.
	 * 
	 * @author Thiago Tenório
	 * @date 09/03/2007
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarContaBancaria(ContaBancaria contaBancaria){

		try{
			this.getControladorArrecadacao().atualizarContaBancaria(contaBancaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter a situação de cobrança para o imóvel passado
	 * 
	 * @author Vivianne Sousa
	 * @date 07/03/2007
	 */
	public String obterSituacaoCobrancaImovel(Integer idImovel){

		try{
			return getControladorImovel().obterSituacaoCobrancaImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0512] Inserir Contrato de Demanda
	 * 
	 * @author Eduardo Bianchi
	 * @date 15/02/2007
	 * @param
	 */
	public Integer inserirContratoDemanda(ContratoDemanda contratoDemanda, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirContratoDemanda(contratoDemanda, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite atualizar os dados de um contrato de demanda
	 * [UC0513] Manter Contrato de Demanda
	 * [SB0001] Atualizar Contrato de Demanda
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 28/06/2007
	 */
	public void atualizarContratoDemanda(ContratoDemanda contratoDemanda, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarContratoDemanda(contratoDemanda, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para informar nova data para vencimento
	 * alternativo antes do periodo válido
	 * 
	 * @author Vivianne Sousa
	 * @date 19/03/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoInformarVencimentoAlternativoAntesDoPeriodoValido(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoInformarVencimentoAlternativoAntesDoPeriodoValido(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa na tabela de envio email os dados do email
	 * 
	 * @author Sávio Luiz
	 * @date 19/03/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public EnvioEmail pesquisarEnvioEmail(Integer idEnvioEmail){

		try{
			return this.getControladorCadastro().pesquisarEnvioEmail(idEnvioEmail);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0470] Acompanhar Roteiro de Programação de Ordens de Serviço [FS0012]
	 * Reordena Sequencial de Programação
	 * 
	 * @author Rafael Pinto
	 * @date 21/09/2006
	 * @param ordemServico
	 * @throws ControladorException
	 */
	public void reordenarSequencialProgramacao(Date dataRoteiro, Integer idEquipe){

		try{
			this.getControladorOrdemServico().reordenarSequencialProgramacao(dataRoteiro, idEquipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0544] - Gerar Arquivo Texto do Faturamento
	 * 
	 * @author Flávio Cordeiro
	 * @date 23/03/2007
	 * @param anoMes
	 * @param colecaoClientes
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer[] chamarGerarArquivoTextoFaturamento(int anoMes, String idCliente, Collection colecaoClientes){

		Integer[] retorno = {0, 0, 0};
		try{
			retorno = this.getControladorFaturamento().chamarGerarArquivoTextoFaturamento(anoMes, idCliente, colecaoClientes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return retorno;
		// this.enviarMensagemControladorBatch(
		// MetodosBatch.GERAR_ARQUIVO_TEXTO_FATURAMENTO,
		// ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {
		// anoMes, idCliente, colecaoClientes });
	}

	/**
	 * Pesquisar data e equipe da programação da ordem serviço
	 * 
	 * @author Ana Maria
	 * @date 09/03/2007
	 */
	public OrdemServicoProgramacao pesquisarDataEquipeOSProgramacao(Integer idOs){

		try{
			return this.getControladorOrdemServico().pesquisarDataEquipeOSProgramacao(idOs);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de imóveis
	 * 
	 * @author Ana Maria
	 * @date 16/03/206
	 */

	public Collection pesquisarColecaoImovel(FiltrarImovelInserirManterContaHelper filtro){

		try{
			return this.getControladorImovel().pesquisarColecaoImovel(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera as contas
	 * 
	 * @author Ana Maria
	 * @date 19/03/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Integer obterContasConjuntoImoveis(Integer anoMes, Collection idsImovel, Date dataVencimentoContaInicio,
					Date dataVencimentoContaFim, Integer anoMesFim, String inContasRevisao, Integer[] motivosRevisaoDisponiveis){

		try{
			return this.getControladorFaturamento().obterContasConjuntoImoveis(anoMes, idsImovel, dataVencimentoContaInicio,
							dataVencimentoContaFim, anoMesFim, inContasRevisao, motivosRevisaoDisponiveis);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de imóveis do cliente
	 * 
	 * @author Ana Maria
	 * @date 20/03/2007
	 */
	public Collection pesquisarColecaoImovelCliente(Integer codigoCliente, Integer relacaoTipo){

		try{
			return this.getControladorImovel().pesquisarColecaoImovelCliente(codigoCliente, relacaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Alterar Vencimento do Conjunto de Conta
	 * 
	 * @author Ana Maria
	 * @date 20/01/2007
	 * @param colecaoContas
	 * @param dataVencimento
	 * @throws ControladorException
	 */
	public void alterarVencimentoConjuntoConta(Collection colecaoImovel, Date dataVencimento, Integer anoMes,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Integer anoMesFim, Usuario usuario,
					Collection<Conta> colecaoContasSelecionadas){

		try{
			this.getControladorFaturamento().alterarVencimentoConjuntoConta(colecaoImovel, dataVencimento, anoMes,
							dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim, usuario, colecaoContasSelecionadas);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retificar Conjunto de Conta
	 * 
	 * @author Ana Maria
	 * @date 24/01/2007
	 * @throws ControladorException
	 */
	public void retificarConjuntoConta(Collection colecaoImovel, Integer anoMes, ContaMotivoRetificacao contaMotivoRetificacao,
					Collection debitosTipoRetirar, Usuario usuarioLogado, Date dataVencimentoContaInicio, Date dataVencimentoContaFim,
					Integer anoMesFim, Collection<Conta> colecaoContasSelecionadas){

		try{
			this.getControladorFaturamento().retificarConjuntoConta(colecaoImovel, anoMes, contaMotivoRetificacao, debitosTipoRetirar,
							usuarioLogado, dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim, colecaoContasSelecionadas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica as permissões especiais do usuário para inserir motivo da não
	 * cobrança
	 * 
	 * @author Ana Maraia
	 * @date 03/03/2006
	 * @param permissaoEspecial
	 * @param usuario
	 * @return
	 */
	public boolean verificarPermissaoAlterarVencimentoSemRa(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoAlterarVencimentoSemRa(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Vlida a ordem de servico do [UC0555]-Alterar Situacao Ligacao
	 * 
	 * @author Romulo Aurelio
	 * @date 27/03/2006
	 * @param OrdemServico
	 */

	public void validarOrdemServicoAlterarSituacaoLigacao(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarOrdemServicoAlterarSituacaoLigacao(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0555] Alterar Situacao da Ligacao
	 * 
	 * @author Romulo Aurelio
	 * @date 27/03/2007
	 * @author Saulo Lima
	 * @date 20/05/2009
	 *       Novo parametro 'mapServicosAutorizados'
	 * @param imovel
	 * @param indicadorTipoLigacao
	 * @param idSituacaoLigacaoAguaNova
	 * @param idSituacaoLigacaoEsgotoNova
	 * @param idOrdemServico
	 * @param usuarioLogado
	 * @param usuarioLogado
	 * @return idImovel
	 * @throws ControladorException
	 */
	public Integer alterarSituacaoLigacao(Imovel imovel, String indicadorTipoLigacao, String idSituacaoLigacaoAguaNova,
					String idSituacaoLigacaoEsgotoNova, String idOrdemServico, Usuario usuarioLogado,
					Map<Integer, ServicoAssociadoAutorizacaoHelper> mapServicosAutorizados){

		try{
			return getControladorAtendimentoPublico().alterarSituacaoLigacao(imovel, indicadorTipoLigacao, idSituacaoLigacaoAguaNova,
							idSituacaoLigacaoEsgotoNova, idOrdemServico, usuarioLogado, mapServicosAutorizados);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0489] - Consultar Resumo das Ações de Cobrança
	 * Pesquisa as situações de débito da situação da ação de acordo com o indicador antesApos
	 * 
	 * @author Sávio Luiz
	 * @date 06/11/2006
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection consultarCobrancaAcaoDebitoComIndicador(
					InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsultaHelper, Integer idCobrancaAcao,
					Integer idCobrancaAcaoSituacao, Integer idCobrancaAcaoDebito){

		try{
			return getControladorGerencialCobranca().consultarCobrancaAcaoDebitoComIndicador(informarDadosGeracaoResumoAcaoConsultaHelper,
							idCobrancaAcao, idCobrancaAcaoSituacao, idCobrancaAcaoDebito);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Seleciona os pagamentos histórios de um aviso
	 * 
	 * @author Rafael Corrêa
	 * @date 23/04/2007
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarPagamentoHistoricoAvisoBancario(Integer idAvisoBancario){

		try{
			return getControladorArrecadacao().pesquisarPagamentoHistoricoAvisoBancario(idAvisoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0525] Manter Tipo Retorno OS Referida[SB0002] Remover Tipo Retorno OS
	 * Referida
	 * 
	 * @author Thiago Tenório
	 * @date 20/03/2007
	 * @throws ErroRepositorioException
	 */
	public void removerTipoRetornoOrdemServicoReferida(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOrdemServico().removerTipoRetornoOrdemServicoReferida(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar Observacao Registro Atendimento Solicitacao da CAER
	 * 
	 * @author Rafael Pinto
	 * @date 14/03/2007
	 */
	public Collection<RegistroAtendimento> pesquisarObservacaoRegistroAtendimento(Integer matriculaImovel, Date dataInicialAtendimento,
					Date dataFinalAtendimento){

		try{
			return this.getControladorRegistroAtendimento().pesquisarObservacaoRegistroAtendimento(matriculaImovel, dataInicialAtendimento,
							dataFinalAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0157] - Simular Cálculo da Conta
	 * [FS0004] - Verificar Volume Mínimo
	 * 
	 * @author Raphael Rossiter
	 * @date 02/04/2007
	 * @param idLigacaoEsgotoSituacao
	 *            ,
	 *            consumoFaturado
	 * @return void
	 * @throws ControladorException
	 */
	public void verificarConsumoFaturadoEsgoto(Integer idLigacaoEsgotoSituacao, Integer consumoFaturado){

		try{
			this.getControladorFaturamento().verificarConsumoFaturadoEsgoto(idLigacaoEsgotoSituacao, consumoFaturado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0157] - Simular Cálculo da Conta
	 * [FS0003] - Verificar Consumo Mínimo
	 * 
	 * @author Raphael Rossiter
	 * @date 02/04/2007
	 * @param idLigacaoAguaSituacao
	 *            ,
	 *            consumoFaturado
	 * @return void
	 * @throws ControladorException
	 */
	public void verificarConsumoFaturadoAgua(Integer idLigacaoAguaSituacao, Integer consumoFaturado){

		try{
			this.getControladorFaturamento().verificarConsumoFaturadoAgua(idLigacaoAguaSituacao, consumoFaturado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os movimentos dos arrecadores para a geração do relatório
	 * [UCXXXX] Acompanhar Movimento dos Arrecadadores
	 * 
	 * @author Rafael Corrêa
	 * @date 02/04/2007
	 * @return
	 */
	public Collection pesquisarMovimentoArrecadadoresRelatorio(Integer mesAnoReferencia, Integer idArrecadador, Integer idFormaArrecadacao,
					Date dataPagamentoInicial, Date dataPagamentoFinal, Integer idConcessionaria){

		try{
			return this.getControladorArrecadacao().pesquisarMovimentoArrecadadoresRelatorio(mesAnoReferencia, idArrecadador,
							idFormaArrecadacao, dataPagamentoInicial, dataPagamentoFinal, idConcessionaria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0544] Gerar Arwuivo Texto do Faturamento
	 * Pesquisar ClienteImovel
	 * 
	 * @author Flávio Cordeiro
	 * @date 4/04/2006
	 * @return Colletion
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarClienteImovelGerarArquivoFaturamento(){

		try{
			return this.getControladorCliente().pesquisarClienteImovelGerarArquivoFaturamento();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0320] Gerar Fatura de Cliente Responsável
	 * 
	 * @author Saulo Lima
	 * @date 16/12/2008
	 * @return Colletion<Cliente>
	 * @throws ErroRepositorioException
	 */
	public Collection<Cliente> pesquisarClienteImovelGerarFaturaClienteResponsavel(){

		try{
			return this.getControladorCliente().pesquisarClienteImovelGerarFaturaClienteResponsavel();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar se os itens do parcelamento(Conta, Debito a cobrar e Credit a realizar) já estão no
	 * historico
	 * [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarItensParcelamentoNoHistorico(Integer idImovel, Integer idParcelamento){

		try{
			return this.getControladorCobranca().verificarItensParcelamentoNoHistorico(idImovel, idParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public DadosEnvioEmailHelper pesquisarDadosEmailSistemaParametros(){

		try{
			return this.getControladorCadastro().pesquisarDadosEmailSistemaParametros();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter quantidade de economias por subcategoria
	 * 
	 * @author Raphael Rossiter
	 * @date 10/04/2007
	 * @return Collection
	 */
	public Collection obterQuantidadeEconomiasSubCategoria(Integer idImovel){

		try{
			return this.getControladorImovel().obterQuantidadeEconomiasSubCategoria(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0105] Obter Consumo Mínimo da Ligação por Subcategoria
	 * 
	 * @author Raphael Rossiter
	 * @date 11/04/2007
	 * @return imovel, colecaoSubcategoria
	 * @throws ControladorException
	 */
	/*
	 * public int obterConsumoMinimoLigacaoPorSubcategoria(Imovel imovel,
	 * Collection colecaoSubcategoria) {
	 * try {
	 * return this.getControladorMicromedicao()
	 * .obterConsumoMinimoLigacaoPorSubcategoria(imovel,
	 * colecaoSubcategoria);
	 * } catch (ControladorException ex) {
	 * throw new FachadaException(ex.getMessage(), ex, ex
	 * .getParametroMensagem());
	 * }
	 * }
	 */

	/**
	 * [UC0345] - Gerar Relatorio de Resumo da Arrecadação
	 * 
	 * @author Vivianne Sousa
	 * @date 10/04/2007
	 * @param idLancamentoTipo
	 * @throws ErroRepositorioException
	 */
	public String obterDescricaoLancamentoTipo(Integer idLancamentoTipo){

		try{
			return this.getControladorFinanceiro().obterDescricaoLancamentoTipo(idLancamentoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC????] Inserir Funcionario
	 * 
	 * @author Romulo Aurelio
	 * @date 12/04/2007
	 * @param funcionario
	 * @param usuarioLogado
	 * @return idFuncionario
	 * @throws ControladorException
	 */

	public void inserirFuncionario(Funcionario funcionario, Usuario usuarioLogado){

		try{
			getControladorCadastro().inserirFuncionario(funcionario, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0150] - Retificar Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 16/04/2007
	 */
	public Collection obterQuantidadeEconomiasContaCategoriaPorSubcategoria(Conta conta){

		try{
			return this.getControladorImovel().obterQuantidadeEconomiasContaCategoriaPorSubcategoria(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0150] - Retificar Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 16/04/2007
	 */
	public Collection obterQuantidadeEconomiasContaCategoriaPorSubcategoria(Integer conta){

		try{
			return this.getControladorImovel().obterQuantidadeEconomiasContaCategoriaPorSubcategoria(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0082] - Registrar Leituras e Anormalidades
	 * [SB0001] - Gerar Relatório Resumo das Leituras e Anormalidades
	 * Pesquisa as Anormalidades de Leitura e suas quantidades
	 * 
	 * @author Rafael Corrêa
	 * @date 13/04/2007
	 * @return Collection
	 */
	public Collection pesquisarAnormalidadesRelatorioComparativoLeiturasEAnormalidades(Integer idGrupoFaturamento, Integer idEmpresa,
					Integer anoMes){

		try{
			return this.getControladorMicromedicao().pesquisarAnormalidadesRelatorioComparativoLeiturasEAnormalidades(idGrupoFaturamento,
							idEmpresa, anoMes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0082] - Registrar Leituras e Anormalidades
	 * [SB0001] - Gerar Relatório Resumo das Leituras e Anormalidades
	 * Pesquisa os dados do relatório do comparativo de leituras e anormalidades
	 * 
	 * @author Rafael Corrêa
	 * @date 13/04/2007
	 * @return Collection
	 */
	public Collection pesquisarDadosRelatorioComparativoLeiturasEAnormalidades(Integer idGrupoFaturamento, Integer idEmpresa, Integer anoMes){

		try{
			return this.getControladorMicromedicao().pesquisarDadosRelatorioComparativoLeiturasEAnormalidades(idGrupoFaturamento,
							idEmpresa, anoMes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC????] Atualizar Funcionario
	 * 
	 * @author Romulo Aurelio
	 * @date 17/04/2007
	 * @param funcionario
	 * @param usuarioLogado
	 * @param idFuncionario
	 * @throws ControladorException
	 */

	public void atualizarFuncionario(Funcionario funcionario, Usuario usuarioLogado){

		try{
			getControladorCadastro().atualizarFuncionario(funcionario, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0540] Efetuar Restabelecimento da Ligação de Água com Instalação de
	 * hidrômetro.
	 * Permite validar o Efetuar Restabelecimento Ligação de Água com Instalação
	 * de hidrômetro Exibir ou pelo menu ou pela funcionalidade encerrar a
	 * Execução da ordem de serviço.
	 * [FS0008] Verificar Situação Rede de Água na Quadra. [FS0007] Verificar
	 * Situação do Imovel. [FS0002] Validar Situação de Água do Imóvel
	 * 
	 * @author Rafael Corrêa
	 * @date 18/04/2007
	 * @param imovel
	 * @throws ControladorException
	 */
	public void validarRestabelecimentoLigacaoAguaComInstalacaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{
			getControladorAtendimentoPublico().validarRestabelecimentoLigacaoAguaComInstalacaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0540] Efetuar Restabelecimento da Ligação de Água com Instalação de
	 * hidrômetro.
	 * Permite efetuar o Restabelecimento Ligação de Água com Instalação de
	 * Hidrômetro ou pelo menu ou pela funcionalidade encerrar a Execução da
	 * ordem de serviço.
	 * 
	 * @author Rafael Corrêa
	 * @date 19/04/2007
	 * @param integracaoComercialHelper
	 * @throws ControladorException
	 */
	public void efetuarRestabelecimentoLigacaoAguaComInstalacaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper,
					Usuario usuario){

		try{
			getControladorAtendimentoPublico()
							.efetuarRestabelecimentoLigacaoAguaComInstalacaoHidrometro(integracaoComercialHelper, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar conjunto de contas p/ emissão da 2°Via
	 * 
	 * @author Ana Maria
	 * @date 19/04/2007
	 * @param colecaoImovel
	 * @param anoMes
	 * @throws ControladorException
	 */
	public Collection pesquisarConjuntoContaEmitir2Via(Collection colecaoImovel, Integer anoMes, Date dataVencimentoContaInicio,
					Date dataVencimentoContaFim, Integer anoMesFim){

		try{
			return this.getControladorFaturamento().pesquisarConjuntoContaEmitir2Via(colecaoImovel, anoMes, dataVencimentoContaInicio,
							dataVencimentoContaFim, anoMesFim);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta o id e a situação da ordem de serviço associada ao documento de
	 * cobrança passado como parâmetro
	 * 
	 * @author Sávio Luiz
	 * @created 13/04/2007
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Object[] pesquisarDadosOrdemServicoDocumentoCobranca(Integer idDocumentoCobranca){

		try{
			return getControladorCobranca().pesquisarDadosOrdemServicoDocumentoCobranca(idDocumentoCobranca);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este cso de uso permite efetuar a ligação de água e eventualmente a
	 * instalação de hidrômetro, sem informação de RA sendo chamado direto pelo
	 * menu.
	 * [UC0579] - Efetuar Ligação de Água com Intalação de Hidrômetro
	 * 
	 * @author Flávio Leonardo
	 * @date 25/04/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public EfetuarLigacaoAguaComInstalacaoHidrometroSemRAHelper pesquisarEfetuarLigacaoAguaHidrometroSemRA(Integer idImovel){

		try{
			return getControladorAtendimentoPublico().pesquisarEfetuarLigacaoAguaHidrometroSemRA(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Contrato de Prestação de Serviço
	 * 
	 * @author Rafael Corrêa
	 * @date 03/05/2007
	 * @throws ControladorException
	 */
	public Collection obterDadosContratoPrestacaoServico(Integer idImovel){

		try{
			return getControladorAtendimentoPublico().obterDadosContratoPrestacaoServico(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void atualizarImovelLigacaoAguaInstalacaoHidrometroSemRA(Integer idImovel, Integer idHidrometro){

		getControladorAtendimentoPublico().atualizarImovelLigacaoAguaInstalacaoHidrometroSemRA(idImovel, idHidrometro);
	}

	public BigDecimal calcularPrestacao(BigDecimal taxaJurosFinanciamento, Integer numeroPrestacoes, BigDecimal valorTotalServico,
					BigDecimal valorEntrada){

		try{

			return getControladorFaturamento().calcularPrestacao(taxaJurosFinanciamento, numeroPrestacoes, valorTotalServico, valorEntrada);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0144] Inserir Comando Atividade Faturamento
	 * 
	 * @author Raphael Rossiter
	 * @date 05/05/2007
	 * @param diaVencimento
	 *            ,
	 *            mesVencimento, anoVencimento
	 */
	public Date obterDataVencimentoFaturamentoGrupo(int diaVencimento, int mesVencimento, int anoVencimento){

		try{

			return getControladorFaturamento().obterDataVencimentoFaturamentoGrupo(diaVencimento, mesVencimento, anoVencimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir conta - inserir conta sem cronograma de faturamento e sem
	 * atividade efetuar leitura
	 * 
	 * @author Raphael Rossiter
	 * @date 08/05/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoInserirContaFaturamentoAntecipado(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInserirContaFaturamentoAntecipado(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este cso de uso permite gerar um resumo de registro de atendimentos
	 * instalação de hidrômetro, sem informação de RA sendo chamado direto pelo
	 * menu.
	 * [UC0567] - Gerar Resumo dos Registros de Atendimentos
	 * 
	 * @author Thiago Tenório
	 * @date 25/04/2007
	 * @param idLocalidade
	 * @return
	 * @throws ErroRepositorioException
	 */

	// public void gerarReumoRegistroAtendimento(Integer idLocalidade,
	// int idFuncionalidadeIniciada) {
	// try {
	//
	// getControladorRegistroAtendimento().gerarResumoRegistroAtendimento(
	// idLocalidade, idFuncionalidadeIniciada);
	//
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }
	/**
	 * [UC0XXX] - Gerar Relatório Tarifa de Consumo
	 * Pesquisas as tarifas de consumo para o relatório
	 * 
	 * @author Rafael Corrêa
	 * @date 11/05/2007
	 * @param descricao
	 *            ,
	 *            dataVigenciaInicial, dataVigenciaFinal
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarConsumoTarifaRelatorio(String descricao, Date dataVigenciaInicial, Date dataVigenciaFinal,
					String descricaoAtoAdministrativo){

		try{
			return getControladorFaturamento().pesquisarConsumoTarifaRelatorio(descricao, dataVigenciaInicial, dataVigenciaFinal,
							descricaoAtoAdministrativo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0XXX] - Gerar Relatório de Tarifa de Consumo
	 * Pesquisas a data final de validade de uma tarifa de consumo
	 * 
	 * @author Rafael Corrêa
	 * @date 11/05/2007
	 * @param Integer
	 *            idConsumoTarifa
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarDataFinalValidadeConsumoTarifa(Integer idConsumoTarifa, Date dataInicioVigencia){

		try{
			return getControladorFaturamento().pesquisarDataFinalValidadeConsumoTarifa(idConsumoTarifa, dataInicioVigencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Recupera o id da Conta Retificada
	 * 
	 * @author Vivianne Sousa
	 * @date 08/05/2007
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarAnoMesReferenciaFaturamentoGrupo(Integer idImovel){

		try{
			return getControladorFaturamento().pesquisarAnoMesReferenciaFaturamentoGrupo(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Recupera o id da Conta Retificada
	 * 
	 * @author Vivianne Sousa
	 * @date 08/05/2007
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	// public void inserirResumoAcoesCobrancaCronograma(
	// Collection colecaoCobrancaGrupoCronogramaMes) {
	//
	// try {
	// getControladorCobranca().inserirResumoAcoesCobrancaCronograma(
	// colecaoCobrancaGrupoCronogramaMes, 0);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	//
	// }
	/**
	 * Recupera o id da Conta Retificada
	 * 
	 * @author Vivianne Sousa
	 * @date 08/05/2007
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	// public void gerarResumoAcoesCobrancaCronograma(
	// Collection colecaoCobrancaGrupoCronogramaMes) {
	//
	// try {
	// getControladorCobranca().gerarResumoAcoesCobrancaCronograma(
	// colecaoCobrancaGrupoCronogramaMes, 0);
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	//
	// }
	/**
	 * Recupera as contas
	 * 
	 * @author Ana Maria
	 * @date 19/03/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Integer obterContasConjuntoImoveis(Integer anoMes, Collection idsImovel, Integer codigoCliente, Integer relacaoTipo,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Collection colecaoFaturamentoGrupo, Integer anoMesFim,
					String inContasRevisao, Integer[] motivosRevisaoDisponiveis){

		try{
			return this.getControladorFaturamento().obterContasConjuntoImoveis(anoMes, idsImovel, codigoCliente, relacaoTipo,
							dataVencimentoContaInicio, dataVencimentoContaFim, colecaoFaturamentoGrupo, anoMesFim, inContasRevisao,
							motivosRevisaoDisponiveis);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * Recupera as contas do Imóveis
	 * 
	 * @author Carlos Chrystian
	 * @date 07/05/2013
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection recuperarContasConjuntoImoveis(Integer anoMes, Collection idsImovel, Integer codigoCliente, Integer relacaoTipo,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Collection colecaoFaturamentoGrupo, Integer anoMesFinal,
					String inContasRevisao, Integer[] motivosRevisaoDisponiveis){

		try{
			return this.getControladorFaturamento().recuperarContasConjuntoImoveis(anoMes, idsImovel, codigoCliente, relacaoTipo,
							dataVencimentoContaInicio, dataVencimentoContaFim, colecaoFaturamentoGrupo, anoMesFinal, inContasRevisao,
							motivosRevisaoDisponiveis);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0147] - Cancelar Conjunto Conta
	 * 
	 * @author Ana Maria
	 * @date 10/12/2005
	 * @author Luciano Galvao
	 * @date 05/11/2013
	 */
	public void cancelarConjuntoConta(Collection<Conta> colecaoContasSelecionadas, ContaMotivoCancelamento contaMotivoCancelamento,
					Usuario usuarioLogado, String numeroRA){

		try{

			this.getControladorFaturamento().cancelarConjuntoConta(colecaoContasSelecionadas, contaMotivoCancelamento, usuarioLogado,
							numeroRA);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Alterar Vencimento do Conjunto de Conta
	 * 
	 * @author Ana Maria
	 * @date 20/01/2007
	 * @param colecaoContas
	 * @param dataVencimento
	 * @throws ControladorException
	 */
	public void alterarVencimentoConjuntoContaCliente(Integer codigoCliente, Integer relacaoTipo, Date dataVencimento, Integer anoMes,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Integer anoMesFim, Usuario usuario,
					Collection<Conta> colecaoContasSelecionadas){

		try{
			this.getControladorFaturamento().alterarVencimentoConjuntoContaCliente(codigoCliente, relacaoTipo, dataVencimento, anoMes,
							dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim, usuario, colecaoContasSelecionadas);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retificar Conjunto de Conta
	 * 
	 * @author Ana Maria
	 * @date 24/01/2007
	 * @throws ControladorException
	 */
	public void retificarConjuntoContaCliente(Integer codigoCliente, Integer relacaoTipo, Integer anoMes,
					ContaMotivoRetificacao contaMotivoRetificacao, Collection debitosTipoRetirar, Usuario usuarioLogado,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Integer anoMesFim,
					Collection<Conta> colecaoContasSelecionadas){

		try{
			this.getControladorFaturamento().retificarConjuntoContaCliente(codigoCliente, relacaoTipo, anoMes, contaMotivoRetificacao,
							debitosTipoRetirar, usuarioLogado, dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim,
							colecaoContasSelecionadas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisar conjunto de contas p/ emissão da 2°Via
	 * 
	 * @author Ana Maria
	 * @date 19/04/2007
	 * @param colecaoImovel
	 * @param anoMes
	 * @throws ControladorException
	 */
	public Collection pesquisarConjuntoContaClienteEmitir2Via(Integer codigoCliente, Integer relacaoTipo, Integer anoMes,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim, Integer anoMesFim){

		try{
			return this.getControladorFaturamento().pesquisarConjuntoContaClienteEmitir2Via(codigoCliente, relacaoTipo, anoMes,
							dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera id de contas que estão em revisão por acão do usuario
	 * 
	 * @author Vivianne Sousa
	 * @date 14/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection obterContasEmRevisaoPorAcaoUsuario(Collection idsConta){

		try{
			return getControladorFaturamento().obterContasEmRevisaoPorAcaoUsuario(idsConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Recupera id de conta(s) sem revisão ou em revisão por ação do usuário
	 * 
	 * @author Vivianne Sousa
	 * @date 14/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection obterContasNaoEmRevisaoOuEmRevisaoPorAcaoUsuario(Collection idsConta){

		try{
			return getControladorFaturamento().obterContasNaoEmRevisaoOuEmRevisaoPorAcaoUsuario(idsConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Este cso de uso permite gerar um resumo de hidrometros
	 * menu.
	 * [UC0567] - Gerar Resumo de Hidrômetros
	 * 
	 * @author Thiago Tenório
	 * @date 25/04/2007
	 * @param idLocalidade
	 * @return
	 * @throws ErroRepositorioException
	 */

	// public void gerarReumoHidrometro(HidrometroMarca hidrometroMarca,
	// int idFuncionalidadeIniciada) {
	// try {
	//
	// getControladorGerencialMicromedicao().gerarResumoHidrometros(
	// hidrometroMarca, idFuncionalidadeIniciada);
	//
	// } catch (ControladorException ex) {
	// throw new FachadaException(ex.getMessage(), ex, ex
	// .getParametroMensagem());
	// }
	// }
	/**
	 * Inseri / Altera Leitura de Fiscalizacao
	 * 
	 * @author Rômulo Aurélio
	 * @date 21/05/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void informarLeituraFiscalizacao(Usuario usuarioLogado, LeituraFiscalizacao leituraFiscalizacao){

		try{
			getControladorMicromedicao().informarLeituraFiscalizacao(usuarioLogado, leituraFiscalizacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0259] - Processar Pagamento com código de Barras [SB0008] - Alterar
	 * Vencimento dos Itens do documento de cobrança Autor: Sávio Luiz
	 * Data:15/02/2006
	 */

	public void alterarVencimentoItensDocumentoCobranca(Integer idCobrancaDocumento, Date dataEmissao){

		try{
			getControladorArrecadacao().alterarVencimentoItensDocumentoCobranca(idCobrancaDocumento, dataEmissao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Grupo do Imovel
	 * 
	 * @author Flavio Cordeiro
	 * @date 18/05/2007
	 * @param idImovel
	 * @return
	 */
	public FaturamentoGrupo pesquisarGrupoImovel(Integer idImovel){

		return getControladorImovel().pesquisarGrupoImovel(idImovel);
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * [UC0304] - Informar Dados para Geração de Relatório ou Consulta
	 * 
	 * @author Sávio Luiz
	 * @date 22/05/2007
	 */
	public InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsulta(String mesAnoFaturamento,
					String[] idsCobrancaGrupo, String[] idsGerenciaRegional, Integer idEloPolo, Integer idLocalidade,
					Integer idSetorComercial, Integer nmQuadra, String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
					String[] idsLigacaoEsgotoSituacao, String[] idsCategoria, String[] idsEsferaPoder, String[] idsEmpresas,
					Integer idUnidadeNegocio){

		try{
			return getControladorCobranca().informarDadosGeracaoResumoAcaoConsulta(mesAnoFaturamento, idsCobrancaGrupo,
							idsGerenciaRegional, idEloPolo, idLocalidade, idSetorComercial, nmQuadra, idsImovelPerfil,
							idsLigacaoAguaSituacao, idsLigacaoEsgotoSituacao, idsCategoria, idsEsferaPoder, idsEmpresas, idUnidadeNegocio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite gerar um relatório analítico do faturamento.
	 * [UC0593]Gerar Relatório Analítico do Faturamento.
	 * 
	 * @author Flávio Cordeiro
	 * @date 18/05/2007
	 * @author Virgínia Melo
	 * @date 26/03/2009
	 *       Adicionado parâmetro 'valorMinimo'.
	 * @param anoMesFaturamento
	 * @param idFaturamentoGrupo
	 * @param indicadorLocalidadeInformatizada
	 * @param idLocalidades
	 * @param idSetores
	 * @param idQuadras
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioAnaliticoFaturamentoHelper> pesquisarDadosRelatorioAnaliticoFaturamento(int anoMesFaturamento,
					Integer idFaturamentoGrupo, int indicadorLocalidadeInformatizada, Collection<Localidade> colecaoLocalidades,
					Collection<SetorComercial> colecaoSetores, Collection<Quadra> colecaoQuadras, String tipoRelatorio,
					Usuario usuarioLogado, BigDecimal valorMinimo){

		try{
			return getControladorFaturamento().pesquisarDadosRelatorioAnaliticoFaturamento(anoMesFaturamento, idFaturamentoGrupo,
							indicadorLocalidadeInformatizada, colecaoLocalidades, colecaoSetores, colecaoQuadras, tipoRelatorio,
							usuarioLogado, valorMinimo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do cronograma
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaCronograma(Integer idCobrancaAcaoAtividadeCronograma){

		try{
			return getControladorCobranca().pesquisarProtocoloDocumentoCobrancaCronograma(idCobrancaAcaoAtividadeCronograma);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do eventual
	 * 
	 * @author Ana Maria
	 * @date 21/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaEventual(Integer idCobrancaAcaoAtividadeComand){

		try{
			return getControladorCobranca().pesquisarProtocoloDocumentoCobrancaEventual(idCobrancaAcaoAtividadeComand);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite inserir uma Anormalidade de Leitura
	 * [UC0217] Inserir Anormalidade Leitura
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirAnormalidadeLeitura(LeituraAnormalidade leituraAnormalidade, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirAnormalidadeLeitura(leituraAnormalidade, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0391] Atualizar Anormalidade de Leitura.
	 * 
	 * @author Thiago Tenório
	 * @date 01/11/2006
	 * @author eduardo henrique
	 * @date 25/06/2008
	 * @param usuarioLogado
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarAnormalidadeLeitura(LeituraAnormalidade leituraAnormalidade, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarAnormalidadeLeitura(leituraAnormalidade, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir uma Tipo de Crédito
	 * [UC0217] Inserir tipo credito
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirTipoCredito(CreditoTipo creditoTipo, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirTipoCredito(creditoTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0525] Manter Tipo de Credito [SB0002] Remover Sistema Esgoto
	 * 
	 * @author Thiago Tenório
	 * @date 20/03/2007
	 * @throws ErroRepositorioException
	 */
	public void removerTipoCredito(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().removerTipoCredito(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite atualizar um Tipo de Crédito
	 * [UC0217] Atualizar tipo credito
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer atualizarTipoCredito(CreditoTipo creditoTipo, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().atualizarTipoCredito(creditoTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite informar uma não entrega de documento
	 * [UC0559] Informar Nao Entrega de Documentos
	 * 
	 * @author Thiago Tenorio
	 * @date 04/04/2007
	 * @author eduardo henrique
	 * @date 11/07/2008
	 * @param anoMesDocumento
	 *            Adicionado
	 */

	public Integer informarNaoEntregaDocumentos(Collection colecaoDocumentosNaoEntregues, Usuario usuarioLogado, String anoMesDocumento){

		try{
			return this.getControladorFaturamento().informarNaoEntregaDocumentos(colecaoDocumentosNaoEntregues, usuarioLogado,
							anoMesDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gera credito a realizar para os imóveis de determinados grupos
	 * BATCH PARA CORREÇÃO DA BASE
	 * 
	 * @author Sávio Luiz
	 * @date 02/05/2007
	 */
	public void gerarCreditoARealizarPorImoveisDoGrupo(Collection idsGrupos, Integer anoMesReferenciaConta, Integer anoMesReferenciaDebito){

		try{
			this.getControladorFaturamento().gerarCreditoARealizarPorImoveisDoGrupo(idsGrupos, anoMesReferenciaConta,
							anoMesReferenciaDebito);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0482]Emitir 2ª Via de Conta
	 * 
	 * @author Vivianne Sousa
	 * @date 18/05/2007
	 * @param colecaoConta
	 * @throws ControladorException
	 */
	public Collection<EmitirContaHelper> emitir2ViaContasHistorico(Collection idsContaEP, boolean cobrarTaxaEmissaoConta,
					Short contaSemCodigoBarras){

		try{
			return this.getControladorFaturamento().emitir2ViaContasHistorico(idsContaEP, cobrarTaxaEmissaoConta, contaSemCodigoBarras);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0524] Inserir Sistema de Esgoto
	 * 
	 * @author Kassia Albuquerque
	 * @date 09/03/2007
	 */

	public Integer inserirSistemaEsgoto(SistemaEsgoto sistemaEsgoto, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirSistemaEsgoto(sistemaEsgoto, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0525] Manter Sistema Esgoto [SB0001] Atualizar Sistema Esgoto
	 * 
	 * @author Kassia Albuquerque
	 * @date 19/03/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarSistemaEsgoto(SistemaEsgoto sistemaEsgoto, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarSistemaEsgoto(sistemaEsgoto, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0525] Manter Sistema Esgoto [SB0002] Remover Sistema Esgoto
	 * 
	 * @author Kassia Albuquerque
	 * @date 20/03/2007
	 * @throws ErroRepositorioException
	 */
	public void removerSistemaEsgoto(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerSistemaEsgoto(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0459] Informar Dados da Agencia Reguladora
	 * 
	 * @author KASSIA ALBUQUERQUE
	 * @date 04/04/2007
	 */

	public Integer informarDadosAgenciaReguladora(RaDadosAgenciaReguladora raDadosAgenciaReguladora,
					Collection collectionRaDadosAgenciaReguladoraFone, Usuario usuarioLogado){

		try{
			return this.getControladorRegistroAtendimento().informarDadosAgenciaReguladora(raDadosAgenciaReguladora,
							collectionRaDadosAgenciaReguladoraFone, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Procura a quantidade de dias de prazo
	 * [UC0459] Informar Dados da Agencia Reguladora
	 * 
	 * @author Kássia Albuquerque
	 * @date 19/04/2007
	 */

	public Integer procurarDiasPazo(Integer raId){

		try{
			return this.getControladorRegistroAtendimento().procurarDiasPazo(raId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0510] Manter Arrecadador
	 * Remover Contrato de Arrecadador
	 * 
	 * @author Marcio Roberto
	 * @date 12/04/2007
	 * @pparam ids, usuarioLogado
	 * @throws ControladorException
	 */
	public void removerContratoArrecadador(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().removerContratoArrecadador(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir Contrato de Arrecadador
	 * [UC0509] Inserir contrato de arrecadador
	 * 
	 * @author Marcio Roberto
	 * @date 22/03/2007
	 */
	public Integer inserirContratoArrecadador(ArrecadadorContrato contrato,
					Collection<ArrecadadorContratoTarifa> colecaoArrecadadorContratoTarifa, Usuario usuarioLogado){

		try{
			return this.getControladorArrecadacao().inserirContratoArrecadador(contrato, colecaoArrecadadorContratoTarifa, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0511] - FILTRAR CONTRATO ARRECADADOR
	 * Confirma a existencia do Arrecadador
	 * Autor: Marcio Roberto
	 * Data: 09/04/2007
	 */
	public boolean verificarExistenciaArrecadador(Integer codigoArrecadador){

		try{
			return this.getControladorArrecadacao().verificarExistenciaArrecadador(codigoArrecadador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0511] - FILTRAR CONTRATO ARRECADADOR
	 * Confirma a existencia do Contrato
	 * Autor: Marcio Roberto
	 * Data: 09/04/2007
	 */
	public boolean verificarExistenciaContrato(Integer numeroContrato){

		try{
			return this.getControladorArrecadacao().verificarExistenciaContrato(numeroContrato);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0510] Manter Contrato de Arrecadador
	 * 
	 * @author Marcio Roberto
	 * @date 12/04/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarContratoArrecadador(ArrecadadorContrato arrecadadorContrato,
					Collection<ArrecadadorContratoTarifa> colecaoArrecadadorContratoTarifa, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().atualizarContratoArrecadador(arrecadadorContrato, colecaoArrecadadorContratoTarifa,
							usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0591] - Gerar Relatório de Clientes Especiais
	 * Pesquisas os imóveis de acordo com os parâmetros da pesquisa
	 * 
	 * @author Rafael Corrêa
	 * @date 31/05/2007
	 */
	public Collection pesquisarImovelClientesEspeciaisRelatorio(String idUnidadeNegocio, String idGerenciaRegional,
					String idLocalidadeInicial, String idLocalidadeFinal, String[] idsPerfilImovel, String[] idsCategoria,
					String[] idsSubcategoria, String idSituacaoAgua, String idSituacaoEsgoto, String qtdeEconomiasInicial,
					String qtdeEconomiasFinal, String intervaloConsumoAguaInicial, String intervaloConsumoAguaFinal,
					String intervaloConsumoEsgotoInicial, String intervaloConsumoEsgotoFinal, String idClienteResponsavel,
					String intervaloConsumoResponsavelInicial, String intervaloConsumoResponsavelFinal,
					Date dataInstalacaoHidrometroInicial, Date dataInstalacaoHidrometroFinal, String[] idsCapacidadesHidrometro,
					String[] idsTarifasConsumo, Integer anoMesFaturamento, String idLeituraAnormalidade, String leituraAnormalidade,
					String idConsumoAnormalidade, String consumoAnormalidade, String[] idsClienteTipoEspecial){

		try{

			return this.getControladorImovel().pesquisarImovelClientesEspeciaisRelatorio(idUnidadeNegocio, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, idsPerfilImovel, idsCategoria, idsSubcategoria, idSituacaoAgua,
							idSituacaoEsgoto, qtdeEconomiasInicial, qtdeEconomiasFinal, intervaloConsumoAguaInicial,
							intervaloConsumoAguaFinal, intervaloConsumoEsgotoInicial, intervaloConsumoEsgotoFinal, idClienteResponsavel,
							intervaloConsumoResponsavelInicial, intervaloConsumoResponsavelFinal, dataInstalacaoHidrometroInicial,
							dataInstalacaoHidrometroFinal, idsCapacidadesHidrometro, idsTarifasConsumo, anoMesFaturamento,
							idLeituraAnormalidade, leituraAnormalidade, idConsumoAnormalidade, consumoAnormalidade, idsClienteTipoEspecial);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// valida anoMes para caso de uso anlise excecoes leituras
	public boolean validaDataFaturamentoIncompativel(String anoMesReferencia, String anoMesAtual){

		return this.getControladorMicromedicao().validaDataFaturamentoIncompativel(anoMesReferencia, anoMesAtual);
	}

	// valida anoMes para caso de uso anlise excecoes leituras
	public boolean validaDataFaturamentoIncompativelInferior(String anoMesReferencia, String anoMesAnterior){

		return this.getControladorMicromedicao().validaDataFaturamentoIncompativelInferior(anoMesReferencia, anoMesAnterior);
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [FS0004] Validar Registro Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @created 05/06/2007
	 * @param idSolicitacaoTipoEspecificacao
	 * @exception ControladorException
	 */
	public Object[] validarRegistroAtendimentoTransferenciaDebitoCredito(Integer idRA, boolean levantarExcecao){

		try{

			return this.getControladorCobranca().validarRegistroAtendimentoTransferenciaDebitoCredito(idRA, levantarExcecao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * Recupera a situação da ligação de esgoto
	 * 
	 * @author Raphael Rossiter
	 * @date 07/06/2007
	 * @param idImovel
	 * @return LigacaoEsgotoSituacao
	 * @throws ErroRepositorioException
	 */
	public LigacaoEsgotoSituacao pesquisarLigacaoEsgotoSituacao(Integer idImovel){

		try{

			return this.getControladorImovel().pesquisarLigacaoEsgotoSituacao(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * Recupera a situação da ligação de agua
	 * 
	 * @author Raphael Rossiter
	 * @date 07/06/2007
	 * @param idImovel
	 * @return LigacaoAguaSituacao
	 * @throws ErroRepositorioException
	 */
	public LigacaoAguaSituacao pesquisarLigacaoAguaSituacao(Integer idImovel){

		try{

			return this.getControladorImovel().pesquisarLigacaoAguaSituacao(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public LigacaoAgua pesquisarLigacaoAgua(Integer idImovel){

		try{

			return this.getControladorLigacaoAgua().pesquisarLigacaoAgua(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * @param idRA
	 *            ,
	 *            idImovelDestino
	 * @exception ControladorException
	 */
	public Integer validarTransferenciaDebitoCreditoDadosImoveis(Integer idRA, Integer idImovelDestino){

		try{

			return this.getControladorCobranca().validarTransferenciaDebitoCreditoDadosImoveis(idRA, idImovelDestino);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [SB0001] - Apresentar Débitos/Créditos do Imóvel de Origem
	 * [FS0002] - Verificar existência de débitos/créditos no imóvel de origem
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * @param idImovelOrigem
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelOrigem(Integer idImovelOrigem, Integer idClienteOrigem,
					Integer idClienteRelacaoOrigem){

		try{

			return this.getControladorCobranca().apresentarDebitoCreditoImovelOrigem(idImovelOrigem, idClienteOrigem,
							idClienteRelacaoOrigem);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseir Débito a cobrar sem RA
	 * 
	 * @author Ana Maria
	 * @date 23/05/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoInserirDebitoACobrarSemRa(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInserirDebitoACobrarSemRa(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0594] Gerar Relação de Parcelamento
	 * 
	 * @author Ana Maria
	 * @date 30/05/2007
	 */
	public Collection<RelacaoParcelamentoRelatorioHelper> filtrarRelacaoParcelamento(
					FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento){

		try{
			return this.getControladorCobranca().filtrarRelacaoParcelamento(filtrarRelacaoParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0600] Emitir Histograma de Água
	 * 
	 * @author Rafael Pinto
	 * @date 04/06/2007
	 * @param FiltrarEmitirHistogramaAguaHelper
	 * @return Collection<EmitirHistogramaAguaHelper>
	 */
	public Collection<EmitirHistogramaAguaHelper> pesquisarEmitirHistogramaAgua(FiltrarEmitirHistogramaAguaHelper filtro){

		try{
			return this.getControladorFaturamento().pesquisarEmitirHistogramaAgua(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection gerarColecaoDocumentoCobrancaOrdemServico(Integer idServicoTipoAcaoCobranca, Date dataRealizacaoAtividadeEncerrar,
					Usuario usuarioLogado, int idCobrancaAtividadeAcaoCronogramaEmitir){

		try{
			return this.getControladorCobranca().gerarColecaoDocumentoCobrancaOrdemServico(idServicoTipoAcaoCobranca,
							dataRealizacaoAtividadeEncerrar, usuarioLogado, idCobrancaAtividadeAcaoCronogramaEmitir);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Gerar Relatório de Imóveis Outros Critérios
	 * 
	 * @author Rafael Corrêa
	 * @date 25/07/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection gerarRelatorioImovelEnderecoOutrosCriterios(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, String rotaInicial,
					String rotaFinal, String sequencialRotaInicial, String sequencialRotaFinal, String segmentoInicial,
					String segmentoFinal, String subloteInicial, String subloteFinal, Short tipoEmpresa, String indicadorOrdenacao,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{

			return getControladorImovel().gerarRelatorioImovelEnderecoOutrosCriterios(idImovelCondominio, idImovelPrincipal,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal,

							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal,

							idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca,
							idEloAnormalidade, areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa,
							idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal,
							quadraInicial, quadraFinal, loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao,
							indicadorMedicao, idSubCategoria, idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal,
							diaVencimento, idCliente, idClienteTipo, idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal,
							numeroMoradoresInicial, numeroMoradoresFinal, idAreaConstruidaFaixa, idUnidadeNegocio, rotaInicial, rotaFinal,
							sequencialRotaInicial, sequencialRotaFinal, segmentoInicial, segmentoFinal, subloteInicial, subloteFinal,
							tipoEmpresa, indicadorOrdenacao, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * Inseri o tipo de debito na base
	 * [UC0529] Inserir Tipo de Débito
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/03/2007
	 * @author eduardo Henrique
	 * @date 09/07/2008
	 * @param debitoTipo
	 * @param usuarioLogado
	 * @return
	 */

	public Integer inserirDebitoTipo(DebitoTipo debitoTipo, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirDebitoTipo(debitoTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseri o tipo de debito na base
	 * [UC0529] Inserir Tipo de Débito
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/03/2007
	 * @author eduardo henrique
	 * @date 08/07/2008
	 *       Inclusão dos Atributos indicadorIncidenciaMulta, indicadorIncidenciaJurosMora
	 * @param usuarioLogado
	 * @param valorLimeteDebito
	 * @return
	 */

	public void atualizarDebitoTipo(DebitoTipo debitoTipoBase, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarDebitoTipo(debitoTipoBase, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0609] Transferência de Débitos/Créditos
	 * [SB00002] Transferência dos Débitos/Créditos selecionados para o imóvel
	 * destino
	 * 
	 * @author Vivianne Sousa
	 * @date 09/06/2007
	 * @param idImovelDestino
	 * @param colecaoConta
	 * @param colecaoDebitosACobrar
	 * @param colecaoCreditosARealizar
	 * @param colecaoGuiasPagamento
	 * @throws ControladorException
	 */
	public Integer transferirDebitosCreditos(Integer idImovelOrigem, Integer idImovelDestino, Collection<Conta> colecaoContas,
					Collection<DebitoACobrar> colecaoDebitosACobrar, Collection<CreditoARealizar> colecaoCreditosARealizar,
					Collection<GuiaPagamento> colecaoGuiasPagamento, Usuario usuarioLogado,
					Integer idRegistroAtendimento, String identificadoresConta){

		try{

			return this.getControladorCobranca().transferirDebitosCreditos(idImovelOrigem, idImovelDestino, colecaoContas,
							colecaoDebitosACobrar,
							colecaoCreditosARealizar, colecaoGuiasPagamento, usuarioLogado, idRegistroAtendimento, identificadoresConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0609] Transferência de Débitos/Créditos
	 * [SB00002] Transferência dos Débitos/Créditos selecionados para o imóvel
	 * destino
	 * 
	 * @author Gicevalter Couto
	 * @date 19/09/2014
	 */
	public Integer transferirDebitosCreditosCliente(Integer idRegistroAtendimento, Integer idImovelOrigem, List<Integer> idClienteOrigem,
					List<Integer> idRelacaoClienteOrigem, Integer idClienteDestino, List<String> idsContas, List<String> idsDebitosACobrar,
					List<String> idsCreditosARealizar, List<String> idsGuiasPagamento, Usuario usuarioLogado){

		try{

			return this.getControladorCobranca().transferirDebitosCreditosCliente(idRegistroAtendimento, idImovelOrigem, idClienteOrigem,
							idRelacaoClienteOrigem, idClienteDestino, idsContas, idsDebitosACobrar, idsCreditosARealizar,
							idsGuiasPagamento, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0613] - Registrar Leituras e Anormalidades
	 * Pesquisa os imóveis com faixa falsa
	 * 
	 * @author Rafael Corrêa
	 * @date 18/06/2007
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarImovelFaixaFalsa(Integer anoMesReferencia){

		try{
			return getControladorMicromedicao().pesquisarImovelFaixaFalsa(anoMesReferencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0613] - Registrar Leituras e Anormalidades
	 * Retorna a quantidade de imóveis com faixa falsa
	 * 
	 * @author Rafael Corrêa
	 * @date 18/06/2007
	 * @return Collection
	 * @throws ControladorException
	 */
	public Integer pesquisarImovelFaixaFalsaCount(Integer anoMesReferencia){

		try{
			return getControladorMicromedicao().pesquisarImovelFaixaFalsaCount(anoMesReferencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * este caso de uso gera a integração para a contabilidade
	 * [UC0469] Gerar Integração para a Contabilidade
	 * 
	 * @author Flávio Leonardo
	 * @date 06/06/2007
	 * @param idLancamentoOrigem
	 * @param anoMes
	 * @param data
	 * @throws ControladorException
	 */
	public void gerarIntegracaoContabilidadeCaern(String idLancamentoOrigem, String anoMes, String data){

		try{
			this.getControladorFinanceiro().gerarIntegracaoContabilidadeCaern(idLancamentoOrigem, anoMes, data);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gera os resumos dos devedores duvidosos e marca as contas baixadas
	 * contabilmente.
	 * [UC0485] Gerar Resumo dos Devedores Duvidosos
	 * 
	 * @author Pedro Alexandre
	 * @date 18/06/2007
	 * @param processoIniciado
	 * @param dadosProcessamento
	 * @return
	 */
	public Integer gerarResumoDevedoresDuvidosos(ProcessoIniciado processoIniciado, Map<String, Object> dadosProcessamento){

		try{
			return this.getControladorFinanceiro().gerarResumoDevedoresDuvidosos(processoIniciado, dadosProcessamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados necessário para a geração do relatório
	 * [UC0637] - Gerar Relatórios Volumes Faturados
	 * 
	 * @author Rafael Corrêa
	 * @created 11/09/2007
	 */
	public Collection<VolumesFaturadosRelatorioHelper> pesquisarDadosRelatorioVolumesFaturados(Integer idLocalidade, Integer anoMes,
					Integer anoMesInformado, Integer anoMes1, Integer anoMes2, Integer anoMes3, Integer anoMes4, Integer anoMes5){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioVolumesFaturados(idLocalidade, anoMes, anoMesInformado, anoMes1,
							anoMes2, anoMes3, anoMes4, anoMes5);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados necessário para a geração do relatório resumido
	 * [UC0637] - Gerar Relatórios Volumes Faturados
	 * 
	 * @author Rafael Corrêa
	 * @created 13/09/2007
	 */
	public Collection<VolumesFaturadosRelatorioHelper> pesquisarDadosRelatorioVolumesFaturadosResumido(Integer idLocalidade,
					Integer anoMes, Integer anoMesInformado, Integer anoMes1, Integer anoMes2, Integer anoMes3, Integer anoMes4,
					Integer anoMes5){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioVolumesFaturadosResumido(idLocalidade, anoMes, anoMesInformado,
							anoMes1, anoMes2, anoMes3, anoMes4, anoMes5);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados necessário para a geração do relatório
	 * [UC0635] - Gerar Relatórios de Contas em Revisão
	 * 
	 * @author Rafael Corrêa
	 * @created 20/09/2007
	 */
	public Collection<ContasEmRevisaoRelatorioHelper> pesquisarDadosRelatorioContasRevisao(Integer idGerenciaRegional,
					Integer idUnidadeNegocio, Integer idElo, Integer idLocalidadeInicial, Integer idLocalidadeFinal,
					Integer idMotivoRevisao, Integer idImovelPerfil, Integer referenciaInicial, Integer referenciaFinal){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioContasRevisao(idGerenciaRegional, idUnidadeNegocio, idElo,
							idLocalidadeInicial, idLocalidadeFinal, idMotivoRevisao, idImovelPerfil, referenciaInicial, referenciaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Relatorio Analitico de Contas

	public Collection<RelatorioAnaliticoContasHelper> pesquisarDadosRelatorioAnaliticoContas(Integer idGerenciaRegional,
					Integer idLocalidade, Integer idCategoria, Integer idCliente, Integer IdImovel, Integer idSituacao,
					Integer motivoRetificacao, Integer referencia, Integer faturamentoGrupo, Integer setorComercial, Integer quadra){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioAnaliticoContas(idGerenciaRegional, idLocalidade, idCategoria,
							idCliente, IdImovel, idSituacao, motivoRetificacao, referencia, faturamentoGrupo, setorComercial, quadra);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	};

	/**
	 * Pesquisa os dados necessário para a geração do relatório resumido
	 * [UC0635] - Gerar Relatórios de Contas em Revisão
	 * 
	 * @author Rafael Corrêa
	 * @created 20/09/2007
	 * @throws ControladorException
	 */
	public Collection<ContasEmRevisaoRelatorioHelper> pesquisarDadosRelatorioContasRevisaoResumido(Integer idGerenciaRegional,
					Integer idElo, Integer idLocalidadeInicial, Integer idLocalidadeFinal, Integer idMotivoRevisao, Integer idImovelPerfil,
					Integer referenciaInicial, Integer referenciaFinal){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioContasRevisaoResumido(idGerenciaRegional, idElo,
							idLocalidadeInicial, idLocalidadeFinal, idMotivoRevisao, idImovelPerfil, referenciaInicial, referenciaFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados necessário para a geração do relatório
	 * [UC0638] - Gerar Relatórios Anormalidade Consumo
	 * 
	 * @author Rafael Corrêa
	 * @created 15/10/2007
	 */
	public Collection<GerarRelatorioAnormalidadeConsumoHelper> pesquisarDadosRelatorioAnormalidadeConsumo(Integer idGrupoFaturamento,
					Short codigoRota, Integer idGerenciaRegional, Integer idUnidadeNegocio, Integer idElo, Integer idLocalidadeInicial,
					Integer idLocalidadeFinal, Integer referencia, Integer idImovelPerfil, Integer numOcorConsecutivas,
					String indicadorOcorrenciasIguais, Integer mediaConsumoInicial, Integer mediaConsumoFinal,
					Integer idAnormalidadeConsumo, Integer idAnormalidadeLeitura){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioAnormalidadeConsumo(idGrupoFaturamento, codigoRota,
							idGerenciaRegional, idUnidadeNegocio, idElo, idLocalidadeInicial, idLocalidadeFinal, referencia,
							idImovelPerfil, numOcorConsecutivas, indicadorOcorrenciasIguais, mediaConsumoInicial, mediaConsumoFinal,
							idAnormalidadeConsumo, idAnormalidadeLeitura);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir um Cliente Tipo
	 * [UC????] Inserir Cliente Tipo
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirClienteTipo(ClienteTipo clienteTipo, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirClienteTipo(clienteTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir um Cliente Responsavel
	 * [UC????] Inserir Cliente Responsavel
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 20/01/2011
	 */

	public Integer inserirClienteResponsavel(ClienteResponsavel clienteResponsavel, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirClienteResponsavel(clienteResponsavel, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir um Imovel Agua Para Todos
	 * [UC????] Inserir Imovel Agua Para Todos
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 25/01/2011
	 */

	public Integer inserirImovelAguaParaTodos(ImovelAguaParaTodos imovelAguaParaTodos, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirImovelAguaParaTodos(imovelAguaParaTodos, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Atualizar um Cliente Tipo
	 * [UC????] Atualizar Cliente Tipo
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public void atualizarClienteTipo(ClienteTipo clienteTipo){

		try{
			this.getControladorCadastro().atualizarClienteTipo(clienteTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Atualizar um Cliente Responsavel
	 * Atualizar Cliente Responsavel
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 24/01/2011
	 * @param clienteResponsavel
	 * @param usuario
	 */
	public void atualizarClienteResponsavel(ClienteResponsavel clienteResponsavel, Usuario usuario){

		try{
			this.getControladorCadastro().atualizarClienteResponsavel(clienteResponsavel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover ClienteResponsavel
	 * 
	 * @author isilva
	 * @date 15/02/2011
	 * @param ids
	 * @param usuarioLogado
	 */
	public void removerClienteResponsavel(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerClienteResponsavel(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Cliente
	 * 
	 * @author isilva
	 * @date 15/02/2011
	 * @param ids
	 * @param usuarioLogado
	 */
	public void removerCliente(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCliente().removerCliente(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Atualizar um Imovel Agua para Todos
	 * Atualizar Imovel Agua para Todos
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 25/01/2011
	 */

	public void atualizarImovelAguaParaTodos(ImovelAguaParaTodos imovelAguaParaTodos, Imovel imovel, Usuario usuario){

		try{
			this.getControladorCadastro().atualizarImovelAguaParaTodos(imovelAguaParaTodos, imovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0604] Emitir Histograma de Água por Economia
	 * 
	 * @author Rafael Pinto
	 * @date 04/06/2007
	 * @param FiltrarEmitirHistogramaAguaEconomiaHelper
	 * @return Collection<EmitirHistogramaAguaEconomiaHelper>
	 */
	public Collection<EmitirHistogramaAguaEsgotoEconomiaHelper> pesquisarEmitirHistogramaAguaEconomia(
					FiltrarEmitirHistogramaAguaEconomiaHelper filtro){

		try{
			return this.getControladorRelatorioFaturamento().pesquisarEmitirHistogramaAguaEconomia(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// /**
	// * @param colecaoRota
	// * @param anoMesCorrente
	// * @param idGrupoFaturamentoRota
	// * @param dataPrevistaAtividadeLeitura
	// * @return
	// * @deprecated
	// */
	// public Collection gerarDadosPorLeituraMicroColetor(Collection colecaoRota, Integer
	// anoMesCorrente, Integer idGrupoFaturamentoRota,
	// Date dataPrevistaAtividadeLeitura){
	//
	// try{
	// FuncionalidadeIniciada funcionalidade = new FuncionalidadeIniciada();
	// funcionalidade.setId(0);
	// return this.getControladorMicromedicao().gerarDadosPorLeituraMicroColetor(colecaoRota,
	// anoMesCorrente, idGrupoFaturamentoRota,
	// funcionalidade, dataPrevistaAtividadeLeitura);
	// }catch(ControladorException ex){
	// throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
	// }
	// }

	/**
	 * Permite inserir uma Capacidade de Hidrometro
	 * [UC????] Inserir Capacidade Hidrometro
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public Integer inserirCapacidadeHidrometro(HidrometroCapacidade hidrometroCapacidade, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirCapacidadeHidrometro(hidrometroCapacidade, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Atualizar um Hidrometro
	 * [UC????] Atualizar Cliente Tipo
	 * 
	 * @author Thiago Tenorio
	 * @date 04/12/2006
	 */

	public void atualizarCapacidadeHidrometro(HidrometroCapacidade hidrometroCapacidade){

		try{
			this.getControladorMicromedicao().atualizarCapacidadeHidrometro(hidrometroCapacidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar pagamentos pelo aviso bancário
	 * 
	 * @author Ana Maria
	 * @date 11/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public PagamentosDevolucoesHelper filtrarPagamentos(FiltroPagamento filtroPagamento, FiltroPagamentoHistorico filtroPagamentoHistorico){

		try{
			return this.getControladorArrecadacao().filtrarPagamentos(filtroPagamento, filtroPagamentoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar devoluções pelo aviso bancário
	 * 
	 * @author Ana Maria
	 * @date 11/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public PagamentosDevolucoesHelper filtrarDevolucoes(FiltroDevolucao filtroDevolucao, FiltroDevolucaoHistorico filtroDevolucaoHistorico){

		try{
			return this.getControladorArrecadacao().filtrarDevolucoes(filtroDevolucao, filtroDevolucaoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar valores de arrecadação e devolução do aviso bancário
	 * 
	 * @author Ana Maria
	 * @date 14/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public ValoresArrecadacaoDevolucaoAvisoBancarioHelper pesquisarValoresAvisoBancario(Integer idAvisoBancario){

		try{
			return this.getControladorArrecadacao().pesquisarValoresAvisoBancario(idAvisoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Pagamentos e Aviso Bancário
	 * 
	 * @author Ana Maria
	 * @date 15/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public void atualizarAvisoBancarioPagamentos(Collection<Integer> idsPagamentos, Collection<Integer> idsPagamentosHistorico,
					String arrecadacaoCalculadoDepoisOrigem, String arrecadacaoCalculadoDepoisDestino, Integer idAvisoBancarioO,
					Integer idAvisoBancarioD, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().atualizarAvisoBancarioPagamentos(idsPagamentos, idsPagamentosHistorico,
							arrecadacaoCalculadoDepoisOrigem, arrecadacaoCalculadoDepoisDestino, idAvisoBancarioO, idAvisoBancarioD,
							usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Devolucões e Aviso Bancário
	 * 
	 * @author Ana Maria
	 * @date 15/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public void atualizarAvisoBancarioDevolucoes(Collection<Integer> idsDevolucoes, Collection<Integer> idsDevolucoesHistorico,
					String devolucaoInformadoDepoisOrigem, String devolucaoCalculadoDepoisOrigem, String devolucaoInformadoDepoisDestino,
					String devolucaoCalculadoDepoisDestino, Integer idAvisoBancarioO, Integer idAvisoBancarioD, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().atualizarAvisoBancarioDevolucoes(idsDevolucoes, idsDevolucoesHistorico,
							devolucaoInformadoDepoisOrigem, devolucaoCalculadoDepoisOrigem, devolucaoInformadoDepoisDestino,
							devolucaoCalculadoDepoisDestino, idAvisoBancarioO, idAvisoBancarioD, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0587] Emitir Contrato de Prestacao de servico
	 * 
	 * @param idImovel
	 * @param idClienteEmpresa
	 * @return
	 * @throws ControladorException
	 */
	public RelatorioContratoPrestacaoServicoJuridicoBean gerarContratoJuridica(Integer idImovel, Integer idClienteEmpresa){

		try{
			return this.getControladorAtendimentoPublico().gerarContratoJuridica(idImovel, idClienteEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * [UC0616] - Informar Dados para Consulta do Resumo das Ações de Cobrança
	 * Eventual
	 * 
	 * @author Sávio Luiz
	 * @date 25/06/2007
	 */
	public InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventual(String dataEmissaoInicial,
					String dataEmissaoFinal, String idCobrancaAcaoAtividadeComando, String tituloCobrancaAcaoAtividadeComando,
					String[] idsCobrancaGrupo, String[] idsGerenciaRegional, Integer idEloPolo, Integer idLocalidade,
					Integer idSetorComercial, Integer nmQuadra, String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
					String[] idsLigacaoEsgotoSituacao, String[] idsCategoria, String[] idsEsferaPoder, String[] idsEmpresas,
					Integer idUnidadeNegocio, String[] idsCobrancaAcao){

		try{
			return this.getControladorCobranca().informarDadosGeracaoResumoAcaoConsultaEventual(dataEmissaoInicial, dataEmissaoFinal,
							idCobrancaAcaoAtividadeComando, tituloCobrancaAcaoAtividadeComando, idsCobrancaGrupo, idsGerenciaRegional,
							idEloPolo, idLocalidade, idSetorComercial, nmQuadra, idsImovelPerfil, idsLigacaoAguaSituacao,
							idsLigacaoEsgotoSituacao, idsCategoria, idsEsferaPoder, idsEmpresas, idUnidadeNegocio, idsCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * Pesquisa as ações de cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 26/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection consultarResumoCobrancaAcaoEventual(
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper){

		try{
			return this.getControladorGerencialCobranca().consultarResumoCobrancaAcaoEventual(
							informarDadosGeracaoResumoAcaoConsultaEventualHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter a data de vencimento de um grupo de faturamento, no mês de
	 * faturamento corrente.
	 * [UC0618] Obter data de vencimento do grupo
	 * 
	 * @author Pedro Alexandre
	 * @date 27/06/2007
	 * @param idFaturamentoGrupo
	 * @return
	 */
	public Date obterDataVencimentoGrupo(Integer idFaturamentoGrupo, Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento().obterDataVencimentoGrupo(idFaturamentoGrupo, anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * Pesquisa as ações de cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 26/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection criarColecaoAgrupamentoResumosCobrancaAcaoEventual(
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper){

		try{
			return this.getControladorGerencial().criarColecaoAgrupamentoResumosCobrancaAcaoEventual(
							informarDadosGeracaoResumoAcaoConsultaEventualHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * Pesquisa as ações de cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 26/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection consultarResumoCobrancaAcaoEventualPerfil(Integer idCobrancaAcao, Integer idCobrancaAcaoSituacao,
					Integer idCobrancaAcaoDebito, Short idIndicador,
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper){

		try{
			return this.getControladorGerencialCobranca().consultarResumoCobrancaAcaoEventualPerfil(idCobrancaAcao, idCobrancaAcaoSituacao,
							idCobrancaAcaoDebito, idIndicador, informarDadosGeracaoResumoAcaoConsultaEventualHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * Pesquisa as ações de cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 26/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection consultarCobrancaAcaoEventualDebitoComIndicador(
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper,
					Integer idCobrancaAcao, Integer idCobrancaAcaoSituacao, Integer idCobrancaAcaoDebito){

		try{
			return this.getControladorGerencialCobranca().consultarCobrancaAcaoEventualDebitoComIndicador(
							informarDadosGeracaoResumoAcaoConsultaEventualHelper, idCobrancaAcao, idCobrancaAcaoSituacao,
							idCobrancaAcaoDebito);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Relatório de Imóveis Outros Critérios
	 * 
	 * @author Rafael Corrêa
	 * @date 25/07/2006
	 * @throws ControladorException
	 */
	public Collection gerarRelatorioCadastroConsumidoresInscricao(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, String rotaInicial,
					String rotaFinal, String sequencialRotaInicial, String sequencialRotaFinal, String segmentoInicial,
					String segmentoFinal, String subloteInicial, String subloteFinal, String indicadorOrdenacao,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		try{
			return getControladorImovel().gerarRelatorioCadastroConsumidoresInscricao(idImovelCondominio, idImovelPrincipal,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal,

							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal,

							idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca,
							idEloAnormalidade, areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa,
							idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal,
							quadraInicial, quadraFinal, loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao,
							indicadorMedicao, idSubCategoria, idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal,
							diaVencimento, idCliente, idClienteTipo, idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal,
							numeroMoradoresInicial, numeroMoradoresFinal, idAreaConstruidaFaixa, idUnidadeNegocio, rotaInicial, rotaFinal,
							sequencialRotaInicial, sequencialRotaFinal, segmentoInicial, segmentoFinal, subloteInicial, subloteFinal,
							indicadorOrdenacao, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0458] - Imprimir Ordem de Serviço
	 * Pesquisa o telefone principal do Cliente para o Relatório de OS
	 * 
	 * @author Rafael Corrêa
	 * @date 17/10/2006
	 * @param idRegistroAtendimento
	 * @throws ErroRepositorioException
	 */

	public String pesquisarClienteFonePrincipal(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarClienteFonePrincipal(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0081] Manter Marca de Hidrometro
	 * 
	 * @author Bruno Barros
	 * @date 03/07/2007
	 * @throws ErroRepositorioException
	 */
	public void removerHidrometroMarca(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroMarca(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0081] Manter Hidrometro Marca
	 * 
	 * @author Bruno Barros
	 * @date 04/07/2007
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroMarca(HidrometroMarca hidrometroMarca, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroMarca(hidrometroMarca, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC] Remover Hidrometro Diametro
	 * 
	 * @author Deyverson Santos
	 * @date 19/12/2008
	 * @throws ErroRepositorioException
	 */

	public void removerHidrometroDiametro(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroDiametro(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] Manter Hidrometro Diametro
	 * 
	 * @author Deyverson Santos
	 * @date 15/12/2008
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroDiametro(HidrometroDiametro hidrometroDiametro, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroDiametro(hidrometroDiametro, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirHidrometroTipo(HidrometroTipo hidrometroTipo, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirHidrometroTipo(hidrometroTipo, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerHidrometroTipo(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroTipo(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroTipo(HidrometroTipo hidrometroTipo, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroTipo(hidrometroTipo, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirHidrometroMotivoBaixa(HidrometroMotivoBaixa hidrometroMotivoBaixa, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirHidrometroMotivoBaixa(hidrometroMotivoBaixa, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerHidrometroMotivoBaixa(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroMotivoBaixa(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroMotivoBaixa(HidrometroMotivoBaixa hidrometroMotivoBaixa, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroMotivoBaixa(hidrometroMotivoBaixa, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirHidrometroClasseMetrologica(HidrometroClasseMetrologica hidrometroClasseMetrologica, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirHidrometroClasseMetrologica(hidrometroClasseMetrologica, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerHidrometroClasseMetrologica(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroClasseMetrologica(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroClasseMetrologica(HidrometroClasseMetrologica hidrometroClasseMetrologica, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroClasseMetrologica(hidrometroClasseMetrologica, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirHidrometroLocalArmazenagem(HidrometroLocalArmazenagem hidrometroLocalArmazenagem, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirHidrometroLocalArmazenagem(hidrometroLocalArmazenagem, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerHidrometroLocalArmazenagem(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerHidrometroLocalArmazenagem(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 03/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarHidrometroLocalArmazenagem(HidrometroLocalArmazenagem hidrometroLocalArmazenagem, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarHidrometroLocalArmazenagem(hidrometroLocalArmazenagem, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirProfissao(Profissao profissao, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirProfissao(profissao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerProfissao(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerProfissao(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarProfissao(Profissao profissao, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarProfissao(profissao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirImovelPerfil(ImovelPerfil imovelPerfil, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirImovelPerfil(imovelPerfil, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerImovelPerfil(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerImovelPerfil(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 15/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarImovelPerfil(ImovelPerfil imovelPerfil, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarImovelPerfil(imovelPerfil, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Victon Santos
	 * @date 17/07/2013
	 * @throws ErroRepositorioException
	 */
	public Integer inserirPadraoConstrucao(PadraoConstrucao padraoConstrucao, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirPadraoConstrucao(padraoConstrucao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 17/07/2013
	 * @throws ErroRepositorioException
	 */

	public void removerPadraoConstrucao(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerPadraoConstrucao(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Victon Santos
	 * @date 17/07/2013
	 * @throws ErroRepositorioException
	 */
	public void atualizarPadraoConstrucao(PadraoConstrucao padraoConstrucao, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarPadraoConstrucao(padraoConstrucao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Metodo que retorna a data de revisão da conta
	 * 
	 * @author Vivianne Sousa
	 * @date 06/07/2007
	 * @param idsConta
	 * @return
	 */
	public Collection pesquisarDataRevisaoConta(Collection idsConta){

		try{
			return this.getControladorFaturamento().pesquisarDataRevisaoConta(idsConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0549] Consultar Dados de um Pagamento
	 * Metodo que retorna a Descricao e o Id do Cliente
	 * 
	 * @author Kassia Albuquerque
	 * @date 05/07/2007
	 * @throws ErroRepositorioException
	 */
	public Cliente obterDescricaoIdCliente(Integer idImovel){

		try{
			return this.getControladorImovel().obterDescricaoIdCliente(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0549] Consultar Dados de um Pagamento
	 * Metodo que retorna o Nome do Agente Arrecadador
	 * 
	 * @author Kassia Albuquerque
	 * @date 09/07/2007
	 * @throws ErroRepositorioException
	 */
	public String pesquisarNomeAgenteArrecadador(Integer idPagamentoHistorico){

		try{
			return this.getControladorImovel().pesquisarNomeAgenteArrecadador(idPagamentoHistorico);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * relatório de extrato de debito
	 * 
	 * @author Vivianne Sousa
	 * @date 17/07/2007
	 * @param
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	public String obterRotaESequencialRotaDoImovel(Integer idImovel){

		try{
			return this.getControladorMicromedicao().obterRotaESequencialRotaDoImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0263] Filtrar Movimento dos Arrecadadores - Relatório
	 * 
	 * @author Ana Maria
	 * @date 13/07/07
	 * @param codigoBanco
	 * @param codigoRemessa
	 * @param descricaoIdentificacaoServico
	 * @param numeroSequencialArquivo
	 * @param dataGeracaoInicio
	 * @param dataGeracaoFim
	 * @param ultimaAlteracaoInicio
	 * @param ultimaAlteracaoFim
	 * @param descricaoOcorrencia
	 * @param indicadorAceitacao
	 * @param concessionaria
	 * @param indicadorAbertoFechado
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> filtrarIdsMovimentoArrecadador(String codigoBanco, String codigoRemessa,
					String descricaoIdentificacaoServico, String idImovel, String numeroSequencialArquivo, Date dataGeracaoInicio,
					Date dataGeracaoFim, Date ultimaAlteracaoInicio, Date ultimaAlteracaoFim, String descricaoOcorrencia,
					String indicadorAceitacao, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().filtrarIdsMovimentoArrecadador(codigoBanco, codigoRemessa,
							descricaoIdentificacaoServico, idImovel, numeroSequencialArquivo, dataGeracaoInicio, dataGeracaoFim,
							ultimaAlteracaoInicio, ultimaAlteracaoFim, descricaoOcorrencia, indicadorAceitacao, idConcessionaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0619] Gerar Relação de Acompanhamento dos Movimentos Arrecadadores por
	 * NSA
	 * 
	 * @author Ana Maria
	 * @param idConcessionaria
	 * @date 12/07/2007
	 * @param idMovimentoArrecadador
	 * @return
	 */
	public Collection<MovimentoArrecadadoresPorNSAHelper> gerarMovimentoArrecadadoresNSA(Collection<Integer> idsArrecadadorMovimento,
					Integer codigoFormaArrecadacao, String idConcessionaria){

		try{
			return this.getControladorArrecadacao().gerarMovimentoArrecadadoresNSA(idsArrecadadorMovimento, codigoFormaArrecadacao,
							idConcessionaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta ResumoDevedoresDuvidosos para a geração do relatório [UC0487]
	 * Gerar Relatório de Resumo de Devedores Duvidosos de acordo com a opção de
	 * totalização.
	 * 
	 * @author Vivianne Sousa
	 * @created 20/07/2007
	 * @param opcaoTotalizacao
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarResumoDevedoresDuvidososRelatorio(String opcaoTotalizacao, int mesAnoReferencia, Integer gerenciaRegional,
					Integer localidade, Integer unidadeNegocio){

		try{
			return this.getControladorFinanceiro().consultarResumoDevedoresDuvidososRelatorio(opcaoTotalizacao, mesAnoReferencia,
							gerenciaRegional, localidade, unidadeNegocio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0595] Gerar Histórico de Medicao
	 * 
	 * @param medicaoTipo
	 *            Tipo de medição
	 * @param imovel
	 *            Imovel a ter a medicao gerada
	 * @param faturamentoGrupo
	 *            Grupo de faturamento
	 * @return
	 * @throws ControladorException
	 */
	public MedicaoHistorico gerarHistoricoMedicao(MedicaoTipo medicaoTipo, Imovel imovel, FaturamentoGrupo faturamentoGrupo,
					SistemaParametro sistemaParametro){

		try{
			return this.getControladorMicromedicao().gerarHistoricoMedicao(medicaoTipo, imovel, faturamentoGrupo, sistemaParametro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que gera o resumo de Metas da CAERN
	 * [UC0623] - Gerar Resumo de Metas
	 * 
	 * @author Sávio Luiz
	 * @date 20/07/2007
	 */
	public void gerarResumoMetas(int idSetor, Date dataInicial, Date dataFinal){

		try{
			this.getControladorGerencialCadastro().gerarResumoMetas(idSetor, dataInicial, dataFinal, 0);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que gera o resumo de Metas da CAERN
	 * [UC0623] - Gerar Resumo de Metas
	 * 
	 * @author Sávio Luiz
	 * @date 20/07/2007
	 */
	public void gerarResumoMetasAcumulado(int idSetor, Integer anoMesArrecadacao){

		try{
			this.getControladorGerencialCadastro().gerarResumoMetasAcumulado(idSetor, anoMesArrecadacao, 0);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém a o 117º caracter de uma String
	 * 
	 * @author Kassia Albuquerque
	 * @date 20/07/2007
	 * @return String
	 */
	public String pesquisarCaracterRetorno(Integer idConteudoRegistro){

		try{
			return this.getControladorImovel().pesquisarCaracterRetorno(idConteudoRegistro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa uma coleção de quadra com uma query especifica
	 * 
	 * @param idsSetorComercial
	 * @param idFaturamentoGrupo
	 *            parametros para a consulta
	 * @return Description of the Return Value
	 * @throws ControladorException
	 */
	public Collection pesquisarQuadrasPorSetorComercialFaturamentoGrupo(int localidade, int[] idsSetorComercial, Integer idFaturamentoGrupo){

		try{
			return this.getControladorLocalidade().pesquisarQuadrasPorSetorComercialFaturamentoGrupo(localidade, idsSetorComercial,
							idFaturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir um Leiturista
	 * [UC0588] Inserir Leiturista
	 * 
	 * @author Thiago Tenorio
	 * @date 22/07/2007
	 */

	public Integer inserirLeiturista(Leiturista leiturista, Usuario usuarioLogado){

		try{
			return this.getControladorMicromedicao().inserirLeiturista(leiturista, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 27/07/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Cliente obterIdENomeCliente(String cpf){

		try{
			return this.getControladorCliente().obterIdENomeCliente(cpf);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Cliente
	 * 
	 * @author Vivianne Sousa
	 * @date 30/07/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoAlterarNomeCliente(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoAlterarNomeCliente(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Incluir Devolução
	 * 
	 * @author Vivianne Sousa
	 * @date 30/07/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoIcluirDevolucaoMaiorValorMaximo(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoIcluirDevolucaoMaiorValorMaximo(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0583] Inserir Roteiro Empresa
	 * Insere um objeto do tipo roteiro empresa no BD
	 * 
	 * @author Francisco Nascimento
	 * @date 24/07/2007
	 * @param roteiroEmpresa
	 * @param idLocalidade
	 * @param collectionRoteiroEmpresaAcaoCriterio
	 * @return idRota
	 * @throws ControladorException
	 */
	public Integer inserirRoteiroEmpresa(RoteiroEmpresa roteiroEmpresa, String[] quadras, Usuario usuarioLogado){

		try{
			Integer id = (Integer) this.getControladorMicromedicao().inserirRoteiroEmpresa(roteiroEmpresa, quadras, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite gerar o arquivo texto do roteiro empresa para o leiturista.
	 * [UC0627] Gerar Arquivo Texto para Leitura
	 * 
	 * @author Pedro Alexandre
	 * @date 02/08/2007
	 * @param colecaoRoteirosEmpresa
	 * @param anoMesFaturamento
	 * @param faturamentoGrupo
	 */
	public void gerarArquivoTextoParaLeitura(Collection colecaoRoteirosEmpresa, Collection colecaoRotas, Integer anoMesFaturamento,
					FaturamentoGrupo faturamentoGrupo){

		try{
			this.getControladorMicromedicao().gerarArquivoTextoParaLeiturista(colecaoRoteirosEmpresa, colecaoRotas, anoMesFaturamento,
							faturamentoGrupo, 0);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera o debitoCreditoSituacaoAtual da Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 10/08/2007
	 * @return Integer
	 */
	public Integer pesquisarDebitoCreditoSituacaoAtualConta(Integer idImovel, Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento().pesquisarDebitoCreditoSituacaoAtualConta(idImovel, anoMesReferencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém a representação númerica do código de barras de um pagamento de
	 * acordo com os parâmetros informados
	 * [UC0229] Obter Representação Numérica do Código de Barras
	 * 
	 * @author Pedro Alexandre
	 * @date 20/04/2006
	 * @param tipoPagamento
	 * @param valorCodigoBarra
	 * @param idLocalidade
	 * @param matriculaImovel
	 * @param digitoVerificadorRefContaModulo10
	 * @param idTipoDebito
	 * @param anoEmissaoGuiaPagamento
	 * @param sequencialDocumentoCobranca
	 * @param idTipoDocumento
	 * @param idCliente
	 * @param seqFaturaClienteResponsavel
	 * @param numeroPrestacaoDocumento
	 *            TODO
	 * @param anoMesReferenciaConta
	 * @return
	 * @throws ParametroNaoInformadoException
	 */
	public String obterRepresentacaoNumericaCodigoBarra(Integer tipoPagamento, BigDecimal valorCodigoBarra, Integer idLocalidade,
					Integer matriculaImovel, String mesAnoReferenciaConta, Integer digitoVerificadorRefContaModulo10, Integer idTipoDebito,
					String anoEmissaoGuiaPagamento, String sequencialDocumentoCobranca, Integer idTipoDocumento,
					Integer idClienteResponsavel, Integer seqFaturaClienteResponsavel, Short numeroPrestacaoDocumento,
					Integer idGuiaPagamento, Integer idCliente){

		try{

			return this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(tipoPagamento, valorCodigoBarra, idLocalidade,
							matriculaImovel, mesAnoReferenciaConta, digitoVerificadorRefContaModulo10, idTipoDebito,
							anoEmissaoGuiaPagamento, sequencialDocumentoCobranca, idTipoDocumento, idClienteResponsavel,
							seqFaturaClienteResponsavel, numeroPrestacaoDocumento, null, idGuiaPagamento, idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Processamento Rápido
	 * 
	 * @author Raphael Rossiter
	 * @date 17/08/2007
	 * @return Collection<Conta>
	 * @throws ErroRepositorioException
	 */
	public Collection<Conta> pesquisarContaComPagamentoHistorico(){

		try{
			return this.getControladorArrecadacao().pesquisarContaComPagamentoHistorico();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0155] Encerrar Faturamento do Mês
	 * Tarnsfere para o histórico de contas
	 * 
	 * @author Pedro Alexandre
	 * @date 09/10/2006
	 * @param contas
	 * @param anoMesFaturamentoSistemaParametro
	 * @throws ControladorException
	 */
	public void transferirContasParaHistorico(Collection<Conta> contas, int anoMesFaturamentoSistemaParametro){

		try{
			this.getControladorFaturamento().transferirContasParaHistorico(contas, anoMesFaturamentoSistemaParametro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Alterar Vencimento do Conjunto de Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2007
	 * @throws ControladorException
	 */
	public void alterarVencimentoConjuntoConta(Integer idGrupoFaturamento, Date dataVencimentoInformada, Integer anoMes, Integer anoMesFim,
					Date dataVencimentoContaInicio, Date dataVencimentoContaFim){

		try{

			this.getControladorFaturamento().alterarVencimentoConjuntoConta(idGrupoFaturamento, dataVencimentoInformada, anoMes, anoMesFim,
							dataVencimentoContaInicio, dataVencimentoContaFim);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retificar Conjunto de Conta
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2007
	 * @throws ControladorException
	 */
	public void retificarConjuntoConta(Integer idGrupoFaturamento, Integer anoMes, ContaMotivoRetificacao contaMotivoRetificacao,
					Collection debitosTipoRetirar, Usuario usuarioLogado, Date dataVencimentoContaInicio, Date dataVencimentoContaFim,
					Integer anoMesFim, Collection<Conta> colecaoContasSelecionadas){

		try{

			this.getControladorFaturamento().retificarConjuntoConta(idGrupoFaturamento, anoMes, contaMotivoRetificacao, debitosTipoRetirar,
							usuarioLogado, dataVencimentoContaInicio, dataVencimentoContaFim, anoMesFim, colecaoContasSelecionadas);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar conjunto de contas p/ emissão da 2°Via
	 * 
	 * @author Raphael Rossiter
	 * @date 21/08/2007
	 * @throws ControladorException
	 */
	public Collection pesquisarConjuntoContaEmitir2Via(String idGrupoFaturamento, Integer anoMes, Date dataVencimentoContaInicio,
					Date dataVencimentoContaFim, Integer anoMesFim){

		try{

			return this.getControladorFaturamento().pesquisarConjuntoContaEmitir2Via(idGrupoFaturamento, anoMes, dataVencimentoContaInicio,
							dataVencimentoContaFim, anoMesFim);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
	 * Débitos/Créditos do Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 21/08/2007
	 * @param idImovel
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelExtratoDebito(Integer idImovel, Integer idClienteDebito,
					Integer idRelacaoClienteDebito, boolean indicadorParcelamento, Short multa, Short jurosMora, Short atualizacaoTarifaria){

		try{
			return this.getControladorCobranca().apresentarDebitoCreditoImovelExtratoDebito(idImovel, idClienteDebito,
							idRelacaoClienteDebito, indicadorParcelamento, multa, jurosMora, atualizacaoTarifaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * O método abaixo realiza uma pesquisa em imovel e retorna os campos
	 * necessários para a criação da inscrição do imóvel para exibição.
	 * aki é montada a inscrição
	 */
	public Object[] pesquisarLocalidadeSetorImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarLocalidadeSetorImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Sávio Luiz
	 * @date 24/08/2007
	 * @return String
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarSequencialRota(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarSequencialRota(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00083] Gerar Dados para Leitura
	 * [SB0005] Gerar Relação(ROL) em TXT - CAER
	 * 
	 * @author Sávio Luiz
	 * @date 24/08/2007
	 * @param idRota
	 * @param idLeituraTipo
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosLocalProtecaoTipoLigacaoAgua(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisarDadosLocalProtecaoTipoLigacaoAgua(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00083] Gerar Dados para Leitura
	 * [SB0005] Gerar Relação(ROL) em TXT - CAER
	 * 
	 * @author Sávio Luiz
	 * @date 24/08/2007
	 * @param idRota
	 * @param idLeituraTipo
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosLocalProtecaoTipoTipoPoco(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisarDadosLocalProtecaoTipoTipoPoco(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * [UC0582] Emitir Boletim de Cadastro pelo
	 * [UC0164] - Filtrar Imóvel por Outros Critérios
	 * 
	 * @author Anderson Italo
	 * @date 20/04/2011
	 */
	public byte[] emitirBoletimCadastro(FiltrarRelatorioBoletimCadastroHelper filtro){

		try{

			return this.getControladorCadastro().emitirBoletimCadastroModelo1(filtro);
		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	public Collection<RelatorioBoletimCadastralModelo2Bean> consultarDadosBoletimCadastralModelo2(
					FiltrarRelatorioBoletimCadastroHelper filtro){

		try{

			return this.getControladorCadastro().consultarDadosBoletimCadastralModelo2(filtro);
		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	public HashMap consultarResumoInformacoesOperacaoEfetuada(OperacaoEfetuada operacaoEfetuada, int idItemAnalisado){

		try{
			return this.getControladorTransacao().consultarResumoInformacoesOperacaoEfetuada(operacaoEfetuada, idItemAnalisado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera o data prevista do faturamento atividade cronograma
	 * 
	 * @author Sávio Luiz
	 * @date 28/08/2007
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarFaturamentoAtividadeCronogramaDataPrevista(Integer faturamentoGrupoId, Integer faturamentoAtividadeId,
					Integer anoMesReferencia){

		try{
			return getControladorFaturamento().pesquisarFaturamentoAtividadeCronogramaDataPrevista(faturamentoGrupoId,
							faturamentoAtividadeId, anoMesReferencia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0210] - Obter Endereço Autor: Sávio Luiz
	 */

	public String pesquisarEnderecoAbreviadoCAER(Integer idImovel)

	throws ControladorException{

		try{
			return getControladorEndereco().pesquisarEnderecoAbreviadoCAER(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0596] Inserir Qualidade de Agua
	 * 
	 * @author Kássia Albuquerque
	 * @date 06/08/2007
	 * @return
	 * @throws ControladorException
	 */

	public void inserirQualidadeAgua(QualidadeAgua qualidadeAgua, Collection colecaoQualidadeAgua, Usuario usuarioLogado){

		try{

			this.getControladorFaturamento().inserirQualidadeAgua(qualidadeAgua, colecaoQualidadeAgua, usuarioLogado);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0597] Atualizar Qualidade de Agua
	 * 
	 * @author eduardo Henrique
	 * @date 17/07/2008
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarQualidadeAgua(QualidadeAgua qualidadeAgua, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarQualidadeAgua(qualidadeAgua, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0270] Apresentar análise do Movimento dos Arrecadadores
	 * O sistema seleciona os itens do movimento do arrecadador com os seguintes
	 * dados: 1 - Código do Registro 2 - Identificação do imóvel/Cliente 3 -
	 * ocorrência 4 - Indicador de Aceitação 5 - Descrição do Indicador de
	 * Aceitação
	 * [SF0001] Consultar os Itens do Movimento do Arrecadador
	 * 
	 * @author Raphael Rossiter, Kassia Albuquerque
	 * @data 20/03/2006, 24/08/2007
	 * @param arrecadadorMovimento
	 * @return Collection<ArrecadadorMovimentoItemHelper>
	 */
	public Collection<ArrecadadorMovimentoItemHelper> consultarItensMovimentoArrecadador(ArrecadadorMovimento arrecadadorMovimento,
					Integer idImovel, Short indicadorAceitacao, String descricaoOcorrencia, String codigoArrecadacaoForma){

		try{

			return this.getControladorArrecadacao().consultarItensMovimentoArrecadador(arrecadadorMovimento, idImovel, indicadorAceitacao,
							descricaoOcorrencia, codigoArrecadacaoForma);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @since 30/08/2007
	 */
	public boolean verificarPermissaoIncluirAcrescimoImpontualidadeNoExtratoDeDebitosComDesconto(Usuario usuario){

		try{

			return this.getControladorPermissaoEspecial().verificarPermissaoIncluirAcrescimoImpontualidadeNoExtratoDeDebitosComDesconto(
							usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @since 30/08/2007
	 */
	public boolean verificarPermissaoRetirarTaxaCobrancaDoExtratoDeDebitos(Usuario usuario){

		try{

			return this.getControladorPermissaoEspecial().verificarPermissaoRetirarTaxaCobrancaDoExtratoDeDebitos(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void gerarCreditoARealizarPorImoveisComContasComVencimento14_08_2007(){

		try{
			getControladorFaturamento().gerarCreditoARealizarPorImoveisComContasComVencimento14_08_2007();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa as roteiros empresa de acordo com os parâmetros informado pelo
	 * usuário
	 * [UC0370] - Filtrar Roteiro Empresa
	 * 
	 * @author Thiago tenó0rio
	 * @date 29/08/2007
	 * @param idEquipe
	 * @param nome
	 * @param placa
	 * @param cargaTrabalho
	 * @param idUnidade
	 * @param idFuncionario
	 * @param idPerfilServico
	 * @param indicadorUso
	 * @param numeroPagina
	 * @return Collection
	 */
	public Collection pesquisarRoteiroEmpresa(String idEmpresa, String idLocalidade, String codigoSetorComercial, String idLeiturista,
					String indicadorUso, Integer numeroPagina){

		try{
			return this.getControladorMicromedicao().pesquisarRoteiroEmpresa(idEmpresa, idLocalidade, codigoSetorComercial, idLeiturista,
							indicadorUso, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica a quantidade de registros retornados da pesquisa de roteiro
	 * empresa
	 * [UC0370] - Filtrar Roteiro Empresa
	 * 
	 * @author Thiago Tenório
	 * @date 29/08/2007
	 * @param empresa
	 * @param idLocalidade
	 * @param idLeiturista
	 * @param idSetorComercial
	 * @param indicadorUso
	 * @param numeroPagina
	 */
	public int pesquisarRoteiroEmpresaCount(String idEmpresa, String idLocalidade, String codigoSetorComercial, String idLeiturista,
					String indicadorUso){

		try{
			return this.getControladorMicromedicao().pesquisarRoteiroEmpresaCount(idEmpresa, idLocalidade, codigoSetorComercial,
							idLeiturista, indicadorUso);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débitos [UC0251] Gerar Atividade de
	 * Ação de Cobranca
	 * Recuparea o valor da taxa de cobrança para gerar o documento de cobrança
	 * gerarDocumentoCobranca
	 * 
	 * @author Vivianne Sousa
	 * @date 31/08/2007
	 * @param imovel
	 * @param sistemaParametro
	 * @throws ControladorException
	 */
	public BigDecimal obterValorTaxaDocumentoCobranca(Imovel imovel, SistemaParametro sistemaParametro){

		try{
			return this.getControladorCobranca().obterValorTaxaDocumentoCobranca(imovel, sistemaParametro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0185] Obter VAlor por Categoria Author: Rafael Santos Data: 29/12/2005
	 * Rateia um daterminado valore entre as categorias do imóvel
	 * 
	 * @param colecaoCategorias
	 *            Coleção de Categorias
	 * @param valor
	 *            Valor
	 * @return Coleção com os valores por categorias
	 */
	public Collection obterValorPorCategoria(Collection<Categoria> colecaoCategorias, BigDecimal valor){

		return this.getControladorImovel().obterValorPorCategoria(colecaoCategorias, valor);
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/09/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer verificarRDUtilizadaPeloImovel(Integer idRD, Integer idImovel){

		try{
			return this.getControladorCobranca().verificarRDUtilizadaPeloImovel(idRD, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 01/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoACobrarSancoes(Integer idImovel, Integer anoMesLimiteMinimo, Integer anoMesLimiteMaximo){

		try{
			return this.getControladorCobranca().pesquisarValorDebitoACobrarSancoes(idImovel, anoMesLimiteMinimo, anoMesLimiteMaximo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0631] Processar Requisições do Dispositivo Móvel.
	 * [SB0001] Baixar Arquivo Texto para o Leiturista.
	 * 
	 * @author Thiago Nascimento
	 * @date 14/08/2007
	 * @param imei
	 * @return
	 * @throws ControladorException
	 */
	public byte[] baixarArquivoTextoParaLeitura(long imei){

		try{
			return getControladorMicromedicao().baixarArquivoTextoParaLeitura(imei);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0631] Processar Requisições do Dispositivo Móvel.
	 * Atualizar Situação do Arquivo Texto.
	 * 
	 * @author Thiago Nascimento
	 * @date 14/08/2007
	 * @param imei
	 * @param situacaoAnterior
	 * @param situacaoNova
	 * @throws ControladorException
	 */
	public void atualizarArquivoTextoEnviado(long imei, int situacaoAnterior, int situacaoNova){

		try{
			getControladorMicromedicao().atualizarArquivoTextoEnviado(imei, situacaoAnterior, situacaoNova);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0631] Processar Requisições do Dispositivo Móvel.
	 * [SB0002] Atualizar o movimento roteiro empresa.
	 * 
	 * @author Thiago Nascimento
	 * @date 14/08/2007
	 * @param dados
	 * @throws ControladorException
	 */
	public void atualiarRoteiro(Collection<DadosMovimentacao> dados){

		try{
			getControladorMicromedicao().atualiarRoteiro(dados);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * obtem o consumo médio faturado nos ultimos 6 meses [UC0214] Efetuar
	 * Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 05/09/2007
	 * @param
	 * @throws ControladorException
	 */
	public Integer obterValorConsumoMedio6meses(Integer idImovel){

		try{
			return getControladorFaturamento().obterValorConsumoMedio6meses(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém a principal categoria do imóvel
	 * [UC0306] Obter Principal Categoria do Imóvel
	 * 
	 * @author Pedro Alexandre
	 * @date 18/04/2006
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Categoria obterPrincipalCategoriaImovel(Integer idImovel){

		try{
			return getControladorImovel().obterPrincipalCategoriaImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0475] Obter Valor do Débito
	 * Verificar existência de hidrômetro na Ligação de Água.
	 * 
	 * @author Leonardo Regis
	 * @date 09/09/2006
	 * @param imovelId
	 * @return existencia de hidrometro ou não
	 * @throws ErroRepositorioException
	 */
	public boolean verificarExistenciaHidrometroEmLigacaoAgua(Integer imovelId){

		try{
			return getControladorAtendimentoPublico().verificarExistenciaHidrometroEmLigacaoAgua(imovelId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Vivianne Sousa
	 * @date 06/09/2007
	 * @param idImovel
	 * @param anoMes
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer obterConsumoMedioEmConsumoHistorico(Integer idImovel, Integer idLigacaoTipo){

		try{
			return getControladorMicromedicao().obterConsumoMedioEmConsumoHistorico(idImovel, idLigacaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0608] Efetuar Ligação de Esgoto sem RA.
	 * [FS0001] Verificar existência da matrícula do Imovel.
	 * [FS0007] Verificar situação do imóvel.
	 * [FS0008] Verificar Situação Rede de Esgoto da Quadra.
	 * 
	 * @author Sávio Luiz.
	 * @date 10/09/2007
	 * @param imovel
	 * @throws ControladorException
	 */
	public String validarMatriculaImovel(Integer idImovel){

		try{
			return getControladorAtendimentoPublico().validarMatriculaImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Curva ABC de Debitos
	 * [UC0621] Gerar Curva ABC de Debitos
	 * 
	 * @author Ivan Sérgio
	 * @date 07/08/2007
	 */
	public Collection gerarCurvaAbcDebitos(String classificacao, String referenciaCobrancaInicial, String referenciaCobrancaFinal,
					String indicadorImovelMedicaoIndividualizada, String indicadorImovelParalizacaoFaturamentoCobranca,
					String idGerenciaRegional, String idUnidadeNegocio, String idLocalidadeInicial, String idLocalidadeFinal,
					String idSetorComercialInicial, String idSetorComercialFinal, String[] situacaoLigacaoAgua,
					String[] situacaoLigacaoEsgoto, String intervaloMesesCortadoSuprimidoInicial,
					String intervaloMesesCortadoSuprimidoFinal, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria, String valorMinimoDebito,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String indicadorPagamentosNaoClassificados){

		try{
			return getControladorCobranca().gerarCurvaAbcDebitos(classificacao, referenciaCobrancaInicial, referenciaCobrancaFinal,
							indicadorImovelMedicaoIndividualizada, indicadorImovelParalizacaoFaturamentoCobranca, idGerenciaRegional,
							idUnidadeNegocio, idLocalidadeInicial, idLocalidadeFinal, idSetorComercialInicial, idSetorComercialFinal,
							situacaoLigacaoAgua, situacaoLigacaoEsgoto, intervaloMesesCortadoSuprimidoInicial,
							intervaloMesesCortadoSuprimidoFinal, intervaloConsumoMinimoFixadoEsgotoInicial,
							intervaloConsumoMinimoFixadoEsgotoFinal, indicadorMedicao, idTipoMedicao, idPerfilImovel, idTipoCategoria,
							categoria, idSubCategoria, valorMinimoDebito, intervaloQuantidadeDocumentosInicial,
							intervaloQuantidadeDocumentosFinal, indicadorPagamentosNaoClassificados);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os Valores das Faixas de Débitos
	 * 
	 * @author Ivan Sérgio
	 * @created 14/09/2007
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection pesquisarDebitoFaixaValores(Integer idFaixaValor, Double valorFaixa){

		try{
			return getControladorFaturamento().pesquisarDebitoFaixaValores(idFaixaValor, valorFaixa);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Obter dados do hidrometro para relatorio
	 * 
	 * @param idImovel
	 * @return
	 */
	public HidrometroRelatorioOSHelper obterDadosHidrometro(Integer idImovel){

		try{
			return this.getControladorMicromedicao().obterDadosHidrometro(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar quadras de um roteiro empresa
	 * 
	 * @param idRoteiroEmpresa
	 * @return coleção de quadras
	 * @throws ControladorException
	 */
	public Collection pesquisarQuadrasPorRoteiroEmpresa(int idRoteiroEmpresa){

		try{
			return this.getControladorLocalidade().pesquisarQuadrasPorRoteiroEmpresa(idRoteiroEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar um roteiro empresa e as quadras associadas
	 * 
	 * @author Francisco do Nascimento
	 * @date 20/09/07
	 * @param roteiroEmpresa
	 * @param idQuadras
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void atualizarRoteiroEmpresa(RoteiroEmpresa roteiroEmpresa, String[] idQuadras, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().atualizarRoteiroEmpresa(roteiroEmpresa, idQuadras, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover roteiros empresa
	 * 
	 * @author Francisco do Nascimento
	 * @date 20/09/07
	 * @param ids
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void removerRoteiroEmpresa(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().removerRoteiroEmpresa(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0016] Liberar Arquivo Texto Leitura
	 * 
	 * @author Thiago Tenório
	 * @date 18/09/2007
	 * @param
	 * @throws ControladorException
	 */
	public void liberarArquivoTextoLeitura(ArquivoTextoRoteiroEmpresa arquivoTextoRoteiroEmpresa){

		try{
			this.getControladorMicromedicao().liberarArquivoTextoLeitura(arquivoTextoRoteiroEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0391] Atualizar Leiturista.
	 * 
	 * @author Thiago Tenório
	 * @date 01/11/2006
	 * @param
	 * @throws ControladorException
	 */
	public void atualizarLeiturista(Leiturista leiturista){

		try{
			this.getControladorMicromedicao().atualizarLeiturista(leiturista);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0589] Remover Leiturista
	 * 
	 * @author Eduardo Henrique
	 * @date 13/06/2008
	 * @throws ErroRepositorioException
	 */
	public void removerLeiturista(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().removerLeiturista(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Inserir Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 14/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer inserirAcaoCobranca(CobrancaAcaoHelper cobrancaAcaoHelper){

		try{
			return this.getControladorCobranca().inserirAcaoCobranca(cobrancaAcaoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void atualizarImovelExecucaoOrdemServicoLigacaoEsgoto(Imovel imovel, LigacaoEsgotoSituacao situacaoEsgoto){

		try{
			this.getControladorImovel().atualizarImovelExecucaoOrdemServicoLigacaoEsgoto(imovel, situacaoEsgoto);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Integer pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade(){

		try{
			return this.getControladorCobranca().pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * relatório de regitro atendimento
	 * 
	 * @author Vivianne Sousa
	 * @date 07/06/2007
	 * @param
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	public AnaliseConsumoRelatorioOSHelper obterDadosAnaliseConsumo(Integer idImovel){

		try{
			return this.getControladorMicromedicao().obterDadosAnaliseConsumo(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir uma coleção de pagamentos informados manualmente
	 * 
	 * @author Raphael Rossiter
	 * @date 26/09/2007
	 * @return Collection, Usuario, AvisoBancario
	 * @throws ControladorException
	 */
	public Integer inserirPagamentos(Collection<Pagamento> colecaoPagamento, Usuario usuarioLogado, AvisoBancario avisoBancario,
					boolean usuarioConfirmou) throws InserirPagamentoException{

		try{

			return this.getControladorArrecadacao().inserirPagamentos(colecaoPagamento, usuarioLogado, avisoBancario,
							Operacao.OPERACAO_PAGAMENTO_INSERIR_MANUAL, usuarioConfirmou);

		}catch(InserirPagamentoException e){
			throw e;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0475] Obter Valor do Débito
	 * Obter Capacidade de Hidrômetro pela Ligação de Água.
	 * 
	 * @author Leonardo Regis
	 * @date 09/09/2006
	 * @param imovelId
	 * @return existencia de hidrometro ou não
	 * @throws ErroRepositorioException
	 */
	public HidrometroCapacidade obterHidrometroCapacidadeEmLigacaoAgua(Integer imovelId){

		try{

			return this.getControladorAtendimentoPublico().obterHidrometroCapacidadeEmLigacaoAgua(imovelId);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void removerQualidadeAgua(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().removerQualidadeAgua(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Reinicia uma funcionalidade iniciada
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Rafael Corrêa
	 * @date 06/10/2007
	 * @param idsFuncionalidadesIniciadas
	 * @param idProcessoIniciado
	 * @return
	 * @throws ControladorException
	 */
	public void reiniciarFuncionalidadesIniciadas(String[] idsFuncionalidadesIniciadas, Integer idProcessoIniciado){

		try{
			this.getControladorBatch().reiniciarFuncionalidadesIniciadas(idsFuncionalidadesIniciadas, idProcessoIniciado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir débito a cobrar - inserir debito a cobrar independente da
	 * situacao da ligacao de agua e esgoto do imovel
	 * 
	 * @author Raphael Rossiter
	 * @date 03/10/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoInserirDebitoACobrarImovelSituacao(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoInserirDebitoACobrarImovelSituacao(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Reiniciar um batch
	 * 
	 * @author Rafael Corrêa
	 * @date 06/11/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoReiniciarBatch(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoReiniciarBatch(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Pesquisar as categorias do Imóvel
	 * [UC0394] Gerar Débitos a Cobrar de Doações
	 * 
	 * @author César Araújo
	 * @date 10/09/2006
	 * @param Imovel
	 *            imovel - objeto imovel
	 * @return Collection<Categoria> - Coleção de categorias
	 * @throws ErroRepositorioException
	 */

	public Collection<Categoria> pesquisarCategoriasImovel(Imovel imovel){

		try{
			return this.getControladorImovel().pesquisarCategoriasImovel(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotas(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotas(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade,
							idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotasIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotasIntervaloSetor(codigoSetorComercialInicial,
							codigoSetorComercialFinal, idLocalidade, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotasIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal, String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotasIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal,
							idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotasIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotasIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotasIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotasIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// Flávio Leonardo
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public String[] pesquisarQuantidadeRotasIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao){

		try{
			return this.getControladorMicromedicao().pesquisarQuantidadeRotasIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0541] Emitir 2 Via de Conta Internet
	 * 
	 * @author Vivianne Sousa
	 * @date 02/10/2007
	 * @throws ErroRepositorioException
	 */
	public Imovel pesquisarDadosImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarDadosImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0644] Filtrar Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 10/10/2007
	 * @author eduardo henrique
	 * @date 26/08/2008
	 *       Alterações no [UC0644] para a v0.04
	 * @autnor Virgínia Melo
	 * @date 31/10/2008
	 * @return
	 * @throws ErroRepositorioException
	 */
	public FiltroCobrancaAcao filtrarAcaoCobranca(String descricaoAcaoCobranca, String numeroDiasValidade, String qtdDiasRealizacao,
					String idAcaoPredecessora, String numeroDiasEntreAcoes, String idTipoDocumentoGerado, String idSituacaoLigacaoAgua,
					String idSituacaoLigacaoEsgoto, String idCobrancaCriterio, String descricaoCobrancaCriterio, String idServicoTipo,
					String descricaoServicoTipo, String ordemCronograma, String icCompoeCronograma, String icAcaoObrigatoria,
					String icRepetidaCiclo, String icSuspensaoAbastecimento, String icDebitosACobrar, String icAcrescimosImpontualidade,
					String icGeraTaxa, String icEmitirBoletimCadastro, String icImoveisSemDebitos, String icUso,
					String idPrimeiraResolucaoDiretoria, String idSegundaResolucaoDiretoria, String idTerceiraResolucaoDiretoria,
					String indicadorConsideraCreditoRealizar, String indicadorConsideraGuiaPagamento){

		try{
			return this.getControladorCobranca().filtrarAcaoCobranca(descricaoAcaoCobranca, numeroDiasValidade, qtdDiasRealizacao,
							idAcaoPredecessora, numeroDiasEntreAcoes, idTipoDocumentoGerado, idSituacaoLigacaoAgua,
							idSituacaoLigacaoEsgoto, idCobrancaCriterio, descricaoCobrancaCriterio, idServicoTipo, descricaoServicoTipo,
							ordemCronograma, icCompoeCronograma, icAcaoObrigatoria, icRepetidaCiclo, icSuspensaoAbastecimento,
							icDebitosACobrar, icAcrescimosImpontualidade, icGeraTaxa, icEmitirBoletimCadastro, icImoveisSemDebitos, icUso,
							idPrimeiraResolucaoDiretoria, idSegundaResolucaoDiretoria, idSegundaResolucaoDiretoria,
							indicadorConsideraCreditoRealizar, indicadorConsideraCreditoRealizar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Ordena uma lista de tabelaLinhaColunaAlteracao a partir da ordem
	 * existente em OperacaoOrdemExibicao
	 * 
	 * @author Francisco Nascimento
	 * @param linhas
	 *            ArrayList de linhasalteradas
	 * @param idOperacao
	 *            Id da operacao
	 * @date 01/11/2007
	 */

	public void ordenarTabelaLinhaColunaAlteracao(Collection linhas, int idOperacao){

		try{
			this.getControladorTransacao().ordenarTabelaLinhaColunaAlteracao(linhas, idOperacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloRotas(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao, String idCriterioCobranca){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloRotas(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade,
							idCobrancaAcao, idCriterioCobranca);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal, String idLocalidade,
					String idCobrancaAcao){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloSetor(codigoSetorComercialInicial, codigoSetorComercialFinal,
							idLocalidade, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal, String idCobrancaAcao){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public void desassociarRotasIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao){

		try{
			this.getControladorMicromedicao().desassociarRotasIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir Pagamentos por código de barras
	 * 
	 * @author Raphael Rossiter
	 * @date 30/10/2007
	 * @return
	 * @throws ControladorException
	 */
	public Integer inserirPagamentosCodigoBarras(Collection<Pagamento> colecaoPagamentos, Collection<Devolucao> colecaoDevolucoes,
					Usuario usuarioLogado, AvisoBancario avisoBancario, boolean usuarioConfirmou) throws InserirPagamentoException{

		try{

			return this.getControladorArrecadacao().inserirPagamentosCodigoBarras(colecaoPagamentos, colecaoDevolucoes, usuarioLogado,
							avisoBancario, usuarioConfirmou);

		}catch(InserirPagamentoException e){
			throw e;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC 0653] Pesquisar Comando Negativação
	 * 
	 * @author Kássia Albuquerque
	 * @date 29/10/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarComandoNegativacao(ComandoNegativacaoHelper comandoNegativacaoHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacao(comandoNegativacaoHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método consuta os Negativadores que tenham movimento de Exclusão do spc ou serasa
	 * [UC0673] - Gerar Movimento da Exclusão de Negativação
	 * 
	 * @author Thiago Toscano
	 * @date 21/12/2007
	 */
	public Collection consultarNegativadoresParaExclusaoMovimento(){

		try{
			return this.getControladorSpcSerasa().consultarNegativadoresParaExclusaoMovimento();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método consuta os Negativadores que tenham movimento de Exclusão do spc ou serasa
	 * [UC0673] - Gerar Movimento da Exclusão de Negativação
	 * [SB0001] - Gerar Movimento da Exclusão de Negativação
	 * 
	 * @author Thiago Toscano
	 * @date 26/12/2007
	 */
	public Collection gerarMovimentoExclusaoNegativacao(Integer[] id){

		try{
			return this.getControladorSpcSerasa().gerarMovimentoExclusaoNegativacao(id);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método consuta os Negativadores que tenham movimento de Exclusão do spc ou serasa
	 * [UC0673] - Gerar Movimento da Exclusão de Negativação
	 * [SB0002] - Gerar TxT de Movimento de Exclusão de Negativacao
	 * 
	 * @author Thiago Toscano
	 * @param idMovimento
	 *            -
	 * @return Collection - NegativadorMovimento
	 * @date 26/12/2007
	 */
	public Collection gerarArquivoTXTMovimentoExclusaoNegativacao(Integer idMovimento){

		try{
			return this.getControladorSpcSerasa().gerarArquivoTXTMovimentoExclusaoNegativacao(idMovimento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC 0653] Pesquisar Comando Negativação
	 * 
	 * @author Kássia Albuquerque
	 * @date 29/10/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarComandoNegativacaoParaPaginacao(ComandoNegativacaoHelper comandoNegativacaoHelper, Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoParaPaginacao(comandoNegativacaoHelper, numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC 0653] Pesquisar Comando Negativação
	 * 
	 * @author Kássia Albuquerque
	 * @date 31/10/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Integer pesquisarDadosInclusoesComandoNegativacao(Integer idComandoNegativacao){

		try{
			return this.getControladorSpcSerasa().pesquisarDadosInclusoesComandoNegativacao(idComandoNegativacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC 0653] Pesquisar Comando Negativação
	 * 
	 * @author Kássia Albuquerque
	 * @date 31/10/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarDadosInclusoesComandoNegativacaoParaPaginacao(Integer idComandoNegativacao, Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa()
							.pesquisarDadosInclusoesComandoNegativacaoParaPaginacao(idComandoNegativacao, numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0645] Manter Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 06/11/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void atualizarAcaoCobranca(CobrancaAcao cobrancaAcao, CobrancaAcaoHelper cobrancaAcaoHelper){

		try{
			this.getControladorCobranca().atualizarAcaoCobranca(cobrancaAcao, cobrancaAcaoHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0600] Emitir Histograma de Esgoto
	 * 
	 * @author Rafael Pinto
	 * @date 06/11/2007
	 * @param FiltrarEmitirHistogramaEsgotoHelper
	 * @return Collection<EmitirHistogramaEsgotoHelper>
	 */
	public Collection<EmitirHistogramaEsgotoHelper> pesquisarEmitirHistogramaEsgoto(FiltrarEmitirHistogramaEsgotoHelper filtro){

		try{
			return this.getControladorRelatorioFaturamento().pesquisarEmitirHistogramaEsgoto(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0606] Emitir Histograma de Esgoto por Economia
	 * 
	 * @author Rafael Pinto
	 * @date 07/11/2007
	 * @param FiltrarEmitirHistogramaEsgotoEconomiaHelper
	 * @return Collection<EmitirHistogramaEsgotoEconomiaHelper>
	 */
	public Collection<EmitirHistogramaAguaEsgotoEconomiaHelper> pesquisarEmitirHistogramaEsgotoEconomia(
					FiltrarEmitirHistogramaEsgotoEconomiaHelper filtro){

		try{
			return this.getControladorRelatorioFaturamento().pesquisarEmitirHistogramaEsgotoEconomia(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * O método abaixo realiza uma pesquisa em imovel e retorna os campos
	 * necessários para a criação da inscrição ,de rota e endereço para exibição.
	 * 
	 * @author Vivianne Sousa
	 * @date 06/11/2007
	 */
	public Collection pesquisarDadosImovel(String idsImovel){

		try{
			return this.getControladorImovel().pesquisarDadosImovel(idsImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Filtra os Imoveis
	 * [UC0711] Filtro para Emissao de Ordens Seletivas
	 * 
	 * @author Ivan Sérgio
	 * @date 08/11/2007
	 */
	public Collection<Integer> filtrarImovelEmissaoOrdensSeletivas(OrdemServicoSeletivaHelper ordemServicoSeletivaHelper){

		try{
			/*
			 * return this.getControladorOrdemServico().filtrarImovelEmissaoOrdensSeletivas(
			 * tipoOrdem, quantidadeMaxima, elo,
			 * localidadeInicial, localidadeFinal, setorComercialInicial,
			 * setorComercialFinal, quadraInicial, quadraFinal,
			 * rotaInicial, rotaFinal, perfilImovel,
			 * categoria, subCategoria, quantidadeEconomiasInicial,
			 * quantidadeEconomiasFinal, quantidadeDocumentosInicial, quantidadeDocumentosFinal,
			 * numeroMoradoresInicial, numeroMoradoresFinal, areaConstruidaInicial,
			 * areaConstruidaFinal, imovelCondominio, mediaImovel,
			 * consumoEconomia, tipoMedicao, capacidadeHidrometro,
			 * marcaHidrometro, anormalidadeHidrometro, numeroOcorrenciasAnormalidade,
			 * mesAnoInstalacaoHidrometro);
			 */
			return this.getControladorOrdemServico().filtrarImovelEmissaoOrdensSeletivas(ordemServicoSeletivaHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC 0653] Pesquisar Comando Negativação
	 * 
	 * @author Kássia Albuquerque
	 * @date 09/11/2007
	 * @return Collection
	 * @throws FachadaException
	 */
	public ParametrosComandoNegativacaoHelper pesquisarParametrosComandoNegativacao(Integer idComandoNegativacao){

		try{
			return this.getControladorSpcSerasa().pesquisarParametrosComandoNegativacao(idComandoNegativacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para informar nova data para vencimento
	 * alternativo antes do periodo válido
	 * 
	 * @author Vivianne Sousa
	 * @date 19/03/2007
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoRetificarContaSemRA(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoRetificarContaSemRA(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa os valores necessarios na tabela un_resumo_faturamento
	 * [UC0722] - Gerar Relatorio para Orçamento e SINP
	 * 
	 * @author Rafael Pinto
	 * @date 20/11/2006
	 * @param FiltrarRelatorioOrcamentoSINPHelper
	 * @return Collection<OrcamentoSINPHelper>
	 * @throws ControladorException
	 */
	public Collection<OrcamentoSINPHelper> pesquisarRelatorioOrcamentoSINP(
					FiltrarRelatorioOrcamentoSINPHelper filtrarRelatorioOrcamentoSINPHelper){

		try{
			return this.getControladorGerencial().pesquisarRelatorioOrcamentoSINP(filtrarRelatorioOrcamentoSINPHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o cliente usuario do imovel
	 * [UC 0275] Gerar resumo ligacoes economias
	 * 
	 * @author Bruno Barros, Ivan Sérgio
	 * @date 27/04/2007, 10/11/2007
	 * @return Cliente
	 * @throws ControladorException
	 */
	public Cliente consultarClienteUsuarioImovel(Imovel imovel){

		try{
			return this.getControladorImovel().consultarClienteUsuarioImovel(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar o endereço abreviado a partir do id do imóvel
	 * [UC0483] - Obter Endereço Abreviado
	 * 
	 * @author Rafael Corrêa
	 * @date 18/10/2006
	 * @param idImovel
	 * @return String
	 * @throws ControladorException
	 */

	public String obterEnderecoAbreviadoImovel(Integer idImovel){

		try{
			return this.getControladorEndereco().obterEnderecoAbreviadoImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de Serviço
	 * Método que é chamado pelo [UC0713] Emitir Ordem de Servico Seletiva
	 * 
	 * @author Willian Pereira
	 * @date 18/03/2010
	 */
	public Map<Integer, Integer> gerarOrdemServicoSeletiva(List<Integer> idsImoveis, ServicoTipo servicoTipo, Empresa empresa,
					Usuario usuario, Integer IdComandoOrdemServicoSeletiva){

		try{
			return this.getControladorOrdemServico().gerarOrdemServicoSeletiva(idsImoveis, servicoTipo, empresa, usuario,
							IdComandoOrdemServicoSeletiva);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0430] - Gerar Ordem de Serviço
	 * Método que é chamado pelo [UC0713] Emitir Ordem de Servico Seletiva
	 * 
	 * @author Ivan Sérgio
	 * @date 27/11/2007
	 */
	public Integer gerarOrdemServicoSeletiva(OrdemServico ordemServico, Imovel imovel, Usuario usuario){

		try{
			return this.getControladorOrdemServico().gerarOrdemServicoSeletiva(ordemServico, imovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotasIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotasIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotasIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloSetor(codigoSetorComercialInicial, codigoSetorComercialFinal,
							idLocalidade, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotas(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotas(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotasIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas associdas a um Critério de Cobrança
	public Collection pesquisarRotasIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterioIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasSemCriterioIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterioIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasSemCriterioIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterioIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal,
					String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasIntervaloLocalidadeSemCriterio(idLocalidadeInicial, idLocalidadeFinal,
							idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterioIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasSemCriterioIntervaloSetor(codigoSetorComercialInicial,
							codigoSetorComercialFinal, idLocalidade, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterio(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasSemCriterio(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade,
							idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	// Retorna uma Coleção de IDs das rotas que NÃO estão associdas a um Critério de Cobrança
	public Collection pesquisarRotasSemCriterioIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao){

		try{
			return this.getControladorCobranca().pesquisarRotasSemCriterioIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 03/12/2007
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisSituacaoLigacaoAguaHelper> pesquisarRelatorioImoveisSituacaoLigacaoAgua(
					FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisSituacaoLigacaoAgua(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas Em Atraso
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * @param RelatorioImoveisFaturasAtrasoHelper
	 * @return Collection<RelatorioImoveisFaturasAtrasoHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtraso(
					FiltrarRelatorioImoveisFaturasAtrasoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisFaturasAtraso(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * @param RelatorioImoveisTipoConsumoHelper
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisTipoConsumoHelper> pesquisarRelatorioImoveisTipoConsumo(
					FiltrarRelatorioImoveisTipoConsumoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisTipoConsumo(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * @param RelatorioImoveisTipoConsumoHelper
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisTipoConsumo(FiltrarRelatorioImoveisTipoConsumoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisTipoConsumo(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * Pesquisa o Total Registro
	 * 
	 * @author Rafael Pinto
	 * @date 04/12/2007
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * Pesquisa o Total Registro
	 * 
	 * @author Bruno
	 * @date 06/12/2007
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisFaturasAtraso(FiltrarRelatorioImoveisFaturasAtrasoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisFaturasAtraso(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public int pesquisarQuantidadeDebitosCobradosComParcelamento(Collection<ContaValoresHelper> colecaoContasValores){

		try{
			return this.getControladorFaturamento().pesquisarQuantidadeDebitosCobradosComParcelamento(colecaoContasValores);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0067] Inserir Comando Negaivação
	 * 
	 * @autor: Ana Maria
	 *         [FS0019] Verificar existência de Parcelamento
	 * @param idImovel
	 * @return Cliente
	 * @throws ErroRepositorioException
	 */
	public Cliente pesquisarClienteResponsavelParcelamento(Integer idImovel){

		try{
			return this.getControladorCobranca().pesquisarClienteResponsavelParcelamento(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Boolean pesquisarExisteciaParcelamentoConta(Integer idConta){

		try{
			return this.getControladorFaturamento().pesquisarExisteciaParcelamentoConta(idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0651] Inserir Comando Negativação
	 * [FS0015] Verificar existência de negativação para o imóvel no negativador
	 * 
	 * @author Ana Maria
	 * @date 04/12/2007
	 * @param idNegativador
	 * @param idImovel
	 * @return String
	 * @throws ErroRepositorioException
	 */
	public Boolean verificarExistenciaNegativacaoImovel(Integer idNegativador, Integer idImovel){

		try{
			return this.getControladorSpcSerasa().verificarExistenciaNegativacaoImovel(idNegativador, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inserir Negativador
	 * 
	 * @author Saulo Lima
	 * @date 09/06/2008
	 * @param Negativador
	 *            a ser cadastrado
	 *            Negativador negativador
	 * @return String
	 * @throws FachadaException
	 */
	public String inserirNegativador(Negativador negativador){

		try{
			return this.getControladorCobranca().inserirNegativador(negativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Gerar OS Seletivas de Hidrometro
	 * 
	 * @author Ivan Sérgio
	 * @date 06/12/2007
	 * @param usuario
	 */
	public boolean verificarPermissaoGerarOSSeletivasHidrometro(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoGerarOSSeletivasHidrometro(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0150] Retificar Conta
	 * 
	 * @author Vivianne Sousa
	 * @data 23/04/2006
	 * @param idConta
	 * @return idParcelamento
	 */
	public Pagamento pesquisarPagamentoDeConta(Integer idConta){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoDeConta(idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0732] - Gerar Relatorio Acompanhamento de Ordens de Servico Hidrometro
	 * 
	 * @author Ivan Sérgio
	 * @date 27/11/2007
	 * @param tipoOrdem
	 * @param situacaoOrdemServico
	 * @param idLocalidade
	 * @param dataEncerramentoInicial
	 * @param dataEncerramentoFinal
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarOrdemServicoGerarRelatorioAcompanhamentoHidrometro(String idEmpresa, String tipoOrdem,
					String situacaoOrdemServico, String idLocalidade, String dataEncerramentoInicial, String dataEncerramentoFinal,
					String tipoRelatorio){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoGerarRelatorioAcompanhamentoHidrometro(idEmpresa, tipoOrdem,
							situacaoOrdemServico, idLocalidade, dataEncerramentoInicial, dataEncerramentoFinal, tipoRelatorio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * @param filtro
	 * @return Collection<RelatorioImoveisConsumoMedioHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisConsumoMedioHelper> pesquisarRelatorioImoveisConsumoMedio(
					FiltrarRelatorioImoveisConsumoMedioHelper filtro) throws FachadaException{

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisConsumoMedio(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a quantidade de imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * @param filtro
	 * @return Integer
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisConsumoMedio(FiltrarRelatorioImoveisConsumoMedioHelper filtro)
					throws FachadaException{

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisConsumoMedio(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que gera Movimento de Inclusão de Negativação
	 * [UC0671] - Gerar Movimento da Negativação
	 * 
	 * @author Marcio Roberto
	 * @date 30/10/2007
	 */
	public void gerarMovimentoInclusaoNegativacao(int idNegativador, String identificacaoCI, int idUsuarioResponsavel,
					Collection<DadosNegativacaoPorImovelHelper> dadosImoveis) throws ControladorException{

		try{
			this.getControladorSpcSerasa().gerarMovimentoInclusaoNegativacao(idNegativador, identificacaoCI, idUsuarioResponsavel,
							dadosImoveis);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0733] Gerar Quadro de metas Acumulado
	 * 
	 * @author Bruno Barros
	 * @param filtrarRelatorioQuadroMetasAcumuladoHelper
	 * @return
	 */
	public Collection<QuadroMetasAcumuladoHelper> pesquisarRelatorioQuadroMetasAcumulado(
					FiltrarRelatorioQuadroMetasAcumuladoHelper filtrarRelatorioQuadroMetasAcumuladoHelper) throws FachadaException{

		Collection<QuadroMetasAcumuladoHelper> retorno = null;

		try{
			retorno = this.getControladorGerencial().pesquisarRelatorioQuadroMetasAcumulado(filtrarRelatorioQuadroMetasAcumuladoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * Relatório Analise de Consumo
	 * Flávio Leonardo
	 * 26/12/2007
	 * 
	 * @param idImovel
	 * @param anomes
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarLeiturasImovel(String idImovel, String anoMes) throws ControladorException{

		try{
			return this.getControladorMicromedicao().pesquisarLeiturasImovel(idImovel, anoMes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 18/12/2007
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * @return Collection<RelatorioImoveisUltimosConsumosAguaHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisUltimosConsumosAguaHelper> pesquisarRelatorioImoveisUltimosConsumosAgua(
					FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisUltimosConsumosAgua(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 19/12/2007
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0718] Gerar Relatório de Evolucao do Contas a Receber Contabil
	 * 
	 * @author Francisco Junior
	 * @date 02/01/08
	 * @param opcaoTotalizacao
	 * @param mesAno
	 * @param codigoGerencia
	 * @param codigoLocalidade
	 * @param unidadeNegocio
	 * @return Colecao
	 * @throws ControladorException
	 */
	public Collection<RelatorioEvolucaoContasAReceberContabilBean> consultarDadosEvolucaoContasAReceberContabilRelatorio(
					String opcaoTotalizacao, int mesAno, Integer codigoGerencia, Integer codigoLocalidade, Integer unidadeNegocio){

		try{
			return this.getControladorFinanceiro().consultarDadosEvolucaoContasAReceberContabilRelatorio(opcaoTotalizacao, mesAno,
							codigoGerencia, codigoLocalidade, unidadeNegocio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0739] - Informar Situação de Expurgo do Pagamento
	 * Autor: Sávio Luiz
	 * Data: 02/01/2008
	 */
	public Object[] gerarColecaoDadosPagamentoPelaData(String dataPagamento, Integer idCliente){

		try{
			return this.getControladorArrecadacao().gerarColecaoDadosPagamentoPelaData(dataPagamento, idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comando de negativação (Helper) usado no caso de uso [UC0655]
	 * 
	 * @author Thiago Vieira
	 * @date 02/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarComandoNegativacaoHelper(ComandoNegativacaoHelper comandoNegativacaoHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoHelper(comandoNegativacaoHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0739] - Informar Situação de Expurgo do Pagamento
	 * Autor: Sávio Luiz
	 * Data: 02/01/2008
	 */
	public void atualizarSituacaoExpurgoPagamento(Collection colecaoPagamento){

		try{
			this.getControladorArrecadacao().atualizarSituacaoExpurgoPagamento(colecaoPagamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * @return Collection<RelatorioImoveisAtivosNaoMedidosHelper>
	 */
	public Collection<RelatorioImoveisAtivosNaoMedidosHelper> pesquisarRelatorioImoveisAtivosNaoMedidos(
					FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisAtivosNaoMedidos(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Excluidos
	 * 
	 * @author Alcira Rocha
	 * @date 31/01/2013
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * @return Collection<RelatorioImoveisAtivosNaoMedidosHelper>
	 */
	public Collection<RelatorioImoveisExcluidosHelper> pesquisarRelatorioImoveisExcluidos(FiltrarRelatorioImoveisExcluidosHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisExcluidos(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * @return Integer
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Excluidos
	 * 
	 * @author alciraRocha
	 * @date 31/01/2013
	 * @param FiltrarRelatorioImoveisExcluidosHelper
	 * @return Integer
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisExcluidos(FiltrarRelatorioImoveisExcluidosHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRegistroRelatorioImoveisExcluidos(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém Elo Pólo
	 * 
	 * @author Ana Maria
	 * @date 10/12/2007
	 * @throws ControladorException
	 */
	public Collection pesquisarEloPolo(){

		try{
			return this.getControladorLocalidade().pesquisarEloPolo();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0651] Inserir Comando Negativação
	 * [SB0003] Determinar Data Prevista para Execução do Comando
	 * 
	 * @author Ana Maria
	 * @date 11/12/2007
	 * @param idNegativador
	 * @return Date
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarUltimaDataRealizacaoComando(Integer idNegativador){

		try{
			return this.getControladorSpcSerasa().pesquisarUltimaDataRealizacaoComando(idNegativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0365] Inserir Comando Negativação
	 * [SB0004] Inclui Comando de Negativação por critério
	 * 
	 * @author Ana Maria
	 * @date 13/12/2007
	 * @throws ControladorException
	 */
	public Integer inserirComandoNegativacao(InserirComandoNegativacaoPorCriterioHelper helper){

		try{
			return this.getControladorSpcSerasa().inserirComandoNegativacao(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * @param FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * @return Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper>
	 */
	public Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper> pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
					FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * @param FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * @return Integer
	 */
	public Integer pesquisarTotalRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
					FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro){

		try{
			return this.getControladorCadastro().pesquisarTotalRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Relatório Manter Hidrometro
	 * Flávio Leonardo
	 * pesquisa o id do imovel do hidrometro instalado
	 * 
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarImovelPeloHidrometro(Integer hidrometroId){

		try{
			return this.getControladorMicromedicao().pesquisarImovelPeloHidrometro(hidrometroId);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se existe dados nas tabelas de resumo
	 * [UC0722] - Gerar Relatorio para Orçamento e SINP
	 * 
	 * @author Rafael Pinto
	 * @date 11/01/2007
	 * @param anoMesReferencia
	 * @throws ControladorException
	 */
	public void validarDadosOrcamentoSINP(int anoMesReferencia){

		try{
			this.getControladorGerencial().validarDadosOrcamentoSINP(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0583] - Inserir Roteiro de Empresa
	 * [UC0584] - Alterar Roteiro de Empresa
	 * Realiza a consulta de Setores Comerciais cujas quadras possuam rotas contidas num determinado
	 * Grupo de Faturamento
	 * e determinada localidade.
	 * 
	 * @author eduardo henrique
	 * @date 30/06/2008
	 */
	public Collection pesquisarSetoresComerciaisPorLocalidadeGrupoFaturamento(Integer idLocalidade, Integer grupoFaturamento){

		try{
			return this.getControladorMicromedicao()
							.pesquisarSetoresComerciaisPorLocalidadeGrupoFaturamento(idLocalidade, grupoFaturamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Pesquisa as situações de cobrança do imóvel
	public Collection pesquisarSituacoesCobrancaImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarSituacoesCobrancaImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	// Pesquisa os Imoveis Cadastro Ocorrência
	public Collection<ImovelCadastroOcorrencia> pesquisarOcorrenciasCadastro(String idImovel){

		try{
			return this.getControladorImovel().pesquisarOcorrenciasCadastro(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	// Pesquisa os Imoveis Elo Anormalidade
	public Collection<ImovelCadastroOcorrencia> pesquisarEloAnormalidade(String idImovel){

		try{
			return this.getControladorImovel().pesquisarEloAnormalidade(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Imovel pesquisarImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Método que verifica se há Registro de Atendimento, que possui tipo de débito vinculado com
	 * Guia de Pagamento já cadastrada.
	 * [UC0187] - FS0008
	 * 
	 * @author eduardo henrique
	 * @date 25/07/2008
	 */
	public boolean verificarExistenciaRegistroAtendimentoGuiaPagamento(Integer idRegistroAtendimento, Integer idDebitoTipo){

		try{
			return this.getControladorFaturamento()
							.verificarExistenciaRegistroAtendimentoGuiaPagamento(idRegistroAtendimento, idDebitoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados de Guias de Pagamento (e suas Prestações) de um determinado Imóvel
	 * 
	 * @author eduardo henrique
	 * @date 08/08/2008
	 * @param idImovel
	 * @param idCliente
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiasPagamentoPrestacaoImovelOuCliente(Integer idImovel, Integer idCliente){

		try{
			return this.getControladorFaturamento().pesquisarGuiasPagamentoPrestacaoImovelOuCliente(idImovel, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir um comando de atividade de cobrança de Cronograma
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Inserir cobranca acao atividade comando
	 * 
	 * @author ebandeira henrique
	 * @date 29/08/2008
	 * @since v0.04
	 *        Alterações para a v0.06
	 * @author Virgínia Melo
	 * @date 06/11/2008
	 */
	public void inserirComandoAcaoCobrancaCronograma(CobrancaAtividade cobrancaAtividade, CobrancaAcao cobrancaAcao,
					CobrancaGrupo cobrancaGrupo, Empresa empresa, Usuario usuarioLogado){

		try{
			this.getControladorCobranca().inserirComandoAcaoCobrancaCronograma(cobrancaAtividade, cobrancaAcao, cobrancaGrupo, empresa,
							usuarioLogado);
		}catch(ControladorException ce){
			throw new FachadaException(ce.getMessage(), ce, ce.getParametroMensagem());
		}
	}

	// Comentado por Hugo Lima pois a tabela da entidade foi dropada
	// /**
	// * Inserir Cobrança Contrato
	// *
	// * @author Virgínia Melo
	// * @date 24/11/2008
	// * @param cobrancaContrato
	// * @param colecaoCobrancaContratoRemuneracao
	// * @param colecaoCobrancaContratoRemuneracaoVencimento
	// * @param usuarioLogado
	// * Alteracao para contemplar remuneraçao por Produtividade
	// * @author Andre Nishimura, William Mathias.
	// * @date 15/04/2010
	// */
	public void inserirCobrancaContrato(CobrancaContrato cobrancaContrato,
					Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaContratoRemuneracaoPorSucesso,
					Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaContratoRemuneracaoPorProdutividade,
					Usuario usuarioLogado){

		try{
			this.getControladorCobranca().inserirCobrancaContrato(cobrancaContrato, colecaoCobrancaContratoRemuneracaoPorSucesso,
							colecaoCobrancaContratoRemuneracaoPorProdutividade, usuarioLogado);
		}catch(ControladorException ce){
			throw new FachadaException(ce.getMessage(), ce, ce.getParametroMensagem());
		}

	}

	//
	// /**
	// * Atualizar Cobrança Contrato
	// *
	// * @author Virgínia Melo
	// * @date 01/12/2008
	// * @param cobrancaContrato
	// * @param colecaoCobrancaContratoRemuneracao
	// * @param colecaoCobrancaContratoRemuneracaoVencimento
	// * @param usuarioLogado
	// * Alteracao para contemplar remuneraçao por Produtividade
	// * @author Andre Nishimura, William Mathias.
	// * @date 15/04/2010
	// */
	public void atualizarCobrancaContrato(CobrancaContrato cobrancaContrato,
					Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaContratoRemuneracaoPorSucesso,
					Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaContratoRemuneracaoPorProdutividade,
					Usuario usuarioLogado){

		try{
			this.getControladorCobranca().atualizarCobrancaContrato(cobrancaContrato, colecaoCobrancaContratoRemuneracaoPorSucesso,
							colecaoCobrancaContratoRemuneracaoPorProdutividade, usuarioLogado);
		}catch(ControladorException ce){
			throw new FachadaException(ce.getMessage(), ce, ce.getParametroMensagem());
		}

	}

	/**
	 * Recupera o anoMesReferencia baseado em filtros do FaturamentoGrupo
	 * 
	 * @author eduardo henrique
	 * @date 10/12/2008
	 * @param idFaturamentoGrupo
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarAnoMesPorIdFaturamentoGrupo(Integer idFaturamentoGrupo){

		try{
			return getControladorFaturamento().pesquisarAnoMesPorIdFaturamentoGrupo(idFaturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Retorna uma coleção com os dados das medicoes para apresentação
	 * [UC0153] Apresentar dados para Analise da medição e Consumo
	 */
	public Collection carregarDadosConsumo(Integer idImovel, Integer tipoLigacao){

		try{
			return this.getControladorMicromedicao().carregarDadosConsumo(idImovel, tipoLigacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera o ID da ContaGeral do pagamento especificado
	 * 
	 * @author Saulo Lima
	 * @date 23/01/2009
	 * @param idPagamento
	 * @return idContaGeral
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarIdDaContaGeralNoPagamento(Integer idPagamento){

		try{
			return getControladorArrecadacao().pesquisarIdDaContaGeralNoPagamento(idPagamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por verificar se existem Serviços associados que necessitarão de
	 * autorização pelo usuário.
	 * 
	 * @author Eduardo Henrique
	 * @date 16/05/2009
	 * @author Saulo Lima
	 * @date 04/06/2009
	 *       Novo parâmetro numeroOS
	 * @param servicoTipo
	 *            [obrigatório]
	 * @param evento
	 *            - enum dos Tipos de Eventos a serem verificados [obrigatório]
	 * @param origemEncerramento
	 *            - informa a Origem de Encerramento (qual funcionalidade) da ação do usuário.
	 * @param numeroOS
	 *            - utizado para pesquisar as equipes, caso necessário.
	 * @return List<ServicoAssociadoAutorizacaoHelper>
	 *         Deve ser utilizada apenas na verificação para encerramento.
	 * @throws ControladorException
	 *             se houver erro na consulta de servicos Associados
	 */
	public List<ServicoAssociadoAutorizacaoHelper> verificarServicosAssociadosParaAutorizacao(ServicoTipo servicoTipo,
					EventoGeracaoServico evento, OrigemEncerramentoOrdemServico origemEncerramento, Integer numeroOS){

		try{
			return this.getControladorOrdemServico().verificarServicosAssociadosParaAutorizacao(servicoTipo, evento, origemEncerramento,
							numeroOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// Chamadas via Spring
	/**
	 * Método responsável por consultar todos os parametros do sistema.
	 * 
	 * @author Gilberto Matos
	 * @return Uma lista de parametros.
	 * @throws PCGException
	 *             Caso ocorra algum erro na invocação do método.
	 */
	public List<ParametroSistema> consultarParametroSistema() throws PCGException{

		return this.getControladorParametroSistema().consultarParametroSistema();
	}

	/**
	 * Método responsável por obter um parametro do sistema.
	 * 
	 * @author Gilberto Matos
	 * @param codigo
	 * @return Um parametro do sistema
	 * @throws PCGException
	 *             Caso ocorra algum erro na invocação do método.
	 */
	public ParametroSistema obterParametroSistema(String codigo) throws PCGException{

		return (ParametroSistema) this.getControladorParametroSistema().obterParametroPorCodigo(codigo);
	}

	public ParametroSistema obterParametroSistema(String codigo, Integer idFuncionalidade) throws PCGException{

		return (ParametroSistema) this.getControladorParametroSistema().obterParametroPorCodigo(codigo, idFuncionalidade);
	}

	/**
	 * Método responsável por o.bter um parametro do sistema.
	 * 
	 * @author Gilberto Matos
	 * @param chavePrimaria
	 * @return Um parametro do sistema
	 * @throws PCGException
	 *             Caso ocorra algum erro na invocação do método.
	 */
	public ParametroSistema obterParametroSistema(long chavePrimaria) throws PCGException{

		return (ParametroSistema) this.getControladorParametroSistema().obter(chavePrimaria);
	}

	/**
	 * Método responsável por alterar um parametro do sistema.
	 * 
	 * @author Gilberto Matos
	 * @param codigo
	 * @param parametroSistema
	 *            O parametro do sistema
	 * @param usuarioLogado
	 * @param usuarioLogado
	 * @param operacaoEfetuada
	 * @throws PCGException
	 *             Caso ocorra algum erro na invocação do método.
	 */
	public void alterarParametroSistema(ParametroSistema parametroSistema, Usuario usuarioLogado) throws PCGException{

		try{
			this.getControladorParametroSistema().atualizarParametroSistema(parametroSistema, usuarioLogado);
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Método responsável por obter o controlador de parâmetros
	 * 
	 * @author Gilberto Matos
	 * @return ControladorParametroSistema O controlador de parâmetros
	 */
	private ControladorParametroSistema getControladorParametroSistema(){

		return (ControladorParametroSistema) springBeanLocator
						.getBeanPorID(ControladorParametroSistema.BEAN_ID_CONTROLADOR_PARAMETRO_SISTEMA);
	}

	/**
	 * Método retorna uma instância de AtendimentoMotivoEncerramento
	 * 
	 * @author Saulo Lima
	 * @date 21/05/2009
	 * @param idAtendimentoMotivoEncerramento
	 * @return AtendimentoMotivoEncerramento
	 * @throws ControladorException
	 */
	public AtendimentoMotivoEncerramento pesquisarAtendimentoMotivoEncerramentoPorId(Integer idAtendimentoMotivoEncerramento){

		try{
			return this.getControladorOrdemServico().pesquisarAtendimentoMotivoEncerramentoPorId(idAtendimentoMotivoEncerramento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por retornar uma coleção de Layouts de Ordens de Serviço.
	 * 
	 * @author Virgínia Melo
	 * @date 28/05/2009
	 * @return Coleção de OrdemServicoLayout.
	 */
	public Collection<OrdemServicoLayout> pesquisarOrdemServicoLayouts(){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoLayouts();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por gerar o relatório de ordem de serviço.
	 * 
	 * @author Virgínia Melo
	 * @date 29/05/2009
	 * @param listaOs
	 *            Uma lista de Ordem de Serviço
	 * @return byte[]
	 */
	public byte[] gerarRelatorioOrdemServico(List<OrdemServico> listaOs){

		try{
			return GeradorRelatorioOrdemServico.getInstancia().gerarRelatorioOrdemServico(listaOs);
		}catch(GeradorRelatorioOrdemServicoException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por obter o proprietário do imóvel.
	 * 
	 * @author Virgínia Melo
	 * @date 04/06/2009
	 * @param idImovel
	 * @return ClienteImovel
	 */
	public ClienteImovel pesquisarClienteProprietarioImovel(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarClienteProprietarioImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa um Registro de Atendimento Solicitante
	 * 
	 * @author Virgínia Melo
	 * @date 04/06/2009
	 */
	public RegistroAtendimentoSolicitante obterRegistroAtendimentoSolicitanteRelatorioOS(Integer idRa){

		try{
			return this.getControladorRegistroAtendimento().obterRegistroAtendimentoSolicitanteRelatorioOS(idRa);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o telefone principal do solicitante.
	 * 
	 * @author Virgínia Melo
	 * @date 07/06/2009
	 * @param idRegistroAtendimento
	 * @return Telefone Principal
	 */
	public String pesquisarSolicitanteFonePrincipal(Integer idRegistroAtendimento){

		try{
			return this.getControladorRegistroAtendimento().pesquisarSolicitanteFonePrincipal(idRegistroAtendimento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera todos os motivos de interrupção(ativos).
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Coleção com todos os motivos de interrupcao ativos.
	 */
	public Collection<MotivoInterrupcao> pesquisarMotivoInterrupcao(){

		try{
			return this.getControladorOrdemServico().pesquisarMotivoInterrupcao();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera todos os locais de ocorrência;
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Coleção com todos os locais de ocorrencia ativos.
	 */
	public Collection<LocalOcorrencia> pesquisarLocalOcorrencia(){

		try{
			return this.getControladorOrdemServico().pesquisarLocalOcorrencia();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera um local de ocorrência
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Local de Ocorrência
	 */
	public LocalOcorrencia pesquisarLocalOcorrencia(Integer idLocalOcorrencia){

		try{
			return this.getControladorOrdemServico().pesquisarLocalOcorrencia(idLocalOcorrencia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de PavimentoRua ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Pavimento Rua
	 */
	public Collection<PavimentoRua> pesquisarPavimentoRua(){

		try{
			return this.getControladorOrdemServico().pesquisarPavimentoRua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de PavimentoCalcada ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Pavimento Calcada
	 */
	public Collection<PavimentoCalcada> pesquisarPavimentoCalcada(){

		try{
			return this.getControladorOrdemServico().pesquisarPavimentoCalcada();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera um PavimentoRua.
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Pavimento Rua
	 */
	public PavimentoRua pesquisarPavimentoRua(Integer idPavimento){

		try{
			return this.getControladorOrdemServico().pesquisarPavimentoRua(idPavimento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera um PavimentoCalcada.
	 * 
	 * @author Virgínia Melo
	 * @date 10/06/2009
	 * @return Pavimento Calcada
	 */
	public PavimentoCalcada pesquisarPavimentoCalcada(Integer idPavimento){

		try{
			return this.getControladorOrdemServico().pesquisarPavimentoCalcada(idPavimento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de CausaVazamento ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Causa Vazamento
	 */
	public Collection<CausaVazamento> pesquisarCausaVazamento(){

		try{
			return this.getControladorOrdemServico().pesquisarCausaVazamento();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Agente Externo ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Agente Externo
	 */
	public Collection<AgenteExterno> pesquisarAgenteExterno(){

		try{
			return this.getControladorOrdemServico().pesquisarAgenteExterno();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Diametro Rede Agua ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de Diametro Rede Água
	 */
	public Collection<DiametroRedeAgua> pesquisarDiametroRedeAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarDiametroRedeAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Diametro Ramal Agua ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de Diametro Ramal Água
	 */
	public Collection<DiametroRamalAgua> pesquisarDiametroRamalAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarDiametroRamalAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Diametro Rede Esgoto ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de Diametro Rede Esgoto
	 */
	public Collection<DiametroRedeEsgoto> pesquisarDiametroRedeEsgoto(){

		try{
			return this.getControladorOrdemServico().pesquisarDiametroRedeEsgoto();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Diametro Ramal Esgoto ativos.
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de Diametro Ramal Esgoto
	 */
	public Collection<DiametroRamalEsgoto> pesquisarDiametroRamalEsgoto(){

		try{
			return this.getControladorOrdemServico().pesquisarDiametroRamalEsgoto();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de MaterialRedeAgua
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de MaterialRedeAgua
	 */
	public Collection<MaterialRedeAgua> pesquisarMaterialRedeAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarMaterialRedeAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de MaterialRamalAgua
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de MaterialRamalAgua
	 */
	public Collection<MaterialRamalAgua> pesquisarMaterialRamalAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarMaterialRamalAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de MaterialRedeEsgoto
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de MaterialRedeEsgoto
	 */
	public Collection<MaterialRedeEsgoto> pesquisarMaterialRedeEsgoto(){

		try{
			return this.getControladorOrdemServico().pesquisarMaterialRedeEsgoto();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de MaterialRamalEsgoto
	 * 
	 * @author Virgínia Melo
	 * @date 17/06/2009
	 * @return Coleção de MaterialRamalEsgoto
	 */
	public Collection<MaterialRamalEsgoto> pesquisarMaterialRamalEsgoto(){

		try{
			return this.getControladorOrdemServico().pesquisarMaterialRamalEsgoto();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de OrdemServicoValaPavimento a partir da Ordem de Serviço.
	 * 
	 * @author Virgínia Melo
	 * @date 22/06/2009
	 * @return Coleção de OrdemServicoValaPavimento
	 */
	public Collection<OrdemServicoValaPavimento> pesquisarOrdemServicoValaPavimento(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoValaPavimento(idOrdemServico);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma OrdemServicoProgramacao
	 * 
	 * @author Virgínia Melo
	 * @date 25/06/2009
	 * @return OrdemServicoProgramacao
	 */
	public OrdemServicoProgramacao pesquisarOrdemServicoProgramacao(Integer idProgramacaoRoteiro, Integer idOrdemServico, Integer idEquipe){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoProgramacao(idProgramacaoRoteiro, idOrdemServico, idEquipe);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma OrdemServicoDeslocamento através do id da OS Programação.
	 * 
	 * @author Virgínia Melo
	 * @date 25/06/2009
	 * @return OrdemServicoDeslocamento
	 */
	public OrdemServicoDeslocamento pesquisarOrdemServicoDeslocamento(Integer idOsProgramacao){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoDeslocamento(idOsProgramacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de OSInterrupcaoDeslocamento a partir da OS Programação
	 * 
	 * @author Virgínia Melo
	 * @date 22/06/2009
	 * @return Coleção de OSInterrupcaoDeslocamento
	 */
	public Collection<OrdemServicoInterrupcaoDeslocamento> pesquisarOSInterrupcaoDeslocamento(Integer idOsProgramacao){

		try{
			return this.getControladorOrdemServico().pesquisarOSInterrupcaoDeslocamento(idOsProgramacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de OSInterrupcaoExecucao a partir da OS Programação
	 * 
	 * @author Virgínia Melo
	 * @date 30/06/2009
	 * @return Coleção de OSInterrupcaoExecucao
	 */
	public Collection<OrdemServicoInterrupcaoExecucao> pesquisarOSInterrupcaoExecucao(Integer idOsProgramacao){

		try{
			return this.getControladorOrdemServico().pesquisarOSInterrupcaoExecucao(idOsProgramacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void transferirContasHistoricoParaConta(Collection<ContaHistorico> contas, int anoMesFaturamentoSistemaParametro,
					Integer idDebitoCreditoSituacao){

		try{
			this.getControladorFaturamento().transferirContasHistoricoParaConta(contas, anoMesFaturamentoSistemaParametro,
							idDebitoCreditoSituacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por retornar a soma dos valores de um determinado 'tipoConsulta' da
	 * 'colecaoGuiaPagamentoValores'
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Saulo Lima
	 * @date 08/07/2009
	 * @param colecaoGuiaPagamentoValores
	 * @param tipoConsulta
	 * @return BigDecimal
	 */
	public BigDecimal calcularValoresGuia(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, int tipoConsulta){

		try{
			return this.getControladorCobranca().calcularValoresGuia(colecaoGuiaPagamentoValores, tipoConsulta);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por retornar apenas as 'GuiaPagamentoValoresHelper' selecionas pelo
	 * usuário na tela utilizando o parâmetro
	 * 'chavesPrestacoes' (Ex.: 9988-1$9988-2$7766-1)
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Saulo Lima
	 * @date 08/07/2009
	 * @param chavesPrestacoes
	 * @param colecaoGuiaPagamentoValores
	 * @return Collection<GuiaPagamentoValoresHelper>
	 */
	public Collection<GuiaPagamentoValoresHelper> retornarGuiaPagamentoValoresSelecionadas(String chavesPrestacoes,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores){

		try{
			return this.getControladorCobranca().retornarGuiaPagamentoValoresSelecionadas(chavesPrestacoes, colecaoGuiaPagamentoValores);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Logradouro Bairro
	 * 
	 * @author Virgínia Melo
	 * @date 24/07/2009
	 * @param idLogradouroBairro
	 * @return LogradouroBairro
	 * @throws ControladorException
	 */
	public LogradouroBairro pesquisarLogradouroBairro(Integer idLogradouroBairro){

		try{
			return this.getControladorEndereco().pesquisarLogradouroBairro(idLogradouroBairro);
		}catch(ControladorException ex){
			throw new FachadaException("erro.sistema", ex);
		}
	}

	/**
	 * Método responsável por validar os dados recebidos pelo AcquaGis.
	 * 
	 * @author Virgínia Melo
	 * @date 07/06/2009
	 * @param dadosAcquaGis
	 *            Objeto com os dados recebidos pelo AcquaGis.
	 * @return Código de retorno.
	 */
	public Integer validarDadosAcquaGis(DadosAcquaGis dadosAcquaGis){

		try{
			ControladorIntegracaoAcquaGis controladorIntegracao = ControladorIntegracaoAcquaGis.getInstancia();
			return controladorIntegracao.validarDadosAcquaGis(dadosAcquaGis);
		}catch(ControladorException ex){
			throw new FachadaException("erro.sistema", ex);
		}
	}

	/**
	 * Insere uma Conta Motivo Revisao
	 * 
	 * @param contaMotivoRevisao
	 * @return id
	 */
	public Integer inserirContaMotivoRevisao(ContaMotivoRevisao contaMotivoRevisao, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirContaMotivoRevisao(contaMotivoRevisao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra as Conta motivo Revisao
	 * 
	 * @param contaMotivoRevisao
	 * @param tipoPesquisa
	 * @return
	 */
	public Collection<ContaMotivoRevisao> filtrarContaMotivoRevisao(ContaMotivoRevisao contaMotivoRevisao, String tipoPesquisa){

		try{
			return this.getControladorFaturamento().pesquisarContaMotivoRevisao(contaMotivoRevisao, tipoPesquisa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza uma conta motivo Revisao
	 * 
	 * @param contaMotivoRevisao
	 */
	public void atualizarContaMotivoRevisao(ContaMotivoRevisao contaMotivoRevisao){

		try{
			this.getControladorFaturamento().atualizarContaMotivoRevisao(contaMotivoRevisao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Insere uma Conta Motivo Retificacao
	 * 
	 * @param contaMotivoRetificacao
	 * @return
	 */
	public Integer inserirContaMotivoRetificacao(ContaMotivoRetificacao contaMotivoRetificacao, Usuario usuarioLogado){

		try{
			return this.getControladorFaturamento().inserirContaMotivoRetificacao(contaMotivoRetificacao, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Filtra as Conta motivo Retificacao
	 * 
	 * @param contaMotivoRetificacao
	 * @param tipoPesquisa
	 * @return
	 */
	public Collection<ContaMotivoRetificacao> filtrarContaMotivoRetificacao(ContaMotivoRetificacao contaMotivoRetificacao,
					String tipoPesquisa){

		try{
			return this.getControladorFaturamento().pesquisarContaMotivoRetificacao(contaMotivoRetificacao, tipoPesquisa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualiza uma conta motivo Retificacao
	 * 
	 * @param contaMotivoRetificacao
	 */
	public void atualizarContaMotivoRetificacao(ContaMotivoRetificacao contaMotivoRetificacao){

		try{
			this.getControladorFaturamento().atualizarContaMotivoRetificacao(contaMotivoRetificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author eduardo henrique
	 * @date 17/08/2009
	 *       Retorna uma instância de Imovel, com todos os atributos preenchidos
	 * @param idImovel
	 * @return Imovel
	 * @throws ControladorException
	 */
	public Imovel consultarImovel(Integer idImovel){

		try{
			return this.getControladorImovel().consultarImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException("erro.sistema", ex);
		}
	}

	/**
	 * Método responsável por consultar os dados de um PagamentoHistorico
	 * 
	 * @date 17/08/2009
	 * @author Virgínia Melo
	 * @param idPagamentoHistorico
	 * @return PagamentoHistorico
	 */
	public PagamentoHistorico consultarPagamentoHistorico(Integer idPagamentoHistorico){

		try{
			return this.getControladorArrecadacao().consultarPagamentoHistorico(idPagamentoHistorico);
		}catch(ControladorException ex){
			throw new FachadaException("erro.sistema", ex);
		}
	}

	/**
	 * Método para consulta de protecao de hidrometros por descriçao abreviada
	 * 
	 * @date 01/08/2009
	 * @author André Nishimura
	 * @param protecao
	 * @return Collection
	 */

	public Collection pesquisarHidrometroProtecaoPorDescricaoAbreviada(String protecao){

		try{
			return this.getControladorMicromedicao().pesquisarHidrometroProtecaoPorDescricaoAbreviada(protecao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC1016] Estornar Pagamentos
	 * 
	 * @author Saulo Lima
	 * @date 19/08/2009
	 * @param pagamentoHistorico
	 * @param usuarioLogado
	 */
	public void estornarPagamento(PagamentoHistorico pagamentoHistorico, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().estornarPagamento(pagamentoHistorico, usuarioLogado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Salva as fotos da ordem de servico
	 * 
	 * @param foto
	 * @throws ControladorException
	 */
	public void salvarFotoOrdemServico(OrdemServicoFotoOcorrencia foto) throws ControladorException{

		try{
			this.getControladorOrdemServico().salvarFotoOrdemServico(foto);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Lista uma colecao de OrdemServicoFotoOcorrencia pesquisando por uma
	 * OrdemServicoFotoOcorrencia
	 * 
	 * @param OrdemServicoFotoOcorrencia
	 * @return Collection<OrdemServicoFotoOcorrencia>
	 */
	public Collection<OrdemServicoFotoOcorrencia> listarOSFoto(OrdemServicoFotoOcorrencia osFoto){

		try{
			return this.getControladorOrdemServico().listarOSFoto(osFoto);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * Pesquisa o último número sequencial das fotos, pelo id da ordem de servico
	 * 
	 * @param idOrdemServico
	 * @return numeroSequencia
	 */
	public int pesquisarQuantidadeFotosOrdemServico(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarQuantidadeFotosOrdemServico(idOrdemServico);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Inserir devoluções para os pagamentos efetuados a partir do código de
	 * barras
	 * 
	 * @author Raphael Rossiter
	 * @date 30/10/2007
	 * @return
	 * @throws ControladorException
	 */

	public void inserirDevolucoes(Collection<Devolucao> colecaoDevolucoes, Usuario usuarioLogado, AvisoBancario avisoBancario)
					throws ControladorException{

		try{
			this.getControladorArrecadacao().inserirDevolucoes(colecaoDevolucoes, usuarioLogado, avisoBancario);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a quantidade de Rotas que nao possui um Criterio definido para cada uma das Acoes de
	 * Cobrancas passadas no filtro
	 * 
	 * @author Victor Cisneiros
	 * @date 10/12/2008
	 */
	public Integer pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro){

		try{
			return this.getControladorCobranca().pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0652] Manter Comando de Negativação por Critério
	 * [SB0002] Atualizar Comando de Negativação por critério
	 * 
	 * @author Ana Maria
	 * @date 24/01/2008
	 * @throws ControladorException
	 */
	public void atualizarComandoNegativacao(InserirComandoNegativacaoPorCriterioHelper helper){

		try{
			getControladorSpcSerasa().atualizarComandoNegativacao(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Marcio Roberto
	 * @date 29/02/2008
	 * @return Collection NegativacaoHelper
	 */
	public Collection consultarResumoNegativacao(DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper, int tipo){

		try{
			return getControladorCobranca().consultarResumoNegativacao(dadosConsultaNegativacaoHelper, tipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Lista RA's que foram reiteradas pelo id de uma RA.
	 * 
	 * @param registroAtendimento
	 * @return colecao de RegistroAtendimento
	 * @throws ControladorException
	 */
	public Collection<RegistroAtendimento> listarDuasUltimasRAsReiteradas(RegistroAtendimento registroAtendimento)
					throws ControladorException{

		try{
			return this.getControladorRegistroAtendimento().listarDuasUltimasRAsReiteradas(registroAtendimento);
		}catch(ControladorException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método consuta os Negativadores que tenham movimento de Exclusão do spc ou serasa
	 * [UC0673] - Gerar Movimento da Exclusão de Negativação
	 * [SB0001] - Gerar Movimento da Exclusão de Negativação
	 * 
	 * @author Thiago Toscano
	 * @date 26/12/2007
	 */
	public Collection gerarMovimentoExclusaoNegativacao(Integer[] id, Usuario usuarioLogado){

		try{
			return this.getControladorSpcSerasa().gerarMovimentoExclusaoNegativacao(id);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que inicia o caso de uso de Gerar Movimento de Inclusao de Negativacao
	 * [UC0671] Gerar Movimento de Inclusao de Nwegativação
	 * [Fluxo Principal]
	 * 
	 * @author Thiago Toscano
	 * @date 21/02/2008
	 * @param comunicacaoInterna
	 * @param idNegativador
	 * @param idUsuarioResponsaval
	 * @param ObjectImovel
	 *            - Collecao de
	 *            [0] Integer - Matricula do Imovel
	 *            [1] Integer - id do cliente da negativacao
	 *            [2] String - cpf do cliente da negativacao
	 *            [3] String - cnpj do cliente da negativaca
	 *            [4] Collection - lista da contas e guias de pagamento do imovel
	 *            [5] Intetger - quantidade de itens em débito do imovel
	 *            [6] BigDecimal - valor total dos débitos do imovel
	 * @param dataPrevista
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	public void gerarMovimentoInclusaoNegativacao(String comunicacaoInterna, Integer idNegativador, int idUsuarioResponsaval,
					Collection ObjectImovel, Date dataPrevista) throws ControladorException{

		try{

			this.getControladorSpcSerasa().gerarMovimentoInclusaoNegativacao(comunicacaoInterna, idNegativador, idUsuarioResponsaval,
							ObjectImovel, dataPrevista, null, null);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0864] Gerar Certidão Negativa por Cliente
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2008
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer> pesquisarClientesAssociadosResponsavel(Integer idCliente){

		try{
			return this.getControladorCliente().pesquisarClientesAssociadosResponsavel(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public NegativacaoCriterio pesquisarComandoNegativacaoSimulado(Integer idComandoNegativacao){

		try{
			return getControladorSpcSerasa().pesquisarComandoNegativacaoSimulado(idComandoNegativacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o processo está em execução
	 * 
	 * @author Ana Maria
	 * @date 18/12/2008
	 */
	public boolean verificarProcessoEmExecucao(Integer idProcesso){

		try{
			return this.getControladorBatch().verificarProcessoEmExecucao(idProcesso);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite emitir certidão negativa mesmo que o cliente tenha um superior.
	 * 
	 * @author Rafael Corrêa
	 * @date 12/11/2008
	 * @param usuario
	 */
	public boolean verificarPermissaoEmitirCertidaoNegativaComClienteSuperior(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoEmitirCertidaoNegativaComClienteSuperior(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0651] Inserir Comando Negativação [FS0026] Verificar existência de comando para o
	 * negativador na data
	 * 
	 * @author Ana Maria
	 * @date 07/05/2008
	 * @param idNegativador
	 * @param Data
	 * @return boolean
	 */
	public boolean verificarExistenciaComandoNegativador(String idNegativador, Date dataPrevista){

		try{
			return this.getControladorSpcSerasa().verificarExistenciaComandoNegativador(idNegativador, dataPrevista);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Validar o Arquivo de Movimento de Retorno.
	 * 
	 * @author Yara T. Souza
	 * @date 09/12/2008
	 * @return Object[]
	 * @throws ErroRepositorioException
	 */
	public Object[] validarArquivoMovimentoRetorno(StringBuilder stringBuilderTxt, Negativador negativador){

		try{
			return this.getControladorSpcSerasa().validarArquivoMovimentoRetorno(stringBuilderTxt, negativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0317] Manter Comando de Negativação por Critério
	 * [SB0001] Excluir Comando de Negativação por Critério
	 * 
	 * @author Ana Maria
	 * @param ids
	 * @param usuarioLogado
	 * @created 21/01/2008
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerComandoNegativacaoPorCriterio(String[] ids){

		try{
			getControladorSpcSerasa().removerComandoNegativacaoPorCriterio(ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0651] Inserir Comando Negativação
	 * [SB0003] Determinar Data Prevista para Execução do Comando
	 * 
	 * @author Ana Maria
	 * @date 11/12/2007
	 * @param idNegativador
	 * @return Date
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarUltimaDataRealizacaoComando(Integer idNegativador, Integer icSimulacao){

		try{
			return this.getControladorSpcSerasa().pesquisarUltimaDataRealizacaoComando(idNegativador, icSimulacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o somatório do VALOR PAGO e do VALOR CANCELADO
	 * [UC0693] Gerar Relatório Acompanhamaneto de Clientes Negativados
	 * 
	 * @author Vivianne Sousa
	 * @date 29/04/2009
	 */
	public Object[] pesquisarSomatorioValorPagoEValorCancelado(Integer idNegativadorMovimentoReg){

		try{
			return this.getControladorSpcSerasa().pesquisarSomatorioValorPagoEValorCancelado(idNegativadorMovimentoReg);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o somatório do valor do Débito do NegativadoMovimentoReg pela CobrancaDebitoSituacao
	 * [UC0693] Gerar Relatório Acompanhamaneto de
	 * Clientes Negativados
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */

	public BigDecimal pesquisarSomatorioValorDebito(NegativadorMovimentoReg negativadorMovimentoReg,
					CobrancaDebitoSituacao cobrancaDebitoSituacao){

		try{
			return this.getControladorSpcSerasa().pesquisarSomatorioValorDebito(negativadorMovimentoReg, cobrancaDebitoSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Relatório Negaticações Excluídas
	 * Pesquisar o somatório do valor paga ou parcelado pelo registro negativador
	 * 
	 * @author Yara T. Souza
	 * @date 14/01/2009
	 * @param idNegativadorMovimentoReg
	 *            ,idCobrancaDebitoSituacao
	 * @return
	 * @throws ErroRepositorioException
	 */

	public BigDecimal pesquisarSomatorioNegativadorMovimentoRegItens(Integer idNegativadorMovimentoReg, Integer idCobrancaDebitoSituacao){

		try{
			return this.getControladorSpcSerasa().pesquisarSomatorioNegativadorMovimentoRegItens(idNegativadorMovimentoReg,
							idCobrancaDebitoSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Conta a quantidade de Negativacoes
	 * [UC0693] Gerar Relatório Negativacoes Excluidas
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */

	public Integer pesquisarRelatorioNegativacoesExcluidasCount(DadosConsultaNegativacaoHelper helper){

		try{
			return this.getControladorSpcSerasa().pesquisarRelatorioNegativacoesExcluidasCount(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa os dados necessários para a geração do relatório
	 * [UC0864] Gerar Certidão Negativa por Cliente
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioCertidaoNegativaClienteBean> pesquisarRelatorioCertidaoNegativaCliente(Collection<Integer> idsClientes,
					Cliente clienteInformado){

		try{
			return this.getControladorAtendimentoPublico().pesquisarRelatorioCertidaoNegativaCliente(idsClientes, clienteInformado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Conta a quantidade de Clientes Negativados [UC0693] Gerar Relatório Acompanhamaneto de
	 * Clientes Negativados
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */

	public Integer pesquisarRelatorioAcompanhamentoClientesNegativadorCount(DadosConsultaNegativacaoHelper helper){

		try{
			return this.getControladorSpcSerasa().pesquisarRelatorioAcompanhamentoClientesNegativadorCount(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0678] Relatório Negativador Resultado Simulacao pesquisar Negativador Resultado Simulacao
	 * 
	 * @author Yara Taciane
	 * @date 09/05/2008
	 * @param idNegativacaoComando
	 * @return NegativadorResultadoSimulacao
	 */
	public Collection pesquisarNegativadorResultadoSimulacao(Integer idNegativacaoComando){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorResultadoSimulacao(idNegativacaoComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0688] - Gerar Resumo Diario da Negativação
	 * [UC0694] - Gerar Relatório Negativações Excluídas
	 * pesquisa ocorrência na tabela NEGATIVADOR_MOVIMENTO_REG_PARCELAMENTO para NMRG_ID=NMRG_ID
	 * da tabela NEGATIVADOR_MOVIMENTO_REG)
	 * 
	 * @author Vivianne Sousa
	 * @data 28/04/2009
	 * @param idNegativadorMovimentoReg
	 * @return RelatorioNegativacoesExcluidasSomatorioDadosParcelamentoHelper
	 */
	public RelatorioNegativacoesExcluidasSomatorioDadosParcelamentoHelper pesquisarNegativadorMovimentoRegParcelamento(
					Integer idNegativadorMovimentoReg){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimentoRegParcelamento(idNegativadorMovimentoReg);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para apresentar os registros de negativadorMovimento Registro aceitos usado no
	 * caso de uso [UC0681]
	 * 
	 * @author Yara Taciane
	 * @date 22/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarNegativadorMovimentoRegistroAceito(NegativadorMovimentoHelper negativadorMovimentoHelper,
					Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimentoRegistroAceito(negativadorMovimentoHelper, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o NegativadorMovimentoReg [UC0673] Excluir Negativação Online
	 * 
	 * @author Yara Taciane
	 * @date 27/03/2008
	 */
	public NegativadorMovimentoReg pesquisarNegativadorMovimentoRegInclusao(Imovel imovel, Negativador negativador){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimentoRegInclusao(imovel, negativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comando de negativação (Helper) usado no caso de uso [UC0655]
	 * 
	 * @author Yara Taciane
	 * @date 11/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarNegativadorMovimento(NegativadorMovimentoHelper negativadorMovimentoHelper, Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimento(negativadorMovimentoHelper, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0678] Relatório Negativador Resultado Simulacao
	 * pesquisar Negativador Resultado Simulacao
	 * 
	 * @author Yara Taciane
	 * @date 09/05/2008
	 * @param idNegativacaoComando
	 * @return NegativadorResultadoSimulacao
	 */
	public NegativacaoCriterio pesquisarNegativacaoCriterio(Integer idNegativacaoComando){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativacaoCriterio(idNegativacaoComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para Pesquisar se a inclusão do imóvel está com retorno ou foi aceita.
	 * usado no caso de uso [0675]
	 * 
	 * @author Yara Taciane
	 * @date 22/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarNegatiacaoParaImovel(Imovel imovel, Negativador negativador){

		try{
			return this.getControladorSpcSerasa().pesquisarNegatiacaoParaImovel(imovel, negativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar se a negativação do imóvel . [UC0675] Excluir Negativação Online.
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */

	public Collection pesquisarImovelNegativado(Imovel imovel, Negativador negativador){

		try{
			return this.getControladorSpcSerasa().pesquisarImovelNegativado(imovel, negativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0694] Relatório Negativação Excluídas Pesquisar data da Negativação Excluída
	 * 
	 * @author Yara Taciane
	 * @date 09/05/2008
	 * @param idImovel
	 * @param idNegativacaoComando
	 * @return Date
	 */
	public Date pesquisarDataExclusaoNegativacao(int idImovel, int idNegativacaoComando){

		try{
			return this.getControladorSpcSerasa().pesquisarDataExclusaoNegativacao(idImovel, idNegativacaoComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0693] - Gerar Relatório Acompanhamento de Clientes Negativados
	 * pesquisa ocorrência na tabela NEGATIVADOR_MOVIMENTO_REG_PARCELAMENTO para NMRG_ID=NMRG_ID
	 * da tabela NEGATIVADOR_MOVIMENTO_REG)
	 * 
	 * @author Vivianne Sousa
	 * @data 30/04/2009
	 */
	public Object[] pesquisarDadosParcelamentoRelatorioAcompanhamentoClientesNegativados(Integer idNegativadorMovimentoReg){

		try{
			return this.getControladorSpcSerasa().pesquisarDadosParcelamentoRelatorioAcompanhamentoClientesNegativados(
							idNegativadorMovimentoReg);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comandos de negativação por tipo de comando (nesse caso
	 * matricula)usado no caso de uso [UC0691]
	 * 
	 * @author Thiago Vieira
	 * @date 16/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarComandoNegativacaoTipoMatricula(ComandoNegativacaoHelper comandoNegativacaoHelper, Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoTipoMatricula(comandoNegativacaoHelper, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comandos de negativação por tipo de comando (nesse caso
	 * critério)usado no caso de uso [UC0691]
	 * 
	 * @author Thiago Vieira
	 * @date 16/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarComandoNegativacaoTipoCriterio(ComandoNegativacaoTipoCriterioHelper comandoNegativacaoTipoCriterioHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoTipoCriterio(comandoNegativacaoTipoCriterioHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere Processo para Registrar Movimento de Retorno do Negativadaor.
	 * 
	 * @author Yara T. Souza
	 * @date 09/12/2008
	 * @return void
	 * @throws ErroRepositorioException
	 */
	public void inserirProcessoRegistrarNegativadorMovimentoRetorno(Usuario usuario){

		try{
			this.getControladorSpcSerasa().inserirProcessoRegistrarNegativadorMovimentoRetorno(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Conta a quantidade de Neg
	 * [UC0693] Gerar Relatório Negativacoes Excluidas
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */

	public Collection pesquisarRelatorioNegativacoesExcluidas(DadosConsultaNegativacaoHelper helper){

		try{
			return this.getControladorSpcSerasa().pesquisarRelatorioNegativacoesExcluidas(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * @param FiltrarRelatorioAnormalidadeLeituraPeriodoHelper
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioCertidaoNegativaHelper> pesquisarRelatorioCertidaoNegativa(Imovel imo) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().pesquisarRelatorioCertidaoNegativa(imo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Conta a quantidade de Clientes Negativados
	 * [UC0693] Gerar Relatório Acompanhamaneto de Clientes Negativados
	 * 
	 * @author Yara Taciane
	 * @date 17/03/2008
	 */
	public Collection pesquisarRelatorioAcompanhamentoClientesNegativador(DadosConsultaNegativacaoHelper helper){

		try{
			return this.getControladorSpcSerasa().pesquisarRelatorioAcompanhamentoClientesNegativador(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para contar a quantidade de ocorrências de
	 * negativadorMovimento Registro aceitos usado no caso de uso [UC0681]
	 * 
	 * @author Yara Taciane
	 * @date 22/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Integer verificarTotalRegistrosAceitos(Integer idNegativadorMovimento){

		try{
			return this.getControladorSpcSerasa().verificarTotalRegistrosAceitos(idNegativadorMovimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comando de negativação (Helper) usado no
	 * caso de uso [UC0655]
	 * 
	 * @author Yara Taciane
	 * @date 11/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarNegativadorMovimento(NegativadorMovimentoHelper negativadorMovimentoHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimento(negativadorMovimentoHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Informações Atualizadas em (maior data e hora da última execução
	 * 
	 * @author Yara Taciane
	 * @date 28/07/2008
	 */
	public Date getDataUltimaAtualizacaoResumoNegativacao(Integer numeroExecucaoResumoNegativacao){

		try{
			return this.getControladorSpcSerasa().getDataUltimaAtualizacaoResumoNegativacao(numeroExecucaoResumoNegativacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para apresentar os registros de negativadorMovimento Registro aceitos
	 * usado no caso de uso [UC0681]
	 * 
	 * @author Yara Taciane
	 * @date 22/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarNegativadorMovimentoRegistroAceito(NegativadorMovimentoHelper negativadorMovimentoHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarNegativadorMovimentoRegistroAceito(negativadorMovimentoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comandos de negativação por tipo de comando (nesse caso
	 * matricula)usado no caso de uso [UC0691]
	 * 
	 * @author Thiago Vieira
	 * @date 16/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarComandoNegativacaoTipoMatricula(ComandoNegativacaoHelper comandoNegativacaoHelper){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoTipoMatricula(comandoNegativacaoHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método usado para consulta de comandos de negativação por tipo de comando (nesse caso
	 * criterio)usado no caso de uso [UC0691]
	 * 
	 * @author Thiago Vieira
	 * @date 16/01/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarComandoNegativacaoTipoCriterio(ComandoNegativacaoTipoCriterioHelper comandoNegativacaoTipoCriterioHelper,
					Integer numeroPagina){

		try{
			return this.getControladorSpcSerasa().pesquisarComandoNegativacaoTipoCriterio(comandoNegativacaoTipoCriterioHelper,
							numeroPagina);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o último número sequencial das fotos, pelo id da ordem de servico e o id da ordem
	 * servico programacao
	 * 
	 * @param idOrdemServico
	 * @param idOrdemServicoProgramacao
	 * @return numeroSequencia
	 */
	public Integer pesquisarQuantidadeFotosOrdemServicoProgramacao(Integer idOrdemServico, Integer idOrdemServicoProgramacao){

		try{
			return this.getControladorOrdemServico().pesquisarQuantidadeFotosOrdemServicoProgramacao(idOrdemServico,
							idOrdemServicoProgramacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * obtêm a ultima sequence
	 * 
	 * @return sequence
	 * @throws ControladorException
	 */
	public Integer obterSequenceRA() throws ControladorException{

		try{
			return this.getControladorRegistroAtendimento().obterSequenceRA();
		}catch(ControladorException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public Collection listarMotivoAtendimentoIncompleto() throws ControladorException{

		try{
			return this.getControladorRegistroAtendimento().listarMotivoAtendimentoIncompleto();
		}catch(ControladorException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Lista RA's que foram reiteradas pelo id de uma RA.
	 * 
	 * @param registroAtendimento
	 * @return colecao de RegistroAtendimento
	 * @throws ControladorException
	 */
	public Collection<RegistroAtendimento> listarRAsReiteradas(RegistroAtendimento registroAtendimento) throws ControladorException{

		try{
			return this.getControladorRegistroAtendimento().listarRAsReiteradas(registroAtendimento);
		}catch(ControladorException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Filtra Ra's incompletas
	 * 
	 * @author anishimura
	 * @date 09/02/10
	 * @param ra
	 * @return
	 */
	public Collection filtrarRegistroAtendimentoIncompleto(FiltrarRegistroAtendimentoIncompletoHelper ra){

		try{
			return this.getControladorRegistroAtendimento().filtrarRegistroAtendimentoIncompleto(ra);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public AtendimentoIncompleto pesquisarRAIncompleta(Integer idRAi){

		try{
			return this.getControladorRegistroAtendimento().pesquisarRAIncompleta(idRAi);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public boolean comparaServicoTipoSubgrupoSubstituicaoHidrometro(String idServicoTipo) throws ControladorException{

		try{
			return this.getControladorOrdemServico().comparaServicoTipoSubgrupoSubstituicaoHidrometro(idServicoTipo);
		}catch(ControladorException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Relatório Analise de Consumo
	 * Yara Souza
	 * 28/04/2010
	 * 
	 * @param idImovel
	 * @param qtdMeses
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarConsumoPorQuantidadeMeses(Integer idImovel, Integer anoMesFaturamentoMinimo, Integer anoMesFaturamento)
					throws ControladorException{

		try{
			return this.getControladorMicromedicao().pesquisarConsumoPorQuantidadeMeses(idImovel, anoMesFaturamentoMinimo,
							anoMesFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inseir Débito a cobrar alterar valor do serviço
	 * 
	 * @author Yara Souza
	 * @date 30/04/2010
	 * @param httpServletRequest
	 * @param usuario
	 */
	public boolean verificarPermissaoAlterarDebitoACobrarValorServico(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoAlterarDebitoACobrarValorServico(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<EmissaoOSCobrancaHelper> pesquisarOS(Integer idComando, CobrancaAcaoAtividade tipoComandoAcaoCobrancas){

		Collection listaOS = null;
		try{
			listaOS = getControladorCobranca().pesquisarOS(idComando, tipoComandoAcaoCobrancas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return listaOS;
	}

	public Collection<RelatorioFechamentoCobrancaHelper> filtrarRelatorioFechamentoCobranca(Date periodoInicio, Date periodoFim,
					CobrancaAcao acao, Empresa empresa, CobrancaAcaoAtividadeComando acaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma acaoAtividadeCronograma, String stringComandoTipo){

		Collection<RelatorioFechamentoCobrancaHelper> retorno = null;
		try{
			retorno = getControladorCobranca().filtrarRelatorioFechamentoCobranca(periodoInicio, periodoFim, acao, empresa,
							acaoAtividadeComando, acaoAtividadeCronograma, stringComandoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return retorno;
	}

	public void emitirOSCobranca(Map<Integer, List<EmissaoOSCobrancaHelper>> associacoes, List<Empresa> empresas,
					CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando, Usuario usuarioLogado){

		try{
			getControladorCobranca().emitirOSCobranca(associacoes, empresas, tipoComandoAcaoCobranca, idComando, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * @author isilva
	 *         Pesquisa uma coleção de setor comercial pertecente a uma rota, e essa por sua vez
	 *         esteja no grupo
	 *         com identificador igual ao informado pelo por parametro.
	 * @param idGrupo
	 * @return
	 */
	public Collection pesquisarSetorComercialPorGrupoEmRota(int idGrupo){

		try{
			return this.getControladorLocalidade().pesquisarSetorComercialPorGrupoEmRota(idGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection filtrarRelatorioEficienciaCobranca(Date dataInicial, Date dataFinal, CobrancaAcao acao, Empresa empresa,
					CobrancaAcaoAtividadeComando comando, CobrancaAcaoAtividadeCronograma cronograma, String[] setores, String[] grupos){

		try{
			return this.getControladorCobranca().filtrarRelatorioEficienciaCobranca(dataInicial, dataFinal, acao, empresa, comando,
							cronograma, setores, grupos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param valueOf
	 * @return
	 */
	public Collection pesquisarBairroPorGrupoEmQuadraRota(Integer grupo){

		try{
			return this.getControladorCobranca().pesquisarBairroPorGrupoEmQuadraRota(grupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection filtrarAcompanhamentoExecucaoServicoCobranca(Integer comandoTipo, Integer comandoCronograma, Integer comandoEventual,
					Integer cobrancaAcao, Date periodoInicial, Date periodoFinal, Integer situacao, Integer religado, Integer servico,
					Integer localidade, Integer grupo, String[] bairro, String[] setorComercial){

		try{
			return this.getControladorCobranca().filtrarAcompanhamentoExecucaoServicoCobranca(comandoTipo, comandoCronograma,
							comandoEventual, cobrancaAcao, periodoInicial, periodoFinal, situacao, religado, servico, localidade, grupo,
							bairro, setorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Integer consultarQtdeDocumentosItensPorCobrancaDocumento(CobrancaDocumento cobrancaDocumento){

		try{
			return this.getControladorCobranca().consultarQtdeDocumentosItensPorCobrancaDocumento(cobrancaDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/*
	 * public Collection<CobrancaRemuneracaoPorAcaoRelatorioHelper>
	 * filtrarCobrancaRemuneracaoPorAcao(Date periodoInicio, Date periodoFim,
	 * CobrancaAcao acao, Empresa empresa, CobrancaAcaoAtividadeComando acaoAtividadeComando,
	 * CobrancaAcaoAtividadeCronograma acaoAtividadeCronograma) {
	 * Collection<CobrancaRemuneracaoPorAcaoRelatorioHelper> retorno = null;
	 * try {
	 * retorno = getControladorCobranca().filtrarCobrancaRemuneracaoPorAcao(periodoInicio,
	 * periodoFim, acao, empresa, acaoAtividadeComando,
	 * acaoAtividadeCronograma);
	 * } catch (ControladorException ex) {
	 * throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
	 * }
	 * return retorno;
	 * }
	 */
	public void efetuarBaixaOrdensServicoCobranca(String arquivo, Usuario usuario){

		try{

			Object[] parametros = new Object[2];
			parametros[0] = usuario;
			parametros[1] = arquivo;

			this.getControladorBatch().iniciarProcesso(Funcionalidade.BAIXA_ORDEM_SERVICO_COBRANCA, parametros);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author Andre Nishimura
	 * @date 23/07/2010
	 * @param comando
	 * @param idCobrancaAcaoAtividadeComando
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @param acao
	 * @param dataInicial
	 * @param dataFinal
	 * @param grupo
	 * @param setorComercial
	 * @param bairro
	 * @param categoria
	 * @return
	 */
	public Collection<RelatorioImovelPorAcaoCobrancaHelper> filtrarRelatorioImovelPorAcaoCobranca(String comando,
					String idCobrancaAcaoAtividadeComando, String idCobrancaAcaoAtividadeCronograma, String[] acao, Date dataInicial,
					Date dataFinal, String grupo, String[] setorComercial, String[] bairro, String[] categoria, String localidade){

		try{
			return this.getControladorCobranca().filtrarRelatorioImovelPorAcaoCobranca(comando, idCobrancaAcaoAtividadeComando,
							idCobrancaAcaoAtividadeCronograma, acao, dataInicial, dataFinal, grupo, setorComercial, bairro, categoria,
							localidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author wpereira
	 * @date 29/07/2010
	 * @param comandoCronograma
	 * @param comandoEventual
	 * @param dataInicio
	 * @param dataFim
	 * @param idsAcaoCobranca
	 * @param idGrupoCobranca
	 * @param idsSetorComercial
	 * @param idsBairro
	 * @param idsCategoria
	 * @param idsServicoTipo
	 * @param idComandoCronograma
	 * @param idComandoEventual
	 * @return
	 */
	public Collection<RelatorioReligacoesPorImovelHelper> obterRegistrosRelatorioReligacoesPorImovel(boolean comandoCronograma,
					boolean comandoEventual, Date dataInicio, Date dataFim, Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca,
					Collection<Integer> idsSetorComercial, Collection<Integer> idsBairro, Collection<Integer> idsCategoria,
					Collection<Integer> idsServicoTipo, Integer idComandoCronograma, Integer idComandoEventual){

		try{

			return this.getControladorCobranca().obterRegistrosRelatorioReligacoesPorImovel(comandoCronograma, comandoEventual, dataInicio,
							dataFim, idsAcaoCobranca, idGrupoCobranca, idsSetorComercial, idsBairro, idsCategoria, idsServicoTipo,
							idComandoCronograma, idComandoEventual);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * @author wpereira
	 * @date 29/07/2010
	 * @param comandoCronograma
	 * @param comandoEventual
	 * @param dataInicio
	 * @param dataFim
	 * @param idsAcaoCobranca
	 * @param idGrupoCobranca
	 * @param idsSetorComercial
	 * @param idsBairro
	 * @param idsCategoria
	 * @param idsServicoTipo
	 * @param idComandoCronograma
	 * @param idComandoEventual
	 * @return
	 */
	public Integer consultarQuantidadeRegistrosRelatorioReligacoesPorImovel(boolean comandoCronograma, boolean comandoEventual,
					Date dataInicio, Date dataFim, Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca,
					Collection<Integer> idsSetorComercial, Collection<Integer> idsBairro, Collection<Integer> idsCategoria,
					Collection<Integer> idsServicoTipo, Integer idComandoCronograma, Integer idComandoEventual){

		try{

			return this.getControladorCobranca().consultarQuantidadeRegistrosRelatorioReligacoesPorImovel(comandoCronograma,
							comandoEventual, dataInicio, dataFim, idsAcaoCobranca, idGrupoCobranca, idsSetorComercial, idsBairro,
							idsCategoria, idsServicoTipo, idComandoCronograma, idComandoEventual);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	public Integer filtrarRelatorioImovelPorAcaoCobrancaCount(String comando, String idComando, String idCronograma, String[] acao,
					Date dataInicial, Date dataFinal, String grupo, String[] setorComercial, String[] bairro, String[] categoria,
					String localidade){

		try{
			return this.getControladorCobranca().filtrarRelatorioImovelPorAcaoCobrancaCount(comando, idComando, idCronograma, acao,
							dataInicial, dataFinal, grupo, setorComercial, bairro, categoria, localidade);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @return
	 */
	public Object[] pesquisarProdutividadeMensalExecucaoServico(String tipoComando, String idCobrancaAcaoComando,
					String idCobrancaAcaoCronograma, String padraoPeriodo, String periodoInicio, String periodoFim,
					String periodoMesInicio, String periodoMesFim, String periodoAnoInicio, String periodoAnoFim, String localidade,
					Integer acaoSelecionada, Integer[] empresas, Integer[] grupos, Integer[] setores, Integer[] bairros,
					Integer[] grupoServicos, Integer[] subGrupoServicos, Integer[] servicos, Integer[] tiposCorte, Integer[] tiposSupressao){

		try{

			return this.getControladorCobranca().pesquisarProdutividadeMensalExecucaoServico(tipoComando, idCobrancaAcaoComando,
							idCobrancaAcaoCronograma, padraoPeriodo, periodoInicio, periodoFim, periodoMesInicio, periodoMesFim,
							periodoAnoInicio, periodoAnoFim, localidade, acaoSelecionada, empresas, grupos, setores, bairros,
							grupoServicos, subGrupoServicos, servicos, tiposCorte, tiposSupressao);

		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param tipoComando
	 * @param idCobrancaAcaoComando
	 * @param idCobrancaAcaoCronograma
	 * @param padraoPeriodo
	 * @param periodoInicio
	 * @param periodoFim
	 * @param periodoMesInicio
	 * @param periodoMesFim
	 * @param periodoAnoInicio
	 * @param periodoAnoFim
	 * @param localidade
	 * @param acaoSelecionada
	 * @param empresa
	 * @param grupos
	 * @param setores
	 * @param bairros
	 * @param grupoServicos
	 * @param subGrupoServicos
	 * @param servicos
	 * @param tiposCorte
	 * @param tiposSupressao
	 * @return
	 */
	public Object[] obterQuantidadeOrdensPeriodo(String tipoComando, String idCobrancaAcaoComando, String idCobrancaAcaoCronograma,
					String padraoPeriodo, String periodoInicio, String periodoFim, String periodoMesInicio, String periodoMesFim,
					String periodoAnoInicio, String periodoAnoFim, String localidade, Integer acaoSelecionada, Integer empresa,
					Integer[] grupos, Integer[] setores, Integer[] bairros, Integer[] grupoServicos, Integer[] subGrupoServicos,
					Integer[] servicos, Integer[] tiposCorte, Integer[] tiposSupressao){

		try{
			return this.getControladorCobranca().obterQuantidadeOrdensPeriodo(tipoComando, idCobrancaAcaoComando, idCobrancaAcaoCronograma,
							padraoPeriodo, periodoInicio, periodoFim, periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim,
							localidade, acaoSelecionada, empresa, grupos, setores, bairros, grupoServicos, subGrupoServicos, servicos,
							tiposCorte, tiposSupressao);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o número de Dias Úteis entre um período, excluindo Feriado
	 * Nacional, Feriado Municipais e os dias das semana que não deverão ser
	 * considerados dias uteis.
	 * 
	 * @author isilva
	 * @date 20/07/2010
	 * @param municipio
	 * <br>
	 *            Município, caso não seja informado, serão considerados todos
	 *            os municípios <br>
	 * <br>
	 * @param dataInicio
	 * <br>
	 *            Data inicial <br>
	 * <br>
	 * @param dataFim
	 * <br>
	 *            Data máxima <br>
	 * <br>
	 * @param diasExcludentes
	 * <br>
	 *            Dias que não serão considerados dias uteis <br>
	 *            <i>Ex:</i> <br>
	 *            <i>
	 *            Collection<Integer> diasExcludentes = new ArrayList<Integer>();
	 *            diasExcludentes.add(Calendar.SATURDAY);
	 *            diasExcludentes.add(Calendar.SUNDAY);
	 *            </i> <br>
	 * @return
	 */
	public Integer obterQuantidadeDiasUteis(Municipio municipio, Date dataInicio, Date dataFim, Collection<Integer> diasExcludentes){

		try{
			return this.getControladorUtil().obterQuantidadeDiasUteis(municipio, dataInicio, dataFim, diasExcludentes);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Gerar Ordens Servico Seletiva
	 * Método usado em Emitir Ordem Serviço Seletiva
	 * 
	 * @author Yara Souza
	 * @date 10/06/2010
	 * @param httpServletRequest
	 * @param usuario
	 */
	public byte[] gerarOrdensServicoSeletiva(Collection colecaoDadosRelatorio, OrdemServicoSeletivaHelper helper,
					int idFuncionalidadeIniciada, String nomeRelatorio) throws ControladorException{

		try{
			return this.getControladorOrdemServico().gerarOrdensServicoSeletiva(colecaoDadosRelatorio, helper, idFuncionalidadeIniciada,
							nomeRelatorio);
		}catch(ControladorException ex){
			throw new ControladorException(ex.getMessage(), ex);
		}
	}

	/**
	 * @author isilva
	 * @param tipoComando
	 * @param acaoSelecionada
	 * @param empresa
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idCobrancaAcaoAtividadeComando
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @return
	 */
	public Object[] pesquisarRelatorioAcompanhamentoAcao(String tipoComando, String acaoSelecionada, String empresa, String periodoInicio,
					String periodoFim, String idCobrancaAcaoAtividadeComando, String idCobrancaAcaoAtividadeCronograma){

		try{
			return this.getControladorCobranca().pesquisarRelatorioAcompanhamentoAcao(tipoComando, acaoSelecionada, empresa, periodoInicio,
							periodoFim, idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// /**
	// * @author isilva
	// * @param idEmpresa
	// * @return
	// * @throws ControladorException
	// */
	// public Collection<CobrancaContratoRemuneracaoVencimento>
	// pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(
	// Integer idEmpresa) throws ControladorException{
	//
	// try{
	// return
	// this.getControladorCobranca().pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(idEmpresa);
	// }catch(ControladorException ex){
	// ex.printStackTrace();
	// throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
	// }
	// }

	/**
	 * @author isilva
	 * @param idEmpresa
	 * @param tipoComando
	 * @param acaoSelecionada
	 * @param empresa
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idCobrancaAcaoAtividadeComando
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @param diasAteAnterior
	 * @param diasAte
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoEmFaixa(Integer idEmpresa, String tipoComando, String acaoSelecionada, String empresa,
					String periodoInicio, String periodoFim, String idCobrancaAcaoAtividadeComando,
					String idCobrancaAcaoAtividadeCronograma, Integer diasAteAnterior, Integer diasAte) throws ControladorException{

		try{
			return this.getControladorCobranca().pesquisarCobrancaAcaoEmFaixa(idEmpresa, tipoComando, acaoSelecionada, empresa,
							periodoInicio, periodoFim, idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma, diasAteAnterior,
							diasAte);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author isilva
	 * @param idUnidade
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idGrupo
	 * @param setores
	 * @param bairros
	 * @param tiposServico
	 * @return
	 */
	public Integer relacaoImovelReligacaoEspecialDiaCount(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico){

		try{
			return this.getControladorCobranca().relacaoImovelReligacaoEspecialDiaCount(idUnidade, periodoInicio, periodoFim, idGrupo,
							setores, bairros, tiposServico);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param idUnidade
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idGrupo
	 * @param setores
	 * @param bairros
	 * @param tiposServico
	 * @return
	 */
	public Collection relacaoImovelReligacaoEspecialDia(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico){

		try{
			return this.getControladorCobranca().relacaoImovelReligacaoEspecialDia(idUnidade, periodoInicio, periodoFim, idGrupo, setores,
							bairros, tiposServico);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param idUnidade
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idGrupo
	 * @param setores
	 * @param bairros
	 * @param tiposServico
	 * @return
	 */
	public Collection<RelatorioAcompReligacaoEspecialHelper> relacaoRelatorioImovelReligacaoEspecialDia(Integer idUnidade,
					Date periodoInicio, Date periodoFim, Integer idGrupo, String[] setores, String[] bairros, String[] tiposServico){

		try{
			return this.getControladorCobranca().relacaoRelatorioImovelReligacaoEspecialDia(idUnidade, periodoInicio, periodoFim, idGrupo,
							setores, bairros, tiposServico);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Diametro Cavalete Agua ativos.
	 * 
	 * @author Yara Souza
	 * @date 30/08/2010
	 * @return Coleção de Diametro Cavalete Agua.
	 */
	public Collection<DiametroCavaleteAgua> pesquisarDiametroCavaleteAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarDiametroCavaleteAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma coleção de Material Cavalete Agua ativos.
	 * 
	 * @author Yara Souza
	 * @date 30/08/2010
	 * @return Coleção de Material Cavalete Agua.
	 */
	public Collection<MaterialCavaleteAgua> pesquisarMaterialCavaleteAgua(){

		try{
			return this.getControladorOrdemServico().pesquisarMaterialCavaleteAgua();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param idsOS
	 * @return
	 */
	public Collection<OrdemServico> pesquisarOrdensServicos(List<Integer> idsOS){

		try{
			return this.getControladorOrdemServico().pesquisarOrdensServicos(idsOS);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Yara Souza
	 * @date 30/08/2010
	 * @return
	 */
	public Date verificarDataUtilVencimento(Date dataVencimento, Municipio municipio){

		try{
			return this.getControladorCobranca().verificarDataUtilVencimento(dataVencimento, municipio);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param idPerfilParcelamento
	 * @param idRD
	 * @param idImovelSituacaoTipo
	 * @param idImovelPerfil
	 * @param idSubcategoria
	 * @param valorMinimoDebitoParcelar
	 * @param valorMaximoDebitoParcelar
	 * @param tipoPesquisa
	 * @return
	 */
	public Collection pesquisarExstenciaPerfilParcelamento(Integer idPerfilParcelamento, Integer idRD, Integer idImovelSituacaoTipo,
					Integer idImovelPerfil, Integer idSubcategoria, BigDecimal valorMinimoDebitoParcelar,
					BigDecimal valorMaximoDebitoParcelar, String tipoPesquisa){

		try{
			return this.getControladorCobranca().pesquisarExstenciaPerfilParcelamento(idPerfilParcelamento, idRD, idImovelSituacaoTipo,
							idImovelPerfil, idSubcategoria, valorMinimoDebitoParcelar, valorMaximoDebitoParcelar, tipoPesquisa);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0498] Efetuar Religação de Água com Instalação de hidrômetro.
	 * Permite efetuar religação de Água com Instalação de Hidrômetro ou pelo menu ou pela
	 * funcionalidade encerrar
	 * a Execução da ordem de serviço.
	 * 
	 * @author Sávio Luiz
	 * @date 29/01/2008
	 * @param integracaoComercialHelper
	 */
	public void efetuarReligacaoAguaComInstalacaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper, Usuario usuario){

		try{

			this.getControladorAtendimentoPublico().efetuarReligacaoAguaComInstalacaoHidrometro(integracaoComercialHelper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Efetuar Religação de Água com Substituição de hidrômetro.
	 * Permite efetuar religação de Água com Substituição de Hidrômetro ou pelo menu ou pela
	 * funcionalidade
	 * encerrar a Execução da ordem de serviço.
	 * 
	 * @author Luiz César
	 * @date 22/01/2008
	 * @param integracaoComercialHelper
	 * @throws ControladorException
	 */
	public void efetuarReligacaoAguaComSubstituicaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper, Usuario usuario){

		try{

			this.getControladorAtendimentoPublico().efetuarReligacaoAguaComSubstituicaoHidrometro(integracaoComercialHelper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Validar se o local de armazenagem é OFICINA (HILA_ICOFICINA = 1) e se a situação atual do
	 * hidrômetro for
	 * diferente de "EM MANUTENÇÃO"
	 * 
	 * @author Luiz César
	 * @date 12/07/2010
	 * @param idLocalArmazenagem
	 * @param idSituacaoHidrometro
	 */
	public void validarLocalArmazenagemSituacaoHidrometro(String idLocalArmazenagem, String idSituacaoHidrometro){

		try{

			this.getControladorAtendimentoPublico().validarLocalArmazenagemSituacaoHidrometro(idLocalArmazenagem, idSituacaoHidrometro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] Efetuar Religação de Água com Substituição de Hidrômetro.
	 * Permite validar o efetuar religação de Água com Substituição de Hidrômetro Exibir ou pelo
	 * menu ou pela
	 * funcionalidade encerrar a Execução da ordem de serviço.
	 * [FS0002] Verificar Situação do Imovel. [FS0003] Validar Situação de Água
	 * 
	 * @author Luiz César
	 * @date 09/06/2010
	 * @param ordem
	 *            ,veioEncerrarOS
	 * @throws ControladorException
	 */
	public void validarReligacaoAguaComInstalacaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarReligacaoAguaComInstalacaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] Efetuar Religação de Água com Substituição de Hidrômetro.
	 * Permite validar o efetuar religação de Água com Substituição de Hidrômetro Exibir ou pelo
	 * menu ou pela
	 * funcionalidade encerrar a Execução da ordem de serviço.
	 * [FS0002] Verificar Situação do Imovel. [FS0003] Validar Situação de Água
	 * 
	 * @author Luiz César
	 * @date 09/06/2010
	 * @param ordem
	 *            ,veioEncerrarOS
	 * @throws ControladorException
	 */
	public void validarReligacaoAguaComSubstituicaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarReligacaoAguaComSubstituicaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @param idOrdemServico
	 * @return
	 */
	public Collection<RoteiroOSDadosProgramacaoHelper> pesquisarProgramacaoOrdemServicoRoteiroEquipe(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarProgramacaoOrdemServicoRoteiroEquipe(idOrdemServico);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o maior Sequêncial da Ordem de Serviço Programação, de uma Data para uma Equipe.
	 * 
	 * @param idEquipe
	 * @param dtRoteiro
	 * @return
	 * @throws ControladorException
	 */
	public Integer maiorSquencialProgramacaoOrdemServicoRoteiroEquipe(Integer idEquipe, Date dtRoteiro){

		try{
			return this.getControladorOrdemServico().maiorSquencialProgramacaoOrdemServicoRoteiroEquipe(idEquipe, dtRoteiro);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Metodo que retorno o somátorio dos debitos cobrados.
	 * [0] - Multas,
	 * [1] - Juros
	 * [2] - Outros Serviços
	 * 
	 * @author isilva
	 * @date 17/11/2010
	 * @param idConta
	 * @return
	 * @throws ControladorException
	 */
	public Object[] pesquisarDebitosCobradosPorConta(Integer idConta){

		try{
			return this.getControladorFaturamento().pesquisarDebitosCobradosPorConta(idConta);
		}catch(ControladorException ex){
			ex.printStackTrace();
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] Efetuar Corte de Água com Instalação de Hidrômetro.
	 * Permite validar o Efetuar Corte de Água com Instalação de Hidrômetro Exibir ou pelo menu ou
	 * pela
	 * funcionalidade encerrar a Execução da ordem de serviço.
	 * [FS] Verificar Situação do Imovel. [FS] Validar Situação de Água
	 * 
	 * @author isilva
	 * @date 15/12/2010
	 * @param ordem
	 *            , veioEncerrarOS
	 * @throws ControladorException
	 */
	public void validarCorteAguaComInstalacaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarCorteAguaComInstalacaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] Efetuar Corte de Água com Instalação de hidrômetro.
	 * Permite efetuar Corte de Água com Instalação de Hidrômetro ou pelo menu ou pela
	 * funcionalidade encerrar
	 * a Execução da ordem de serviço.
	 * 
	 * @author isilva
	 * @date 16/12/2010
	 * @param integracaoComercialHelper
	 * @param usuario
	 */
	/**
	 * @param integracaoComercialHelper
	 */
	public void efetuarCorteAguaComInstalacaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{

			this.getControladorLigacaoAgua().efetuarCorteAguaComInstalacaoHidrometro(integracaoComercialHelper);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] Efetuar Corte de Água com Substituição de Hidrômetro.
	 * Permite validar o efetuar corte de Água com Substituição de Hidrômetro Exibir ou pelo menu ou
	 * pela
	 * funcionalidade encerrar a Execução da ordem de serviço.
	 * [FS] Verificar Situação do Imovel. [FS] Validar Situação de Água
	 * 
	 * @author isilva
	 * @date 20/12/2010
	 * @param ordem
	 * @param veioEncerrarOS
	 * @throws ControladorException
	 */
	public void validarCorteAguaComSubstituicaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarCorteAguaComSubstituicaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] Efetuar Corte de Água com Substituição de hidrômetro.
	 * Permite efetuar Corte de Água com Substituição de Hidrômetro ou pelo menu ou pela
	 * funcionalidade encerrar
	 * a Execução da ordem de serviço.
	 * 
	 * @author isilva
	 * @date 16/12/2010
	 * @param integracaoComercialHelper
	 */
	public void efetuarCorteAguaComSubstituicaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoAgua().efetuarCorteAguaComSubstituicaoHidrometro(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] Efetuar Restabelecimento da Ligação de Água com Substituição de
	 * hidrômetro.
	 * Permite validar o Efetuar Restabelecimento Ligação de Água com Substituição
	 * de hidrômetro Exibir ou pelo menu ou pela funcionalidade encerrar a
	 * Execução da ordem de serviço.
	 * [FS] Verificar Situação Rede de Água na Quadra. [FS] Verificar
	 * Situação do Imovel. [FS] Validar Situação de Água do Imóvel
	 * 
	 * @author isilva
	 * @date 22/12/2010
	 * @param imovel
	 * @throws ControladorException
	 */
	public void validarRestabelecimentoLigacaoAguaComSubstituicaoHidrometroExibir(OrdemServico ordem, boolean veioEncerrarOS){

		try{
			getControladorAtendimentoPublico().validarRestabelecimentoLigacaoAguaComSubstituicaoHidrometroExibir(ordem, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @author isilva
	 * @param integracaoComercialHelper
	 * @param usuario
	 */
	public void efetuarRestabelecimentoLigacaoAguaComSubstituicaoHidrometro(IntegracaoComercialHelper integracaoComercialHelper,
					Usuario usuario){

		try{
			getControladorAtendimentoPublico().efetuarRestabelecimentoLigacaoAguaComSubstituicaoHidrometro(integracaoComercialHelper,
							usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Andre Nishimura
	 * @date 22/01/2011
	 * @param setorComercial
	 * @return
	 */

	public Collection pesquisarBairroPorSetorComercial(Integer setorComercial){

		try{
			return this.getControladorLocalidade().pesquisarBairroPorSetorComercial(setorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param imovel
	 * @return
	 */
	public String[] retornarCodBarrasExtratoDebito(Imovel imovel){

		try{
			return this.getControladorCobranca().retornarCodBarrasExtratoDebito(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0711] Filtro para Emissao de Ordens Seletivas
	 * 
	 * @author Anderson Lima
	 * @date 13/03/2010
	 *       Pesquisar o total de registros a serem processados
	 */
	public Integer filtrarImovelEmissaoOrdensSeletivasCount(OrdemServicoSeletivaHelper ordemServicoSeletivaHelper){

		try{

			return this.getControladorOrdemServico().filtrarImovelEmissaoOrdensSeletivasCount(ordemServicoSeletivaHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarCadastroClientesRedundantes(){

		Collection retorno;
		try{
			retorno = getControladorCliente().pesquisarCadastroClientesRedundantes();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
		return retorno;
	}

	public void corrigirCadastroClientesRedundantes(Collection colecaoClientesRedundates){

		try{
			getControladorCliente().corrigirCadastroClientesRedundantes(colecaoClientesRedundates);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Faz a reprogramação das ordens de serviço passadas como parâmetro para a data e equipe
	 * passadas também.
	 * 
	 * @param ordensServico
	 *            - ordens de serviço a reprogramar
	 * @param novaEquipe
	 * @param dataRoteiro
	 *            - a data atual do roteiro
	 * @param novaDataRoteiro
	 *            - a nova data do roteiro
	 * @param usuario
	 *            - usuário do sistema que fez a reprogramação
	 * @author Rodrigo Oliveira
	 */
	public void reprogramarOrdensServico(List<OrdemServico> ordensServico, Equipe novaEquipe, Date dataRoteiro, Date novaDataRoteiro,
					Usuario usuario) throws FachadaException{

		try{
			this.getControladorOrdemServico().reprogramarOrdensServico(ordensServico, novaEquipe, dataRoteiro, novaDataRoteiro, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void inserirOrgaoExterno(String descricao){

		try{
			getControladorCobranca().inserirOrgaoExterno(descricao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void inserirInfracaoTipo(String descricao, String descricaoAbreviada){

		try{
			getControladorCobranca().inserirInfracaoTipo(descricao, descricaoAbreviada);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param descricao
	 * @param descricaoAbreviada
	 */
	public void inserirInfracaoLigacaoSituacao(String descricao, String descricaoAbreviada){

		try{
			getControladorCobranca().inserirInfracaoLigacaoSituacao(descricao, descricaoAbreviada);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param descricao
	 * @param descricaoAbreviada
	 */
	public void inserirInfracaoImovelSituacao(String descricao, String descricaoAbreviada){

		try{
			getControladorCobranca().inserirInfracaoImovelSituacao(descricao, descricaoAbreviada);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param bean
	 */
	public void atualizarInfracaoImovelSituacao(InfracaoImovelSituacao bean){

		// TODO Auto-generated method stub
		try{
			getControladorCobranca().atualizarInfracaoImovelSituacao(bean);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param bean
	 */
	public void atualizarInfracaoLigacaoSituacao(InfracaoLigacaoSituacao bean){

		// TODO Auto-generated method stub
		try{
			getControladorCobranca().atualizarInfracaoLigacaoSituacao(bean);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param bean
	 */
	public void atualizarInfracaoTipo(InfracaoTipo bean){

		try{
			getControladorCobranca().atualizarInfracaoTipo(bean);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param idCategoria
	 * @param idSubcategoria
	 * @param idImovelPerfil
	 * @param idInfracaoTipo
	 */
	public void inserirInfracaoPerfil(Integer idCategoria, Integer idSubcategoria, Integer idImovelPerfil, Integer idInfracaoTipo){

		try{
			getControladorCobranca().inserirInfracaoPerfil(idCategoria, idSubcategoria, idImovelPerfil, idInfracaoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void atualizarInfracaoPerfil(Integer id, Integer idCategoria, Integer idSubcategoria, Integer idImovelPerfil,
					Integer idInfracaoTipo){

		try{
			getControladorCobranca().atualizarInfracaoPerfil(id, idCategoria, idSubcategoria, idImovelPerfil, idInfracaoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * Obtem o ConsumoFaixaAreaCategoria da categoria com a area informada
	 * 
	 * @author isilva
	 * @date 21/01/2011
	 * @param idCategoria
	 * @param area
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ConsumoFaixaAreaCategoria pesquisarConsumoFaixaAreaCategoriaPorCategoriaArea(Integer idCategoria, Integer area){

		try{
			return getControladorImovel().pesquisarConsumoFaixaAreaCategoriaPorCategoriaArea(idCategoria, area);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna os SetorComercialVencimento, Ativos ou Inativos;
	 * Ordenados pelo dia de Vencimento.
	 * Não Carrega Localidade, ném SetorComercial
	 * 
	 * @author isilva
	 * @date 21/01/2011
	 * @param idLocalidade
	 * @param idSetorComercial
	 * @param indicadorUso
	 * @return
	 */
	public Collection<SetorComercialVencimento> pesquisarSetorComercialVencimentoPorLocalidadeSetorComercial(Integer idLocalidade,
					Integer idSetorComercial, Short indicadorUso){

		try{
			return getControladorFaturamento().pesquisarSetorComercialVencimentoPorLocalidadeSetorComercial(idLocalidade, idSetorComercial,
							indicadorUso);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Subsistema de Esgoto
	 * 
	 * @author Ailton Sousa
	 * @date 26/01/2011
	 */

	public int inserirSubsistemaEsgoto(SubsistemaEsgoto subsistemaEsgoto, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirSubsistemaEsgoto(subsistemaEsgoto, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Manter Subsistema Esgoto [SB0001] Atualizar Subsistema Esgoto
	 * 
	 * @author Ailton Sousa
	 * @date 28/01/2011
	 * @throws ErroRepositorioException
	 */
	public void atualizarSubsistemaEsgoto(SubsistemaEsgoto subsistemaEsgoto, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarSubsistemaEsgoto(subsistemaEsgoto, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0525] Manter Subsistema Esgoto [SB0002] Remover Subsistema Esgoto
	 * 
	 * @author Ailton Sousa
	 * @date 28/01/2011
	 * @throws ErroRepositorioException
	 */
	public void removerSubsistemaEsgoto(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerSubsistemaEsgoto(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] - Inserir Localidade Dado Operacional
	 * 
	 * @author isilva
	 * @date 26/01/2011
	 * @param localidadeDadoOperacional
	 * @param usuarioLogado
	 * @return
	 */
	public Integer inserirLocalidadeDadoOperacional(LocalidadeDadoOperacional localidadeDadoOperacional, Usuario usuarioLogado){

		try{
			return this.getControladorOperacional().inserirLocalidadeDadoOperacional(localidadeDadoOperacional, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Localidade Dado Operacional
	 * 
	 * @author Hebert Falcão
	 * @date 18/02/2011
	 */
	public void removerLocalidadeDadoOperacional(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerLocalidadeDadoOperacional(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] - Atualizar Localidade Dado Operacional
	 * 
	 * @author isilva
	 * @date 27/01/2011
	 * @param localidadeDadoOperacional
	 * @param usuarioLogado
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public void atualizarLocalidadeDadoOperacional(LocalidadeDadoOperacional localidadeDadoOperacional, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarLocalidadeDadoOperacional(localidadeDadoOperacional, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Logradouro Geral
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011
	 *       Obter dados dos Logradouros pelos parametros informados
	 */
	public Collection pesquisarLogradourosPorMunicipio(Integer idMunicipio){

		try{
			return getControladorEndereco().pesquisarLogradourosPorMunicipio(idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obtém uma coleção de Localidades com dados do intervalo de Id's
	 * 
	 * @author Anderson Italo
	 * @date 27/01/2011
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadePorIdIntervalo(Integer idLocalidadeInicial, Integer idLocalidadeFinal){

		try{
			return getControladorLocalidade().pesquisarLocalidadePorIdIntervalo(idLocalidadeInicial, idLocalidadeFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Localidade pelo filtro de Localidade
	 * 
	 * @author André Henrique
	 * @date 02/05/2013
	 * @throws ControladorException
	 */
	public Collection<Localidade> pesquisarLocalidadePorFiltro(FiltroLocalidade filtro, Integer pageOffset){

		try{
			return getControladorLocalidade().pesquisarLocalidadePorFiltro(filtro, pageOffset);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Logradouro Geral
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011
	 *       Obter total dos Logradouros pelos por Município
	 */
	public Integer calcularTotalLogradourosPorMunicipio(Integer idMunicipio){

		try{
			return getControladorEndereco().calcularTotalLogradourosPorMunicipio(idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * UC0042 - Inserir Bacia
	 * 
	 * @author Hebert Falcão
	 * @created 27 de Janeiro de 2011
	 */
	public Integer inserirBacia(Bacia bacia, Usuario usuario){

		try{
			return getControladorOperacional().inserirBacia(bacia, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Bacia
	 * 
	 * @author Hebert Falcão
	 * @date 18/02/2011
	 */
	public void removerBacia(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerBacia(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * UC0XX - Inserir Unidade Operacional
	 * 
	 * @author Hebert Falcão
	 * @created 27 de Janeiro de 2011
	 */
	public Integer inserirUnidadeOperacional(UnidadeOperacional unidadeOperacional, Usuario usuario){

		try{
			return getControladorCadastro().inserirUnidadeOperacional(unidadeOperacional, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar SubBacia
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 31/01/2011
	 * @throws ErroRepositorioException
	 */
	public void atualizarSubBacia(SubBacia subBacia, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarSubBacia(subBacia, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar ZonaAbastecimento
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 02/02/2011
	 * @throws ErroRepositorioException
	 */
	public void atualizarZonaAbastecimento(ZonaAbastecimento zonaAbastecimento, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarZonaAbastecimento(zonaAbastecimento, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover SubBacia
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 31/01/2011
	 * @throws ErroRepositorioException
	 */
	public void removerSubBacia(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerSubBacia(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover ZonaAbastecimento
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 02/02/2011
	 * @throws ErroRepositorioException
	 */
	public void removerZonaAbastecimento(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerZonaAbastecimento(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir SubBacia
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @created 31 de Janeiro de 2011
	 */
	public Integer inserirSubBacia(SubBacia subBacia, Usuario usuario){

		try{
			return getControladorOperacional().inserirSubBacia(subBacia, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir ZonaAbastecimento
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @created 02 de Fevereiro de 2011
	 */
	public Integer inserirZonaAbastecimento(ZonaAbastecimento zonaAbastecimento, Usuario usuario){

		try{
			return getControladorOperacional().inserirZonaAbastecimento(zonaAbastecimento, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Sistema Abastecimento
	 * Inserir um Sistema de Abastecimento
	 * 
	 * @author Anderson Italo
	 * @date 28/01/2011
	 */
	public Integer inserirSistemaAbastecimento(SistemaAbastecimento sistemaAbastecimento, Usuario usuarioLogado){

		try{
			Integer id = (Integer) this.getControladorOperacional().inserirSistemaAbastecimento(sistemaAbastecimento, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Sistema Abastecimento
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011
	 *       Obter dados de um sistema de abastecimento
	 */
	public SistemaAbastecimento pesquisarSistemaAbastecimento(Integer codigo){

		try{
			return getControladorOperacional().pesquisarSistemaAbastecimento(codigo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Sistema Abastecimento
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011
	 *       Pesquisar sistema de abastecimento pelo filtro
	 */
	public Collection pesquisarSistemaAbastecimentoFiltro(FiltroSistemaAbastecimento filtroSistemaAbastecimento){

		try{
			return getControladorOperacional().pesquisarSistemaAbastecimentoFiltro(filtroSistemaAbastecimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * UC0XX - Atualizar Unidade Operacional
	 * 
	 * @author Péricles Tavares
	 * @created 31/01/2011
	 */
	public void atualizarUnidadeOperacional(UnidadeOperacional unidadeOperacional, Usuario usuario){

		try{
			getControladorCadastro().atualizarUnidadeOperacional(unidadeOperacional, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * UC0XX - Remover Unidade Operacional
	 * 
	 * @author Péricles Tavares
	 * @created 31/01/2011
	 */
	public void removerUnidadeOperacional(String[] ids, Usuario usuarioLogado){

		try{
			getControladorCadastro().removerUnidadeOperacional(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC] - Atualizar Bacia
	 * 
	 * @author isilva
	 * @date 03/02/2011
	 * @param bacia
	 * @param usuarioLogado
	 */
	@SuppressWarnings("unchecked")
	public void atualizarBacia(Bacia bacia, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarBacia(bacia, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Manter Sistema Abastecimento
	 * [SB0001] - Atualizar Sistema de Abastecimento
	 * 
	 * @author Anderson Italo
	 * @date 02/02/2011
	 */
	public void atualizarSistemaAbastecimento(SistemaAbastecimento sistemaAbastecimento, Usuario usuario){

		try{
			this.getControladorOperacional().atualizarSistemaAbastecimento(sistemaAbastecimento, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UCXXXX] Manter Sistema Abastecimento
	 * [SB0002] - Excluir Sistema de Abastecimento
	 * 
	 * @author Anderson Italo
	 * @date 02/02/2011
	 */
	public void removerSistemaAbastecimento(String[] ids, Usuario usuario){

		try{
			this.getControladorOperacional().removerSistemaAbastecimento(ids, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite obter o Tipo de Solicitação de um registro de atendimento
	 * 
	 * @author Ailton Sousa
	 * @date 08/02/2011
	 * @param idRegistroAtendimento
	 * @throws ControladorException
	 */
	public Integer obterTipoSolicitacaoRA(Integer idRa){

		try{
			return this.getControladorRegistroAtendimento().obterTipoSolicitacaoRA(idRa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [FS0003] - Verificar se imóvel já esta suprimido Judicialmente.
	 * 
	 * @author isilva
	 * @date 08/02/2011
	 * @return
	 */
	public Boolean verificarImovelSuprimidoJudicial(Integer idImovel){

		try{
			return this.getControladorImovel().verificarImovelSuprimidoJudicial(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [FS0003] - Suprimido Judicialmente a Ligação de Esgoto de um Imóvel.
	 * 
	 * @author isilva
	 * @date 08/02/2011
	 * @param idImovel
	 * @param usuario
	 * @return
	 */
	public Integer efetuarSuprimirImovelEsgotoJudicial(Integer idImovel, Usuario usuario){

		try{
			return this.getControladorImovel().efetuarSuprimirImovelEsgotoJudicial(idImovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [FS0003] - Suprimido Judicialmente a Ligação de Esgoto de um Imóvel.
	 * 
	 * @author isilva
	 * @date 08/02/2011
	 * @param idImovel
	 * @param usuario
	 * @return
	 */
	public void efetuarReligacaoSuprimirImovelEsgotoJudicial(Integer idImovel, Usuario usuario){

		try{
			this.getControladorImovel().efetuarReligacaoSuprimirImovelEsgotoJudicial(idImovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Setor Abastecimento
	 * Inserir um Setor de Abastecimento
	 * 
	 * @author Péricles Tavares
	 * @date 07/02/2011
	 */
	public Integer inserirSetorAbastecimento(SetorAbastecimento setorAbastecimento, Usuario usuarioLogado){

		try{
			Integer id = (Integer) this.getControladorOperacional().inserirSetorAbastecimento(setorAbastecimento, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Atualizar Setor Abastecimento
	 * Atualizar um Setor de Abastecimento
	 * 
	 * @author Péricles Tavares
	 * @date 07/02/2011
	 */
	public void atualizarSetorAbastecimento(SetorAbastecimento setorAbastecimento, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().atualizarSetorAbastecimento(setorAbastecimento, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Remover Setor Abastecimento
	 * Remover um Setor de Abastecimento
	 * 
	 * @author Péricles Tavares
	 * @date 09/02/2011
	 */
	public void removerSetorAbastecimento(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorOperacional().removerSetorAbastecimento(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Ailton Sousa
	 * @date 11/02/2011
	 *       Pesquisa uma coleção de imóveis com uma query especifica
	 * @param idLocalidade
	 * @param idSetorComercial
	 * @param rota
	 * @param segmento
	 * @param lote
	 * @param sublote
	 * @return Description of the Return Value
	 * @exception ControladorException
	 */
	public Collection pesquisarImovel(Integer idLocalidade, Integer idSetorComercial, Integer idRota, Short segmento, Short lote,
					Short sublote){

		try{
			return this.getControladorImovel().pesquisarImovel(idLocalidade, idSetorComercial, idRota, segmento, lote, sublote);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0053] Inserir Dados Censitários
	 * Inserir Dados Censitários da Localidade
	 * 
	 * @author Anderson Italo
	 * @date 09/02/2011
	 */
	public Integer inserirLocalidadeDadosCensitario(LocalidadeDadosCensitario localidadeDadosCensitario, Usuario usuarioLogado){

		try{
			Integer id = (Integer) this.getControladorCadastro().inserirLocalidadeDadosCensitario(localidadeDadosCensitario, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0053] Inserir Dados Censitários
	 * Inserir Dados Censitários de Município
	 * 
	 * @author Anderson Italo
	 * @date 09/02/2011
	 */
	public Integer inserirMunicipioDadosCensitario(MunicipioDadosCensitario municipioDadosCensitario, Usuario usuarioLogado){

		try{
			Integer id = (Integer) this.getControladorCadastro().inserirMunicipioDadosCensitario(municipioDadosCensitario, usuarioLogado);
			return id;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Manter Dados Censitários
	 * [SB0002] - Excluir Dados Censitários
	 * 
	 * @author Anderson Italo
	 * @date 11/02/2011
	 */
	public void removerDadosCensitarios(String[] ids, Usuario usuarioLogado, boolean dadosLocalidade){

		try{
			this.getControladorCadastro().removerDadosCensitarios(ids, usuarioLogado, dadosLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Manter Dados censitários
	 * [SB0001] - Atualizar Dados Censitários de uma Localidade ou Município
	 * 
	 * @author Anderson Italo
	 * @date 14/02/2011
	 */
	public void atualizarDadosCensitarios(Object dadosCensitarios, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarDadosCensitarios(dadosCensitarios, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Ailton Sousa
	 * @date 16/02/2011
	 *       [UCXXXX] - Obter Consumo Mínimo da Ligação Por Categoria
	 * @param imovel
	 * @param colecaoCategorias
	 * @return HashMap
	 * @throws ControladorException
	 */
	public HashMap obterConsumoMinimoLigacaoPorCategoria(Imovel imovel, Collection colecaoCategorias){

		try{
			return getControladorMicromedicao().obterConsumoMinimoLigacaoPorCategoria(imovel, colecaoCategorias);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Inseri um objeto do tipo setor comercial no BD para o Cliente Deso
	 * 
	 * @author Ailton Sousa
	 * @date 18/02/2011
	 * @param setorComercial
	 * @param diasVencimento
	 * @return ID gerado
	 */
	public Integer inserirSetorComercialComDiasVencimento(SetorComercial setorComercial, String[] diasVencimento, Usuario usuarioLogado){

		try{

			return this.getControladorLocalidade().inserirSetorComercialComDiasVencimento(setorComercial, diasVencimento, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0XXX] Gerar Relatório Grandes Consumidores
	 * 
	 * @author Anderson Italo
	 * @date 15/02/2011
	 *       Obter dados dos Grandes Consumidores pelos parametros informados
	 */
	public Collection pesquisaRelatorioGrandesConsumidores(Integer idGerencia, Integer idLocalidadeInicial, Integer idLocalidadeFinal){

		try{
			return getControladorCadastro().pesquisaRelatorioGrandesConsumidores(idGerencia, idLocalidadeInicial, idLocalidadeFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Grandes Consumidores
	 * 
	 * @author Anderson Italo
	 * @date 16/02/2011
	 *       Obter média de consumo do hidrômetro por imóvel
	 */
	public Integer pesquisarMediaConsumoHidrometro(Integer matricula){

		try{
			Integer media = this.getControladorMicromedicao().pesquisarMediaConsumoHidrometro(matricula);
			return media;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Grandes Consumidores
	 * 
	 * @author Anderson Italo
	 * @date 18/02/2011
	 *       Obter total de registros do Relatório Grandes
	 *       Consumidores
	 */
	public Integer pesquisaTotalRegistrosRelatorioGrandesConsumidores(Integer idGerencia, Integer idLocalidadeInicial,
					Integer idLocalidadeFinal){

		try{
			return getControladorCadastro().pesquisaTotalRegistrosRelatorioGrandesConsumidores(idGerencia, idLocalidadeInicial,
							idLocalidadeFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3002] Inserir Mensagem Tipo Solicitação Especificação
	 * 
	 * @author Ailton Junior
	 * @date 23/02/2011
	 * @param solicitacaoTipoEspecificacaoMensagem
	 *            , usuarioLogado
	 * @return Integer
	 */
	public Integer inserirMensagemTipoSolicitacaoEspecificacao(SolicitacaoTipoEspecificacaoMensagem solicitacaoTipoEspecificacaoMensagem,
					Usuario usuarioLogado){

		try{
			return this.getControladorRegistroAtendimento().inserirMensagemTipoSolicitacaoEspecificacao(
							solicitacaoTipoEspecificacaoMensagem, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3003] Manter Mensagem Tipo Solicitação Especificacao
	 * 
	 * @author Ailton Junior
	 * @date 23/02/2011
	 * @param solicitacaoTipoEspecificacaoMensagem
	 *            , usuarioLogado
	 * @return Integer
	 */
	public void atualizarMensagemTipoSolicitacaoEspecificacao(SolicitacaoTipoEspecificacaoMensagem solicitacaoTipoEspecificacaoMensagem,
					Usuario usuarioLogado){

		try{
			this.getControladorRegistroAtendimento().atualizarMensagemTipoSolicitacaoEspecificacao(solicitacaoTipoEspecificacaoMensagem,
							usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3003] Manter Mensagem Tipo Solicitação Especificacao
	 * [SB0002]Excluir Mensagem Automática
	 * 
	 * @author Ailton Junior
	 * @date 23/02/2011
	 */
	public void removerMensagemTipoSolicitacaoEspecificacao(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorRegistroAtendimento().removerMensagemTipoSolicitacaoEspecificacao(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar se existe o vínculo entre a localidade e o munícipio
	 * 
	 * @author isilva
	 * @date 23/02/2011
	 * @param idLocalidade
	 * @param idMunicipio
	 * @return
	 * @throws ControladorException
	 */
	public boolean existeVinculoLocalidadeMunicipio(Integer idLocalidade, Integer idMunicipio){

		try{
			return getControladorRegistroAtendimento().existeVinculoLocalidadeMunicipio(idLocalidade, idMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Usuários em Débito Automático
	 * 
	 * @author Anderson Italo
	 * @date 24/02/2011 Obter dados dos Usuários com Débito Automático
	 */
	public Collection pesquisaRelatorioUsuarioDebitoAutomatico(Integer idBancoInicial, Integer idBancoFinal){

		try{
			return getControladorCadastro().pesquisaRelatorioUsuarioDebitoAutomatico(idBancoInicial, idBancoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Usuários em Débito Automático
	 * 
	 * @author Anderson Italo
	 * @date 24/02/2011 Obter Total de Registros do Relatório Usuários com
	 *       Débito Automático
	 */
	public Integer pesquisarTotalRegistrosRelatorioUsuarioDebitoAutomatico(Integer idBancoInicial, Integer idBancoFinal){

		try{
			return getControladorCadastro().pesquisarTotalRegistrosRelatorioUsuarioDebitoAutomatico(idBancoInicial, idBancoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Consumo por Faixa de Área e Categoria
	 * 
	 * @author Ailton Sousa
	 * @date 01/03/2011
	 */
	public int inserirConsumoFaixaAreaCategoria(ConsumoFaixaAreaCategoria consumoFaixaAreaCategoria, Usuario usuarioLogado){

		try{
			return this.getControladorCadastro().inserirConsumoFaixaAreaCategoria(consumoFaixaAreaCategoria, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3006] Manter Consumo por Faixa de Área e Categoria [SB0001] Atualizar Consumo por Faixa de
	 * Área e Categoria
	 * 
	 * @author Ailton Sousa
	 * @date 02/03/2011
	 * @throws ErroRepositorioException
	 */
	public void atualizarConsumoFaixaAreaCategoria(ConsumoFaixaAreaCategoria consumoFaixaAreaCategoria, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().atualizarConsumoFaixaAreaCategoria(consumoFaixaAreaCategoria, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3006] Manter Consumo por Faixa de Área e Categoria [SB0002] Remover Consumo por Faixa de
	 * Área e Categoria
	 * 
	 * @author Ailton Sousa
	 * @date 02/03/2011
	 */
	public void removerConsumoFaixaAreaCategoria(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorCadastro().removerConsumoFaixaAreaCategoria(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica os Dados Solicitantes de Rg, Cpf e Cnpj
	 * 
	 * @author Péricles Tavares
	 * @created 17/03/2011
	 * @param tipoCliente
	 * @param tipoSolicitacao
	 * @param numeroCpf
	 * @param numeroRg
	 * @param orgaoExpedidorRg
	 * @param unidadeFederacaoRG
	 * @param numeroCnpj
	 * @throws ControladorException
	 */
	public void verificarDadosSolicitanteRgCpfCnpj(String tipoCliente, String solicitacaoTipoEspecificacaoId, String numeroCpf,
					String numeroRg, String orgaoExpedidorRg, String unidadeFederacaoRG, String numeroCnpj){

		try{
			this.getControladorRegistroAtendimento().verificarDadosSolicitanteRgCpfCnpj(tipoCliente, solicitacaoTipoEspecificacaoId,
							numeroCpf, numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void verificarDadosSolicitanteRgCpfCnpj(String tipoCliente, String solicitacaoTipoEspecificacaoId, String numeroCpf,
					String numeroRg, String orgaoExpedidorRg, String unidadeFederacaoRG, String numeroCnpj, String idCliente){

		try{
			this.getControladorRegistroAtendimento().verificarDadosSolicitanteRgCpfCnpj(tipoCliente, solicitacaoTipoEspecificacaoId,
							numeroCpf, numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj, idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Resumo de Registro de Atendimento
	 * Obter dados do Relatório Resumo de Registro de Atendimento pelos
	 * parametros informados no filtro
	 * 
	 * @author Anderson Italo
	 * @date 15/03/2011
	 */
	public Collection pesquisaRelatorioResumoRA(FiltrarRegistroAtendimentoHelper filtroRA, int tipoAgrupamento){

		try{
			return getControladorRegistroAtendimento().pesquisaRelatorioResumoRA(filtroRA, tipoAgrupamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Estatistica Atendimento por Atendente
	 * Obter dados do Relatório Estatistica Atendimento por Atendente pelos parametros informados no
	 * filtro
	 * 
	 * @author isilva
	 * @date 24/03/2011
	 */
	public Collection pesquisaRelatorioEstatisticaAtendimentoPorAtendente(FiltrarRegistroAtendimentoHelper filtroRA){

		try{
			return getControladorRegistroAtendimento().pesquisaRelatorioEstatisticaAtendimentoPorAtendente(filtroRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Gestão de Registro de Atendimento
	 * Obter dados do Relatório de Gestão de Registro de Atendimento pelos
	 * parametros informados no filtro
	 * 
	 * @author Anderson Italo
	 * @param tipoRelatorio
	 *            (0 == Sintético e 1 == Analítico),
	 *            FiltrarRegistroAtendimentoHelper filtroRA
	 * @date 28/03/2011
	 */
	public Collection pesquisaRelatorioGestaoRA(FiltrarRegistroAtendimentoHelper filtroRA, int tipoRelatorio){

		try{
			return getControladorRegistroAtendimento().pesquisaRelatorioGestaoRA(filtroRA, tipoRelatorio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UCXXXX] Inserir Trâmite por Especificação
	 * 
	 * @author Ailton Sousa
	 * @date 04/04/2011
	 * @param colecaoTramiteEspecificacao
	 *            , usuarioLogado
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer inserirTramiteEspecificacao(Collection colecaoTramiteEspecificacao, Usuario usuarioLogado){

		try{
			return this.getControladorRegistroAtendimento().inserirTramiteEspecificacao(colecaoTramiteEspecificacao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Remover Trâmite Especificação
	 * 
	 * @author Hebert Falcão
	 * @date 01/04/2011
	 */
	public void removerTramiteEspecificacao(String[] ids){

		try{
			this.getControladorRegistroAtendimento().removerTramiteEspecificacao(ids);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Trâmite Especificação
	 * 
	 * @author Hebert Falcão
	 * @date 01/04/2011
	 */
	public void atualizarTramiteEspecificacao(EspecificacaoTramite especificacaoTramite){

		try{
			this.getControladorRegistroAtendimento().atualizarTramiteEspecificacao(especificacaoTramite);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Unidade Organizacional
	 * 
	 * @author Hebert Falcão
	 * @date 14/04/2011
	 */
	public void removerUnidadeOrganizacional(String[] ids, Usuario usuario){

		try{
			this.getControladorUnidade().removerUnidadeOrganizacional(ids, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Boletim de Cadastro
	 * 
	 * @author Anderson Italo
	 * @date 25/04/2011
	 *       Obter Total dos Imóveis pelos parametros informados
	 */
	public Integer pesquisarTotalRegistrosRelatorioBoletimCadastro(FiltrarRelatorioBoletimCadastroHelper filtro){

		try{
			return getControladorImovel().pesquisarTotalRegistrosRelatorioBoletimCadastro(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Unidades de Destino por EspecificacaoTramite
	 * 
	 * @author isilva
	 * @date 13/04/2011
	 * @param especificacaoTramite
	 * @return
	 * @throws ControladorException
	 */
	public Collection<UnidadeOrganizacional> obterUnidadeDestinoPorEspecificacao(EspecificacaoTramite especificacaoTramite,
					boolean checarIndicadorPrimeiroTramite){

		try{
			return this.getControladorRegistroAtendimento().obterUnidadeDestinoPorEspecificacao(especificacaoTramite,
							checarIndicadorPrimeiroTramite);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * retorna as Resolucões da Diretoria com data Vigência maior
	 * ou igual que a data atual
	 * [UC0643] Inserir Ação de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 08/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaDataVigenciaFimMaiorIgualDataAtual(){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaDataVigenciaFimMaiorIgualDataAtual();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0645] Manter Ação de Cobrança
	 * [SB0002] - Remover Ação de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 11/03/2011
	 * @throws ControladorException
	 */
	public void removerAcaoCobranca(String[] selecaoCobrancaAcao, Usuario usuario){

		try{

			this.getControladorCobranca().removerAcaoCobranca(selecaoCobrancaAcao, usuario);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obterm o Funcionário que executou a operação em conta
	 * 
	 * @author isilva
	 * @date 02/05/2011
	 * @param idConta
	 * @param tipo
	 * @return
	 */
	public Funcionario obterFuncionarioExecutouOperacaoEmConta(Integer idConta, String tipo){

		try{
			return (Funcionario) this.getControladorImovel().obterFuncionarioExecutouOperacaoEmConta(idConta, tipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @date 04/05/2011
	 * @param idsRegistrosRemocao
	 */
	public void removerSolicitacaoTipoEDependencias(String[] idsRegistrosRemocao){

		try{
			this.getControladorRegistroAtendimento().removerSolicitacaoTipoEDependencias(idsRegistrosRemocao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0204]
	 * 
	 * @author Hebert Falcão
	 * @date 20/05/2011
	 */
	public Collection<ClienteConta> pesquisarClientesContaPeloImovelEConta(Integer idImovel, Integer idConta){

		try{
			return this.getControladorCliente().pesquisarClientesContaPeloImovelEConta(idImovel, idConta);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Obtem o Bairro pelo id do imóvel (se informado), caso não informado o id do imóvel ou não
	 * encontrado bairro para aquele imóvel, então procura o bairro pelo id do RA
	 * 
	 * @author isilva
	 * @param idImovel
	 * @param idRegistroAtendimento
	 * @return
	 */
	public Bairro obterBairroPorImovelOuRA(Integer idImovel, Integer idRegistroAtendimento){

		Bairro retorno = null;
		try{
			retorno = this.getControladorEndereco().obterBairroPorImovelOuRA(idImovel, idRegistroAtendimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * @author isilva
	 * @date 23/05/2011
	 *       Obtem as últimas referências dos Dados de Leitura e Consumo do imóvel
	 * @param idImovel
	 *            Identificador do Imóvel
	 * @param maximoResultado
	 *            Resultado máximo, se informado null ou um número menor ou igual a zero, a consulta
	 *            retornará quantidades de linhas ilimitadas
	 * @return
	 * @throws ControladorException
	 */
	public Collection<LeituraConsumoHelper> obterDadosLeituraEConsumo(Integer idImovel, Integer maximoResultado)
					throws ControladorException{

		try{
			return this.getControladorMicromedicao().obterDadosLeituraEConsumo(idImovel, maximoResultado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @date 18/05/2011
	 * @param idsOrdemServico
	 * @return
	 */
	public Collection<OSRelatorioPadraoComOcorrenciaHelper> pesquisarOSRelatorioPadraoComOcorrencia(Collection idsOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarOSRelatorioPadraoComOcorrencia(idsOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @date 24/05/2011
	 * @param idsOrdemServico
	 * @return
	 */
	public Collection<OSRelatorioEstruturaHelper> pesquisarOSRelatorioEstruturaCabecalho(Collection idsOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarOSRelatorioEstruturaCabecalho(idsOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author isilva
	 * @date 24/05/2011
	 *       Obtem Dados do último corte
	 * @param idImovel
	 *            Identificador do Imóvel
	 * @return
	 */
	public DadosUltimoCorteHelper obterDadosUltimoCorte(Integer idImovel){

		try{
			return this.getControladorLigacaoAgua().obterDadosUltimoCorte(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o cliente proprietario apartir do id do imovel
	 * 
	 * @author Hebert Falcão
	 * @date 26/05/2011
	 */
	public Cliente retornarDadosClienteProprietario(Integer idImovel){

		try{
			return this.getControladorCliente().retornarDadosClienteProprietario(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Resumo de Ordem de Serviço Encerradas
	 * Obter dados para gerar Relatório Resumo de Ordem de Serviço Encerradas
	 * 
	 * @author Anderson Italo
	 * @date 13/05/2011
	 */
	public Collection pesquisaRelatorioResumoOsEncerradas(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return getControladorOrdemServico().pesquisaRelatorioResumoOsEncerradas(origemServico, situacaoOS, idsServicosTipos,
							idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Resumo de Ordem de Serviço Encerradas
	 * Obter total de registros do Relatório Resumo de Ordem de Serviço Encerradas
	 * 
	 * @author Anderson Italo
	 * @date 13/05/2011
	 */
	public Integer pesquisaTotalRegistrosRelatorioResumoOsEncerradas(String origemServico, String situacaoOS, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal,
					String idEquipeProgramacao, String idEquipeExecucao, String idLocalidade){

		try{
			return getControladorOrdemServico().pesquisaTotalRegistrosRelatorioResumoOsEncerradas(origemServico, situacaoOS,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idEquipeProgramacao,
							idEquipeExecucao, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Medição Histório para Substituição de Leitura
	 * [UC3009] - Substituir Leituras Anteriores
	 * 
	 * @author Hebert Falcão
	 * @date 09/06/2011
	 */
	public Collection<MedicaoHistorico> pesquisaMedicaoHistoricoSubstituirLeitura(Integer idImovel){

		try{
			return this.getControladorMicromedicao().pesquisaMedicaoHistoricoSubstituirLeitura(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atualizar Leituras Anteriores
	 * [UC3009] - Substituir Leituras Anteriores
	 * 
	 * @author Hebert Falcão
	 * @date 09/06/2011
	 */
	public void atualizarLeiturasAnteriores(MedicaoHistorico medicaoHistorico, Usuario usuarioLogado, Integer consumoMedio){

		try{
			this.getControladorMicromedicao().atualizarLeiturasAnteriores(medicaoHistorico, usuarioLogado, consumoMedio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Isaac Silva
	 * @date 10/06/2011
	 * @param colecaoImovelMicromedicao
	 * @param usuarioLogado
	 */
	public void atualizarConsumosAnterioresEConsumosMedio(Collection colecaoImovelMicromedicao, Usuario usuarioLogado,
					boolean atualizarConsumoMedio){

		try{
			this.getControladorMicromedicao().atualizarConsumosAnterioresEConsumosMedio(colecaoImovelMicromedicao, usuarioLogado,
							atualizarConsumoMedio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa o endereco completo da OS
	 * 
	 * @author Anderon Italo
	 * @date 08/06/2011
	 * @param idOrdemServico
	 * @return String
	 * @throws ControladorException
	 */
	public String obterEnderecoCompletoOS(Integer idOrdemServico){

		try{
			return getControladorOrdemServico().obterEnderecoCompletoOS(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC1015] Relatório Ordens de Serviço Pendentes
	 * Obter dados para geração relatório.
	 * 
	 * @author Anderson Italo
	 * @date 08/06/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioResumoOrdensServicoPendentesHelper> pesquisaRelatorioResumoOSPendentes(
					FiltrarRelatorioResumoOrdensServicoPendentesHelper filtro){

		try{
			return getControladorOrdemServico().pesquisaRelatorioResumoOSPendentes(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC1015] Relatório Ordens de Serviço Pendentes
	 * Obtém o total de registros do relatório.
	 * 
	 * @author Anderson Italo
	 * @date 08/06/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRegistrosRelatorioResumoOSPendentes(FiltrarRelatorioResumoOrdensServicoPendentesHelper filtro){

		try{
			return getControladorOrdemServico().pesquisarTotalRegistrosRelatorioResumoOSPendentes(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC1015] Relatório Ordens de Serviço Pendentes
	 * Obtém dados do hidrômeto por imóvel
	 * 
	 * @author Anderson Italo
	 * @date 08/06/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public HidrometroRelatorioOSHelper obterDadosHidrometroPorImovel(Integer idImovel){

		try{
			return this.getControladorMicromedicao().obterDadosHidrometroPorImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Inserir o cep
	 * 
	 * @param codigo
	 * @param sigla
	 * @param municipio
	 * @param bairro
	 * @param logradouro
	 * @param descricaoTipoLogradouro
	 * @return id da entidade inserida
	 * @throws ControladorException
	 */
	public Integer inserirCep(Integer codigo, String sigla, String municipio, String bairro, String logradouro,
					String descricaoTipoLogradouro){

		try{
			return getControladorEndereco().inserirCep(codigo, sigla, municipio, bairro, logradouro, descricaoTipoLogradouro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório Boletim de Cadastro
	 * Obter Total dos Imóveis pelos parametros informados
	 * 
	 * @date 14/06/2011
	 */
	public Integer pesquisarTotalRegistrosRelatorioImovelEndereco(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, String rotaInicial,
					String rotaFinal, String sequencialRotaInicial, String sequencialRotaFinal, String segmentoInicial,
					String segmentoFinal, String subloteInicial, String subloteFinal, String consumoFixadoEsgotoPocoInicial,
					String consumoFixadoEsgotoPocoFinal){

		try{

			return getControladorImovel().pesquisarTotalRegistrosRelatorioImovelEndereco(idImovelCondominio, idImovelPrincipal,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria,
							idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, rotaInicial, rotaFinal, sequencialRotaInicial, sequencialRotaFinal,
							segmentoInicial, segmentoFinal, subloteInicial, subloteFinal, consumoFixadoEsgotoPocoInicial,
							consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public boolean verificarExistenciaOSProgramada(Integer idOS){

		try{
			return getControladorOrdemServico().verificarExistenciaOSProgramada(idOS);
		}catch(ControladorException cex){
			throw new FachadaException(cex.getMessage(), cex, cex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se o imovel e/ou o cliente possuem débitos
	 * 
	 * @author Isaac Silva
	 * @date 20/06/2011
	 * @param idSolicitacaoTipoEspecificacao
	 * @param idImovel
	 */
	public void verificarDebitosImovelCliente(Integer idSolicitacaoTipoEspecificacao, Integer idImovel, Integer idCliente){

		try{

			this.getControladorRegistroAtendimento().verificarDebitosImovelCliente(idSolicitacaoTipoEspecificacao, idImovel, idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @return
	 */
	public Integer obterSequenceInfracaoPerfil(){

		Integer retorno;
		try{
			retorno = getControladorCobranca().obterSequenceInfracaoPerfil();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
		return retorno;

	}

	public void inserirInfracaoPerfil(Collection colecaoInfracaoPerfil, Map mapInfracaoPerfilDebitoTipo){

		try{
			getControladorCobranca().inserirInfracaoPerfil(colecaoInfracaoPerfil, mapInfracaoPerfilDebitoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void removerInfracaoPerfil(String[] ids, Usuario usuarioLogado){

		try{
			getControladorCobranca().removerInfracaoPerfil(ids, usuarioLogado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	public void atualizarInfracaoDebitoTipo(Collection colecaoDebitoTipo, Collection remocao, Collection inserir){

		try{
			getControladorCobranca().atualizarInfracaoDebitoTipo(colecaoDebitoTipo, remocao, inserir);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Permite inserir os Dados para o processo de Encerramento de O.S
	 * 
	 * @author Ailton Sousa
	 * @date 13/05/2011
	 */
	public Collection<OcorrenciaInfracaoItem> inserirOcorrenciaInfracao(OcorrenciaInfracao ocorrenciaInfracao, Integer[] infracaoTipo){

		try{
			return this.getControladorOrdemServico().inserirOcorrenciaInfracao(ocorrenciaInfracao, infracaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer excluirNegativacaoOnLineEmLote(Collection collImovel, Integer idNegativador, Usuario usuarioLogado){

		try{
			return getControladorSpcSerasa().excluirNegativacaoOnLineEmLote(collImovel, idNegativador, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Boolean verificaNegativacaoImovel(Integer idImovel){

		try{
			return getControladorSpcSerasa().verificaNegativacaoImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0591] - Gerar Relatório de Clientes Especiais
	 * Pesquisa Total de Registros de acordo com os parâmetros da pesquisa
	 * 
	 * @author Anderson Italo
	 * @date 11/07/2011
	 */
	public Integer pesquisarTotalRegistrosRelatorioClientesEspeciais(FiltrarRelatorioClientesEspeciaisHelper filtro){

		try{

			return getControladorImovel().pesquisarTotalRegistrosRelatorioClientesEspeciais(filtro);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Recupera uma OrdemServicoProgramacao
	 * 
	 * @author Hebert Falcão
	 * @date 19/07/2011
	 * @return OrdemServicoProgramacao
	 */
	public OrdemServicoProgramacao pesquisarOrdemServicoProgramacao(Integer idUnidadeOrganizacional, Integer idOrdemServico,
					Integer idEquipe, Date dataRoteiro){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoProgramacao(idUnidadeOrganizacional, idOrdemServico, idEquipe,
							dataRoteiro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Alterar o valor da Data de Leitura do Hidrômetro no Retificar/Calcular/Simular Conta.
	 * 
	 * @author Ailton Sousa
	 * @date 22/07/2011
	 * @param usuario
	 */
	public boolean verificarPermissaoAlterarDataLeituraManterHidrometro(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoAlterarDataLeituraManterHidrometro(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param imovel
	 * @param situacao
	 */
	public Date buscarDataLeituraCronograma(Integer grupoFaturamentoID, boolean situacao, Integer anoMesReferencia){

		try{
			Date retorno = this.getControladorFaturamento().buscarDataLeituraCronograma(grupoFaturamentoID, situacao, anoMesReferencia);
			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica Limites de Anormalidades Aceitavel para a empresa.
	 * 
	 * @author Péricles Tavares
	 * @date 02/08/2011
	 * @param idFaturamentoGrupo
	 * @throws FachadaException
	 */
	public Map<ControladorException, Collection<Object[]>> verificarLimiteAnormalidadesAceitavel(Integer idFaturamentoGrupo){

		try{
			return this.getControladorMicromedicao().verificarLimiteAnormalidadesAceitavel(idFaturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0619] Gerar Relação de Acompanhamento dos Movimentos Arrecadadores por
	 * NSA
	 * 
	 * @author Ana Maria
	 * @date 12/07/2007
	 * @param idMovimentoArrecadador
	 * @return
	 */
	public Collection consultarDadosRelatorioControleDocumentosArrecadacaoAnalitico(int anoMesReferencia, Integer idArrecadador,
					Integer idArrecadacaoForma){

		try{
			return this.getControladorArrecadacao().consultarDadosRelatorioControleDocumentosArrecadacaoAnalitico(anoMesReferencia,
							idArrecadador, idArrecadacaoForma);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void inserirParametroSistemaValor(ParametroSistemaValor paramValor, Usuario usuarioLogado){

		try{
			getControladorParametroSistema().inserirParametroSistemaValor(paramValor, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void excluirParametroSistemaValor(ParametroSistemaValor paramValor, Usuario usuarioLogado){

		try{
			getControladorParametroSistema().excluirParametroSistemaValor(paramValor, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public List<ParametroSistemaValor> obterParametroSistemaValor(ParametroSistema paramSist){

		try{
			return getControladorParametroSistema().obterParametroSistemaValor(paramSist);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @autor Victon Malcolm Rodrigues dos Santos
	 * @date 20/05/2013
	 * @param paramValor
	 * @param usuarioLogado
	 * @return
	 * @exception ControladorException
	 */
	public void atualizarParametroSistemaValor(ParametroSistemaValor paramValor, Usuario usuarioLogado){

		try{
			getControladorParametroSistema().atualizarParametroSistemaValor(paramValor, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @autor Bruno Ferreira dos Santos
	 * @date 15/08/2011
	 * @param idTipoEspecificacaoSolicitacao
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterQuantidadeRAEncerradaAnoCorrentePorTipoSolicitacaoEspecificacao(Integer idTipoEspecificacaoSolicitacao,
					Integer idImovel){

		try{
			return getControladorFaturamento().obterQuantidadeRAEncerradaAnoCorrentePorTipoSolicitacaoEspecificacao(
							idTipoEspecificacaoSolicitacao, idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	public void processarArquivoLeituraAnormalidades(Integer idFaturamentoGrupo, File arquivoLeitura, Usuario usuario){

		try{

			Object[] parametros = new Object[3];
			parametros[0] = idFaturamentoGrupo;
			parametros[1] = arquivoLeitura;
			parametros[2] = usuario;

			this.getControladorBatch().iniciarProcesso(Funcionalidade.INFORMAR_DADOS_LEITURA_E_ANORMALIDADE, parametros);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Método responsável por consultar os lancamentos contabeis sintetico atraves so filtro passado
	 * na tela
	 * 
	 * @author Genival Barbosa
	 * @date 06/07/2011
	 */
	public Collection<LancamentoContabilSinteticoConsultaHelper> consultarLancamentoContabilSintetico(Map<String, Object> filtro){

		try{

			return getControladorContabil().consultarLancamentoContabilSintetico(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por obter o eventoComercial através do id
	 * 
	 * @author Genival Barbosa
	 * @date 11/08/2011
	 */
	public EventoComercial obterEventoComercial(Integer id){

		try{
			return getControladorContabil().obterEventoComercial(id);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por consultar e montar os LancamentoContabilAnaliticoConsultaHelper
	 * 
	 * @param lancamentoContabilSintetico
	 *            o filtro de pesquisa
	 * @return os LancamentoContabilAnaliticoConsultaHelper
	 * @throws ErroRepositorioException
	 */
	public Collection<LancamentoContabilAnaliticoConsultaHelper> consultarLancamentoContabilAnaliticoPorSintetico(
					LancamentoContabilSintetico lancamentoContabilSintetico) throws ControladorException{

		try{
			return getControladorContabil().consultarLancamentoContabilAnaliticoPorSintetico(lancamentoContabilSintetico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void verificarBloqueioFuncionalidadeMotivoRetificacaoRevisao(Collection idsConta, Usuario usuarioLogado,
					boolean validarPermissaoEspecialNoventa, boolean criticarContasEmRevisaoMotivosNaoParametrizados, String enderecoURL){

		try{
			this.getControladorFaturamento().verificarBloqueioFuncionalidadeMotivoRetificacaoRevisao(idsConta, usuarioLogado,
							validarPermissaoEspecialNoventa, criticarContasEmRevisaoMotivosNaoParametrizados, enderecoURL);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [FS0019] - Verificar existência de negativação para o cliente-imóvel
	 * Caso o cliente do imóvel esteja em processo de negativação (existe ocorrência na tabela
	 * NEGATIVADOR_MOVIMENTO_REG com IMOV_ID=Id do imóvel informado e CLIE_ID=Id do cliente
	 * selecionado para remoção e NMRG_ICACEITO com o valor 1 ou nulo e NMRG_CDEXCLUSAOTIPO com o
	 * valor nulo e NMRG_IDREGINCLUSAO com o valor nulo), exibir a mensagem “ATENÇÃO: O cliente
	 * <<CLIE_NMCLIENTE com CLIE_ID=Id do cliente selecionado para remoção>>, vinculado ao imóvel
	 * <<IMOV_ID>>.
	 * 
	 * @author Isaac Silva
	 * @date 03/08/2011
	 * @param idImovel
	 * @param idCliente
	 * @return
	 */
	public boolean verificarExistenciaNegativacaClienteImovel(Integer idImovel, Integer idCliente){

		try{
			return this.getControladorSpcSerasa().verificarExistenciaNegativacaClienteImovel(idImovel, idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @autor Cinthya Cavalcanti
	 * @date 13/09/2011
	 * @param consumoFaturadoAgua
	 * @param consumoMinimoLigacao
	 * @param consumoFaturadoEsgoto
	 * @param qtdEconnomia
	 * @return Map<String, String>
	 */
	public Map<String, String> ajusteConsumoMultiploQuantidadeEconomia(Integer consumoFaturadoAgua, int consumoMinimoLigacao,
					Integer consumoFaturadoEsgoto, Integer qtdEconnomia){

		try{
			return this.getControladorFaturamento().ajusteConsumoMultiploQuantidadeEconomia(consumoFaturadoAgua, consumoMinimoLigacao,
							consumoFaturadoEsgoto, qtdEconnomia);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @date 26/09/2011
	 * @param imovelId
	 * @return
	 */
	public Collection pesquisarAcrescimoImpontualidade(Integer imovelId){

		try{
			return this.getControladorArrecadacao().pesquisarAcrescimoImpontualidade(imovelId);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<BoletoBancario> pesquisarBoletoBancario(BoletoBancarioHelper boletoBancarioHelper,
					boolean verificarNumeroBoletoCartaCobranca, boolean desconsiderarParametros, boolean verificarDocumentoCobranca,
					int pageOffset){

		try{
			return this.getControladorCobranca().pesquisarBoletoBancario(boletoBancarioHelper, verificarNumeroBoletoCartaCobranca,
							desconsiderarParametros, verificarDocumentoCobranca, pageOffset);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @author Isaac Silva
	 * @date 15/09/2011
	 * @param codigoSetorComercial
	 * @param idLocalidade
	 * @return
	 */
	public Collection<FaturamentoGrupo> pesquisarFaturamentoGrupoPorCodigoSetorComercialELocalidade(Integer codigoSetorComercial,
					Integer idLocalidade){

		try{
			return getControladorFaturamento().pesquisarFaturamentoGrupoPorCodigoSetorComercialELocalidade(codigoSetorComercial,
							idLocalidade);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0088] - Registrar Faturamento Imediato
	 * 
	 * @author Ailton Sousa
	 * @date 04/10/2011
	 * @param colecaoRotas
	 * @param faturamentoGrupo
	 * @param anoMesCorrente
	 * @param atividade
	 */
	public void registrarFaturamentoImediatoGrupoFaturamento(Collection<Rota> colecaoRotas, FaturamentoGrupo faturamentoGrupo,
					Integer anoMesCorrente, Integer atividade){

		this.enviarMensagemControladorBatch(MetodosBatch.REGISTRAR_FATURAMENTO_IMEDIATO, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {colecaoRotas, anoMesCorrente, faturamentoGrupo, atividade});

	}

	/**
	 * Retorna o Objeto FaturamentoGrupo pelo ID pesquisado.
	 * 
	 * @author Ailton Sousa
	 * @date 04/10/2011
	 * @param idFaturamentoGrupo
	 * @return
	 * @throws ErroRepositorioException
	 */
	public FaturamentoGrupo pesquisarFaturamentoGrupoPorID(Integer idFaturamentoGrupo){

		try{
			return this.getControladorFaturamento().pesquisarFaturamentoGrupoPorID(idFaturamentoGrupo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3018] Gerar TXT Cartas Cobrança Bancária.
	 * Método que vai gerar o arquivo TXT com as cartas que serão enviadas com o aviso de cobrança.
	 * 
	 * @author Ailton Sousa
	 * @date 12/10/2011
	 * @param idComandoCobranca
	 * @throws ControladorException
	 */
	public void gerarTXTCartasCobrancaBancaria(Integer idComandoCobranca, Usuario usuario){

		try{
			this.getControladorCobranca().gerarTXTCartasCobrancaBancaria(idComandoCobranca, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0148] - Colocar Conta em Revisão
	 * [FS0016] - Verificar contas que estejam em revisão
	 * 
	 * @author Anderson Italo
	 * @date 18/10/2011
	 * @throws ControladorException
	 */
	public void verificarContasRevisao(Collection<Conta> colecaoContas, String idsContasSelecionadas){

		try{

			this.getControladorFaturamento().verificarContasRevisao(colecaoContas, idsContasSelecionadas);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void iniciarProcessoRelatorio(TarefaRelatorio tarefaRelatorio){

		try{
			getControladorBatch().iniciarProcessoRelatorio(tarefaRelatorio);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [SB0001] – Validar Imóveis para Exclusão da Negativação ([UC0675] Excluir Negativação OnLine)
	 * 
	 * @author Genival Barbosa
	 * @date 18/10/2011
	 * @param colecaoImoveis
	 */
	public Map<String, Collection<Integer>> validarImoveisExclusaoNegativacao(Collection<Integer> colecaoImoveis, Integer idNegativador){

		try{
			return this.getControladorSpcSerasa().validarImoveisExclusaoNegativacao(colecaoImoveis, idNegativador);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Map<Banco, Collection> pesquisaCobrancaBancariaMovimento(Integer anoMesReferencia){

		try{
			return this.getControladorCobranca().pesquisaCobrancaBancariaMovimento(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3020]-Gerar Movimento Cob. Bancária para Envio ao Banco.
	 * [SB0001] - Gerar Movimento para cobrança bancária
	 * 
	 * @author Yara Souza
	 * @date 16/10/2011
	 */

	public void gerarMovimentoCobrancaBancaria(Map<Banco, Collection> boletoBancarioMovimentacaoBancosMap, Usuario usuario){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_MOVIMENTO_COBRANCA_BANCARIA, ConstantesJNDI.QUEUE_CONTROLADOR_COBRANCA_MDB,
						new Object[] {boletoBancarioMovimentacaoBancosMap, usuario});
	}

	/**
	 * [UC3020]-Gerar Movimento Cob. Bancária para Envio ao Banco.
	 * [SB0001] - Gerar Movimento para cobrança bancária
	 * 
	 * @author Yara Souza
	 * @date 16/10/2011
	 */
	public void regerarArquivoTxtMovimentoCobrancaBancaria(ArrecadadorMovimento arrecadadorMovimento, String enviaBanco, Usuario usuario){

		this.enviarMensagemControladorBatch(MetodosBatch.REGERAR_MOVIMENTO_COBRANCA_BANCARIA,
						ConstantesJNDI.QUEUE_CONTROLADOR_COBRANCA_MDB, new Object[] {arrecadadorMovimento, enviaBanco, usuario});

	}

	/**
	 * Pesquisar Quantidade de Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeBoletoBancario(BoletoBancarioHelper boletoBancarioHelper, boolean verificarNumeroBoletoCartaCobranca,
					boolean desconsiderarParametros, boolean verificarDocumentoCobranca){

		try{
			return this.getControladorCobranca().pesquisarQuantidadeBoletoBancario(boletoBancarioHelper,
							verificarNumeroBoletoCartaCobranca, desconsiderarParametros, verificarDocumentoCobranca);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Boleto Bancário pelo Id
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public BoletoBancario pesquisarBoletoBancarioPeloId(Integer id){

		try{
			return this.getControladorCobranca().pesquisarBoletoBancarioPeloId(id);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [SB0001] Atualizar Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public void atualizarBoletoBancario(BoletoBancario boletoBancario, Integer idBoletoBancarioLancamentoEnvio, Date dataVencimentoTitulo,
					Usuario usuarioLogado){

		try{
			this.getControladorCobranca().atualizarBoletoBancario(boletoBancario, idBoletoBancarioLancamentoEnvio, dataVencimentoTitulo,
							usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Quantidade de Movimentação Pendente ou sem Retorno
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeMovimentacaoPendenteOuSemRetorno(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().pesquisarQuantidadeMovimentacaoPendenteOuSemRetorno(idBoletoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [SB0002] Cancelar Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public void cancelarBoletoBancario(Integer idMotivoCancelamento, String[] idRegistrosCancelamento, Usuario usuario){

		try{
			this.getControladorCobranca().cancelarBoletoBancario(idMotivoCancelamento, idRegistrosCancelamento, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisar Guia de pagamento Prestação pelo Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoBoleto(Integer guiaPagamentoId, Integer numeroPrestacao){

		try{
			return this.getControladorCobranca().pesquisarGuiasPagamentoPrestacaoBoleto(guiaPagamentoId, numeroPrestacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Contas Pelo Boleo Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<BoletoBancarioContaHelper> pesquisarContasPeloBoletoBancario(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().pesquisarContasPeloBoletoBancario(idBoletoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Conteúdo do Arrecadador Movimento Ítem pelo Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public String pesquisarConteudoArrecadadorMovimentoItem(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().pesquisarConteudoArrecadadorMovimentoItem(idBoletoBancario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Boleto Bancário Totalizador
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<BoletoBancarioTotalizadorHelper> pesquisarBoletoBancarioTotalizadorPorImovel(
					BoletoBancarioHelper boletoBancarioHelper, boolean desconsiderarParametros, boolean verificarDocumentoCobranca,
					boolean verificarNumeroBoletoCartaCobranca, int pageOffset){

		try{
			return this.getControladorCobranca().pesquisarBoletoBancarioTotalizadorPorImovel(boletoBancarioHelper, desconsiderarParametros,
							verificarDocumentoCobranca, verificarNumeroBoletoCartaCobranca, pageOffset);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] - Manter Conta
	 * [FS0021] – Verificar situação da conta
	 * 
	 * @author ysouza
	 * @date 08/11/2011
	 */
	public boolean verificarSituacaoContaPermitida(Conta conta){

		try{

			return this.getControladorFaturamento().verificarSituacaoContaPermitida(conta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<ResolucaoDiretoria> consultarResolucaoDiretoriaGrupo(ResolucaoDiretoriaGrupoHelper resolucaoDiretoriaGrupoHelper,
					int pageOffset){

		try{
			return this.getControladorCobranca().consultarResolucaoDiretoriaGrupo(resolucaoDiretoriaGrupoHelper, pageOffset);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter Cobrança Negociação Atendimento
	 * 
	 * @author Hebert Falcão
	 * @date 25/11/2011
	 */
	public CobrancaNegociacaoAtendimento obterCobrancaNegociacaoAtendimento(Integer idCobrancaDocumento){

		try{
			return this.getControladorCobranca().obterCobrancaNegociacaoAtendimento(idCobrancaDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Re-enviar documento de negociação atendimento
	 * 
	 * @author Hebert Falcão
	 * @date 25/11/2011
	 */
	public void reEnviarDocumentoNegociacaoAtendimento(String idCobrancaNegociacaoAtendimento, String emailNegociacao){

		try{
			this.getControladorCobranca().reEnviarDocumentoNegociacaoAtendimento(idCobrancaNegociacaoAtendimento, emailNegociacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método extraído da classe GerarRelatorioExtratoDebitoAction
	 */
	public RelatorioExtratoDebito obterRelatorioExtratoDebito(ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper, Imovel imovel,
					BigDecimal valorDebitosACobrar, BigDecimal valorAcrescimosImpontualidade, BigDecimal valorCreditos,
					BigDecimal valorDesconto, BigDecimal valorDocumento, Usuario usuario, String inscricao, String nomeUsuario,
					String matricula, String enderecoImovel, String quantidadeParcelas, String mensagemPagamentoAVista,
					String quantidadeParcelasDebitos, Integer quantidadeDebitoACobrar, Integer quantidadeParcelamento,
					BigDecimal valorTotalSucumbencia){

		try{

			return this.getControladorCobranca().obterRelatorioExtratoDebito(extratoDebitoRelatorioHelper, imovel, valorDebitosACobrar,
							valorAcrescimosImpontualidade, valorCreditos, valorDesconto, valorDocumento, usuario, inscricao, nomeUsuario,
							matricula, enderecoImovel, quantidadeParcelas, mensagemPagamentoAVista, quantidadeParcelasDebitos,
							quantidadeDebitoACobrar, quantidadeParcelamento, valorTotalSucumbencia);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Quantidade de Ítens Pagos
	 * 
	 * @author Hebert Falcão
	 * @date 19/12/2011
	 */
	public Integer pesquisarQuantidadeDeItensPagos(Integer idCobrancaDocumento){

		try{
			return this.getControladorCobranca().pesquisarQuantidadeDeItensPagos(idCobrancaDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void atualizarCobrancaDocumento(CobrancaDocumento cobrancaDocumento){

		try{
			this.getControladorCobranca().atualizarCobrancaDocumento(cobrancaDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método extraído da classe GerarRelatorioExtratoDebitoAction
	 */
	public Object[] verificarSituacaoImovelPerfilParcelamento(Integer situacaoAguaId, Integer situacaoEsgotoId, Integer codigoImovel,
					Integer perfilImovelId, Integer resolucaoDiretoria, Integer numeroReparcelamentoConsecutivos,
					BigDecimal valorDebitoACobrarParcelamentoImovel, boolean verificaNulidade,
					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao, Usuario usuario){

		try{
			return this.getControladorCobranca().verificarSituacaoImovelPerfilParcelamento(situacaoAguaId, situacaoEsgotoId, codigoImovel,
							perfilImovelId, resolucaoDiretoria, numeroReparcelamentoConsecutivos, valorDebitoACobrarParcelamentoImovel,
							verificaNulidade, parcelamentoQuantidadePrestacao, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3031] Efetuar Negociação de Débitos
	 * 
	 * @author Hebert Falcão
	 * @date 11/12/2011
	 */
	public void efetuarNegociacaoDeDebitos(Integer idImovel, Integer idClienteUsuario, Short indicadorPessoaFisicaJuridica,
					String cpfCnpjCliente, String emailCliente, Usuario usuarioLogado, Short negociacaoQuantidadeParcelas,
					BigDecimal negociacaoValorParcela, BigDecimal negociacaoValorEntrada, BigDecimal negociacaoValorDebitoAposDesconto,
					String negociacaoIndicadorPagamentoCartaoCredito, Collection<ContaValoresHelper> colecaoContaValores,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, BigDecimal valorAcrescimosImpontualidade,
					BigDecimal valorDebitoACobrarServico, BigDecimal valorDebitoACobrarParcelamento, BigDecimal valorDesconto,
					BigDecimal valorDescontoCredito, String inscricaoImovel, String enderecoImovel,
					NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamento, BigDecimal valorTotalConta, BigDecimal valorTotalGuia,
					BigDecimal valorTotalAtualizacaoMonetaria, BigDecimal valorTotalJurosMora, BigDecimal valorTotalMulta,
					BigDecimal valorDebitoTotalAtualizado, BigDecimal negociacaoValorDescontoAntiguidade,
					BigDecimal negociacaoValorDescontoInatividade, Integer negociacaoNumeroMesesEntreParcelas,
					Integer negociacaoNumeroParcelasALancar, Integer negociacaoNumeroMesesInicioCobranca,
					Integer negociacaoNumeroDiasVencimentoDaEntrada, BigDecimal negociacaoTaxaJuros, Integer negociacaoIdRD){

		try{
			this.getControladorCobranca().efetuarNegociacaoDeDebitos(idImovel, idClienteUsuario, indicadorPessoaFisicaJuridica,
							cpfCnpjCliente, emailCliente, usuarioLogado, negociacaoQuantidadeParcelas, negociacaoValorParcela,
							negociacaoValorEntrada, negociacaoValorDebitoAposDesconto, negociacaoIndicadorPagamentoCartaoCredito,
							colecaoContaValores, colecaoDebitoACobrar, colecaoCreditoARealizar, colecaoGuiaPagamentoValores,
							valorAcrescimosImpontualidade, valorDebitoACobrarServico, valorDebitoACobrarParcelamento, valorDesconto,
							valorDescontoCredito, inscricaoImovel, enderecoImovel, negociacaoOpcoesParcelamento, valorTotalConta,
							valorTotalGuia, valorTotalAtualizacaoMonetaria, valorTotalJurosMora, valorTotalMulta,
							valorDebitoTotalAtualizado, negociacaoValorDescontoAntiguidade, negociacaoValorDescontoInatividade,
							negociacaoNumeroMesesEntreParcelas, negociacaoNumeroParcelasALancar, negociacaoNumeroMesesInicioCobranca,
							negociacaoNumeroDiasVencimentoDaEntrada, negociacaoTaxaJuros, negociacaoIdRD);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisar Documentos de Cobrança para geração do relatório
	 * 
	 * @author Cinthya Cavalcanti
	 * @date 28/12/2011
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoRelatorioEmitirRelacaoDocumentos(int idCobrancaAtividadeAcaoComando)
					throws ControladorException{

		try{
			return this.getControladorCobranca().pesquisarCobrancaDocumentoRelatorioEmitirRelacaoDocumentos(idCobrancaAtividadeAcaoComando);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3027] Filtrar Guia de Pagamento
	 * 
	 * @author Anderson Italo
	 * @date 27/10/2011
	 */
	public Collection<GuiaPagamentoHelper> pesquisarRegistrosManterGuiaPagamento(FiltroGuiaPagamentoHelper filtro){

		try{

			return getControladorFaturamento().pesquisarRegistrosManterGuiaPagamento(filtro);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3027] Filtrar Guia de Pagamento
	 * Obter total de registros retornados na consulta
	 * 
	 * @author Anderson Italo
	 * @date 27/10/2011
	 */
	public Integer pesquisarTotalRegistrosManterGuiaPagamento(FiltroGuiaPagamentoHelper filtro){

		try{

			return getControladorFaturamento().pesquisarTotalRegistrosManterGuiaPagamento(filtro);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Prestações de Guia de Pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hugo Lima
	 * @date 20/12/2011
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoFiltrar(Integer guiaPagamentoId){

		try{

			return getControladorFaturamento().pesquisarGuiasPagamentoPrestacaoFiltrar(guiaPagamentoId,
							ConstantesSistema.CONSULTA_UC0188_SB0001_ITEM_3);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Prestações de Guia de Pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hiroshi Gonçalves
	 * @date 06/05/2013
	 *       idConsulta = 1 -> [SB0001] Item 3
	 *       2 -> [SB0009] Item 1.2
	 *       Utilizado para aproveitar o mesmo método no
	 *       repositório para 2 consultas parecidas
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoFiltrar(Integer guiaPagamentoId, int idConsulta){

		try{

			return getControladorFaturamento().pesquisarGuiasPagamentoPrestacaoFiltrar(guiaPagamentoId, idConsulta);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Prestações de Guia de Pagamento
	 * 
	 * @author Gicevalter Couto
	 * @date 06/05/2013
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoPorParcelamento(Integer parcelamentoId){

		try{

			return getControladorFaturamento().pesquisarGuiasPagamentoPrestacaoPorParcelamento(parcelamentoId);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Prestações de Guia de Pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hugo Lima
	 * @date 05/01/2011
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoRelatorio(Integer guiaPagamentoId){

		try{

			return getControladorFaturamento().pesquisarGuiasPagamentoPrestacaoRelatorio(guiaPagamentoId);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Prestações de Guia de Pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hugo Lima
	 * @throws ControladorException
	 * @date 20/12/2011
	 */
	public Collection<String> pesquisarTipoFinanciamentoDebitoNaoPermiteCancelarGuiaPagamento(Integer guiaPagamentoId){

		try{

			return getControladorFaturamento().pesquisarTipoFinanciamentoDebitoNaoPermiteCancelarGuiaPagamento(guiaPagamentoId);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar parcelamentos de cobranca bancarias correspondentes a uma guia de pagamento
	 * pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hugo Lima
	 * @date 02/01/2011
	 */
	public Collection<String> pesquisarBoletoEmissaoGuiaPagamento(Integer guiaPagamentoId){

		try{
			return getControladorFaturamento().pesquisarBoletoEmissaoGuiaPagamento(guiaPagamentoId);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar parcelamentos de cobranca bancarias correspondentes a uma guia de pagamento
	 * [UC0188] Manter Guia de Pagamento
	 * 
	 * @author Hugo Lima
	 * @date 05/01/2011
	 */
	public Collection<Object[]> pesquisarBoletoGeradoGuiaPagamento(Integer guiaPagamentoId, Short numeroPrestacao){

		try{
			return getControladorFaturamento().pesquisarBoletoGeradoGuiaPagamento(guiaPagamentoId, numeroPrestacao);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Permite Inserir uma guia de pagamento com valor do débito maior que o valor limite
	 * pré-definido para o
	 * tipo do débito
	 * 
	 * @author Anderson Italo
	 * @date 11/01/2012
	 * @param usuario
	 */
	public boolean verificarPermissaoInserirGuiaPagamentoValorDebitoMaiorLimite(Usuario usuario){

		try{

			return getControladorPermissaoEspecial().verificarPermissaoInserirGuiaPagamentoValorDebitoMaiorLimite(usuario);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0016] – Obter Boletos Bancários para Negociação.
	 * O sistema obtém os boletos bancários do imóvel possíveis de serem negociados.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection<BoletoBancario> obterBoletosBancariosParaNegociacao(Integer idImovel){

		try{
			return this.getControladorCobranca().obterBoletosBancariosParaNegociacao(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0016] – Obter Boletos Bancários para Negociação.
	 * Obtém a data de entrada através da entidade BoletoBancarioSituacaoHistorico pelo ID do
	 * BoletoBancario.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Date obterDataEntradaBoletoBancarioSituacaoHistorico(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().obterDataEntradaBoletoBancarioSituacaoHistorico(idBoletoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0017] – Determinar Parametrização do Parcelamento de Cobrança Bancária
	 * Obtém a menor referência das contas associadas ao boleto bancário selecionado para
	 * negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterMenorReferenciaContaBoletoBancario(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().obterMenorReferenciaContaBoletoBancario(idBoletoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0017] – Determinar Parametrização do Parcelamento de Cobrança Bancária
	 * Obtém a maior referência das contas associadas ao boleto bancário selecionado para
	 * negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterMaiorReferenciaContaBoletoBancario(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().obterMaiorReferenciaContaBoletoBancario(idBoletoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [FS0016] – Verificar se usuário possui autorização para utilizar a RD
	 * 
	 * @author Ailton Sousa
	 * @date 27/12/2011
	 * @param idUsuario
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaPermitidaAoUsuario(Integer idUsuario){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaPermitidaAoUsuario(idUsuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna o ImovelSubcategoria com a maior quantidade de economia.
	 * 
	 * @author Ailton Sousa
	 * @date 28/12/2011
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public ImovelSubcategoria pesquisarImovelSubcategoriaComMaiorQuantidadeEconomia(Integer idImovel){

		try{
			return this.getControladorImovel().pesquisarImovelSubcategoriaComMaiorQuantidadeEconomia(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * Verifica se a conta está associada ao boleto bancário da negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 18/01/2012
	 * @param idBoletoBancario
	 * @param idConta
	 * @return
	 * @throws ControladorException
	 */
	public boolean isContaAssociadaAoBoletoBancario(Integer idBoletoBancario, Integer idConta){

		try{
			return this.getControladorCobranca().isContaAssociadaAoBoletoBancario(idBoletoBancario, idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0003] - Verificar Mudança de Rota da Quadra
	 * Método que obtém o total de imóveis com rota igual à rota anterior da quadra.
	 * 
	 * @author Anderson Italo
	 * @date 23/01/2012
	 * @throws ErroRepositorioException
	 */
	public Integer obterTotalImoveisRotaIgualAnteriorQuadra(Integer idQuadra, Integer idRota){

		try{

			return getControladorImovel().obterTotalImoveisRotaIgualAnteriorQuadra(idQuadra, idRota);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0005] - Verificar Mudança de Distrito Operacional da Quadra
	 * Método que obtém o total de imóveis com distrito operacional igual ao distrito operacional
	 * anterior da quadra.
	 * 
	 * @author Luciano Galvão
	 * @date 31/05/2012
	 * @throws FachadaException
	 */
	public Integer obterTotalImoveisDistritoOperacionalIgualAnteriorQuadra(Integer idQuadra, Integer idDistritoOperacional){

		try{

			return getControladorImovel().obterTotalImoveisDistritoOperacionalIgualAnteriorQuadra(idQuadra, idDistritoOperacional);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0003] - Verificar Mudança de Rota da Quadra
	 * Método que obtém o total de imóveis com rota diferente à rota anterior da quadra.
	 * 
	 * @author Anderson Italo
	 * @date 23/01/2012
	 * @throws ErroRepositorioException
	 */
	public Integer obterTotalImoveisRotaDiferenteAnteriorQuadra(Integer idQuadra, Integer idRota){

		try{

			return getControladorImovel().obterTotalImoveisRotaDiferenteAnteriorQuadra(idQuadra, idRota);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0005] - Verificar Mudança de Distrito Operacional da Quadra
	 * Método que obtém o total de imóveis com distrito operacional diferente do distrito
	 * operacional anterior da quadra.
	 * 
	 * @author Luciano Galvão
	 * @date 31/05/2012
	 * @throws FachadaException
	 */
	public Integer obterTotalImoveisDistritoOperacionalDiferenteAnteriorQuadra(Integer idQuadra, Integer idDistritoOperacional){

		try{

			return getControladorImovel().obterTotalImoveisDistritoOperacionalDiferenteAnteriorQuadra(idQuadra, idDistritoOperacional);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0001] - Atualizar Quadra
	 * Método que atualiza a rota dos imóveis pela quadra e rota(informada ou não).
	 * 
	 * @author Anderson Italo
	 * @date 24/01/2012
	 * @throws ErroRepositorioException
	 */
	public void atualizarRotaImoveisPorQuadra(Integer idQuadra, Integer idRotaAtualizar, Integer idRotaAnterior){

		try{

			getControladorImovel().atualizarRotaImoveisPorQuadra(idQuadra, idRotaAtualizar, idRotaAnterior);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0001] - Atualizar Quadra
	 * Método que atualiza o distrito operacional dos imóveis pela quadra e distrito operacional
	 * anterior(informada ou não).
	 * 
	 * @author Luciano Galvão
	 * @date 31/05/2012
	 * @throws FachadaException
	 */
	public void atualizarDistritoOperacionalImoveisPorQuadra(Integer idQuadra, Integer idDistritoOperacionalAtualizar,
					Integer idDistritoOperacionalAnterior){

		try{

			getControladorImovel().atualizarDistritoOperacionalImoveisPorQuadra(idQuadra, idDistritoOperacionalAtualizar,
							idDistritoOperacionalAnterior);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0004] - Emitir Relatório dos Imóveis da Quadra
	 * 
	 * @author Anderson Italo
	 * @date 24/01/2011
	 */
	public Collection pesquisarRelatorioImoveisPorQuadra(Integer idQuadra){

		try{

			return getControladorImovel().pesquisarRelatorioImoveisPorQuadra(idQuadra);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0025] Manter Quadra
	 * [SB0004] - Emitir Relatório dos Imóveis da Quadra
	 * 
	 * @author Anderson Italo
	 * @date 24/01/2011
	 */
	public Integer pesquisarTotalRegistrosRelatorioImoveisPorQuadra(Integer idQuadra){

		try{

			return getControladorImovel().pesquisarTotalRegistrosRelatorioImoveisPorQuadra(idQuadra);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verificar referência final menor que referência inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 10/05/2006
	 */
	public void validarAnoMesInicialFinalPeriodo(String anoMesReferenciaInicial, String anoMesReferenciaFinal,
					String descricaoCampoAnoMesReferenciaInicial, String descricaoAnoMesReferenciaFinal,
					String mensagemErroDoApplicationProperties) throws ControladorException{

		try{

			getControladorUtil().validarAnoMesInicialFinalPeriodo(anoMesReferenciaInicial, anoMesReferenciaFinal,
							descricaoCampoAnoMesReferenciaInicial, descricaoAnoMesReferenciaFinal, mensagemErroDoApplicationProperties);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover uma colecao de objetos
	 * 
	 * @author Hugo Lima
	 * @throws ControladorException
	 * @date 07/02/2012
	 */
	public void removerColecaoObjetos(Collection<Object> colecaoObjetos) throws ControladorException{

		try{

			getControladorUtil().removerColecaoObjetos(colecaoObjetos);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3040] Obter Unidade Atual da OS
	 * Este método permite obter a unidade atual de uma ordem de serviço
	 * 
	 * @author Anderson Italo
	 * @date 08/02/2012
	 * @throws ErroRepositorioException
	 */
	public UnidadeOrganizacional obterUnidadeAtualOrdemServico(Integer idOrdemServico){

		try{

			return getControladorOrdemServico().obterUnidadeAtualOrdemServico(idOrdemServico);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Ailton Sousa
	 * @date 10/02/2012
	 * @param numeroOS
	 * @return
	 * @throws ControladorException
	 */
	public Integer pesquisarOSProgramacaoAtiva(Integer numeroOS){

		try{

			return getControladorOrdemServico().pesquisarOSProgramacaoAtiva(numeroOS);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0620] - Obter Indicador de Autorização para Manutenção da OS
	 * Este método permite obter o indicador de autorização para manutenção da OS
	 * 
	 * @author Anderson Italo
	 * @date 15/02/2012
	 * @throws ControladorException
	 */
	public Short obterIndicadorAutorizacaoParaManutencaoOrdemServico(Usuario usuario, Integer idOrdemServico){

		try{

			return getControladorOrdemServico().obterIndicadorAutorizacaoParaManutencaoOrdemServico(usuario, idOrdemServico);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3039] Tramitar Ordem de Serviço
	 * 
	 * @author Ailton Sousa
	 * @date 14/02/2012
	 * @param tramite
	 * @param dataConcorrente
	 */
	public void tramitarOS(Tramite tramite, Date dataConcorrente){

		try{
			this.getControladorOrdemServico().tramitarOS(tramite, dataConcorrente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3039] Tramitar Ordem de Serviço
	 * Faz as validações para realizar o Trâmite da OS.
	 * 
	 * @author Ailton Sousa
	 * @date 14/02/2012
	 * @param tramite
	 * @param usuario
	 * @throws ControladorException
	 */
	public void validarTramitacaoOS(Tramite tramite, Usuario usuario){

		try{
			this.getControladorOrdemServico().validarTramitacaoOS(tramite, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00503]Tramitar Conjunto de Registro de Atendimento e Ordem de servico
	 * [SB0003]Incluir o Tramite
	 * 
	 * @author Hugo Lima
	 * @date 16/02/2012
	 */

	public void tramitarRAOS(Tramite tramite, Date dataConcorrente, Usuario usuario){

		try{
			this.getControladorRegistroAtendimento().tramitarRAOS(tramite, dataConcorrente, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC00503]Tramitar Conjunto de Registro de Atendimento e Ordem de servico
	 * [SB0003]Incluir o Tramite
	 * 
	 * @author Hugo Lima
	 * @date 16/02/2012
	 */

	public void tramitarColecaoRAOS(Collection tramites, Usuario usuario){

		try{
			this.getControladorRegistroAtendimento().tramitarColecaoRAOS(tramites, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consultar Id de Serviço Tipo com Geração Automática filtrando pelo Id da Solicitação Tipo
	 * Especificação
	 * 
	 * @author Hebet Falcão
	 * @date 17/02/2012
	 */
	public Collection<Integer> consultarIdServicoTipoGeracaoAutomaticaPorEspecificacao(Integer idSolicitacaoTipoEspecificacao){

		try{
			return this.getControladorOrdemServico()
							.consultarIdServicoTipoGeracaoAutomaticaPorEspecificacao(idSolicitacaoTipoEspecificacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * 
	 * @return
	 */
	public Collection<ParcelamentoSituacaoEspecial> verificarRDComRestricao(Integer idResolucaoDiretoria){

		try{
			return getControladorCobranca().verificarRDComRestricao(idResolucaoDiretoria);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * 
	 * @param idLocalidade
	 * @param intervalorParcelamentoInicial
	 * @param intervalorParcelamentoFinal
	 * @return
	 */
	public Collection<ParcelamentoSituacaoEspecial> pesquisarParcelamentoSituacaoEspecialPorLocalidade(Integer idLocalidade,
					Integer intervalorParcelamentoInicial, Integer intervalorParcelamentoFinal){

		try{

			return getControladorCobranca().pesquisarParcelamentoSituacaoEspecialPorLocalidade(idLocalidade, intervalorParcelamentoInicial,
							intervalorParcelamentoFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0111] Iniciar Processo
	 * [FS0011] – Verificar restrição de execução simultânea de processos
	 * 
	 * @author Hugo Lima
	 * @date 28/02/2012
	 * @throws FachadaException
	 */
	public boolean isProcessoComRestricaoExecucaoSimultanea(Integer idProcesso){

		try{

			return this.getControladorBatch().isProcessoComRestricaoExecucaoSimultanea(idProcesso);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Insere um processo iniciado no sistema a partir de uma funcionalidade do Online e suas
	 * funcionalidades iniciadas
	 * 
	 * @author Anderson Italo
	 * @date 11/03/2012
	 * @throws ControladorException
	 */
	public Integer inserirProcessoIniciadoOnline(ProcessoIniciado processoIniciado, List<Object> colecaoParametros){

		try{

			return this.getControladorBatch().inserirProcessoIniciadoOnline(processoIniciado, colecaoParametros);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Yara Souza
	 * @date 28/02/2012
	 * @throws FachadaException
	 */
	public Collection consultarResumoCobrancaAcaoEventual(Integer idCobrancaAcao,
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper){

		try{
			return getControladorGerencialCobranca().consultarResumoCobrancaAcaoEventual(idCobrancaAcao,
							informarDadosGeracaoResumoAcaoConsultaEventualHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3037] Filtrar Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 10/02/2012
	 *          Exibir Contas Pré-Faturadas.
	 */
	public Collection<Conta> pesquisarContasPreFaturadas(FaturaContasPreFaturadasHelper faturaContasPreFaturadasHelper, Integer pageOffset,
					boolean indicadorRelatorio){

		try{
			return this.getControladorFaturamento().pesquisarContasPreFaturadas(faturaContasPreFaturadasHelper, pageOffset,
							indicadorRelatorio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3035] Concluir Faturamento Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 16/02/2012
	 */
	public Conta pesquisarContaPeloID(Integer idConta){

		try{
			return this.getControladorFaturamento().pesquisarContaPeloID(idConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3035] Concluir Faturamento Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 23/02/2012
	 */
	public void atualizarSituacaoConta(Conta conta, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().atualizarSituacaoConta(conta, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3037] Filtrar Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 24/02/2012
	 *          Exibir Contas Pré-Faturadas.
	 */
	public Collection<Integer> pesquisarQuantidadeContasPreFaturadas(FaturaContasPreFaturadasHelper faturaContasPreFaturadasHelper){

		try{
			return this.getControladorFaturamento().pesquisarQuantidadeContasPreFaturadas(faturaContasPreFaturadasHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3037] Filtrar Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 24/02/2012
	 *          Exibir Contas Pré-Faturadas.
	 */
	public Integer obterMaiorAnoMesReferenciaAnteriorMedicaoHistorico(Integer idImovel, Integer anoMesConta){

		try{
			return this.getControladorFaturamento().obterMaiorAnoMesReferenciaAnteriorMedicaoHistorico(idImovel, anoMesConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3037] Filtrar Contas Pré-Faturadas
	 * 
	 * @author Carlos Chrystian
	 * @created 24/02/2012
	 *          Exibir Contas Pré-Faturadas.
	 */
	public Integer obterMaiorAnoMesReferenciaAnteriorConsumoHistorico(Integer idImovel, Integer anoMesConta){

		try{
			return this.getControladorFaturamento().obterMaiorAnoMesReferenciaAnteriorConsumoHistorico(idImovel, anoMesConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3052] Gerar e Emitir Aviso de Corte e Ordem de Corte Individual
	 * 
	 * @author Hebert Falcão, Yara Souza
	 * @throws ControladorException
	 * @date 16/03/2012, 20/05/2012
	 */

	public CobrancaAcaoIndividualHelper gerarEmitirAvisoDeCorteOrdemDeCorteIndividual(Integer idImovel, BigDecimal valorDocumento,
					Collection<ContaValoresHelper> colecaoContas, Collection<DebitoACobrar> colecaoDebitosACobrar,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento, Collection<CreditoARealizar> colecaoCreditoARealizar,
					Usuario usuario, Collection<CobrancaAcaoIndividualHelper> colecaoCobrancaAcaoHelper, Short indicadorAtividade){

		try{
			return getControladorCobranca().gerarEmitirAvisoDeCorteOrdemDeCorteIndividual(idImovel, valorDocumento, colecaoContas,
							colecaoDebitosACobrar, colecaoGuiasPagamento, colecaoCreditoARealizar, usuario, colecaoCobrancaAcaoHelper,
							indicadorAtividade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisar o cep pelo codigo do cep
	 * 
	 * @author Sávio Luiz
	 * @date 05/11/2007
	 */

	public Cep pesquisarCep(Integer codigoCep){

		try{
			return this.getControladorEndereco().pesquisarCep(codigoCep);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0713] Emitir Ordem de Serviço Seletiva
	 * [SB9002] – Obter Dados do Hidrômetro
	 * 
	 * @author Hugo Lima
	 * @date 21/03/2012
	 * @return
	 * @throws ErroRepositorioException
	 */
	public HidrometroRelatorioOSHelper obterDadosHidrometroPorTipoMedicao(Integer idImovel, Integer idTipoMedicao){

		try{
			return this.getControladorMicromedicao().obterDadosHidrometroPorTipoMedicao(idImovel, idTipoMedicao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0713] Emitir Ordem de Serviço Seletiva
	 * [SB9004] – Obter Dados de Consumo
	 * 
	 * @author Hugo Lima
	 * @date 22/03/2012
	 * @param imovel
	 * @param tipoLigacao
	 * @return
	 * @throws ControladorException
	 */
	public ImovelDadosConsumoHistoricoHelper obterDadosConsumoMaiorReferenciaFaturamento(Imovel imovel, Integer tipoLigacao){

		try{
			return this.getControladorMicromedicao().obterDadosConsumoMaiorReferenciaFaturamento(imovel, tipoLigacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0713] Emitir Ordem de Serviço Seletiva
	 * [SB9003] - Obter Dados de Medição
	 * 
	 * @author Hugo Lima
	 * @date 22/03/2012
	 * @param imovel
	 * @param tipoLigacao
	 * @return
	 */
	public ImovelDadosMedicaoHistoricoHelper obterDadosMedicaoMaiorReferenciaLeitura(Imovel imovel, Integer tipoLigacao){

		try{
			return this.getControladorMicromedicao().obterDadosMedicaoMaiorReferenciaLeitura(imovel, tipoLigacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3046] Filtrar Guia Pagamento Para Geração Débito Automático
	 * 
	 * @author Carlos Chrystian
	 * @created 20/03/2012
	 *          Filtrar Guia Pagamento Para Geração Débito Automático.
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiaPagamentoPrestacao(Date dataVencimentoGuiaPagamentoInicial,
					Date dataVencimentoGuiaPagamentoFinal, Integer clienteResponsavel, Short indicadorTipoGuia, Integer pageOffset){

		try{
			return this.getControladorArrecadacao().pesquisarGuiaPagamentoPrestacao(dataVencimentoGuiaPagamentoInicial,
							dataVencimentoGuiaPagamentoFinal, clienteResponsavel, indicadorTipoGuia, pageOffset);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3046] Filtrar Guia Pagamento Para Geração Débito Automático
	 * 
	 * @author Carlos Chrystian
	 * @created 20/03/2012
	 *          Filtrar Guia Pagamento Para Geração Débito Automático.
	 */
	public Integer pesquisarQuantidadeGuiaPagamentoPrestacao(Date dataVencimentoGuiaPagamentoInicial,
					Date dataVencimentoGuiaPagamentoFinal, Integer clienteResponsavel, Short indicadorTipoGuia){

		try{
			return this.getControladorArrecadacao().pesquisarQuantidadeGuiaPagamentoPrestacao(dataVencimentoGuiaPagamentoInicial,
							dataVencimentoGuiaPagamentoFinal, clienteResponsavel, indicadorTipoGuia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite gerar débito automático para guia de pagamento
	 * [UC3045] Gerar Débito Automático para Guia de Pagamento
	 * 
	 * @author Carlos Chrystian
	 * @created 23/03/2012
	 *          Gerar Débito Automático para Guia de Pagamento.
	 */
	public void gerarDebitoAutomaticoGuiaPagamento(String[] idsGuiaPagamentoPrestacaoSelecionadas, Usuario usuarioLogado){

		try{
			this.getControladorArrecadacao().gerarDebitoAutomaticoGuiaPagamento(idsGuiaPagamentoPrestacaoSelecionadas, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta os motivos de exclusão do programa Água Para Todos
	 * 
	 * @author Luciano Galvão
	 * @date 20/03/2012
	 * @throws FachadaException
	 */
	public List consultarAguaParaTodosMotivosExclusao() throws FachadaException{

		try{
			return this.getControladorCadastro().consultarAguaParaTodosMotivosExclusao();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Habilita um imóvel no programa água para todos
	 * 
	 * @author Luciano Galvão
	 * @date 21/03/2012
	 * @param imovelAguaParaTodos
	 * @param imovel
	 * @param usuario
	 * @throws FachadaException
	 */
	public void habilitarImovelAguaParaTodos(ImovelAguaParaTodos imovelAguaParaTodos, Imovel imovel, Usuario usuario)
					throws FachadaException{

		try{
			this.getControladorCadastro().habilitarImovelAguaParaTodos(imovelAguaParaTodos, imovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3053] - Gerar Guia de Pagamento Programa Água Para Todos
	 * Recupera o tipo de débito referente ao Programa Água para Todos
	 * 
	 * @author Luciano Galvão
	 * @date 23/03/2012
	 * @throws ControladorException
	 */
	public DebitoTipo consultarDebitoTipoAguaParaTodos() throws FachadaException{

		try{
			return this.getControladorArrecadacao().consultarDebitoTipoAguaParaTodos();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3053] - Gerar Guia de Pagamento Programa Água Para Todos
	 * Recupera a coleção de contas que não possuem o motivo de revisão correspondente ao Programa
	 * Água Para Todos
	 * 
	 * @author Luciano Galvão
	 * @date 23/03/2012
	 * @throws ControladorException
	 */
	public Collection obterContasProgramaAguaParaTodos(Imovel imovel) throws FachadaException{

		try{
			return this.getControladorArrecadacao().obterContasProgramaAguaParaTodos(imovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3053]: Gerar Guia Pagamento Programa Água para Todos
	 * Calcula o valor da Guia de Pagamento para o programa Água Para Todos
	 * 
	 * @param valorContas
	 * @author Luciano Galvão
	 * @date 23/03/2012
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorGuiaAguaParaTodos(BigDecimal valorContas) throws FachadaException{

		try{
			return this.getControladorArrecadacao().calcularValorGuiaAguaParaTodos(valorContas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3053 - Gerar Guia de Pagamento Programa Água para Todos]
	 * 
	 * @author Luciano Galvão
	 * @date 26/03/2012
	 * @param idImovel
	 * @param valorGuia
	 * @param contas
	 * @param usuario
	 * @throws FachadaException
	 */
	public void gerarGuiaPagamentoProgramaAguaParaTodos(Integer idImovel, BigDecimal valorGuia, Collection<Conta> contas, Usuario usuario)
					throws FachadaException{

		try{
			this.getControladorArrecadacao().gerarGuiaPagamentoProgramaAguaParaTodos(idImovel, valorGuia, contas, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3055] Encerrar Faturamento
	 * [SB0001] – Selecionar Grupos de Faturamento por Situação
	 * 
	 * @author Hebert Falcão
	 * @date 01/04/2012
	 */
	public Collection<GupoFaturamentoHelper> selecionarGruposFaturamentoPorSituacao(Integer referencia, Short situacao)
					throws FachadaException{

		try{
			return this.getControladorFaturamento().selecionarGruposFaturamentoPorSituacao(referencia, situacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3055] Encerrar Faturamento
	 * Pesquisar Grupos Não Faturados
	 * 
	 * @author Hebert Falcão
	 * @date 01/04/2012
	 */
	public Collection<FaturamentoGrupo> pesquisarGruposNaoFaturados(Integer referencia) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarGruposNaoFaturados(referencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3055] Encerrar Faturamento
	 * [SB0002] – Encerrar Faturamento
	 * 
	 * @author Hebert Falcão
	 * @date 01/04/2012
	 */
	public void encerrarFaturamento(Integer referencia, Usuario usuario) throws FachadaException{

		try{
			this.getControladorFaturamento().encerrarFaturamento(referencia, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0458] Imprimir Ordem de Serviço em Txt
	 * 
	 * @author Hebert Falcão
	 * @date 19/03/2012
	 */
	public StringBuilder imprimirOrdemServicoTxt(Collection<OrdemServico> colecaoOrdemServico, String nomeMetodoGeracaoArquivoTxt){

		try{
			return getControladorOrdemServico().imprimirOrdemServicoTxt(colecaoOrdemServico, nomeMetodoGeracaoArquivoTxt);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * Verifica se o meio da solicitação permite liberação do preenchimento do campo de documento da
	 * aba solicitante do caso de uso
	 * 
	 * @author Hugo Lima
	 * @date 24/04/2012
	 * @param idMeioSolicitacao
	 * @return
	 * @throws FachadaException
	 */
	public boolean isMeioSolicitacaoLiberaDocumentoIdentificacaoRA(Integer idMeioSolicitacao){

		try{
			return getControladorRegistroAtendimento().isMeioSolicitacaoLiberaDocumentoIdentificacaoRA(idMeioSolicitacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * [FS0003] - Verificar permissão para inclusão de contas em revisão por Cobrança Bancária
	 * 
	 * @author Anderson Italo
	 * @date 24/04/2012
	 * @throws ControladorException
	 */
	public void verificarPermissaoInclusaoContasRevisaoCobrancaBancaria(Collection idsContas, Usuario usuarioLogado){

		try{
			getControladorCobranca().verificarPermissaoInclusaoContasRevisaoCobrancaBancaria(idsContas, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [FS0003] - Verificar permissão para impressão de contas em revisão por Cobrança Bancária
	 * 
	 * @author Yara Souza
	 * @date 30/04/2012
	 * @throws ControladorException
	 */
	public boolean verificarPermissaoImpressaoContasRevisaoCobrancaBancaria(Usuario usuarioLogado, Conta conta){

		try{
			return getControladorCobranca().verificarPermissaoImpressaoContasRevisaoCobrancaBancaria(usuarioLogado, conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Conta os registros para mandar pra batch ou gerar online o relatório
	 * 
	 * @Autor: Ítalo Almeida
	 * @Date: 03/05/2012
	 */

	public Integer gerarCurvaAbcDebitosCount(String classificacao, String indicadorImovelMedicaoIndividualizada,
					String indicadorImovelParalizacaoFaturamentoCobranca, String[] gerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String idSetorComercialInicial, String idSetorComercialFinal, String[] situacaoLigacaoAgua,
					String[] situacaoLigacaoEsgoto, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria){

		try{
			return getControladorCobranca().gerarCurvaAbcDebitosCount(classificacao, indicadorImovelMedicaoIndividualizada,
							indicadorImovelParalizacaoFaturamentoCobranca, gerenciaRegional, idLocalidadeInicial, idLocalidadeFinal,
							idSetorComercialInicial, idSetorComercialFinal, situacaoLigacaoAgua, situacaoLigacaoEsgoto,
							intervaloConsumoMinimoFixadoEsgotoInicial, intervaloConsumoMinimoFixadoEsgotoFinal, indicadorMedicao,
							idTipoMedicao, idPerfilImovel, idTipoCategoria, categoria, idSubCategoria);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	/**
	 * Método responsável por atualizar o valor de um parâmetro no sistema.
	 * 
	 * @author Anderson Italo
	 * @date 08/05/2012
	 * @throws PCGException
	 */
	public void atualizarValorParametroSistema(String codigo, String valor) throws PCGException{

		getControladorParametroSistema().atualizarValorParametroSistema(codigo, valor);
	}

	/**
	 * [FS0037] - Verificar existência de guia de parcelamento de cobrança bancária
	 * Remover guia de pagamento na composição do débito para o parcelamento
	 * 
	 * @author Hebert Falcão
	 * @date 13/05/2012
	 */
	public void removerGuiaDePagamentoNaComposicaoDoDebitoParcelamennto(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores){

		try{
			this.getControladorCobranca().removerGuiaDePagamentoNaComposicaoDoDebitoParcelamennto(colecaoGuiaPagamentoValores);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * Lista de setores comerciais (selecionar os setores comerciais dos imóveis das rotas do
	 * comando (selecionar STCM_ID da tabela IMOVEL com ROTA_ID=ROTA_ID da tabela
	 * FATURAMENTO_ATIV_CRON_ROTA com FTAC_ID=FTAC_ID da tabela FATURAMENTO_ATIVIDADE_CRONOGRAMA
	 * [FS0001 – Verificar existência de dados]);
	 * 
	 * @param idFaturamentoAtvCron
	 * @return Lista dos id dos Setores comerciais.
	 */
	public List<Integer> consultarSetoresComerciaisAvisoCorte(Integer idFaturamentoAtvCron){

		try{
			return getControladorLocalidade().consultarSetoresComerciaisAvisoCorte(idFaturamentoAtvCron);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<Object[]> consultarImoveisAvisoCorte(Integer idSetor, Integer idFaturamentoAtvCron){

		try{
			return getControladorImovel().consultarImoveisAvisoCorte(idSetor, idFaturamentoAtvCron);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Object[] pesquisarSetorComercialPorCobrancaDocumento(Integer idCobrancaDocumento){

		try{
			return getControladorCobranca().pesquisarSetorComercialPorCobrancaDocumento(idCobrancaDocumento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarTotalDescricoesCobrancaAcaoPorSetor(Integer cdSetorComercial){

		try{
			return getControladorCobranca().pesquisarTotalDescricoesCobrancaAcaoPorSetor(cdSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarTotalDescricoesCobrancaAcaoPorLocalidade(Integer idLocalidade){

		try{
			return getControladorCobranca().pesquisarTotalDescricoesCobrancaAcaoPorLocalidade(idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorSetor(Integer cdSetorComercial, Integer localidadeId,
					Integer faturamentoGrupoMensalId, Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao){

		try{
			return getControladorCobranca().pesquisarTotalOcorrenciasCobrancaAcaoPorSetor(cdSetorComercial, localidadeId,
							faturamentoGrupoMensalId, cobrancaAcaoAtividadeComandoId, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorLocalidade(Integer idLocalidade, Integer faturamentoGrupoMensalId,
					Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao){

		try{
			return getControladorCobranca().pesquisarTotalOcorrenciasCobrancaAcaoPorLocalidade(idLocalidade, faturamentoGrupoMensalId,
							cobrancaAcaoAtividadeComandoId, idCobrancaAcao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0339] - Consultar Dados Diários da Arrecadação
	 * [SB0011] - Obter Valor Despesa Bancária do Arrecadador
	 * Obtém os dados da tarifa do arrecadador a partir da tabela ARRECADADOR_CONTRATO_TARIFA.
	 * 
	 * @author Josenildo Neves
	 * @date 19/06/2012
	 * @throws ErroRepositorioException
	 */
	public List<ArrecadadorContratoTarifaHelper> pesquisarArrecadadorContratoTarifaPorArrecadacaoDadosDiarios(
					Integer idArrecadacaoDadosDiarios, Integer anoMesArrecadacao, String localidade, String idElo, String setorComercial,
					String idGerenciaRegional, String unidadeNegocioId, String[] idsImovelPerfil, String[] idsLigacaoAgua,
					String[] idsLigacaoEsgoto, String[] idsCategoria, String[] idsEsferaPoder, String[] idsDocumentosTipos){

		try{
			return this.getControladorArrecadacao().pesquisarArrecadadorContratoTarifaPorArrecadacaoDadosDiarios(idArrecadacaoDadosDiarios,
							anoMesArrecadacao, localidade, idElo, setorComercial, idGerenciaRegional, unidadeNegocioId, idsImovelPerfil,
							idsLigacaoAgua, idsLigacaoEsgoto, idsCategoria, idsEsferaPoder, idsDocumentosTipos);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0235] - Inserir aviso bancário
	 * [SB0001] - Preparar Preenchimento da Conta Bancária
	 * 
	 * @author André Lopes
	 * @date 07/05/2013
	 * @throws ErroRepositorioException
	 */
	public List<ArrecadadorContrato> pesquisarContaBancaria(Integer idArrecadacao){

		try{
			return this.getControladorArrecadacao().pesquisarContaBancaria(idArrecadacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @author Saulo Lima
	 * @date 27/06/2012
	 * @param Integer
	 *            idRA
	 * @return Object[] idLocalidade, idSetorComercial, idBairro
	 */
	public Object[] pesquisarDadosLocalizacaoRegistroAtendimento(Integer idRA){

		try{
			return this.getControladorRegistroAtendimento().pesquisarDadosLocalizacaoRegistroAtendimento(idRA);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que retorna uma lista de registros de anormalidades de consulmo filtrados pelo tipo de
	 * ligacao (Agua / Esgoto)
	 * 
	 * @date 27/06/2012
	 * @author Marlos Ribeiro
	 * @param informarDadosGeracaoRelatorioConsultaHelper
	 * @param tipoLigacao
	 * @return
	 */
	public List consultarResumoAnormalidadeConsumo(InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper,
					Integer tipoLigacao){

		try{
			return getControladorGerencialMicromedicao().consultarResumoAnormalidadeConsumo(informarDadosGeracaoRelatorioConsultaHelper,
							tipoLigacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3061] Gerar Relatório Posição do Débito da Negativação – Legado CASAL
	 * Pesquisar as contas em processo de negativação e já transferidas para o histórico
	 * 
	 * @date 28/07/2012
	 * @author Hebert Falcão
	 */
	public Collection<ContaHistorico> pesquisarContaEmProcessoNegativacao(Integer anoMesFaturamento){

		try{
			return getControladorFaturamento().pesquisarContaEmProcessoNegativacao(anoMesFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se já existe uma Atividade única,
	 * Utilizado antes do cadastramento de uma nova atividade.
	 * 
	 * @param atividadeUnica
	 * @throws FachadaException
	 */
	public Atividade verificarExistenciaAtividadeUnica(String atividadeUnica) throws FachadaException{

		try{
			return this.getControladorAtendimentoPublico().verificarExistenciaAtividadeUnica(atividadeUnica);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0004] – Apresenta Relacionamento do Cliente com os Imóveis
	 * 
	 * @author Hugo Lima
	 * @date 10/08/2012
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ClienteImovelRelacaoHelper> obterDadosImoveisClienteRelacao(Integer idCliente) throws FachadaException{

		try{
			return getControladorCliente().obterDadosImoveisClienteRelacao(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3062] Validar Autorização Acesso Imóvel - Cobrança Administrativa
	 * Valida a autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa e valida a autorização de acesso ao imóvel em cobrança administrativa pelos
	 * usuários da empresa contratante
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param usuario
	 * @param idImovel
	 * @param cdTipoValidacaoIdentificado
	 * @return
	 */
	public Short obterValidacaoAutorizacaoAcessoImovelCobrancaAdministrativa(Usuario usuario, Integer idImovel,
					Short cdTipoValidacaoIdentificado){

		try{
			return getControladorImovel().obterValidacaoAutorizacaoAcessoImovelCobrancaAdministrativa(usuario, idImovel,
							cdTipoValidacaoIdentificado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método é chamado por 2 Casos de Uso diferentes:
	 * [UC0203] Consultar Débitos
	 * [SB0005] - Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * e
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0024] - Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * 
	 * @author Saulo Lima
	 * @date 25/07/2013
	 * @param usuario
	 * @param idImovel
	 * @param colecaoDebitoImovel
	 * @return 0 = (Permite tudo) Não identificou nenhum dos casos
	 *         1 = (Bloqueia tudo) Se tem usuario NÃO tem autorização, imóvel possui débito com
	 *         remuneração Cob. Administ. e último Comando de Ação de Cobrança NÃO é da empresa do
	 *         usuário
	 *         2 = (Bloqueia parcial) Se tem usuario NÃO tem autorização, imóvel possui débito com
	 *         remuneração Cob. Administ. e último Comando de Ação de Cobrança é da empresa do
	 *         usuário
	 *         3 = (Bloqueia tudo) Se tem usuario NÃO tem autorização e imóvel NÃO possui débito com
	 *         remuneração Cob. Administ.
	 *         4 = (Bloqueia parcial) Se tem usuario tem autorização e empresa do usuário tem
	 *         contrato de cobrança
	 * @throws FachadaException
	 */
	public Integer validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(Usuario usuario, Integer idImovel,
					ObterDebitoImovelOuClienteHelper colecaoDebitoImovel) throws FachadaException{

		try{
			return getControladorImovel().validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(usuario, idImovel, colecaoDebitoImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0204] Consultar Conta
	 * [SB0001] – Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * 
	 * @author Saulo Lima
	 * @date 14/08/2013
	 * @param usuario
	 * @param idImovel
	 * @param conta
	 * @return boolean
	 * @throws FachadaException
	 */
	public boolean validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(Usuario usuario, Integer idImovel, Conta conta)
					throws FachadaException{

		try{
			return getControladorImovel().validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(usuario, idImovel, conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Este método é chamado por 2 Casos de Uso diferentes:
	 * [UC0203] Consultar Débitos
	 * [SB0006] - Validar autorização de acesso ao imóvel em cobrança administrativa pelos usuários
	 * da empresa contratante
	 * e
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0025] - Validar autorização de acesso ao imóvel em cobrança administrativa pelos usuários
	 * da empresa contratante
	 * 
	 * @return Retorna:
	 *         1 - Caso o usuário não tenha autorização de acesso ao imóvel
	 *         2 - Caso o usuário logado no sistema não possua permissão especial
	 *         para acesso aos dados do imóvel em cobrança administrativa
	 *         null - Caso o usuário tenha permissão
	 * @author Saulo Lima
	 * @date 31/07/2013
	 * @param usuario
	 * @param idImovel
	 * @param colecaoDebitoImovel
	 * @throws ControladorException
	 */
	public Integer validarAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante(Usuario usuario, Integer idImovel,
					ObterDebitoImovelOuClienteHelper colecaoDebitoImovel) throws FachadaException{

		try{
			return getControladorImovel().validarAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante(usuario, idImovel,
							colecaoDebitoImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0005] Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * 
	 * @author Saulo Lima
	 * @date 25/07/2013
	 * @param colecaoDebitoImovel
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificarIndicadorRemuneraCobrancaAdministrativa(ObterDebitoImovelOuClienteHelper colecaoDebitoImovel)
					throws FachadaException{

		try{
			return getControladorImovel().verificarIndicadorRemuneraCobrancaAdministrativa(colecaoDebitoImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna os tipos de débito correspondentes a parcelamento. Utilizados nas Rotinas:
	 * Marcar Itens Remuneráveis por Cobrança Administrativa
	 * e
	 * [UC0252] - Consultar Parcelamentos de Débitos
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 * @return Coleção de Ids de tipos de débito correspondentes a parcelamento
	 */
	public Collection<Integer> getTiposDebitoParcelamento() throws FachadaException{

		try{
			return getControladorParcelamento().getTiposDebitoParcelamento();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Verifica se existe, dentro da listagem de debitos de um imovel ou cliente, uma ocorrencia de
	 * conta ou guia de pagamento em cobranca administrativa
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param colecaoContasValoresHelper
	 * @param colecaoGuiasPagamentoValoresHelper
	 * @return
	 */
	public boolean existeContaOuGuiaPagamentoDebitoImovelOuCliente(Collection<ContaValoresHelper> colecaoContasValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresHelper){

		try{
			return getControladorCobranca().existeContaOuGuiaPagamentoDebitoImovelOuCliente(colecaoContasValoresHelper,
							colecaoGuiasPagamentoValoresHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0026] – Verificar Débito em Cobrança Administrativa - Retirar Contas
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param usuario
	 * @param idImovel
	 * @param colecaoContasValoresHelper
	 */
	public void removerContaCobrancaAdministrativaDebitoImovel(Usuario usuario, Integer idImovel,
					Collection<ContaValoresHelper> colecaoContasValoresHelper){

		try{
			this.getControladorCobranca().removerContaCobrancaAdministrativaDebitoImovel(usuario, idImovel, colecaoContasValoresHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0026] – Verificar Débito em Cobrança Administrativa - Retirar Guias
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param usuario
	 * @param idImovel
	 * @param colecaoGuiaPagamentoValoresHelper
	 */
	public void removerGuiaPagamentoCobrancaAdministrativaDebitoImovel(Usuario usuario, Integer idImovel,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper){

		try{
			this.getControladorCobranca().removerGuiaPagamentoCobrancaAdministrativaDebitoImovel(usuario, idImovel,
							colecaoGuiaPagamentoValoresHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idEmpresa
	 * @return
	 */
	public boolean existeEmpresaCobrancaContrato(Integer idEmpresa){

		try{
			return getControladorCobranca().existeEmpresaCobrancaContrato(idEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imóveis da Cobrança Administrativa.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return Integer
	 */
	public Collection<ImovelCobrancaSituacaoAdministrativaHelper> consultarRetirarImovelCobrancaAdministrativa(Integer idLocalidade,
					Integer cdSetorComercial, Integer idImovel, Integer numeroPaginas){

		try{
			return getControladorCobranca().consultarRetirarImovelCobrancaAdministrativa(idLocalidade, cdSetorComercial, idImovel,
							numeroPaginas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imóveis da Cobrança Administrativa.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return Collection<ImovelCobrancaSituacaoAdministrativaHelper>
	 */
	public Integer consultarRetirarImovelCobrancaAdministrativaCount(Integer idLocalidade, Integer cdSetorComercial, Integer idImovel){

		try{
			return getControladorCobranca().consultarRetirarImovelCobrancaAdministrativaCount(idLocalidade, cdSetorComercial, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0001] – Exibir dados da Cobrança Administrativa do Imóvel.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return ImovelCobrancaSituacaoAdministrativaHelper
	 */
	public ImovelCobrancaSituacaoAdministrativaHelper consultarRetirarImovelCobrancaAdministrativaDadosRemuneracao(
					Integer idImovelCobrancaSituacao){

		try{
			return getControladorCobranca().consultarRetirarImovelCobrancaAdministrativaDadosRemuneracao(idImovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] – Encerrar Cobrança Administrativa do Imóvel.
	 * 
	 * @created 31/07/2012
	 */
	public void encerrarCobrancaAdministrativaImovel(List<Integer> idsImovelCobrancaSituacao, Integer motivoRetirada, Usuario usuario){

		try{
			getControladorCobranca().encerrarCobrancaAdministrativaImovel(idsImovelCobrancaSituacao, motivoRetirada, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] – Encerrar Cobrança Administrativa do Imóvel. Item 1.
	 * 
	 * @return
	 */
	public Collection<ImovelCobrancaMotivoRetirada> consultarImovelCobrancaMotivoRetirada() throws FachadaException{

		try{
			return getControladorCobranca().consultarImovelCobrancaMotivoRetirada();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica o proprietario das contas
	 * 
	 * @param idConta
	 * @param matriculaImovel
	 *            *
	 * @throws FachadaException
	 */
	public void verificarPermissaoImovelConta(Integer idConta, Integer matriculaImovel) throws FachadaException{

		try{
			this.getControladorFaturamento().verificarPermissaoImovelConta(idConta, matriculaImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Consulta o histórico de cosumo leitura de uma imóvel.
	 * 
	 * @author Marlos Ribeiro
	 * @param matricula
	 * @return Coleção de {@link ImovelConsumoLeituraHistorico}
	 */
	public Collection<ImovelConsumoLeituraHistorico> consultarConsumoLeituraHistorico(String matricula){

		try{
			return ServiceLocator.getInstancia().getControladorMicromedicao().consultarConsumoLeituraHistorico(matricula);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica se um cliente representado pelo CNPJ/CPF tem relação ativa com o imóvel representado
	 * pela matrícula.
	 * 
	 * @author Marlos Ribeiro
	 * @param cpfCnpjCliente
	 * @param matriculaImovel
	 * @exception ControladorException
	 *                se o cliente nao tiver relações com o imóvel.
	 */
	public void validarPermissaoClienteImovel(String cpfCnpjCliente, String matriculaImovel){

		try{
			ServiceLocator.getInstancia().getControladorImovel().validarPermissaoClienteImovel(cpfCnpjCliente, matriculaImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}catch(NegocioException ex){
			throw new FachadaException(ex.getMessage(), ex);
		}

	}

	/**
	 * Verifica se um cliente tem relação ativa com o imóvel representado
	 * pela matrícula.
	 * 
	 * @author Yara Souza
	 * @param matriculaImovel
	 * @exception ControladorException
	 *                se o cliente nao tiver relações com o imóvel.
	 */
	public void validarPermissaoClienteImovel(String matriculaImovel){

		try{
			ServiceLocator.getInstancia().getControladorImovel().validarPermissaoClienteImovel(matriculaImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}catch(NegocioException ex){
			throw new FachadaException(ex.getMessage(), ex);
		}

	}

	/**
	 * Consulta o historico de mediçoes de um imovel.
	 * 
	 * @author Marlos Ribeiro
	 * @param matriculaImovel
	 * @return colecao de {@link MedicaoHistorico}
	 */
	public Collection<MedicaoHistorico> consultaMedicaoHistorio(String matriculaImovel){

		try{
			return getControladorMicromedicao().consultarMedicaoHistorio(matriculaImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Consulta o Historio de medicao de consumo de um imovel.
	 * 
	 * @author Marlos Ribeiro
	 * @param matriculaImovel
	 * @return colecao de {@link ImovelMicromedicao}.
	 */
	public Collection<ImovelMicromedicao> consultarConsumoHistorio(String matriculaImovel){

		try{
			return getControladorMicromedicao().consultarConsumoHistorio(matriculaImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Integer inserirRegistroAtendimento(Integer matricula, String cpfcnpj, String pontoReferencia, String nomeSolicitante,
					String foneSolicitante, String emailSolicitante, Integer idSolicitacaoTipoEspecificacao, Integer idMunicio,
					Integer idBairro, Integer idLogradouro, Integer numero, String descricao, Integer pavimentoTipo){

		try{
			return getControladorRegistroAtendimento().inserirRegistroAtendimento(matricula, cpfcnpj, pontoReferencia, nomeSolicitante,
							foneSolicitante, emailSolicitante, idSolicitacaoTipoEspecificacao, idMunicio, idBairro, idLogradouro, numero,
							descricao, pavimentoTipo);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}

	}

	/**
	 * Retorna a lista de ids de contas em cobrança administrativa de um imóvel onde não existe
	 * ocorrência da empresa passada como parametro
	 * 
	 * @author Hugo Lima
	 * @date 15/08/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws FachadaException
	 */
	public Collection<Integer> obterIdsContasCobrancaAdministrativaEmpresaDiferente(Integer idEmpresa, Integer idImovel)
					throws FachadaException{

		try{
			return getControladorCobranca().obterIdsContasCobrancaAdministrativaEmpresaDiferente(idEmpresa, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0188] Manter Guia de Pagamento
	 * [SB0005] – Validar autorização de acesso a prestação da guia de imóvel
	 * 
	 * @author Hugo Lima
	 * @date 21/08/2012
	 * @param usuario
	 * @param idImovel
	 * @param colecaoGuiaPagamentoHelper
	 * @throws FachadaException
	 */
	public void validarAutorizacaoAcessoPrestacaoGuiaImovel(Usuario usuario, Integer idImovel,
					Collection<GuiaPagamentoPrestacaoHelper> colecaoGuiaPagamentoPrestacaoHelper) throws FachadaException{

		try{
			this.getControladorFaturamento().validarAutorizacaoAcessoPrestacaoGuiaImovel(usuario, idImovel,
							colecaoGuiaPagamentoPrestacaoHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Obter os Ids de parcelamento feitos por usuario não pertencentes a empresa passada no
	 * parametro
	 * 
	 * @author Hugo Lima
	 * @data 15/08/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws FachadaException
	 */
	public Collection<Integer> obterIdsParcelamentoEmpresaDiferente(Integer idEmpresa, Integer idImovel) throws FachadaException{

		try{
			return getControladorCobranca().obterIdsParcelamentoEmpresaDiferente(idEmpresa, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna a lista de ids tipos de debitos dos itens de parcelamento (prestacoes)
	 * 
	 * @author Hugo Lima
	 * @date 15/08/2012
	 * @param idParcelamento
	 * @return
	 * @throws FachadaException
	 */
	public Collection<Integer> obterDebitosGuiasPagamentoPrestacoesParcelamento(Integer idParcelamento) throws FachadaException{

		try{
			return getControladorFaturamento().obterDebitosGuiasPagamentoPrestacoesParcelamento(idParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0252] Consultar Parcelamentos de Débitos
	 * [SB0003] – Validar autorização de acesso ao imóvel em cobrança administrativa pelos usuários
	 * da empresa contratante
	 * 
	 * @author Hugo Lima
	 * @date 23/08/2012
	 */
	public Collection<DebitoACobrar> pesquisarItensDebitosACobrarPorParcelamento(Integer idParcelamento) throws FachadaException{

		try{
			return getControladorCobranca().pesquisarItensDebitosACobrarPorParcelamento(idParcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Count do Gerar Relacao Acompanhamento Faturamento
	 * [UC0336] GerarRelacaoAcompanhamentoFaturamento
	 * 
	 * @author Jose Claudio
	 * @date 29/08/2012
	 */
	public Integer gerarRelacaoAcompanhamentoFaturamentoCount(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,

					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal,

					String idImovelPerfil, String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo,
					String idSituacaoEspecialCobranca, String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal,
					String idCadastroOcorrencia, String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String setorComercialInicial, String setorComercialFinal, String quadraInicial,
					String quadraFinal, String loteOrigem, String loteDestno, String cep, String logradouro, String bairro,
					String municipio, String idTipoMedicao, String indicadorMedicao, String idSubCategoria, String idCategoria,
					String quantidadeEconomiasInicial, String quantidadeEconomiasFinal, String diaVencimento, String idCliente,
					String idClienteTipo, String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal,
					String numeroMoradoresInicial, String numeroMoradoresFinal, String idAreaConstruidaFaixa, int anoMesReferencia,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal

	){

		try{
			return getControladorFaturamento().gerarRelacaoAcompanhamentoFaturamentoCount(idImovelCondominio, idImovelPrincipal,
							idNomeConta, idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria,
							idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, anoMesReferencia, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0238] Manter Aviso Bancário
	 * 
	 * @author Hugo Lima
	 * @date 30/08/2012
	 * @param idAvisoBancario
	 * @return
	 * @throws FachadaException
	 */
	public Hashtable<Short, BigDecimal> obterValorTotalAcertosArrecadacaoAvisoBancario(Integer idAvisoBancario) throws FachadaException{

		try{
			return getControladorArrecadacao().obterValorTotalAcertosArrecadacaoAvisoBancario(idAvisoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Cosulta o total de RA que atendam ao filtro informado.
	 * 
	 * @param parametro
	 *            {@link RelatorioEstatisticoRegistroAtendimentoHelper}
	 * @return
	 */
	public int constularQuantidadeRA(RelatorioEstatisticoRegistroAtendimentoHelper registroAtendimentoHelper){

		try{
			return getControladorRegistroAtendimento().consultarQuantidadeRA(registroAtendimentoHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * Valida o {@link RelatorioEstatisticoRegistroAtendimentoHelper}
	 * 
	 * @param registroAtendimentoHelper
	 * @throws NegocioException
	 */
	public void validarCamposObrigatoriosHalperRA(RelatorioEstatisticoRegistroAtendimentoHelper helper){

		try{
			getControladorRegistroAtendimento().validarCamposObrigatoriosHalperRA(helper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}

	}

	/**
	 * Consulta os dados estatisticos de RA filtrados pelo
	 * {@link RelatorioEstatisticoRegistroAtendimentoHelper}
	 * 
	 * @param relatorioEstatisticoRegistroAtendimentoHelper
	 * @return {@link List} de {@link RelatorioEstatisticoRegistroAtendimentoBean}
	 */
	public List<RelatorioEstatisticoRegistroAtendimentoBean> consultarDadosEstatisticosRegistroAtendimento(
					RelatorioEstatisticoRegistroAtendimentoHelper relatorioEstatisticoRegistroAtendimentoHelper){

		try{
			return getControladorRegistroAtendimento().consultarDadosEstatisticosRegistroAtendimento(
							relatorioEstatisticoRegistroAtendimentoHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * 4.2.1.5.6. Para cada percentual de remuneração (o percentual de remuneração
	 * 
	 * @author Josenildo Neves
	 * @param informarDadosGeracaoResumoAcaoConsultaEventualHelper
	 * @date 31/08/2012
	 */
	public List<ResumoCobrancaAcaoRemuneracaoHelper> consultarCobrancaAcaoRemuneracao(Integer idCobrancaAcao,
					Integer idCobrancaAcaoSituacao,
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper){

		try{
			return this.getControladorCobranca().consultarCobrancaAcaoRemuneracao(idCobrancaAcao, idCobrancaAcaoSituacao,
							informarDadosGeracaoResumoAcaoConsultaEventualHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Cosulta o total de remunerações de cobrança administrativa que atendam ao filtro informado.
	 * 
	 * @param parametro
	 *            {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return
	 */
	public int consultarQuantidadeRemuneracaoCobrancaAdministrativa(RelatorioRemuneracaoCobrancaAdministrativaHelper helper){

		try{
			return getControladorCobranca().consultarQuantidadeRemuneracaoCobrancaAdministrativa(helper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * Valida o {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param helper
	 * @throws FachadaException
	 */
	public void validarCamposObrigatoriosHelperRemuneracaoCobrancaAdministrativa(RelatorioRemuneracaoCobrancaAdministrativaHelper helper){

		try{
			getControladorCobranca().validarCamposObrigatoriosHelperRemuneracaoCobrancaAdministrativa(helper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}

	}

	/**
	 * Consulta os dados de remuneração de cobrança administrativa filtrados pelo
	 * {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param helper
	 * @return {@link List} de {@link RelatorioRemuneracaoCobrancaAdministrativaBean}
	 */
	public List<RelatorioRemuneracaoCobrancaAdministrativaBean> consultarDadosRemuneracaoCobrancaAdministrativa(
					RelatorioRemuneracaoCobrancaAdministrativaHelper helper){

		try{
			return getControladorCobranca().consultarDadosRemuneracaoCobrancaAdministrativa(helper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * [UC3063] Efetuar Instalacao/Substituicao de Instalacao de Registro Magnetico
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public void efetuarInstalacaoSubstituicaoRegistroMagnetico(IntegracaoComercialHelper integracaoComercialHelper, Usuario usuario){

		try{
			this.getControladorAtendimentoPublico().efetuarInstalacaoSubstituicaoRegistroMagnetico(integracaoComercialHelper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3064] Efetuar Instalacao/Substituicao de Tubete Magnetico
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public void efetuarInstalacaoSubstituicaoTubeteMagnetico(IntegracaoComercialHelper integracaoComercialHelper, Usuario usuario){

		try{
			this.getControladorAtendimentoPublico().efetuarInstalacaoSubstituicaoTubeteMagnetico(integracaoComercialHelper, usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3063] Efetuar Instalação/Substituição de Registro Magnético
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public void validarInstalacaoSubstituicaoRegistroMagneticoExibir(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarInstalacaoSubstituicaoRegistroMagneticoExibir(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3064] Efetuar Instalação/Substituição de Tubete Magnético
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public void validarOSInstalacaoSubstituicaoTubeteMagnetico(OrdemServico ordemServico, boolean veioEncerrarOS){

		try{
			this.getControladorAtendimentoPublico().validarOSInstalacaoSubstituicaoTubeteMagnetico(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3063] Efetuar Instalação/Substituição de Registro Magnético
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public OrdemServico recuperaOSPorIdRegistroMagnetico(Integer idOS){

		try{
			return this.getControladorOrdemServico().recuperaOSPorIdRegistroMagnetico(idOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3063] Efetuar Instalacao/Substituicao de Tubete Magnetico
	 * 
	 * @date 28/08/2012
	 * @author Leonardo Angelim
	 */
	public OrdemServico recuperaOSPorIdTubeteMagnetico(Integer idOS){

		try{
			return this.getControladorOrdemServico().recuperaOSPorIdTubeteMagnetico(idOS);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por verificar se o usuário tem acesso a impressaão de extrato de débito
	 * 
	 * @param usuarioLogado
	 * @param idImovel
	 * @param helper
	 * @return
	 */
	public Boolean isImpressaoExtratoDebitoLiberada(Usuario usuarioLogado, Integer idImovel, ObterDebitoImovelOuClienteHelper helper){

		try{

			return getControladorImovel().isImpressaoExtratoDebitoLiberada(usuarioLogado, idImovel, helper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * [UC0630] [SB0003] Método responsável por verificar e remover os debitos que estão em cobranca
	 * administrativa por uma empresa diversa da empresa do usuário logado
	 * 
	 * @param usuario
	 * @param idImovel
	 * @param helper
	 */
	public void removerDebitosCobAdministrativaEmpresaDiversas(Usuario usuario, Integer idImovel, ObterDebitoImovelOuClienteHelper helper){

		try{

			this.getControladorCobranca().removerDebitosCobAdministrativaEmpresaDiversas(usuario, idImovel, helper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0337] Calculo Consumo Estimado
	 * 
	 * @author Marlos Ribeiro
	 * @param dataLeituraAnterior
	 * @param dataLeituraAtual
	 * @param leituraAnterior
	 * @param leituraAtual
	 * @return Mapa com as chaves: qtdDiasConsumo, consumidoEstimado, totalConsumidoPeriodo
	 */
	public Map<String, BigDecimal> calcularConsumoEstimado(Date dataLeituraAnterior, Date dataLeituraAtual, Integer leituraAnterior,
					Integer leituraAtual){

		try{
			return getControladorMicromedicao().calcularConsumoEstimado(dataLeituraAnterior, dataLeituraAtual, leituraAnterior,
							leituraAtual);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * [UC3070] Filtrar Imóvel Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 07/09/2012
	 */
	public Collection<Empresa> pesquisarEmpresaCobrancaAdministrativa(Collection<Integer> idsEmpresa) throws FachadaException{

		try{
			return getControladorCobranca().pesquisarEmpresaCobrancaAdministrativa(idsEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Imóvel Cobrança Situação pelo Id
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public ImovelCobrancaSituacao pesquisarImovelCobrancaSituacaoPeloId(Integer id){

		try{
			return this.getControladorCobranca().pesquisarImovelCobrancaSituacaoPeloId(id);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0005] Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * Pesquisar Última Cobrança Administrativa do Imóvel
	 * 
	 * @author Saulo Lima
	 * @date 25/07/2013
	 */
	public CobrancaAcaoAtividadeComando pesquisarUltimaCobrancaAdministrativaImovel(Integer imovelId){

		try{
			return this.getControladorCobranca().pesquisarUltimaCobrancaAdministrativaImovel(imovelId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Totalizar Cobrança Documento Ítem filtrando pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarCobrancaDocumentoItemPeloComando(Integer idCobrancaAcaoAtividadeComando, Integer idImovel){

		try{
			return this.getControladorCobranca().totalizarCobrancaDocumentoItemPeloComando(idCobrancaAcaoAtividadeComando, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Contas pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<CobrancaAdministrativaContaHelper> pesquisarContasPeloComandoParaCobrancaAdministrativa(
					Integer idCobrancaAcaoAtividadeComando, Integer idImovel){

		try{
			return this.getControladorCobranca().pesquisarContasPeloComandoParaCobrancaAdministrativa(idCobrancaAcaoAtividadeComando,
							idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Guias pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<CobrancaAdministrativaGuiaHelper> pesquisarGuiasPeloComandoParaCobrancaAdministrativa(
					Integer idCobrancaAcaoAtividadeComando, Integer idImovel){

		try{
			return this.getControladorCobranca().pesquisarGuiasPeloComandoParaCobrancaAdministrativa(idCobrancaAcaoAtividadeComando,
							idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Totalizar Imovel Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao){

		try{
			return this.getControladorCobranca().totalizarImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imóvel Cobrança Administrativa]
	 * Pesquisar Imóvel em Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Collection<ImovelCobrancaSituacao> pesquisarImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro,
					int pageOffset){

		try{

			return this.getControladorCobranca().pesquisarImovelCobrancaAdministrativa(filtro, pageOffset);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Contas Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Object[] pesquisarContasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao){

		try{
			return this.getControladorCobranca().pesquisarContasImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Guias Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Object[] pesquisarGuiasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao){

		try{
			return this.getControladorCobranca().pesquisarGuiasImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imóvel Cobrança Administrativa]
	 * Pesquisar Imóvel em Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Integer pesquisarQuantidadeImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro){

		try{

			return this.getControladorCobranca().pesquisarQuantidadeImovelCobrancaAdministrativa(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0002] - Consultar Dados do Contrato da Empresa
	 * 
	 * @author Anderson Italo
	 * @date 17/09/2012
	 */
	public Collection<CobrancaContrato> pesquisarCobrancaContratoPorEmpresa(Integer idEmpresa){

		try{

			return this.getControladorCobranca().pesquisarCobrancaContratoPorEmpresa(idEmpresa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por exibir a mensagem de procedimento de corte do imovel, caso exista
	 * 
	 * @param idImovel
	 * @return
	 */
	public String obterMsgImovelProcessoCorte(Integer idImovel){

		try{

			return this.getControladorImovel().obterMsgImovelProcessoCorte(idImovel);

		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}

	}

	/**
	 * [UC0XXX] Relatório Débito por Reponsável
	 * 
	 * @author Anderson Italo
	 * @date 25/09/2012
	 */
	public Collection<Object[]> pesquisarRelatorioDebitoPorReponsavel(FiltroRelatorioDebitoPorResponsavelHelper filtro){

		try{

			return this.getControladorCadastro().pesquisarRelatorioDebitoPorReponsavel(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Relatório Débito por Reponsável
	 * 
	 * @author Anderson Italo
	 * @date 25/09/2012
	 */
	public Integer pesquisarTotalRegistrosRelatorioDebitoPorReponsavel(FiltroRelatorioDebitoPorResponsavelHelper filtro){

		try{

			return this.getControladorCadastro().pesquisarTotalRegistrosRelatorioDebitoPorReponsavel(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa a soma dos valores das multas cobradas para a conta.
	 * 
	 * @author Anderson Italo
	 * @date 25/09/2012
	 */
	public BigDecimal pesquisarValorMultasCobradas(int idConta){

		try{

			return this.getControladorFaturamento().pesquisarValorMultasCobradas(idConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade Author: Rafael Santos
	 * Silva Data:05/01/2006 Calcula os acrescimmos por
	 * Impontualidade(multa,juros de mora e atualização monetaria)
	 * 
	 * @param anoMesReferenciaDebito
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param valorDebito
	 * @param indicadorMulta
	 * @return
	 * @throws ControladorException
	 */
	public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade(int anoMesReferenciaDebito, Date dataVencimento,
					Date dataPagamento, BigDecimal valorDebito, BigDecimal valorMultasCobradas, short indicadorMulta,
					String anoMesArrecadacao, Integer idConta, Short indicadorMultaAcrescimo, Short indicadorJurosMora,
					Short indicadorAtualizaoMonetaria){

		try{

			return this.getControladorCobranca().calcularAcrescimoPorImpontualidadeBancoDeDados(anoMesReferenciaDebito, dataVencimento,
							dataPagamento, valorDebito, valorMultasCobradas, indicadorMulta, anoMesArrecadacao, idConta, null, null,
							indicadorMultaAcrescimo, indicadorJurosMora, indicadorAtualizaoMonetaria);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3076] Consultar Histórico da Manutenção da Ligação de Água
	 * 
	 * @author Luciano Galvão
	 * @param helper
	 * @date 31/08/2012
	 */
	public List<HistoricoManutencaoLigacaoHelper> consultarHistoricoManutencaoLigacao(ConsultarHistoricoManutencaoLigacaoHelper helper,
					Integer numeroPagina){

		try{
			return this.getControladorLigacaoAgua().consultarHistoricoManutencaoLigacao(helper, numeroPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3076] Retorna a quantidade de registros retornados pela consulta do Histórico da
	 * Manutenção da Ligação de Água
	 * 
	 * @author Luciano Galvao
	 * @date 19/09/2012
	 * @throws ControladorException
	 */
	public Integer consultarTotalRegistrosHistoricoManutencaoLigacao(ConsultarHistoricoManutencaoLigacaoHelper helper){

		try{
			return this.getControladorLigacaoAgua().consultarTotalRegistrosHistoricoManutencaoLigacao(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer verificarExistenciaHidrometroInstalacaoHistoricoTipoAgua(Integer idImovel){

		try{
			return this.getControladorMicromedicao().verificarExistenciaHidrometroInstalacaoHistoricoTipoAgua(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarIdHidrometroInstalacaoHistorico(Integer idImovel) throws ControladorException{

		try{
			return this.getControladorLigacaoAgua().pesquisarIdHidrometroInstalacaoHistorico(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0247] Consultar Pagamentos
	 * Retornar Valor de Remuneração da Conta Histórico
	 * 
	 * @author Hebert Falcão
	 * @date 11/10/2012
	 */
	public BigDecimal retornarValorRemuneracaoContaHistorico(Integer idConta, Integer referencia){

		try{
			return this.getControladorArrecadacao().retornarValorRemuneracaoContaHistorico(idConta, referencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0247] Consultar Pagamentos
	 * Retornar Valor de Remuneração da Conta
	 * 
	 * @author Hebert Falcão
	 * @date 11/10/2012
	 */
	public BigDecimal retornarValorRemuneracaoConta(Integer idConta, Integer referencia){

		try{
			return this.getControladorArrecadacao().retornarValorRemuneracaoConta(idConta, referencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short obterCodigoRota(Integer idRota){

		try{

			return this.getControladorImovel().obterCodigoRota(idRota);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Pesquisar Resolução de Diretoria Parâmetros Pagamento À Vista
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista pesquisarResolucaoDiretoriaParametrosPagamentoAVista(Integer idResolucaoDiretoria,
					Date dataPagamento){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaParametrosPagamentoAVista(idResolucaoDiretoria, dataPagamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Resolução de Diretoria Parâmetros Pagamento À Vista
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public Collection pesquisarResolucaoDiretoriaParametrosPagamentoAVista(Integer idResolucaoDiretoria){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaParametrosPagamentoAVista(idResolucaoDiretoria);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * Pesquisar mensagem para pagamento à vista
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista pesquisarMensagemExtratoParcelamentoPagamentoAVista(Integer idResolucaoDiretoria,
					Date dataEmissao){

		try{
			return this.getControladorCobranca().pesquisarMensagemExtratoParcelamentoPagamentoAVista(idResolucaoDiretoria, dataEmissao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisar Resolução de Diretoria Parâmetros Valor da Entrada
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosValorEntrada pesquisarResolucaoDiretoriaParametrosValorEntrada(Integer idResolucaoDiretoria,
					Date dataNegociacao){

		try{
			return this.getControladorCobranca().pesquisarResolucaoDiretoriaParametrosValorEntrada(idResolucaoDiretoria, dataNegociacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que realiza o ajuste do faturamento de tarifas da DESO para referência 201211
	 * 
	 * @author Yara Souza
	 * @date 14/11/2012
	 */
	public void ajustarFaturamentoTarifasDeso(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo, Integer anoMesReferencia){

		for(FaturamentoGrupo faturamentoGrupo : colecaoFaturamentoGrupo){

			this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_FATURAMENTO_TARIFAS_DESO,
							ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {faturamentoGrupo.getId(), anoMesReferencia});
		}
	}

	/**
	 * Método consultarResumoLigacoesEconomiasGCS
	 * <p>
	 * Esse método implementa consulta dos dados para relatorio de resumo ligacoes economia tal como
	 * no GCS.
	 * </p>
	 * RASTREIO: [OC897714][UC269]
	 * 
	 * @param parametrosPesquisa
	 *            dados do formulario de pesquisa,
	 *            {@link InformarDadosGeracaoRelatorioConsultaHelper}.
	 * @return Lista de {@link DetalheLigacaoEconomiaGCSHelper}.
	 * @author Marlos Ribeiro
	 * @since 20/11/2012
	 */
	public List<DetalheLigacaoEconomiaGCSHelper> consultarDetalhesLigacoesEconomiasGCS(
					InformarDadosGeracaoRelatorioConsultaHelper parametrosPesquisa, Integer paginacao){

		try{
			return this.getControladorGerencialCadastro().consultarDetalhesLigacoesEconomiasGCS(parametrosPesquisa, paginacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método consultarResumoLigacoesEconomiasGCS
	 * <p>
	 * Esse método implementa consulta dos dados para relatorio de resumo ligacoes economia tal como
	 * no GCS.
	 * </p>
	 * RASTREIO: [OC897714][UC269]
	 * 
	 * @param parametrosPesquisa
	 *            dados do formulario de pesquisa,
	 *            {@link InformarDadosGeracaoRelatorioConsultaHelper}.
	 * @return Lista de {@link DetalheLigacaoEconomiaGCSHelper}.
	 * @author Marlos Ribeiro
	 * @since 21/11/2012
	 */
	public List<SumarioLigacaoPorCategoriaGCSHelper> consultarSumarioLigacoesPorCategoriaGCS(
					InformarDadosGeracaoRelatorioConsultaHelper parametrosPesquisa){

		try{
			return this.getControladorGerencialCadastro().consultarSumarioLigacoesPorCategoriaGCS(parametrosPesquisa);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Guias de pagamento de parcelamento de cobrança bancária
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * [FS0004] - Verificar existência de guia de parcelamento de cobrança bancária
	 * 
	 * @author Josenildo Neves
	 * @date 22/11/2012
	 */
	public boolean verificarGuiaPagamentoParcelamentoCobrancaBancaria(Integer idGuiaPagamento, Short numeroPrestacoes){

		try{
			return this.getControladorCobranca().verificarGuiaPagamentoParcelamentoCobrancaBancaria(idGuiaPagamento, numeroPrestacoes);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public void cancelarDebitosRotinaAjusteFaturamentoDeso(){

		this.enviarMensagemControladorBatch(MetodosBatch.CANCELAR_DEBITO_A_COBRAR_AJUSTE_FATURAMENTO_DESO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {});
	}

	/**
	 * [UC0084] Gerar Faturamento Imediato
	 * [SB0019] Formatar Descrição do Débito
	 * 
	 * @author Hebert Falcão
	 * @date 30/11/2012
	 */
	public String formatarDescricaoDebitoCobrado(Integer idConta, Integer idDebitoTipo, Short numeroPrestacaoDebito, Short numeroPrestacao){

		try{
			return this.getControladorFaturamento().formatarDescricaoDebitoCobrado(idConta, idDebitoTipo, numeroPrestacaoDebito,
							numeroPrestacao);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0040] Verificar existência de itens de parcelamento anterior na mesma referência
	 * 
	 * @author Hebert Falcão
	 * @date 03/12/2012
	 */
	public void verificarExistenciaDeItensDeParcelamentoAnteriorNaMesmaReferencia(Integer idImovel,
					Collection<ContaValoresHelper> colecaoContaValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar){

		try{
			this.getControladorCobranca().verificarExistenciaDeItensDeParcelamentoAnteriorNaMesmaReferencia(idImovel,
							colecaoContaValoresHelper, colecaoGuiaPagamentoValoresHelper, colecaoDebitoACobrar, colecaoCreditoARealizar);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public int consultarQuantidadeRegistrosDeLiquidosRecebiveis(Date dataPagamentoInicial, Date dataPagamentoFinal){

		try{
			return this.getControladorCobranca().consultarQuantidadeRegistrosDeLiquidosRecebiveis(dataPagamentoInicial, dataPagamentoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public List<RelatorioLiquidosRecebiveisHelper> consultarRegistrosDeLiquidosRecebiveisAnalitico(Date dataPagamentoInicial,
					Date dataPagamentoFinal){

		try{
			return this.getControladorCobranca().consultarRegistrosDeLiquidosRecebiveisAnalitico(dataPagamentoInicial, dataPagamentoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public List<RelatorioLiquidosRecebiveisHelper> consultarRegistrosDeLiquidosRecebiveisSintetico(Date dataPagamentoInicial,
					Date dataPagamentoFinal){

		try{
			return this.getControladorCobranca().consultarRegistrosDeLiquidosRecebiveisSintetico(dataPagamentoInicial, dataPagamentoFinal);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3023] Manter Boleto Bancário
	 * [SB000B] Apresentar Boletos Não Agrupados
	 * Verifica boleto agregador de contas com situação correspondente a baixado e protestado
	 * 
	 * @author Hebert Falcão
	 * @date 04/12/2012
	 */
	public boolean verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(Integer idBoletoBancario){

		try{
			return this.getControladorCobranca().verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(idBoletoBancario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por obter um cobrança documento gerado pela acao de cobranca
	 * 
	 * @param cobrancaDocumento
	 * @return
	 */
	public CobrancaDocumento obterCobrancaDocumentoGeradoAcaoCobranca(CobrancaDocumento cobrancaDocumento){

		try{

			return this.getControladorCobranca().obterCobrancaDocumentoGeradoAcaoCobranca(cobrancaDocumento);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Método responsável por obter o periodo do débito de um parcelamento
	 * 
	 * @param idParcelamento
	 * @return
	 */
	public Map<String, Integer> obterPeriodoDebitoParcelmento(Integer idParcelamento){

		try{

			return this.getControladorCobranca().obterPeriodoDebitoParcelmento(idParcelamento);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}

	}

	/**
	 * retorna uma coleção com todos os parcelamentos de um determinado imovel
	 * 
	 * @author Ítalo Almeida
	 * @date 12/12/2012
	 */
	public Collection<Parcelamento> consultarImovelParcelamentoDebito(int imovelId){

		try{
			return this.getControladorCobranca().consultarImovelParcelamentoDebito(imovelId);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public void verificarImoveisComErroRelacao1e2(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo, Integer anoMesReferencia){

		this.enviarMensagemControladorBatch(MetodosBatch.VERIFICAR_FATURAMENTO_IMOVEIS_COM_SERVICO_COBRADO_ERRADO_DESO_RELACAO_UM_E_DOIS,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {colecaoFaturamentoGrupo, anoMesReferencia});

	}

	public void verificarImoveisComErroRelacao5(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo, Integer anoMesReferencia){

		this.enviarMensagemControladorBatch(MetodosBatch.VERIFICAR_FATURAMENTO_IMOVEIS_COM_SERVICO_COBRADO_ERRADO_DESO_RELACAO_CINCO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {colecaoFaturamentoGrupo, anoMesReferencia});

	}

	public void ajustarFaturamentoServicosComValorTruncadoDeso(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo,
					Integer anoMesReferencia){

		for(FaturamentoGrupo faturamentoGrupo : colecaoFaturamentoGrupo){

			this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_FATURAMENTO_SERVICOS_VALOR_TRUNCADO_DESO,
							ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {faturamentoGrupo.getId(), anoMesReferencia});
		}
	}

	/**
	 * Recupera o tipo de relação do cliente e imóvel para exibição no relatório de ordem de
	 * serviço.
	 * 
	 * @param idOSLayout
	 * @date 26/12/2012
	 * @author Ítalo Almeida
	 */
	public String recuperaRelacaoOSClienteImovel(Integer idOSLayout){

		try{

			return this.getControladorOrdemServico().recuperaRelacaoOSClienteImovel(idOSLayout);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}

	}

	/**
	 * Método que realiza o ajuste do faturamento de contas.
	 * 
	 * @author Yara Souza
	 * @date 26/11/2012
	 */

	public void executarAjusteConta(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo){

		for(FaturamentoGrupo faturamentoGrupo : colecaoFaturamentoGrupo){

			this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_FATURAMENTO_CONTA, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
							new Object[] {faturamentoGrupo.getId()});
		}
	}

	public void executarAjusteBaixarPagamentosAMaior(){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_PAGAMENTOS_A_MAIOR, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {});

	}

	public Integer retornaAnoMesFaturamentoGrupo(Integer idImovel){

		try{
			return this.getControladorFaturamento().retornaAnoMesFaturamentoGrupo(idImovel);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * [UC0468] Consultar Ordem de Serviço
	 * [SB0002] - Habilitar Emissão da OS
	 * Retorna <true> se a opção de Imprimir OS deve estar habilitada. Retorna <false>, caso
	 * contrário
	 * 
	 * @author Luciano Galvao
	 * @throws ControladorException
	 * @date 17/12/2012
	 */
	public boolean verificarHabilitacaoEmissaoOS(OrdemServico ordemServico){

		try{

			return this.getControladorOrdemServico().verificarHabilitacaoEmissaoOS(ordemServico);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}
	}

	/**
	 * Gerar Relatório de Imóveis Outros Critérios Contador
	 * 
	 * @author Ítalo Almeida
	 * @date 10/01/2013
	 * @param idImovelCondominio
	 * @param idImovelPrincipal
	 * @param idNomeConta
	 * @param idSituacaoLigacaoAgua
	 * @param consumoMinimoInicialAgua
	 * @param consumoMinimoFinalAgua
	 * @param idSituacaoLigacaoEsgoto
	 * @param consumoMinimoInicialEsgoto
	 * @param consumoMinimoFinalEsgoto
	 * @param intervaloValorPercentualEsgotoInicial
	 * @param intervaloValorPercentualEsgotoFinal
	 * @param intervaloMediaMinimaImovelInicial
	 * @param intervaloMediaMinimaImovelFinal
	 * @param intervaloMediaMinimaHidrometroInicial
	 * @param intervaloMediaMinimaHidrometroFinal
	 * @param idImovelPerfil
	 * @param idPocoTipo
	 * @param idFaturamentoSituacaoTipo
	 * @param idCobrancaSituacaoTipo
	 * @param idSituacaoEspecialCobranca
	 * @param idEloAnormalidade
	 * @param areaConstruidaInicial
	 * @param areaConstruidaFinal
	 * @param idCadastroOcorrencia
	 * @param idConsumoTarifa
	 * @param idGerenciaRegional
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param setorComercialInicial
	 * @param setorComercialFinal
	 * @param quadraInicial
	 * @param quadraFinal
	 * @param loteOrigem
	 * @param loteDestno
	 * @param cep
	 * @param logradouro
	 * @param bairro
	 * @param municipio
	 * @param idTipoMedicao
	 * @param indicadorMedicao
	 * @param idSubCategoria
	 * @param idCategoria
	 * @param quantidadeEconomiasInicial
	 * @param quantidadeEconomiasFinal
	 * @param diaVencimento
	 * @param idCliente
	 * @param idClienteTipo
	 * @param idClienteRelacaoTipo
	 * @param numeroPontosInicial
	 * @param numeroPontosFinal
	 * @param numeroMoradoresInicial
	 * @param numeroMoradoresFinal
	 * @param idAreaConstruidaFaixa
	 * @return
	 * @throws ControladorException
	 */
	public int gerarRelatorioImovelOutrosCriteriosCount(String idImovelCondominio, String idImovelPrincipal,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio, String cdRotaInicial,
					String cdRotaFinal, String sequencialRotaInicial, String sequencialRotaFinal, String segmentoInicial,
					String segmentoFinal, String subloteInicial, String subloteFinal, String consumoFixadoEsgotoPocoInicial,
					String consumoFixadoEsgotoPocoFinal){

		try{

			return this.getControladorImovel().gerarRelatorioImovelOutrosCriteriosCount(idImovelCondominio, idImovelPrincipal,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria,
							idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, cdRotaInicial, cdRotaFinal, sequencialRotaInicial,
							sequencialRotaFinal, segmentoInicial, segmentoFinal, subloteInicial, subloteFinal,
							consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}

	}

	public void executarAjusteContasRetificar(Collection<FaturamentoGrupo> colecaoFaturamentoGrupo){

		for(FaturamentoGrupo faturamentoGrupo : colecaoFaturamentoGrupo){

			this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTA_RETIFICAR, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
							new Object[] {faturamentoGrupo.getId()});
		}

	}

	/**
	 * [UC3077] Gerar Relatório Posição de Contas a Receber Contábil
	 * 
	 * @author Anderson Italo
	 * @date 09/07/2012
	 */
	public List<Object[]> pesquisarContasRelatorioPosicaoContasAReceberContabil(FiltroRelatorioPosicaoContasAReceberContabil filtro){

		List<Object[]> colecaoRetorno = null;
		try{

			colecaoRetorno = this.getControladorFinanceiro().pesquisarContasRelatorioPosicaoContasAReceberContabil(filtro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return colecaoRetorno;
	}

	/**
	 * [UC3077] Gerar Relatório Posição de Contas a Receber Contábil
	 * 
	 * @author Anderson Italo
	 * @date 20/11/2012
	 */
	public Collection<Object[]> obterDebitosACobrarRelatorioPosicaoContasAReceberContabil(Integer idGerenciaRegional, Integer idLocalidade,
					Integer anoMesReferencia){

		Collection<Object[]> colecaoRetorno = null;
		try{

			colecaoRetorno = this.getControladorFinanceiro().obterDebitosACobrarRelatorioPosicaoContasAReceberContabil(idGerenciaRegional,
							idLocalidade, anoMesReferencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return colecaoRetorno;
	}

	public void executarAjustarContabilidadeArrecadacao(Integer limite){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTABILIDADE_ARRECADACAO_DESO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {limite});
	}

	public void executarConversaoContasParaGuiaDePagamento(Integer idClienteResponsavel, Integer idImovel,
					Collection<IntervaloReferenciaHelper> colecaoReferencias, BigDecimal valorJuros){

		this.enviarMensagemControladorBatch(MetodosBatch.EXECUTAR_CONVERSAO_CONTAS_PARA_GUIA_DE_PAGAMENTO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {idClienteResponsavel, idImovel, colecaoReferencias, valorJuros});
	}

	public void gerarResumoLigacoesEconomias(Integer referenciaFaturamento, Usuario usuario){

		try{

			// Iniciar Batch Resumo Ligações Economias
			Object[] parametros = new Object[2];
			parametros[0] = referenciaFaturamento;
			parametros[1] = usuario;
			this.getControladorBatch().iniciarProcesso(Funcionalidade.BATCH_ENCERRAR_FATURAMENTO_GERAR_RESUMO_LIGACOES_ECONOMIAS,
							parametros);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void gerarResumoAnormalidades(Integer referenciaFaturamento, Usuario usuario){

		try{

			// Iniciar Batch Resumo Ligações Economias
			Object[] parametros = new Object[2];
			parametros[0] = referenciaFaturamento;
			parametros[1] = usuario;

			this.getControladorBatch().iniciarProcesso(Funcionalidade.GERAR_RESUMO_ANORMALIDADES, parametros);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void executarCancelarDebitos(){

		this.enviarMensagemControladorBatch(MetodosBatch.CANCELAR_DEBITOS, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {});
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioAguaEsgoto(String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional){

		try{
			return getControladorCobranca().obterSomatorioAguaEsgoto(idLocalidade, idUnidadeNegocio, idGerenciaRegional);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 28/12/2012
	 */
	public Map<Categoria, BigDecimal> calcularReajustaConta(String localidade, String unidadeNegocio, String gerenciaRegional,
					boolean isFinanciamento){

		try{
			return getControladorCobranca().calcularReajustaConta(localidade, unidadeNegocio, gerenciaRegional, isFinanciamento);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioValorDebitosCobradosFinanciamentoOuParcelamento(String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional, boolean opcaoConsultaFinanciamento){

		try{
			return getControladorCobranca().obterSomatorioValorDebitosCobradosFinanciamentoOuParcelamento(idLocalidade, idUnidadeNegocio,
							idGerenciaRegional, opcaoConsultaFinanciamento);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento(String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional, boolean isFinanciado){

		try{
			return getControladorCobranca().obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento(idLocalidade, idUnidadeNegocio,
							idGerenciaRegional, isFinanciado);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [FS0012] – Verifica existência de imóveis de localidades associadas a concessionárias
	 * diversas
	 * 
	 * @author Anderson Italo
	 * @date 23/02/2013
	 */
	public void verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(String idsContas, String idsGuias, String idsDebitos,
					String idsCreditos){

		try{
			this.getControladorFaturamento().verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(idsContas, idsGuias, idsDebitos,
							idsCreditos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por calcular a quantidade de registros do relatório saldo de contas a
	 * receber contabil
	 * 
	 * @param filtro
	 * @return
	 */
	public Integer calcularQtdaRegistrosRelatorioSaldoContasAReceberContabil(Map<String, Object> filtro){

		try{

			return this.getControladorFinanceiro().calcularQtdaRegistrosRelatorioSaldoContasAReceberContabil(filtro);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}

	}

	/**
	 * Método responsável por obter os dados do relatório saldo de contas a receber contabil
	 * 
	 * @param filtro
	 * @return
	 */
	public List<ContaAReceberContabil> obterDadosRelatorioSaldoContasAReceberContabil(Map<String, Object> filtro){

		try{

			return this.getControladorFinanceiro().obterDadosRelatorioSaldoContasAReceberContabil(filtro);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}

	}

	/**
	 * [FS0042] - Verificar existência de créditos a realizar correspondentes a desconto nos
	 * acréscimos concedido no parcelamento
	 * 
	 * @author Yara Souza
	 * @throws ControladorException
	 * @date 19/01/2013
	 */

	public Collection verificarCreditoARealiazarComConcessaoDesconto(Collection colecaoCreditoARealizar){

		try{
			return this.getControladorCobranca().verificarCreditoARealiazarComConcessaoDesconto(colecaoCreditoARealizar);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * Verifica permissão especial para informar o percentual de cobrança do serviço excedente
	 * 
	 * @author Anderson Italo
	 * @date 27/02/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoInformarPercentualCobrancaExcedente(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInformarPercentualCobrancaExcedente(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<PercentualCobrancaHelper> obterPercentuaisCobranca(){

		try{
			return getControladorAtendimentoPublico().obterPercentuaisCobranca();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Short obterQuantidadeParcelasMaxima(){

		try{
			return getControladorAtendimentoPublico().obterQuantidadeParcelasMaxima();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void verificarQuantidadeParcelas(Usuario usuario, Short qtdParcelas){

		try{
			getControladorAtendimentoPublico().verificarQuantidadeParcelas(usuario, qtdParcelas);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3080] Classificar em Lote Pagamentos Não Classificados
	 * 2.6. Situação do Pagamento
	 * 
	 * @author Josenildo Neves
	 * @since 29/11/2012
	 * @return listaPagamentoSituacao
	 * @throws ControladorException
	 */
	public Collection<PagamentoSituacao> pesquisarPagamentoSituacao(){

		try{
			return this.getControladorArrecadacao().pesquisarPagamentoSituacao();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3080] Classificar em Lote Pagamentos Não Classificados.
	 * 
	 * @author Josenildo Neves
	 * @date 30/11/2012
	 */
	public Integer pesquisarQuantidadePagamentos(ClassificarLotePagamentosNaoClassificadosHelper helper){

		try{
			return this.getControladorArrecadacao().pesquisarQuantidadePagamentos(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Action responsável por exibir a página de Classificar em Lote Pagamentos Não Classificados.
	 * [UC3080] Classificar em Lote Pagamentos Não Classificados.
	 * 
	 * @author Josenildo Neves
	 * @param gerarDebitoACobrar
	 * @date 30/11/2012
	 */
	public Collection<ClassificarPagamentosNaoClassificadosHelper> classificarLotePagamentosNaoClassificados(
					ClassificarLotePagamentosNaoClassificadosHelper helper, Usuario usuario, boolean gerarDebitoACobrar){

		try{
			return this.getControladorArrecadacao().classificarLotePagamentosNaoClassificados(helper, usuario, gerarDebitoACobrar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Rotina para ajuste de caso errados na base OC1205061
	 * 
	 * @author Saulo Lima
	 * @since 11/12/2013
	 * @throws ControladorException
	 */
	public void classificarPagamentosAjuste(){

		try{
			this.getControladorArrecadacao().classificarPagamentosAjuste();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param parcelamento
	 * @return
	 */

	public boolean podeDesfazer(Parcelamento parcelamento){

		try{
			return this.getControladorCobranca().podeDesfazer(parcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public void executarAjusteRetificarContasRetirarDebitoRateioDuplicado(){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTAS_RETIFICAR_RETIRAR_DEBITO_RATEIO_DUPLICADO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {});
	}

	/**
	 * Método responsável por agrupar e ordenar os débitos a cobra
	 * 
	 * @param colecaoDebitoACobrar
	 * @return
	 */
	public Collection<DebitoACobrar> agruparDebitoACobrar(Collection<DebitoACobrar> colecaoDebitoACobrar, Boolean usarValorTotalDebito){

		try{

			return this.getControladorFaturamento().agruparDebitoACobrar(colecaoDebitoACobrar, usarValorTotalDebito);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	public void executarInserirDebitos(){

		this.enviarMensagemControladorBatch(MetodosBatch.INSERIR_DEBITOS, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {});
	}

	/**
	 * Método responsável por listar CreditoOrigem a partir do tipo de crédito
	 * 
	 * @param idCreditoTipo
	 * @param indicadorUsoLivre
	 * @return
	 */
	public Collection<CreditoOrigem> listarCreditoOrigem(Integer idCreditoTipo, Short indicadorUsoLivre){

		try{

			return this.getControladorFaturamento().listarCreditoOrigem(idCreditoTipo, indicadorUsoLivre);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Método reponsável por obter o valor total disponivel de credito a realizar do imóvel por tipo
	 * 
	 * @param idImovel
	 * @return
	 */
	public Map<Integer, BigDecimal> obterValorTotalDisponivelCreditoArealizarImovel(Integer idImovel){

		try{

			return this.getControladorFaturamento().obterValorTotalDisponivelCreditoArealizarImovel(idImovel);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Insere uma coleção de pagamentos no sistema
	 * [UC0265] Inserir Pagamentos
	 * Pesquisa a conta do imóvel com a referência informada pelo usuário
	 * [FS0012] - Verificar existência da conta
	 */
	public ContaHistorico pesquisarContaHistoricoDigitada(String idImovel, String referenciaConta){

		try{
			return this.getControladorFaturamento().pesquisarContaHistoricoDigitada(idImovel, referenciaConta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarCepFiltroCount(String nomeLogradouro, String codigoLado, String faixa, String nomeMunicipio){

		try{
			return this.getControladorEndereco().pesquisarCepFiltroCount(nomeLogradouro, codigoLado, faixa, nomeMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection pesquisarCepFiltro(String nomeLogradouro, String codigoLado, String faixa, Integer numeroPaginas, String nomeMunicipio){

		try{
			return this.getControladorEndereco().pesquisarCepFiltro(nomeLogradouro, codigoLado, faixa, numeroPaginas, nomeMunicipio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por obter os dados do histograma de agua e esgoto
	 * 
	 * @param filtroAgua
	 * @param filtroEsgoto
	 * @return
	 */
	public StringBuffer obterDadosHistogramaAguaEsgotoEconomia(FiltrarEmitirHistogramaAguaEconomiaHelper filtroAgua,
					FiltrarEmitirHistogramaEsgotoEconomiaHelper filtroEsgoto){

		try{

			return this.getControladorRelatorioFaturamento().obterDadosHistogramaAguaEsgotoEconomia(filtroAgua, filtroEsgoto);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	public Object[] listarSomatorioEValorFaturasDebito(Integer idImovel) throws ControladorException{

		try{
			return this.getControladorFaturamento().listarSomatorioEValorFaturasDebito(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/*
	 * Obter Consumo Médio passando id Imóvel
	 */

	public Integer obterConsumoMedio(Integer idImovel){

		Integer consumoMedio = null;

		try{
			consumoMedio = this.getControladorMicromedicao().obterConsumoMedio(idImovel);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return consumoMedio;

	}

	public ConsumoHistorico obterUltimoConsumoHistoricoImovel(String idImovel) throws ControladorException{

		ConsumoHistorico consumoHistorico = null;

		try{

			consumoHistorico = this.getControladorMicromedicao().obterUltimoConsumoHistoricoImovel(idImovel);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return consumoHistorico;
	}

	public void atualizarUltimoConsumoHistorico(Integer idConsumoHistorico, Integer valor) throws ControladorException{

		try{

			this.getControladorMicromedicao().atualizarUltimoConsumoHistorico(idConsumoHistorico, valor);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0265] Inserir Pagamentos
	 * [FS0026] – Verificar agente caixa de empresa
	 * [UC0235][FS0011] e [UC0238][FS0010]
	 * Método responsável por verificar se o agente é caixa de empresa
	 * 
	 * @param idArrecadador
	 * @param idUsuario
	 * @return
	 */
	public Boolean isAgenteCaixaDeEmpresaAutorizado(Integer idArrecadador, Integer idUsuario){

		try{

			return this.getControladorArrecadacao().isAgenteCaixaDeEmpresaAutorizado(idArrecadador, idUsuario);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0235][FS0012]
	 * Método responsável por Verificar existência de aviso de arrecadador do tipo caixa de empresa
	 * 
	 * @param idArrecadador
	 * @param dataLancamento
	 * @return
	 */
	public Boolean existeAvisoArrecadadorTipoCaixaEmpresa(Integer idArrecadador, Date dataLancamento){

		try{

			return this.getControladorArrecadacao().existeAvisoArrecadadorTipoCaixaEmpresa(idArrecadador, dataLancamento);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC3014] Emitir Declaração Anual Quitação Débitos
	 * [SB0001] Emitir Declaração Anual de Quitação de Débitos
	 * 
	 * @author Hebert Falcão
	 * @created 27/04/2013
	 */
	public Integer pesquisarQuitacaoDebitoAnualParaEmicaoQtd(Integer idFaturamentoGrupo, Integer anoReferencia){

		try{
			return this.getControladorFaturamento().pesquisarQuitacaoDebitoAnualParaEmicaoQtd(idFaturamentoGrupo, anoReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void gerarResumoFaturamentoSimulacaoAjusteCasal(FaturamentoGrupo faturamentoGrupo, Integer anoMesCorrente,
					Integer idFaturamentoAtividadeCronograma){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_RESUMO_FATURAMENTO_SIMULACAO_AJUSTE_GRUPO_CASAL,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {faturamentoGrupo, anoMesCorrente, idFaturamentoAtividadeCronograma});

	}

	public void desfazerPreFaturamentoPorGrupoERef(){

		this.enviarMensagemControladorBatch(MetodosBatch.DESFAZER_PRE_FATURAMENTO_POR_GRUPO_REF,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {});
	}

	/**
	 * [UC3095] Apresentar Quadro Comparativo Faturamento e Arrecadação
	 * Consulta o quadro comparativo de faturamento e arrecadação a partir do filtro informado pelo
	 * usuário
	 * 
	 * @author Luciano Galvao
	 * @date 07/05/2013
	 */
	public Collection<QuadroComparativoFaturamentoArrecadacaoHelper> consultarQuadroComparativoFaturamentoArrecadacao(
					FiltroQuadroComparativoFaturamentoArrecadacaoHelper filtro){

		try{
			return this.getControladorGerencial().consultarQuadroComparativoFaturamentoArrecadacao(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Collection<LigacaoEsgotoPerfil> listarLigacaoEsgotoPerfil(){

		try{
			return getControladorRelatorioFaturamento().listarLigacaoEsgotoPerfil();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remuneração do Legado Cobrança Administrativa - CASAL
	 * 
	 * @author Hebert Falcão
	 * @date 22/0/2013
	 */
	public void ajusteRemuneracaoDoLegadoCobrancaAdministrativaCASAL(){

		try{
			this.getControladorArrecadacao().ajusteRemuneracaoDoLegadoCobrancaAdministrativaCASAL();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void executarCancelamentoDebitoACobrar(){

		try{
			this.getControladorFaturamento().executarCancelamentoDebitoACobrar();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Ajuste migração Cobrança Administrativa - CASAL
	 * 
	 * @author Yara Souza
	 * @date 28/05/2013
	 */
	public void executarAjusteValorDebitoCobradoCasal(Integer caso){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_VALOR_DEBITOS_COBRADOS_CASAL,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {caso});

	}

	/**
	 * Ajuste migração Cobrança Administrativa - CASAL
	 * 
	 * @author Yara Souza
	 * @date 28/05/2013
	 */
	public void executarAjusteHidrometroInstaladoMeioCicloFaturamento(String idListaGrupos, Integer anoMesReferencia){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTAS_PRE_FAT, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {idListaGrupos, anoMesReferencia});

	}

	/**
	 * [UC0188][FS0012]
	 * Método responsável por Verificar existência de aviso de arrecadador do tipo caixa de empresa
	 * 
	 * @param idArrecadador
	 * @param dataLancamento
	 * @return
	 */
	public void atualizarVencimentoGuiaPagamentoPrestacao(
					HashMap<GuiaPagamentoPrestacaoHelper, Date> hashMapGuiasPrestacoesVencimentoAlterado){

		try{
			getControladorArrecadacao().atualizarVencimentoGuiaPagamentoPrestacao(hashMapGuiasPrestacoesVencimentoAlterado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método pesquisarHistogramaEsgotoEconomiaDTO
	 * <p>
	 * Esse método implementa a pesquisa dos dados para o relatorio de Histograma para esgoto
	 * economia
	 * </p>
	 * RASTREIO: [OC1073038][UC6006]
	 * 
	 * @param filtro
	 * @return
	 * @author Marlos Ribeiro
	 * @since 06/06/2013
	 */
	public Collection<HistogramaEsgotoEconomiaDTO> pesquisarHistogramaEsgotoEconomiaDTO(FiltrarEmitirHistogramaEsgotoEconomiaHelper filtro){

		try{
			return this.getControladorRelatorioFaturamento().pesquisarHistogramaEsgotoEconomiaDTO(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que verifica a permissão do usuário a uma determinada funcionalidade
	 * 
	 * @author Ítalo Almeida
	 * @date 28/06/2013
	 */
	public boolean verificarPermissaoFuncionalidadeUsuario(Integer idUsuario, String descricaoCaminhoOperacao,
					String descricaoCaminhoFuncionalidade){

		try{
			return this.getControladorUsuario().verificarPermissaoFuncionalidadeUsuario(idUsuario, descricaoCaminhoOperacao,
							descricaoCaminhoFuncionalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Ordena uma coleção de clientes a partir do nome de forma alfabética
	 * 
	 * @author Luciano Galvao
	 * @date 28/06/2013
	 */
	public Collection ordernarColecaoClientesPorNome(Collection<Cliente> colecaoCliente){

		return this.getControladorCliente().ordernarColecaoClientesPorNome(colecaoCliente);
	}

	/**
	 * Método pesquisarRota
	 * <p>
	 * Esse método implementa a pesquisa de rota pelo ID
	 * </p>
	 * RASTREIO: [OC1048031]
	 * 
	 * @param filtro
	 * @return
	 * @author Yara Souza
	 * @since 28/06/2013
	 */

	public String obterRota(Integer idRota){

		try{

			return this.getControladorImovel().obterRota(idRota);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	public void removerCep(String[] ids, String pacoteNomeObjeto, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper){

		// TODO Auto-generated method stub
		try{
			this.getControladorUtil().remover(ids, pacoteNomeObjeto, operacaoEfetuada, acaoUsuarioHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void atualizarCep(Cep cep){

		// TODO Auto-generated method stub
		try{
			this.getControladorUtil().atualizar(cep);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void atualizarCep(Cep cep, Usuario usuarioLogado) throws ControladorException{

		ControladorEnderecoSEJB controladorEndereco = new ControladorEnderecoSEJB();
		try{
			controladorEndereco.atualizarCep(cep, usuarioLogado);
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Collection<Object[]> pesquisarConcessionariaPorArrecadadorMovimento(Integer idArrecadorMovimento){

		try{
			return this.getControladorArrecadacao().pesquisarConcessionariaPorArrecadadorMovimento(idArrecadorMovimento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3096] AcquaGIS GetDetalheOS
	 * 
	 * @param filtro
	 * @return
	 * @throws ControladorException
	 */
	public OrdemServicoDetalhesJSONHelper pesquisarOrdemServicoDetalhesWebService(FiltrarOrdemServicoHelper filtro){

		try{
			return this.getControladorOrdemServico().pesquisarOrdemServicoDetalhesWebService(filtro);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0098] – Manter Vinculos Rateio Consumo
	 * [FS0011] – Verificar ciclo de faturamento do imóvel
	 * 
	 * @author Ítalo Almeida
	 * @date 09/07/2013
	 */
	public Boolean verificarImovelEmProcessoDeFaturamento(Integer idImovel){

		try{

			return this.getControladorImovel().verificarImovelEmProcessoDeFaturamento(idImovel);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Verifica permissão especial para optar por não cobrar taxa ao emitir 2° Via.
	 * 
	 * @author André Lopes
	 * @date 30/07/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoNaoCobrarTaxaSegundaVia(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoNaoCobrarTaxaSegundaVia(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica permissão especial para optar por não cobrar taxa ao emitir extrato de débito.
	 * 
	 * @author André Lopes
	 * @date 03/09/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoNaoCobrarTaxaExtratoDebito(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoNaoCobrarTaxaExtratoDebito(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC3100] Consultar Histórico de Débito Automático Imóvel
	 * 24/07/2013
	 * 
	 * @param imovel
	 * @param ehContasOuGuia
	 *            true = ContaGeral, false GuiaPagamento
	 * @return retorna lista debito automatico movimento
	 * @throws ErroRepositorioException
	 */
	public Collection<DebitoAutomaticoMovimentoHelper> pesquisarDebitoAutomaticoMovimentoPorImovel(Integer idImovel, boolean ehContasOuGuia){

		try{
			return this.getControladorFaturamento().pesquisarDebitoAutomaticoMovimentoPorImovel(idImovel, ehContasOuGuia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3055] – Encerrar Faturamento
	 * 
	 * @author Hiroshi Gonçalves
	 * @date 26/07/2013
	 */
	public Collection<Rota> consultarRotasGrupo(Integer idFaturamentoGrupo, Integer anoMesReferencia, int tipoConsulta){

		try{

			return this.getControladorFaturamento().consultarRotasGrupo(idFaturamentoGrupo, anoMesReferencia, tipoConsulta);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	public void validarExibirAtualizarPerfilLigacaoEsgoto(OrdemServico ordemServico, Boolean veioEncerrarOS){

		try{

			this.getControladorAtendimentoPublico().validarExibirAtualizarPerfilLigacaoEsgoto(ordemServico, veioEncerrarOS);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC0464] Atualizar Perfil da Ligação de Esgoto
	 * [SB0001] Atualizar Ligação de Esgoto.
	 * 
	 * @author Ítalo Almeida
	 * @date 02/08/2013
	 * @param ligacaoEsgoto
	 * @throws FachadaException
	 */
	public void atualizarPerfilLigacaoEsgoto(IntegracaoComercialHelper integracaoComercialHelper){

		try{
			this.getControladorLigacaoEsgoto().atualizarPerfilLigacaoEsgoto(integracaoComercialHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [FS0035] Verificar vencimento débito automático
	 * 
	 * @author Hebert Falcão
	 * @date 08/08/2013
	 */
	public void verificarVencimentoContaDebitoAutomatico(Conta conta){

		try{
			this.getControladorFaturamento().verificarVencimentoContaDebitoAutomatico(conta);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0352] - Emitir Contas
	 * [SB0033] – Gerar Contas Modelo 2
	 * Responsável pela geração PDF com a conta
	 * 
	 * @author Anderson Italo
	 * @date 07/08/2013
	 */
	public List<RelatorioContaModelo2Bean> obterDadosRelatorioEmitirContasModelo2(FaturamentoGrupo faturamentoGrupo,
					Integer anoMesReferencia, Collection<EmitirContaTipo2Helper> colecaoEmitirContaTipo2Helper){

		try{
			return this.getControladorFaturamento().obterDadosRelatorioEmitirContasModelo2(faturamentoGrupo, anoMesReferencia,
							colecaoEmitirContaTipo2Helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Retorna <true> se existir alteração de inscrição pendente para o imóvel ou para o imóvel
	 * condomínio do dado imóvel, caso exista. Retorna <false> caso contrário.
	 * 
	 * @author Luciano Galvao
	 * @date 18/01/2013
	 */
	public boolean existeAlteracaoInscricaoPendente(Integer imovelId){

		try{

			return this.getControladorImovel().existeAlteracaoInscricaoPendente(imovelId);

		}catch(ControladorException e){

			throw new FachadaException("erro.sistema", e);

		}
	}

	/**
	 * Verifica se a alteração da inscrição/rota do imóvel impacta no grupo de faturamento.
	 * 
	 * @author Luciano Galvão
	 * @date 22/01/2013
	 * @throws AlteracaoInscricaoImovelException
	 */
	public void verificarAlteracaoInscricaoImovel(Integer imovelId, Rota rotaAtual) throws ControladorException,
					AlteracaoInscricaoImovelException{

		try{
			this.getControladorImovel().verificarAlteracaoInscricaoImovel(imovelId, rotaAtual);

		}catch(AlteracaoInscricaoImovelException e){
			throw e;
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * @author Felipe rosacruz
	 * @date 22/08/2013
	 * @throws ControladorException
	 */
	public String pesquisarEnderecoFormatadoEmpresa() throws ControladorException{

		try{
			String enderecoEmpresa = this.getControladorEndereco().pesquisarEnderecoFormatadoEmpresa();

			return enderecoEmpresa;
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * @author Felipe rosacruz
	 * @date 23/08/2013
	 * @throws NegocioException
	 */
	public Object obterValorDoParametroPorCodigo(String codigo) throws NegocioException{

		Object retorno = null;
		try{

			retorno = this.getControladorParametroSistema().obterValorDoParametroPorCodigo(codigo);
		}catch(NegocioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		}
		return retorno;
	}

	/**
	 * [UC3103] Cancelar Débito a Cobrar de Rateio por Macromedidor.
	 * 6. O sistema apresenta os dados do imóvel Condomínio.
	 * 
	 * @param listaIdImovel
	 * @return
	 * @throws ControladorException
	 */
	public List<ClienteImovelCondominioHelper> pesquisarClienteImovelCondominioHelper(Integer idImovel, Integer idLigacaoTipo,
					Integer anoMesRefFaturamento) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarClienteImovelCondominioHelper(idImovel, idLigacaoTipo, anoMesRefFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3103] Cancelar Débito a Cobrar de Rateio por Macromedidor.
	 * 6.4.7. Histórico de Medição Individualizada.
	 * 
	 * @param idImovel
	 * @param idLigacaoTipo
	 * @param anoMesRefFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public HistoricoMedicaoIndividualizadaHelper pesquisarHistoricoMedicaoIndividualizadaHelper(Integer idImovel, Integer idLigacaoTipo,
					Integer anoMesRefFaturamento) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarHistoricoMedicaoIndividualizadaHelper(idImovel, idLigacaoTipo,
							anoMesRefFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3103] Cancelar Débito a Cobrar de Rateio por Macromedidor.
	 * 7. O sistema seleciona os débitos a cobrar de rateio dos imóveis vinculados para o mês
	 * informado.
	 * 
	 * @param idImovel
	 * @param idLigacaoTipo
	 * @param anoMesRefFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public List<DebitosACobrarRateioImoveisVinculadosHelper> pesquisarDebitosACobrarRateioImoveisVinculadosHelper(
					List<Integer> listaIdImovel, Integer idLigacaoTipo, Integer anoMesRefFaturamento) throws FachadaException{

		try{
			return this.getControladorFaturamento().pesquisarDebitosACobrarRateioImoveisVinculadosHelper(listaIdImovel, idLigacaoTipo,
							anoMesRefFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método responsável por agrupar e ordenar os débitos cobrados
	 * 
	 * @param colecaoDebitoACobrar
	 * @return
	 */
	public Collection<DebitoACobrar> agruparDebitoCobrado(Collection<DebitoCobrado> colecaoDebitoCobrado){

		try{

			return this.getControladorFaturamento().agruparDebitoCobrado(colecaoDebitoCobrado);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Esse método retorna as empresas de cobrança administrativa
	 * 
	 * @return
	 * @author Hiroshi Goncalves
	 * @since 28/06/2013
	 */
	public Collection<Empresa> consultarEmpresaCobrancaAdministrativa(){

		try{

			return this.getControladorCobranca().consultarEmpresaCobrancaAdministrativa();

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * [SB0001C] - Selecionar Itens Remuneráveis
	 * 
	 * @param idImovelCobrancaSituacao
	 * @return
	 */
	public List<ItensRemuradosHelper> selecionarItensRemureraveis(ImovelCobrancaSituacao imovelCobrancaSituacao) throws FachadaException{

		try{
			return this.getControladorCobranca().selecionarItensRemureraveis(imovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * [SB0001C] - Selecionar Itens Remuneráveis
	 * 
	 * @param idImovelCobrancaSituacao
	 * @return
	 */
	public List<CobrancaAdministrativaHelper> obterDadosDaConta(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws FachadaException{

		try{
			return this.getControladorCobranca().obterDadosDaConta(listaItensRemuradosHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa.
	 * [SB0011] - Obter Dados Guia de Pagamento.
	 * 
	 * @param listaItensRemuradosHelper
	 * @return
	 * @throws ControladorException
	 */
	public List<CobrancaAdministrativaHelper> obterDadosDaGuiaPagamento(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws FachadaException{

		try{
			return this.getControladorCobranca().obterDadosDaGuiaPagamento(listaItensRemuradosHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa.
	 * [SB0012] - Obter Dados Débito A Cobrar.
	 * 
	 * @param listaItensRemuradosHelper
	 * @return
	 * @throws ControladorException
	 */
	public List<CobrancaAdministrativaHelper> obterDadosDoDebitoACobrar(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws FachadaException{

		try{
			return this.getControladorCobranca().obterDadosDoDebitoACobrar(listaItensRemuradosHelper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa.
	 * [SB0001B] - Exibir Dados da Remuneração da Cobrança Administrativa do Imóvel.
	 * 1.4. Documentos Remunerados.
	 * 1.4.1.2.3. Caso o tipo de documento corresponda à “DEBITO A COBRAR”.
	 * 
	 * @param idImovelCobrancaSituacao
	 * @return
	 * @throws ControladorException
	 */
	public Object[] pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao){

		try{
			return this.getControladorCobranca().pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [UC0252] Consultar Parcelamentos de Débitos
	 * Método responsável por identificar Característica do Parcelamento
	 * 1: Parcelamento de Cobrança Bancária
	 * 2: Parcelamento de Cobrança Administrativa
	 * 3: Parcelamento Normal
	 * 
	 * @author Saulo Lima
	 * @since 22/08/2013
	 * @param parcelamento
	 * @return int
	 * @throws ControladorException
	 */
	public int obterCaracteristicaParcelamento(Parcelamento parcelamento) throws FachadaException{

		try{
			return this.getControladorCobranca().obterCaracteristicaParcelamento(parcelamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public int obterCaracteristicaParcelamento(Collection<ContaValoresHelper> colecaoConta,
					Collection<GuiaPagamentoValoresHelper> colecaoGuias, Integer idCobrancaForma, String indicadorCobrancaBancaria,
					Collection<DebitoACobrar> colecaoDebitoACobrarItem) throws FachadaException{

		try{

			return this.getControladorCobranca().obterCaracteristicaParcelamento(colecaoConta, colecaoGuias, idCobrancaForma,
							indicadorCobrancaBancaria, colecaoDebitoACobrarItem);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public boolean validaCobrancaAdministrativa(Collection<ContaValoresHelper> colecaoConta,
					Collection<GuiaPagamentoValoresHelper> colecaoGuias, Integer idCobrancaForma,
					Collection<DebitoACobrar> colecaoDebitoACobrarItem) throws FachadaException{

		try{
			return this.getControladorCobranca().validaCobrancaAdministrativa(colecaoConta, colecaoGuias, idCobrancaForma,
							colecaoDebitoACobrarItem);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Pesquisas todas as Situações Especiais de Cobrança ativas de um determinado imóvel
	 * 
	 * @author Saulo Lima
	 * @date 09/09/2013
	 * @param idImovel
	 * @return Collection<ImovelCobrancaSituacao>
	 * @throws FachadaException
	 */
	public Collection<ImovelCobrancaSituacao> pesquisarImovelCobrancaSituacaoAtivas(Integer idImovel) throws FachadaException{

		try{
			return this.getControladorImovel().pesquisarImovelCobrancaSituacaoAtivas(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0044] Retirar Débitos Não Vencidos
	 * 
	 * @author Saulo Lima
	 * @date 09/09/2013
	 * @param colecaoContasImovel
	 * @return Collection<ContaValoresHelper>
	 * @throws FachadaException
	 */
	public Collection<ContaValoresHelper> retirarContasNaoVencidas(Collection<ContaValoresHelper> colecaoContasImovel)
					throws FachadaException{

		try{
			return this.getControladorCobranca().retirarContasNaoVencidas(colecaoContasImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Retirar da listagem Contas com Motivo de Revisão com Impedimento de Parcelamento
	 * 
	 * @author Saulo Lima
	 * @date 09/09/2013
	 * @param colecaoContasImovel
	 * @param usuario
	 * @return Collection<ContaValoresHelper>
	 * @throws FachadaException
	 */
	public Collection<ContaValoresHelper> retirarContasMotivoRevisaoComImpedimentoParcelamento(
					Collection<ContaValoresHelper> colecaoContasImovel, Usuario usuario) throws FachadaException{

		try{
			return this.getControladorCobranca().retirarContasMotivoRevisaoComImpedimentoParcelamento(colecaoContasImovel, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public BigDecimal calcularValorPrestacaoParcelasAntecipadas(DebitoACobrar debitoACobrar, Integer totalParcelasAntecipadas){

		try{

			return this.getControladorFaturamento().calcularValorPrestacaoParcelasAntecipadas(debitoACobrar, totalParcelasAntecipadas);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public DebitoACobrar gerarDebitoACobrar(Integer idImovel, Integer anoMesReferencia, Integer idDebitoTipo, BigDecimal valorInformado){

		try{

			return this.getControladorFaturamento().gerarDebitoACobrar(idImovel, anoMesReferencia, idDebitoTipo, valorInformado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public BigDecimal recuperarPercentualEsgotoPerfil(Integer idLigacaoEsgoto){

		try{
			BigDecimal retorno = this.getControladorLigacaoEsgoto().recuperarPercentualEsgotoPerfil(idLigacaoEsgoto);
			return retorno;
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Comprovantes da Arrecadação por Recebedor
	 * 
	 * @author Hebert Falcão
	 * @since 28/09/2013
	 */
	public Integer pesquisarComprovantesDaArrecadacaoPorRecebedorCount(Integer anoMesReferencia){

		try{
			return this.getControladorArrecadacao().pesquisarComprovantesDaArrecadacaoPorRecebedorCount(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Comprovantes da Arrecadação por Recebedor
	 * 
	 * @author Hebert Falcão
	 * @since 28/09/2013
	 */
	public Collection<Object[]> pesquisarComprovantesDaArrecadacaoPorRecebedorSintetico(Integer anoMesReferencia){

		try{
			return this.getControladorArrecadacao().pesquisarComprovantesDaArrecadacaoPorRecebedorSintetico(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Comprovantes da Arrecadação por Recebedor
	 * 
	 * @author Hebert Falcão
	 * @since 28/09/2013
	 */
	public Collection<Object[]> pesquisarComprovantesDaArrecadacaoPorRecebedorAnalitico(Integer anoMesReferencia){

		try{
			return this.getControladorArrecadacao().pesquisarComprovantesDaArrecadacaoPorRecebedorAnalitico(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public String pesquisarEnderecoComDetalhamento(Integer idImovel){

		String retorno = null;

		try{
			retorno = this.getControladorEndereco().pesquisarEnderecoComDetalhamento(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	public String pesquisarEnderecoClienteAbreviadoComDetalhemento(Integer idCliente){

		try{
			return this.getControladorEndereco().pesquisarEnderecoClienteAbreviadoComDetalhamento(idCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void atualizarNumeroEmissaoContrato(Integer idImovel){

		try{
			this.getControladorImovel().atualizarNumeroEmissaoContrato(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	// [UC3105] - Efetuar Inscricao Campanha Premiacao
	public Collection verificarInscricaoImovelCampanha(String idImovel, Campanha campanha){

		try{

			return this.getControladorCadastro().verificarInscricaoImovelCampanha(idImovel, campanha);

		}catch(ControladorException ex){

			FachadaException e = new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
			e.setUrlBotaoVoltar("/gsan/exibirEfetuarInscricaoCampanhaPremiacaoAction.do?menu=sim");

			throw e;

		}

	}

	public CampanhaCadastro efetuarInscricaoCampanhaPremiacaoAction(Usuario usuario, CampanhaCadastro campanhaCadastro,
					Collection<CampanhaCadastroFone> colecaoCampanhaCadastroFone){

		try{

			return this.getControladorCadastro().efetuarInscricaoCampanhaPremiacaoAction(usuario, campanhaCadastro,
							colecaoCampanhaCadastroFone);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	public void emitirComprovanteInscricaoCampanhaPremiacao(Usuario usuarioLogado, CampanhaCadastro campanhaCadastro,
					String indicadorEnvioComprovanteEmail){

		try{

			this.getControladorCadastro().emitirComprovanteInscricaoCampanhaPremiacao(usuarioLogado, campanhaCadastro,
							indicadorEnvioComprovanteEmail);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	public Integer verificarDocumentoImpedido(Integer idCampanha, String nuCPF, String nuCNPJ){

		try{

			return this.getControladorCadastro().verificarDocumentoImpedido(idCampanha, nuCPF, nuCNPJ);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	public void enviarEmailComprovanteInscricaoCampanhaPremiacao(String emailReceptor, String emailRemetente, String dsTituloEmail,
					byte[] relatorioGerado){

		try{

			this.getControladorCadastro().enviarEmailComprovanteInscricaoCampanhaPremiacao(emailReceptor, emailRemetente, dsTituloEmail,
							relatorioGerado);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}
	}

	/**
	 * [UC0203][SB0010]
	 * 
	 * @author Felipe Rosacruz
	 * @param idImovel
	 * @return
	 * @date 26/09/2013
	 */
	public String obterMsgSituacaoImovelCampanhaPremiacao(Integer idImovel){

		try{

			return this.getControladorCobranca().obterMsgSituacaoImovelCampanhaPremiacao(idImovel);

		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC3114] - Gerar Relatórios Faturamento Consumo Direto Indireto Estadual
	 * 
	 * @author Victon Santos
	 * @date 27/09/2013
	 */
	public Collection<FaturamentoConsumoDiretoIndiretoEstadualRelatorioHelper> pesquisarDadosRelatorioFaturamentoConsumoDiretoIndiretoEstadual(
					Integer anoMes, Integer opcaoRelatorio){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioFaturamentoConsumoDiretoIndiretoEstadual(anoMes, opcaoRelatorio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Situação dos avisos bancários
	 * 
	 * @author Hebert Falcão
	 * @since 04/10/2013
	 */
	public int pesquisarSituacaoDosAvisosBancariosCount(Integer anoMesReferencia){

		try{
			return this.getControladorArrecadacao().pesquisarSituacaoDosAvisosBancariosCount(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Situação dos avisos bancários
	 * 
	 * @author Hebert Falcão
	 * @since 04/10/2013
	 */
	public Collection<Object[]> pesquisarSituacaoDosAvisosBancarios(Integer anoMesReferencia){

		try{
			return this.getControladorArrecadacao().pesquisarSituacaoDosAvisosBancarios(anoMesReferencia);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<PagamentoHistoricoAdmiteDevolucaoHelper> consultarPagamentosHistoricoAdmiteDevolucao(Integer idImovel,
					boolean creditoARealizar){

		try{
			// FIXME MOVER PARA CONTROLADOR FATURAMENTO APÓS IMPLEMENTAÇÂO.
			return this.getControladorEndereco().consultarPagamentosHistoricoAdmiteDevolucao(idImovel, creditoARealizar);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarQuantidadePagamentosHistoricoCount(PagamentoHistoricoAdmiteDevolucaoHelper pagamento, String matriculaImovel){

		try{
			// FIXME MOVER PARA CONTROLADOR FATURAMENTO APÓS IMPLEMENTAÇÂO.
			return this.getControladorEndereco().pesquisarQuantidadePagamentosHistoricoCount(pagamento, matriculaImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarLeiturasImovelCount(String idImovel, String anoMes) throws ControladorException{

		try{
			return this.getControladorMicromedicao().pesquisarLeiturasImovelCount(idImovel, anoMes);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3112][UC3113] Atualizacao Cadastral Coletor de Dados
	 * 
	 * @author Victon Malcolm
	 * @since 04/10/2013
	 */
	public Collection pesquisarAtualizacaoCadastralColetorDados(Integer referenciaInicial, Integer referenciaFinal, Integer matricula,
					Integer localidade, Integer setorComercial, Integer rota, Boolean relatorio){

		try{
			return this.getControladorMicromedicao().pesquisarAtualizacaoCadastralColetorDados(referenciaInicial, referenciaFinal,
							matricula, localidade, setorComercial, rota, relatorio);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3113] Atualizacao Cadastral Coletor de Dados
	 * 
	 * @author Victon Malcolm
	 * @since 08/10/2013
	 */
	public Collection pesquisarConsultaAtualizacaoCadastralColetorDados(Integer id){

		try{
			return this.getControladorMicromedicao().pesquisarConsultaAtualizacaoCadastralColetorDados(id);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3117] Gerar Relatório Auditoria leitura
	 * Seleciona os grupos de faturamento que já tiveram processo de retorno do faturamento
	 * imediato iniciado ou concluido na referência atual.
	 * 
	 * @author Felipe Rosacruz
	 * @date 29/09/2013
	 * @return Collection<FaturamentoGrupo>
	 * @throws FachadaException
	 */
	public Collection<FaturamentoGrupo> pesquisarGrupoFatProcessoRetornoImedInicConc(){

		try{

			return getControladorMicromedicao().pesquisarGrupoFatProcessoRetornoImedInicConc();
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * consultar vinculo localidade e faturamento grupo
	 * 
	 * @author Felipe Rosacruz
	 * @param idFaturamentoGrupo
	 * @param idLocalidade
	 * @date 04/10/2013
	 * @throws ControladorException
	 */
	public boolean consultarVinculoLocalidadeFaturamentoGrupo(Integer idFaturamentoGrupo, Integer idLocalidade){

		try{

			return getControladorLocalidade().consultarVinculoLocalidadeFaturamentoGrupo(idFaturamentoGrupo, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * consultar vinculo setor Comercial e faturamento grupo
	 * 
	 * @author Felipe Rosacruz
	 * @param idFaturamentoGrupo
	 * @param cdSetorComercial
	 * @date 05/10/2013
	 * @throws ControladorException
	 */
	public boolean consultarVinculoSetorComercialFaturamentoGrupo(Integer idFaturamentoGrupo, Integer cdSetorComercial){

		try{

			return getControladorLocalidade().consultarvinculoSetorComercialFaturamentoGrupo(idFaturamentoGrupo, cdSetorComercial);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * consultar vinculo rota e faturamento grupo
	 * 
	 * @author Felipe Rosacruz
	 * @param idFaturamentoGrupo
	 * @param cdRota
	 * @date 06/10/2013
	 * @throws ControladorException
	 */
	public boolean consultarVinculoRotaFaturamentoGrupo(Integer idFaturamentoGrupo, Integer cdRota){

		try{

			return getControladorLocalidade().consultarvinculoRotaFaturamentoGrupo(idFaturamentoGrupo, cdRota);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public int[] calcularFaixaLeituraEsperada(int media, MedicaoHistorico medicaoHistorico, Hidrometro hidrometro,
					Integer leituraAnteriorPesquisada){

		return getControladorMicromedicao().calcularFaixaLeituraEsperada(media, medicaoHistorico, hidrometro, leituraAnteriorPesquisada);
	}

	/**
	 * [UC3109][SB0001]
	 * 
	 * @author Hiroshi Gonçalves
	 * @param
	 * @return
	 * @date 07/10/2013
	 */
	public Integer efetuarSorteioCampanha(Usuario usuarioLogado, Campanha campanha){

		try{

			return this.getControladorCadastro().efetuarSorteioCampanha(usuarioLogado, campanha);

		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	public Collection filtrarComandoOSSeletiva(OrdemServicoSeletivaComandoHelper ordemServicoSeletivaComandoHelper){

		try{

			Collection retorno = this.getControladorOrdemServico().filtrarComandoOSSeletiva(ordemServicoSeletivaComandoHelper);

			return retorno;

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public Integer obterNextValSequence(String sequence){

		try{

			return this.getControladorCadastro().obterNextValSequence(sequence);

		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());

		}
	}

	/**
	 * [UC0145] Inserir Conta
	 * [SB0008] - Verificar Exigência RA de Inclusão de Conta Dados Cadastrais Divergentes do Imóvel
	 * 
	 * @author Ado Rocha
	 * @date 31/10/2013
	 * @param idImovel
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean verificaExistenciaRAInclusaoContaDadosCadastraisDivergentesImovel(Integer idImovel){

		try{

			return this.getControladorRegistroAtendimento().verificaExistenciaRAInclusaoContaDadosCadastraisDivergentesImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <Breve descrição sobre o caso de uso>
	 * [UCxxxx] - Retirar Valor Agua Esgoto Conta
	 * 
	 * @author Hiroshi Gonçalves
	 * @date 11/11/2013
	 * @param colecaoContasSelecionadas
	 * @param cdValorARetirar
	 * @param contaMotivoRetificacao
	 * @param contaMotivoCancelamento
	 */
	public void retirarValorAguaEsgotoConjuntoContas(Collection colecaoContasSelecionadas, int cdValorARetirar,
					ContaMotivoRetificacao contaMotivoRetificacao, ContaMotivoCancelamento contaMotivoCancelamento, Usuario usuarioLogado)
					throws FachadaException{

		try{
			this.getControladorFaturamento().retirarValorAguaEsgotoConjuntoContas(colecaoContasSelecionadas, cdValorARetirar,
							contaMotivoRetificacao, contaMotivoCancelamento, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection filtrarDadosRelatorioComandoOSSeletiva(OrdemServicoSeletivaComandoHelper ordemServicoSeletivaComandoHelper){

		try{

			Collection retorno = this.getControladorOrdemServico()
							.filtrarDadosRelatorioComandoOSSeletiva(ordemServicoSeletivaComandoHelper);

			return retorno;

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public ImovelSubcategoria obterPrincipalSubcategoria(Integer idCategoria, Integer idImovel){

		try{
			return getControladorImovel().obterPrincipalSubcategoria(idCategoria, idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0366] Inserir Registro Atendimento
	 * [FS0053] - Verificar existência de serviço em andamento para solicitações do tipo religação
	 * ou restabelecimento
	 * 
	 * @author Ítalo Almeida
	 * @date 19/11/2013
	 * @param idImovel
	 */
	public void verificarExistenciaServicoReligacaoRestabelecimento(Integer idImovel, Integer idSolicitacaoTipo){

		try{

			this.getControladorRegistroAtendimento().verificarExistenciaServicoReligacaoRestabelecimento(idImovel, idSolicitacaoTipo);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Permite retirar uma conta de revisão sem RA
	 * 
	 * @author Anderson Italo
	 * @date 25/11/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoRetirarContaRevisaoSemRA(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoRetirarContaRevisaoSemRA(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Debitos
	 */
	public boolean verificarPermissaoEmitirExtratoDeDebitosoSemAcrescimo(Usuario usuario){

		try{

			return this.getControladorPermissaoEspecial().verificarPermissaoEmitirExtratoDeDebitosoSemAcrescimo(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificaSituacaoOS(Integer idOrdemServico){

		try{
			return getControladorOrdemServico().verificaSituacaoOS(idOrdemServico);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public String obterLogradouroTipoImovel(Integer idImovel){

		try{
			return this.getControladorEndereco().obterLogradouroTipoImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * Verifica se existem ocorrencias de um imovel em situação de cobranca
	 * 
	 * @author Anderson Italo
	 * @date 28/11/2013
	 * @throws ErroRepositorioException
	 */
	public boolean existeProcessoCobrancaImovelPorSituacaoInformada(Integer idImovel, String idsSituacaoesCobranca){

		boolean retorno = false;

		try{

			retorno = getControladorCobranca().existeProcessoCobrancaImovelPorSituacaoInformada(idImovel, idsSituacaoesCobranca);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * [] - Gerar Relatórios Maiores Consumidores
	 * 
	 * @author Victon Santos
	 * @date
	 */
	public Collection<RelatorioMaioresConsumidoresHelper> pesquisarDadosRelatorioMaioresConsumidores(Integer anoMes, Integer localidade,
					Integer registros){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioMaioresConsumidores(anoMes, localidade, registros);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [] - Gerar Relatórios Maiores Devedores
	 * 
	 * @author Victon Santos
	 * @date
	 */
	public Collection<RelatorioMaioresDevedoresHelper> pesquisarDadosRelatorioMaioresDevedores(Integer localidade, Integer registros,
					Integer[] idsTipoCliente){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioMaioresDevedores(localidade, registros, idsTipoCliente);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public String retornarEnderecoCompletoEmpresa(SistemaParametro sistemaParametro){

		return this.getControladorUtil().retornarEnderecoCompletoEmpresa(sistemaParametro);

	}

	/**
	 * Obtém o Layout de Resolução de Diretoria para o parcelamento de cobrança administrativa
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Luciano Galvão
	 * @date 27/11/2013
	 */
	public ResolucaoDiretoriaLayout obterResolucaoDiretoriaLayoutParcCobrancaAdministrativa() throws GeradorRelatorioParcelamentoException{

		return this.getControladorParcelamento().obterResolucaoDiretoriaLayoutParcCobrancaAdministrativa();
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0054] Verificar quantidade de parcelas da sucumbência
	 * 
	 * @author Saulo Lima
	 * @date 15/08/2014
	 */
	public void verificarQuantidadeParcelasSucumbencia(Integer quantidadeParcelasSucumbencia, Usuario usuario){

		try{
			this.getControladorParcelamento().verificarQuantidadeParcelasSucumbencia(quantidadeParcelasSucumbencia, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3128] GerarRelatorioImóveiscomLigaçãoCortadacomConsumo
	 * 
	 * @author Hiroshi Gonçalves
	 * @created 09/12/2013
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection consultarImoveisLigacaoCortadaComConsumo(int anoMesReferencia, Integer grupoFaturamento) throws FachadaException{

		try{
			return this.getControladorFaturamento().consultarImoveisLigacaoCortadaComConsumo(anoMesReferencia, grupoFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * 
	 */
	public void executarAjusteContasEnviadasHistorico(Integer anoMesRefInicial, Integer anoMesRefFinal, String[] idsCliente){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTAS_HISTORICO, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {anoMesRefInicial, anoMesRefFinal, idsCliente});
	}

	/**
	 * @autor Eduardo Oliveira
	 * @date 16/12/2013
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterQuantidadeAlteracoesImovel(Integer idImovel){

		try{
			return getControladorImovel().obterQuantidadeAlteracoesImovel(idImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * [OC0791503] - Relatório Quadro de Hidrômetros
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarQuadroHidrometros(Date dataReferencia, Integer idLocalidade, Integer idGerenciaRegional,
					Integer idUnidadeNegocio){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometros(dataReferencia, idLocalidade, idGerenciaRegional,
							idUnidadeNegocio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [OC0791503] - Count Relatório Quadro de Hidrômetros
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Integer pesquisarQuadroHidrometrosCount(Date dataReferencia, Integer idLocalidade, Integer idGerenciaRegional,
					Integer idUnidadeNegocio){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometrosCount(dataReferencia, idLocalidade, idGerenciaRegional,
							idUnidadeNegocio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [OC0791503] - Relatório Quadro de Hidrômetros Ano Instalação
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarQuadroHidrometrosAnoInstalacao(){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometrosAnoInstalacao();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [OC0791503] - Count Relatório Quadro de Hidrômetros Ano Instalação
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Integer pesquisarQuadroHidrometrosAnoInstalacaoCount(){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometrosAnoInstalacaoCount();

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [OC0791503] - Count Relatório Quadro de Hidrômetros Situação
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Integer pesquisarQuadroHidrometrosSituacaoCount(Date dataInicial, Date dataFinal, Integer idGerenciaRegional,
					Integer idUnidadeNegocio, Integer idUnidadeFederacao, Integer idLocalidade, Integer idHidrometroCapacidade,
					Integer idHidrometroMarca, Integer idHidrometroDiametro){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometrosSituacaoCount(dataInicial, dataFinal, idGerenciaRegional,
							idUnidadeNegocio, idUnidadeFederacao, idLocalidade, idHidrometroCapacidade, idHidrometroMarca,
							idHidrometroDiametro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [OC0791503] - Relatório Quadro de Hidrômetros Situação
	 * 
	 * @author Ado Rocha
	 * @date 03/12/2013
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarQuadroHidrometrosSituacao(Date dataInicial, Date dataFinal, Integer idGerenciaRegional,
					Integer idUnidadeNegocio, Integer idUnidadeFederacao, Integer idLocalidade, Integer idHidrometroCapacidade,
					Integer idHidrometroMarca, Integer idHidrometroDiametro){

		try{
			return getControladorMicromedicao().pesquisarQuadroHidrometrosSituacao(dataInicial, dataFinal, idGerenciaRegional,
							idUnidadeNegocio, idUnidadeFederacao, idLocalidade, idHidrometroCapacidade, idHidrometroMarca,
							idHidrometroDiametro);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para retificar conta retida
	 * 
	 * @author Anderson Italo
	 * @date 19/12/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoRetificarContaRetida(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoRetificarContaRetida(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para retirar conta retida de revisão
	 * 
	 * @author Anderson Italo
	 * @date 02/12/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoRetirarContaRetidaDeRevisao(Usuario usuario){

		try{
			return this.getControladorPermissaoEspecial().verificarPermissaoRetirarContaRetidaDeRevisao(usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [FS0038] - Verificar Bloqueio Colocar Conta em Revisão por Motivo de Conta Retida
	 * 
	 * @author Anderson Italo
	 * @date 20/12/2013
	 */
	public void verificarBloqueioColocarContaRevisaoMotivoContaRetida(Integer idContaMotivoRevisao, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().verificarBloqueioColocarContaRevisaoMotivoContaRetida(idContaMotivoRevisao, usuarioLogado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Método que realiza o ajuste do faturamento para trazer de volta as contas que estão em
	 * conta_historico para tabela de conta devido a um erro do faturamento
	 * 
	 * @author Anderson Italo
	 * @date 09/01/2014
	 */
	public void executarAjusteContasEnviadasHistoricoPreFaturadasComValorZeroIndicadorEmissaoCampo3(String idsFaturamentoGrupo){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_CONTAS_HISTORICO_RETIDAS_ZERADAS,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {idsFaturamentoGrupo});
	}

	/**
	 * Popula a tabela de REGISTRO DE ATENDIMENTO COM AS COORDENADAS DO IMÓVEL INFORMADAS PELO GIS.
	 * 
	 * @author Yara Souza
	 * @date 13/01/2014
	 */
	public void executarAjusteCoordenadasGIS(Collection colecao){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_COORDENADAS_RA, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {colecao});
	}

	/**
	 * [UC3118] Inserir Comando de Simulação de Faturamento
	 * 
	 * @author Anderson Italo
	 * @date 24/12/2013
	 */

	public Integer inserirComandoSimulacaoFaturamento(InserirComandoSimulacaoFaturamentoHelper inserirComandoSimulacaoFaturamentoHelper){

		try{

			return this.getControladorFaturamento().inserirComandoSimulacaoFaturamento(inserirComandoSimulacaoFaturamentoHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0111] - Iniciar Processo
	 * [SB0001] - Iniciar Processo de Faturamento Comandado
	 * 
	 * @author Anderson Italo
	 * @date 28/12/2013
	 */
	public int pesquisarTotalRegistrosFaturamentoSimulacaoComandoNaoRealizados(){

		try{

			return this.getControladorBatch().pesquisarTotalRegistrosFaturamentoSimulacaoComandoNaoRealizados();
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0111] - Iniciar Processo
	 * [SB0001] - Iniciar Processo de Faturamento Comandado
	 * 
	 * @author Anderson Italo
	 * @date 28/12/2013
	 */
	public Collection<FaturamentoSimulacaoComando> pesquisarFaturamentoSimulacaoComandoNaoRealizados(Integer numeroPagina){

		try{

			return this.getControladorBatch().pesquisarFaturamentoSimulacaoComandoNaoRealizados(numeroPagina);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório de Ordem de Serviço Encerradas Dentro e Fora do Prazo
	 * Obter dados para gerar Relatório de Ordem de Serviço Encerradas Dentro e Fora do Prazo
	 * 
	 * @author Victon Santos
	 * @date 27/12/2013
	 */
	public Collection pesquisaRelatorioOrdemServicoEncerradaDentroForaPrazo(String origemServico, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal, String idLocalidade){

		try{
			return getControladorOrdemServico().pesquisaRelatorioOrdemServicoEncerradaDentroForaPrazo(origemServico, idsServicosTipos,
							idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0XXX] Gerar Relatório de Ordem de Serviço Encerradas Dentro e Fora do Prazo
	 * Obter dados para gerar Relatório de Ordem de Serviço Encerradas Dentro e Fora do Prazo
	 * 
	 * @author Victon Santos
	 * @date 27/12/2013
	 */
	public Integer pesquisaTotalRegistrosRelatorioOrdemServicoEncerradaDentroForaPrazo(String origemServico, String[] idsServicosTipos,
					String idUnidadeAtendimento, String idUnidadeAtual, String idUnidadeEncerramento, Date periodoAtendimentoInicial,
					Date periodoAtendimentoFinal, Date periodoEncerramentoInicial, Date periodoEncerramentoFinal, String idLocalidade){

		try{
			return getControladorOrdemServico().pesquisaTotalRegistrosRelatorioOrdemServicoEncerradaDentroForaPrazo(origemServico,
							idsServicosTipos, idUnidadeAtendimento, idUnidadeAtual, idUnidadeEncerramento, periodoAtendimentoInicial,
							periodoAtendimentoFinal, periodoEncerramentoInicial, periodoEncerramentoFinal, idLocalidade);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [SB0003] - Retificar Conta
	 * 
	 * @author Anderson Italo
	 * @created 17/01/2014
	 * @throws ErroRepositorioException
	 */
	public ClienteConta pesquisarClienteContaPorTipoRelacao(Integer idConta, Integer idClienteRelacaoTipo){

		try{

			return this.getControladorFaturamento().pesquisarClienteContaPorTipoRelacao(idConta, idClienteRelacaoTipo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [SB0015] - Alterar Cliente Responsável de um Conjunto de Contas
	 * 
	 * @author Anderson Italo
	 * @date 20/01/2014
	 */
	public void alterarClienteResponsavelConjuntoContas(Collection<Conta> colecaoContas, Cliente clienteResponsavel, Usuario usuarioLogado){

		try{

			this.getControladorFaturamento().alterarClienteResponsavelConjuntoContas(colecaoContas, clienteResponsavel, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para informar a quantidade de
	 * parcelas excedentes
	 * 
	 * @author Anderson Italo
	 * @date 27/02/2013
	 * @param usuario
	 */
	public boolean verificarPermissaoInformarQuantidadeParcelasExcedentes(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoInformarQuantidadeParcelasExcedentes(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public RelatorioArquivoDeclaracaoAnualQuitacaoDebitos emitirDeclaracaoAnualQuitacaoDebitos(Integer idFaturamentoGrupo,
					Integer idImovel, Usuario usuario, Integer anoBaseDeclaracaoInformado){

		try{
			return getControladorFaturamento().emitirDeclaracaoAnualQuitacaoDebitos(null, idFaturamentoGrupo, idImovel, usuario,
							anoBaseDeclaracaoInformado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3134] Manter Comando de Simulação de Faturamento
	 * 
	 * @author Anderson Italo
	 * @date 19/01/2014
	 */
	public Collection<FaturamentoSimulacaoComando> pesquisarFaturamentoSimulacaoComando(Integer numeroPagina, Date dataInicialComando,
					Date dataFinalComando, Short indicadorExecutado){

		try{

			return this.getControladorFaturamento().pesquisarFaturamentoSimulacaoComando(numeroPagina, dataInicialComando,
							dataFinalComando, indicadorExecutado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3134] Manter Comando de Simulação de Faturamento
	 * 
	 * @author Anderson Italo
	 * @date 19/01/2014
	 */
	public Integer pesquisarTotalRegistrosFaturamentoSimulacaoComando(Date dataInicialComando, Date dataFinalComando,
					Short indicadorExecutado){

		try{

			return this.getControladorFaturamento().pesquisarTotalRegistrosFaturamentoSimulacaoComando(dataInicialComando,
							dataFinalComando, indicadorExecutado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3134] Manter Comando de Simulação de Faturamento
	 * [SB001] - Alterar comando de simulação de faturamento
	 * 
	 * @author Anderson Italo
	 * @date 28/01/2014
	 */
	public void atualizarComandoSimulacaoFaturamento(InserirComandoSimulacaoFaturamentoHelper inserirComandoSimulacaoFaturamentoHelper,
					FaturamentoSimulacaoComando faturamentoSimulacaoComando){

		try{

			this.getControladorFaturamento().atualizarComandoSimulacaoFaturamento(inserirComandoSimulacaoFaturamentoHelper,
							faturamentoSimulacaoComando);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3135] Gerar Relatório de Materiais Aplicados
	 * 
	 * @author Felipe Rosacruz
	 * @date 03/02/2014
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioMateriaisAplicadosHelper> obterDadosRelatorioMateriaisAplicados(Integer idLocalidade,
					Integer cdSetorComercial, Date dataExecucaoInicial, Date dataExecucaoFinal, Collection<Integer> colecaoIdServicoTipo,
					Collection<Integer> colecaoIdMaterial, Collection<Integer> colecaoIdEquipe) throws FachadaException{

		try{
			return getControladorAtendimentoPublico().obterDadosRelatorioMateriaisAplicados(idLocalidade, cdSetorComercial,
							dataExecucaoInicial, dataExecucaoFinal, colecaoIdServicoTipo, colecaoIdMaterial, colecaoIdEquipe);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Verifica permissão especial para alterar o indicador para inserir processo
	 * administrativo/judiciario
	 * 
	 * @author Carlos Chrystian
	 * @date 27/01/2014
	 * @param usuario
	 */
	public boolean verificarPermissaoIndicadorProcessoAdministrativoJuduciario(Usuario usuario){

		try{
			return getControladorPermissaoEspecial().verificarPermissaoIndicadorProcessoAdministrativoJuduciario(usuario);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * Valida o {@link RelatorioRAComProcessoAdmJudHelper}
	 * 
	 * @param registroAtendimentoHelper
	 * @throws NegocioException
	 */
	public void validarCamposObrigatoriosHelperRA(RelatorioRAComProcessoAdmJudHelper helper){

		try{
			getControladorRegistroAtendimento().validarCamposObrigatoriosHelperRA(helper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}

	}

	/**
	 * Cosulta o total de RA que atendam ao filtro informado.
	 * 
	 * @param parametro
	 *            {@link RelatorioRAComProcessoAdmJudHelper}
	 * @return
	 */
	public int consultarQuantidadeRAComProcessoAdmJud(RelatorioRAComProcessoAdmJudHelper registroAtendimentoHelper){

		try{
			return getControladorRegistroAtendimento().consultarQuantidadeRAComProcessoAdmJud(registroAtendimentoHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * Consulta os dados estatisticos de RA filtrados pelo
	 * {@link RelatorioRAComProcessoAdmJudHelper}
	 * 
	 * @param relatorioRAComProcessoAdmJudHelper
	 * @return {@link List} de {@link RelatorioRAComProcessoAdmJudBean}
	 */
	public List<RelatorioRAComProcessoAdmJudBean> consultarDadosRAComProcessoAdmJud(
					RelatorioRAComProcessoAdmJudHelper relatorioRAComProcessoAdmJudHelper){

		try{
			return getControladorRegistroAtendimento().consultarDadosRAComProcessoAdmJud(relatorioRAComProcessoAdmJudHelper);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}catch(NegocioException e){
			throw new FachadaException(e.getMessage(), e);
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [FS0001 - Verificar valor total da conta negativo].
	 * 
	 * @author Yara Souza
	 * @date 22/01/2014
	 */
	public Object[] verificarVaorTotalContaNegativo(BigDecimal valorTotalConta, BigDecimal valorTotalCreditos,
					BigDecimal valorTotalSemCreditos, Collection colecaoCreditosRealizados, Usuario usuarioLogado,
					boolean gerarCreditoARealizar){

		try{

			return this.getControladorFaturamento().verificarVaorTotalContaNegativo(valorTotalConta, valorTotalCreditos,
							valorTotalSemCreditos, colecaoCreditosRealizados, usuarioLogado, gerarCreditoARealizar);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param colecaoCreditoRealizado
	 * @return
	 */

	public BigDecimal calcularValorTotalCreditoConta(Collection<CreditoRealizado> colecaoCreditoRealizado){

		try{

			return this.getControladorFaturamento().calcularValorTotalCreditoConta(colecaoCreditoRealizado);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Atauliza a tabela de consumo_historico com o consumo médio correto
	 * 
	 * @author Anderson Italo
	 * @date 10/02/2014
	 */
	public void executarAjusteErroCalculoConsumoMedioPercentualColeta(Collection colecao){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_MEDIAS_ERRADAS_CONSUMO_HISTORICO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {colecao});
	}

	/**
	 * Este método de pesquisa serve para localizar qualquer objeto no sistema.
	 * Ele aceita como parâmetro um offset que indica a página desejada no
	 * esquema de paginação. Além disso também recebe o número máximo de registros
	 * por página da paginação.
	 * 
	 * @author Felipe Rosacruz
	 * @date 19/12/2013
	 * @param filtro
	 *            Filtro da pesquisa
	 * @param pageOffset
	 *            Indicador da página desejada do esquema de paginação
	 * @param pacoteNomeObjeto
	 *            Pacote do objeto
	 * @param qtdRegistrosPorPagina
	 *            Quantidade máxima de registros por página
	 * @return Coleção dos resultados da pesquisa
	 */

	public Collection pesquisar(Filtro filtro, int pageOffset, String pacoteNomeObjeto, int qtdRegistrosPorPagina){

		try{
			return this.getControladorUtil().pesquisar(filtro, pageOffset, pacoteNomeObjeto, qtdRegistrosPorPagina);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Hiroshi Gonçalves
	 * @return
	 */

	public List<RelatorioEstatisticoAtendimentoPorRacaCorBean> pesquisarDadosRelatorioEstatisticoAtendimentoPorRacaCor(
					GerarRelatorioEstatisticoAtendimentoPorRacaCorActionForm form) throws FachadaException{

		try{

			return this.getControladorRegistroAtendimento().pesquisarDadosRelatorioEstatisticoAtendimentoPorRacaCor(form);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Integer pesquisarIdDocumentoCobrancaEntregaDevolucao(Integer idImovel, Integer idDocumentoTipo){

		try{

			return getControladorCobranca().pesquisarIdDocumentoCobrancaEntregaDevolucao(idImovel, idDocumentoTipo);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3132] Gerar Relatório de Contratos de Demanda de Consumo
	 * 
	 * @author Vicente Zarga
	 * @date 18/01/2014
	 */
	public Collection<ContratoDemandaConsumo> pesquisarDadosRelatorioContratoDemandaConsumo(Integer faturamentoGrupo,
					Integer[] localidades, String tipoContrato, Integer tarifaConsumo, Integer mesAnoFaturamentoInicial,
					Integer mesAnoFaturamentoFinal, Integer encerrado){

		try{
			return this.getControladorFaturamento().pesquisarDadosRelatorioContratoDemandaConsumo(faturamentoGrupo, localidades,
							tipoContrato, tarifaConsumo, mesAnoFaturamentoInicial, mesAnoFaturamentoFinal, encerrado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3132] Gerar Relatório de Contratos de Demanda de Consumo
	 * 
	 * @author Vicente Zarga
	 * @date 18/01/2014
	 */
	public Integer pesquisarDadosRelatorioContratoDemandaConsumoCount(Integer faturamentoGrupo, Integer[] localidades, String tipoContrato,
					Integer tarifaConsumo, Integer mesAnoFaturamentoInicial, Integer mesAnoFaturamentoFinal, Integer encerrado){

		Integer retorno = 0;

		try{
			retorno = getControladorFaturamento().pesquisarDadosRelatorioContratoDemandaConsumoCount(faturamentoGrupo, localidades,
							tipoContrato, tarifaConsumo, mesAnoFaturamentoInicial, mesAnoFaturamentoFinal, encerrado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * [UC3055] Encerrar Faturamento
	 * [SB0007] Encerrar contratos de demanda de consumo
	 * 
	 * @author Vicente Zarga
	 * @date 27/01/2014
	 */
	public void encerrarContratoDemandaConsumo(String referencia){

		try{
			this.getControladorFaturamento().encerrarContratoDemandaConsumo(referencia);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3143] Inserir Débito a Cobrar de Rateio por Macromedidor
	 * 
	 * @author Ado Rocha
	 * @date 05/03/2014
	 */
	public void inserirDebitoACobrarRateioCondominio(RegistroAtendimento registroAtendimento, Usuario usuarioLogado, String[] ids,
					Integer numeroPrestacoes, BigDecimal valorTotalServico, BigDecimal valorEntrada, BigDecimal percentualAbatimento,
					Integer anoMesCobrancaDebito, DebitoTipo debitoTipo, CobrancaForma cobrancaForma, String parametroDebitoTipoRateio){

		try{
			this.getControladorFaturamento().inserirDebitoACobrarRateioCondominio(registroAtendimento, usuarioLogado, ids,
							numeroPrestacoes, valorTotalServico, valorEntrada, percentualAbatimento, anoMesCobrancaDebito, debitoTipo,
							cobrancaForma, parametroDebitoTipoRateio);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3124] - Auditoria de Cancelamento/Revisão de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarAuditoriaRevisaoCancelamentoContaFuncionario(Integer idFuncionario, Integer dataInicial, Integer dataFinal){

		try{
			return this.getControladorTransacao().pesquisarAuditoriaRevisaoCancelamentoContaFuncionario(idFuncionario, dataInicial,
							dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3124] - Auditoria de Cancelamento/Revisão de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarAuditoriaRevisaoCancelamentoContaUsuario(Integer idUsuario, Integer dataInicial, Integer dataFinal){

		try{
			return this.getControladorTransacao().pesquisarAuditoriaRevisaoCancelamentoContaUsuario(idUsuario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3123] - Auditoria de Retificação/Implantação de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarRetificacaoImplantacaoContaFuncionario(Integer idFuncionario, Integer dataInicial, Integer dataFinal){

		try{
			return this.getControladorTransacao().pesquisarRetificacaoImplantacaoContaFuncionario(idFuncionario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3123] - Auditoria de Retificação/Implantação de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarRetificacaoImplantacaoContaUsuario(Integer idUsuario, Integer dataInicial, Integer dataFinal){

		try{
			return this.getControladorTransacao().pesquisarRetificacaoImplantacaoContaUsuario(idUsuario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3125] - Auditoria de Parcelamento de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarParcelamentoContaFuncionario(Integer idFuncionario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().pesquisarParcelamentoContaFuncionario(idFuncionario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3125] - Auditoria de Parcelamento de Contas
	 * 
	 * @author Ado Rocha
	 * @date 20/01/2014
	 */
	public Collection pesquisarParcelamentoContaUsuario(Integer idUsuario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().pesquisarParcelamentoContaUsuario(idUsuario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3122] Auditoria de Alterações de Clientes
	 * 
	 * @author Eduardo Oliveira
	 * @throws ControladorException
	 * @date 01/03/2014
	 */
	public Collection consultarAlteracoesClientesFuncionario(Integer idFuncionario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().consultarAlteracoesClientesFuncionario(idFuncionario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3122] Auditoria de Alterações de Clientes
	 * 
	 * @author Eduardo Oliveira
	 * @throws ControladorException
	 * @date 01/03/2014
	 */
	public Collection consultarAlteracoesClientesUsuario(Integer idUsuario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().consultarAlteracoesClientesUsuario(idUsuario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0352] - Emitir Contas
	 * [SB0033] – Gerar Contas Modelo 3
	 * Responsável pela geração PDF com a conta
	 * 
	 * @author Anderson Italo
	 * @date 07/08/2013
	 */
	public List<RelatorioContaModelo3Bean> obterDadosRelatorioEmitirContasModelo3(FaturamentoGrupo faturamentoGrupo,
					Integer anoMesReferencia, Collection<EmitirContaTipo2Helper> colecaoEmitirContaTipo2Helper){

		try{
			return this.getControladorFaturamento().obterDadosRelatorioEmitirContasModelo3(faturamentoGrupo, anoMesReferencia,
							colecaoEmitirContaTipo2Helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Anderson Italo
	 * @date 11/02/2014
	 */
	public List<Object[]> pesquisarDadosImoveisComContaEmAtraso(boolean apenasPublicos){

		try{

			return this.getControladorImovel().pesquisarDadosImoveisComContaEmAtraso(apenasPublicos);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Remover Mensagem da Conta
	 * 
	 * @author Hebert Falcão
	 * @created 14/03/2014
	 */
	public void removerMensagemConta(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorFaturamento().removerMensagemConta(ids, usuarioLogado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Anderson Italo
	 * @date 11/02/2014
	 */
	public Collection<Conta> pesquisarContasEmAtrasoPorImovel(Integer idImovel){

		try{

			return this.getControladorImovel().pesquisarContasEmAtrasoPorImovel(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [XYZ] Gerar Relatório Situação Especial de Faturamento
	 * 
	 * @author Hebert Falcão
	 * @date 16/03/2014
	 */
	public Collection<FaturamentoSituacaoHistorico> consultarSituacaoEspecialDeFaturamento(RelatorioSituacaoEspecialFaturamentoHelper helper){

		try{
			return this.getControladorFaturamento().consultarSituacaoEspecialDeFaturamento(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [XYZ] Gerar Relatório Situação Especial de Faturamento
	 * 
	 * @author Hebert Falcão
	 * @date 16/03/2014
	 */
	public Integer consultarSituacaoEspecialDeFaturamentoCount(RelatorioSituacaoEspecialFaturamentoHelper helper){

		try{
			return this.getControladorFaturamento().consultarSituacaoEspecialDeFaturamentoCount(helper);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Regeração do Histograma por referência.
	 * 
	 * @author Yara Souza
	 * @date 04/03/2014
	 */
	public void executarRegeracaoHistograma(Integer anoMesRefInicial, Integer anoMesRefFinal){

		this.enviarMensagemControladorBatch(MetodosBatch.REGERAR_HISTOGRAMA, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {anoMesRefInicial, anoMesRefFinal});
	}

	/**
	 * @author Yara Souza
	 * @date 04/03/2014
	 */
	public void gerarDebitoACobrarContaComValorAMenor(Integer referencia, String idGrupos){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_DEBITO_CONTA_COM_VALOR_MENOR,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {referencia, idGrupos});
	}

	/**
	 * @author Felipe Rosacruz
	 * @date 25/03/2014
	 */
	public Object[] consultarDadosAcessoGcsME(Usuario usuariologado){

		Object[] retorno = null;
		try{
			retorno = getControladorAcesso().consultarDadosAcessoGcsME(usuariologado);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
		return retorno;
	}

	/**
	 * [UC3127] - Auditoria de Transferencia de Debitos
	 * [SB0001] - Apresenta Dados da Auditoria
	 * Consulta por Funcionario
	 * 
	 * @author Eduardo Oliveira
	 * @date 01/02/2014
	 */
	public Collection consultarAuditoriaTransferenciaDebitosFuncionario(Integer idFuncionario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().consultarAuditoriaTransferenciaDebitosFuncionario(idFuncionario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3127] - Auditoria de Transferencia de Debitos
	 * [SB0001] - Apresenta Dados da Auditoria
	 * Consulta por Usuario
	 * 
	 * @author Eduardo Oliveira
	 * @date 01/02/2014
	 */
	public Collection consultarAuditoriaTransferenciaDebitosUsuario(Integer idUsuarioOrigem, Integer idUsuarioDestino, Date dataInicial,
					Date dataFinal){

		try{
			return this.getControladorTransacao().consultarAuditoriaTransferenciaDebitosUsuario(idUsuarioOrigem, idUsuarioDestino,
							dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	// /**
	// * [UC3124] - Auditoria de Cancelamento/Revisão de Contas
	// *
	// * @author Ado Rocha
	// * @date 20/01/2014
	// */
	// public Collection pesquisarAuditoriaRevisaoCancelamentoContaUsuario(Integer idUsuario,
	// Integer dataInicial, Integer dataFinal){
	//
	// try{
	// return
	// this.getControladorTransacao().pesquisarAuditoriaRevisaoCancelamentoContaUsuario(idUsuario,
	// dataInicial, dataFinal);
	// }catch(ControladorException ex){
	//
	// throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
	// }
	// }

	/**
	 * [UC3126] Auditoria de Serviços a Cobrar
	 * 
	 * @author Eduardo Oliveira
	 * @date 10/03/2014encerrarContratoDemandaConsumo
	 */
	public Collection consultarServicosACobrarUsuario(Integer idUsuario, Date dataInicial, Date dataFinal){

		try{
			return this.getControladorTransacao().consultarServicosACobrarUsuario(idUsuario, dataInicial, dataFinal);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void executarAjusteErroGeracaoContaCategoriaConsumoFaixa(Integer anoMesReferencia, String idsGrupos){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTAR_FAIXAS_CONTAS_ERRADAS, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {anoMesReferencia, idsGrupos});
	}

	public void executarAjusteContaZeradasEnviarHistorico(Integer anoMesReferencia){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTE_ENVIAR_CONTAS_ZERADAS_PARA_HISTORICO,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {anoMesReferencia});
	}

	public void removerRota(String[] ids, Usuario usuarioLogado){

		try{
			this.getControladorMicromedicao().removerRota(ids, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Pesquisa count dos dados necessário para a geração do relatório
	 * [UC0638] - Gerar Relatórios Anormalidade Consumo
	 * 
	 * @author Ado Rocha
	 * @throws ErroRepositorioException
	 * @created 27/03/2014
	 */
	public Integer pesquisarDadosRelatorioAnormalidadeConsumoCount(Integer idGrupoFaturamento, Short codigoRota,
					Integer idGerenciaRegional, Integer idUnidadeNegocio, Integer idElo, Integer idLocalidadeInicial,
					Integer idLocalidadeFinal, Integer referencia, Integer idImovelPerfil, Integer numOcorConsecutivas,
					String indicadorOcorrenciasIguais, Integer mediaConsumoInicial, Integer mediaConsumoFinal,
					Integer idAnormalidadeConsumo, Integer idAnormalidadeLeitura) throws ErroRepositorioException{

		return this.getControladorFaturamento().pesquisarDadosRelatorioAnormalidadeConsumoCount(idGrupoFaturamento, codigoRota,
						idGerenciaRegional, idUnidadeNegocio, idElo, idLocalidadeInicial, idLocalidadeFinal, referencia, idImovelPerfil,
						numOcorConsecutivas, indicadorOcorrenciasIguais, mediaConsumoInicial, mediaConsumoFinal, idAnormalidadeConsumo,
						idAnormalidadeLeitura);
	}

	/**
	 * Agencia Virtual - Consultar Cep Por Logradouro e Bairro
	 * 
	 * @author Anderson Italo
	 * @date 16/03/2014
	 */
	public List<Object[]> pesquisarCepPorLogradouroEBairro(Integer idLogradouro, Integer idBairro){

		List<Object[]> retorno = null;

		try{

			retorno = getControladorEndereco().pesquisarCepPorLogradouroEBairro(idLogradouro, idBairro);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * @param clienteJSONHelper
	 */

	public void atualizarCliente(ClienteJSONHelper clienteJSONHelper){

		try{

			this.getControladorCliente().atualizarCliente(clienteJSONHelper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * @param clienteJSONHelper
	 */

	public void inserirCliente(ClienteJSONHelper clienteJSONHelper){

		try{

			this.getControladorCliente().inserirCliente(clienteJSONHelper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * @param idImovel
	 * @param usuario
	 */
	public RelatorioExtratoDebito gerarRelatorioRelatorioExtratoDebitoParaEmissaoPorImovel(Integer idImovel, Usuario usuario){

		try{

			return this.getControladorCobranca().gerarRelatorioRelatorioExtratoDebitoParaEmissaoPorImovel(idImovel, usuario);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());

		}

	}

	/**
	 * Verifica permissão especial para comandar prescrição de débitos
	 * 
	 * @author Anderson Italo
	 * @date 20/02/2014
	 * @param usuario
	 */
	public boolean verificarPermissaoComandarPrescricaoDebito(Usuario usuario){

		try{

			return getControladorPermissaoEspecial().verificarPermissaoComandarPrescricaoDebito(usuario);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * Verifica permissão especial para emitir documento pagável para débito prescrito
	 * 
	 * @author Anderson Italo
	 * @date 20/02/2014
	 * @param usuario
	 */
	public boolean verificarPermissaoEmitirDocumentoPagavelDebitoPrescrito(Usuario usuario){

		try{

			return getControladorPermissaoEspecial().verificarPermissaoEmitirDocumentoPagavelDebitoPrescrito(usuario);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * 
	 * @author Anderson Italo
	 * @date 25/02/2014
	 */
	public Object[] comandarPrescricaoDebitosComandoUsuarioOuAutomatico(ComandoDebitosPrescritosHelper comandoHelper, Usuario usuarioLogado){

		try{

			return getControladorCobranca().comandarPrescricaoDebitosComandoUsuarioOuAutomatico(comandoHelper, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0049] - Verificar retirada de débitos prescritos do débito do parcelamento
	 * Caso esteja indicado para não considerar débitos prescritos retirar a conta ou guia prestção
	 * da lista
	 * de débitos
	 * 
	 * @author Anderson Italo
	 * @created 10/03/2014
	 */
	public void verificarRetirarContaOuGuiaPrescrita(Integer idImovel, Short indicadorConsiderarDebitoPrescrito,
					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper){

		try{

			getControladorCobranca().verificarRetirarContaOuGuiaPrescrita(idImovel, indicadorConsiderarDebitoPrescrito,
							obterDebitoImovelOuClienteHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0188] Manter Guia de Pagamento
	 * [SB0010] - Verificar Guia de Pagamento Prescrita
	 * 
	 * @author Anderson Italo
	 * @date 25/03/2014
	 * @param usuario
	 * @param idImovel
	 * @param colecaoGuiaPagamentoHelper
	 * @throws ControladorException
	 */
	public void verificarGuiaPagamentoPrescrita(Usuario usuario,
					Collection<GuiaPagamentoPrestacaoHelper> colecaoGuiaPagamentoPrestacaoHelper) throws FachadaException{

		try{

			this.getControladorFaturamento().verificarGuiaPagamentoPrescrita(usuario, colecaoGuiaPagamentoPrestacaoHelper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0146] Manter Conta
	 * [FS0039] - Verifica existência de débito prescrito
	 * 
	 * @author Anderson Italo
	 * @date 28/03/2014
	 */
	public void verificarContaPrescrita(Usuario usuario, Collection<Conta> colecaoConta) throws FachadaException{

		try{

			this.getControladorFaturamento().verificarContaPrescrita(usuario, colecaoConta);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [FS0013 - Verifica existência de débito prescrito]
	 * 
	 * @author Anderson Italo
	 * @date 29/03/2014
	 */
	public void verificarExistenciaDebitoPrescrito(Usuario usuario, Collection<ContaValoresHelper> colecaoContaValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaValoresHelper) throws FachadaException{

		try{

			this.getControladorFaturamento().verificarExistenciaDebitoPrescrito(usuario, colecaoContaValoresHelper,
							colecaoGuiaValoresHelper);

		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3141] Filtrar Imóveis com Débitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection<ImovelComDebitosPrescritosHelper> pesquisarImoveisComDebitoPrescrito(
					FiltroImoveisComDebitosPrescritosHelper filtroHelper, int pageOffset){

		try{

			return this.getControladorCobranca().pesquisarImoveisComDebitoPrescrito(filtroHelper, pageOffset);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3141] Filtrar Imóveis com Débitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Integer pesquisarQuantidadeImoveisComDebitosPrescritos(FiltroImoveisComDebitosPrescritosHelper filtroHelper){

		try{

			return this.getControladorCobranca().pesquisarQuantidadeImoveisComDebitosPrescritos(filtroHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0002] - Exibir Dados dos Itens de Débito Prescritos do Imóvel
	 * 
	 * @author Anderson Italo
	 * @date 04/04/2014
	 */
	public Collection<PrescricaoContaHelper> pesquisarContasPrescritas(Integer idImovel,
					FiltroImoveisComDebitosPrescritosHelper filtroHelper){

		try{

			return this.getControladorCobranca().pesquisarContasPrescritas(idImovel, filtroHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0002] - Exibir Dados dos Itens de Débito Prescritos do Imóvel
	 * 
	 * @author Anderson Italo
	 * @date 04/04/2014
	 */
	public Collection<PrescricaoGuiaPrestacaoHelper> pesquisarGuiasPrestacaoPrescritas(Integer idImovel,
					FiltroImoveisComDebitosPrescritosHelper filtroHelper){

		try{

			return this.getControladorCobranca().pesquisarGuiasPrestacaoPrescritas(idImovel, filtroHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0003] - Desmarcar Prescrição de Conta
	 * 
	 * @author Anderson Italo
	 * @date 08/04/2014
	 */
	public Integer desmarcarPrescricaoConta(Collection<Integer> colecaoIdsConta, Usuario usuarioLogado){

		try{

			return this.getControladorCobranca().desmarcarPrescricaoConta(colecaoIdsConta, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0005] - Desmarcar Prescrição de Prestação de Guia de Pagamento
	 * 
	 * @author Anderson Italo
	 * @date 08/04/2014
	 */
	public Integer desmarcarPrescricaoGuia(Collection<String> colecaoIdsGuiaPrestacao, Usuario usuarioLogado){

		try{

			return this.getControladorCobranca().desmarcarPrescricaoGuia(colecaoIdsGuiaPrestacao, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @param anoMesReferencia
	 */

	public void ajusteResumoAcaoCobranca(){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTE_RESUMO_ACAO_COBRANCA, ConstantesJNDI.QUEUE_CONTROLADOR_COBRANCA_MDB,
						new Object[] {});
	}

	/**
	 * OC1213341 - Verificar se existe valor do Serviço Tipo para a Localidade informada se positivo
	 * retorna o mesmo.
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public BigDecimal verificarServicoTipoValorLocalidade(Integer idImovel, Integer idDebitoTipo){

		BigDecimal valorServicoLocalidade = null;

		try{

			valorServicoLocalidade = (BigDecimal) getControladorAtendimentoPublico().verificarServicoTipoValorLocalidade(idImovel,
							idDebitoTipo);

		}catch(Exception e){
			e.printStackTrace();
		}

		return valorServicoLocalidade;
	}

	/**
	 * OC1213341 - Inserir coleção de Serviços tipos por Localidade
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public void inserirColecaoServicoTipoValorLocalidade(Collection<Object> colecaoObjetos){

		try{

			getControladorUtil().inserirColecaoObjetos(colecaoObjetos);

		}catch(Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * OC1213341 - Remover coleção de Serviços tipos por Localidade
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public void removerColecaoServicoTipoValorLocalidade(Collection<Object> colecaoObjetos){

		try{

			getControladorUtil().removerColecaoObjetos(colecaoObjetos);

		}catch(Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * OC1213341 - Verificar se existe valor do Debito Tipo para a Localidade informada se positivo
	 * retorna o mesmo.
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public BigDecimal verificarDebitoTipoValorLocalidade(Integer idImovel, Integer idDebitoTipo){

		BigDecimal valorDebitoLocalidade = null;

		try{

			valorDebitoLocalidade = (BigDecimal) getControladorFaturamento().verificarDebitoTipoValorLocalidade(idImovel, idDebitoTipo);

		}catch(Exception e){
			e.printStackTrace();
		}

		return valorDebitoLocalidade;
	}

	/**
	 * OC1213341 - Inserir coleção de Debitos tipos por Localidade
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public void inserirColecaoDebitoTipoValorLocalidade(Collection<Object> colecaoObjetos){

		try{

			getControladorUtil().inserirColecaoObjetos(colecaoObjetos);

		}catch(Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * OC1213341 - Remover coleção de Debitos tipos por Localidade
	 * 
	 * @author Ado Rocha
	 * @date 23/04/2014
	 **/
	public void removerColecaoDebitoTipoValorLocalidade(Collection<Object> colecaoObjetos){

		try{

			getControladorUtil().removerColecaoObjetos(colecaoObjetos);

		}catch(Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * [UC3149] Inserir Atividade Econômica
	 * 
	 * @author Anderson Italo
	 * @date 29/06/2014
	 */
	public Object inserirAtividadeEconomica(AtividadeEconomica atividadeEconomica, Usuario usuario){

		try{

			Integer id = (Integer) this.getControladorCliente().inserirAtividadeEconomica(atividadeEconomica, usuario);
			return id;
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3150] Manter Atividade Econômica
	 * [SB0001] - Atualizar Atividade Econômica
	 * 
	 * @author Anderson Italo
	 * @date 29/06/2014
	 */
	public void atualizarAtividadeEconomica(AtividadeEconomica atividadeEconomica, Usuario usuario){

		try{

			this.getControladorCliente().atualizarAtividadeEconomica(atividadeEconomica, usuario);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC3150] Manter Atividade Econômica
	 * [SB0002] - Excluir Atividade Econômica
	 * 
	 * @author Anderson Italo
	 * @date 29/06/2014
	 */
	public void removerAtividadeEconomica(String[] ids, Usuario usuarioLogado){

		try{

			this.getControladorCliente().removerAtividadeEconomica(ids, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <p>
	 * [OC1348276] [NF] Refaturar todas as contas da localidade 062 com referência de 10/2009 a
	 * 08/2014
	 * </p>
	 * <p>
	 * Refaturar todas as contas geradas para o municipio de Siriri, para atendermos ao trabalho que
	 * a Deso está desenvolvendo naquele município e a RDE 12/2014. Parâmetros:
	 * <ul>
	 * <li>Localidade: 062</li>
	 * <li>Período de referência das faturas: 10/2009 a 08/2014</li>
	 * <li>Refaturar consumo de todas as matrículas de categoria Residencial e Comercial para 10m³ e
	 * categoria Industrial para 30m³</li>
	 * </ul>
	 * </p>
	 * 
	 * @author Magno Silveira { @literal <magno.silveira@procenge.com.br> }
	 * @since 2014-09-02
	 * @param anoMesReferenciaInicial
	 * @param anoMesReferenciaFinal
	 */
	public void refaturarContasDESOLocalidade062(Integer anoMesReferencia){

		try{
			this.getControladorFaturamento().refaturarContasDESOLocalidade062(anoMesReferencia);
		}catch(ControladorException ce){
			throw new FachadaException(ce.getMessage(), ce, ce.getParametroMensagem());
		}
	}

	/**
	 * OC1307375 - Criado rotina de ajuste para testar alteração no calcular valores de água e
	 * esgoto cascata
	 * 
	 * @author Anderson Italo
	 * @date 03/07/2014
	 **/
	public void executarAjusteVerificarBatimentoCalculoValorConta(Integer anoMesReferencia){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTE_BATIMENTO_VALORES_CALCULAR_CONTA,
						ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB, new Object[] {anoMesReferencia});

	}

	/**
	 * [UC0084] - Gerar Faturamento Imediato
	 * [SB0007] - Gerar Movimento Roteiro de Empresa
	 * 
	 * @author Anderson Italo
	 * @date 12/04/2013
	 * @throws ControladorException
	 */
	public Object[] obterDadosLeituraAnterior(Integer anoMesReferenciaFaturamento, Integer idMedicaoTipo, Imovel imovel){

		Object[] dadosLeituraAnterior = null;
		try{

			dadosLeituraAnterior = getControladorFaturamento()
							.obterDadosLeituraAnterior(anoMesReferenciaFaturamento, idMedicaoTipo, imovel);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return dadosLeituraAnterior;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0050] Verificar imóvel em execução fiscal
	 * 
	 * @author Hebert Falcão
	 * @date 21/05/2014
	 */
	public Short verificarImovelEmExecucaoFiscal(Integer idImovel){

		try{
			return this.getControladorCobranca().verificarImovelEmExecucaoFiscal(idImovel);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void validarEntidadesDebitoParcelamentoImovel(Parcelamento parcelamento, Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, Collection<DebitoACobrar> colecaoDebitoACobrar,
					Collection<CreditoARealizar> colecaoCreditoARealizar){

		try{

			this.getControladorCobranca().validarEntidadesDebitoParcelamentoImovel(parcelamento, colecaoContaValores,
							colecaoGuiaPagamentoValores, colecaoDebitoACobrar, colecaoCreditoARealizar);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<Conta> classificarContasParaHistorico(Collection<ContaValoresHelper> colecaoContaValores, Usuario usuarioLogado,
					String indicadorContasRevisao){

		try{

			return this.getControladorCobranca().classificarContasParaHistorico(colecaoContaValores, usuarioLogado, indicadorContasRevisao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public void criarTabelaTemporariaRelatorioTotalContasEmitidasLocalidade(){

		try{
			this.getControladorFaturamento().criarTabelaTemporariaRelatorioTotalContasEmitidasLocalidade();
		}catch(Exception e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public Parcelamento carregarDadosParcelamento(Date dataParcelamento, BigDecimal valorConta, BigDecimal valorGuiaPapagamento,
					BigDecimal valorServicosACobrar, BigDecimal valorParcelamentosACobrar, BigDecimal valorCreditoARealizar,
					BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora, BigDecimal valorMulta,
					BigDecimal valorDebitoAtualizado, BigDecimal valorDescontoAcrescimos, BigDecimal valorDescontoAntiguidade,
					BigDecimal valorDescontoInatividade, BigDecimal valorEntrada, BigDecimal valorJurosParcelamento,
					Short numeroPrestacoes, BigDecimal valorPrestacao, Short indicadorRestabelecimento, Short indicadorContasRevisao,
					Short indicadorGuiasPagamento, Short indicadorAcrescimosImpotualidade, Short indicadorDebitosACobrar,
					Short indicadorCreditoARealizar, BigDecimal percentualDescontoAcrescimos, BigDecimal percentualDescontoAntiguidade,
					BigDecimal percentualDescontoInatividadeLigacaoAgua, Imovel imovel, Usuario usuario, Integer parcelamentoPerfilId,
					Collection<ContaValoresHelper> colecaoContaValores, Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar,
					BigDecimal taxaJuros, Short indicadorConfirmacaoParcelamento, Cliente cliente, BigDecimal descontoSancoesRDEspecial,
					BigDecimal descontoTarifaSocialRDEspecial, Date dataEntradaParcelamento, String indicadorCobrancaParcelamento,
					Integer anoMesReferenciaDebitoInicial, Integer anoMesReferenciaDebitoFinal, BigDecimal percentualDescontoJurosMora,
					BigDecimal percentualDescontoMulta, BigDecimal percentualDescontoCorrecaoMonetaria,
					BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao,
					byte[] conteudoTermoParcelamentoInicial, byte[] conteudoTermoParcelamentoFinal, BigDecimal valorSucumbenciaAnterior,
					BigDecimal valorSucumbenciaAtual, Short quantidadeParcelasSucumbencia, BigDecimal valorDiligencias,
					BigDecimal valorAtualizacaoMonetariaSucumbencia, BigDecimal valorJurosMoraSucumbencia, BigDecimal valorASerNegociado,
					BigDecimal valorASerParcelado){

		try{

			return this.getControladorCobranca().gerarDadosParcelamento(dataParcelamento, valorConta, valorGuiaPapagamento,
							valorServicosACobrar, valorParcelamentosACobrar, valorCreditoARealizar, valorAtualizacaoMonetaria,
							valorJurosMora, valorMulta, valorDebitoAtualizado, valorDescontoAcrescimos, valorDescontoAntiguidade,
							valorDescontoInatividade, valorEntrada, valorJurosParcelamento, numeroPrestacoes, valorPrestacao,
							indicadorRestabelecimento, indicadorContasRevisao, indicadorGuiasPagamento, indicadorAcrescimosImpotualidade,
							indicadorDebitosACobrar, indicadorCreditoARealizar, percentualDescontoAcrescimos,
							percentualDescontoAntiguidade, percentualDescontoInatividadeLigacaoAgua, imovel, usuario, parcelamentoPerfilId,
							colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar, colecaoCreditoARealizar, taxaJuros,
							indicadorConfirmacaoParcelamento, cliente, descontoSancoesRDEspecial, descontoTarifaSocialRDEspecial,
							dataEntradaParcelamento, indicadorCobrancaParcelamento, anoMesReferenciaDebitoInicial,
							anoMesReferenciaDebitoFinal, percentualDescontoJurosMora, percentualDescontoMulta,
							percentualDescontoCorrecaoMonetaria, valorDescontoAcrescimosImpontualidadeNaPrestacao,
							colecaoParcelamentoConfiguracaoPrestacao, conteudoTermoParcelamentoInicial, conteudoTermoParcelamentoFinal,
							false, valorSucumbenciaAnterior, valorSucumbenciaAtual, quantidadeParcelasSucumbencia, valorDiligencias,
							valorAtualizacaoMonetariaSucumbencia, valorJurosMoraSucumbencia, valorASerNegociado, valorASerParcelado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	public String pesquisarEnderecoClienteAbreviado(Integer idCliente, boolean indicadorAbreviado){

		try{

			return getControladorEndereco().pesquisarEnderecoClienteAbreviado(idCliente, indicadorAbreviado);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public boolean verificarExecucaoFiscal(Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoHelper, Collection<DebitoACobrar> colecaoDebitoACobrar){

		try{

			return getControladorCobranca().verificarExecucaoFiscal(colecaoContaValores, colecaoGuiaPagamentoHelper, colecaoDebitoACobrar);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificarParcelamentoExecucaoFiscal(Parcelamento parcelamento){

		try{

			return this.getControladorCobranca().verificarParcelamentoExecucaoFiscal(parcelamento);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Date obterDataVencimentoGuiaEntradaParcelamento(Date data, Integer numeroDias){

		try{

			return this.getControladorCobranca().obterDataVencimentoGuiaEntradaParcelamento(data, numeroDias);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificarContaExecucaoFiscal(Conta conta){

		try{

			return this.getControladorCobranca().verificarContaExecucaoFiscal(conta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Yara Souza
	 * @date 29/07/2014
	 **/
	public void executarAjusteClienteDebitoACobrar(){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTE_CLIENTE_DEBITO_A_COBRAR, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {});

	}

	/**
	 * @param cliente
	 * @return
	 */
	public Collection pesquisarClienteDebitoACobrar(Cliente cliente){

		try{
			return getControladorCadastro().pesquisarClienteDebitoACobrar(cliente);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @param cliente
	 * @return
	 */

	public Collection pesquisarClienteGuiaPagamento(Cliente cliente){

		try{
			return getControladorCadastro().pesquisarClienteGuiaPagamento(cliente);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * @param debitoACobrar
	 */

	public void inserirClienteDebitoACobrar(DebitoACobrar debitoACobrar){

		try{
			getControladorCobranca().inserirClienteDebitoACobrar(debitoACobrar);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

	/**
	 * [UC0366] Inserir Registro de Atendimento
	 * [UC0408] Atualizar Registro de Atendimento
	 * 
	 * @author Yara Souza
	 * @date 08/08/2014
	 */

	public List<ServicoAssociadoValorHelper> pesquisarServicoAssociado(Integer idSolicitacaoTipoEspecificacao){

		try{

			return this.getControladorRegistroAtendimento().pesquisarServicoAssociado(idSolicitacaoTipoEspecificacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificarDebitoACobrarExecucaoFiscal(DebitoACobrar debitoACobrar){

		try{

			return this.getControladorCobranca().verificarDebitoACobrarExecucaoFiscal(debitoACobrar);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificarGuiaPagamentoPrestacaoExecucaoFiscal(GuiaPagamentoPrestacao guiaPagamentoPrestacao){

		try{

			return this.getControladorCobranca().verificarGuiaPagamentoPrestacaoExecucaoFiscal(guiaPagamentoPrestacao);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Short verificarImovelDebitoExecucaoFiscal(Collection<DebitoACobrar> colecaoDebitoACobrar,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamento, Collection<ContaValoresHelper> colecaoConta){

		try{

			return this.getControladorCobranca().verificarImovelDebitoExecucaoFiscal(colecaoDebitoACobrar, colecaoGuiaPagamento,
							colecaoConta);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * [UC0534] Inserir Feriado
	 * [SB0002] - Importar Feriado
	 * 
	 * @author Anderson Italo
	 * @throws IOException
	 * @throws ControladorException
	 * @date 18/08/2014
	 */
	public File importarFeriado(File arquivoFeriados, Usuario usuarioLogado){

		File retorno = null;
		try{

			retorno = getControladorCadastro().importarFeriado(arquivoFeriados, usuarioLogado);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}catch(IOException ex1){

			throw new FachadaException(ex1.getMessage(), ex1, ex1.getMessage());
		}

		return retorno;

	}

	/**
	 * 'chavesDebitosACobrar' (Ex.: 9988-1$9988-2$7766-1)
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Gicevaler Couto
	 * @date 01/08/2014
	 */
	public Collection<DebitoACobrarValoresHelper> retornarDebitoACobrarValoresSelecionadas(String chavesDebitosACobrar,
					Collection<DebitoACobrarValoresHelper> colecaoDebitoACobrarValores){

		try{
			return this.getControladorCobranca()
							.retornarDebitoACobrarValoresSelecionadas(chavesDebitosACobrar, colecaoDebitoACobrarValores);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC0077] Manter Hidrômetro
	 * Método que obém Dados das Ordens de Serviço relacionadas ao hidrômetro
	 * 
	 * @author Anderson Italo
	 * @date 03/09/2014
	 */
	public Collection<OrdemServicoManutencaoHidrometroHelper> pesquisarDadosOrdensServicoManutencaoHidrometro(Integer idHidrometro){

		Collection<OrdemServicoManutencaoHidrometroHelper> retorno = null;

		try{

			retorno = getControladorMicromedicao().pesquisarDadosOrdensServicoManutencaoHidrometro(idHidrometro);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * [UC0078] Filtrar Hidrômetro
	 * 
	 * @author Anderson Italo
	 * @date 04/09/2014
	 */
	public Collection pesquisarHidrometroFiltro(FiltroHidrometroHelper filtroHidrometroHelper, Integer numeroPagina){

		Collection retorno = null;

		try{

			retorno = getControladorMicromedicao().pesquisarHidrometroFiltro(filtroHidrometroHelper, numeroPagina);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * [UC0078] Filtrar Hidrômetro
	 * 
	 * @author Anderson Italo
	 * @date 04/09/2014
	 */
	public Integer pesquisarHidrometroFiltroTotalRegistros(FiltroHidrometroHelper filtroHidrometroHelper){

		Integer retorno = null;

		try{

			retorno = getControladorMicromedicao().pesquisarHidrometroFiltroTotalRegistros(filtroHidrometroHelper);
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	public Short existeProcessoExecucaoFiscal(){

		try{
			return this.getControladorCadastro().existeProcessoExecucaoFiscal();
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param imovelEmissaoOrdensSeletivaHelper
	 * @param usuarioLogado
	 * @return
	 */
	public Object[] gerarRelatorioOrdemSeletiva(ImovelEmissaoOrdensSeletivaHelper imovelEmissaoOrdensSeletivaHelper, Usuario usuarioLogado){

		try{
			return this.getControladorOrdemServico().gerarRelatorioOrdemSeletiva(imovelEmissaoOrdensSeletivaHelper, usuarioLogado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public boolean verificarTipoRelacaoUsuariaAtivo(Collection<ClienteImovel> colecaoClientesImovel){

		try{
			return this.getControladorImovel().verificarTipoRelacaoUsuariaAtivo(colecaoClientesImovel);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Collection<ClienteImovel> obterListaClientesRelacaoDevedor(Integer idImovelOrigem, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito, Integer indicadorPagamento, Integer indicadorContasRevisao,
					Integer indicadorDebitosACobrar, Integer indicadorCreditoARealizar, Integer indicadorNotasPromissorias,
					Integer indicadorGuiasPagamento, Integer indicadorAcrescimosImpotualidade,
					Short indicadorNaoConsiderarPagamentoNaoClassificado, Short indicadorMulta, Short indicadorJurosMora,
					Short indicadorAtualizacaoMonetaria, Integer indicadorCalcularAcrescimosSucumbenciaAnterior,
					Short indicadorEmissaoDocumento, Integer tipoRelacaoCliente){

		try{
			return this.getControladorCobranca().obterListaClientesRelacaoDevedor(idImovelOrigem, anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito, indicadorPagamento, indicadorContasRevisao, indicadorDebitosACobrar,
							indicadorCreditoARealizar, indicadorNotasPromissorias, indicadorGuiasPagamento,
							indicadorAcrescimosImpotualidade, indicadorNaoConsiderarPagamentoNaoClassificado, indicadorMulta,
							indicadorJurosMora, indicadorAtualizacaoMonetaria, indicadorCalcularAcrescimosSucumbenciaAnterior,
							indicadorEmissaoDocumento, tipoRelacaoCliente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	/**
	 * Método que cria uma coleção de UsuarioAcesso
	 * 
	 * @author Saulo Lima
	 * @date 16/09/2014
	 */
	public Collection<UsuarioAcesso> criarColecaoUsuarioAcesso(int indicadorSelecionado){

		try{
			return this.getControladorUsuario().criarColecaoUsuarioAcesso(indicadorSelecionado);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * Método que pesquisa as retrições de horário de acesso ao sistema de um usuário
	 * 
	 * @author Saulo Lima
	 * @date 20/09/2014
	 */
	public Collection<UsuarioAcesso> pesquisarUsuarioAcesso(Integer idUsuario){

		try{
			return this.getControladorUsuario().pesquisarUsuarioAcesso(idUsuario);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * [UC3156] Simular Cálculo da Conta Dados Reais
	 * 
	 * @author Anderson Italo
	 * @date 22/09/2014
	 */
	public Collection pesquisarContasSimularCalculoDadosReais(FiltroContaSimularCalculoHelper helper, Integer numeroPagina){

		try{

			return this.getControladorFaturamento().pesquisarContasSimularCalculoDadosReais(helper, numeroPagina);
		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * /**
	 * [UC3156] Simular Cálculo da Conta Dados Reais
	 * 
	 * @author Anderson Italo
	 * @date 22/09/2014
	 */
	public Integer pesquisarTotalRegistrosContasSimularCalculoDadosReais(FiltroContaSimularCalculoHelper helper){

		try{

			return this.getControladorFaturamento().pesquisarTotalRegistrosContasSimularCalculoDadosReais(helper);
		}catch(ControladorException e){

			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public void executarAjusteConversaoAcordoTac(){

		this.enviarMensagemControladorBatch(MetodosBatch.AJUSTE_CONVERSAO_ACORDO_TAC, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {});
	};

	/**
	 * Recupera a coleção Entulho Medida.
	 * 
	 * @author Genival Barbosa
	 * @date 20/09/2014
	 * @return Coleção de EntuhoMedida
	 */
	public Collection<EntulhoMedida> pesquisarEntulhoMedida(){

		Collection<EntulhoMedida> retorno = null;

		try{

			retorno = getControladorOrdemServico().pesquisarEntulhoMedida();
		}catch(ControladorException ex){

			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

		return retorno;
	}

	/**
	 * Recupera Entulho Medida.
	 * 
	 * @author Genival Barbosa
	 * @date 20/09/2014
	 * @return EntulhoMedida
	 */
	public EntulhoMedida pesquisarEntulhoMedida(Integer idEntulhoMedida){

		try{
			return this.getControladorOrdemServico().pesquisarEntulhoMedida(idEntulhoMedida);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public ObterIndicadorExistenciaHidrometroHelper obterIndicadorExistenciaHidrometroLigacaoAguaPoco(Integer idImovel,
					boolean considerarSituacaoLigacao){

		try{
			return this.getControladorRegistroAtendimento().obterIndicadorExistenciaHidrometroLigacaoAguaPoco(idImovel,
							considerarSituacaoLigacao);

		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}

	}

	public OrdemServicoProgramacao pesquisarOrdemServicoProgramacaoPorOS(Integer idOrdemServico){

		try{
			return this.getControladorOrdemServico().pesquisarOSProgramacaoAtivaPorOS(idOrdemServico);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Integer recuperaQuantidadeDiasUnidade(Integer idOS, Short permiteTramiteIndependente){

		try{
			return this.getControladorOrdemServico().recuperaQuantidadeDiasUnidade(idOS, permiteTramiteIndependente);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	public Boolean validarGerarGuiaPagamentoOS(Integer idServicoTipo, Integer idRegistroAtendimento){

		try{
			return this.getControladorOrdemServico().validarGerarGuiaPagamentoOS(idServicoTipo, idRegistroAtendimento);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * @param objetoTransacao
	 */

	public void registrarTransacao(ObjetoTransacao objetoTransacao){

		try{

			this.getControladorTransacao().registrarTransacao(objetoTransacao);
		}catch(ControladorException e){
			throw new FachadaException(e.getMessage(), e, e.getParametroMensagem());
		}
	}

	/**
	 * <p>
	 * [OC1372979]
	 * </p>
	 * 
	 * @author Magno Silveira (magno.silveira@procenge.com.br)
	 * @since 22/10/2014
	 * @param imovelCondominio
	 * @return
	 */
	public Collection pesquisarImoveisSubcategoriasParaCondominio(Integer imovelCondominioId){

		try{
			return this.getControladorImovel().pesquisarImoveisSubcategoriasParaCondominio(imovelCondominioId);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * <p>
	 * [OC1381720]
	 * </p>
	 * 
	 * @author Magno Silveira (magno.silveira@procenge.com.br)
	 * @since 22/10/2014
	 * @param boletoBancarioId
	 * @return true caso o boleto o cancelamento do boleto seja permitido
	 */
	public boolean boletoBancarioPodeSerCancelado(Integer boletoBancarioId){

		try{
			return this.getControladorCobranca().boletoBancarioPodeSerCancelado(boletoBancarioId);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * [UC0101] - Consistir Leituras e Calcular Consumos.
	 * Permite consistir a leitura e calcular o consumo de um único imóvel para referência do
	 * faturamento de sistemaParametro
	 * 
	 * @author Anderson Italo
	 * @date 28/10/2014
	 */
	public void consistirLeiturasCalcularConsumosPorImovel(Integer IdImovel){

		try{

			this.getControladorMicromedicao().consistirLeiturasCalcularConsumosPorImovel(IdImovel);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	/**
	 * [UC0187] Inserir Guia de Pagamento
	 * Processos das execuções especiais pendentes de cobrança do valor de sucumbência
	 */
	public Collection<Integer> pesquisarProcessosExecucaoEspeciaisPendentesCobrancaPorCliente(Integer idCliente){

		try{
			return this.getControladorFaturamento().pesquisarProcessosExecucaoEspeciaisPendentesCobrancaPorCliente(idCliente);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}



	public void inserirRegistrosTabelaTemporariaRelatorioTotalContasEmitidasLocalidade(Integer anoMesReferencia){

		try{
			this.getControladorFaturamento().inserirRegistrosTabelaTemporariaRelatorioTotalContasEmitidasLocalidade(anoMesReferencia);
		}catch(Exception e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public List<Object[]> gerarRelatorioTotalContasEmitidasLocalidade(Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento().gerarRelatorioTotalContasEmitidasLocalidade(anoMesReferencia);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	public Long gerarQuantidadeRelatorioTotalContasEmitidasLocalidade(Integer anoMesReferencia){

		try{
			return this.getControladorFaturamento().gerarQuantidadeRelatorioTotalContasEmitidasLocalidade(anoMesReferencia);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}
	}

	public List<Object[]> pesquisarRotasComAlteracaoNasLigacoesEconomiasComReferencia(){

		try{
			return this.getControladorBatch().pesquisarRotasComAlteracaoNasLigacoesEconomiasComReferencia();
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	/**
	 * @param idClienteResponsavel
	 * @param colecaoReferencias
	 * @return
	 */
	public BigDecimal obterValorTotalContasParaCancelamento(Integer idClienteResponsavel,
					Collection<IntervaloReferenciaHelper> colecaoReferencias){

		try{
			return this.getControladorArrecadacao().obterValorTotalContasParaCancelamento(idClienteResponsavel, colecaoReferencias);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	/**
	 * @author Yara Souza
	 * @date 04/03/2014
	 */
	public void gerarCreditoARealizarAjuste(Integer referencia, String idGrupos){

		this.enviarMensagemControladorBatch(MetodosBatch.GERAR_CREDITO_A_REALIZAR_AJUSTE, ConstantesJNDI.QUEUE_CONTROLADOR_FATURAMENTO_MDB,
						new Object[] {referencia, idGrupos});
	}

	public RegistroAtendimentoUnidade consultarRegistroAtendimentoUnidadeEncerramento(Integer idRA, Integer idUnidade){

		RegistroAtendimentoUnidade retorno = null;

		Collection colecaoRegistroAtendimentoUnidade = null;

		FiltroRegistroAtendimentoUnidade filtroRegistroAtendimentoUnidade = new FiltroRegistroAtendimentoUnidade();

		filtroRegistroAtendimentoUnidade.adicionarParametro(new ParametroSimples(FiltroRegistroAtendimentoUnidade.REGISTRO_ATENDIMENTO_ID,
						idRA));

		filtroRegistroAtendimentoUnidade.adicionarParametro(new ParametroSimples(
						FiltroRegistroAtendimentoUnidade.UNIDADE_ORGANIZACIONAL_ID, idUnidade));
		filtroRegistroAtendimentoUnidade.adicionarParametro(new ParametroSimples(
						FiltroRegistroAtendimentoUnidade.ATENDIMENTO_RELACAO_TIPO_ID, AtendimentoRelacaoTipo.ENCERRAR));

		filtroRegistroAtendimentoUnidade.adicionarCaminhoParaCarregamentoEntidade(FiltroRegistroAtendimentoUnidade.USUARIO);

		colecaoRegistroAtendimentoUnidade = pesquisar(filtroRegistroAtendimentoUnidade, RegistroAtendimentoUnidade.class.getName());

		if(colecaoRegistroAtendimentoUnidade != null && !colecaoRegistroAtendimentoUnidade.isEmpty()){
			retorno = (RegistroAtendimentoUnidade) Util.retonarObjetoDeColecao(colecaoRegistroAtendimentoUnidade);

		}

		return retorno;
	}

	public Collection<DocumentoTipo> pesquisarDocumentoTipoModelo(){

		try{
			return this.getControladorCobranca().pesquisarDocumentoTipoModelo();
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	public Collection<DocumentoTipoLayoutCobrancaAcaoHelper> pesquisarDocumentoTipoLayoutPorAcaoCobranca(Integer idAcaoCobranca,
					Short indicadorUsoDocumentoTipoLayout){

		try{
			return this.getControladorCobranca().pesquisarDocumentoTipoLayoutPorAcaoCobranca(idAcaoCobranca,
							indicadorUsoDocumentoTipoLayout);
		}catch(ControladorException e){
			throw new FachadaException("erro.sistema", e);
		}

	}

	/**
	 * [UC3165] Gerar Relatório Posição do Débito da Negativação - Legado CAGEPA
	 * Pesquisar as contas em processo de negativação e já transferidas para o histórico
	 * 
	 * @date 07/03/2015
	 * @author Luciano Galvão
	 */
	public Collection<ContaHistorico> pesquisarContaEmProcessoNegativacaoCagepa(Integer anoMesFaturamento){

		try{
			return getControladorFaturamento().pesquisarContaEmProcessoNegativacaoCagepa(anoMesFaturamento);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}
	/**
	 * Efetua a instalaçao de varios hidrometros em lote
	 * 
	 * @author
	 * @param
	 * @date
	 */

	public Collection[] efetuarInstalacaoHidrometrosComLigacaoAguaEmLote(InputStream inputStream, Usuario usuario){

		try{
			return getControladorAtendimentoPublico().efetuarInstalacaoHidrometrosComLigacaoAguaEmLote(inputStream, usuario);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	/**
	 * @author Magno Silveira <magno.silveira@procenge.com.br>
	 * @since 16/04/2015
	 * @param idImovel
	 * @param paramMotivoRetificaoOcorrenciaConsumo
	 * @return
	 */
	public int obterQtdContasRetificadasPorMotivoRetificacao(Integer idImovel, Integer paramMotivoRetificaoOcorrenciaConsumo){

		try{
			return this.getControladorFaturamento().obterQtdContasRetificadasPorMotivoRetificacao(idImovel,
							paramMotivoRetificaoOcorrenciaConsumo);
		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}
	}

	public Collection<Categoria> obterCategorias(Integer idImovel, Integer anoMesMovimento){

		return this.getControladorImovel().obterCategorias(idImovel, anoMesMovimento);

	}

	public Integer retornarAnoMesReferenciaFaturamentoGrupoImovel(Integer idImovel){

		try{

			return this.getControladorImovel().retornarAnoMesReferenciaFaturamentoGrupoImovel(idImovel);

		}catch(ControladorException ex){
			throw new FachadaException(ex.getMessage(), ex, ex.getParametroMensagem());
		}

	}

}
