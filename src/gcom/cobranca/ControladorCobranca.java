/*
 * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 * 
 * GSANPCG
 * André Nishimura
 * Eduardo Henrique Bandeira Carneiro da Silva
 * José Gilberto de França Matos
 * Saulo Vasconcelos de Lima
 * Virginia Santos de Melo
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */

package gcom.cobranca;

import gcom.arrecadacao.*;
import gcom.arrecadacao.banco.Agencia;
import gcom.arrecadacao.banco.Banco;
import gcom.arrecadacao.banco.FiltroBanco;
import gcom.arrecadacao.debitoautomatico.DebitoAutomatico;
import gcom.arrecadacao.debitoautomatico.FiltroDebitoAutomatico;
import gcom.arrecadacao.pagamento.*;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocal;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocalHome;
import gcom.atendimentopublico.bean.IntegracaoComercialHelper;
import gcom.atendimentopublico.ligacaoagua.*;
import gcom.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocal;
import gcom.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocalHome;
import gcom.atendimentopublico.ligacaoesgoto.FiltroLigacaoEsgotoSituacao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gcom.atendimentopublico.ordemservico.*;
import gcom.atendimentopublico.ordemservico.bean.OSEncerramentoHelper;
import gcom.atendimentopublico.registroatendimento.*;
import gcom.batch.*;
import gcom.cadastro.ControladorCadastroLocal;
import gcom.cadastro.ControladorCadastroLocalHome;
import gcom.cadastro.EnvioEmail;
import gcom.cadastro.cliente.*;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.empresa.FiltroEmpresa;
import gcom.cadastro.endereco.*;
import gcom.cadastro.funcionario.Funcionario;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.geografico.UnidadeFederacao;
import gcom.cadastro.imovel.*;
import gcom.cadastro.imovel.bean.GerarRelacaoDebitosHelper;
import gcom.cadastro.imovel.bean.GerarRelacaoDebitosImovelHelper;
import gcom.cadastro.localidade.*;
import gcom.cadastro.sistemaparametro.FiltroSistemaParametro;
import gcom.cadastro.sistemaparametro.SistemaParametro;
import gcom.cadastro.unidade.ControladorUnidadeLocal;
import gcom.cadastro.unidade.ControladorUnidadeLocalHome;
import gcom.cadastro.unidade.UnidadeOrganizacional;
import gcom.cobranca.bean.*;
import gcom.cobranca.campanhapremiacao.Campanha;
import gcom.cobranca.campanhapremiacao.CampanhaCadastro;
import gcom.cobranca.campanhapremiacao.FiltroCampanha;
import gcom.cobranca.campanhapremiacao.FiltroCampanhaCadastro;
import gcom.cobranca.contrato.*;
import gcom.cobranca.opcaoparcelamento.PreParcelamento;
import gcom.cobranca.opcaoparcelamento.PreParcelamentoOpcao;
import gcom.cobranca.parcelamento.*;
import gcom.cobranca.prescricao.*;
import gcom.contabil.*;
import gcom.fachada.Fachada;
import gcom.faturamento.*;
import gcom.faturamento.bean.CalcularValoresAguaEsgotoHelper;
import gcom.faturamento.consumotarifa.ConsumoTarifa;
import gcom.faturamento.conta.*;
import gcom.faturamento.credito.*;
import gcom.faturamento.debito.*;
import gcom.financeiro.ControladorFinanceiroLocal;
import gcom.financeiro.ControladorFinanceiroLocalHome;
import gcom.financeiro.FinanciamentoTipo;
import gcom.financeiro.lancamento.LancamentoItemContabil;
import gcom.financeiro.lancamento.bean.LancamentoItemContabilParcelamentoHelper;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaEventualHelper;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaHelper;
import gcom.gui.ActionServletException;
import gcom.gui.cobranca.*;
import gcom.gui.faturamento.bean.GuiaPagamentoPrestacaoHelper;
import gcom.interceptor.ObjetoTransacao;
import gcom.interceptor.RegistradorOperacao;
import gcom.micromedicao.*;
import gcom.micromedicao.bean.ConsultarHistoricoMedicaoIndividualizadaHelper;
import gcom.micromedicao.consumo.ConsumoAnormalidade;
import gcom.micromedicao.consumo.ConsumoHistorico;
import gcom.micromedicao.consumo.ConsumoTipo;
import gcom.micromedicao.consumo.LigacaoTipo;
import gcom.micromedicao.hidrometro.*;
import gcom.micromedicao.leitura.LeituraAnormalidade;
import gcom.micromedicao.leitura.LeituraTipo;
import gcom.micromedicao.medicao.MedicaoHistorico;
import gcom.micromedicao.medicao.MedicaoTipo;
import gcom.relatorio.ConstantesRelatorios;
import gcom.relatorio.GerenciadorExecucaoTarefaRelatorio;
import gcom.relatorio.cobranca.*;
import gcom.relatorio.cobranca.parcelamento.ExtratoDebitoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.RelacaoParcelamentoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.RelatorioExtratoDebito;
import gcom.relatorio.cobranca.prescricao.DadosRelatorioPrescicaoHelper;
import gcom.relatorio.cobranca.prescricao.RelatorioDebitosPrescritos;
import gcom.relatorio.ordemservico.DadosUltimosConsumosHelper;
import gcom.relatorio.ordemservico.GeradorRelatorioOrdemServico;
import gcom.relatorio.ordemservico.GeradorRelatorioOrdemServicoException;
import gcom.seguranca.ControladorPermissaoEspecialLocal;
import gcom.seguranca.ControladorPermissaoEspecialLocalHome;
import gcom.seguranca.acesso.*;
import gcom.seguranca.acesso.usuario.FiltroUsuario;
import gcom.seguranca.acesso.usuario.Usuario;
import gcom.seguranca.acesso.usuario.UsuarioAcao;
import gcom.seguranca.acesso.usuario.UsuarioAcaoUsuarioHelper;
import gcom.seguranca.transacao.ControladorTransacaoLocal;
import gcom.seguranca.transacao.ControladorTransacaoLocalHome;
import gcom.spcserasa.ControladorSpcSerasaLocal;
import gcom.spcserasa.ControladorSpcSerasaLocalHome;
import gcom.spcserasa.FiltroNegativador;
import gcom.spcserasa.bean.DadosNegativacaoPorImovelHelper;
import gcom.tarefa.TarefaRelatorio;
import gcom.util.*;
import gcom.util.email.ServicosEmail;
import gcom.util.filtro.*;
import gcom.util.parametrizacao.ExecutorParametro;
import gcom.util.parametrizacao.Parametrizacao;
import gcom.util.parametrizacao.ParametroGeral;
import gcom.util.parametrizacao.arrecadacao.ParametroArrecadacao;
import gcom.util.parametrizacao.cobranca.ExecutorParametrosCobranca;
import gcom.util.parametrizacao.cobranca.ParametroCobranca;
import gcom.util.parametrizacao.cobranca.parcelamento.ParametroParcelamento;

import java.io.*;
import java.math.BigDecimal;
import java.math.MathContext;
import java.sql.Blob;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.zip.ZipOutputStream;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.mail.SendFailedException;

import org.apache.commons.beanutils.BeanComparator;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.collections.comparators.ComparatorChain;
import org.apache.commons.validator.GenericValidator;
import org.apache.log4j.Logger;
import org.hibernate.Hibernate;

import br.com.danhil.BarCode.Interleaved2of5;
import br.com.procenge.comum.exception.NegocioException;
import br.com.procenge.util.Constantes;

/**
 * Controlador Cobranca PADRÃO
 * 
 * @author Raphael Rossiter
 * @date 26/06/2007
 */
public class ControladorCobranca
				implements SessionBean, IControladorCobranca, Parametrizacao {

	protected static final long serialVersionUID = 1L;

	private static final Integer LIMEITE_IMOVEIS_CURVA_ABC_DEBITO = 1000;

	private static final Logger LOGGER = Logger.getLogger(ControladorCobranca.class);

	SessionContext sessionContext;

	protected IRepositorioImovel repositorioImovel = null;

	protected IRepositorioCobranca repositorioCobranca = null;

	protected IRepositorioArrecadacao repositorioArrecadacao = null;

	protected IRepositorioMicromedicao repositorioMicromedicao = null;

	protected IRepositorioUtil repositorioUtil = null;

	protected IRepositorioClienteImovel repositorioClienteImovel = null;

	protected IRepositorioBatch repositorioBatch = null;

	protected IRepositorioFaturamento repositorioFaturamento = null;


	/**
	 * @throws ControladorException
	 */

	public void executarAjusteResumoAcaoCobranca() throws ControladorException{

		try{

			AjusteContabilidadeDeso ajusteContabilidadeDeso = new AjusteContabilidadeDeso();
			ajusteContabilidadeDeso.ajusteResumoAcaoCobranca();

		}catch(Exception e){

			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new EJBException(e);
		}
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0003] - Desmarcar Prescrição de Conta
	 * 
	 * @author Anderson Italo
	 * @date 08/04/2014
	 */
	public Integer desmarcarPrescricaoConta(Collection<Integer> colecaoIdsConta, Usuario usuarioLogado) throws ControladorException{

		Integer quantidadeContasDesmarcadasPrescricao = 0;

		if(!Util.isVazioOrNulo(colecaoIdsConta)){

			DebitoCreditoSituacao debitoCreditoSituacaoPrescrita = (DebitoCreditoSituacao) getControladorUtil().pesquisar(
							DebitoCreditoSituacao.PRESCRITA, DebitoCreditoSituacao.class, true);

			if(debitoCreditoSituacaoPrescrita != null){

				// Para cada uma das contas selecionadas para a desmarcação da prescrição, o sistema
				// efetua a desmarcação
				for(Integer idConta : colecaoIdsConta){

					FiltroContaGeral filtroContaGeral = new FiltroContaGeral();
					filtroContaGeral.adicionarParametro(new ParametroSimples(FiltroContaGeral.ID, idConta));

					ContaGeral contaGeral = (ContaGeral) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroContaGeral,
									ContaGeral.class.getName()));

					// Desmarca a prescrição da conta
					if(contaGeral.getIndicadorHistorico() == ConstantesSistema.NAO.shortValue()){

						FiltroConta filtroConta = new FiltroConta();
						filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaGeral.getId()));
						filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.IMOVEL);

						Collection<Conta> colecaoConta = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
						Conta conta = (Conta) Util.retonarObjetoDeColecao(colecaoConta);
						contaGeral.setConta(conta);

						conta.setDebitoCreditoSituacaoAtual(conta.getDebitoCreditoSituacaoAnterior());
						conta.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoPrescrita);
						conta.setPrescricaoComando(null);
						conta.setUltimaAlteracao(new Date());

						RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.DESMARCAR_PRESCRICAO_DEBITOS,
										new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

						Operacao operacao = new Operacao();
						operacao.setId(Operacao.DESMARCAR_PRESCRICAO_DEBITOS);

						OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
						operacaoEfetuada.setOperacao(operacao);
						operacaoEfetuada.setArgumentoValor(conta.getImovel().getId());

						// Inclui dados da desmarcação da prescrição da conta
						ContaPrescricaoHistorico contaPrescricaoHistorico = new ContaPrescricaoHistorico();
						contaPrescricaoHistorico.setContaGeral(contaGeral);
						contaPrescricaoHistorico.setImovel(conta.getImovel());
						contaPrescricaoHistorico.setCodigoEvento(ContaPrescricaoHistorico.DESMARCACAO_PRESCRICAO);
						contaPrescricaoHistorico.setDataEvento(new Date());
						contaPrescricaoHistorico.setValorConta(conta.getValorTotalContaBigDecimal());
						contaPrescricaoHistorico.setUsuario(usuarioLogado);
						contaPrescricaoHistorico.setUltimaAlteracao(new Date());

						contaPrescricaoHistorico.setOperacaoEfetuada(operacaoEfetuada);
						contaPrescricaoHistorico.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(contaPrescricaoHistorico);

						getControladorUtil().inserir(contaPrescricaoHistorico);

						// Atualiza a conta
						conta.setOperacaoEfetuada(operacaoEfetuada);
						conta.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(conta);

						getControladorUtil().atualizar(conta);

						quantidadeContasDesmarcadasPrescricao = quantidadeContasDesmarcadasPrescricao.intValue() + 1;
					}
				}
			}
		}

		return quantidadeContasDesmarcadasPrescricao;
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0005] - Desmarcar Prescrição de Prestação de Guia de Pagamento
	 * 
	 * @author Anderson Italo
	 * @date 08/04/2014
	 */
	public Integer desmarcarPrescricaoGuia(Collection<String> colecaoIdsGuiaPrestacao, Usuario usuarioLogado)
					throws ControladorException{
		
		Integer quantidadePrestacoesDesmarcadasPrescricao = 0;

		if(!Util.isVazioOrNulo(colecaoIdsGuiaPrestacao)){
			
			DebitoCreditoSituacao debitoCreditoSituacaoPrescrita = (DebitoCreditoSituacao) getControladorUtil().pesquisar(
							DebitoCreditoSituacao.PRESCRITA, DebitoCreditoSituacao.class, true);
			
			FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
			Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = null;
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.DESMARCAR_PRESCRICAO_DEBITOS,
							new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.DESMARCAR_PRESCRICAO_DEBITOS);

			// Para cada uma das prestações selecionadas para a desmarcação da prescrição
			for(String idGuiaPrestacao : colecaoIdsGuiaPrestacao){

				String[] arrayIdGuiaPretacao = idGuiaPrestacao.split("/");

				Integer idGuiaPagamento = Util.obterInteger(arrayIdGuiaPretacao[0]);
				Integer numeroPrestacao = Util.obterInteger(arrayIdGuiaPretacao[1]);
				GuiaPagamentoGeral guiaPagamentoGeral = (GuiaPagamentoGeral) getControladorUtil().pesquisar(idGuiaPagamento,
								GuiaPagamentoGeral.class, false);

				filtroGuiaPagamentoPrestacao.limparListaParametros();
				filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
								idGuiaPagamento));
				filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
								FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ID, DebitoCreditoSituacao.PRESCRITA));
				filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO,
								numeroPrestacao));
				filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO);
				filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_IMOVEL);
				filtroGuiaPagamentoPrestacao
								.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ATUAL);
				filtroGuiaPagamentoPrestacao
								.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ANTERIOR);

				colecaoGuiaPagamentoPrestacao = (Collection<GuiaPagamentoPrestacao>) getControladorUtil().pesquisar(
								filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

				OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
				operacaoEfetuada.setOperacao(operacao);

				GuiaPagamento guiaPagamento = null;
				if(!Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao)){

					// Desmarca a prescrição da prestação
					BigDecimal valorPrestacao = BigDecimal.ZERO;

					for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoGuiaPagamentoPrestacao){

						guiaPagamento = guiaPagamentoPrestacao.getGuiaPagamento();
						operacaoEfetuada.setArgumentoValor(guiaPagamento.getImovel().getId());

						guiaPagamentoPrestacao.setDebitoCreditoSituacao(guiaPagamentoPrestacao.getDebitoCreditoSituacaoAnterior());
						guiaPagamentoPrestacao.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoPrescrita);
						guiaPagamentoPrestacao.setPrescricaoComando(null);
						guiaPagamentoPrestacao.setUltimaAlteracao(new Date());
						valorPrestacao = valorPrestacao.add(guiaPagamentoPrestacao.getValorPrestacao());

						guiaPagamentoPrestacao.setOperacaoEfetuada(operacaoEfetuada);
						guiaPagamentoPrestacao.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(guiaPagamentoPrestacao);

						getControladorUtil().atualizar(guiaPagamentoPrestacao);
					}

					// Inclui dados da prescrição da prestação da guia
					GuiaPagamentoPrescricaoHistorico guiaPagamentoPrescricaoHistorico = new GuiaPagamentoPrescricaoHistorico();
					guiaPagamentoPrescricaoHistorico.setGuiaPagamentoGeral(guiaPagamentoGeral);
					guiaPagamentoPrescricaoHistorico.setImovel(guiaPagamento.getImovel());
					guiaPagamentoPrescricaoHistorico.setCodigoEvento(GuiaPagamentoPrescricaoHistorico.DESMARCACAO_PRESCRICAO);
					guiaPagamentoPrescricaoHistorico.setDataEvento(new Date());
					guiaPagamentoPrescricaoHistorico.setValorGuia(valorPrestacao);
					guiaPagamentoPrescricaoHistorico.setUsuario(usuarioLogado);
					guiaPagamentoPrescricaoHistorico.setPrescricaoComando(null);
					guiaPagamentoPrescricaoHistorico.setNumeroPrestacao(numeroPrestacao.shortValue());
					guiaPagamentoPrescricaoHistorico.setUltimaAlteracao(new Date());

					guiaPagamentoPrescricaoHistorico.setOperacaoEfetuada(operacaoEfetuada);
					guiaPagamentoPrescricaoHistorico.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(guiaPagamentoPrescricaoHistorico);

					getControladorUtil().inserir(guiaPagamentoPrescricaoHistorico);

					quantidadePrestacoesDesmarcadasPrescricao = quantidadePrestacoesDesmarcadasPrescricao.intValue() + 1;
				}

				filtroGuiaPagamentoPrestacao.limparListaParametros();
				filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
								guiaPagamentoGeral.getId()));
				filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
								FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ID, debitoCreditoSituacaoPrescrita.getId()));

				colecaoGuiaPagamentoPrestacao = (Collection<GuiaPagamentoPrestacao>) getControladorUtil().pesquisar(
								filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

				// Caso todas as prestações da guia da prestação estejam desmarcadas da prescrição
				if(Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao)){

					// Desmarca a guia de pagamento das prestações, caso a mesma esteja marcada


					if(guiaPagamento.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.PRESCRITA)){

						guiaPagamento.setDebitoCreditoSituacaoAtual(guiaPagamento.getDebitoCreditoSituacaoAnterior());
						guiaPagamento.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoPrescrita);
						guiaPagamento.setPrescricaoComando(null);
						guiaPagamento.setUltimaAlteracao(new Date());
						getControladorUtil().atualizar(guiaPagamento);
					}
				}
			}
		}

		return quantidadePrestacoesDesmarcadasPrescricao;
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0002] - Exibir Dados dos Itens de Débito Prescritos do Imóvel
	 * 
	 * @author Anderson Italo
	 * @date 04/04/2014
	 */
	public Collection<PrescricaoContaHelper> pesquisarContasPrescritas(Integer idImovel,
					FiltroImoveisComDebitosPrescritosHelper filtroHelper) throws ControladorException{

		Collection<PrescricaoContaHelper> retorno = null;

		try{

			Collection<Object[]> colecaoDadosContasPrescricao = repositorioCobranca.pesquisarContasPrescritasPorImovel(idImovel,
							filtroHelper);

			Collection<Object[]> colecaoDadosContasHistoricoPrescricao = repositorioCobranca.pesquisarContasHistoricoPrescritasPorImovel(
							idImovel, filtroHelper);

			Collection<PrescricaoContaHelper> colecaoPrescricaoContaHelper = new ArrayList<PrescricaoContaHelper>();

			if(!Util.isVazioOrNulo(colecaoDadosContasPrescricao)){

				for(Object[] dadosContaPrescricao : colecaoDadosContasPrescricao){

					PrescricaoContaHelper prescricaoContaHelper = new PrescricaoContaHelper();

					prescricaoContaHelper.setIdConta(Util.obterInteger(dadosContaPrescricao[0].toString()));
					prescricaoContaHelper.setReferencia(Util.obterInteger(dadosContaPrescricao[1].toString()));
					prescricaoContaHelper.setValorConta(new BigDecimal(dadosContaPrescricao[2].toString()));
					prescricaoContaHelper.setIdDebitoCreditoSituacao(Util.obterInteger(dadosContaPrescricao[3].toString()));
					prescricaoContaHelper.setDescricaoDebitoCreditoSituacao(dadosContaPrescricao[4].toString());
					prescricaoContaHelper.setDataVencimentoConta((Date) dadosContaPrescricao[5]);
					prescricaoContaHelper.setValorAgua(new BigDecimal(dadosContaPrescricao[6].toString()));
					prescricaoContaHelper.setValorEsgoto(new BigDecimal(dadosContaPrescricao[7].toString()));
					prescricaoContaHelper.setValorDebitos(new BigDecimal(dadosContaPrescricao[8].toString()));
					prescricaoContaHelper.setValorCreditos(new BigDecimal(dadosContaPrescricao[9].toString()));
					prescricaoContaHelper.setValorImpostos(new BigDecimal(dadosContaPrescricao[10].toString()));
					prescricaoContaHelper.setIndicadorPaga("NÃO");
					prescricaoContaHelper.setIndicadorHistorico(ConstantesSistema.NAO);

					colecaoPrescricaoContaHelper.add(prescricaoContaHelper);
				}
			}

			if(!Util.isVazioOrNulo(colecaoDadosContasHistoricoPrescricao)){

				String indicadorPaga = "NÃO";

				for(Object[] dadosContaPrescricao : colecaoDadosContasHistoricoPrescricao){

					PrescricaoContaHelper prescricaoContaHelper = new PrescricaoContaHelper();

					prescricaoContaHelper.setIdConta(Util.obterInteger(dadosContaPrescricao[0].toString()));
					prescricaoContaHelper.setReferencia(Util.obterInteger(dadosContaPrescricao[1].toString()));
					prescricaoContaHelper.setValorConta(new BigDecimal(dadosContaPrescricao[2].toString()));
					prescricaoContaHelper.setIdDebitoCreditoSituacao(Util.obterInteger(dadosContaPrescricao[3].toString()));
					prescricaoContaHelper.setDescricaoDebitoCreditoSituacao(dadosContaPrescricao[4].toString());
					prescricaoContaHelper.setDataVencimentoConta((Date) dadosContaPrescricao[5]);
					prescricaoContaHelper.setValorAgua(new BigDecimal(dadosContaPrescricao[6].toString()));
					prescricaoContaHelper.setValorEsgoto(new BigDecimal(dadosContaPrescricao[7].toString()));
					prescricaoContaHelper.setValorDebitos(new BigDecimal(dadosContaPrescricao[8].toString()));
					prescricaoContaHelper.setValorCreditos(new BigDecimal(dadosContaPrescricao[9].toString()));
					prescricaoContaHelper.setValorImpostos(new BigDecimal(dadosContaPrescricao[10].toString()));

					FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
					filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, prescricaoContaHelper
									.getIdConta()));
					filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.DEBITO_CREDITO_SITUACAO_ATUAL,
									DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO));
					filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(filtroContaHistorico.IMOVEL);
					Collection<ContaHistorico> colecaoContaHistorico = getControladorUtil().pesquisar(filtroContaHistorico,
									ContaHistorico.class.getName());

					if(!Util.isVazioOrNulo(colecaoContaHistorico)){
						ContaHistorico contaHistorico = (ContaHistorico) Util.retonarObjetoDeColecao(colecaoContaHistorico);

						FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();

						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.IMOVEL_ID, contaHistorico
										.getImovel().getId()));
						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(
										FiltroPagamentoHistorico.ANO_MES_REFERENCIA_PAGAMENTO, contaHistorico.getAnoMesReferenciaConta()));

						Collection<PagamentoHistorico> colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
										PagamentoHistorico.class.getName());

						if(!Util.isVazioOrNulo(colecaoPagamentoHistorico)){
							indicadorPaga = "SIM";
						}

						prescricaoContaHelper.setIdDebitoCreditoSituacao(DebitoCreditoSituacao.PRESCRITA);
						prescricaoContaHelper.setDescricaoDebitoCreditoSituacao("PRESC");


					}else{

						FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.CONTA_ID,
										prescricaoContaHelper.getIdConta()));

						Collection<PagamentoHistorico> colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
										PagamentoHistorico.class.getName());

						if(!Util.isVazioOrNulo(colecaoPagamentoHistorico)){
							indicadorPaga = "SIM";
						}
					}


					prescricaoContaHelper.setIndicadorPaga(indicadorPaga);

					prescricaoContaHelper.setIndicadorHistorico(ConstantesSistema.SIM);

					colecaoPrescricaoContaHelper.add(prescricaoContaHelper);
				}
			}

			retorno = colecaoPrescricaoContaHelper;

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3140] Acompanhar Imóveis com Débitos Prescritos
	 * [SB0002] - Exibir Dados dos Itens de Débito Prescritos do Imóvel
	 * 
	 * @author Anderson Italo
	 * @date 04/04/2014
	 */
	public Collection<PrescricaoGuiaPrestacaoHelper> pesquisarGuiasPrestacaoPrescritas(Integer idImovel,
					FiltroImoveisComDebitosPrescritosHelper filtroHelper) throws ControladorException{

		Collection<PrescricaoGuiaPrestacaoHelper> retorno = null;

		try{

			Collection<Object[]> colecaoDadosGuiasPagamentoPrescricao = repositorioCobranca
							.pesquisarGuiasPagamentoPrestacaoPrescritasPorImovel(idImovel, filtroHelper);

			Collection<Object[]> colecaoDadosGuiasPagamentoHistoricoPrescricao = repositorioCobranca
							.pesquisarGuiasPagamentoPrestacaoHistoricoPrescritasPorImovel(idImovel, filtroHelper);

			Collection<PrescricaoGuiaPrestacaoHelper> colecaoPrescricaoGuiaHelper = new ArrayList<PrescricaoGuiaPrestacaoHelper>();

			if(!Util.isVazioOrNulo(colecaoDadosGuiasPagamentoPrescricao)){

				for(Object[] dadosGuiaPrestacaoPrescricao : colecaoDadosGuiasPagamentoPrescricao){

					PrescricaoGuiaPrestacaoHelper prescricaoGuiaPrestacaoHelper = new PrescricaoGuiaPrestacaoHelper();

					prescricaoGuiaPrestacaoHelper.setIdGuiaPagamento(Util.obterInteger(dadosGuiaPrestacaoPrescricao[0].toString()));
					prescricaoGuiaPrestacaoHelper.setNumeroPrestacao(Util.obterInteger(dadosGuiaPrestacaoPrescricao[2].toString()));
					prescricaoGuiaPrestacaoHelper.setValorPrestacao(new BigDecimal(dadosGuiaPrestacaoPrescricao[3].toString()));
					prescricaoGuiaPrestacaoHelper.setDataVencimento((Date) dadosGuiaPrestacaoPrescricao[4]);
					prescricaoGuiaPrestacaoHelper.setIdDebitoCreditoSituacao(Util.obterInteger(dadosGuiaPrestacaoPrescricao[5].toString()));
					prescricaoGuiaPrestacaoHelper.setDescricaoDebitoCreditoSituacao(dadosGuiaPrestacaoPrescricao[6].toString());
					prescricaoGuiaPrestacaoHelper.setIdTipoDebito(Util.obterInteger(dadosGuiaPrestacaoPrescricao[7].toString()));
					prescricaoGuiaPrestacaoHelper.setDescricaoTipoDebito(dadosGuiaPrestacaoPrescricao[8].toString());
					prescricaoGuiaPrestacaoHelper.setDataEmissao((Date) dadosGuiaPrestacaoPrescricao[9]);
					prescricaoGuiaPrestacaoHelper.setIndicadorPaga("NÃO");
					prescricaoGuiaPrestacaoHelper.setIndicadorHistorico(ConstantesSistema.NAO);

					colecaoPrescricaoGuiaHelper.add(prescricaoGuiaPrestacaoHelper);
				}
			}

			if(!Util.isVazioOrNulo(colecaoDadosGuiasPagamentoHistoricoPrescricao)){

				for(Object[] dadosGuiaPrestacaoPrescricao : colecaoDadosGuiasPagamentoHistoricoPrescricao){

					PrescricaoGuiaPrestacaoHelper prescricaoGuiaPrestacaoHelper = new PrescricaoGuiaPrestacaoHelper();

					prescricaoGuiaPrestacaoHelper.setIdGuiaPagamento(Util.obterInteger(dadosGuiaPrestacaoPrescricao[0].toString()));
					prescricaoGuiaPrestacaoHelper.setNumeroPrestacao(Util.obterInteger(dadosGuiaPrestacaoPrescricao[2].toString()));
					prescricaoGuiaPrestacaoHelper.setValorPrestacao(new BigDecimal(dadosGuiaPrestacaoPrescricao[3].toString()));
					prescricaoGuiaPrestacaoHelper.setDataVencimento((Date) dadosGuiaPrestacaoPrescricao[4]);
					prescricaoGuiaPrestacaoHelper.setIdDebitoCreditoSituacao(Util.obterInteger(dadosGuiaPrestacaoPrescricao[5].toString()));
					prescricaoGuiaPrestacaoHelper.setDescricaoDebitoCreditoSituacao(dadosGuiaPrestacaoPrescricao[6].toString());
					prescricaoGuiaPrestacaoHelper.setIdTipoDebito(Util.obterInteger(dadosGuiaPrestacaoPrescricao[7].toString()));
					prescricaoGuiaPrestacaoHelper.setDescricaoTipoDebito(dadosGuiaPrestacaoPrescricao[8].toString());
					prescricaoGuiaPrestacaoHelper.setDataEmissao((Date) dadosGuiaPrestacaoPrescricao[9]);

					FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
					filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.GUIA_PAGAMENTO_GERAL_ID,
									prescricaoGuiaPrestacaoHelper.getIdGuiaPagamento()));
					filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.NUMERO_PRESTACAO,
									prescricaoGuiaPrestacaoHelper.getNumeroPrestacao()));

					Collection<PagamentoHistorico> colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
									PagamentoHistorico.class.getName());

					if(!Util.isVazioOrNulo(colecaoPagamentoHistorico)){

						prescricaoGuiaPrestacaoHelper.setIndicadorPaga("SIM");
					}else{

						prescricaoGuiaPrestacaoHelper.setIndicadorPaga("NÃO");
					}

					prescricaoGuiaPrestacaoHelper.setIndicadorHistorico(ConstantesSistema.SIM);

					colecaoPrescricaoGuiaHelper.add(prescricaoGuiaPrestacaoHelper);
				}
			}

			retorno = colecaoPrescricaoGuiaHelper;

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imóveis com Débitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Integer pesquisarQuantidadeImoveisComDebitosPrescritos(FiltroImoveisComDebitosPrescritosHelper filtroHelper)
					throws ControladorException{

		Integer retorno = null;
		try{

			retorno = this.repositorioCobranca.pesquisarQuantidadeImoveisComDebitosPrescritos(filtroHelper);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imóveis com Débitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection<ImovelComDebitosPrescritosHelper> pesquisarImoveisComDebitoPrescrito(
					FiltroImoveisComDebitosPrescritosHelper filtroHelper, int pageOffset)
					throws ControladorException{

		Collection<ImovelComDebitosPrescritosHelper> retorno = new ArrayList<ImovelComDebitosPrescritosHelper>();

		try{

			Collection<Object[]> colecaoDadosImoveisComDebitosPrescritos = repositorioCobranca.pesquisarImoveisComDebitosPrescritos(
							filtroHelper, pageOffset);

			Integer quantidadeContasMarcadas = 0;
			BigDecimal valorTotalContasMarcadas = BigDecimal.ZERO;
			Integer quantidadeContasDesmarcadas = 0;
			BigDecimal valorTotalContasDesmarcadas = BigDecimal.ZERO;
			Integer quantidadePrestacoesMarcadas = 0;
			BigDecimal valorTotalGuiasPrestacaoMarcadas = BigDecimal.ZERO;
			Integer quantidadePrestacoesDesmarcadas = 0;
			BigDecimal valorTotalGuiasPrestacaoDesmarcadas = BigDecimal.ZERO;
			Collection<String> colecaoGuiaPrestacoesMarcadas = null;
			Collection<String> colecaoGuiaPrestacoesDesmarcadas = null;

			// [FS0013] - Nenhum registro encontrado
			if(Util.isVazioOrNulo(colecaoDadosImoveisComDebitosPrescritos)){

				throw new ControladorException("atencao.pesquisa.nenhumresultado");
			}else{


				boolean possuiGuiaOuContaPrescrita = false;
				Object[] dadosImovelPrescricao = null;

				for(Iterator iterator = colecaoDadosImoveisComDebitosPrescritos.iterator(); iterator.hasNext();){

					dadosImovelPrescricao = (Object[]) iterator.next();
					possuiGuiaOuContaPrescrita = false;
					quantidadeContasMarcadas = 0;
					valorTotalContasMarcadas = BigDecimal.ZERO;
					quantidadeContasDesmarcadas = 0;
					valorTotalContasDesmarcadas = BigDecimal.ZERO;
					quantidadePrestacoesMarcadas = 0;
					valorTotalGuiasPrestacaoMarcadas = BigDecimal.ZERO;
					quantidadePrestacoesDesmarcadas = 0;
					valorTotalGuiasPrestacaoDesmarcadas = BigDecimal.ZERO;
					colecaoGuiaPrestacoesMarcadas = new ArrayList<String>();
					colecaoGuiaPrestacoesDesmarcadas = new ArrayList<String>();

					Collection<Object[]> colecaoDadosContasPrescricao = repositorioCobranca.pesquisarContasPrescritasPorImovel(
									Util.obterInteger(dadosImovelPrescricao[0].toString()), filtroHelper);

					Collection<Object[]> colecaoDadosContasHistoricoPrescricao = repositorioCobranca
									.pesquisarContasHistoricoPrescritasPorImovel(Util.obterInteger(dadosImovelPrescricao[0].toString()),
													filtroHelper);

					Collection<Object[]> colecaoDadosGuiasPagamentoPrescricao = repositorioCobranca
									.pesquisarGuiasPagamentoPrestacaoPrescritasPorImovel(
													Util.obterInteger(dadosImovelPrescricao[0].toString()), filtroHelper);

					Collection<Object[]> colecaoDadosGuiasPagamentoHistoricoPrescricao = repositorioCobranca
									.pesquisarGuiasPagamentoPrestacaoHistoricoPrescritasPorImovel(
													Util.obterInteger(dadosImovelPrescricao[0].toString()), filtroHelper);

					if(!Util.isVazioOrNulo(colecaoDadosContasPrescricao)){

						for(Object[] dadosContaPrescricao : colecaoDadosContasPrescricao){

							if(dadosContaPrescricao[3].toString().equals(DebitoCreditoSituacao.PRESCRITA.toString())){

								quantidadeContasMarcadas = quantidadeContasMarcadas.intValue() + 1;
								valorTotalContasMarcadas = valorTotalContasMarcadas.add(new BigDecimal(dadosContaPrescricao[2].toString()));
							}else{

								quantidadeContasDesmarcadas = quantidadeContasDesmarcadas.intValue() + 1;
								valorTotalContasDesmarcadas = valorTotalContasDesmarcadas.add(new BigDecimal(dadosContaPrescricao[2]
												.toString()));
							}
						}

						possuiGuiaOuContaPrescrita = true;
					}

					if(!Util.isVazioOrNulo(colecaoDadosContasHistoricoPrescricao)){

						for(Object[] dadosContaPrescricao : colecaoDadosContasHistoricoPrescricao){

							if(dadosContaPrescricao[3].toString().equals(DebitoCreditoSituacao.PRESCRITA.toString())){

								quantidadeContasMarcadas = quantidadeContasMarcadas.intValue() + 1;
								valorTotalContasMarcadas = valorTotalContasMarcadas.add(new BigDecimal(dadosContaPrescricao[2].toString()));
							}else{

								quantidadeContasDesmarcadas = quantidadeContasDesmarcadas.intValue() + 1;
								valorTotalContasDesmarcadas = valorTotalContasDesmarcadas.add(new BigDecimal(dadosContaPrescricao[2]
												.toString()));
							}
						}

						possuiGuiaOuContaPrescrita = true;
					}

					if(!Util.isVazioOrNulo(colecaoDadosGuiasPagamentoPrescricao)){

						for(Object[] dadosGuiaPrescricao : colecaoDadosGuiasPagamentoPrescricao){

							if(dadosGuiaPrescricao[5].toString().equals(DebitoCreditoSituacao.PRESCRITA.toString())){

								quantidadePrestacoesMarcadas = quantidadePrestacoesMarcadas.intValue() + 1;

								if(!colecaoGuiaPrestacoesMarcadas.contains(dadosGuiaPrescricao[0].toString() + "/"
												+ dadosGuiaPrescricao[2].toString())){

									colecaoGuiaPrestacoesMarcadas.add(dadosGuiaPrescricao[0].toString() + "/"
													+ dadosGuiaPrescricao[2].toString());
								}

								valorTotalGuiasPrestacaoMarcadas = valorTotalGuiasPrestacaoMarcadas.add(new BigDecimal(
												dadosGuiaPrescricao[3].toString()));
							}else{

								quantidadePrestacoesDesmarcadas = quantidadePrestacoesDesmarcadas.intValue() + 1;

								if(!colecaoGuiaPrestacoesDesmarcadas.contains(dadosGuiaPrescricao[0].toString() + "/"
												+ dadosGuiaPrescricao[2].toString())){

									colecaoGuiaPrestacoesDesmarcadas.add(dadosGuiaPrescricao[0].toString() + "/"
													+ dadosGuiaPrescricao[2].toString());
								}

								valorTotalGuiasPrestacaoDesmarcadas = valorTotalGuiasPrestacaoDesmarcadas.add(new BigDecimal(
												dadosGuiaPrescricao[3]
												.toString()));
							}
						}

						possuiGuiaOuContaPrescrita = true;
					}

					if(!Util.isVazioOrNulo(colecaoDadosGuiasPagamentoHistoricoPrescricao)){

						for(Object[] dadosGuiaPrescricao : colecaoDadosGuiasPagamentoHistoricoPrescricao){

							if(dadosGuiaPrescricao[5].toString().equals(DebitoCreditoSituacao.PRESCRITA.toString())){

								quantidadePrestacoesMarcadas = quantidadePrestacoesMarcadas.intValue() + 1;

								if(!colecaoGuiaPrestacoesMarcadas.contains(dadosGuiaPrescricao[0].toString() + "/"
												+ dadosGuiaPrescricao[2].toString())){

									colecaoGuiaPrestacoesMarcadas.add(dadosGuiaPrescricao[0].toString() + "/"
													+ dadosGuiaPrescricao[2].toString());
								}

								valorTotalGuiasPrestacaoMarcadas = valorTotalGuiasPrestacaoMarcadas.add(new BigDecimal(
												dadosGuiaPrescricao[3].toString()));
							}else{

								quantidadePrestacoesDesmarcadas = quantidadePrestacoesDesmarcadas.intValue() + 1;

								if(!colecaoGuiaPrestacoesDesmarcadas.contains(dadosGuiaPrescricao[0].toString() + "/"
												+ dadosGuiaPrescricao[2].toString())){

									colecaoGuiaPrestacoesDesmarcadas.add(dadosGuiaPrescricao[0].toString() + "/"
													+ dadosGuiaPrescricao[2].toString());
								}

								valorTotalGuiasPrestacaoDesmarcadas = valorTotalGuiasPrestacaoDesmarcadas.add(new BigDecimal(
												dadosGuiaPrescricao[3]
												.toString()));
							}
						}

						possuiGuiaOuContaPrescrita = true;
					}

					if(possuiGuiaOuContaPrescrita){

						ImovelComDebitosPrescritosHelper imovelComDebitosPrescritosHelper = new ImovelComDebitosPrescritosHelper();
						imovelComDebitosPrescritosHelper.setIdImovel(Util.obterInteger(dadosImovelPrescricao[0].toString()));
						imovelComDebitosPrescritosHelper.setIdLocalidade(Util.obterInteger(dadosImovelPrescricao[1].toString()));
						imovelComDebitosPrescritosHelper.setCodigoSetorComercial(Util.obterInteger(dadosImovelPrescricao[2].toString()));
						imovelComDebitosPrescritosHelper.setNumeroQuadra(Util.obterInteger(dadosImovelPrescricao[3].toString()));
						imovelComDebitosPrescritosHelper.setLote(Util.obterShort(dadosImovelPrescricao[4].toString()));
						imovelComDebitosPrescritosHelper.setSublote(Util.obterShort(dadosImovelPrescricao[5].toString()));
						imovelComDebitosPrescritosHelper.setIdLigacaoAguaSituacao(Util.obterInteger(dadosImovelPrescricao[6].toString()));
						imovelComDebitosPrescritosHelper.setIdLigacaoEsgotoSituacao(Util.obterInteger(dadosImovelPrescricao[7].toString()));
						imovelComDebitosPrescritosHelper.setDescricaoImovelPerfil(dadosImovelPrescricao[8].toString());
						imovelComDebitosPrescritosHelper.setDescricaoLigacaoAguaSituacao(dadosImovelPrescricao[9].toString());
						imovelComDebitosPrescritosHelper.setDescricaoLigacaoEsgotoSituacao(dadosImovelPrescricao[10].toString());

						imovelComDebitosPrescritosHelper.setQuantidadeContasMarcadas(quantidadeContasMarcadas);
						imovelComDebitosPrescritosHelper.setValorContasMarcadas(valorTotalContasMarcadas);
						imovelComDebitosPrescritosHelper.setQuantidadeContasDesmarcadas(quantidadeContasDesmarcadas);
						imovelComDebitosPrescritosHelper.setValorContasDesmarcadas(valorTotalContasDesmarcadas);

						imovelComDebitosPrescritosHelper.setQuantidadeGuiasPrestacaoMarcadas(colecaoGuiaPrestacoesMarcadas.size());
						imovelComDebitosPrescritosHelper.setValorGuiasPrestacaoMarcadas(valorTotalGuiasPrestacaoMarcadas);
						imovelComDebitosPrescritosHelper.setQuantidadeGuiasPrestacaoDesmarcadas(colecaoGuiaPrestacoesDesmarcadas.size());
						imovelComDebitosPrescritosHelper.setValorGuiasPrestacaoDesmarcadas(valorTotalGuiasPrestacaoDesmarcadas);

						retorno.add(imovelComDebitosPrescritosHelper);
					}
				}
			}

		}catch(ErroRepositorioException e){

			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0049] - Verificar retirada de débitos prescritos do débito do parcelamento
	 * Caso esteja indicado para não considerar débitos prescritos retirar a conta ou guia prestção
	 * da lista
	 * de débitos
	 * 
	 * @author Anderson Italo
	 * @created 10/03/2014
	 */
	public void verificarRetirarContaOuGuiaPrescrita(Integer idImovel, Short indicadorConsiderarDebitoPrescrito,
					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper) throws ControladorException{

		Collection<ContaValoresHelper> colecaoContasValores = obterDebitoImovelOuClienteHelper.getColecaoContasValores();
		Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = obterDebitoImovelOuClienteHelper
						.getColecaoGuiasPagamentoValores();

		// Caso esteja indicado para não considerar débitos prescritos
		if(indicadorConsiderarDebitoPrescrito.equals(ConstantesSistema.NAO)){

			Collection<ContaValoresHelper> colecaoContasValoresHelperRemover = new ArrayList();

			if(!Util.isVazioOrNulo(colecaoContasValores)){

				for(ContaValoresHelper contaValoresHelper : colecaoContasValores){

					if(contaValoresHelper.getConta() != null
									&& contaValoresHelper.getConta().getDebitoCreditoSituacaoAtual().getId()
													.equals(DebitoCreditoSituacao.PRESCRITA)){

						colecaoContasValoresHelperRemover.add(contaValoresHelper);
					}
				}

				if(!Util.isVazioOrNulo(colecaoContasValoresHelperRemover)){

					colecaoContasValores.removeAll(colecaoContasValoresHelperRemover);
				}
			}

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperRemover = new ArrayList();

			if(!Util.isVazioOrNulo(colecaoGuiasPagamentoValores)){

				for(GuiaPagamentoValoresHelper guiaValoresHelper : colecaoGuiasPagamentoValores){


					if(guiaValoresHelper.getIdDebitoCreditoSituacaoAtual().equals(DebitoCreditoSituacao.PRESCRITA)){

						colecaoGuiaPagamentoValoresHelperRemover.add(guiaValoresHelper);
					}
				}


				if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValoresHelperRemover)){

					colecaoGuiasPagamentoValores.removeAll(colecaoGuiaPagamentoValoresHelperRemover);
				}
			}

			obterDebitoImovelOuClienteHelper.setColecaoContasValores(colecaoContasValores);
			obterDebitoImovelOuClienteHelper.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValores);
		}
	}

	/**
	 * [UC3139] Comandar Prescrição Automática Débito
	 * 
	 * @author Anderson Italo
	 * @date 26/02/2014
	 */
	public void comandarPrescricaoAutomaticaDebitos(int idFuncionalidadeIniciada) throws ControladorException{

		Integer idUnidadeIniciada = 0;

		try{

			// Registrar o início do processamento da unidade de processamento do batch
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			LOGGER.info("Início do processamento Comandar Prescrição Automática de Débitos: MARCAÇÃO DA PRESCRIÇÃO DO DÉBITO - "
							+ Util.formatarData(new Date()));

			ComandoDebitosPrescritosHelper comandoHelper = new ComandoDebitosPrescritosHelper();

			// Título
			comandoHelper.setTitulo("MARCAÇÃO DA PRESCRIÇÃO DO DÉBITO - " + Util.formatarData(new Date()));

			// Descrição da Solicitação
			comandoHelper.setDescricaoSolicitacao("MARCAÇÃO AUTOMÁTICA DA PRESCRIÇÃO DO DÉBITO - " + Util.formatarData(new Date()));

			// Simulação
			comandoHelper.setIndicadorSimulacao(ConstantesSistema.NAO);

			// Lista de Situações de Cobrança que Impedem a Prescrição
			String parametroListaSituacoesCobrancaImpedePrescricao = null;
			try{

				parametroListaSituacoesCobrancaImpedePrescricao = ((String) ParametroCobranca.P_LISTA_SITUACOES_COBRANCA_IMPEDEM_PRESCRICAO
								.executar(this));
			}catch(ControladorException e){

				throw new ActionServletException("atencao.sistemaparametro_inexistente", "P_LISTA_SITUACOES_COBRANCA_IMPEDEM_PRESCRICAO");
			}

			String[] idSituacoesCobrancaImpedePrescricao = parametroListaSituacoesCobrancaImpedePrescricao.split(",");

			Collection<Integer> colecaoIdsCobrancaSituacao = new ArrayList<Integer>();
			for(int i = 0; i < idSituacoesCobrancaImpedePrescricao.length; i++){

				if(Util.obterInteger(idSituacoesCobrancaImpedePrescricao[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
								&& Util.obterInteger(idSituacoesCobrancaImpedePrescricao[i]).intValue() != ConstantesSistema.ZERO
												.intValue()){

					colecaoIdsCobrancaSituacao.add(Util.obterInteger(idSituacoesCobrancaImpedePrescricao[i]));
				}
			}

			if(!Util.isVazioOrNulo(colecaoIdsCobrancaSituacao)){

				comandoHelper.setColecaoIdsCobrancaSituacao(colecaoIdsCobrancaSituacao);
			}

			// Id do usuário que efetuou a inclusão do comando
			comandoHelper.setIdUsuario(Usuario.USUARIO_BATCH.getId());

			// Indicar se o comando é selecionado pelo usuário ou automático
			comandoHelper.setComandoPrescricaoAutomatico(ConstantesSistema.SIM);

			// O sistema executa o comando de marcação automática de prescrição do débito -
			// <<Inclui>> [UC3137 - Comandar Prescrição de Débito]
			Object[] dadosImoveisFiltradosDebitoPrescrito = this.comandarPrescricaoDebitosComandoUsuarioOuAutomatico(comandoHelper,
							Usuario.USUARIO_BATCH);
			Object[] dadosImoveisMarcacaoDebitoPrescrito = (Object[]) dadosImoveisFiltradosDebitoPrescrito[1];

			this.comandarPrescricaoDebitos(dadosImoveisMarcacaoDebitoPrescrito);

			// Registrar o fim do processamento da unidade de processamento do batch
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			LOGGER.info("Fim do processamento Comandar Prescrição Automática de Débitos: MARCAÇÃO DA PRESCRIÇÃO DO DÉBITO - "
							+ Util.formatarData(new Date()));

		}catch(Exception e){

			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * 
	 * @author Anderson Italo
	 * @date 26/02/2014
	 */
	public void comandarPrescricaoDebitosComandoUsuario(int idFuncionalidadeIniciada, Object[] dadosImoveisMarcacaoDebitoPrescrito)
					throws ControladorException{

		int idUnidadeIniciada = 0;
		try{

			// Registrar o início do processamento da unidade de processamento do batch
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			LOGGER.info("Início do processamento Comandar Prescrição de Débitos Comando Usuário: prcm_id >>"
							+ Util.obterInteger(dadosImoveisMarcacaoDebitoPrescrito[1].toString()));

			this.comandarPrescricaoDebitos(dadosImoveisMarcacaoDebitoPrescrito);

			// Registrar o fim do processamento da unidade de processamento do batch
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			LOGGER.info("Fim do processamento Comandar Prescrição de Débitos Comando Usuário: prcm_id >>"
							+ Util.obterInteger(dadosImoveisMarcacaoDebitoPrescrito[1].toString()));
		}catch(Exception e){

			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * 
	 * @author Anderson Italo
	 * @date 26/02/2014
	 */
	private void comandarPrescricaoDebitos(Object[] dadosImoveisMarcacaoDebitoPrescrito) throws ControladorException{

		// O sistema seleciona a parametrização do comando recebido pelo [UC3138]
		FiltroPrescricaoComando filtroPrescricaoComando = new FiltroPrescricaoComando();
		filtroPrescricaoComando.adicionarParametro(new ParametroSimples(FiltroPrescricaoComando.ID, Util
						.obterInteger(dadosImoveisMarcacaoDebitoPrescrito[1].toString())));
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.GERENCIA_REGIONAL);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.UNIDADE_NEGOCIO);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.ELO);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.LOCALIDADE_INICIAL);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.LOCALIDADE_FINAL);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.CLIENTE);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.CLIENTE_RELACAO_TIPO);
		filtroPrescricaoComando.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComando.USUARIO);

		PrescricaoComando prescricaoComando = (PrescricaoComando) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroPrescricaoComando, PrescricaoComando.class.getName()));

		Collection<DadosRelatorioPrescicaoHelper> colecaoDadosRelatorioPrescricaoHelper = new ArrayList<DadosRelatorioPrescicaoHelper>();


		DebitoCreditoSituacao debitoCreditoSituacaoPrescrita = new DebitoCreditoSituacao(DebitoCreditoSituacao.PRESCRITA);
		Collection<DadosImovelPrescicaoHelper> colecaoDadosImovelPrescricaohelper = (Collection<DadosImovelPrescicaoHelper>) dadosImoveisMarcacaoDebitoPrescrito[0];
		Imovel imovel = null;
		Localidade localidade = null;
		SetorComercial setorComercial = null;

		// Caso o comando não seja uma simulação
		// Para cada débito da lista de débitos, o sistema efetua a marcação da prescrição
		// do débito
		for(DadosImovelPrescicaoHelper dadosImovelPrescicaoHelper : colecaoDadosImovelPrescricaohelper){

			// Popula os dados do helper do relatório de prescrição
			DadosRelatorioPrescicaoHelper helperRelatorio = new DadosRelatorioPrescicaoHelper();

			imovel = new Imovel();
			imovel.setId(dadosImovelPrescicaoHelper.getIdImovel());

			// Localidade
			localidade = new Localidade(dadosImovelPrescicaoHelper.getIdLocalidade());
			helperRelatorio.setIdLocalidade(dadosImovelPrescicaoHelper.getIdLocalidade().toString());
			helperRelatorio.setNomeLocalidade(dadosImovelPrescicaoHelper.getNomeLocalidade());
			imovel.setLocalidade(localidade);

			// Setor Comercial
			setorComercial = new SetorComercial();
			setorComercial.setCodigo(dadosImovelPrescicaoHelper.getCodigoSetorComercial());
			imovel.setSetorComercial(setorComercial);

			// Quadra
			imovel.setQuadra(new Quadra(0));
			imovel.getQuadra().setNumeroQuadra(dadosImovelPrescicaoHelper.getNumeroQuadra());

			// Lote
			imovel.setLote(dadosImovelPrescicaoHelper.getLote());

			// Sublote
			imovel.setSubLote(dadosImovelPrescicaoHelper.getSublote());

			// Inscrição
			helperRelatorio.setInscricao(imovel.getInscricaoFormatada());

			// Matrícula
			helperRelatorio.setMatriculaFormatada(imovel.getId().toString().substring(0, imovel.getId().toString().toString().length() - 1)
							+ "."
							+ imovel.getId().toString().toString().substring(imovel.getId().toString().toString().length() - 1));
			helperRelatorio.setIdImovel(imovel.getId());

			// Endereço
			helperRelatorio.setEnderecoImovel(getControladorEndereco().obterEnderecoAbreviadoImovel(imovel.getId()));

			// Situação de Água
			helperRelatorio.setIdLigacaoAguaSituacao(dadosImovelPrescicaoHelper.getIdLigacaoAguaSituacao().toString());

			// Situação de Esgoto
			helperRelatorio.setIdLigacaoEsgotoSituacao(dadosImovelPrescicaoHelper.getIdLigacaoEsgotoSituacao().toString());

			// Categoria
			helperRelatorio.setCategoria(getControladorImovel().obterPrincipalCategoriaImovel(imovel.getId()).getDescricaoAbreviada());

			// Caso o débito seja uma conta o sistema marca a prescrição da conta [SB0001 -
			// Marcar Prescrição Conta]
			if(!Util.isVazioOrNulo(dadosImovelPrescicaoHelper.getColecaoDadosContasPrescricao())){

				marcarPrescricaoConta(prescricaoComando, debitoCreditoSituacaoPrescrita, dadosImovelPrescicaoHelper, helperRelatorio,
								prescricaoComando.getIndicadorSimulacao());
			}

			// Caso o débito seja uma prestação de guia de pagamento, o sistema marca a
			// prescrição da guia de pagamento [SB0002 - Marcar Prescrição Guia de
			// Pagamento]
			if(!Util.isVazioOrNulo(dadosImovelPrescicaoHelper.getColecaoDadosGuiasPagamentoPrescricao())){

				marcarPrescricaoGuia(prescricaoComando, debitoCreditoSituacaoPrescrita, dadosImovelPrescicaoHelper, helperRelatorio,
								prescricaoComando.getIndicadorSimulacao());
			}

			// Guarda informações na coleção para o relatório de prescrição
			colecaoDadosRelatorioPrescricaoHelper.add(helperRelatorio);
		}


		// O sistema emite o relatório com os débitos prescritos [SB0003 2 Emitir Relatório
		// Prescrição]
		
		String parametrosFiltro = "";

		// Título do Comando
		if(prescricaoComando.getTitulo() != null){

			
			parametrosFiltro += "\nTítulo Comando: " + prescricaoComando.getTitulo();
		}

		// Descrição da Solicitação
		if(prescricaoComando.getDescricaoSolicitacao() != null){

			parametrosFiltro += "\nDescrição da Solicitação: " + prescricaoComando.getDescricaoSolicitacao();
		}

		// Indicador de Simulação
		if(prescricaoComando.getIndicadorSimulacao().equals(ConstantesSistema.SIM)){
			
			parametrosFiltro += "\nSimulação: SIM";
		}else{
			parametrosFiltro += "\nSimulação: NÃO";
		}

		// Gerência Regional
		if(prescricaoComando.getGerenciaRegional() != null){

			parametrosFiltro += "\nGerência Regional: " + prescricaoComando.getGerenciaRegional().getNome();
		}

		// Unidade de Negócio
		if(prescricaoComando.getUnidadeNegocio() != null){

			parametrosFiltro += "\nUnidade de Negócio: " + prescricaoComando.getUnidadeNegocio().getNome();
		}

		// Elo
		if(prescricaoComando.getElo() != null){

			parametrosFiltro += "\nElo: " + prescricaoComando.getElo().getDescricaoParaRegistroTransacao();
		}

		// Localidade Inicial
		if(prescricaoComando.getLocalidadeInicial() != null){

			parametrosFiltro += "\nLocalidade Inicial: "
							+ prescricaoComando.getLocalidadeInicial().getDescricaoParaRegistroTransacao();
		}

		// Localidade Final
		if(prescricaoComando.getLocalidadeFinal() != null){

			parametrosFiltro += "\nLocalidade Final: "
							+ prescricaoComando.getLocalidadeFinal().getDescricaoParaRegistroTransacao();
		}

		// Setor Comercial Inicial
		if(prescricaoComando.getCodigoSetorComercialInicial() != null){

			parametrosFiltro += "\nSetor Comercial Inicial: " + prescricaoComando.getCodigoSetorComercialInicial().toString();
		}

		// Setor Comercial Final
		if(prescricaoComando.getCodigoSetorComercialFinal() != null){

			parametrosFiltro += "\nSetor Comercial Final: " + prescricaoComando.getCodigoSetorComercialFinal().toString();
		}

		// Quadra Inicial
		if(prescricaoComando.getNumeroQuadraInicial() != null){

			parametrosFiltro += "\nQuadra Inicial: " + prescricaoComando.getNumeroQuadraInicial().toString();
		}

		// Quadra Inicial
		if(prescricaoComando.getNumeroQuadraFinal() != null){

			parametrosFiltro += "\nQuadra Final: " + prescricaoComando.getNumeroQuadraFinal().toString();
		}

		// Cliente
		if(prescricaoComando.getCliente() != null){

			parametrosFiltro += "\nCliente: " + prescricaoComando.getCliente().getDescricaoParaRegistroTransacao();

			if(prescricaoComando.getClienteRelacaoTipo() != null){

				parametrosFiltro += "\nTipo da Relação do Cliente: "
								+ prescricaoComando.getClienteRelacaoTipo().getDescricaoParaRegistroTransacao();
			}

			if(prescricaoComando.getDataRelacaoClienteInicial() != null && prescricaoComando.getDataRelacaoClienteFinal() != null){

				parametrosFiltro += "\nPeríodo da Relação do Cliente: "
								+ Util.formatarData(prescricaoComando.getDataRelacaoClienteInicial()) + " a "
								+ Util.formatarData(prescricaoComando.getDataRelacaoClienteFinal());
			}
		}

		// Arquivo de Imóveis
		if(prescricaoComando.getArquivoImoveis() != null){

			parametrosFiltro += "\nArquivos de Imóveis: SIM";
		}

		// Categoria e Subcategoria
		FiltroPrescricaoComandoCategoriaSubcategoria filtroPrescricaoComandoCategoriaSubcategoria = new FiltroPrescricaoComandoCategoriaSubcategoria();
		filtroPrescricaoComandoCategoriaSubcategoria.adicionarParametro(new ParametroSimples(
						FiltroPrescricaoComandoCategoriaSubcategoria.ID_PRESCRICAO_COMANDO, prescricaoComando.getId()));
		filtroPrescricaoComandoCategoriaSubcategoria
						.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComandoCategoriaSubcategoria.CATEGORIA);
		filtroPrescricaoComandoCategoriaSubcategoria
						.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComandoCategoriaSubcategoria.SUBCATEGORIA);
		filtroPrescricaoComandoCategoriaSubcategoria.setCampoOrderBy(FiltroPrescricaoComandoCategoriaSubcategoria.ID_CATEGORIA,
						FiltroPrescricaoComandoCategoriaSubcategoria.ID_SUBCATEGORIA);

		Collection<PrescricaoComandoCategoriaSubcategoria> colecaoPrescricaoComandoCategoriaSubcategoria = getControladorUtil().pesquisar(
						filtroPrescricaoComandoCategoriaSubcategoria, PrescricaoComandoCategoriaSubcategoria.class.getName());
		
		if(!Util.isVazioOrNulo(colecaoPrescricaoComandoCategoriaSubcategoria)){
			
			String descricaoCategorias = "";
			String descricaoSubcategorias = "";
			boolean primeiraVez = true;
			for(PrescricaoComandoCategoriaSubcategoria prescricaoComandoCategoriaSubcategoria : colecaoPrescricaoComandoCategoriaSubcategoria){
				
				if(prescricaoComandoCategoriaSubcategoria.getSubcategoria() != null){

					if(primeiraVez){

						descricaoCategorias += prescricaoComandoCategoriaSubcategoria.getCategoria().getDescricao();
						descricaoSubcategorias += prescricaoComandoCategoriaSubcategoria.getSubcategoria().getDescricao();
					}else{
						descricaoSubcategorias += ", " + prescricaoComandoCategoriaSubcategoria.getSubcategoria().getDescricao();
					}
				}else{

					descricaoCategorias += ", " + prescricaoComandoCategoriaSubcategoria.getCategoria().getDescricao();
				}

				primeiraVez = false;
			}
			
			if (!Util.isVazioOuBranco(descricaoSubcategorias)){
				
				parametrosFiltro += "\nCategoria: " + descricaoCategorias;
				parametrosFiltro += "\nSubcategoria:" + descricaoSubcategorias;
			}else if(!Util.isVazioOuBranco(descricaoCategorias)){

				parametrosFiltro += "\nCategoria: " + descricaoCategorias.substring(2);
			}
		}

		// Situação da Ligação de Água
		FiltroPrescricaoComandoLigacaoAgua filtroPrescricaoComandoLigacaoAgua = new FiltroPrescricaoComandoLigacaoAgua();
		filtroPrescricaoComandoLigacaoAgua.adicionarParametro(new ParametroSimples(
						FiltroPrescricaoComandoLigacaoAgua.ID_PRESCRICAO_COMANDO, prescricaoComando.getId()));
		filtroPrescricaoComandoLigacaoAgua
						.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComandoLigacaoAgua.LIGACAO_AGUA_SITUACAO);
		filtroPrescricaoComandoLigacaoAgua.setCampoOrderBy(FiltroPrescricaoComandoLigacaoAgua.ID_LIGACAO_AGUA_SITUACAO);

		Collection<PrescricaoComandoLigacaoAgua> colecaoPrescricaoComandoLigacaoAgua = getControladorUtil().pesquisar(
						filtroPrescricaoComandoLigacaoAgua, PrescricaoComandoLigacaoAgua.class.getName());

		if(!Util.isVazioOrNulo(colecaoPrescricaoComandoLigacaoAgua)){

			String descricaoSituacaoLigacaoAgua = "";
			for(PrescricaoComandoLigacaoAgua prescricaoComandoLigacaoAgua : colecaoPrescricaoComandoLigacaoAgua){

				descricaoSituacaoLigacaoAgua += ", "
								+ prescricaoComandoLigacaoAgua.getLigacaoAguaSituacao().getDescricaoParaRegistroTransacao();
			}

			if(!Util.isVazioOuBranco(descricaoSituacaoLigacaoAgua)){

				parametrosFiltro += "\nSituação da Ligação de Água: " + descricaoSituacaoLigacaoAgua.substring(2);
			}
		}

		// Situação da Ligação de Esgoto
		FiltroPrescricaoComandoLigacaoEsgoto filtroPrescricaoComandoLigacaoEsgoto = new FiltroPrescricaoComandoLigacaoEsgoto();
		filtroPrescricaoComandoLigacaoEsgoto.adicionarParametro(new ParametroSimples(
						FiltroPrescricaoComandoLigacaoEsgoto.ID_PRESCRICAO_COMANDO, prescricaoComando.getId()));
		filtroPrescricaoComandoLigacaoEsgoto
						.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComandoLigacaoEsgoto.LIGACAO_ESGOTO_SITUACAO);
		filtroPrescricaoComandoLigacaoEsgoto.setCampoOrderBy(FiltroPrescricaoComandoLigacaoEsgoto.ID_LIGACAO_ESGOTO_SITUACAO);

		Collection<PrescricaoComandoLigacaoEsgoto> colecaoPrescricaoComandoLigacaoEsgoto = getControladorUtil().pesquisar(
						filtroPrescricaoComandoLigacaoEsgoto, PrescricaoComandoLigacaoEsgoto.class.getName());

		if(!Util.isVazioOrNulo(colecaoPrescricaoComandoLigacaoEsgoto)){

			String descricaoSituacaoLigacaoEsgoto = "";
			for(PrescricaoComandoLigacaoEsgoto prescricaoComandoLigacaoEsgoto : colecaoPrescricaoComandoLigacaoEsgoto){

				descricaoSituacaoLigacaoEsgoto += ", "
								+ prescricaoComandoLigacaoEsgoto.getLigacaoEsgotoSituacao().getDescricaoParaRegistroTransacao();
			}

			if(!Util.isVazioOuBranco(descricaoSituacaoLigacaoEsgoto)){

				parametrosFiltro += "\nSituação da Ligação de Esgoto: " + descricaoSituacaoLigacaoEsgoto.substring(2);
			}
		}

		// Situações de Cobrança que Impedem a Prescrição
		FiltroPrescricaoComandoSituacaoCobranca filtroPrescricaoComandoSituacaoCobranca = new FiltroPrescricaoComandoSituacaoCobranca();
		filtroPrescricaoComandoSituacaoCobranca.adicionarParametro(new ParametroSimples(
						FiltroPrescricaoComandoSituacaoCobranca.ID_PRESCRICAO_COMANDO, prescricaoComando.getId()));
		filtroPrescricaoComandoSituacaoCobranca
						.adicionarCaminhoParaCarregamentoEntidade(FiltroPrescricaoComandoSituacaoCobranca.SITUACAO_COBRANCA);
		filtroPrescricaoComandoSituacaoCobranca.setCampoOrderBy(FiltroPrescricaoComandoSituacaoCobranca.ID_SITUACAO_COBRANCA);

		Collection<PrescricaoComandoSituacaoCobranca> colecaoPrescricaoComandoSituacaoCobranca = getControladorUtil().pesquisar(
						filtroPrescricaoComandoSituacaoCobranca, PrescricaoComandoSituacaoCobranca.class.getName());

		if(!Util.isVazioOrNulo(colecaoPrescricaoComandoSituacaoCobranca)){

			String descricaoSituacaoCobranca = "";
			for(PrescricaoComandoSituacaoCobranca prescricaoComandoSituacaoCobranca : colecaoPrescricaoComandoSituacaoCobranca){

				descricaoSituacaoCobranca += ", " + prescricaoComandoSituacaoCobranca.getCobrancaSituacao().getDescricao();
			}

			if(!Util.isVazioOuBranco(descricaoSituacaoCobranca)){

				parametrosFiltro += "\nSituações de Cobrança que Impedem a Prescrição: "
								+ descricaoSituacaoCobranca.substring(2);
			}
		}

		// Período de Referência do Débito
		if(prescricaoComando.getAnoMesReferenciaDebitoInicial() != null && prescricaoComando.getAnoMesReferenciaDebitoFinal() != null){

			parametrosFiltro += "\nPeríodo de Referência do Débito: "
							+ Util.formatarAnoMesParaMesAno(prescricaoComando.getAnoMesReferenciaDebitoInicial()) + " a "
							+ Util.formatarAnoMesParaMesAno(prescricaoComando.getAnoMesReferenciaDebitoFinal());
		}

		// Período de vencimento do débito
		if(prescricaoComando.getDataVencimentoDebitoInicial() != null && prescricaoComando.getDataVencimentoDebitoFinal() != null){

			parametrosFiltro += "\nPeríodo de Vencimento do Débito: "
							+ Util.formatarData(prescricaoComando.getDataVencimentoDebitoInicial()) + " a "
							+ Util.formatarData(prescricaoComando.getDataVencimentoDebitoFinal());
		}

		RelatorioDebitosPrescritos relatorioDebitosPrescritos = new RelatorioDebitosPrescritos(Usuario.USUARIO_BATCH);
		relatorioDebitosPrescritos.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
		relatorioDebitosPrescritos.addParametro("parametrosFiltro", parametrosFiltro);
		relatorioDebitosPrescritos.addParametro("colecaoDadosRelatorioPrescricaoHelper", colecaoDadosRelatorioPrescricaoHelper);

		GerenciadorExecucaoTarefaRelatorio.analisarExecucao(relatorioDebitosPrescritos, TarefaRelatorio.TIPO_PDF);

		// O sistema atualiza os dados de execução do comando
		prescricaoComando.setDataRealizacao(new Date());
		prescricaoComando.setUltimaAlteracao(new Date());
		getControladorUtil().atualizar(prescricaoComando);
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * [SB0001] - Marcar Prescrição Conta
	 * Qualquer alteração nesse método tem de ser verificado se é apenas para comando de simulação
	 * ou não (indicadorSimulacao).
	 * 
	 * @author Anderson Italo
	 * @date 26/02/2014
	 */
	private void marcarPrescricaoConta(PrescricaoComando prescricaoComando, DebitoCreditoSituacao debitoCreditoSituacaoPrescrita,
					DadosImovelPrescicaoHelper dadosImovelPrescicaoHelper, DadosRelatorioPrescicaoHelper helperRelatorio,
					Short indicadorSimulacao)
					throws ControladorException{

		ContaGeral contaGeral = null;
		Conta conta = null;
		ContaPrescricaoHistorico contaPrescricaoHistorico = null;
		BigDecimal valorTotalContasPrescritasImovel = BigDecimal.ZERO;
		Integer quantidadeContasPrescritasImovel = 0;
		Collection<Conta> colecaoContasPrescritasImovel = new ArrayList<Conta>();

		for(Object[] dadosContaPrescricao : dadosImovelPrescicaoHelper.getColecaoDadosContasPrescricao()){

			// Atualiza a situação da conta para prescrita
			conta = (Conta) getControladorUtil().pesquisar(Util.obterInteger(dadosContaPrescricao[0].toString()),
							Conta.class, false);

			// Caso o comando não seja uma simulação
			if(indicadorSimulacao.equals(ConstantesSistema.NAO)){

				conta.setDebitoCreditoSituacaoAnterior(conta.getDebitoCreditoSituacaoAtual());
				conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoPrescrita);
				conta.setPrescricaoComando(prescricaoComando);
				conta.setUltimaAlteracao(new Date());

				getControladorUtil().atualizar(conta);

				// Inclui dados da prescrição da conta
				contaGeral = (ContaGeral) getControladorUtil().pesquisar(Util.obterInteger(dadosContaPrescricao[0].toString()),
								ContaGeral.class, false);
				contaPrescricaoHistorico = new ContaPrescricaoHistorico();
				contaPrescricaoHistorico.setContaGeral(contaGeral);
				contaPrescricaoHistorico.setImovel(conta.getImovel());
				contaPrescricaoHistorico.setCodigoEvento(ContaPrescricaoHistorico.MARCACAO_PRESCRICAO);
				contaPrescricaoHistorico.setDataEvento(new Date());
				contaPrescricaoHistorico.setValorConta(new BigDecimal(dadosContaPrescricao[2].toString()));
				contaPrescricaoHistorico.setUsuario(prescricaoComando.getUsuario());
				contaPrescricaoHistorico.setPrescricaoComando(prescricaoComando);
				contaPrescricaoHistorico.setUltimaAlteracao(new Date());

				getControladorUtil().inserir(contaPrescricaoHistorico);
			}

			valorTotalContasPrescritasImovel = valorTotalContasPrescritasImovel.add(conta.getValorTotalContaBigDecimal());
			quantidadeContasPrescritasImovel = quantidadeContasPrescritasImovel.intValue() + 1;
			colecaoContasPrescritasImovel.add(conta);
		}

		helperRelatorio.setValorTotalContas(valorTotalContasPrescritasImovel);
		helperRelatorio.setQuantidadeContas(quantidadeContasPrescritasImovel);
		helperRelatorio.setColecaoContasPrescricao(colecaoContasPrescritasImovel);
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * [SB0001] - Marcar Prescrição Conta
	 * Qualquer alteração nesse método tem de ser verificado se é apenas para comando de simulação
	 * ou não (indicadorSimulacao).
	 * 
	 * @author Anderson Italo
	 * @date 26/02/2014
	 */
	private void marcarPrescricaoGuia(PrescricaoComando prescricaoComando, DebitoCreditoSituacao debitoCreditoSituacaoPrescrita,
					DadosImovelPrescicaoHelper dadosImovelPrescicaoHelper, DadosRelatorioPrescicaoHelper helperRelatorio,
					Short indicadorSimulacao)
					throws ControladorException{

		GuiaPagamentoPrescricaoHistorico guiaPagamentoPrescricaoHistorico = null;
		FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
		Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = null;
		GuiaPagamentoGeral guiaPagamentoGeral = null;
		Imovel imovel = new Imovel(dadosImovelPrescicaoHelper.getIdImovel());
		BigDecimal valorTotalGuiasPrescritasImovel = BigDecimal.ZERO;
		Collection<String> colecaoIdsGuiasPrestacao = new ArrayList<String>();

		for(Object[] dadosGuiaPrescricao : dadosImovelPrescicaoHelper.getColecaoDadosGuiasPagamentoPrescricao()){

			// Atualiza a situação da prestação da guia de pagamento para prescrita
			filtroGuiaPagamentoPrestacao.limparListaParametros();
			filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID, Util
							.obterInteger(dadosGuiaPrescricao[0].toString())));
			filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO, Util
							.obterShort(dadosGuiaPrescricao[2].toString())));
			filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO);

			colecaoGuiaPagamentoPrestacao = (Collection<GuiaPagamentoPrestacao>) getControladorUtil().pesquisar(
							filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

			for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoGuiaPagamentoPrestacao){

				// Caso o comando não seja uma simulação
				if(indicadorSimulacao.equals(ConstantesSistema.NAO)){

					guiaPagamentoPrestacao.setDebitoCreditoSituacaoAnterior(guiaPagamentoPrestacao.getDebitoCreditoSituacao());
					guiaPagamentoPrestacao.setDebitoCreditoSituacao(debitoCreditoSituacaoPrescrita);
					guiaPagamentoPrestacao.setPrescricaoComando(prescricaoComando);
					guiaPagamentoPrestacao.setUltimaAlteracao(new Date());

					getControladorUtil().atualizar(guiaPagamentoPrestacao);
				}

				valorTotalGuiasPrescritasImovel = valorTotalGuiasPrescritasImovel.add(guiaPagamentoPrestacao.getValorPrestacao());
			}

			if(!colecaoIdsGuiasPrestacao.contains(dadosGuiaPrescricao[0].toString() + "/" + dadosGuiaPrescricao[2].toString())){

				guiaPagamentoGeral = (GuiaPagamentoGeral) getControladorUtil().pesquisar(
								Util.obterInteger(dadosGuiaPrescricao[0].toString()), GuiaPagamentoGeral.class, false);

				colecaoIdsGuiasPrestacao.add(guiaPagamentoGeral.getId() + "/" + dadosGuiaPrescricao[2].toString());
			}



			// Caso o comando não seja uma simulação
			if(indicadorSimulacao.equals(ConstantesSistema.NAO)){

				// Inclui dados da prescrição da prestação da guia
				guiaPagamentoPrescricaoHistorico = new GuiaPagamentoPrescricaoHistorico();
				guiaPagamentoPrescricaoHistorico.setGuiaPagamentoGeral(guiaPagamentoGeral);
				guiaPagamentoPrescricaoHistorico.setImovel(imovel);
				guiaPagamentoPrescricaoHistorico.setCodigoEvento(GuiaPagamentoPrescricaoHistorico.MARCACAO_PRESCRICAO);
				guiaPagamentoPrescricaoHistorico.setDataEvento(new Date());
				guiaPagamentoPrescricaoHistorico.setValorGuia(new BigDecimal(dadosGuiaPrescricao[3].toString()));
				guiaPagamentoPrescricaoHistorico.setUsuario(prescricaoComando.getUsuario());
				guiaPagamentoPrescricaoHistorico.setPrescricaoComando(prescricaoComando);
				guiaPagamentoPrescricaoHistorico.setNumeroPrestacao(Util.obterShort(dadosGuiaPrescricao[2].toString()));
				guiaPagamentoPrescricaoHistorico.setUltimaAlteracao(new Date());

				getControladorUtil().inserir(guiaPagamentoPrescricaoHistorico);
			}
		}

		// Caso o comando não seja uma simulação
		if(indicadorSimulacao.equals(ConstantesSistema.NAO)){

			filtroGuiaPagamentoPrestacao.limparListaParametros();
			filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
							guiaPagamentoGeral.getId()));
			filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimplesDiferenteDe(
							FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ATUAL_ID, debitoCreditoSituacaoPrescrita.getId()));

			colecaoGuiaPagamentoPrestacao = (Collection<GuiaPagamentoPrestacao>) getControladorUtil().pesquisar(
							filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

			// Caso todas as prestações da guia da prestação estejam marcadas como prescritas
			if(Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao)){

				// Atualiza a situação da guia de pagamento para prescrita
				GuiaPagamento guiaPagamento = (GuiaPagamento) getControladorUtil().pesquisar(guiaPagamentoGeral.getId(),
								GuiaPagamento.class, false);

				guiaPagamento.setDebitoCreditoSituacaoAnterior(guiaPagamento.getDebitoCreditoSituacaoAtual());
				guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoPrescrita);
				guiaPagamento.setPrescricaoComando(prescricaoComando);
				guiaPagamento.setUltimaAlteracao(new Date());
				getControladorUtil().atualizar(guiaPagamento);
			}
		}

		helperRelatorio.setValorTotalGuias(valorTotalGuiasPrescritasImovel);
		helperRelatorio.setQuantidadeGuias(colecaoIdsGuiasPrestacao.size());
		helperRelatorio.setColecaoDadosGuiasPagamentoPrescricao(dadosImovelPrescicaoHelper.getColecaoDadosGuiasPagamentoPrescricao());
	}

	/**
	 * [UC3137] Comandar Prescrição de Débito
	 * 
	 * @author Anderson Italo
	 * @date 25/02/2014
	 */
	public Object[] comandarPrescricaoDebitosComandoUsuarioOuAutomatico(ComandoDebitosPrescritosHelper comandoHelper, Usuario usuarioLogado)
					throws ControladorException{

		Object[] retorno = new Object[2];

		// O usuário seleciona os imóveis para marcação do débito prescrito <<Inclui>>
		// [UC3138 - Filtro para Prescrição do Débito]
		Object[] dadosImoveisMarcacaoDebitoPrescrito = this.filtrarDebitoPrescricao(comandoHelper);

		// Caso o comando de prescrição seja comandado pelo usuário (funcionalidade foi iniciada
		// a partir do menu on-line)
		if(comandoHelper.getComandoPrescricaoAutomatico().equals(ConstantesSistema.NAO)){

			ProcessoIniciado processoIniciado = new ProcessoIniciado();

			Processo processo = new Processo();
			processo.setId(Processo.COMANDAR_PRESCRICAO_DEBITOS_USUARIO);
			processoIniciado.setDataHoraAgendamento(new Date());

			processoIniciado.setProcesso(processo);
			processoIniciado.setUsuario(usuarioLogado);

			ProcessoIniciadoDadoComplementarHelper helper = new ProcessoIniciadoDadoComplementarHelper();
			helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_COMANDO_TITULO, comandoHelper.getTitulo());
			processoIniciado.setDescricaoDadosComplementares(helper.getStringFormatoPesistencia());

			List<Object> colecaoParametros = new ArrayList<Object>();
			colecaoParametros.add(dadosImoveisMarcacaoDebitoPrescrito);

			retorno[0] = getControladorBatch().inserirProcessoIniciadoOnline(processoIniciado, colecaoParametros);

		}else{

			// Caso contrário, ou seja, caso seja um comando de prescrição automática do débito
			// (funcionalidade foi iniciada a partir do processo batch)
			retorno[1] = dadosImoveisMarcacaoDebitoPrescrito;

		}

		return retorno;
	}

	/**
	 * [UC3138] Filtrar Débito para Prescrição
	 * 
	 * @author Anderson Italo
	 * @date 21/02/2014
	 */
	private Object[] filtrarDebitoPrescricao(ComandoDebitosPrescritosHelper comandoHelper) throws ControladorException{

		Object[] retorno = new Object[2];

		try{

			Collection<Object[]> colecaoImoveisComandoPrescricaoDebitos = repositorioCobranca
							.pesquisarImoveisComandoPrescricaoDebitos(comandoHelper);
			Collection<DadosImovelPrescicaoHelper> colecaoDadosComandoImovelPrescricaoHelper = new ArrayList<DadosImovelPrescicaoHelper>();
			Collection<String> colecaoQuantidadeGuiasPrestacao = new ArrayList<String>();
			Integer quantidadeContas = 0;
			BigDecimal valorTotalContas = BigDecimal.ZERO;
			BigDecimal valorTotalGuias = BigDecimal.ZERO;

			// [FS0014] - Nenhum registro encontrado
			if(Util.isVazioOrNulo(colecaoImoveisComandoPrescricaoDebitos)){

				throw new ControladorException("atencao.pesquisa.nenhumresultado");
			}else{

				Date dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico = null;
				String parametroNumeroAnosVencDebOrgPubPrescricao = null;
				try{

					parametroNumeroAnosVencDebOrgPubPrescricao = ((String) ParametroCobranca.P_NUMERO_ANOS_VENCIMENTO_DEBITO_ORGAO_PUBLICO_PARA_PRESCRICAO
									.executar(this));
				}catch(ControladorException e){

					throw new ActionServletException("atencao.sistemaparametro_inexistente",
									"P_NUMERO_ANOS_VENCIMENTO_DEBITO_ORGAO_PUBLICO_PARA_PRESCRICAO");
				}

				dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico = Util.subtrairNumeroAnosDeUmaData(new Date(),
								Util.obterInteger(parametroNumeroAnosVencDebOrgPubPrescricao));

				Date dataCorrenteMenosNumeroAnosPrescDebParticular = null;
				String parametroNumeroAnosVencDebParticularPrescricao = null;
				try{

					parametroNumeroAnosVencDebParticularPrescricao = ((String) ParametroCobranca.P_NUMERO_ANOS_VENCIMENTO_DEBITO_PARTICULAR_PARA_PRESCRICAO
									.executar(this));
				}catch(ControladorException e){

					throw new ActionServletException("atencao.sistemaparametro_inexistente",
									"P_NUMERO_ANOS_VENCIMENTO_DEBITO_PARTICULAR_PARA_PRESCRICAO");
				}

				dataCorrenteMenosNumeroAnosPrescDebParticular = Util.subtrairNumeroAnosDeUmaData(new Date(),
								Util.obterInteger(parametroNumeroAnosVencDebParticularPrescricao));

				boolean possuiGuiaOuContaPermitidaPrescricao = false;
				Object[] dadosImovelPrescricao = null;

				// [SB0002] - Selecionar Débito para Prescrição
				for(Iterator iterator = colecaoImoveisComandoPrescricaoDebitos.iterator(); iterator.hasNext();){

					dadosImovelPrescricao = (Object[]) iterator.next();
					possuiGuiaOuContaPermitidaPrescricao = false;

					Collection<Object[]> colecaoDadosContasPrescricao = repositorioCobranca.pesquisarDadosContasComandoPrescricaoDebitos(
									Util.obterInteger(dadosImovelPrescricao[0].toString()),
									dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico, dataCorrenteMenosNumeroAnosPrescDebParticular,
									comandoHelper);

					Collection<Object[]> colecaoDadosGuiasPagamentoPrescricao = repositorioCobranca
									.pesquisarDadosGuiasPagamentoComandoPrescricaoDebitos(
													Util.obterInteger(dadosImovelPrescricao[0].toString()),
													dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico,
													dataCorrenteMenosNumeroAnosPrescDebParticular, comandoHelper);

					if(!Util.isVazioOrNulo(colecaoDadosContasPrescricao)){

						for(Object[] dadosContaPrescricao : colecaoDadosContasPrescricao){

							valorTotalContas = valorTotalContas.add(new BigDecimal(dadosContaPrescricao[2].toString()));
						}

						quantidadeContas = quantidadeContas.intValue() + colecaoDadosContasPrescricao.size();

						possuiGuiaOuContaPermitidaPrescricao = true;
					}else if(!Util.isVazioOrNulo(colecaoDadosGuiasPagamentoPrescricao)){

						Integer idGuia = null;
						for(Object[] dadosGuiaPrescricao : colecaoDadosGuiasPagamentoPrescricao){

							valorTotalGuias = valorTotalGuias.add(new BigDecimal(dadosGuiaPrescricao[3].toString()));
							idGuia = Util.obterInteger(dadosGuiaPrescricao[0].toString());

							if(!colecaoQuantidadeGuiasPrestacao.contains(idGuia.toString() + "/" + dadosGuiaPrescricao[2].toString())){

								colecaoQuantidadeGuiasPrestacao.add(idGuia.toString() + "/" + dadosGuiaPrescricao[2].toString());
							}
						}

						possuiGuiaOuContaPermitidaPrescricao = true;
					}

					if(possuiGuiaOuContaPermitidaPrescricao){

						DadosImovelPrescicaoHelper dadosImovelPrescicaoHelper = new DadosImovelPrescicaoHelper();
						dadosImovelPrescicaoHelper.setIdImovel(Util.obterInteger(dadosImovelPrescricao[0].toString()));
						dadosImovelPrescicaoHelper.setIdLocalidade(Util.obterInteger(dadosImovelPrescricao[1].toString()));
						dadosImovelPrescicaoHelper.setNomeLocalidade(dadosImovelPrescricao[8].toString());
						dadosImovelPrescicaoHelper.setCodigoSetorComercial(Util.obterInteger(dadosImovelPrescricao[2].toString()));
						dadosImovelPrescicaoHelper.setNumeroQuadra(Util.obterInteger(dadosImovelPrescricao[3].toString()));
						dadosImovelPrescicaoHelper.setLote(Util.obterShort(dadosImovelPrescricao[4].toString()));
						dadosImovelPrescicaoHelper.setSublote(Util.obterShort(dadosImovelPrescricao[5].toString()));
						dadosImovelPrescicaoHelper.setIdLigacaoAguaSituacao(Util.obterInteger(dadosImovelPrescricao[6].toString()));
						dadosImovelPrescicaoHelper.setIdLigacaoEsgotoSituacao(Util.obterInteger(dadosImovelPrescricao[7].toString()));

						dadosImovelPrescicaoHelper.setColecaoDadosContasPrescricao(colecaoDadosContasPrescricao);
						dadosImovelPrescicaoHelper.setColecaoDadosGuiasPagamentoPrescricao(colecaoDadosGuiasPagamentoPrescricao);

						colecaoDadosComandoImovelPrescricaoHelper.add(dadosImovelPrescicaoHelper);
					}
				}
			}

			// [FS0014] - Nenhum registro encontrado
			if(Util.isVazioOrNulo(colecaoDadosComandoImovelPrescricaoHelper)
							&& comandoHelper.getComandoPrescricaoAutomatico().equals(ConstantesSistema.NAO)){

				throw new ControladorException("atencao.pesquisa.nenhumresultado");
			}

			comandoHelper.setQuantidadeImoveis(colecaoDadosComandoImovelPrescricaoHelper.size());
			comandoHelper.setQuantidadeContas(quantidadeContas);
			comandoHelper.setQuantidadeGuias(colecaoQuantidadeGuiasPrestacao.size());
			comandoHelper.setValorTotalContas(valorTotalContas);
			comandoHelper.setValorTotalGuias(valorTotalGuias);

			// [SB0003] - Inclui Comando de Prescrição
			Integer idPrescricaoComando = incluirComandoPrescricao(comandoHelper);

			LOGGER.info("Id do Comando de Prescrição de Débitos Inserido: " + idPrescricaoComando.toString());

			// O sistema retorna para o caso de uso que chamou esta funcionalidade a lista dos
			// imóveis com suas respectivas lista de débitos e a identificação do comando de
			// prescrição
			retorno[0] = colecaoDadosComandoImovelPrescricaoHelper;
			retorno[1] = idPrescricaoComando;

		}catch(ErroRepositorioException e){

			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC3138] Filtrar Débito para Prescrição
	 * [SB0003] - Inclui Comando de Prescrição
	 * 
	 * @author Anderson Italo
	 * @date 25/02/2014
	 */
	private Integer incluirComandoPrescricao(ComandoDebitosPrescritosHelper comandoHelper) throws ControladorException{

		PrescricaoComando prescricaoComando = new PrescricaoComando();

		// Título
		if(comandoHelper.getTitulo() != null){

			prescricaoComando.setTitulo(comandoHelper.getTitulo());
		}

		// Descrição da Solicitação
		if(comandoHelper.getDescricaoSolicitacao() != null){

			prescricaoComando.setDescricaoSolicitacao(comandoHelper.getDescricaoSolicitacao());
		}

		// Indicador de Simulação
		prescricaoComando.setIndicadorSimulacao(comandoHelper.getIndicadorSimulacao());

		// Gerência Regional
		if(comandoHelper.getIdGerenciaRegional() != null){

			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(comandoHelper.getIdGerenciaRegional());
			prescricaoComando.setGerenciaRegional(gerenciaRegional);
		}

		// Unidade de Negócio
		if(comandoHelper.getIdUnidadeNegocio() != null){

			UnidadeNegocio unidadeNegocio = new UnidadeNegocio();
			unidadeNegocio.setId(comandoHelper.getIdUnidadeNegocio());
			prescricaoComando.setUnidadeNegocio(unidadeNegocio);
		}

		// Elo
		if(comandoHelper.getIdElo() != null){

			Localidade elo = new Localidade();
			elo.setId(comandoHelper.getIdElo());
			prescricaoComando.setElo(elo);
		}

		// Localidade Inicial
		if(comandoHelper.getIdLocalidadeInicial() != null){

			Localidade localidade = new Localidade();
			localidade.setId(comandoHelper.getIdLocalidadeInicial());
			prescricaoComando.setLocalidadeInicial(localidade);
		}

		// Localidade Final
		if(comandoHelper.getIdLocalidadeFinal() != null){

			Localidade localidade = new Localidade();
			localidade.setId(comandoHelper.getIdLocalidadeFinal());
			prescricaoComando.setLocalidadeFinal(localidade);
		}

		// Código do Setor Comercial Inicial
		if(comandoHelper.getCodigoSetorComercialInicial() != null){

			prescricaoComando.setCodigoSetorComercialInicial(comandoHelper.getCodigoSetorComercialInicial());
		}

		// Código do Setor Comercial Final
		if(comandoHelper.getCodigoSetorComercialFinal() != null){

			prescricaoComando.setCodigoSetorComercialFinal(comandoHelper.getCodigoSetorComercialFinal());
		}

		// Número da Quadra Inicial
		if(comandoHelper.getNumeroQuadraInicial() != null){

			prescricaoComando.setNumeroQuadraInicial(comandoHelper.getNumeroQuadraInicial());
		}

		// Número da Quadra Final
		if(comandoHelper.getNumeroQuadraFinal() != null){

			prescricaoComando.setNumeroQuadraFinal(comandoHelper.getNumeroQuadraFinal());
		}

		// Cliente
		if(comandoHelper.getIdCliente() != null){

			Cliente cliente = new Cliente();
			cliente.setId(comandoHelper.getIdCliente());
			prescricaoComando.setCliente(cliente);

			// Tipo da Relação do Cliente
			if(comandoHelper.getIdClienteRelacaoTipo() != null){

				ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
				clienteRelacaoTipo.setId(comandoHelper.getIdClienteRelacaoTipo());
				prescricaoComando.setClienteRelacaoTipo(clienteRelacaoTipo);
			}

			// Período de Relacionamento
			if(comandoHelper.getPeriodoRelacionamentoInicial() != null && comandoHelper.getPeriodoRelacionamentoFinal() != null){

				prescricaoComando.setDataRelacaoClienteInicial(comandoHelper.getPeriodoRelacionamentoInicial());
				prescricaoComando.setDataRelacaoClienteFinal(comandoHelper.getPeriodoRelacionamentoFinal());
			}
		}

		// Arquivo de Imóveis
		if(comandoHelper.getArquivoImoveis() != null){

			prescricaoComando.setArquivoImoveis(comandoHelper.getArquivoImoveis());
		}

		// Período de Referência do Débito
		if(comandoHelper.getPeriodoReferenciaDebitoInicial() != null && comandoHelper.getPeriodoReferenciaDebitoFinal() != null){

			prescricaoComando.setAnoMesReferenciaDebitoInicial(comandoHelper.getPeriodoReferenciaDebitoInicial());
			prescricaoComando.setAnoMesReferenciaDebitoFinal(comandoHelper.getPeriodoReferenciaDebitoFinal());
		}

		// Período de Vencimento do Débito
		if(comandoHelper.getPeriodoVencimentoDebitoInicial() != null && comandoHelper.getPeriodoVencimentoDebitoFinal() != null){

			prescricaoComando.setDataVencimentoDebitoInicial(comandoHelper.getPeriodoVencimentoDebitoInicial());
			prescricaoComando.setDataVencimentoDebitoFinal(comandoHelper.getPeriodoVencimentoDebitoFinal());
		}

		// Usuário
		Usuario usuario = new Usuario();
		usuario.setId(comandoHelper.getIdUsuario());
		prescricaoComando.setUsuario(usuario);

		// Quantidade de Imóveis
		prescricaoComando.setQuantidadeImoveis(comandoHelper.getQuantidadeImoveis());

		// Quatidade de Contas
		prescricaoComando.setQuantidadeContasPrescritas(comandoHelper.getQuantidadeContas());

		// Quantidade de Guias
		prescricaoComando.setQuantidadeGuiasPrescritas(comandoHelper.getQuantidadeGuias());

		// Valor Total das Contas
		prescricaoComando.setValorContasPrescritas(comandoHelper.getValorTotalContas());

		// Valor Total das Guias
		prescricaoComando.setValorGuiasPrescritas(comandoHelper.getValorTotalGuias());

		// Data do comando
		prescricaoComando.setDataComando(new Date());

		// Última Alteração
		prescricaoComando.setUltimaAlteracao(new Date());

		Integer idPrescricaoComandoInserido = (Integer) getControladorUtil().inserir(prescricaoComando);
		prescricaoComando.setId(idPrescricaoComandoInserido);

		// Categoria/Subcategorias
		if(!Util.isVazioOrNulo(comandoHelper.getColecaoIdsSubcategorias())){

			for(Integer idSubCategoria : comandoHelper.getColecaoIdsSubcategorias()){

				PrescricaoComandoCategoriaSubcategoria prescricaoComandoCategoriaSubcategoria = new PrescricaoComandoCategoriaSubcategoria();

				prescricaoComandoCategoriaSubcategoria.setPrescricaoComando(prescricaoComando);

				Subcategoria subcategoria = new Subcategoria();
				subcategoria.setId(idSubCategoria);
				prescricaoComandoCategoriaSubcategoria.setSubcategoria(subcategoria);

				Categoria categoria = new Categoria();
				categoria.setId((Integer) Util.retonarObjetoDeColecao(comandoHelper.getColecaoIdsCategorias()));
				prescricaoComandoCategoriaSubcategoria.setCategoria(categoria);

				prescricaoComandoCategoriaSubcategoria.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(prescricaoComandoCategoriaSubcategoria);
			}
		}else if(!Util.isVazioOrNulo(comandoHelper.getColecaoIdsCategorias())){

			for(Integer idCategoria : comandoHelper.getColecaoIdsCategorias()){

				PrescricaoComandoCategoriaSubcategoria prescricaoComandoCategoriaSubcategoria = new PrescricaoComandoCategoriaSubcategoria();

				prescricaoComandoCategoriaSubcategoria.setPrescricaoComando(prescricaoComando);

				Categoria categoria = new Categoria();
				categoria.setId(idCategoria);
				prescricaoComandoCategoriaSubcategoria.setCategoria(categoria);

				prescricaoComandoCategoriaSubcategoria.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(prescricaoComandoCategoriaSubcategoria);
			}
		}

		// Situação da Ligação de Água
		if(!Util.isVazioOrNulo(comandoHelper.getColecaoIdsLigacaoAguaSituacao())){

			for(Integer idLigacaoAguaSituacao : comandoHelper.getColecaoIdsLigacaoAguaSituacao()){

				PrescricaoComandoLigacaoAgua prescricaoComandoLigacaoAgua = new PrescricaoComandoLigacaoAgua();

				prescricaoComandoLigacaoAgua.setPrescricaoComando(prescricaoComando);

				LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
				ligacaoAguaSituacao.setId(idLigacaoAguaSituacao);
				prescricaoComandoLigacaoAgua.setLigacaoAguaSituacao(ligacaoAguaSituacao);

				prescricaoComandoLigacaoAgua.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(prescricaoComandoLigacaoAgua);
			}
		}

		// Situação da Ligação de Esgoto
		if(!Util.isVazioOrNulo(comandoHelper.getColecaoIdsLigacaoEsgotoSituacao())){

			for(Integer idLigacaoEsgotoSituacao : comandoHelper.getColecaoIdsLigacaoEsgotoSituacao()){

				PrescricaoComandoLigacaoEsgoto prescricaoComandoLigacaoEsgoto = new PrescricaoComandoLigacaoEsgoto();

				prescricaoComandoLigacaoEsgoto.setPrescricaoComando(prescricaoComando);

				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
				ligacaoEsgotoSituacao.setId(idLigacaoEsgotoSituacao);
				prescricaoComandoLigacaoEsgoto.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

				prescricaoComandoLigacaoEsgoto.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(prescricaoComandoLigacaoEsgoto);
			}
		}

		// Situação de Cobrança
		if(!Util.isVazioOrNulo(comandoHelper.getColecaoIdsCobrancaSituacao())){

			for(Integer idCobrancaSituacao : comandoHelper.getColecaoIdsCobrancaSituacao()){

				PrescricaoComandoSituacaoCobranca prescricaoSituacaoCobranca = new PrescricaoComandoSituacaoCobranca();

				prescricaoSituacaoCobranca.setPrescricaoComando(prescricaoComando);

				CobrancaSituacao cobrancaSituacao = new CobrancaSituacao();
				cobrancaSituacao.setId(idCobrancaSituacao);
				prescricaoSituacaoCobranca.setCobrancaSituacao(cobrancaSituacao);

				prescricaoSituacaoCobranca.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(prescricaoSituacaoCobranca);
			}
		}

		return prescricaoComando.getId();
	}

	/**
	 * < <Descrição do método>>
	 * 
	 * @exception CreateException
	 *                Descrição da exceção
	 */
	public void ejbCreate() throws CreateException{

		repositorioImovel = RepositorioImovelHBM.getInstancia();

		repositorioCobranca = RepositorioCobrancaHBM.getInstancia();

		repositorioArrecadacao = RepositorioArrecadacaoHBM.getInstancia();

		repositorioMicromedicao = RepositorioMicromedicaoHBM.getInstancia();

		repositorioUtil = RepositorioUtilHBM.getInstancia();

		repositorioClienteImovel = RepositorioClienteImovelHBM.getInstancia();

		repositorioBatch = RepositorioBatchHBM.getInstancia();

		repositorioFaturamento = RepositorioFaturamentoHBM.getInstancia();

	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbRemove(){

	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbActivate(){

	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbPassivate(){

	}

	/**
	 * Seta o valor de sessionContext
	 * 
	 * @param sessionContext
	 *            O novo valor de sessionContext
	 */
	public void setSessionContext(SessionContext sessionContext){

		this.sessionContext = sessionContext;
	}

	public ExecutorParametro getExecutorParametro(){

		return ExecutorParametrosCobranca.getInstancia();
	}

	/**
	 * Retorna o valor de controladorTransacao
	 * 
	 * @return O valor de controladorTransacao
	 */
	private ControladorTransacaoLocal getControladorTransacao(){

		ControladorTransacaoLocalHome localHome = null;
		ControladorTransacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTransacaoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_TRANSACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorPermissaoEspecial
	 * 
	 * @return O valor de controladorPermissaoEspecial
	 */
	protected ControladorPermissaoEspecialLocal getControladorPermissaoEspecial(){

		ControladorPermissaoEspecialLocalHome localHome = null;
		ControladorPermissaoEspecialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorPermissaoEspecialLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_PERMISSAO_ESPECIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	private ControladorCadastroLocal getControladorCadastro(){

		ControladorCadastroLocalHome localHome = null;
		ControladorCadastroLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorCadastroLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CADASTRO_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna a interface remota de ControladorUnidade
	 * 
	 * @return A interface remota do controlador unidade
	 */
	protected ControladorUnidadeLocal getControladorUnidade(){

		ControladorUnidadeLocalHome localHome = null;
		ControladorUnidadeLocal local = null;

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUnidadeLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_UNIDADE_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o controladorLigacaoEsgoto
	 * 
	 * @author Sávio Luiz
	 * @date 21/12/2006
	 */
	protected ControladorLigacaoEsgotoLocal getControladorLigacaoEsgoto(){

		ControladorLigacaoEsgotoLocalHome localHome = null;
		ControladorLigacaoEsgotoLocal local = null;

		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLigacaoEsgotoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_ESGOTO_SEJB);
			local = localHome.create();
			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o controladorLigacaoAgua
	 * 
	 * @author Sávio Luiz
	 * @date 21/12/2006
	 */
	protected ControladorLigacaoAguaLocal getControladorLigacaoAgua(){

		return ServiceLocator.getInstancia().getControladorLigacaoAgua();
	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorUtilLocal getControladorUtil(){

		ControladorUtilLocalHome localHome = null;
		ControladorUtilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUtilLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_UTIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorImovel
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorImovelLocal getControladorImovel(){

		ControladorImovelLocalHome localHome = null;
		ControladorImovelLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorImovelLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_IMOVEL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o ControladorParcelamento
	 * 
	 * @return O ControladorParcelamento
	 */
	protected ControladorParcelamentoLocal getControladorParcelamento(){

		// retorna a referencia de um objeto capaz de fazer chamadas à objetos remotamente
		return ServiceLocator.getInstancia().getControladorParcelamento();
	}

	/**
	 * Retorna o valor de controladorFaturamento
	 * 
	 * @return O valor de controladorFaturamento
	 */
	protected ControladorFaturamentoLocal getControladorFaturamento(){

		ControladorFaturamentoLocalHome localHome = null;
		ControladorFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFaturamentoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorFaturamento
	 * 
	 * @return O valor de controladorFaturamento
	 */
	protected ControladorAtendimentoPublicoLocal getControladorAtendimentoPublico(){

		ControladorAtendimentoPublicoLocalHome localHome = null;
		ControladorAtendimentoPublicoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAtendimentoPublicoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ATENDIMENTO_PUBLICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de ControladorCliente
	 * 
	 * @return O valor de ControladorCliente
	 */
	protected ControladorClienteLocal getControladorCliente(){

		ControladorClienteLocalHome localHome = null;
		ControladorClienteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorClienteLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CLIENTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorMicromedicao
	 * 
	 * @return O valor de controladorMicromedicao
	 */
	protected ControladorMicromedicaoLocal getControladorMicromedicao(){

		ControladorMicromedicaoLocalHome localHome = null;
		ControladorMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorMicromedicaoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorAcessoLocal getControladorAcesso(){

		ControladorAcessoLocalHome localHome = null;
		ControladorAcessoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAcessoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ACESSO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorArrecadacaoLocal getControladorArrecadacao(){

		ControladorArrecadacaoLocalHome localHome = null;
		ControladorArrecadacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorArrecadacaoLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_ARRECADACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorFinanceiro
	 * 
	 * @return O valor de controladorFinanceiro
	 */
	protected ControladorFinanceiroLocal getControladorFinanceiro(){

		ControladorFinanceiroLocalHome localHome = null;
		ControladorFinanceiroLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFinanceiroLocalHome) locator.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FINANCEIRO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorSpcSerasaSEJB
	 * 
	 * @return O valor de controladorSpcSerasa
	 */
	protected ControladorSpcSerasaLocal getControladorSpcSerasa(){

		ControladorSpcSerasaLocalHome localHome = null;
		ControladorSpcSerasaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorSpcSerasaLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_SPC_SERASA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorContabil
	 * 
	 * @return O valor de controladorContabil
	 */
	protected ControladorContabilLocal getControladorContabil(){

		ControladorContabilLocalHome localHome = null;
		ControladorContabilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorContabilLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_CONTABIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}



	/**
	 * [UC0259] - Processar Pagamento com Código de Barras
	 * [SB0023 - Tratar Desconto Extrato Parcelamento].
	 * 
	 * @param anoMesReferenciaConta
	 * @param dataVencimentoConta
	 * @param idResolucaoDiretoria
	 * @param dataPagamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista obterResolucaoDiretoriaParametrosPagamentoAVista(Integer anoMesReferencia,
					Date dataVencimento, Integer idResolucaoDiretoria, Date dataPagamento) throws ControladorException{

		try{
			ResolucaoDiretoriaParametrosPagamentoAVista resolucaoDiretoriaParametrosPagamentoAVista = null;

			Collection<Object[]> collObj = this.repositorioCobranca.obterResolucaoDiretoriaParametrosPagamentoAVista(anoMesReferencia,
							dataVencimento,
							idResolucaoDiretoria, dataPagamento);

			if(!Util.isVazioOrNulo(collObj)){
				Iterator it = collObj.iterator();

				if(it.hasNext()){

					Object[] obj = (Object[]) it.next();

					if(!Util.isVazioOrNulo(obj)){
						resolucaoDiretoriaParametrosPagamentoAVista = new ResolucaoDiretoriaParametrosPagamentoAVista();

						if(obj[0] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setId(Util.converterStringParaInteger((String) obj[0]));
						}
						if(obj[1] != null){
							ResolucaoDiretoria rdir = new ResolucaoDiretoria();
							rdir.setId(Util.converterStringParaInteger((String) obj[1]));
							resolucaoDiretoriaParametrosPagamentoAVista.setResolucaoDiretoria(rdir);
						}
						if(obj[2] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setDataPagamentoInicio((Date) obj[2]);
						}
						if(obj[3] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setDataPagamentoFinal((Date) obj[3]);
						}
						if(obj[4] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setPercentualDescontoMulta(Util
											.formatarMoedaRealparaBigDecimal((String) obj[4]));
						}
						if(obj[5] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setPercentualDescontoJurosMora(Util
											.formatarMoedaRealparaBigDecimal((String) obj[5]));
						}
						if(obj[6] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setPercentualDescontoCorrecaoMonetaria(Util
											.formatarMoedaRealparaBigDecimal((String) obj[6]));
						}
						if(obj[7] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setDescricaoMensagemExtrato((String) obj[7]);
						}
						if(obj[8] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setUltimaAlteracao((Date) obj[8]);
						}
						if(obj[9] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setAnoMesReferenciaInicial(Util
											.converterStringParaInteger((String) obj[9]));
						}
						if(obj[10] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setAnoMesReferenciaFinal(Util
											.converterStringParaInteger((String) obj[10]));
						}
						if(obj[11] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setDataVencimentoInicial(Util.converteStringParaDate(
											(String) obj[11], true));
						}
						if(obj[12] != null){
							resolucaoDiretoriaParametrosPagamentoAVista.setDataVencimentoFinal((Date) obj[12]);
						}

					}

				}
			}


			return resolucaoDiretoriaParametrosPagamentoAVista;

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Anderson Italo
	 * @date 13/07/2012
	 */
	private void determinarSituacaoOrdemServico(boolean recebeuDocumentoPorParametro,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException, ControladorException{

		Integer localidadeId = null;
		UnidadeOrganizacional unidadeOrganizacional = null;
		Usuario usuarioLogado = null;
		OSEncerramentoHelper ordemServicoHelper = null;
		Date dataAtual = new Date();

		CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();

		for(OrdemServico ordemServico : cobrancaDocumento.getOrdensServico()){

			localidadeId = repositorioCobranca.obterLocalidadeOrdemServico(ordemServico.getId());

			/*
			 * Caso a ordem não esteja encerrada (ORSE_CDSITUACAO com o valor diferente de
			 * "Encerrada" (2))
			 */
			if(ordemServico.getSituacao() != OrdemServico.SITUACAO_ENCERRADO.shortValue()){

				/*
				 * Caso o documento de cobrança tenha sido recebido por parâmetro, encerrar
				 * a ordem de serviço com o motivo correspondente "cancelada"
				 */
				if(recebeuDocumentoPorParametro){

					ordemServicoHelper = new OSEncerramentoHelper();
					ordemServicoHelper.setIdMotivoEncerramento(AtendimentoMotivoEncerramento.ENCERRAMENTO_AUTOMATICO.toString());
					ordemServicoHelper.setDataExecucao(dataAtual);
					ordemServicoHelper.setUsuarioLogado(Usuario.USUARIO_BATCH);
					ordemServicoHelper.setNumeroOS(ordemServico.getId());
					ordemServicoHelper.setUltimaAlteracao(dataAtual);

					// <<Inclui>> [UC0457 - Encerrar Ordem de Serviço]
					getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
									OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);

					/*
					 * Caso o valor da situação da ação do documento seja nulo ou "ação
					 * pendente"
					 */
					if(cobrancaDocumento.getCobrancaAcaoSituacao() == null
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.PENDENTE)){

						/*
						 * Atribuir o valor "ação cancelada por decurso de prazo" à situação
						 * da ação de cobrança e a data/hora correntes à data da situação da
						 * ação de cobrança
						 */
						cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA_PRAZO);
						cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
						cobrancaDocumento.setDataSituacaoAcao(new Date());
					}
				}else{

					/*
					 * Caso a situação da ação não permita a geração de nova ação para o imóvel
					 * (CAST_ID da tabela COBRANCA_DOCUMENTO contido nos valores (nulo, 1
					 * (pendente), 6 (enviados), 8 (entregue))
					 */
					if(cobrancaDocumento.getCobrancaAcaoSituacao() == null
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.PENDENTE)
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENVIADOS)
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENTREGUE)){


						/*
						 * Caso a situação da fiscalização da ordem de serviço esteja
						 * preenchida (FZST_ID com o valor diferente de nulo na tabela
						 * ORDEM_SERVICO)
						 */
						if(ordemServico.getFiscalizacaoSituacao() != null){

							/*
							 * Atribuir o valor "ação fiscalizada" à situação
							 * da ação de cobrança e a data da fiscalização
							 * (ORSE_DTFISCALIZACAO da tabela ORDEM_SERVICO) à data da
							 * situação da ação de cobrança
							 */

							cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.FISCALIZADA);
							cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
							cobrancaDocumento.setDataSituacaoAcao(ordemServico.getDataFiscalizacaoSituacao());
						}

						/*
						 * Caso a data prevista para o encerramento seja menor ou igual que a data
						 * corrente
						 */
						if(cobrancaAcaoAtividadeComando != null
										&& cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null
										&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista().compareTo(new Date()) == 0 || cobrancaAcaoAtividadeComando
														.getDataEncerramentoPrevista().compareTo(new Date()) == -1)){

							/*
							 * Encerrar a ordem de serviço, com o motivo correspondente
							 * "cancelada por decurso de prazo"
							 */
							ordemServicoHelper = new OSEncerramentoHelper();
							ordemServicoHelper.setIdMotivoEncerramento(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO
											.toString());
							ordemServicoHelper.setDataExecucao(dataAtual);

							usuarioLogado = Usuario.USUARIO_BATCH;

							if(localidadeId != null){
								unidadeOrganizacional = getControladorUnidade().pesquisarUnidadeOrganizacionalLocalidade(localidadeId);
							}else{
								unidadeOrganizacional = null;
							}

							usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);
							ordemServicoHelper.setUsuarioLogado(usuarioLogado);

							ordemServicoHelper.setNumeroOS(ordemServico.getId());
							ordemServicoHelper.setUltimaAlteracao(dataAtual);

							// <<Inclui>> [UC0457 - Encerrar Ordem de Serviço]
							getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
											OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);

							/*
							 * Caso a situação da fiscalização da ordem de serviço não esteja
							 * preenchida (FZST_ID com o valor nulo na tabela ORDEM_SERVICO)
							 */
							if(ordemServico.getFiscalizacaoSituacao() == null){

								/*
								 * Atribuir o valor "ação cancelada por decurso de prazo" à
								 * situação da ação de cobrança e a data/hora correntes à data
								 * da situação da ação de cobrança
								 */

								cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA_PRAZO);
								cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
								cobrancaDocumento.setDataSituacaoAcao(dataAtual);
							}

							return;
						}

						Collection<CobrancaDocumentoItem> colecaoItensPendentesPorDocumentoCobranca = repositorioCobranca
										.pesquisarCobrancaDocumentoItemPorSituacao(cobrancaDocumento.getId(),
														CobrancaDebitoSituacao.PENDENTE);

						/*
						 * Caso o documento de cobrança não tenha mais itens pendentes (não
						 * existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
						 * CBDO_ID=CBDO_ID da tabela COBRANCA_DOCUMENTO e CDST_ID=CDST_ID da
						 * tabela COBRANCA_DEBITO_SITUACAO com CDST_DSSITUACAODEBITO="PENDENTE")
						 */
						if(Util.isVazioOrNulo(colecaoItensPendentesPorDocumentoCobranca)){

							/*
							 * Encerrar a ordem de serviço, com o motivo correspondente
							 * "encerramento automático"
							 */
							ordemServicoHelper = new OSEncerramentoHelper();
							ordemServicoHelper.setIdMotivoEncerramento(AtendimentoMotivoEncerramento.ENCERRAMENTO_AUTOMATICO.toString());
							ordemServicoHelper.setDataEncerramento(dataAtual);

							usuarioLogado = Usuario.USUARIO_BATCH;

							if(localidadeId != null){
								unidadeOrganizacional = getControladorUnidade().pesquisarUnidadeOrganizacionalLocalidade(localidadeId);
							}else{
								unidadeOrganizacional = null;
							}

							usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);
							ordemServicoHelper.setUsuarioLogado(usuarioLogado);

							ordemServicoHelper.setNumeroOS(ordemServico.getId());
							ordemServicoHelper.setUltimaAlteracao(dataAtual);

							// <<Inclui>> [UC0457 - Encerrar Ordem de Serviço]
							getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
											OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);

							/*
							 * Caso a situação da fiscalização da ordem de serviço não esteja
							 * preenchida (FZST_ID com o valor nulo na tabela
							 * ORDEM_SERVICO)
							 */
							if(ordemServico.getFiscalizacaoSituacao() == null){

								/*
								 * Atribuir o valor "ação cancelada" à situação
								 * da ação de cobrança e a data da fiscalização
								 * (ORSE_DTFISCALIZACAO da tabela ORDEM_SERVICO) à data da
								 * situação da ação de cobrança
								 */

								cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA);
								cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
								cobrancaDocumento.setDataSituacaoAcao(ordemServico.getDataFiscalizacaoSituacao());
							}
						}
					}else{

						/*
						 * Caso contrário, ou seja, caso a situação da ação permita a geração de
						 * nova ação para o imóvel.
						 * Caso a situação da ação de cobrança seja "fiscalizada"
						 */
						if(cobrancaDocumento.getCobrancaAcaoSituacao() != null
										&& cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.FISCALIZADA)){

							/*
							 * Caso a data prevista para o encerramento seja menor ou igual que a
							 * data
							 * corrente
							 */
							if(cobrancaAcaoAtividadeComando != null
											&& cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null
											&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista().compareTo(new Date()) == 0 || cobrancaAcaoAtividadeComando
															.getDataEncerramentoPrevista().compareTo(new Date()) == -1)){

								/*
								 * Encerrar a ordem de serviço, com o motivo correspondente
								 * "cancelada por decurso de prazo"
								 */
								ordemServicoHelper = new OSEncerramentoHelper();
								ordemServicoHelper.setIdMotivoEncerramento(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO
												.toString());
								ordemServicoHelper.setDataEncerramento(dataAtual);

								usuarioLogado = Usuario.USUARIO_BATCH;

								if(localidadeId != null){
									unidadeOrganizacional = getControladorUnidade().pesquisarUnidadeOrganizacionalLocalidade(localidadeId);
								}else{
									unidadeOrganizacional = null;
								}

								usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);
								ordemServicoHelper.setUsuarioLogado(usuarioLogado);

								ordemServicoHelper.setNumeroOS(ordemServico.getId());
								ordemServicoHelper.setUltimaAlteracao(dataAtual);

								// <<Inclui>> [UC0457 - Encerrar Ordem de Serviço]
								getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
												OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);
							}
						}
					}
				}
			}else{


				/*
				 * Caso contrário, ou seja, a ordem de serviço está encerrada.
				 * Caso a situação da ação não permita a geração de nova ação para o imóvel
				 * (CAST_ID da tabela COBRANCA_DOCUMENTO contido nos valores (nulo, 1
				 * (pendente), 6 (enviados), 8 (entregue))
				 */
				if(cobrancaDocumento.getCobrancaAcaoSituacao() == null
								|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.PENDENTE)
								|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENVIADOS)
								|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENTREGUE)){

					/*
					 * Atribui a data de execução da ordem de serviço (extrair a data do
					 * ORSE_TMENCERRAMENTO) à data da situação da ação de cobrança
					 */
					cobrancaDocumento.setDataSituacaoAcao(ordemServico.getDataExecucao());

					/*
					 * Caso o motivo de encerramento corresponda à execução, atribuir o valor
					 * "ação executada" à situação da ação de cobrança
					 */
					if(ordemServico.getAtendimentoMotivoEncerramento() != null
									&& ordemServico.getAtendimentoMotivoEncerramento().getId()
													.equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){

						cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.EXECUTADA);
						cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
					}else{

						// Caso contrário, atribuir o valor "ação cancelada" à situação da ação
						// de cobrança
						cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA);
						cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
					}
				}

			}
		}
	}

	/**
	 * [UC0630] [SB0003] Método responsável por verificar e remover os debitos que estão em cobranca
	 * administrativa por uma empresa diversa da empresa do usuário logado
	 * 
	 * @param usuario
	 * @param idImovel
	 * @param helper
	 * @throws ControladorException
	 */
	public void removerDebitosCobAdministrativaEmpresaDiversas(Usuario usuario, Integer idImovel, ObterDebitoImovelOuClienteHelper helper)
					throws ControladorException{

		if(usuario.getEmpresa() != null){

			Collection<ContaValoresHelper> colecaoContasValoresImovel = helper.getColecaoContasValoresImovel();
			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = helper.getColecaoGuiasPagamentoValores();
			Collection<DebitoACobrar> colecaoDebitoACobrar = helper.getColecaoDebitoACobrar();
			Collection<CreditoARealizar> colecaoCreditoARealizar = helper.getColecaoCreditoARealizar();
			Collection colecaoDebitoACobrarParcelamento = helper.getColecaoDebitoCreditoParcelamentoHelper();

			if((colecaoContasValoresImovel == null || colecaoContasValoresImovel.isEmpty())
							&& (colecaoGuiasPagamentoValores == null || colecaoGuiasPagamentoValores.isEmpty())
							&& (colecaoDebitoACobrar == null || colecaoDebitoACobrar.isEmpty())
							&& (colecaoCreditoARealizar == null || colecaoCreditoARealizar.isEmpty())
							&& (colecaoDebitoACobrarParcelamento == null || colecaoDebitoACobrarParcelamento.isEmpty())){

				throw new ControladorException("atencao.imovel_sem_debitos_creditos");

			}

			this.removerContaCobrancaAdministrativaDebitoImovel(usuario, idImovel, helper.getColecaoContasValores());
			this.removerContaCobrancaAdministrativaDebitoImovel(usuario, idImovel, helper.getColecaoContasValoresImovel());
			this.removerGuiaPagamentoCobrancaAdministrativaDebitoImovel(usuario, idImovel, helper.getColecaoGuiasPagamentoValores());

		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [UC0252] Consultar Parcelamentos de Débitos
	 * Método responsável por identificar Característica do Parcelamento
	 * 1: Parcelamento de Cobrança Bancária
	 * 2: Parcelamento de Cobrança Administrativa
	 * 3: Parcelamento Normal
	 * 
	 * @author Saulo Lima
	 * @since 22/08/2013
	 * @param parcelamento
	 * @return int
	 * @throws ControladorException
	 */
	public int obterCaracteristicaParcelamento(Parcelamento parcelamento) throws ControladorException{

		int retorno = 0;

		if(this.parcelamentoCobrancaBancaria(parcelamento)){
			retorno = 1;
		}else if(this.validaCobrancaAdministrativa(parcelamento)){
			retorno = 2;
		}else{
			retorno = 3;
		}

		return retorno;
	}

	private Boolean parcelamentoCobrancaBancaria(Parcelamento parcelamento) throws ControladorException{

		Boolean retorno = Boolean.FALSE;

		if(parcelamento != null && parcelamento.getCobrancaForma() != null
						&& parcelamento.getCobrancaForma().getId().equals(CobrancaForma.COBRANCA_EM_BOLETO_BANCARIO)){

			Integer idParcelamento = parcelamento.getId();

			FiltroBoletoBancario filtroBoletoBancario = new FiltroBoletoBancario();
			filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.PARCELAMENTO_ID, idParcelamento));

			Collection<BoletoBancario> colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario,
							BoletoBancario.class.getName());

			if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
				retorno = Boolean.TRUE;
			}
		}

		return retorno;

	}

	private boolean validaCobrancaAdministrativa(Parcelamento parcelamento){

		boolean cobrancaAdministrativa = false;

		/*
		 * 7.1.16.2.2. Caso seja parcelamento de cobrança administrativa (a entrada
		 * do parcelamento foi marcada como remunerável, caso o parcelamento tenha
		 * sido realizado com entrada (CNTA_ICREMUNERACOBRANCAADM com o valor 1
		 * (sim) na tabela CONTA para as contas marcadas como EP ou
		 * GPPR_ICREMUNERACOBRANCAADM com o valor 1 (sim) na tabela
		 * GUIA_PAGAMENTO_PRESTACAO para a guia de entrada), OU algum dos débitos a
		 * cobrar para a cobrança do parcelamento foi marcado como remunerável
		 * (DBAC_ICREMUNERACOBRANCAADM com o valor 1 (sim) na tabela
		 * DEBITO_A_COBRAR), caso o campo Cobrança do Parcelamento esteja com a
		 * opção Débito A Cobrar selecionada, OU alguma das prestações da guia
		 * para a cobrança do parcelamento foi marcada como remunerável
		 * (GPPR_ICREMUNERACOBRANCAADM com o valor 1 (sim) na tabela
		 * GUIA_PAGAMENTO_PRESTACAO), caso o campo Cobrança do Parcelamento esteja
		 * com a opção Guia de Pagamento selecionada):
		 */

		if(parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) > 0){

			FiltroConta filtroConta = new FiltroConta();
			filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, parcelamento.getId()));

			Collection<Conta> colecaoConta = Fachada.getInstancia().pesquisar(filtroConta, Conta.class.getName());

			// caso (a entrada do parcelamento foi marcada como remunerável, caso o parcelamento
			// tenha sido realizado com entrada (CNTA_ICREMUNERACOBRANCAADM com o valor 1 (sim) na
			// tabela CONTA para as contas marcadas como EP
			if(!Util.isVazioOrNulo(colecaoConta)){
				for(Conta conta : colecaoConta){
					if(conta.getContaMotivoRevisao() != null
									&& conta.getContaMotivoRevisao().getId().equals(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO)){
						if(conta.getIndicadorRemuneraCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
							cobrancaAdministrativa = true;
							break;
						}
					}
				}
			}

			if(!cobrancaAdministrativa){

				// ou GPPR_ICREMUNERACOBRANCAADM com o valor 1 (sim) na tabela
				// GUIA_PAGAMENTO_PRESTACAO para a guia de entrada),
				FiltroGuiaPagamento filtro = new FiltroGuiaPagamento();
				filtro.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, parcelamento.getId()));

				Collection<GuiaPagamento> colecaoGuias = Fachada.getInstancia().pesquisar(filtro, GuiaPagamento.class.getName());

				if(!Util.isVazioOrNulo(colecaoGuias)){

					for(GuiaPagamento guiaPagamento : colecaoGuias){

						if(guiaPagamento.getDebitoCreditoSituacaoAtual() != null
										&& guiaPagamento.getDebitoCreditoSituacaoAtual().getId()
														.equals(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO)){

							FiltroGuiaPagamentoPrestacao filtroPrestacao = new FiltroGuiaPagamentoPrestacao();
							filtroPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
											guiaPagamento.getId()));

							Collection<GuiaPagamentoPrestacao> colecaoGuiaPretacao = Fachada.getInstancia().pesquisar(filtroPrestacao,
											GuiaPagamentoPrestacao.class.getName());

							if(!Util.isVazioOrNulo(colecaoGuiaPretacao)){
								for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoGuiaPretacao){
									if(guiaPagamentoPrestacao.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
										cobrancaAdministrativa = true;
										break;
									}
								}
							}
							if(cobrancaAdministrativa){
								break;
							}
						}
					}
				}
			}
		}

		if(!cobrancaAdministrativa){
			Integer idCobrancaForma = parcelamento.getCobrancaForma().getId();

			// OU algum dos débitos a cobrar para a cobrança do parcelamento foi marcado como
			// remunerável (DBAC_ICREMUNERACOBRANCAADM com o valor 1 (sim) na tabela
			// DEBITO_A_COBRAR), caso o campo "Cobrança do Parcelamento" esteja com a opção
			// DebitoACobrar selecionada,
			if(idCobrancaForma.equals(CobrancaForma.COBRANCA_EM_CONTA)){
				Collection<DebitoACobrar> colecaoDebitoACobrarItem = Fachada.getInstancia().pesquisarItensDebitosACobrarPorParcelamento(
								parcelamento.getId());

				if(!Util.isVazioOrNulo(colecaoDebitoACobrarItem)){

					// Débitos a cobrar de Cobrança Administrativa
					for(DebitoACobrar debitoACobrarItem : colecaoDebitoACobrarItem){
						if(debitoACobrarItem.getIndicadorRemuneraCobrancaAdministrativa().equals(ConstantesSistema.SIM)){

							cobrancaAdministrativa = true;
							break;
						}
					}
				}

			}else{

				// OU alguma das prestações da guia para a cobrança do parcelamento
				// foi marcada como remunerável (GPPR_ICREMUNERACOBRANCAADM com o
				// valor 1 (sim) na tabela GUIA_PAGAMENTO_PRESTACAO), caso o campo
				// "Cobrança do Parcelamento" esteja com a opção "Guia de Pagamento"
				// selecionada
				FiltroGuiaPagamento filtro = new FiltroGuiaPagamento();
				filtro.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, parcelamento.getId()));

				Collection<GuiaPagamento> colecaoGuias = Fachada.getInstancia().pesquisar(filtro, GuiaPagamento.class.getName());

				if(!Util.isVazioOrNulo(colecaoGuias)){

					for(GuiaPagamento guiaPagamento : colecaoGuias){

						FiltroGuiaPagamentoPrestacao filtroPrestacao = new FiltroGuiaPagamentoPrestacao();
						filtroPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
										guiaPagamento.getId()));

						Collection<GuiaPagamentoPrestacao> colecaoGuiaPretacao = Fachada.getInstancia().pesquisar(filtroPrestacao,
										GuiaPagamentoPrestacao.class.getName());

						// 1.2.1. Caso existam, na lista de guias de pagamento do parcelamento
						if(!Util.isVazioOrNulo(colecaoGuiaPretacao)){
							for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoGuiaPretacao){
								if(guiaPagamentoPrestacao.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
									cobrancaAdministrativa = true;
									break;
								}
							}
						}
						if(cobrancaAdministrativa){
							break;
						}
					}
				}
			}
		}

		return cobrancaAdministrativa;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0044] Retirar Débitos Não Vencidos
	 * 
	 * @author Saulo Lima
	 * @date 09/09/2013
	 * @param colecaoContasImovel
	 * @return Collection<ContaValoresHelper>
	 * @throws ControladorException
	 */
	public Collection<ContaValoresHelper> retirarContasNaoVencidas(Collection<ContaValoresHelper> colecaoContasImovel)
					throws ControladorException{

		Collection<ContaValoresHelper> novaColecao = new ArrayList<ContaValoresHelper>();

		String parcelarDebitosNaoVencidos = ParametroCobranca.P_PARCELAR_DEBITOS_NAO_VENCIDOS.executar();

		// Caso esteja indicado para não considerar débitos não vencidos no parcelamento
		if(parcelarDebitosNaoVencidos.equals(ConstantesSistema.NAO.toString())){

			for(ContaValoresHelper contaValoresHelper : colecaoContasImovel){

				Date dataVencimento = contaValoresHelper.getConta().getDataVencimentoConta();
				Date dataAtual = Calendar.getInstance().getTime();

				// retirar da lista de débitos os não vencidos, ou seja, data de vencimento >= data
				// corrente
				if(Util.compararData(dataVencimento, dataAtual) <= 0){

					// caso seja menor, permanece na lista
					novaColecao.add(contaValoresHelper);
				}
			}

		}else{
			novaColecao.addAll(colecaoContasImovel);
		}

		return novaColecao;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Retirar da listagem Contas com Motivo de Revisão com Impedimento de Parcelamento
	 * 
	 * @author Saulo Lima
	 * @date 09/09/2013
	 * @param colecaoContasImovel
	 * @param usuario
	 * @return Collection<ContaValoresHelper>
	 * @throws ControladorException
	 */
	public Collection<ContaValoresHelper> retirarContasMotivoRevisaoComImpedimentoParcelamento(
					Collection<ContaValoresHelper> colecaoContasImovel, Usuario usuario) throws ControladorException{

		Collection<ContaValoresHelper> novaColecao = new ArrayList<ContaValoresHelper>();

		boolean temPermissaoEspecial = this.getControladorPermissaoEspecial().verificarPermissaoEspecial(
						PermissaoEspecial.PARCELAR_CONTAS_EM_REVISAO_COM_IMPEDIMENTO, usuario);

		/*
		 * Caso o indicador de conta em revisão seja "SIM" e o usuário não possuir permissão
		 * especial "PARCELAR CONTAS EM REVISAO COM IMPEDIMENTO", as contas com motivo de revisão
		 * que inibe parcelamento deverão ser desprezadas.
		 */
		if(!temPermissaoEspecial){

			for(ContaValoresHelper contaValoresHelper : colecaoContasImovel){

				// this.getControladorFaturamento().pesquisarContaPeloID(contaValoresHelper.getConta().getId());

				FiltroConta filtroConta = new FiltroConta();
				filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaValoresHelper.getConta().getId()));
				filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.CONTA_MOTIVO_REVISAO);

				Collection<Conta> colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
				Conta conta = (Conta) Util.retonarObjetoDeColecao(colecaoConta);

				Short indicadorImpedimento = Short.valueOf("0");
				if(conta != null && conta.getContaMotivoRevisao() != null){
					indicadorImpedimento = conta.getContaMotivoRevisao().getIndicadorInibeParcelamento();
				}

				if(!indicadorImpedimento.equals(ConstantesSistema.SIM)){

					// caso seja diferente, permanece na lista
					novaColecao.add(contaValoresHelper);
				}
			}

		}else{
			novaColecao.addAll(colecaoContasImovel);
		}

		return novaColecao;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#selecionarItensRemureraveis(gcom.cadastro.imovel.
	 * ImovelCobrancaSituacao)
	 */
	public List<ItensRemuradosHelper> selecionarItensRemureraveis(ImovelCobrancaSituacao imovelCobrancaSituacao)
					throws ControladorException{

		List<ItensRemuradosHelper> listaItensRemuneradosHelper = new ArrayList<ItensRemuradosHelper>();

		try{
			// 1.2. Trata os Itens remuneráveis com remuneração realizada.
			listarItensRemuneraveisComRemuneracaoRealizada(imovelCobrancaSituacao.getId(), listaItensRemuneradosHelper);

			// 1.3. Trata os Itens remuneráveis com remuneração não realizada.
			// 1.3.1. Caso a situação atual da cobrança administrativa seja Pendente
			if(Util.isVazioOuBranco(imovelCobrancaSituacao.getDataRetiradaCobranca())
							|| (Util.isNaoNuloBrancoZero(imovelCobrancaSituacao.getDataRetiradaCobranca()) && !repositorioCobranca
											.verificarOcorrenciaCobrancaAdministrativaPosterior(imovelCobrancaSituacao.getId(),
															imovelCobrancaSituacao.getImovel().getId()))){
				// 1.3.1.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
				selecionarContasRemuneraveis(imovelCobrancaSituacao, listaItensRemuneradosHelper, true);

				// 1.3.1.4. Seleciona os Débitos Cobrados Remuneráveis Com Vencimento a partir da
				// Entrada do Imóvel na Cobrança Administrativa
				selecionarDebitosCobradosRemuneraveis(imovelCobrancaSituacao, listaItensRemuneradosHelper, true);

				// 1.3.1.6. Seleciona as Guias Remuneráveis Marcadas na Cobrança Administrativa
				selecionarGuiasPagamentoRemuneraveis(imovelCobrancaSituacao, listaItensRemuneradosHelper, true);

				// 1.3.1.9. Seleciona os Débitos A Cobrar Remuneráveis Com Referência a partir da
				// Entrada do Imóvel na Cobrança Administrativa.
				selecionarDebitosACobrarRemuneraveis(imovelCobrancaSituacao, listaItensRemuneradosHelper, true);
			}

			// 1.3.2. Caso a situação atual da cobrança administrativa seja Encerrada
			// if(Util.isNaoNuloBrancoZero(imovelCobrancaSituacao.getDataRetiradaCobranca())
			// &&
			// repositorioCobranca.verificarOcorrenciaCobrancaAdministrativaPosterior(imovelCobrancaSituacao.getId(),
			// imovelCobrancaSituacao.getImovel().getId())){
			// // 1.3.2.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
			// // 1.3.2.2. Seleciona as Contas Remuneráveis Com Vencimento no Período do Imóvel na
			// // Cobrança Administrativa.
			// selecionarContasRemuneraveis(imovelCobrancaSituacao, listaItensRemuneradosHelper,
			// false);
			//
			// // 1.3.2.4. Seleciona os Débitos Cobrados Remuneráveis Com Vencimento no Período do
			// // Imóvel na Cobrança Administrativa.
			// selecionarDebitosCobradosRemuneraveis(imovelCobrancaSituacao,
			// listaItensRemuneradosHelper, false);
			//
			// // 1.3.1.6. Seleciona as Guias Remuneráveis Marcadas na Cobrança Administrativa.
			// // 1.3.1.7. Seleciona as Guias Remuneráveis Com Vencimento a partir da Entrada do
			// // Imóvel na Cobrança Administrativa.
			// selecionarGuiasPagamentoRemuneraveis(imovelCobrancaSituacao,
			// listaItensRemuneradosHelper, false);
			//
			// // 1.3.2.9. Seleciona os Débitos A Cobrar Remuneráveis Com Referência no Período do
			// // Imóvel na Cobrança Administrativa.
			// selecionarDebitosACobrarRemuneraveis(imovelCobrancaSituacao,
			// listaItensRemuneradosHelper, false);
			// }

		}catch(ControladorException e){
			throw new ControladorException("erro.sistema", e);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return listaItensRemuneradosHelper;
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 1.2. Trata os Itens remuneráveis com remuneração realizada.
	 * 
	 * @param idImovelCobrancaSituacao
	 * @param listaItensRemuneradosHelper
	 * @throws ControladorException
	 */
	private void listarItensRemuneraveisComRemuneracaoRealizada(Integer idImovelCobrancaSituacao,
					List<ItensRemuradosHelper> listaItensRemuneradosHelper) throws ControladorException{

		FiltroImovelCobrancaAdministrivaItem filtroImovelCobrancaAdministrivaItem = new FiltroImovelCobrancaAdministrivaItem();
		filtroImovelCobrancaAdministrivaItem.adicionarParametro(new ParametroSimples(
						FiltroImovelCobrancaAdministrivaItem.IMOVEL_COBRANCA_SITUACAO_ID, idImovelCobrancaSituacao));
		filtroImovelCobrancaAdministrivaItem.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelCobrancaAdministrivaItem.DOCUMENTO_TIPO);
		filtroImovelCobrancaAdministrivaItem.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelCobrancaAdministrivaItem.CONTA_GERAL);
		filtroImovelCobrancaAdministrivaItem
						.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelCobrancaAdministrivaItem.GUIA_PAGAMENTO_GERAL);
		filtroImovelCobrancaAdministrivaItem
						.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelCobrancaAdministrivaItem.DEBITO_A_COBRAR_GERAL);
		filtroImovelCobrancaAdministrivaItem.setCampoOrderBy(FiltroImovelCobrancaAdministrivaItem.DOCUMENTO_TIPO_ID);

		Collection colecaoImovelCobrancaAdministrivaItem;

		colecaoImovelCobrancaAdministrivaItem = getControladorUtil().pesquisar(filtroImovelCobrancaAdministrivaItem,
						ImovelCobrancaAdministrivaItem.class.getName());

		// [SB0005 - Carrega Lista Itens Remuneráveis  Itens Remunerados].
		if(Util.isNaoNuloBrancoZero(colecaoImovelCobrancaAdministrivaItem)){

			ImovelCobrancaAdministrivaItem imovelCobrancaAdministrivaItem = null;
			ItensRemuradosHelper itensRemuradosHelper = null;

			for(Object object : colecaoImovelCobrancaAdministrivaItem){
				imovelCobrancaAdministrivaItem = (ImovelCobrancaAdministrivaItem) object;

				itensRemuradosHelper = new ItensRemuradosHelper();
				itensRemuradosHelper.setIndicadorRemuneracaoRealizada(ConstantesSistema.SIM);
				itensRemuradosHelper.setIdDocumentoTipo(imovelCobrancaAdministrivaItem.getDocumentoTipo().getId());
				itensRemuradosHelper.setContaGeral(imovelCobrancaAdministrivaItem.getContaGeral());
				itensRemuradosHelper.setGuiaPagamentoGeral(imovelCobrancaAdministrivaItem.getGuiaPagamentoGeral());
				itensRemuradosHelper.setDebitoACobrarGeral(imovelCobrancaAdministrivaItem.getDebitoACobrarGeral());
				itensRemuradosHelper.setNumeroPrestacaoImovelCobrancaAdmItem(imovelCobrancaAdministrivaItem.getNumeroPrestacao());
				itensRemuradosHelper.setValorBaseRemuneracao(imovelCobrancaAdministrivaItem.getValorBaseRemuneracao());
				itensRemuradosHelper.setValorBaseRemuneracaoParcelado(imovelCobrancaAdministrivaItem.getValorBaseRemuneracaoParcelado());
				itensRemuradosHelper
								.setValorBaseRemuneracaoReincidente(imovelCobrancaAdministrivaItem.getValorBaseRemuneracaoReincidente());
				itensRemuradosHelper.setValorBaseRemuneracaoEspecial(imovelCobrancaAdministrivaItem.getValorBaseRemuneracaoEspecial());
				itensRemuradosHelper.setValorRemuneracao(imovelCobrancaAdministrivaItem.getValorRemuneracao());
				itensRemuradosHelper.setValorRemuneracaoParcelado(imovelCobrancaAdministrivaItem.getValorRemuneracaoParcelado());
				itensRemuradosHelper.setValorRemuneracaoReincidente(imovelCobrancaAdministrivaItem.getValorRemuneracaoReincidente());
				itensRemuradosHelper.setValorRemuneracaoEspecial(imovelCobrancaAdministrivaItem.getValorRemuneracaoEspecial());

				listaItensRemuneradosHelper.add(itensRemuradosHelper);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 1.3.1.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
	 * 1.3.1.2. Seleciona as Contas Remuneráveis Com Vencimento a partir da Entrada do Imóvel na
	 * Cobrança Administrativa.
	 * 1.3.2.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
	 * 1.3.2.2. Seleciona as Contas Remuneráveis Com Vencimento no Período do Imóvel na Cobrança
	 * Administrativa.
	 * [SB0006  Carrega Lista Itens Remuneráveis  Conta].
	 * 
	 * @param imovelCobrancaSituacao
	 * @param listaItensRemuneradosHelper
	 * @throws ErroRepositorioException
	 */
	private void selecionarContasRemuneraveis(ImovelCobrancaSituacao imovelCobrancaSituacao,
					List<ItensRemuradosHelper> listaItensRemuneradosHelper, boolean vencimentoAPartirEntrada)
					throws ErroRepositorioException{

		List<Conta> listaContaRemunerada;
		List<Conta> listaContaRemuneraveisMarcadas;
		List<Conta> listaContaRemuneraveisComVencimento;
		listaContaRemunerada = new ArrayList<Conta>();

		// 1.3.1.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
		listaContaRemuneraveisMarcadas = repositorioCobranca.selecionarContasRemuneraveisMarcadasNaCobrancaAdministrativa(
						imovelCobrancaSituacao.getImovel().getId(), imovelCobrancaSituacao.getCobrancaAcaoAtividadeComando().getId());

		if(Util.isNaoNuloBrancoZero(listaContaRemuneraveisMarcadas)){
			listaContaRemunerada.addAll(listaContaRemuneraveisMarcadas);
		}

		// 1.3.1.2. Seleciona as Contas Remuneráveis Com Vencimento a partir da Entrada do
		// Imóvel na Cobrança Administrativa
		if(vencimentoAPartirEntrada){
			listaContaRemuneraveisComVencimento = repositorioCobranca
							.selecionarContasRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
											imovelCobrancaSituacao.getDataImplantacaoCobranca(),
											imovelCobrancaSituacao.getImovel().getId(), null);
		}else{
			listaContaRemuneraveisComVencimento = repositorioCobranca
							.selecionarContasRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
											imovelCobrancaSituacao.getDataImplantacaoCobranca(),
											imovelCobrancaSituacao.getImovel().getId(), imovelCobrancaSituacao.getDataRetiradaCobranca());
		}

		if(Util.isNaoNuloBrancoZero(listaContaRemuneraveisComVencimento)){
			listaContaRemunerada.addAll(listaContaRemuneraveisComVencimento);
		}

		// [SB0006  Carrega Lista Itens Remuneráveis  Conta].
		if(Util.isNaoNuloBrancoZero(listaContaRemunerada)){

			ItensRemuradosHelper itensRemuradosHelper = null;

			for(Conta conta : listaContaRemunerada){

				itensRemuradosHelper = new ItensRemuradosHelper();
				itensRemuradosHelper.setIndicadorRemuneracaoRealizada(ConstantesSistema.NAO);
				itensRemuradosHelper.setIdDocumentoTipo(DocumentoTipo.CONTA);
				itensRemuradosHelper.setIdentificacaoItem(conta.getId().toString());
				itensRemuradosHelper.setValorDaBaseRemuneracao(conta.getValorTotal());
				itensRemuradosHelper.setValorDaRemuneracao(BigDecimal.ZERO);

				listaItensRemuneradosHelper.add(itensRemuradosHelper);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 1.3.1.4. Seleciona os Débitos Cobrados Remuneráveis Com Vencimento a partir da Entrada do
	 * Imóvel na Cobrança Administrativa.
	 * 1.3.2.4. Seleciona os Débitos Cobrados Remuneráveis Com Vencimento no Período do Imóvel na
	 * Cobrança Administrativa.
	 * 
	 * @param imovelCobrancaSituacao
	 * @param listaItensRemuneradosHelper
	 * @throws ErroRepositorioException
	 */
	private void selecionarDebitosCobradosRemuneraveis(ImovelCobrancaSituacao imovelCobrancaSituacao,
					List<ItensRemuradosHelper> listaItensRemuneradosHelper, boolean vencimentoAPartirEntrada)
					throws ErroRepositorioException{

		List<DebitoCobrado> listaDebitoCobradoRemuneraveis = null;
		if(vencimentoAPartirEntrada){
			listaDebitoCobradoRemuneraveis = repositorioCobranca
							.selecionarDebitosCobradosRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
											imovelCobrancaSituacao.getDataImplantacaoCobranca(),
											imovelCobrancaSituacao.getImovel().getId(), null);
		}
		// else{
		// listaDebitoCobradoRemuneraveis = repositorioCobranca
		// .selecionarDebitosCobradosRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
		// imovelCobrancaSituacao.getDataImplantacaoCobranca(),
		// imovelCobrancaSituacao.getImovel().getId(),
		// imovelCobrancaSituacao.getDataRetiradaCobranca());
		// }

		// [SB0007  Carrega Lista Itens Remuneráveis  Débitos Cobrados].
		if(Util.isNaoNuloBrancoZero(listaDebitoCobradoRemuneraveis)){

			ItensRemuradosHelper itensRemuradosHelper = null;

			for(DebitoCobrado debitoCobrado : listaDebitoCobradoRemuneraveis){

				itensRemuradosHelper = new ItensRemuradosHelper();
				itensRemuradosHelper.setIndicadorRemuneracaoRealizada(ConstantesSistema.NAO);
				itensRemuradosHelper.setIdDocumentoTipo(DocumentoTipo.CONTA);
				itensRemuradosHelper.setIdentificacaoItem(debitoCobrado.getConta().getId().toString());
				itensRemuradosHelper.setValorDaBaseRemuneracao(debitoCobrado.getValorPrestacao());
				itensRemuradosHelper.setValorDaRemuneracao(BigDecimal.ZERO);

				listaItensRemuneradosHelper.add(itensRemuradosHelper);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 1.3.1.6. Seleciona as Guias Remuneráveis Marcadas na Cobrança.
	 * 1.3.1.7. Seleciona as Guias Remuneráveis Com Vencimento a partir da Entrada do Imóvel na
	 * Cobrança Administrativa.
	 * 
	 * @param imovelCobrancaSituacao
	 * @param listaItensRemuneradosHelper
	 * @throws ErroRepositorioException
	 */
	private void selecionarGuiasPagamentoRemuneraveis(ImovelCobrancaSituacao imovelCobrancaSituacao,
					List<ItensRemuradosHelper> listaItensRemuneradosHelper, boolean vencimentoAPartirEntrada)
					throws ErroRepositorioException{

		List<GuiaPagamentoPrestacao> listaGuiaPagamentoPrestacaoRemunerada;
		List<GuiaPagamentoPrestacao> listaGuiaPagamentoPrestacaoRemuneraveisMarcadas;
		List<GuiaPagamentoPrestacao> listaGuiaPagamentoPrestacaoRemuneraveisComVencimento;
		listaGuiaPagamentoPrestacaoRemunerada = new ArrayList<GuiaPagamentoPrestacao>();

		// 1.3.1.1. Seleciona as Contas Remuneráveis Marcadas na Cobrança Administrativa.
		listaGuiaPagamentoPrestacaoRemuneraveisMarcadas = repositorioCobranca
						.selecionarGuiasPagamentoRemuneraveisMarcadaNaCobrancaAdministrativa(imovelCobrancaSituacao
										.getCobrancaAcaoAtividadeComando().getId(), imovelCobrancaSituacao.getImovel().getId());

		if(Util.isNaoNuloBrancoZero(listaGuiaPagamentoPrestacaoRemuneraveisMarcadas)){
			listaGuiaPagamentoPrestacaoRemunerada.addAll(listaGuiaPagamentoPrestacaoRemuneraveisMarcadas);
		}

		// 1.3.1.2. Seleciona as Contas Remuneráveis Com Vencimento a partir da Entrada do
		// Imóvel na Cobrança Administrativa
		if(vencimentoAPartirEntrada){
			listaGuiaPagamentoPrestacaoRemuneraveisComVencimento = repositorioCobranca
							.selecionarGuiasPagamentoRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
											imovelCobrancaSituacao.getDataImplantacaoCobranca(),
											imovelCobrancaSituacao.getImovel().getId(), null);
		}else{
			listaGuiaPagamentoPrestacaoRemuneraveisComVencimento = repositorioCobranca
							.selecionarGuiasPagamentoRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
											imovelCobrancaSituacao.getDataImplantacaoCobranca(),
											imovelCobrancaSituacao.getImovel().getId(), imovelCobrancaSituacao.getDataRetiradaCobranca());
		}

		if(Util.isNaoNuloBrancoZero(listaGuiaPagamentoPrestacaoRemuneraveisComVencimento)){
			listaGuiaPagamentoPrestacaoRemunerada.addAll(listaGuiaPagamentoPrestacaoRemuneraveisComVencimento);
		}

		// [SB0006  Carrega Lista Itens Remuneráveis  Conta].
		if(Util.isNaoNuloBrancoZero(listaGuiaPagamentoPrestacaoRemunerada)){

			ItensRemuradosHelper itensRemuradosHelper = null;

			for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : listaGuiaPagamentoPrestacaoRemunerada){

				itensRemuradosHelper = new ItensRemuradosHelper();
				itensRemuradosHelper.setIndicadorRemuneracaoRealizada(ConstantesSistema.NAO);
				itensRemuradosHelper.setIdDocumentoTipo(DocumentoTipo.GUIA_PAGAMENTO);
				itensRemuradosHelper.setIdGuiaPagamento(guiaPagamentoPrestacao.getGuiaPagamento().getId());
				itensRemuradosHelper.setNumeroPrestacaoImovelCobrancaAdmItem(guiaPagamentoPrestacao.getNumeroPrestacao().intValue());
				itensRemuradosHelper.setIdentificacaoItem(guiaPagamentoPrestacao.getGuiaPagamento().getId() + "/"
								+ guiaPagamentoPrestacao.getNumeroPrestacao());
				itensRemuradosHelper.setValorDaBaseRemuneracao(guiaPagamentoPrestacao.getValorPrestacao());
				itensRemuradosHelper.setValorDaRemuneracao(BigDecimal.ZERO);

				listaItensRemuneradosHelper.add(itensRemuradosHelper);

			}
		}
	}

	private void selecionarDebitosACobrarRemuneraveis(ImovelCobrancaSituacao imovelCobrancaSituacao,
					List<ItensRemuradosHelper> listaItensRemuneradosHelper, boolean vencimentoAPartirEntrada)
					throws ErroRepositorioException{

		BigDecimal valorRestanteASerCobrado;
		List<DebitoACobrar> listaDebitoACobrarRemuneraveis;
		if(vencimentoAPartirEntrada){
			listaDebitoACobrarRemuneraveis = repositorioCobranca
							.selecionarDebitoACobrarRemuneraveisComReferenciaAPartirEntradaImovelNaCobrancaAdministrativa(Util
											.formataAnoMes(imovelCobrancaSituacao.getDataImplantacaoCobranca()), imovelCobrancaSituacao
											.getImovel().getId(), null);
		}else{
			listaDebitoACobrarRemuneraveis = repositorioCobranca
							.selecionarDebitoACobrarRemuneraveisComReferenciaAPartirEntradaImovelNaCobrancaAdministrativa(Util
											.formataAnoMes(imovelCobrancaSituacao.getDataImplantacaoCobranca()), imovelCobrancaSituacao
											.getImovel().getId(), Util.formataAnoMes(imovelCobrancaSituacao.getDataRetiradaCobranca()));
		}

		// [SB0009] - Carrega Lista Itens Remuneráveis  Débitos A Cobrar.
		if(Util.isNaoNuloBrancoZero(listaDebitoACobrarRemuneraveis)){

			ItensRemuradosHelper itensRemuradosHelper = null;

			for(DebitoACobrar debitoACobrar : listaDebitoACobrarRemuneraveis){

				valorRestanteASerCobrado = BigDecimal.ZERO;
				itensRemuradosHelper = new ItensRemuradosHelper();
				itensRemuradosHelper.setIndicadorRemuneracaoRealizada(ConstantesSistema.NAO);
				itensRemuradosHelper.setIdDocumentoTipo(DocumentoTipo.DEBITO_A_COBRAR);
				itensRemuradosHelper.setIdentificacaoItem(debitoACobrar.getId().toString());

				valorRestanteASerCobrado = debitoACobrar.getValorDebito().subtract(
								(debitoACobrar.getValorDebito().divide(new BigDecimal(debitoACobrar.getNumeroPrestacaoDebito()),
												Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)).multiply(new BigDecimal(
												debitoACobrar.getNumeroPrestacaoCobradas())));

				itensRemuradosHelper.setValorDaBaseRemuneracao(valorRestanteASerCobrado);
				itensRemuradosHelper.setValorDaRemuneracao(BigDecimal.ZERO);

				listaItensRemuneradosHelper.add(itensRemuradosHelper);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#obterDadosDaConta(java.util.List)
	 */
	public List<CobrancaAdministrativaHelper> obterDadosDaConta(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws ControladorException{

		List<CobrancaAdministrativaHelper> listaCobrancaAdministrativaContaHelper = new ArrayList<CobrancaAdministrativaHelper>();
		// ContaGeral contaGeral;
		Conta conta;
		ContaHistorico contaHistorico;
		Integer referenciaConta;
		Date dataVencimentoConta;
		Short indicadorCobrancaAdministrativa;
		Short indicadorRemuneraCobrancaAdministrativa;
		BigDecimal valorTotalConta;
		BigDecimal valorDebito;
		Integer clienteUsuario;
		String situacaoItem;
		Date dataSituacao;
		Date dataParcelamento;
		CobrancaAdministrativaHelper helper;
		DebitoCobrado debitoCobrado = null;
		DebitoCobradoHistorico debitoCobradoHistorico = null;
		BigDecimal totalValorPresntacao = null;
		PagamentoHistorico pagamentoHistorico;
		Integer idDebitoCreditoSituacaoAtual;
		Integer idContaMotivoRevisao;
		Integer idContaMotivoCancelamento;
		Date dataCancelamentoConta;
		String nomeClienteUsuario;
		BigDecimal valorAgua;
		BigDecimal valorEsgoto;
		BigDecimal valorDebitos;
		BigDecimal valorCreditos;
		BigDecimal valorImpostos;

		if(Util.isNaoNuloBrancoZero(listaItensRemuradosHelper)){

			// [SB0010] - Obter Dados Conta
			for(ItensRemuradosHelper itensRemuradosHelper : listaItensRemuradosHelper){

				helper = new CobrancaAdministrativaHelper();
				totalValorPresntacao = BigDecimal.ZERO;
				indicadorCobrancaAdministrativa = new Short("0");
				indicadorRemuneraCobrancaAdministrativa = new Short("0");
				valorTotalConta = BigDecimal.ZERO;
				referenciaConta = null;
				dataVencimentoConta = null;
				idDebitoCreditoSituacaoAtual = null;
				idContaMotivoRevisao = null;
				idContaMotivoCancelamento = null;
				dataSituacao = null;
				dataParcelamento = null;
				dataCancelamentoConta = null;
				conta = null;
				contaHistorico = null;
				clienteUsuario = null;
				nomeClienteUsuario = "";
				valorAgua = BigDecimal.ZERO;
				valorEsgoto = BigDecimal.ZERO;
				valorDebitos = BigDecimal.ZERO;
				valorCreditos = BigDecimal.ZERO;
				valorImpostos = BigDecimal.ZERO;

				if(itensRemuradosHelper.getIdDocumentoTipo().equals(DocumentoTipo.CONTA)){

					// FiltroContaGeral filtroContaGeral = new FiltroContaGeral();
					// filtroContaGeral.adicionarParametro(new ParametroSimples(FiltroContaGeral.ID,
					// itensRemuradosHelper
					// .getIdentificacaoItem()));
					// Collection colecaoContaGeral =
					// getControladorUtil().pesquisar(filtroContaGeral, Conta.class.getName());

					// if(Util.isNaoNuloBrancoZero(itensRemuradosHelper.isContaHistorico())){

					// Object objConta = (Object) Util.retonarObjetoDeColecao(colecaoContaGeral);

					// if(objConta instanceof Conta){
					if(itensRemuradosHelper.isContaHistorico()){
						// contaHistorico = (ContaHistorico) objConta;
						FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
						filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, itensRemuradosHelper
										.getIdentificacaoItem()));
						filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.DEBITO_CREDITO_SITUACAO_ATUAL);
						filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.CONTA_MOTIVO_REVISAO);
						filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.CONTA_MOTIVO_CANCELAMENTO);
						filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.PARCELAMENTO);
						Collection colecaoContaHistorico = getControladorUtil().pesquisar(filtroContaHistorico,
										ContaHistorico.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoContaHistorico)){

							contaHistorico = (ContaHistorico) Util.retonarObjetoDeColecao(colecaoContaHistorico);

							referenciaConta = contaHistorico.getAnoMesReferenciaConta();
							dataVencimentoConta = contaHistorico.getDataVencimentoConta();
							indicadorCobrancaAdministrativa = contaHistorico.getIndicadorCobrancaAdministrativa();
							indicadorRemuneraCobrancaAdministrativa = contaHistorico.getIndicadorRemuneraCobrancaAdministrativa();
							valorTotalConta = contaHistorico.getValorTotal();
							valorAgua = contaHistorico.getValorAgua();
							valorEsgoto = contaHistorico.getValorEsgoto();
							valorDebitos = contaHistorico.getValorDebitos();
							valorCreditos = contaHistorico.getValorCreditos();
							valorImpostos = contaHistorico.getValorImposto();
							idDebitoCreditoSituacaoAtual = contaHistorico.getDebitoCreditoSituacaoAtual().getId();
							if(Util.isNaoNuloBrancoZero(contaHistorico.getContaMotivoRevisao())){
								idContaMotivoRevisao = contaHistorico.getContaMotivoRevisao().getId();
							}
							if(Util.isNaoNuloBrancoZero(contaHistorico.getContaMotivoCancelamento())){
								idContaMotivoCancelamento = contaHistorico.getContaMotivoCancelamento().getId();
							}
							if(Util.isNaoNuloBrancoZero(contaHistorico.getParcelamento())){
								dataParcelamento = contaHistorico.getParcelamento().getParcelamento();
							}
							dataCancelamentoConta = contaHistorico.getDataCancelamento();
						}
					}else{
						// conta = itensRemuradosHelper.getIdentificacaoItem();
							// if(contaGeral.getIndicadorHistorico() == ConstantesSistema.NAO){
							FiltroConta filtroConta = new FiltroConta();
							filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, itensRemuradosHelper.getIdentificacaoItem()));
							filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.CONTA_MOTIVO_REVISAO);
							filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.PARCELAMENTO);
							Collection colecaoConta = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

							if(Util.isNaoNuloBrancoZero(colecaoConta)){

								conta = (Conta) Util.retonarObjetoDeColecao(colecaoConta);


								referenciaConta = conta.getReferencia();
								dataVencimentoConta = conta.getDataVencimentoConta();
								indicadorCobrancaAdministrativa = conta.getIndicadorCobrancaAdministrativa();
								indicadorRemuneraCobrancaAdministrativa = conta.getIndicadorRemuneraCobrancaAdministrativa();
								valorTotalConta = conta.getValorTotal();
							valorAgua = conta.getValorAgua();
							valorEsgoto = conta.getValorEsgoto();
							valorDebitos = conta.getDebitos();
							valorCreditos = conta.getValorCreditos();
							valorImpostos = conta.getValorImposto();
								if(Util.isNaoNuloBrancoZero(conta.getContaMotivoRevisao())){
									idContaMotivoRevisao = conta.getContaMotivoRevisao().getId();
								}
								if(Util.isNaoNuloBrancoZero(conta.getParcelamento())){
									dataParcelamento = conta.getParcelamento().getParcelamento();
								}
							}
						}

						// 1.1. Referência da Conta
						helper.setReferenciaConta(referenciaConta);

						// 1.2. Data de Vencimento da Conta
						helper.setDataVencimentoConta(dataVencimentoConta);

						// 1.3. Valor do Débito
						if(indicadorCobrancaAdministrativa.equals(ConstantesSistema.SIM)
										|| indicadorRemuneraCobrancaAdministrativa.equals(ConstantesSistema.SIM)){
							helper.setValorDebito(valorTotalConta);
						}else{
							if(Util.isNaoNuloBrancoZero(conta)){
								FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
							filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID, itensRemuradosHelper
											.getIdentificacaoItem()));
								filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
												FiltroDebitoCobrado.INDICADOR_REMUNERA_COBRANCA_ADM, ConstantesSistema.SIM));

								Collection colecaoDebitoCobrado = getControladorUtil().pesquisar(filtroDebitoCobrado,
												DebitoCobrado.class.getName());

								if(Util.isNaoNuloBrancoZero(colecaoDebitoCobrado)){
									for(Object object : colecaoDebitoCobrado){
										debitoCobrado = (DebitoCobrado) object;
										totalValorPresntacao = totalValorPresntacao.add(debitoCobrado.getValorPrestacao());
									}
								}
								helper.setValorDebito(totalValorPresntacao);
							}else{
								FiltroDebitoCobradoHistorico filtroDebitoCobradoHistorico = new FiltroDebitoCobradoHistorico();
								filtroDebitoCobradoHistorico.adicionarParametro(new ParametroSimples(
											FiltroDebitoCobradoHistorico.CONTA_HISTORICO_ID, itensRemuradosHelper.getIdentificacaoItem()));
								filtroDebitoCobradoHistorico.adicionarParametro(new ParametroSimples(
												FiltroDebitoCobradoHistorico.INDICADOR_REMUNERA_COBRANCA_ADMINISTRATIVA,
												ConstantesSistema.SIM));

								Collection colecaoDebitoCobradoHistorico = getControladorUtil().pesquisar(filtroDebitoCobradoHistorico,
												DebitoCobradoHistorico.class.getName());

								if(Util.isNaoNuloBrancoZero(colecaoDebitoCobradoHistorico)){
									for(Object object : colecaoDebitoCobradoHistorico){
										debitoCobradoHistorico = (DebitoCobradoHistorico) object;
										totalValorPresntacao = totalValorPresntacao.add(debitoCobradoHistorico.getValorPrestacao());
									}
								}
								helper.setValorDebito(totalValorPresntacao);
							}
						}

					// Exibir valor da água, esgoto, débitos, créditos, impostos.
					helper.setValorAgua(valorAgua);
					helper.setValorEsgoto(valorEsgoto);
					helper.setValorDebitos(valorDebitos);
					helper.setValorCreditos(valorCreditos);
					helper.setValorImpostos(valorImpostos);

						// 1.4. Cliente Usuário
					try{
						Object[] objCliente = repositorioCobranca.pesquisarClienteUsuarioPorContaOuContaHistorico(Integer
										.parseInt(itensRemuradosHelper.getIdentificacaoItem()));
						helper.setClienteUsuario((Integer) objCliente[0]);
						helper.setNomeClienteUsuario((String) objCliente[1]);
					}catch(NumberFormatException e){
						throw new ControladorException("erro.sistema", e);
					}catch(ErroRepositorioException e){
						throw new ControladorException("erro.sistema", e);
						}

						// 1.5. Situação do Item:
						FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.CONTA_ID,
										itensRemuradosHelper.getIdentificacaoItem()));

						Collection colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
										PagamentoHistorico.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoPagamentoHistorico)){
							pagamentoHistorico = (PagamentoHistorico) Util.retonarObjetoDeColecao(colecaoPagamentoHistorico);
							situacaoItem = "PAGA";
							dataSituacao = pagamentoHistorico.getDataPagamento();
						}else if(Util.isNaoNuloBrancoZero(idDebitoCreditoSituacaoAtual)
										&& idDebitoCreditoSituacaoAtual.equals(DebitoCreditoSituacao.PARCELADA)){
							situacaoItem = "PARCELADA";
							dataSituacao = dataParcelamento;
						}else if(Util.isNaoNuloBrancoZero(idContaMotivoRevisao)
										&& idContaMotivoRevisao.equals(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO)){
							situacaoItem = "ENTRADA PARCELAMENTO";
							dataSituacao = dataParcelamento;
						}else if(Util.isNaoNuloBrancoZero(idContaMotivoCancelamento)){
							situacaoItem = "CANCELADA";
							dataSituacao = dataCancelamentoConta;
						}else{
							situacaoItem = "PENDENTE";
							dataSituacao = dataVencimentoConta;
						}

						helper.setSituacaoItem(situacaoItem);

						// 1.6. Data da Situação:
						helper.setDataSituacao(dataSituacao);

						listaCobrancaAdministrativaContaHelper.add(helper);
					}
				}
			}
		// }

		// Ordenar pela referencia da conta
		Collections.sort(listaCobrancaAdministrativaContaHelper, new Comparator<CobrancaAdministrativaHelper>() {

			public int compare(CobrancaAdministrativaHelper atual, CobrancaAdministrativaHelper outra){

				int retorno = 0;
				retorno = atual.getReferenciaConta().compareTo(outra.getReferenciaConta());

				if(retorno == 0){
					retorno = atual.getDataVencimentoConta().compareTo(outra.getDataVencimentoConta());
				}

				return retorno;
			}
		});

		return listaCobrancaAdministrativaContaHelper;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#obterDadosDaGuiaPagamento(java.util.List)
	 */
	public List<CobrancaAdministrativaHelper> obterDadosDaGuiaPagamento(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws ControladorException{

		List<CobrancaAdministrativaHelper> listaCobrancaAdministrativaGuiaHelper = new ArrayList<CobrancaAdministrativaHelper>();
		CobrancaAdministrativaHelper helper;
		Object objGuiaPagamentoPrestacao;
		GuiaPagamentoPrestacao guiaPagamentoPrestacao;
		GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico;
		Integer idGuiaPamento;
		Short prestacao;
		Date dataEmissao;
		String tipoDebito;
		BigDecimal valorDebito;
		Integer clienteUsuario;
		String situacaoItem;
		Integer idSituacaoItem;
		Date dataSituacao;
		Date dataVencimento;
		Date dataUltimaAlteracao;
		Parcelamento parcelamento;

		if(!Util.isVazioOrNulo(listaItensRemuradosHelper)){
			for(ItensRemuradosHelper itensRemuradosHelper : listaItensRemuradosHelper){
				helper = new CobrancaAdministrativaHelper();
				idSituacaoItem = 0;
				dataVencimento = null;
				dataUltimaAlteracao = null;
				parcelamento = null;
				valorDebito = BigDecimal.ZERO;
				clienteUsuario = null;

				objGuiaPagamentoPrestacao = null;
				if(itensRemuradosHelper.getIdDocumentoTipo().equals(DocumentoTipo.GUIA_PAGAMENTO)){
					try{
						objGuiaPagamentoPrestacao = repositorioCobranca.selecionarGuiaPagamentoPrestacaoCobrancaAdministrativa(
										itensRemuradosHelper.getIdGuiaPagamento(), itensRemuradosHelper
														.getNumeroPrestacaoImovelCobrancaAdmItem().shortValue());
					}catch(ErroRepositorioException e){
						throw new ControladorException("erro.sistema", e);
					}

					if(objGuiaPagamentoPrestacao instanceof GuiaPagamentoPrestacao){
						guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) objGuiaPagamentoPrestacao;
						idGuiaPamento = guiaPagamentoPrestacao.getComp_id().getGuiaPagamentoId();
						prestacao = guiaPagamentoPrestacao.getComp_id().getNumeroPrestacao();
						dataEmissao = guiaPagamentoPrestacao.getDataEmissao();
						tipoDebito = guiaPagamentoPrestacao.getDebitoTipo().getDescricao();

						if(guiaPagamentoPrestacao.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)
										|| guiaPagamentoPrestacao.getIndicadorRemuneraCobrancaAdministrativa()
														.equals(ConstantesSistema.SIM)){
							valorDebito = guiaPagamentoPrestacao.getValorPrestacao();
						}

						FiltroClienteGuiaPagamento filtroClienteGuiaPagamento = new FiltroClienteGuiaPagamento();
						filtroClienteGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroClienteGuiaPagamento.GUIA_PAGAMENTO_ID,
										idGuiaPamento));
						filtroClienteGuiaPagamento.adicionarParametro(new ParametroSimples(
										FiltroClienteGuiaPagamento.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.USUARIO));
						Collection colecaoClienteGuiaPagamento = getControladorUtil().pesquisar(filtroClienteGuiaPagamento,
										ClienteGuiaPagamento.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoClienteGuiaPagamento)){
							ClienteGuiaPagamento clienteGuiaPagamento = (ClienteGuiaPagamento) Util
											.retonarObjetoDeColecao(colecaoClienteGuiaPagamento);
							clienteUsuario = clienteGuiaPagamento.getCliente().getId();
						}

						dataUltimaAlteracao = guiaPagamentoPrestacao.getUltimaAlteracao();

					}else{
						guiaPagamentoPrestacaoHistorico = (GuiaPagamentoPrestacaoHistorico) objGuiaPagamentoPrestacao;
						idGuiaPamento = guiaPagamentoPrestacaoHistorico.getComp_id().getGuiaPagamentoId();
						prestacao = guiaPagamentoPrestacaoHistorico.getComp_id().getNumeroPrestacao();
						dataEmissao = guiaPagamentoPrestacaoHistorico.getDataEmissao();
						tipoDebito = guiaPagamentoPrestacaoHistorico.getDebitoTipo().getDescricao();

						if(guiaPagamentoPrestacaoHistorico.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)
										|| guiaPagamentoPrestacaoHistorico.getIndicadorRemuneraCobrancaAdministrativa().equals(
														ConstantesSistema.SIM)){
							valorDebito = guiaPagamentoPrestacaoHistorico.getValorPrestacao();
						}

						FiltroClienteGuiaPagamentoHistorico filtroClienteGuiaPagamentoHistorico = new FiltroClienteGuiaPagamentoHistorico();
						filtroClienteGuiaPagamentoHistorico.adicionarParametro(new ParametroSimples(
										FiltroClienteGuiaPagamentoHistorico.GUIA_PAGAMENTO_ID, idGuiaPamento));
						filtroClienteGuiaPagamentoHistorico.adicionarParametro(new ParametroSimples(
										FiltroClienteGuiaPagamentoHistorico.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.USUARIO));
						Collection colecaoClienteGuiaPagamentoHistorico = getControladorUtil().pesquisar(
										filtroClienteGuiaPagamentoHistorico, ClienteGuiaPagamentoHistorico.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoClienteGuiaPagamentoHistorico)){
							ClienteGuiaPagamentoHistorico clienteGuiaPagamentoHistorico = (ClienteGuiaPagamentoHistorico) Util
											.retonarObjetoDeColecao(colecaoClienteGuiaPagamentoHistorico);
							clienteUsuario = clienteGuiaPagamentoHistorico.getCliente().getId();
						}

						idSituacaoItem = guiaPagamentoPrestacaoHistorico.getDebitoCreditoSituacao().getId();

						FiltroGuiaPagamentoHistorico filtroGuiaPagamentoHistorico = new FiltroGuiaPagamentoHistorico();
						filtroGuiaPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoHistorico.ID,
										itensRemuradosHelper.getIdGuiaPagamento()));
						filtroGuiaPagamentoHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoHistorico.PARCELAMENTO);
						Collection colecaoGuiaPagamentoHistorico = getControladorUtil().pesquisar(filtroGuiaPagamentoHistorico,
										GuiaPagamentoHistorico.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoGuiaPagamentoHistorico)){
							GuiaPagamentoHistorico guiaPagamentoHistorico = (GuiaPagamentoHistorico) Util
											.retonarObjetoDeColecao(colecaoGuiaPagamentoHistorico);
							parcelamento = guiaPagamentoHistorico.getParcelamento();
						}

						dataVencimento = guiaPagamentoPrestacaoHistorico.getDataVencimento();
						dataUltimaAlteracao = guiaPagamentoPrestacaoHistorico.getUltimaAlteracao();

					}

					FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
					filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.GUIA_PAGAMENTO_ID,
									itensRemuradosHelper.getIdGuiaPagamento()));
					filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.NUMERO_PRESTACAO,
									itensRemuradosHelper.getNumeroPrestacaoImovelCobrancaAdmItem()));
					Collection colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
									PagamentoHistorico.class.getName());

					if(Util.isNaoNuloBrancoZero(colecaoPagamentoHistorico)){
						PagamentoHistorico pagamentoHistorico = (PagamentoHistorico) Util.retonarObjetoDeColecao(colecaoPagamentoHistorico);
						situacaoItem = "PAGA";
						dataSituacao = pagamentoHistorico.getDataPagamento();
					}else if(idSituacaoItem.equals(DebitoCreditoSituacao.PARCELADA)){
						situacaoItem = "PARCELADA";
						dataSituacao = parcelamento.getParcelamento();
					}else if(idSituacaoItem.equals(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO)){
						situacaoItem = "ENTRADA PARCELAMENTO";
						dataSituacao = parcelamento.getDataEntradaParcelamento();
					}else if(idSituacaoItem.equals(DebitoCreditoSituacao.CANCELADA)){
						situacaoItem = "CANCELADA";
						dataSituacao = dataUltimaAlteracao;
					}else{
						situacaoItem = "PENDENTE";
						dataSituacao = dataVencimento;
					}

					// 1.1. Guia
					helper.setIdGuiaPamento(idGuiaPamento);
					// 1.2. Prestação
					helper.setPrestacao(prestacao);
					// 1.3. Data de Emissão
					helper.setDataEmissao(dataEmissao);
					// 1.4. Tipo de Débito
					helper.setTipoDebito(tipoDebito);
					// 1.5. Valor do Débito
					helper.setValorDebito(valorDebito);
					// 1.6. Cliente Usuário
					helper.setClienteUsuario(clienteUsuario);
					// 1.7. Situação do Item:
					helper.setSituacaoItem(situacaoItem);
					// 1.8. Data da Situação
					helper.setDataSituacao(dataSituacao);

					listaCobrancaAdministrativaGuiaHelper.add(helper);
				}
			}

			// Ordenar pela referencia da conta
			Collections.sort(listaCobrancaAdministrativaGuiaHelper, new Comparator<CobrancaAdministrativaHelper>() {

				public int compare(CobrancaAdministrativaHelper atual, CobrancaAdministrativaHelper outra){

					int retorno = 0;
					retorno = atual.getIdGuiaPamento().compareTo(outra.getIdGuiaPamento());

					if(retorno == 0){
						retorno = atual.getPrestacao().compareTo(outra.getPrestacao());
					}

					return retorno;
				}
			});
		}

		return listaCobrancaAdministrativaGuiaHelper;
	}

	public List<CobrancaAdministrativaHelper> obterDadosDoDebitoACobrar(List<ItensRemuradosHelper> listaItensRemuradosHelper)
					throws ControladorException{

		List<CobrancaAdministrativaHelper> listaCobrancaAdministrativaContaHelper = new ArrayList<CobrancaAdministrativaHelper>();
		CobrancaAdministrativaHelper helper;
		Object objDebitoACobrar;
		DebitoACobrar debitoACobrar;
		DebitoACobrarHistorico debitoACobrarHistorico;
		Integer referenciaDebito;
		Short prestacaoCobrada;
		Short prestacaoDebito;
		String tipoDebito;
		BigDecimal valorDebito;
		BigDecimal valorRestanteASerCobrado;
		Integer clienteUsuario;
		String situacaoItem;
		Integer idSituacaoItem;
		Date dataSituacao;
		Date dataUltimaAlteracao;
		Parcelamento parcelamento;
		boolean isDebitoACobrarHistorico;
		Integer idDebito;

		if(!Util.isVazioOrNulo(listaItensRemuradosHelper)){
			for(ItensRemuradosHelper itensRemuradosHelper : listaItensRemuradosHelper){
				helper = new CobrancaAdministrativaHelper();
				idSituacaoItem = 0;
				dataUltimaAlteracao = null;
				parcelamento = null;
				valorDebito = BigDecimal.ZERO;
				clienteUsuario = null;
				situacaoItem = null;
				objDebitoACobrar = null;
				dataSituacao = null;
				if(itensRemuradosHelper.getIdDocumentoTipo().equals(DocumentoTipo.DEBITO_A_COBRAR)){
					try{
						objDebitoACobrar = repositorioCobranca.selecionarDebitoACobrarOuHistoricoCobrancaAdministrativa(Integer
										.parseInt(itensRemuradosHelper.getIdentificacaoItem()));
					}catch(ErroRepositorioException e){
						throw new ControladorException("erro.sistema", e);
					}

					if(objDebitoACobrar instanceof DebitoACobrar){
						isDebitoACobrarHistorico = false;
						debitoACobrar = (DebitoACobrar) objDebitoACobrar;
						idDebito = debitoACobrar.getId();
						referenciaDebito = debitoACobrar.getAnoMesReferenciaDebito();
						tipoDebito = debitoACobrar.getDebitoTipo().getDescricao();
						prestacaoCobrada = debitoACobrar.getNumeroPrestacaoCobradas();
						prestacaoDebito = debitoACobrar.getNumeroPrestacaoDebito();
						valorDebito = debitoACobrar.getValorDebito();

						valorRestanteASerCobrado = valorDebito.subtract((valorDebito.divide(new BigDecimal(prestacaoDebito),
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)).multiply(new BigDecimal(
										prestacaoCobrada)));
						try{
							clienteUsuario = repositorioCobranca.pesquisarClienteDebitoACobrarOuHistorcico(debitoACobrar.getId());
						}catch(ErroRepositorioException e){
							throw new ControladorException("erro.sistema", e);
						}
						dataUltimaAlteracao = debitoACobrar.getUltimaAlteracao();

					}else{
						isDebitoACobrarHistorico = true;
						debitoACobrarHistorico = (DebitoACobrarHistorico) objDebitoACobrar;
						idDebito = debitoACobrarHistorico.getId();
						referenciaDebito = debitoACobrarHistorico.getAnoMesReferenciaDebito();
						tipoDebito = debitoACobrarHistorico.getDebitoTipo().getDescricao();
						prestacaoCobrada = debitoACobrarHistorico.getPrestacaoCobradas();
						prestacaoDebito = debitoACobrarHistorico.getPrestacaoDebito();
						valorDebito = debitoACobrarHistorico.getValorDebito();
						valorRestanteASerCobrado = valorDebito.subtract((valorDebito.divide(new BigDecimal(prestacaoDebito),
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)).multiply(new BigDecimal(
										prestacaoCobrada)));
						try{
							clienteUsuario = repositorioCobranca.pesquisarClienteDebitoACobrarOuHistorcico(debitoACobrarHistorico.getId());
						}catch(ErroRepositorioException e){
							throw new ControladorException("erro.sistema", e);
						}

						idSituacaoItem = debitoACobrarHistorico.getDebitoCreditoSituacaoAtual().getId();

						if(Util.isNaoNuloBrancoZero(debitoACobrarHistorico.getParcelamento())){
							parcelamento = debitoACobrarHistorico.getParcelamento();
						}

						dataUltimaAlteracao = debitoACobrarHistorico.getUltimaAlteracao();
					}

					if(!isDebitoACobrarHistorico){
						situacaoItem = "PENDENTE";
						dataSituacao = dataUltimaAlteracao;
					}else{
						FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.DEBITO_A_COBRAR_ID,
										itensRemuradosHelper.getIdentificacaoItem()));
						Collection colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
										PagamentoHistorico.class.getName());

						if(Util.isNaoNuloBrancoZero(colecaoPagamentoHistorico)){
							PagamentoHistorico pagamentoHistorico = (PagamentoHistorico) Util
											.retonarObjetoDeColecao(colecaoPagamentoHistorico);
							situacaoItem = "PAGA";
							dataSituacao = pagamentoHistorico.getDataPagamento();
						}else if(idSituacaoItem.equals(DebitoCreditoSituacao.PARCELADA)){
							situacaoItem = "PARCELADA";
							dataSituacao = parcelamento.getParcelamento();
						}else if(idSituacaoItem.equals(DebitoCreditoSituacao.CANCELADA)){
							situacaoItem = "CANCELADA";
							dataSituacao = dataUltimaAlteracao;
						}
					}

					// Seta o id do Débito
					helper.setIdDebitoACobrar(idDebito);
					// 1.1. Referência do Débito
					helper.setReferenciaDebito(referenciaDebito);
					// 1.2. Tipo de Débito
					helper.setTipoDebito(tipoDebito);
					// 1.3. Parcela:
					helper.setPrestacaoCobrada(prestacaoCobrada);
					helper.setPrestacaoDebito(prestacaoDebito);
					// 1.4. Valor do Débito
					helper.setValorDebito(valorDebito);
					// 1.5. Valor restante a ser cobrado
					helper.setValorRestanteASerCobrado(valorRestanteASerCobrado);
					// 1.6. Cliente Usuário
					helper.setClienteUsuario(clienteUsuario);
					// 1.7. Situação do Item:
					helper.setSituacaoItem(situacaoItem);
					// 1.8. Data da Situação:
					helper.setDataSituacao(dataSituacao);

					if(!listaCobrancaAdministrativaContaHelper.contains(helper)){
						listaCobrancaAdministrativaContaHelper.add(helper);
					}
				}
			}

			// Ordenar pela referencia da conta
			Collections.sort(listaCobrancaAdministrativaContaHelper, new Comparator<CobrancaAdministrativaHelper>() {

				public int compare(CobrancaAdministrativaHelper atual, CobrancaAdministrativaHelper outra){

					int retorno = 0;
					retorno = atual.getReferenciaDebito().compareTo(outra.getReferenciaDebito());

					// if(retorno == 0){
					// retorno =
					// atual.getDataVencimentoConta().compareTo(outra.getDataVencimentoConta());
					// }

					return retorno;
				}
			});
		}

		return listaCobrancaAdministrativaContaHelper;
	}

	public Object[] pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ControladorException{

		Object[] retorno = new Object[3];

		List<CobrancaAdministrativaHelper> listaCobrancaAdministrativaHelpers = new ArrayList<CobrancaAdministrativaHelper>();
		BigDecimal valorTotalDebito = BigDecimal.ZERO;
		BigDecimal valorTotalRemuneracao = BigDecimal.ZERO;

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca
							.pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);

			CobrancaAdministrativaHelper helperPadrao = null;
			CobrancaAdministrativaHelper helperParcelamento = null;
			CobrancaAdministrativaHelper helperEspecial = null;
			CobrancaAdministrativaHelper helperReincidencia = null;

			Integer idDebitoACobrar = null;
			Integer idDebitoACobrarAnterior = null;
			Integer referencia = null;
			BigDecimal valorDebito = null;

			BigDecimal valorRemuneracao = null;
			BigDecimal percentualRemuneracao = null;

			for(Object[] array : colecaoArray){
				idDebitoACobrar = null;
				if(array[0] != null){
					idDebitoACobrar = (Integer) array[0];
				}

				referencia = null;
				if(array[1] != null){
					referencia = (Integer) array[1];
				}

				valorDebito = null;
				if(array[2] != null){
					valorDebito = (BigDecimal) array[2];
				}

				if(array[3] != null){
					valorRemuneracao = (BigDecimal) array[3];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperPadrao = new CobrancaAdministrativaHelper();

						helperPadrao.setIdDebitoACobrar(idDebitoACobrar);

						if(!idDebitoACobrar.equals(idDebitoACobrarAnterior)){
							helperPadrao.setReferenciaDebito(referencia);
							helperPadrao.setValorDebito(valorDebito);

							valorTotalDebito = valorTotalDebito.add(helperPadrao.getValorDebito());

							idDebitoACobrarAnterior = idDebitoACobrar;
						}

						helperPadrao.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PADRAO);

						if(array[4] != null){
							percentualRemuneracao = (BigDecimal) array[4];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperPadrao.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperPadrao.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						listaCobrancaAdministrativaHelpers.add(helperPadrao);
					}
				}

				if(array[5] != null){
					valorRemuneracao = (BigDecimal) array[5];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperReincidencia = new CobrancaAdministrativaHelper();

						helperReincidencia.setIdDebitoACobrar(idDebitoACobrar);

						if(!idDebitoACobrar.equals(idDebitoACobrarAnterior)){
							helperReincidencia.setReferenciaDebito(referencia);
							helperReincidencia.setValorDebito(valorDebito);

							valorTotalDebito = valorTotalDebito.add(helperReincidencia.getValorDebito());

							idDebitoACobrarAnterior = idDebitoACobrar;
						}

						helperReincidencia.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.REINCIDENCIA);

						if(array[6] != null){
							percentualRemuneracao = (BigDecimal) array[6];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperReincidencia.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperReincidencia.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						listaCobrancaAdministrativaHelpers.add(helperReincidencia);
					}
				}

				if(array[7] != null){
					valorRemuneracao = (BigDecimal) array[7];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperEspecial = new CobrancaAdministrativaHelper();

						helperPadrao.setIdDebitoACobrar(idDebitoACobrar);

						if(!idDebitoACobrar.equals(idDebitoACobrarAnterior)){
							helperEspecial.setReferenciaDebito(referencia);
							helperEspecial.setValorDebito(valorDebito);

							valorTotalDebito = valorTotalDebito.add(helperEspecial.getValorDebito());

							idDebitoACobrarAnterior = idDebitoACobrar;
						}

						helperEspecial.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.ESPECIAL);

						if(array[8] != null){
							percentualRemuneracao = (BigDecimal) array[8];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperEspecial.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperEspecial.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						listaCobrancaAdministrativaHelpers.add(helperEspecial);
					}
				}

				if(array[9] != null){
					valorRemuneracao = (BigDecimal) array[9];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperParcelamento = new CobrancaAdministrativaHelper();

						helperParcelamento.setIdDebitoACobrar(idDebitoACobrar);

						if(!idDebitoACobrar.equals(idDebitoACobrarAnterior)){
							helperParcelamento.setReferenciaDebito(referencia);
							helperParcelamento.setValorDebito(valorDebito);

							valorTotalDebito = valorTotalDebito.add(helperParcelamento.getValorDebito());

							idDebitoACobrarAnterior = idDebitoACobrar;
						}

						helperParcelamento.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PARCELAMENTO);

						if(array[10] != null){
							percentualRemuneracao = (BigDecimal) array[10];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperParcelamento.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperParcelamento.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						listaCobrancaAdministrativaHelpers.add(helperParcelamento);
					}
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		retorno[0] = listaCobrancaAdministrativaHelpers;
		retorno[1] = Util.formatarMoedaReal(valorTotalDebito);
		retorno[2] = Util.formatarMoedaReal(valorTotalRemuneracao);

		return retorno;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método principal chamado pela Rotina Batch. Responsável por marcar, de acordo com algumas
	 * regras, os itens remuneráveis por cobrança administrativa, atualizando para 1 (Sim) um
	 * indicador criado em cada um dos itens (Conta, ContaHistorico, GuiaPagamento,
	 * GuiaPagamentoHistorico, DebitoACobrar, DebitoACobrarHistorico, DebitoCobrado e
	 * DebitoCobradoHistorico)
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public void marcarItensRemuneraveisCobrancaAdministrativa(int idFuncionalidadeIniciada) throws ControladorException{

		int idUnidadeIniciada = 0;

		try{

			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			LOGGER.info("*#*#* INICIO *#*#*");

			Integer limite = null;

			String caminhoArquivoLog = ConstantesAplicacao.get("caminho_pasta_gsan");
			File file = new File(caminhoArquivoLog + "QtdRegistros.txt");
			FileReader fileReader = null;

			try{
				fileReader = new FileReader(file);

				if(fileReader != null){
					BufferedReader br = null;
					br = new BufferedReader(fileReader);
					String linha = null;

					while((linha = br.readLine()) != null){
						if(Util.isInteger(linha)){
							limite = Util.obterInteger(linha);
							break;
						}
					}
				}
			}catch(IOException e){
				e.printStackTrace();
			}

			if(limite == null){
				limite = 4000;
			}

			LOGGER.info("*** limite - " + limite);

			// 1. Selecionar os imóveis marcados na cobrança administrativa (a partir da tabela
			// IMOVEL_COBRANCA_SITUACAO com CBST_ID=4 e ISCB_DTRETIRADACOBRANCA com o valor nulo).
			Collection<ImovelCobrancaSituacao> imoveisCobrancaAdm = repositorioCobranca
							.pesquisarImovelCobrancaSituacaoPorCobrancaSituacaoId(CobrancaSituacao.COBRANCA_ADMINISTRATIVA, limite);

			if(!Util.isVazioOrNulo(imoveisCobrancaAdm)){

				LOGGER.info("*** Quantidade registros imoveisCobrancaAdm - " + imoveisCobrancaAdm.size());

				int qtd = 0;
				int qtdAux = 0;

				// Variáveis utilizadas no processamento
				Collection<Object[]> documentoItensEmCobrancaAdmPendente = null;
				Date maiorDataSituacaoDebito = null;
				Integer imovelId = null;
				Integer cobrancaAcaoAtividadeComandoId = null;

				Integer referenciaInicial = new Integer("201302");
				Date dataInicial = Util.criarData(1, 2, 2013);

				Collection colecaoImovelCobrancaSituacao = new ArrayList();
				Collection colecaoContasRemuneraveis = new ArrayList();
				Collection colecaoContasHistoricoRemuneraveis = new ArrayList();
				Collection colecaoGuiasPagamentoRemuneraveis = new ArrayList();
				Collection colecaoDebitosACobrarRemuneraveis = new ArrayList();
				Collection colecaoDebitosACobrarHistoricoRemuneraveis = new ArrayList();
				Collection colecaoDebitosCobradosRemuneraveis = new ArrayList();
				Collection colecaoDebitosCobradosHistoricoRemuneraveis = new ArrayList();

				CobrancaSituacao cobrancaSituacaoTemp = new CobrancaSituacao();
				cobrancaSituacaoTemp.setId(9999);

				// 2. Para cada imóvel selecionado
				for(ImovelCobrancaSituacao imovelCobrancaAdm : imoveisCobrancaAdm){

					qtd = qtd + 1;
					qtdAux = qtdAux + 1;

					if(qtdAux == 1000){
						LOGGER.info("*** Registros processados: " + qtd);
						qtdAux = 0;
					}

					imovelId = imovelCobrancaAdm.getImovel().getId();
					cobrancaAcaoAtividadeComandoId = imovelCobrancaAdm.getCobrancaAcaoAtividadeComando().getId();

					// Obtém os itens de documento de cobrança em cobrança
					// administrativa (situação de cobrança de débito PENDENTE)
					documentoItensEmCobrancaAdmPendente = repositorioCobranca.pesquisarCobrancaDocumentoItensEmCobrancaAdmPendente(
									imovelId, cobrancaAcaoAtividadeComandoId);

					// Obtém a maior data de situação de débito dos itens de
					// documento de cobrança do imóvel e comando de atividade de
					// cobrança
					maiorDataSituacaoDebito = repositorioCobranca.obterMaiorDataSituacaoDebitoCobrancaDocumentoItem(imovelId,
									cobrancaAcaoAtividadeComandoId);

					// Tratamento de Itens do tipo CONTA
					colecaoContasRemuneraveis.addAll(marcarContasRemuneraveis(imovelId, cobrancaAcaoAtividadeComandoId, referenciaInicial,
									documentoItensEmCobrancaAdmPendente, maiorDataSituacaoDebito));

					// Tratamento de Itens do tipo CONTA_HISTORICO
					colecaoContasHistoricoRemuneraveis.addAll(marcarContasHistoricoRemuneraveis(imovelId, cobrancaAcaoAtividadeComandoId,
									referenciaInicial, documentoItensEmCobrancaAdmPendente, maiorDataSituacaoDebito));

					// Tratamento de Itens do tipo GUIA_PAGAMENTO_PRESTACAO
					colecaoGuiasPagamentoRemuneraveis.addAll(marcarGuiasPagamentoRemuneraveis(imovelId, dataInicial,
									documentoItensEmCobrancaAdmPendente, maiorDataSituacaoDebito));

					// Tratamento de Itens do tipo GUIA_PAGAMENTO_PRESTACAO_HIST
					marcarGuiasPagamentoHistoricoRemuneraveis(imovelId, dataInicial, documentoItensEmCobrancaAdmPendente,
									maiorDataSituacaoDebito);

					// Tratamento de Itens do tipo DEBITO_A_COBRAR
					colecaoDebitosACobrarRemuneraveis.addAll(marcarDebitosACobrarRemuneraveis(imovelId, dataInicial));

					// Tratamento de Itens do tipo DEBITO_A_COBRAR_HISTORICO
					colecaoDebitosACobrarHistoricoRemuneraveis.addAll(marcarDebitosACobrarHistoricoRemuneraveis(imovelId, dataInicial));

					// Tratamento de Itens do tipo DEBITO_COBRADO
					colecaoDebitosCobradosRemuneraveis.addAll(marcarDebitosCobradosRemuneraveis(imovelId, dataInicial));

					// Tratamento de Itens do tipo DEBITO_COBRADO_HISTORICO
					colecaoDebitosCobradosHistoricoRemuneraveis.addAll(marcarDebitosCobradosHistoricoRemuneraveis(imovelId, dataInicial));

					imovelCobrancaAdm.setCobrancaSituacao(cobrancaSituacaoTemp);

					colecaoImovelCobrancaSituacao.add(imovelCobrancaAdm);
				}

				getControladorUtil().atualizarColecaoObjetos(colecaoImovelCobrancaSituacao);
				getControladorUtil().atualizarColecaoObjetos(colecaoContasRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoContasHistoricoRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoGuiasPagamentoRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoDebitosACobrarRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoDebitosACobrarHistoricoRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoDebitosCobradosRemuneraveis);
				getControladorUtil().atualizarColecaoObjetos(colecaoDebitosCobradosHistoricoRemuneraveis);
			}else{
				LOGGER.info("*** Sem registros a processar!! ");
			}

			LOGGER.info("*#*#* FIM *#*#*");

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);

		}catch(Exception ex){
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			ex.printStackTrace();
			sessionContext.setRollbackOnly();

			throw new EJBException(ex);
		}

	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo CONTA que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarContasRemuneraveis(Integer imovelId, Integer cobrancaAcaoAtividadeComandoId, Integer referenciaInicial,
					Collection<Object[]> documentoItensEmCobrancaAdmPendente, Date maiorDataSituacaoDebito) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		Collection<Conta> contas = null;
		FiltroConta filtroConta;

		// Seleciona as contas a partir da tabela CONTA com CNTA_AMREFERENCIACONTA maior
		// ou igual à 201302 e IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO)
		filtroConta = new FiltroConta();
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, imovelId));
		filtroConta.adicionarParametro(new MaiorQue(FiltroConta.REFERENCIA, referenciaInicial));
		filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.CONTA_MOTIVO_REVISAO);

		contas = (Collection<Conta>) getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

		if(!Util.isVazioOrNulo(contas)){

			// Para cada conta selecionada
			for(Conta conta : contas){

				// 2.1.1.1. Caso a conta seja uma entrada de parcelamento (CMRV_ID=101 e
				// CNTA_DTREVISAO/CNHI_DTREVISAO diferente de nulo)
				if(conta.getContaMotivoRevisao() != null
								&& conta.getContaMotivoRevisao().getId().equals(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO)
								&& conta.getDataRevisao() != null){

					// 2.1.1.2.1.1. Marcar a conta como remunerável
					conta.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(conta);

					// Caso contrário:
					// 2.1.1.2.1. Caso exista item de cobrança administrativa pendente
					// (existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
					// CDST_ID=1 (pendente) e CBDO_ID=(CBDO_ID da tabela
					// COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO)))
					// OU no momento da geração conta exista item pendente
					// (CNTA_DTEMISSAO/CNHI_DTEMISSAO menor ou igual à
					// maior(CDIT_DTSITUACAODEBITO) da tabela
					// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela
					// COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO)))
				}else if(!Util.isVazioOrNulo(documentoItensEmCobrancaAdmPendente)
								|| (maiorDataSituacaoDebito != null && conta.getDataEmissao() != null && Util.compararData(
												conta.getDataEmissao(), maiorDataSituacaoDebito) <= 0)){

					// 2.1.1.2.1.1. Marcar a conta como remunerável
					conta.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(conta);
				}
			}

			// Atualiza a coleção de contas
			// getControladorUtil().atualizarColecaoObjetos(contas);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo CONTA_HISTORICO que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarContasHistoricoRemuneraveis(Integer imovelId, Integer cobrancaAcaoAtividadeComandoId,
					Integer referenciaInicial, Collection<Object[]> documentoItensEmCobrancaAdmPendente, Date maiorDataSituacaoDebito)
					throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		Collection<ContaHistorico> contasHistorico = null;
		FiltroContaHistorico filtroContaHistorico;

		// Seleciona as contas histórico a partir da tabela CONTA_HISTORICO com
		// CNHI_AMREFERENCIACONTA maior ou igual à 201302 e IMOV_ID=(IMOV_ID da tabela
		// IMOVEL_COBRANCA_SITUACAO)
		filtroContaHistorico = new FiltroContaHistorico();
		filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.IMOVEL_ID, imovelId));
		filtroContaHistorico.adicionarParametro(new MaiorQue(FiltroContaHistorico.ANO_MES_REFERENCIA, referenciaInicial));
		filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.CONTA_MOTIVO_REVISAO);

		contasHistorico = (Collection<ContaHistorico>) getControladorUtil().pesquisar(filtroContaHistorico, ContaHistorico.class.getName());

		if(!Util.isVazioOrNulo(contasHistorico)){

			// Para cada conta selecionada
			for(ContaHistorico contaHistorico : contasHistorico){

				// 2.1.1.1. Caso a conta seja uma entrada de parcelamento (CMRV_ID=101 e
				// CNTA_DTREVISAO/CNHI_DTREVISAO diferente de nulo)
				if(contaHistorico.getContaMotivoRevisao() != null
								&& contaHistorico.getContaMotivoRevisao().getId()
												.equals(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO)
								&& contaHistorico.getDataRevisao() != null){

					// 2.1.1.2.1.1. Marcar a conta como remunerável
					contaHistorico.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(contaHistorico);

					// Caso contrário:
					// 2.1.1.2.1. Caso exista item de cobrança administrativa pendente
					// (existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
					// CDST_ID=1 (pendente) e CBDO_ID=(CBDO_ID da tabela
					// COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO)))
					// OU no momento da geração conta exista item pendente
					// (CNTA_DTEMISSAO/CNHI_DTEMISSAO menor ou igual à
					// maior(CDIT_DTSITUACAODEBITO) da tabela
					// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela
					// COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
					// IMOVEL_COBRANCA_SITUACAO)))
				}else if(!Util.isVazioOrNulo(documentoItensEmCobrancaAdmPendente)
								|| (maiorDataSituacaoDebito != null && contaHistorico.getDataEmissao() != null && Util.compararData(
												contaHistorico.getDataEmissao(), maiorDataSituacaoDebito) <= 0)){

					// 2.1.1.2.1.1. Marcar a conta como remunerável
					contaHistorico.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(contaHistorico);
				}
			}

			// Atualiza a coleção de contas histórico
			// getControladorUtil().atualizarColecaoObjetos(contasHistorico);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo GUIA_PAGAMENTO_PRESTACAO que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarGuiasPagamentoRemuneraveis(Integer imovelId, Date dataInicial,
					Collection<Object[]> documentoItensEmCobrancaAdmPendente, Date maiorDataSituacaoDebito) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		// Seleciona as prestações de guias de pagamento a partir da tabela GUIA_PAGAMENTO_PRESTACAO
		// com GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO com GPAG_DTINCLUSAO maior ou igual à
		// 1/02/2013 e IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO))
		FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
		filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_IMOVEL_ID,
						imovelId));
		filtroGuiaPagamentoPrestacao
						.adicionarParametro(new MaiorQue(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_DATA_INCLUSAO, dataInicial));

		filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ATUAL);
		filtroGuiaPagamentoPrestacao
						.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.DEBITO_CREDITO_SITUACAO_ANTERIOR);
		filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO);
		filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.DEBITO_TIPO);

		Collection<GuiaPagamentoPrestacao> guiasPagamentoPrestacao = (Collection<GuiaPagamentoPrestacao>) getControladorUtil().pesquisar(
						filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

		if(!Util.isVazioOrNulo(guiasPagamentoPrestacao)){

			Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
			Collection<Integer> tiposDebitoEntradaParcelamento = getTiposDebitoEntradaParcelamento();

			// Para cada prestação de guia de pagamento selecionada
			for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : guiasPagamentoPrestacao){

				// 2.1.2.1. Caso a prestação seja uma entrada de parcelamento (DCST_ID=4 na
				// tabela GUIA_PAGAMENTO_PRESTACAO ou na tabela GUIA_PAGAMENTO_PRESTACAO_HIST,
				// caso a prestação esteja no histórico)
				if(guiaPagamentoPrestacao.getDebitoCreditoSituacao() != null
								&& guiaPagamentoPrestacao.getDebitoCreditoSituacao().getId()
												.equals(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO)){

					// 2.1.2.1.1. Marcar a prestação como remunerável
					guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(guiaPagamentoPrestacao);

					// Caso contrário
				}else{

					// Caso a prestação seja uma parcela de um parcelamento
					if(guiaPagamentoPrestacao.getDebitoTipo() != null
									&& (tiposDebitoParcelamento.contains(guiaPagamentoPrestacao.getDebitoTipo().getId()) || tiposDebitoEntradaParcelamento
													.contains(guiaPagamentoPrestacao.getDebitoTipo().getId()))){

						// 2.1.2.2.1.1. Marcar a prestação como remunerável
						guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

						colecaoAtualizar.add(guiaPagamentoPrestacao);

						// Caso contrário:
						// 2.1.2.2.2.1. Caso exista item de cobrança administrativa pendente (existe
						// ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com CDST_ID=1 (pendente) e
						// CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da
						// tabela IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
						// IMOVEL_COBRANCA_SITUACAO)))
						// OU no momento da geração da guia exista item
						// pendente (não existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
						// CDST_ID=1 (pendente) e CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO com
						// IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID
						// da tabela IMOVEL_COBRANCA_SITUACAO)) e GPAG_DTINCLUSAO/GPHI_DTINCLUSAO
						// menor ou igual à maior(CDIT_DTSITUACAODEBITO) da tabela
						// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO
						// com IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e
						// CACM_ID=(CACM_ID da tabela IMOVEL_COBRANCA_SITUACAO)))
					}else if(!Util.isVazioOrNulo(documentoItensEmCobrancaAdmPendente)
									|| (maiorDataSituacaoDebito != null && guiaPagamentoPrestacao.getGuiaPagamento() != null
													&& guiaPagamentoPrestacao.getGuiaPagamento().getDataInclusao() != null && Util
													.compararData(guiaPagamentoPrestacao.getGuiaPagamento().getDataInclusao(),
																	maiorDataSituacaoDebito) <= 0)){

						// 2.1.2.2.1.1. Marcar a prestação como remunerável
						guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

						colecaoAtualizar.add(guiaPagamentoPrestacao);
					}
				}
			}

			// Atualiza a coleção de prestações de guia de pagamento
			// getControladorUtil().atualizarColecaoObjetos(guiasPagamentoPrestacao);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo GUIA_PAGAMENTO_PRESTACAO_HIST que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private void marcarGuiasPagamentoHistoricoRemuneraveis(Integer imovelId, Date dataInicial,
					Collection<Object[]> documentoItensEmCobrancaAdmPendente, Date maiorDataSituacaoDebito) throws ControladorException{

		try{

			// Consulta as prestações histórico de guias de pagamento a partir da tabela
			// GUIA_PAGAMENTO_PRESTACAO_HIST com GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO com
			// GPAG_DTINCLUSAO maior ou igual à 1/02/2013 e IMOV_ID=(IMOV_ID da tabela
			// IMOVEL_COBRANCA_SITUACAO)) E a partir da tabela GUIA_PAGAMENTO_PRESTACAO_HIST com
			// GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO_HISTORICO com GPHI_DTINCLUSAO maior ou
			// igual à
			// 1/02/2013 e IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO)))
			Collection<GuiaPagamentoPrestacaoHistorico> guiasPagamentoPrestacaoHist = repositorioCobranca
							.pesquisarGuiaPagamentoPrestacaoHistParaRemunerarCobrancaAdm(imovelId, dataInicial);

			if(!Util.isVazioOrNulo(guiasPagamentoPrestacaoHist)){

				Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
				Collection<Integer> tiposDebitoEntradaParcelamento = getTiposDebitoEntradaParcelamento();

				// Para cada prestação histórico de guia de pagamento selecionada
				for(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHist : guiasPagamentoPrestacaoHist){

					// 2.1.2.1. Caso a prestação seja uma entrada de parcelamento (DCST_ID=4 na
					// tabela GUIA_PAGAMENTO_PRESTACAO ou na tabela GUIA_PAGAMENTO_PRESTACAO_HIST,
					// caso a prestação esteja no histórico)
					if(guiaPagamentoPrestacaoHist.getDebitoCreditoSituacao() != null
									&& guiaPagamentoPrestacaoHist.getDebitoCreditoSituacao().getId()
													.equals(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO)){

						// 2.1.2.1.1. Marcar a prestação como remunerável
						guiaPagamentoPrestacaoHist.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

						// Caso contrário
					}else{

						// Caso a prestação seja uma parcela de um parcelamento
						if(guiaPagamentoPrestacaoHist.getDebitoTipo() != null
										&& (tiposDebitoParcelamento.contains(guiaPagamentoPrestacaoHist.getDebitoTipo().getId()) || tiposDebitoEntradaParcelamento
														.contains(guiaPagamentoPrestacaoHist.getDebitoTipo().getId()))){

							// 2.1.2.2.1.1. Marcar a prestação como remunerável
							guiaPagamentoPrestacaoHist.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

							// Caso contrário:
							// 2.1.2.2.2.1. Caso exista item de cobrança administrativa pendente
							// (existe
							// ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com CDST_ID=1 (pendente)
							// e
							// CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da
							// tabela IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
							// IMOVEL_COBRANCA_SITUACAO)))
							// OU no momento da geração da guia exista item
							// pendente (não existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
							// CDST_ID=1 (pendente) e CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO
							// com
							// IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e
							// CACM_ID=(CACM_ID
							// da tabela IMOVEL_COBRANCA_SITUACAO)) e
							// GPAG_DTINCLUSAO/GPHI_DTINCLUSAO
							// menor ou igual à maior(CDIT_DTSITUACAODEBITO) da tabela
							// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela
							// COBRANCA_DOCUMENTO
							// com IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e
							// CACM_ID=(CACM_ID da tabela IMOVEL_COBRANCA_SITUACAO)))
						}else if(!Util.isVazioOrNulo(documentoItensEmCobrancaAdmPendente)
										|| (maiorDataSituacaoDebito != null && guiaPagamentoPrestacaoHist.getGuiaPagamento() != null
														&& guiaPagamentoPrestacaoHist.getGuiaPagamento().getDataInclusao() != null && Util
														.compararData(guiaPagamentoPrestacaoHist.getGuiaPagamento().getDataInclusao(),
																		maiorDataSituacaoDebito) <= 0)){

							// 2.1.2.2.1.1. Marcar a prestação como remunerável
							guiaPagamentoPrestacaoHist.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);
						}
					}

					// Atualiza o indicador remunera cobrança administrativa da entidade
					// GuiaPagamentoPrestacaoHistorico
					if(guiaPagamentoPrestacaoHist.getIndicadorRemuneraCobrancaAdministrativa() != null
									&& guiaPagamentoPrestacaoHist.getIndicadorRemuneraCobrancaAdministrativa()
													.equals(ConstantesSistema.SIM)){

						repositorioCobranca.atualizarIndicadorRemuneraCobrancaAdm(guiaPagamentoPrestacaoHist);
					}
				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}


	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo DEBITO_A_COBRAR que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarDebitosACobrarRemuneraveis(Integer imovelId, Date dataInicial) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		// Seleciona os débitos a cobrar a partir da tabela DEBITO_A_COBRAR com
		// date(DBAC_TMATUDEBITO) maior ou igual à 1/02/2013 e IMOV_ID=(IMOV_ID da tabela
		// IMOVEL_COBRANCA_SITUACAO)
		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.IMOVEL_ID, imovelId));
		filtroDebitoACobrar.adicionarParametro(new MaiorQue(FiltroDebitoACobrar.GERACAO_DEBITO, dataInicial));
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.DEBITO_TIPO);

		Collection<DebitoACobrar> debitosACobrar = (Collection<DebitoACobrar>) getControladorUtil().pesquisar(filtroDebitoACobrar,
						DebitoACobrar.class.getName());

		if(!Util.isVazioOrNulo(debitosACobrar)){

			Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
			Collection<Integer> tiposDebitoAcrescimoImpontualidade = getControladorParcelamento().getTiposDebitoAcrescimoImpontualidade();
			Collection<Integer> tiposDebitoServicosEspeciais = getControladorParcelamento().getTiposDebitoServicosEspeciais();

			// Para cada débito a cobrar selecionado
			for(DebitoACobrar debitoACobrar : debitosACobrar){

				// 2.1.3.1. Caso o débito a cobrar seja uma parcela de um parcelamento (DBTP_ID
				// contido em (896,897,898,899,41,807,808,820,821,813,895) na tabela DEBITO_A_COBRAR
				// ou na tabela DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no
				// histórico) OU caso o débito a cobrar corresponda à cobrança de acréscimos por
				// impontualidade (DBTP_ID contido em (2,64,65) na tabela DEBITO_A_COBRAR ou na
				// tabela DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no histórico) OU
				// caso o débito a cobrar corresponda à cobrança de serviços especiais (DBTP_ID
				// contido em (8,26,NN) na tabela DEBITO_A_COBRAR ou na tabela
				// DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no histórico)
				if(debitoACobrar.getDebitoTipo() != null
								&& (tiposDebitoParcelamento.contains(debitoACobrar.getDebitoTipo().getId())
												|| tiposDebitoAcrescimoImpontualidade.contains(debitoACobrar.getDebitoTipo().getId()) || tiposDebitoServicosEspeciais
													.contains(debitoACobrar.getDebitoTipo().getId()))){

					// 2.1.3.1.1. Marcar o débito a cobrar como remunerável
					debitoACobrar.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(debitoACobrar);
				}
			}

			// Atualiza a coleção de débitos a cobrar
			// getControladorUtil().atualizarColecaoObjetos(debitosACobrar);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo DEBITO_A_COBRAR_HISTORICO que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarDebitosACobrarHistoricoRemuneraveis(Integer imovelId, Date dataInicial) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		// Seleciona os débitos a cobrar em histórico DEBITO_A_COBRAR_HISTORICO com
		// date(DAHI_TMATUDEBITO) maior ou igual à 1/02/2013 e IMOV_ID=(IMOV_ID da tabela
		// IMOVEL_COBRANCA_SITUACAO)
		FiltroDebitoACobrarHistorico filtroDebitoACobrarHistorico = new FiltroDebitoACobrarHistorico();
		filtroDebitoACobrarHistorico.adicionarParametro(new ParametroSimples(FiltroDebitoACobrarHistorico.IMOVEL_ID, imovelId));
		filtroDebitoACobrarHistorico.adicionarParametro(new MaiorQue(FiltroDebitoACobrarHistorico.DEBITO_GERADO_REALIZAR, dataInicial));
		filtroDebitoACobrarHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarHistorico.DEBITO_TIPO);

		Collection<DebitoACobrarHistorico> debitosACobrarHistorico = (Collection<DebitoACobrarHistorico>) getControladorUtil().pesquisar(
						filtroDebitoACobrarHistorico, DebitoACobrarHistorico.class.getName());

		if(!Util.isVazioOrNulo(debitosACobrarHistorico)){

			Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
			Collection<Integer> tiposDebitoAcrescimoImpontualidade = getControladorParcelamento().getTiposDebitoAcrescimoImpontualidade();
			Collection<Integer> tiposDebitoServicosEspeciais = getControladorParcelamento().getTiposDebitoServicosEspeciais();

			// Para cada débito a cobrar em histórico selecionado
			for(DebitoACobrarHistorico debitoACobrarHistorico : debitosACobrarHistorico){

				// 2.1.3.1. Caso o débito a cobrar seja uma parcela de um parcelamento (DBTP_ID
				// contido em (896,897,898,899,41,807,808,820,821,813,895) na tabela DEBITO_A_COBRAR
				// ou na tabela DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no
				// histórico) OU caso o débito a cobrar corresponda à cobrança de acréscimos por
				// impontualidade (DBTP_ID contido em (2,64,65) na tabela DEBITO_A_COBRAR ou na
				// tabela DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no histórico) OU
				// caso o débito a cobrar corresponda à cobrança de serviços especiais (DBTP_ID
				// contido em (8,26,NN) na tabela DEBITO_A_COBRAR ou na tabela
				// DEBITO_A_COBRAR_HISTORICO, caso o débito a cobrar esteja no histórico)
				if(debitoACobrarHistorico.getDebitoTipo() != null
								&& (tiposDebitoParcelamento.contains(debitoACobrarHistorico.getDebitoTipo().getId())
												|| tiposDebitoAcrescimoImpontualidade.contains(debitoACobrarHistorico.getDebitoTipo()
																.getId()) || tiposDebitoServicosEspeciais.contains(debitoACobrarHistorico
												.getDebitoTipo().getId()))){

					// 2.1.3.1.1. Marcar o débito a cobrar em histórico como remunerável
					debitoACobrarHistorico.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(debitoACobrarHistorico);
				}
			}

			// Atualiza a coleção de débitos a cobrar em histórico
			// getControladorUtil().atualizarColecaoObjetos(debitosACobrarHistorico);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo DEBITO_COBRADO que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarDebitosCobradosRemuneraveis(Integer imovelId, Date dataInicial) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		// Seleciona os débitos cobrados a partir da tabela DEBITO_COBRADO com
		// date(DBCB_TMDEBITOCOBRADO) maior ou igual à 1/02/2013 e CNTA_ID=(CNTA_ID da tabela CONTA
		// com IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO))
		FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
		filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_IMOVEL_ID, imovelId));
		filtroDebitoCobrado.adicionarParametro(new MaiorQue(FiltroDebitoCobrado.DEBITO_COBRADO, dataInicial));
		filtroDebitoCobrado.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoCobrado.DEBITO_TIPO);

		Collection<DebitoCobrado> debitosCobrados = (Collection<DebitoCobrado>) getControladorUtil().pesquisar(filtroDebitoCobrado,
						DebitoCobrado.class.getName());

		if(!Util.isVazioOrNulo(debitosCobrados)){

			Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
			Collection<Integer> tiposDebitoAcrescimoImpontualidade = getControladorParcelamento().getTiposDebitoAcrescimoImpontualidade();
			Collection<Integer> tiposDebitoServicosEspeciais = getControladorParcelamento().getTiposDebitoServicosEspeciais();

			// Para cada débito cobrado selecionado
			for(DebitoCobrado debitoCobrado : debitosCobrados){

				// 2.1.4.1. Caso o débito cobrado seja uma parcela de um parcelamento (DBTP_ID
				// contido em (896,897,898,899,41,807,808,820,821,813,895) na tabela DEBITO_COBRADO
				// ou na tabela DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no
				// histórico) OU caso o débito cobrado corresponda à cobrança de acréscimos por
				// impontualidade (DBTP_ID contido em (2,64,65) na tabela DEBITO_COBRADO ou na
				// tabela DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no histórico) OU
				// caso o débito cobrado corresponda à cobrança de serviços especiais (DBTP_ID
				// contido em (8,26,NN) na tabela DEBITO_COBRADO ou na tabela
				// DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no histórico)
				if(debitoCobrado.getDebitoTipo() != null
								&& (tiposDebitoParcelamento.contains(debitoCobrado.getDebitoTipo().getId())
												|| tiposDebitoAcrescimoImpontualidade.contains(debitoCobrado.getDebitoTipo().getId()) || tiposDebitoServicosEspeciais
													.contains(debitoCobrado.getDebitoTipo().getId()))){

					// 2.1.4.1.1. Marcar o débito cobrado como remunerável
					debitoCobrado.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(debitoCobrado);
				}
			}

			// Atualiza a coleção de débitos cobrados
			// getControladorUtil().atualizarColecaoObjetos(debitosCobrados);
		}

		return colecaoAtualizar;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneráveis por Cobrança Administrativa
	 * Método que marca os itens do tipo DEBITO_COBRADO_HISTORICO que devem ser remuneráveis
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	private Collection marcarDebitosCobradosHistoricoRemuneraveis(Integer imovelId, Date dataInicial) throws ControladorException{

		Collection colecaoAtualizar = new ArrayList();

		// Seleciona os débitos cobrados a partir da tabela DEBITO_COBRADO_HISTORICO com
		// date(DBHI_TMDEBITOCOBRADO) maior ou igual à 1/02/2013 e CNTA_ID=(CNTA_ID da tabela
		// CONTA_HISTORICO com IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO))
		FiltroDebitoCobradoHistorico filtroDebitoCobradoHistorico = new FiltroDebitoCobradoHistorico();
		filtroDebitoCobradoHistorico.adicionarParametro(new ParametroSimples(FiltroDebitoCobradoHistorico.CONTA_HISTORICO_IMOVEL_ID,
						imovelId));
		filtroDebitoCobradoHistorico.adicionarParametro(new MaiorQue(FiltroDebitoCobradoHistorico.DEBITO_COBRADO, dataInicial));
		filtroDebitoCobradoHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoCobradoHistorico.DEBITO_TIPO);

		Collection<DebitoCobradoHistorico> debitosCobradosHistorico = (Collection<DebitoCobradoHistorico>) getControladorUtil().pesquisar(
						filtroDebitoCobradoHistorico, DebitoCobradoHistorico.class.getName());

		if(!Util.isVazioOrNulo(debitosCobradosHistorico)){

			Collection<Integer> tiposDebitoParcelamento = getControladorParcelamento().getTiposDebitoParcelamento();
			Collection<Integer> tiposDebitoAcrescimoImpontualidade = getControladorParcelamento().getTiposDebitoAcrescimoImpontualidade();
			Collection<Integer> tiposDebitoServicosEspeciais = getControladorParcelamento().getTiposDebitoServicosEspeciais();

			// Para cada débito cobrado em histórico selecionado
			for(DebitoCobradoHistorico debitoCobradoHistorico : debitosCobradosHistorico){

				// 2.1.4.1. Caso o débito cobrado seja uma parcela de um parcelamento (DBTP_ID
				// contido em (896,897,898,899,41,807,808,820,821,813,895) na tabela DEBITO_COBRADO
				// ou na tabela DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no
				// histórico) OU caso o débito cobrado corresponda à cobrança de acréscimos por
				// impontualidade (DBTP_ID contido em (2,64,65) na tabela DEBITO_COBRADO ou na
				// tabela DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no histórico) OU
				// caso o débito cobrado corresponda à cobrança de serviços especiais (DBTP_ID
				// contido em (8,26,NN) na tabela DEBITO_COBRADO ou na tabela
				// DEBITO_COBRADO_HISTORICO, caso o débito a cobrar esteja no histórico)
				if(debitoCobradoHistorico.getDebitoTipo() != null
								&& (tiposDebitoParcelamento.contains(debitoCobradoHistorico.getDebitoTipo().getId())
												|| tiposDebitoAcrescimoImpontualidade.contains(debitoCobradoHistorico.getDebitoTipo()
																.getId()) || tiposDebitoServicosEspeciais.contains(debitoCobradoHistorico
												.getDebitoTipo().getId()))){

					// 2.1.4.1.1. Marcar o débito cobrado em histórico como remunerável
					debitoCobradoHistorico.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					colecaoAtualizar.add(debitoCobradoHistorico);
				}
			}

			// Atualiza a coleção de débitos cobrados em histórico
			// getControladorUtil().atualizarColecaoObjetos(debitosCobradosHistorico);
		}

		return colecaoAtualizar;
	}

	/**
	 * Retorna os tipos de débito correspondentes a entrada de parcelamento, utilizados no Rotina
	 * batch: Marcar
	 * Itens Remuneráveis por Cobrança Administrativa
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 * @return Coleção de Ids de tipos de débito correspondentes a entrada de parcelamento
	 */
	private Collection<Integer> getTiposDebitoEntradaParcelamento() throws ControladorException{

		Collection<Integer> tiposDebito = new ArrayList<Integer>();

		if(DebitoTipo.ENTRADA_PARCELAMENTO != null){
			tiposDebito.add(DebitoTipo.ENTRADA_PARCELAMENTO);
		}
		if(DebitoTipo.ENTRADA_PARCELAMENTO_COBRANCA_ADMINISTRATIVA != null){
			tiposDebito.add(DebitoTipo.ENTRADA_PARCELAMENTO_COBRANCA_ADMINISTRATIVA);
		}

		return tiposDebito;
	}

	/**
	 * [UC0252] - Consultar Parcelamentos de Débitos
	 * [SB0001] - Verificar possibilidade de desfazer o parcelamento
	 * 
	 * @param parcelamento
	 * @return
	 * @throws ControladorException
	 */

	public boolean podeDesfazer(Parcelamento parcelamento) throws ControladorException{

		// 1. O sistema verifica se é possível desfazer o parcelamento de acordo com as seguintes
		// regras:
		boolean podeDesfazer = false;

		// Retorna o único objeto da tabela sistemaParametro
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		Integer anoMesEfetivacaoParcelamento = Util.getAnoMesComoInteger(parcelamento.getParcelamento());
		Integer anoMesArrecadacaoCorrente = sistemaParametro.getAnoMesArrecadacao();


		// 1.1. Caso o mês/ano de efetivação do parcelamento de débitos seja igual ou superior ao
		// mês/ano de arrecadação corrente
		// e o parcelamento esteja com situação normal (MÊS/ANO do PARC_TMPARCELAMENTO da tabela
		// PARCELAMENTO maior ou igual ao PARM_AMREFERENCIAARRECADACAO da
		// tabela SISTEMA_PARAMETROS e PCST_ID com o valor correspondente a normal da tabela
		// PARCELAMENTO_SITUACAO):

		if((anoMesEfetivacaoParcelamento >= anoMesArrecadacaoCorrente)
						&& (parcelamento.getParcelamentoSituacao().getId().intValue() == ParcelamentoSituacao.NORMAL.intValue())){


			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.PARCELAMENTO_ID, parcelamento.getId()));

			// Verifica se todos os debitos nao possuem prestacoes cobradas
			Collection<DebitoACobrar> colecaoDebitoACobrar = getControladorUtil().pesquisar(filtroDebitoACobrar,
							DebitoACobrar.class.getName());

			// 1.1.1. Caso o parcelamento tenha sido cobrado por meio de débito a cobrar (existe
			// ocorrência na tabela DEBITO_A_COBRAR com PARC_ID=PARC_ID da tabela PARCELAMENTO):
			// pesquisa para descobrir o numero de prestações cobradas

			if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
				boolean isPrestacaoCobradas = false;

				if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
					Iterator<DebitoACobrar> dadosdebitoACobrar = colecaoDebitoACobrar.iterator();

					while(dadosdebitoACobrar.hasNext()){
						DebitoACobrar debitoACobrar = dadosdebitoACobrar.next();
						if(debitoACobrar.getNumeroPrestacaoCobradas() != 0){
							isPrestacaoCobradas = true;
							break;
						}
					}
				}

				// 1.1.1.1. Caso nenhuma parcela tenha sido cobrada (DBAC_NNPRESTACAOCOBRADAS=0 da
				// tabela DEBITO_A_COBRAR com PARC_ID da tabela PARCELAMENTO):
				if(!isPrestacaoCobradas){

					// 1.1.1.1.1. Caso não exista entrada (PARC_VLENTRADA = 0 ou nulo):
					if((parcelamento.getValorEntrada() == null || parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) == 0)){
						// 1.1.1.1.1.1. O sistema permite desfazer o parcelamento.
						// 1.1.1.1.1.2. Retornar para o passo correspondente no fluxo.
						podeDesfazer = true;
					}else{
						// 1.1.1.1.2. Caso contrário, ou seja, existe entrada (PARC_VLENTRADA > 0):

						if((parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) > 0)){

							boolean houvePagamento = false;
							// 1.1.1.1.2.1. Caso a entrada seja uma guia e não tenha sido paga
							// ((PARC_ID=PARC_ID, GPAG_NNPRESTACAOTOTAL=1,
							// PARC_VLENTRADA=GPAG_VLDEBITO da tabela GUIA_PAGAMENTO e não existe
							// registro
							// na tabela PAGAMENTO com GPAG_ID=GPAG_ID)

							GuiaPagamento guiaPagamento;
							GuiaPagamentoHistorico guiaPagamentoHistorico;
							try{
								guiaPagamento = repositorioCobranca.obterGuiaPagamentoDoParcelamento(parcelamento.getId());

								if(guiaPagamento != null && guiaPagamento.getNumeroPrestacaoTotal().equals(Short.valueOf("1"))
												&& guiaPagamento.getValorDebito().compareTo(parcelamento.getValorEntrada()) == 0){
									// E não existe registro na tabela PAGAMENTO com
									// GPAG_ID=GPAG_ID)
									Collection<Pagamento> collPagamento = this.getControladorArrecadacao()
													.selecionarPagamentoPorGuiaPagamento(guiaPagamento.getId(), 1);

									if(collPagamento != null && !collPagamento.isEmpty()){
										houvePagamento = true;
									}

								}

								guiaPagamentoHistorico = repositorioCobranca
												.obterGuiaPagamentoHistoricoDoParcelamento(parcelamento.getId());

								// OU (PARC_ID=PARC_ID, GPHI_NNPRESTACAOTOTAL=1,
								// PARC_VLENTRADA=GPHI_VLDEBITO da tabela GUIA_PAGAMENTO_HISTORICO e
								// não
								// existe registro na tabela PAGAMENTO_HITORICO com
								// GPAG_ID=GPAG_ID))
								if(guiaPagamentoHistorico != null
												&& guiaPagamentoHistorico.getNumeroPrestacaoTotal().equals(Short.valueOf("1"))
												&& guiaPagamentoHistorico.getValorDebito().compareTo(parcelamento.getValorEntrada()) == 0){
									Collection collPagamentoHistorico = null;
									// E não existe registro na tabela PAGAMENTO com
									// GPAG_ID=GPAG_ID)
									collPagamentoHistorico = this.getControladorArrecadacao()
													.selecionarPagamentoHistoricoPorGuiaPagamentoHistorico(guiaPagamentoHistorico.getId());

									if(collPagamentoHistorico != null && !collPagamentoHistorico.isEmpty()){
										houvePagamento = true;
									}

								}

								// caso a entrada seja uma conta e não tenha sido paga
								// ((PARC_ID=PARC_ID, PARC_VLENTRADA=((CNTA_VLAGUA+ CNTA_VLESGOTO+
								// CNTA_VLDEBITOS) - (CNTA_VLCREDITOS+CNTA_VLIMPOSTOS)) da tabela
								// CONTA e
								// não existe registro na tabela PAGAMENTO com CNTA_ID=CNTA_ID)
								FiltroConta filtroConta = new FiltroConta();
								filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, parcelamento.getImovel().getId()));
								filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, parcelamento.getId()));
								Conta conta = null;
								Collection collPagamento = null;
								Collection colecaoConta = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
								if(colecaoConta != null && !colecaoConta.isEmpty()){
									Iterator iteratorConta = colecaoConta.iterator();
									while(iteratorConta.hasNext()){
										conta = (Conta) iteratorConta.next();
										if(conta.getValorTotalContaBigDecimal().compareTo(parcelamento.getValorEntrada()) == 0){
											collPagamento = this.getControladorArrecadacao().selecionarPagamentoPorConta(conta.getId());
											if(collPagamento != null && !collPagamento.isEmpty()){
												houvePagamento = true;
											}
										}
									}
								}

								// OU ((PARC_ID=PARC_ID, PARC_VLENTRADA=((CNHI_VLAGUA+
								// CNHI_VLESGOTO+
								// CNHI_VLDEBITOS) - (CNHI_VLCREDITOS+CNHI_VLIMPOSTOS))
								// da tabela CONTA_HISTORICO e não existe registro na tabela
								// PAGAMENTO_HISTORICO
								// com CNTA_ID=CNTA_ID)):

								FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
								filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.IMOVEL_ID, parcelamento
												.getImovel().getId()));
								filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.PARCELAMENTO_ID,
												parcelamento.getId()));
								Collection colecaoContaHistorico = getControladorUtil().pesquisar(filtroContaHistorico,
												ContaHistorico.class.getName());

								Collection collPagamentoHistorico = null;

								if(colecaoContaHistorico != null && !colecaoContaHistorico.isEmpty()){
									Iterator iteratorContaHistorico = colecaoContaHistorico.iterator();
									while(iteratorContaHistorico.hasNext()){

										ContaHistorico contaHistorico = null;
										contaHistorico = (ContaHistorico) iteratorContaHistorico.next();
										if(contaHistorico.getValorTotal().compareTo(parcelamento.getValorEntrada()) == 0){
											collPagamentoHistorico = this.getControladorArrecadacao()
															.selecionarPagamentoHistoricoPorContaHistorico(contaHistorico.getId());

											if(collPagamentoHistorico != null && !collPagamentoHistorico.isEmpty()){
												houvePagamento = true;
											}
										}

									}

								}

								if(houvePagamento){
									podeDesfazer = false;
								}else{
									podeDesfazer = true;
								}

							}catch(ErroRepositorioException e){
								e.printStackTrace();
								throw new ControladorException("erro.sistema", e);
							}

						}

					}

				}

			}else if(colecaoDebitoACobrar == null || colecaoDebitoACobrar.isEmpty()){
				// 1.1.2. Caso contrário (parcelamento não foi cobrado por meio de débito a cobrar
				// ou parcelamento foi cobrado por meio de débito a cobrar, mas não há débitos a
				// cobrar a serem lançados ou os débitos a cobrar foram parcelados):

				// 1.1.2.1. Caso o parcelamento tenha sido cobrado por meio de guias de pagamento
				// (existe ocorrência na tabela GUIA_PAGAMENTO com PARC_ID=PARC_ID da tabela
				// PARCELAMENTO

				boolean houvePagamento = false;

				FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
				filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, parcelamento.getId()));
				Collection colecaoGuiaPagamento = getControladorUtil().pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());

				if(colecaoGuiaPagamento != null){
					Iterator it = colecaoGuiaPagamento.iterator();
					while(it.hasNext()){
						GuiaPagamento guiaPagamento = (GuiaPagamento) it.next();
						FiltroPagamento filtroPagamento = new FiltroPagamento();
						filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamento.GUIA_PAGAMENTO_ID, guiaPagamento.getId()));
						Collection colecaoPagamento = getControladorUtil().pesquisar(filtroPagamento, Pagamento.class.getName());

						if(colecaoPagamento != null && !colecaoPagamento.isEmpty()){
							houvePagamento = true;
						}

						FiltroPagamentoHistorico filtroPagamentoHistorico = new FiltroPagamentoHistorico();
						filtroPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.GUIA_PAGAMENTO_ID,
										guiaPagamento.getId()));
						Collection colecaoPagamentoHistorico = getControladorUtil().pesquisar(filtroPagamentoHistorico,
										PagamentoHistorico.class.getName());

						if(colecaoPagamentoHistorico != null && !colecaoPagamentoHistorico.isEmpty()){
							houvePagamento = true;
						}

					}

					// caso a entrada seja uma conta e não tenha sido paga
					// ((PARC_ID=PARC_ID, PARC_VLENTRADA=((CNTA_VLAGUA+ CNTA_VLESGOTO+
					// CNTA_VLDEBITOS) - (CNTA_VLCREDITOS+CNTA_VLIMPOSTOS)) da tabela
					// CONTA e
					// não existe registro na tabela PAGAMENTO com CNTA_ID=CNTA_ID)
					FiltroConta filtroConta = new FiltroConta();
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, parcelamento.getImovel().getId()));
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, parcelamento.getId()));
					Conta conta = null;
					Collection collPagamento = null;
					Collection colecaoConta = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
					if(colecaoConta != null && !colecaoConta.isEmpty()){
						Iterator iteratorConta = colecaoConta.iterator();
						while(iteratorConta.hasNext()){
							conta = (Conta) iteratorConta.next();
							if(conta.getValorTotalContaBigDecimal().compareTo(parcelamento.getValorEntrada()) == 0){
								collPagamento = this.getControladorArrecadacao().selecionarPagamentoPorConta(conta.getId());
								if(collPagamento != null && !collPagamento.isEmpty()){
									houvePagamento = true;
								}
							}
						}
					}

					// OU ((PARC_ID=PARC_ID, PARC_VLENTRADA=((CNHI_VLAGUA+
					// CNHI_VLESGOTO+
					// CNHI_VLDEBITOS) - (CNHI_VLCREDITOS+CNHI_VLIMPOSTOS))
					// da tabela CONTA_HISTORICO e não existe registro na tabela
					// PAGAMENTO_HISTORICO
					// com CNTA_ID=CNTA_ID)):

					FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
					filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.IMOVEL_ID, parcelamento.getImovel()
									.getId()));
					filtroContaHistorico
									.adicionarParametro(new ParametroSimples(FiltroContaHistorico.PARCELAMENTO_ID, parcelamento.getId()));
					Collection colecaoContaHistorico = getControladorUtil().pesquisar(filtroContaHistorico, ContaHistorico.class.getName());

					Collection collPagamentoHistorico = null;

					if(colecaoContaHistorico != null && !colecaoContaHistorico.isEmpty()){
						Iterator iteratorContaHistorico = colecaoContaHistorico.iterator();
						while(iteratorContaHistorico.hasNext()){

							ContaHistorico contaHistorico = null;
							contaHistorico = (ContaHistorico) iteratorContaHistorico.next();
							if(contaHistorico.getValorTotal().compareTo(parcelamento.getValorEntrada()) == 0){
								collPagamentoHistorico = this.getControladorArrecadacao().selecionarPagamentoHistoricoPorContaHistorico(
												contaHistorico.getId());

								if(collPagamentoHistorico != null && !collPagamentoHistorico.isEmpty()){
									houvePagamento = true;
								}
							}

						}

					}

					// 1.1.2.1.1. Caso alguma guia tenha sido pago (existe registro na tabela
					// PAGAMENTO com GPAG_ID=GPAG_ID ou existe registro na tabela PAGAMENTO_HITORICO
					// com GPAG_ID=GPAG_ID):

					if(houvePagamento){
						// 1.1.2.1.1.1. O sistema não permite desfazer o parcelamento.
						podeDesfazer = false;
					}else{
						// 1.1.2.1.2. Caso contrário, ou seja, nenhuma guia tenha sido pago:
						Collection colecaoBoletoBancario1 = null;
						Collection colecaoBoletoBancario2 = null;

						FiltroBoletoBancario filtroBoletoBancario = new FiltroBoletoBancario();
						filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.PARCELAMENTO_ID, parcelamento
										.getId()));
						filtroBoletoBancario.adicionarParametro(new ParametroNaoNulo(FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
						filtroBoletoBancario.adicionarParametro(new ParametroNulo(FiltroBoletoBancario.BOLETOBANCARIO_ID_ORIGINAL));

						Collection colecaoBoletoBancario = getControladorUtil().pesquisar(filtroBoletoBancario,
										BoletoBancario.class.getName());

						// 1.1.2.1.2.1. Caso o parcelamento seja referente à cobrança bancária
						// (existe ocorrência na tabela BOLETO_BANCARIO com PARC_ID=PARC_ID da
						// tabela PARCELAMENTO e CBDO_ID diferente de nulo e BBCO_IDORIGINAL com o
						// valor nulo):
						if(colecaoBoletoBancario != null && !colecaoBoletoBancario.isEmpty()){
							Iterator ittt = colecaoBoletoBancario.iterator();
							while(it.hasNext()){
								BoletoBancario boletoBancario = (BoletoBancario) ittt.next();

								FiltroBoletoBancario filtroBoleto1 = new FiltroBoletoBancario();
								filtroBoleto1.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.BOLETOBANCARIO_ID_ORIGINAL,
												boletoBancario.getId()));
								filtroBoleto1.adicionarParametro(new ParametroNaoNulo(FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
								filtroBoleto1.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.PARCELAMENTO_ID, parcelamento
												.getId()));

								colecaoBoletoBancario1 = getControladorUtil().pesquisar(filtroBoleto1, BoletoBancario.class.getName());

								FiltroBoletoBancario filtroBoleto2 = new FiltroBoletoBancario();
								filtroBoleto1.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.BOLETOBANCARIO_ID_ORIGINAL,
												boletoBancario.getId()));
								filtroBoleto2.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroBoletoBancario.SITUACAO_ATUAL_ID,
												BoletoBancarioSituacao.BAIXA, FiltroParametro.CONECTOR_OR, 2));
								filtroBoleto2.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroBoletoBancario.SITUACAO_ATUAL_ID,
												BoletoBancarioSituacao.CANCELADO));
								filtroBoleto2.adicionarParametro(new ParametroNaoNulo(FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
								filtroBoleto2.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.PARCELAMENTO_ID, parcelamento
												.getId()));

								colecaoBoletoBancario2 = getControladorUtil().pesquisar(filtroBoleto2, BoletoBancario.class.getName());

							}
						}

						// 1.1.2.1.2.1.1. Caso os boletos das parcelas não tenham sido gerados (não
						// existe ocorrência na tabela BOLETO_BANCARIO com BBCO_IDORIGINAL=BBCO_ID
						// da tabela BOLETO_BANCARIO com CBDO_ID diferente de nulo e PARC_ID=PARC_ID
						// da tabela PARCELAMENTO) OU os boletos tenham sido gerados, mas estejam
						// cancelados ou baixados (não existe ocorrência na tabela BOLETO_BANCARIO
						// com BBST_IDATUAL diferente de 7 ou 9 com BBCO_IDORIGINAL=BBCO_ID da
						// tabela BOLETO_BANCARIO com CBDO_ID diferente de nulo e PARC_ID=PARC_ID da
						// tabela PARCELAMENTO):
						if(colecaoBoletoBancario1 == null || colecaoBoletoBancario2 == null){
							podeDesfazer = true;
						}else{
							podeDesfazer = false;
						}
					}
					}
			}else{
				// 1.1.2.2. Caso contrário (parcelamento não foi cobrado por meio de débito a cobrar
				// ou parcelamento foi cobrado por meio de débito a cobrar, mas não há débitos a
				// cobrar a serem lançados ou os débitos a cobrar foram parcelados ou parcelamento
				// não foi cobrado por meio de guia ou parcelamento foi cobrado por meio de guia,
				// mas não há guias pendentes ou as guias foram parceladas):

				// 1.1.2.2.1. O sistema não permite desfazer o parcelamento.
				podeDesfazer = false;
				}

		}

		return podeDesfazer;
	}

	/**
	 * @param colecaoDebitoACobrar
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void cancelarCreditoARealizarParcelamentoComConcessaoDesconto(Collection<DebitoACobrar> colecaoDebitoACobrar,
					Usuario usuarioLogado) throws ControladorException{

		// 6.1.4 Para cada débito a cobrar

		if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
			Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

			Integer idParcelamentoAnterior = 0;

			while(debitoACobrarValores.hasNext()){

				DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

				if(debitoACobrar.getParcelamento() != null){

					if(idParcelamentoAnterior.compareTo(debitoACobrar.getParcelamento().getId()) != 0){
						idParcelamentoAnterior = debitoACobrar.getParcelamento().getId();

						BigDecimal valorDesconto;
						try{
							valorDesconto = repositorioCobranca.obterValorDescontosAcrescimos(debitoACobrar.getParcelamento().getId());

							if(valorDesconto != null && valorDesconto.compareTo(BigDecimal.ZERO) > 0){
								try{
									Collection colCreditoARealizar = repositorioCobranca
													.obterCreditoARealizarParcelamentoComConcessaoDesconto(debitoACobrar.getParcelamento()
																	.getId());

									String[] ids = new String[colCreditoARealizar.size()];
									Iterator it = colCreditoARealizar.iterator();
									int i = 0;
									while(it.hasNext()){
										CreditoARealizar crar = (CreditoARealizar) it.next();
										ids[i] = crar.getId().toString();
										i++;
									}

									if(ids.length > 0){
										this.getControladorFaturamento().cancelarCreditoARealizar(ids, debitoACobrar.getImovel(),
														usuarioLogado, true);
									}

								}catch(ErroRepositorioException e){
									sessionContext.setRollbackOnly();
									throw new ControladorException("erro.sistema", e);
								}

							}

						}catch(ErroRepositorioException e1){
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

					}

				}

			}

		}

	}

	private Map<Categoria, BigDecimal> distribuirEstornoParcelamentoPorCategoria(Collection<Categoria> colecaoCategoria,
					BigDecimal valorEstorno){

		Map<Categoria, BigDecimal> retorno = new HashMap<Categoria, BigDecimal>();

		if(!Util.isVazioOrNulo(colecaoCategoria)){

			// 2.1. [UC0185] Obter Valor por Categoria
			Collection<BigDecimal> colecaoValorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoria, valorEstorno);

			if(!Util.isVazioOrNulo(colecaoValorCategoria)){

				Iterator<BigDecimal> colecaoValorCategoriaIterator = colecaoValorCategoria.iterator();
				BigDecimal valorCategoria = null;

				for(Categoria categoria : colecaoCategoria){

					if(colecaoValorCategoriaIterator.hasNext()){
						valorCategoria = colecaoValorCategoriaIterator.next();
						if(valorCategoria != null && valorCategoria.compareTo(BigDecimal.ZERO) > 0){
							retorno.put(categoria, valorCategoria);
						}
					}
				}
			}
		}

		return retorno;

	}


	/**
	 * [SB0039] - Calcular Valor do Estorno de Descontos Concedidos em Parcelamentos Anteriores
	 * 
	 * @author Yara Souza
	 * @throws ControladorException
	 * @date 19/01/2013
	 * @param colecaoContaValores
	 * @return
	 * @throws ControladorException
	 */

	public Object[] calcularValorEstornoDescontosConcedidosEmParcAnteriores(Collection<ContaValoresHelper> colecaoContaValores)
					throws ControladorException{

		Object[] retorno = new Object[2];

		BigDecimal valorEstorno = BigDecimal.ZERO;
		Collection colCreditoRealizadoRetorno = new ArrayList();

		// 1. Para cada conta da lista de contas em débito cujo indicador de que a conta já foi paga
		// não esteja marcado (NB) e que o indicador de entrada de parcelamento também não esteja
		// marcado (EP) e com valor de crédito (CNTA_VLCREDITO com o valor diferente de nulo e de
		// zero):

		Iterator it = colecaoContaValores.iterator();
		while(it.hasNext()){
			ContaValoresHelper contaValoresHelper = (ContaValoresHelper) it.next();

			if(contaValoresHelper.getIndicadorContasDebito() == null
							&& (contaValoresHelper.getConta().getValorCreditos() != null && contaValoresHelper.getConta()
											.getValorCreditos().compareTo(BigDecimal.ZERO) > 0)){

				// 1.1. Caso exista crédito realizado correspondente a desconto nos acréscimos por
				// impontualidade (existe ocorrência na tabela CREDITO_REALIZADO com CNTA_ID=Id da
				// conta
				// parcelada e CRTI_ID=(CRTI_ID da tabela CREDITO_TIPO com CRTI_DSCREDITOTIPO="DESC
				// ACRESC.
				// IMP.")):

				try{

					Collection colCreditoRealizado = repositorioCobranca.obterCreditoRealizadoPorCreditoTipo(
									CreditoTipo.DESCONTO_ACRESCIMOS_IMPONTUALIDADE, contaValoresHelper.getConta().getId());

					// 1.1.1. Valor do Estorno de Descontos Concedidos em Parcelamentos Anteriores =
					// Valor do
					// Estorno de Descontos Concedidos em Parcelamentos Anteriores mais
					// CRRZ_VLCREDITO.

					Iterator itt = colCreditoRealizado.iterator();
					while(itt.hasNext()){

						CreditoRealizado creditoRealizado = (CreditoRealizado) itt.next();
						valorEstorno = valorEstorno.add(creditoRealizado.getValorCredito());
						colCreditoRealizadoRetorno.add(creditoRealizado);
					}

				}catch(ErroRepositorioException e){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}

			}
		}

		retorno[0] = valorEstorno;
		retorno[1] = colCreditoRealizadoRetorno;

		return retorno;

	}

	// ****************************************************************************
	// Jogar para o fim do controlador dps
	// ****************************************************************************

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#obterPeriodoDebitoParcelmento(java.lang.Integer)
	 */
	public Map<String, Integer> obterPeriodoDebitoParcelmento(Integer idParcelamento) throws ControladorException{

		Collection<ContaHistorico> collContaHistorico = new ArrayList<ContaHistorico>();
		Collection<GuiaPagamentoPrestacaoHistorico> collGuiaPagamentoPrestacaoHistorico = new ArrayList<GuiaPagamentoPrestacaoHistorico>();
		Collection<DebitoACobrarHistorico> collDebitoACobrarHistorico = new ArrayList<DebitoACobrarHistorico>();

		FiltroParcelamentoItem filtroParcelamentoItem = new FiltroParcelamentoItem();
		filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral");
		filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("guiaPagamentoGeral");
		filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral");
		filtroParcelamentoItem.adicionarParametro(new ParametroSimples(FiltroParcelamentoItem.PARCELAMENTO_ID, idParcelamento));

		Collection<ParcelamentoItem> collParcelamentoItem = this.getControladorUtil().pesquisar(filtroParcelamentoItem,
						ParcelamentoItem.class.getName());

		for(ParcelamentoItem parcelamentoItem : collParcelamentoItem){

			if(parcelamentoItem.getContaGeral() != null){

				FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
				filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, parcelamentoItem.getContaGeral()
								.getId()));

				ContaHistorico contaHistorico = (ContaHistorico) Util.retonarObjetoDeColecao(this.getControladorUtil().pesquisar(
								filtroContaHistorico, ContaHistorico.class.getName()));

				if(contaHistorico != null){

					collContaHistorico.add(contaHistorico);

				}

			}

			if(parcelamentoItem.getGuiaPagamentoGeral() != null){

				FiltroGuiaPagamentoPrestacaoHistorico filtroGuiaPagamentoPrestacaoHistorico = new FiltroGuiaPagamentoPrestacaoHistorico();
				filtroGuiaPagamentoPrestacaoHistorico.adicionarParametro(new ParametroSimples(
								FiltroGuiaPagamentoPrestacaoHistorico.GUIA_PAGAMENTO_ID, parcelamentoItem.getGuiaPagamentoGeral().getId()));
				filtroGuiaPagamentoPrestacaoHistorico.adicionarParametro(new ParametroSimples(
								FiltroGuiaPagamentoPrestacaoHistorico.NUMERO_PRESTACAO, parcelamentoItem.getNumeroPrestacao()));

				Collection<GuiaPagamentoPrestacaoHistorico> coll = this.getControladorUtil().pesquisar(
								filtroGuiaPagamentoPrestacaoHistorico, GuiaPagamentoPrestacaoHistorico.class.getName());

				if(!coll.isEmpty()){

					collGuiaPagamentoPrestacaoHistorico.addAll(coll);

				}

			}

			if(parcelamentoItem.getDebitoACobrarGeral() != null){

				FiltroDebitoACobrarHistorico filtroDebitoAcobrarHistorico = new FiltroDebitoACobrarHistorico();
				filtroDebitoAcobrarHistorico.adicionarParametro(new ParametroSimples(FiltroDebitoACobrarHistorico.ID, parcelamentoItem
								.getDebitoACobrarGeral().getId()));

				DebitoACobrarHistorico debitoACobrarHistorico = (DebitoACobrarHistorico) Util.retonarObjetoDeColecao(this
								.getControladorUtil().pesquisar(filtroDebitoAcobrarHistorico, DebitoACobrarHistorico.class.getName()));

				if(debitoACobrarHistorico != null){

					collDebitoACobrarHistorico.add(debitoACobrarHistorico);

				}

			}

		}

		Integer maiorRef = null;
		Integer menorRef = null;

		for(ContaHistorico contaHistorico : collContaHistorico){

			maiorRef = this.obterMaiorMenorRef(maiorRef, contaHistorico.getAnoMesReferenciaConta(), Boolean.TRUE);
			menorRef = this.obterMaiorMenorRef(menorRef, contaHistorico.getAnoMesReferenciaConta(), Boolean.FALSE);

		}

		for(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico : collGuiaPagamentoPrestacaoHistorico){

			Integer anoMesRef = Util.getAnoMesComoInteger(guiaPagamentoPrestacaoHistorico.getDataVencimento());

			maiorRef = this.obterMaiorMenorRef(maiorRef, anoMesRef, Boolean.TRUE);
			menorRef = this.obterMaiorMenorRef(menorRef, anoMesRef, Boolean.FALSE);

		}

		for(DebitoACobrarHistorico debitoACobrarHistorico : collDebitoACobrarHistorico){

			maiorRef = this.obterMaiorMenorRef(maiorRef, debitoACobrarHistorico.getAnoMesReferenciaDebito(), Boolean.TRUE);
			menorRef = this.obterMaiorMenorRef(menorRef, debitoACobrarHistorico.getAnoMesReferenciaDebito(), Boolean.FALSE);

		}

		Map<String, Integer> retorno = new HashMap<String, Integer>();
		retorno.put("menorReferencia", menorRef);
		retorno.put("maiorReferencia", maiorRef);

		return retorno;

	}

	private Integer obterMaiorMenorRef(Integer maiorMenorRefCorrente, Integer referenciaCorrente, Boolean maiorReferencia){

		if(maiorReferencia){

			if(maiorMenorRefCorrente != null){

				if(maiorMenorRefCorrente < referenciaCorrente){

					maiorMenorRefCorrente = referenciaCorrente;

				}

			}else{

				maiorMenorRefCorrente = referenciaCorrente;

			}

		}else{

			if(maiorMenorRefCorrente != null){

				if(maiorMenorRefCorrente > referenciaCorrente){

					maiorMenorRefCorrente = referenciaCorrente;

				}

			}else{

				maiorMenorRefCorrente = referenciaCorrente;

			}

		}

		return maiorMenorRefCorrente;

	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * [SB0001] - Realizar o arrasto das parcelas restantes
	 * 
	 * @param debitoACobrarDeParcelamentoHelper
	 * @param indicadorArrasto
	 * @throws ControladorException
	 */

	private Object[] realizarArrastoParcelasRestantes(DebitoACobrarParcelamentoHelper debitoACobrarDeParcelamentoHelper,
					boolean indicadorArrasto, BigDecimal valorTotalDebitos) throws ControladorException{

		Object[] retorno = new Object[6];

		BigDecimal valorTotalRestante = BigDecimal.ZERO;

		Integer idParcelamento = debitoACobrarDeParcelamentoHelper.getIdParcelamento();
		Map<DebitoCobrado, Collection> mapDebitosCobrados = null;
		Collection<DebitoACobrar> colecaoDebitoACobrar = null;
		Collection<Pagamento> colecaoPagamento = null;
		Collection<DebitoACobrar> colecaoDebitoACobrarParaHistorico = new ArrayList<DebitoACobrar>();
		Collection<ObjetoTransacao> colecaoDebitoACobrarContabilizacao = new ArrayList<ObjetoTransacao>();
		Collection<DebitoACobrarCategoria> colecaoDebitoACobrarCategoria = null;
		Collection<Categoria> colecaoCategoriasObterValor = null;
		Collection colecaoCategoriasCalculadasValor = null;
		Collection<DebitoCobradoCategoria> colecaoDebitosCobradoCategoria = null;

		Iterator colecaoCategoriasCalculadasValorIterator = null;
		Iterator colecaoCategoriasObterValorIterator = null;

		Categoria categoria = null;
		Categoria categoriaAux = null;

		DebitoCobradoCategoriaPK debitoCobradoCategoriaPK = null;
		DebitoCobradoCategoria debitoCobradoCategoria = null;

		if(idParcelamento != null){
			colecaoDebitoACobrar = this.obterDebitoACobrarAtivoAssociadoParcelamento(idParcelamento);
		}else{
			LOGGER.info("2-->IMOVEL:" + debitoACobrarDeParcelamentoHelper.getIdImovel());

			colecaoDebitoACobrar = this.obterDebitoACobrarAtivoAssociado(debitoACobrarDeParcelamentoHelper.getAnoMesReferenciaDebito(),
							debitoACobrarDeParcelamentoHelper.getNumeroPrestacaoDebito(),
							debitoACobrarDeParcelamentoHelper.getNumeroPrestacaoCobrada(), debitoACobrarDeParcelamentoHelper.getIdImovel());
		}

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		Integer anoMesFaturamento = sistemaParametro.getAnoMesFaturamento();

		if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){

			mapDebitosCobrados = new HashMap<DebitoCobrado, Collection>();

			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){

				// .................................................................................................................
				// Verificar para cada dpebito a lançar a partir da data de criação do débito a
				// cobrar,
				// se considerado o número de dias de suspensão a data obtida supera a data
				// corrente.
				// Nesse caso o débito a cobrar não será lançado na conta a ser faturada,
				// permanecendo até expiração do prazo.
				if(debitoACobrar.getNumeroDiasSuspensao() != null && debitoACobrar.getGeracaoDebito() != null){
					Date dataDebito = Util.adicionarNumeroDiasDeUmaData(debitoACobrar.getGeracaoDebito(),
									debitoACobrar.getNumeroDiasSuspensao());
					if(Util.compararData(dataDebito, new Date()) > 0){
						continue;
					}
				}
				// .................................................................................................................

				Integer idDebitoACobrar = debitoACobrar.getId();

				LancamentoItemContabil lancamentoItemContabil = debitoACobrar.getLancamentoItemContabil();

				if(lancamentoItemContabil != null){
					indicadorArrasto = true;

					Integer idLancamentoItemContabil = lancamentoItemContabil.getId();

					if(!idLancamentoItemContabil.equals(LancamentoItemContabil.JUROS_DO_PARCELAMENTO)){

						valorTotalRestante = debitoACobrar.getValorTotal();

						// [SB0002] - Gerar Débito Cobrado
						DebitoCobrado debitoCobrado = new DebitoCobrado();
						debitoCobrado.setDebitoTipo(debitoACobrar.getDebitoTipo());
						debitoCobrado.setDebitoCobrado(new Date());
						debitoCobrado.setLancamentoItemContabil(debitoACobrar.getLancamentoItemContabil());
						debitoCobrado.setLocalidade(debitoACobrar.getLocalidade());
						debitoCobrado.setQuadra(debitoACobrar.getQuadra());
						debitoCobrado.setCodigoSetorComercial(debitoACobrar.getCodigoSetorComercial());
						debitoCobrado.setNumeroQuadra(debitoACobrar.getNumeroQuadra());
						debitoCobrado.setNumeroLote(debitoACobrar.getNumeroLote());
						debitoCobrado.setNumeroSubLote(debitoACobrar.getNumeroSubLote());
						debitoCobrado.setAnoMesReferenciaDebito(debitoACobrar.getAnoMesReferenciaDebito());
						debitoCobrado.setAnoMesCobrancaDebito(debitoACobrar.getAnoMesCobrancaDebito());
						debitoCobrado.setValorPrestacao(valorTotalRestante);
						debitoCobrado.setNumeroPrestacao(debitoACobrar.getNumeroPrestacaoDebito());
						debitoCobrado.setNumeroPrestacaoDebito(debitoACobrar.getNumeroPrestacaoDebito());
						debitoCobrado.setFinanciamentoTipo(debitoACobrar.getFinanciamentoTipo());
						debitoCobrado.setParcelamento(debitoACobrar.getParcelamento());
						debitoCobrado.setParcelamentoGrupo(debitoACobrar.getParcelamentoGrupo());

						// Pesquisa os debitos a cobrar categoria do debito a
						// cobrar
						colecaoDebitoACobrarCategoria = this.getControladorFaturamento().obterDebitoACobrarCategoria(idDebitoACobrar);

						colecaoDebitosCobradoCategoria = new ArrayList<DebitoCobradoCategoria>();

						if(!Util.isVazioOrNulo(colecaoDebitoACobrarCategoria)){
							colecaoCategoriasObterValor = new ArrayList<Categoria>();

							// Obtém as categorias
							for(DebitoACobrarCategoria debitoACobrarCategoria : colecaoDebitoACobrarCategoria){
								categoria = new Categoria();

								categoriaAux = debitoACobrarCategoria.getCategoria();
								Integer idCategoriaAux = categoriaAux.getId();
								categoria.setId(idCategoriaAux);

								Integer quantidadeEconomia = debitoACobrarCategoria.getQuantidadeEconomia();
								categoria.setQuantidadeEconomiasCategoria(quantidadeEconomia);

								colecaoCategoriasObterValor.add(categoria);
							}

							// [UC0185] Obter Valor por Categoria
							colecaoCategoriasCalculadasValor = getControladorImovel().obterValorPorCategoria(colecaoCategoriasObterValor,
											valorTotalRestante);

							colecaoCategoriasCalculadasValorIterator = colecaoCategoriasCalculadasValor.iterator();
							colecaoCategoriasObterValorIterator = colecaoCategoriasObterValor.iterator();

							while(colecaoCategoriasCalculadasValorIterator.hasNext() && colecaoCategoriasObterValorIterator.hasNext()){
								BigDecimal valorPorCategoria = (BigDecimal) colecaoCategoriasCalculadasValorIterator.next();

								categoria = (Categoria) colecaoCategoriasObterValorIterator.next();
								Integer quantidadeEconomiasCategoria = categoria.getQuantidadeEconomiasCategoria();

								debitoCobradoCategoriaPK = new DebitoCobradoCategoriaPK();
								debitoCobradoCategoriaPK.setCategoria(categoria);
								debitoCobradoCategoriaPK.setDebitoCobrado(debitoCobrado);

								debitoCobradoCategoria = new DebitoCobradoCategoria();
								debitoCobradoCategoria.setComp_id(debitoCobradoCategoriaPK);
								debitoCobradoCategoria.setDebitoCobrado(debitoCobrado);
								debitoCobradoCategoria.setCategoria(categoria);
								debitoCobradoCategoria.setQuantidadeEconomia(quantidadeEconomiasCategoria);
								debitoCobradoCategoria.setValorCategoria(valorPorCategoria);

								colecaoDebitosCobradoCategoria.add(debitoCobradoCategoria);
							}
						}

						// Armazena o Débito Cobrado e os Débitos Cobrar por
						// Categoria para inserir
						mapDebitosCobrados.put(debitoCobrado, colecaoDebitosCobradoCategoria);

						// Atualiza o Débito a Cobrar
						debitoACobrar.setNumeroPrestacaoCobradas(debitoACobrar.getNumeroPrestacaoDebito());
						debitoACobrar.setAnoMesReferenciaContabil(anoMesFaturamento);

						// Armazena o débito a cobrar para transferir histórico
						colecaoDebitoACobrarParaHistorico.add(debitoACobrar);

						valorTotalDebitos = valorTotalDebitos.add(valorTotalRestante);

					}else{
						// [SB0003] - Cancelar Débito a Cobrar

						DebitoCreditoSituacao debitoCreditoSituacaoCancelada = new DebitoCreditoSituacao();
						debitoCreditoSituacaoCancelada.setId(DebitoCreditoSituacao.CANCELADA);

						FiltroPagamento filtroPagamento = new FiltroPagamento();
						filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamento.DEBITO_A_COBRAR_ID, idDebitoACobrar));

						colecaoPagamento = this.getControladorUtil().pesquisar(filtroPagamento, Pagamento.class.getName());



						FiltroDebitoACobrarCategoria filtroDebitoACobrarCategoria = new FiltroDebitoACobrarCategoria();
						filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarCategoria.DEBITO_A_COBRAR);
						filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarCategoria.CATEGORIA);
						filtroDebitoACobrarCategoria.adicionarParametro(new ParametroSimples(
										FiltroDebitoACobrarCategoria.ID_DEBITO_A_COBRAR, idDebitoACobrar));

						colecaoDebitoACobrarCategoria = this.getControladorUtil().pesquisar(filtroDebitoACobrarCategoria,
										DebitoACobrarCategoria.class.getName());

						if(!Util.isVazioOrNulo(colecaoDebitoACobrarCategoria)){
							debitoACobrar.setDebitoACobrarCategorias(new HashSet<DebitoACobrarCategoria>(colecaoDebitoACobrarCategoria));
						}

						// Armazena o Débito a Coprar para Gerar/Atualizar
						// Resumo de
						// Faturamento
						colecaoDebitoACobrarContabilizacao.add(debitoACobrar);

						// Atualiza o Débito a Cobrar
						debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoCancelada);
						debitoACobrar.setAnoMesReferenciaContabil(anoMesFaturamento);

						// Armazena o débito a cobrar para transferir histórico
						colecaoDebitoACobrarParaHistorico.add(debitoACobrar);
					}
				}
			}
		}

		retorno[0] = valorTotalDebitos;
		LOGGER.info("valorTotalDebitos retorno = " + valorTotalDebitos);
		retorno[1] = mapDebitosCobrados;
		retorno[2] = indicadorArrasto;
		retorno[3] = colecaoDebitoACobrarContabilizacao;
		retorno[4] = colecaoDebitoACobrarParaHistorico;
		retorno[5] = colecaoPagamento;
		return retorno;

	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Obter débito a cobrar ativo associado a um parcelamento e que tenha prestações a serem
	 * cobradas
	 */
	public Collection<DebitoACobrar> obterDebitoACobrarAtivoAssociado(Integer anoMesReferenciaDebito, Integer numeroPrestacaoDebito,
					Integer numeroPrestacaoCobradas, Integer idImovel) throws ControladorException{

		Collection<DebitoACobrar> retorno = null;

		try{
			retorno = repositorioCobranca.obterDebitoACobrarAtivoAssociado(anoMesReferenciaDebito, numeroPrestacaoDebito,
							numeroPrestacaoCobradas, idImovel);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	public Collection pesquisarDebitoACobrarDeParcelamentoHelper(Integer idImovel) throws ControladorException{

		Collection<Object[]> colecao = null;
		Collection<DebitoACobrarParcelamentoHelper> colecaoHelper = new ArrayList<DebitoACobrarParcelamentoHelper>();
		DebitoACobrarParcelamentoHelper debitoACobrarParcelamentoHelper = null;
		try{
			colecao = repositorioCobranca.pesquisarDebitoACobrarParcelamentoHelper(idImovel);

			if(colecao != null && !colecao.isEmpty()){
				Iterator it = colecao.iterator();

				while(it.hasNext()){

					Object[] array = (Object[]) it.next();
					debitoACobrarParcelamentoHelper = new DebitoACobrarParcelamentoHelper();

					if(array[0] != null){
						debitoACobrarParcelamentoHelper.setAnoMesReferenciaDebito((Integer) array[0]);
					}

					if(array[1] != null){
						debitoACobrarParcelamentoHelper.setAnoMesCobrancaDebito((Integer) array[1]);
					}

					if(array[2] != null){
						debitoACobrarParcelamentoHelper.setNumeroPrestacaoDebito((Integer) array[2]);
					}

					if(array[3] != null){
						debitoACobrarParcelamentoHelper.setNumeroPrestacaoCobrada((Integer) array[3]);
					}

					if(array[4] != null){
						debitoACobrarParcelamentoHelper.setIdParcelamento((Integer) array[4]);
					}

					if(array[5] != null){
						debitoACobrarParcelamentoHelper.setIdImovel((Integer) array[5]);
					}

					colecaoHelper.add(debitoACobrarParcelamentoHelper);

				}
			}

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoHelper;
	}

	/**
	 * [UC0178] Religar Automaticamente Imóvel Cortado BATCH - Permite a
	 * Religação automática de imóveis cortados Author: Rafael Santos Data:
	 * 02/01/2006
	 * 
	 * @throws ControladorException
	 */
	public void religarAutomaticamenteImovelCortado() throws ControladorException{

		Collection colecaoMatriculasImoveis = null;

		String anoMesReferencia = getControladorUtil().pesquisarParametrosDoSistema().getAnoMesFaturamento() + "";

		Calendar data = new GregorianCalendar();
		data.set(Calendar.YEAR, Integer.valueOf(anoMesReferencia.substring(0, 4)).intValue());
		data.set(Calendar.MONTH, Integer.valueOf(anoMesReferencia.substring(4, 6)).intValue() - 1);
		data.set(Calendar.DATE, 31);
		data.add(Calendar.DATE, -60);

		try{
			colecaoMatriculasImoveis = repositorioCobranca.pesquisarImoveisCortados(LigacaoEsgotoSituacao.LIGADO.toString(),
							LigacaoAguaSituacao.CORTADO.toString(), data.getTime());
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoMatriculasImoveis != null && !colecaoMatriculasImoveis.isEmpty()){

			Iterator icolecaoMatriculasImoveis = colecaoMatriculasImoveis.iterator();

			// itera as matriculas dos imoveis, verificando cada um
			String idConsumoHistorico = null;
			while(icolecaoMatriculasImoveis.hasNext()){

				String id = ((Integer) icolecaoMatriculasImoveis.next()).toString();
				try{ // pesquisa do consumo historico
					idConsumoHistorico = repositorioCobranca.pesquisarImoveisHidrometroAguaConsumoFaturadoReal(id, anoMesReferencia,
									ConsumoTipo.REAL.toString(), LigacaoTipo.LIGACAO_AGUA.toString());
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				if(idConsumoHistorico != null){

					data.setTime(new Date());

					this.religarImovelCortado(id, LigacaoAguaSituacao.LIGADO.toString(), data.getTime());

				}else{// pesquisa agora o consumo historico com a data de
						// referencia de faturamento menos 1 mês
					data = new GregorianCalendar();
					data.set(Calendar.YEAR, Integer.valueOf(anoMesReferencia.substring(0, 4)).intValue());
					data.set(Calendar.MONTH, Integer.valueOf(anoMesReferencia.substring(4, 6)).intValue());
					data.add(Calendar.MONTH, -1);

					if((data.get(Calendar.MONTH) + 1) < 10){
						anoMesReferencia = data.get(Calendar.YEAR) + "0" + (data.get(Calendar.MONTH) + 1);
					}else{
						anoMesReferencia = data.get(Calendar.YEAR) + "" + (data.get(Calendar.MONTH) + 1);
					}
					try{
						idConsumoHistorico = repositorioCobranca.pesquisarImoveisHidrometroAguaConsumoFaturadoReal(id, anoMesReferencia,
										ConsumoTipo.REAL.toString(), LigacaoTipo.LIGACAO_AGUA.toString());
					}catch(ErroRepositorioException ex){
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", ex);
					}

					if(idConsumoHistorico != null){

						data.setTime(new Date());

						this.religarImovelCortado(id, LigacaoAguaSituacao.LIGADO.toString(), data.getTime());
					}
				}

				if(idConsumoHistorico == null){

					// obter debito do imovel ou cliente
					String anoMesArrecadacao = getControladorUtil().pesquisarParametrosDoSistema().getAnoMesArrecadacao() + "";

					Calendar dataArrecadacao = new GregorianCalendar();
					dataArrecadacao.set(Calendar.YEAR, Integer.valueOf(anoMesArrecadacao.substring(0, 4)).intValue());
					dataArrecadacao.set(Calendar.MONTH, Integer.valueOf(anoMesArrecadacao.substring(4, 6)).intValue() - 1);
					dataArrecadacao.set(Calendar.DATE, 30);
					dataArrecadacao.add(Calendar.MONTH, -1);

					Calendar dataInicioVencimentoDebito = new GregorianCalendar();
					dataInicioVencimentoDebito.set(Calendar.YEAR, 1);
					dataInicioVencimentoDebito.set(Calendar.MONTH, 0);
					dataInicioVencimentoDebito.set(Calendar.DATE, 1);

					StringBuffer dataFinalReferenciaDebito = new StringBuffer().append(dataArrecadacao.get(Calendar.YEAR)).append(
									Calendar.MONTH);

					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = this.obterDebitoImovelOuCliente(1, id, null, null,
									"000101", dataFinalReferenciaDebito.toString(), dataInicioVencimentoDebito.getTime(),
									dataArrecadacao.getTime(), 1, 2, 2, 2, 1, 1, 2, null, null, null, null, null, ConstantesSistema.SIM,
									ConstantesSistema.SIM, ConstantesSistema.SIM);

					if(obterDebitoImovelOuClienteHelper == null){

						data.setTime(new Date());

						this.religarImovelCortado(id, LigacaoAguaSituacao.LIGADO.toString(), data.getTime());
					}

				}
			}
		}
	}

	/**
	 * [UC0178] Religar Automaticamente Imóvel Cortado Auhtor: Rafael Santos Data: 03/01/2006
	 * 
	 * @param id
	 *            Matricula do Imovel
	 * @param situacaoAguaLigado
	 *            Situação Agua
	 * @param dataReligacaoAgua
	 *            Data Religacao Agua
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void religarImovelCortado(String id, String situacaoAguaLigado, Date dataReligacaoAgua) throws ControladorException{

		try{
			repositorioCobranca.religarImovelCortado(id, situacaoAguaLigado, dataReligacaoAgua);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Rafael Santos ,Rafael Santos, Pedro Alexandre
	 * @date 04/01/2006,22/03/2006,13/03/2007
	 * @author eduardo henrique
	 * @date 12/08/2008
	 *       Alteração na obtenção de Guias de Pagamento para o Imóvel / Cliente
	 * @author Saulo Lima
	 * @date 17/07/2009
	 *       Mudança no objeto 'GuiaPagamentoValoresHelper'
	 * @param indicadorDebito
	 * @param idImovel
	 * @param codigoCliente
	 * @param clienteRelacaoTipo
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorDebitoACobrar
	 * @param indicadorCreditoARealizar
	 * @param indicadorNotasPromissorias
	 * @param indicadorGuiasPagamento
	 * @param indicadorCalcularAcrescimoImpontualidade
	 * @param indicadorContas
	 * @return
	 * @throws ControladorException
	 */
	@SuppressWarnings("unused")
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente(int indicadorDebito, String idImovel, String codigoCliente,
					Integer clienteRelacaoTipo, String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito,
					Date anoMesInicialVencimentoDebito, Date anoMesFinalVencimentoDebito, int indicadorPagamento, int indicadorConta,
					int indicadorDebitoACobrar, int indicadorCreditoARealizar, int indicadorNotasPromissorias, int indicadorGuiasPagamento,
					int indicadorCalcularAcrescimoImpontualidade, Boolean indicadorContas, SistemaParametro sistemaParametro,
					Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Short indicadorConsiderarPagamentoNaoClassificado,
					Short multa, Short jurosMora, Short atualizacaoTarifaria) throws ControladorException{

		if(sistemaParametro == null){
			sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		}

		Collection idImoveis = null;

		String anoMesArrecadacao = sistemaParametro.getAnoMesArrecadacao() + "";

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = this.obterDebitoImovelOuClienteContas(indicadorDebito,
						idImovel, codigoCliente, clienteRelacaoTipo, anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito,
						anoMesInicialVencimentoDebito, anoMesFinalVencimentoDebito, indicadorPagamento, indicadorConta,
						indicadorCalcularAcrescimoImpontualidade, indicadorContas, anoMesArrecadacao, idImoveis, dataEmissaoDocumento,
						indicadorEmissaoDocumento, indicadorConsiderarPagamentoNaoClassificado, multa, jurosMora, atualizacaoTarifaria);

		Collection colecaoDebitosACobrar = null;

		// Indicador de Debito A Cobrar
		if(indicadorDebitoACobrar == 1){

			// caso imovel
			if(indicadorDebito == 1){

				try{
					// Verifica se o "Ano/Mês" de referência foi informado
					// Caso não tenha sido informado passa como nulo.
					Integer anoMesReferenciaInicial = anoMesInicialReferenciaDebito == null ? null : Integer
									.valueOf(anoMesInicialReferenciaDebito);
					Integer anoMesReferenciaFinal = anoMesFinalReferenciaDebito == null ? null : Integer
									.valueOf(anoMesFinalReferenciaDebito);

					colecaoDebitosACobrar = repositorioCobranca.pesquisarDebitosACobrarImovel(idImovel,
									DebitoCreditoSituacao.NORMAL.toString(), anoMesReferenciaInicial, anoMesReferenciaFinal);
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// caso cliente
			}else if(indicadorDebito == 2 || indicadorDebito == 3 || indicadorDebito == 4){
				try{
					// idImoveis =
					// repositorioCobranca.pesquisarIDImoveisClienteImovel(codigoCliente,clienteRelacaoTipo);
					if(idImoveis != null && !idImoveis.isEmpty()){
						colecaoDebitosACobrar = repositorioCobranca.pesquisarDebitosACobrarCliente(idImoveis,
										DebitoCreditoSituacao.NORMAL.toString());
					}
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
		}

		// adicionar os debitos a cobrar
		if(colecaoDebitosACobrar != null){

			Collection colecaoDebtiosACobrarNovos = new ArrayList();

			if(colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()){

				Iterator iteratorColecaoDebtosACobrar = colecaoDebitosACobrar.iterator();
				Integer idDebitoACobrar = null;
				FiltroDebitoACobrarCategoria filtroDebitoACobrarCategoria = null;

				while(iteratorColecaoDebtosACobrar.hasNext()){

					Object[] colecaoDebitosACobrarArray = (Object[]) iteratorColecaoDebtosACobrar.next();

					DebitoACobrar debitoACobrar = null;
					DebitoTipo debitoTipo = new DebitoTipo();

					if(colecaoDebitosACobrarArray[0] != null){
						debitoACobrar = (DebitoACobrar) colecaoDebitosACobrarArray[0];

						idDebitoACobrar = debitoACobrar.getId();

						filtroDebitoACobrarCategoria = new FiltroDebitoACobrarCategoria();
						filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarCategoria.DEBITO_A_COBRAR);
						filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarCategoria.CATEGORIA);
						filtroDebitoACobrarCategoria.adicionarParametro(new ParametroSimples(
										FiltroDebitoACobrarCategoria.ID_DEBITO_A_COBRAR, idDebitoACobrar));

						Collection<DebitoACobrarCategoria> colecaoDebitoACobrarCategoria = this.getControladorUtil().pesquisar(
										filtroDebitoACobrarCategoria, DebitoACobrarCategoria.class.getName());

						if(!Util.isVazioOrNulo(colecaoDebitoACobrarCategoria)){
							debitoACobrar.setDebitoACobrarCategorias(new HashSet<DebitoACobrarCategoria>(colecaoDebitoACobrarCategoria));
						}
					}

					if(colecaoDebitosACobrarArray[1] != null){
						debitoTipo.setDescricao((String) colecaoDebitosACobrarArray[1]);
						debitoACobrar.setDebitoTipo(debitoTipo);
					}

					if(colecaoDebitosACobrarArray[2] != null){
						debitoTipo.setId((Integer) colecaoDebitosACobrarArray[2]);
						debitoACobrar.setDebitoTipo(debitoTipo);
					}

					if(colecaoDebitosACobrarArray[5] != null){
						Parcelamento parcelamento = new Parcelamento();
						parcelamento.setId((Integer) colecaoDebitosACobrarArray[5]);
						debitoACobrar.setParcelamento(parcelamento);
					}

					BoletoBancario boletoBancario = null;
					try{
						boletoBancario = repositorioCobranca.obterBoletoBancarioDebito(debitoACobrar);
					}catch(ErroRepositorioException e){
						throw new ControladorException(e.getMessage());
					}

					if(boletoBancario != null){
						obterDebitoImovelOuClienteHelper.setIdBoletoBancario(boletoBancario.getId());
					}else{
						colecaoDebtiosACobrarNovos.add(debitoACobrar);
					}
				}

			}
			colecaoDebitosACobrar.clear();
			colecaoDebitosACobrar = null;

			obterDebitoImovelOuClienteHelper.setColecaoDebitoACobrar(colecaoDebtiosACobrarNovos);
		}

		Collection colecaoCreditosARealizar = null;

		// Indicador de Credito a Realizar
		if(indicadorCreditoARealizar == 1){

			// caso imovel
			if(indicadorDebito == 1){

				try{
					colecaoCreditosARealizar = repositorioCobranca.pesquisarCreditosARealizarImovel(idImovel,
									DebitoCreditoSituacao.NORMAL.toString());
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// caso cliente
			}else if(indicadorDebito == 2 || indicadorDebito == 3 || indicadorDebito == 4){
				try{

					// idImoveis =
					// repositorioCobranca.pesquisarIDImoveisClienteImovel(codigoCliente,clienteRelacaoTipo);
					if(idImoveis != null && !idImoveis.isEmpty()){
						colecaoCreditosARealizar = repositorioCobranca.pesquisarCreditosARealizarCliente(idImoveis,
										DebitoCreditoSituacao.NORMAL.toString());
					}
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
		}

		// Adciona os credtios a reliazar

		if(colecaoCreditosARealizar != null){

			Collection colecaoCreditosARealizarNovos = new ArrayList();

			if(colecaoCreditosARealizar != null && !colecaoCreditosARealizar.isEmpty()){

				Iterator iteratorcolecaoCreditosARealizar = colecaoCreditosARealizar.iterator();

				try{

					while(iteratorcolecaoCreditosARealizar.hasNext()){

						Object[] colecaoCreditosARealizarArray = (Object[]) iteratorcolecaoCreditosARealizar.next();

						CreditoARealizar creditoARealizar = null;

						if(colecaoCreditosARealizarArray[0] != null){
							creditoARealizar = (CreditoARealizar) colecaoCreditosARealizarArray[0];
						}

						if(colecaoCreditosARealizarArray[1] != null){
							CreditoTipo creditoTipo = new CreditoTipo();
							creditoTipo.setId((Integer) colecaoCreditosARealizarArray[2]);
							creditoTipo.setDescricao((String) colecaoCreditosARealizarArray[1]);
							creditoARealizar.setCreditoTipo(creditoTipo);
						}

						/*
						 * Colocado por Raphael Rossiter em 07/11/2007 - Analista:
						 * Aryed e Rosana OBJ: Retornar os créditos que não sejam de
						 * devolução.
						 */
						if(!repositorioCobranca.existeDevolucao(creditoARealizar)){
							colecaoCreditosARealizarNovos.add(creditoARealizar);
						}

					}

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
			colecaoCreditosARealizar.clear();
			colecaoCreditosARealizar = null;

			obterDebitoImovelOuClienteHelper.setColecaoCreditoARealizar(colecaoCreditosARealizarNovos);
		}

		// Indicador de Notas Promissorias
		// TODO A FAZER
		if(indicadorNotasPromissorias == 1){
			if(indicadorDebito == 1){ // caso imovel
			}else if(indicadorDebito == 2){ // caso cliente
			}
		}

		Collection<Object[]> dadosGuias = null;
		// Indicador de Guias de Pagamentos
		if(indicadorGuiasPagamento == 1){

			if(indicadorDebito == 1){
				// Verifica se o "Ano/Mês" de referência foi informado
				// Caso não tenha sido informado passa como nulo.
				Integer anoMesReferenciaInicial = anoMesInicialReferenciaDebito == null ? null : Integer
								.valueOf(anoMesInicialReferenciaDebito);
				Integer anoMesReferenciaFinal = anoMesFinalReferenciaDebito == null ? null : Integer.valueOf(anoMesFinalReferenciaDebito);

				try{
					dadosGuias = repositorioCobranca.pesquisarGuiasPagamentoImovel(idImovel, DebitoCreditoSituacao.NORMAL,
									DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.RETIFICADA,
									DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO, anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito, anoMesReferenciaInicial, anoMesReferenciaFinal,
									DebitoCreditoSituacao.PRESCRITA);
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}else if(indicadorDebito == 2){

				try{
					dadosGuias = repositorioCobranca.pesquisarGuiasPagamentoCliente(Integer.parseInt(codigoCliente),
									DebitoCreditoSituacao.NORMAL, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.RETIFICADA,
									DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO, clienteRelacaoTipo, anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}else if(indicadorDebito == 3){

				try{
					if(idImoveis != null && !idImoveis.isEmpty()){

						dadosGuias = repositorioCobranca.pesquisarGuiasPagamentoIdsImoveis(idImoveis, DebitoCreditoSituacao.NORMAL,
										DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.RETIFICADA,
										DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO, anoMesInicialVencimentoDebito,
										anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);
					}
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}else if(indicadorDebito == 4){

				try{
					Collection guiasPagamentosCliente = repositorioCobranca.pesquisarGuiasPagamentoCliente(Integer.parseInt(codigoCliente),
									DebitoCreditoSituacao.NORMAL, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.RETIFICADA,
									DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO, clienteRelacaoTipo, anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);
					Collection guiasPagamentosImovel = new ArrayList();
					if(idImoveis != null && !idImoveis.isEmpty()){
						guiasPagamentosImovel.addAll(repositorioCobranca.pesquisarGuiasPagamentoIdsImoveis(idImoveis,
										DebitoCreditoSituacao.NORMAL, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.RETIFICADA,
										DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO, anoMesInicialVencimentoDebito,
										anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA));
					}

					if(dadosGuias == null){
						dadosGuias = new ArrayList<Object[]>();
					}

					if(dadosGuias != null){
						if(guiasPagamentosCliente != null && !guiasPagamentosCliente.isEmpty()){

							dadosGuias.addAll(guiasPagamentosCliente);

							if(guiasPagamentosImovel != null && !guiasPagamentosImovel.isEmpty()){

								guiasPagamentosImovel.removeAll(dadosGuias);
								dadosGuias.addAll(guiasPagamentosImovel);
							}

						}else if(guiasPagamentosImovel != null && !guiasPagamentosImovel.isEmpty()){
							dadosGuias.addAll(guiasPagamentosImovel);
						}
					}

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
		}

		Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = null;

		// itera a coleção de dados das Guias de Pagamento
		if(dadosGuias != null && !dadosGuias.isEmpty()){

			Iterator<Object[]> dadosGuiasIterator = dadosGuias.iterator();

			colecaoGuiasPagamentoValores = new ArrayList<GuiaPagamentoValoresHelper>();
			GuiaPagamentoValoresHelper guiaPagamentoValores = null;

			while(dadosGuiasIterator.hasNext()){

				boolean inserir = true;

				Object[] guiasPagamentoArray = dadosGuiasIterator.next();

				// Validação
				if(guiasPagamentoArray[0] == null || guiasPagamentoArray[1] == null || guiasPagamentoArray[4] == null){
					throw new ControladorException("erro.sistema", null);
				}

				Integer idGuia = (Integer) guiasPagamentoArray[0];
				Short numeroPrestacao = (Short) guiasPagamentoArray[1];

				if(guiaPagamentoValores != null && guiaPagamentoValores.getIdGuiaPagamento().equals(idGuia)
								&& guiaPagamentoValores.getNumeroPrestacao().equals(numeroPrestacao)){

					inserir = false;

				}else{

					guiaPagamentoValores = new GuiaPagamentoValoresHelper();

					// 0 - Id da Guia de Pagamento
					guiaPagamentoValores.setIdGuiaPagamento(idGuia);

					// 1 - Número da Prestação
					guiaPagamentoValores.setNumeroPrestacao(numeroPrestacao);

					// 2 - Data Vencimento
					if(guiasPagamentoArray[2] != null){
						guiaPagamentoValores.setDataVencimento((Date) guiasPagamentoArray[2]);
					}

					// 3 - Data Emissão
					if(guiasPagamentoArray[3] != null){
						guiaPagamentoValores.setDataEmissao((Date) guiasPagamentoArray[3]);
					}

					// Indicador de Cobrança Administrativa
					if(guiasPagamentoArray[6] != null){
						guiaPagamentoValores.setIndicadorCobrancaAdministrativa((Short) guiasPagamentoArray[6]);
					}

					// 7 - Id do Débito Crédito Situação Atual da Prestação
					if(guiasPagamentoArray[7] != null){
						guiaPagamentoValores.setIdDebitoCreditoSituacaoAtual((Integer) guiasPagamentoArray[7]);
					}

					// 8 - Descrição do Débito Crédito Atual Situação da Prestação
					if(guiasPagamentoArray[7] != null){
						guiaPagamentoValores.setDescricaoDebitoCreditoSituacaoAtual((String) guiasPagamentoArray[8]);
					}
				}

				// 4 - Guia Pagamento Prestação
				Set<GuiaPagamentoPrestacao> setPrestacoes = null;
				if(guiaPagamentoValores.getGuiaPagamentoPrestacoes() == null){
					setPrestacoes = new HashSet<GuiaPagamentoPrestacao>();
				}else{
					setPrestacoes = guiaPagamentoValores.getGuiaPagamentoPrestacoes();
				}
				GuiaPagamentoPrestacao guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) guiasPagamentoArray[4];
				setPrestacoes.add(guiaPagamentoPrestacao);
				guiaPagamentoValores.setGuiaPagamentoPrestacoes(setPrestacoes);

				GuiaPagamento guiaPagamento = new GuiaPagamento();
				guiaPagamento.setId(idGuia);

				BoletoBancario boletoBancario = null;
				try{
					boletoBancario = repositorioCobranca.obterBoletoBancarioDebito(guiaPagamento);
				}catch(ErroRepositorioException e){
					throw new ControladorException(e.getMessage());
				}

				if(boletoBancario != null){
					inserir = false;
					obterDebitoImovelOuClienteHelper.setIdBoletoBancario(boletoBancario.getId());
				}

				if(inserir){
					colecaoGuiasPagamentoValores.add(guiaPagamentoValores);
				}
			}
			dadosGuias.clear();
			dadosGuias = null;

			Iterator<GuiaPagamentoValoresHelper> iteratorGuiaHelper = colecaoGuiasPagamentoValores.iterator();

			try{

				while(iteratorGuiaHelper.hasNext()){

					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = iteratorGuiaHelper.next();

					BigDecimal valorPago = null;
					Calendar menorDataPagamento = null;
					boolean remover = false;

					Collection<Object[]> dadosPagamento = repositorioCobranca.pesquisarValorTotalGuiaPagamentoMenorDataGuiaPagamento(
									guiaPagamentoValoresHelper.getIdGuiaPagamento(), guiaPagamentoValoresHelper.getNumeroPrestacao()
													.intValue());

					// verifica o valor de pagamento
					if(dadosPagamento != null && !dadosPagamento.isEmpty()){

						Object[] dadosPagamentoArray = dadosPagamento.iterator().next();

						if(dadosPagamentoArray[0] != null){
							valorPago = new BigDecimal(dadosPagamentoArray[0].toString());
						}

						if(dadosPagamentoArray[1] != null){
							menorDataPagamento = new GregorianCalendar();
							menorDataPagamento.setTime((Date) dadosPagamentoArray[1]);
						}

						if(valorPago != null){

							if((indicadorPagamento == 1) && (valorPago.compareTo(guiaPagamentoValoresHelper.getValorTotalPrestacao()) >= 0)){
								remover = true;
							}else{
								guiaPagamentoValoresHelper.setValorPago(valorPago);
							}
						}else{
							guiaPagamentoValoresHelper.setValorPago(BigDecimal.ZERO);
						}
					} // fim do dadosPagamento!=null

					Date dataPagamento = null;
					if(menorDataPagamento != null){
						dataPagamento = menorDataPagamento.getTime();
					}

					// calcular acrescimo por impontualidade
					if(indicadorCalcularAcrescimoImpontualidade == 1){

						GuiaPagamentoPrestacao guiaPagamentoPrestacao = guiaPagamentoValoresHelper.getGuiaPagamentoPrestacoes().iterator()
										.next();

						CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = this
										.calcularAcrescimoPorImpontualidadeBancoDeDados(
														guiaPagamentoPrestacao.getAnoMesReferenciaFaturamento(),
														guiaPagamentoPrestacao.getDataVencimento(), dataPagamento,
														guiaPagamentoValoresHelper.getValorTotalPrestacao(), BigDecimal.ZERO,
														guiaPagamentoPrestacao.getIndicadorCobrancaMulta().shortValue(), anoMesArrecadacao,
														null, dataEmissaoDocumento, indicadorEmissaoDocumento, multa, jurosMora,
														atualizacaoTarifaria);

						// set os Valores
						if(calcularAcrescimoPorImpontualidade != null){

							// seta valor de multa
							guiaPagamentoValoresHelper.setValorMulta(calcularAcrescimoPorImpontualidade.getValorMulta());

							// seta valor de juros mora
							guiaPagamentoValoresHelper.setValorJurosMora(calcularAcrescimoPorImpontualidade.getValorJurosMora());

							// seta valor de atualizacao monetaria
							guiaPagamentoValoresHelper.setValorAtualizacaoMonetaria(calcularAcrescimoPorImpontualidade
											.getValorAtualizacaoMonetaria());
						}
					}

					// remover
					if(remover){
						iteratorGuiaHelper.remove();
					}
				}
			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		}

		// adcionando a colecao de guias de pagamentos e valores
		if(colecaoGuiasPagamentoValores != null){
			obterDebitoImovelOuClienteHelper.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValores);
		}

		return obterDebitoImovelOuClienteHelper;

	}

	/**
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * [SB0001] - Verificar parcelamento confirmado
	 * Author: Rafael Pinto
	 * 
	 * @param colecaoImoveis
	 *            Coleção de Imoveis
	 * @return estahConfirmado Parcelamento esta confirmado
	 * @throws ControladorException
	 * @exception ControladorException
	 */
	protected Collection verificarParcelamentoConfirmado(Collection colecaoImoveis, Collection colecaoContasValores)
					throws ControladorException{

		boolean estahConfirmado = false;

		if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){

			Iterator itera = colecaoImoveis.iterator();

			// Retorna o único objeto da tabela sistemaParametro
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

			// Seleciona o parcelamento ativo para o imóvel
			FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
			filtroParcelamento.addCampo("id").addCampo("valorEntrada").addCampo("indicadorConfirmacaoParcelamento");

			FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
			filtroGuiaPagamento.addCampo("id");

			FiltroPagamento filtroPagamento = new FiltroPagamento();
			filtroPagamento.addCampo("id");

			FiltroConta filtroConta = new FiltroConta();
			filtroConta.addCampo("id");

			// Para cada imovel obtido,o sistema:
			while(itera.hasNext()){

				Integer idImovel = (Integer) itera.next();

				filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.IMOVEL_ID, idImovel));

				filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.PARCELAMENTO_SITUACAO,
								ParcelamentoSituacao.NORMAL));

				filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.ANO_MES_REFERENCIA_FATURAMENTO,
								sistemaParametro.getAnoMesArrecadacao()));

				Collection<Parcelamento> colecaoParcelamento = this.getControladorUtil().pesquisar(filtroParcelamento,
								Parcelamento.class.getName());

				// Disponibilizar para o GC
				filtroParcelamento.limparListaParametros();

				if(colecaoParcelamento != null && !colecaoParcelamento.isEmpty()){

					Parcelamento parcelamento = (Parcelamento) Util.retonarObjetoDeColecao(colecaoParcelamento);

					// Caso o parcelamento tenha sido efetuado sem entrada,
					// indicar que o parcelamento está confirmado
					if(parcelamento.getValorEntrada() == null
									|| parcelamento.getValorEntrada().equals(BigDecimal.ZERO)
									|| parcelamento.getIndicadorConfirmacaoParcelamento().shortValue() == ConstantesSistema.SIM
													.shortValue()){

						estahConfirmado = true;

						// Caso contrario,o sistema verifica se a entrada de
						// parcelamento ainda está pendente
					}else{

						filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, parcelamento
										.getId()));

						Collection<GuiaPagamento> colecaoGuiaPagamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento,
										GuiaPagamento.class.getName());

						// Disponibilizar para o GC
						filtroGuiaPagamento.limparListaParametros();

						// Caso exista a guia de pagamento referente a entrada
						// do parcelamento
						if(colecaoGuiaPagamento != null && !colecaoGuiaPagamento.isEmpty()){

							GuiaPagamento guiaPagamento = (GuiaPagamento) Util.retonarObjetoDeColecao(colecaoGuiaPagamento);

							filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamento.GUIA_PAGAMENTO_ID, guiaPagamento
											.getId()));

							int totalPagamentos = this.getControladorUtil().totalRegistrosPesquisa(filtroPagamento,
											Pagamento.class.getName());

							// Disponibilizar para o GC
							filtroPagamento.limparListaParametros();

							// Caso exista pagamento para a guia de pagamento
							// indicar
							// que o parcelamento esta confirmado
							if(totalPagamentos > 0){
								estahConfirmado = true;
							}else{
								estahConfirmado = false;
							}

							// Caso contrario,e caso exista uma ou mais contas
							// referente a entrada
							// do parcelamento
						}else{

							filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, parcelamento.getId()));

							// filtroConta
							// .adicionarCaminhoParaCarregamentoEntidade("cobrancaForma");

							Collection<Conta> colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

							// Disponibilizar para o GC
							filtroConta.limparListaParametros();

							if(colecaoConta != null && !colecaoConta.isEmpty()){

								Iterator iteraConta = colecaoConta.iterator();

								int quantidadeContasComPagamento = 0;

								while(iteraConta.hasNext()){

									Conta conta = (Conta) iteraConta.next();

									filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamento.CONTA_ID, conta.getId()));

									int totalPagamentos = this.getControladorUtil().totalRegistrosPesquisa(filtroPagamento,
													Pagamento.class.getName());

									// Disponibilizar para o GC
									filtroPagamento.limparListaParametros();

									if(totalPagamentos > 0){
										quantidadeContasComPagamento++;
									}
								}

								// Caso existam pagamentos para todos as contas
								// referentes a entrada do parcelamento
								// indicar que o parcelamento estah confirmado
								if(quantidadeContasComPagamento == colecaoConta.size()){
									estahConfirmado = true;
								}else{
									estahConfirmado = false;
								}

								// [FS0002} - Verificar exitencia de guia de
								// pagamento ou conta associada ao parcelamento
								// com entrada indicar que o parcelamento estah
								// confirmado
							}else{
								estahConfirmado = true;
							}
						}
					}

					// Caso não exista parcelamento ativo para o imóvel
					// indicar que o parcelamento está confirmado
				}else{
					estahConfirmado = true;
				}

				// Caso esteja indicado que o parcelamento para o imóvel esta
				// confirmado
				// o sistema retira da lista de contas,as contas do imóvel com
				// situação correpondente a
				// parcelada
				if(estahConfirmado){

					if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){

						Iterator iteraConta = colecaoContasValores.iterator();

						while(iteraConta.hasNext()){

							ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteraConta.next();

							Conta conta = contaValoresHelper.getConta();

							if(conta.getImovel().getId().intValue() == idImovel.intValue()){

								DebitoCreditoSituacao debito = conta.getDebitoCreditoSituacaoAtual();

								if(debito.getId().intValue() == DebitoCreditoSituacao.PARCELADA.intValue()){
									iteraConta.remove();
								}
							}
						}
					}
				}
			}// fim do while de imoveis

			// Disponibilizar para o GC
			filtroParcelamento.limparListaParametros();
			filtroParcelamento = null;

			filtroPagamento.limparListaParametros();
			filtroPagamento = null;

			filtroGuiaPagamento.limparListaParametros();
			filtroGuiaPagamento = null;

			filtroConta.limparListaParametros();
			filtroConta = null;
		}

		return colecaoContasValores;
	}

	// /**
	// * [UC0216] Calcular Acrescimo por Impontualidade Author: Rafael Santos
	// * Silva,Rafael Santos Data:05/01/2006,22/03/2006 Calcula os acrescimmos por
	// * Impontualidade(multa,juros de mora e atualização monetaria)
	// *
	// * @author eduardo henrique
	// * @date 05/09/2008
	// * @date 02/07/2009
	// * Alterada a forma de cálculo de Juros Mora para ser realizada por dias em atraso e
	// * retirada a dependência de cálculo de Juros em relação
	// * ao mês/ano de referência informado.
	// * Correção da verificacao de cálculo de multa e juros para pagamentos no dia de
	// * vencimento.
	// * @param anoMesReferenciaDebito
	// * @param dataVencimento
	// * @param dataPagamento
	// * @param valorDebito
	// * @param valorMultasCobradas
	// * @param indicadorMulta
	// * @param anoMesArrecadacao
	// * @param idConta
	// * @return
	// * @throws ControladorException
	// */
	//
	// public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade(int
	// anoMesReferenciaDebito, Date dataVencimento,
	// Date dataPagamento, BigDecimal valorDebito, BigDecimal valorMultasCobradas, short
	// indicadorMulta,
	// String anoMesArrecadacao, Integer idConta) throws ControladorException{
	//
	// SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
	// // Short quantidadeDiasVencimentoCobranca =
	// // sistemaParametros.getNumeroDiasVencimentoCobranca();
	//
	// CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = new
	// CalcularAcrescimoPorImpontualidadeHelper();
	//
	// BigDecimal valorMulta = BigDecimal.ZERO;
	// BigDecimal valorJurosMora = BigDecimal.ZERO;
	// BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
	//
	// boolean calcular = true;
	// Calendar novaDataPagamento = new GregorianCalendar();
	//
	// if(dataPagamento != null){
	// novaDataPagamento.setTime(dataPagamento);
	// }
	//
	// Calendar novaDataVencimento = new GregorianCalendar();
	// novaDataVencimento.setTime(dataVencimento);
	//
	// if(sistemaParametros.getLogradouro() == null || sistemaParametros.getLogradouro().getId() ==
	// null){
	// throw new IllegalStateException("erro.logradouro_nao_definido_parametros");
	// }
	//
	// Collection<Logradouro> colecaoLogradouro =
	// getControladorEndereco().pesquisarLogradouroCompleto(null, null, null, null, null, null,
	// null, sistemaParametros.getLogradouro().getId().toString(), null, null, null,
	// Integer.valueOf(0));
	// if(colecaoLogradouro == null || colecaoLogradouro.isEmpty()){
	// throw new IllegalStateException("erro.logradouro_nao_definido_parametros");
	// }
	// Logradouro logradouro = colecaoLogradouro.iterator().next();
	// if(logradouro == null || logradouro.getMunicipio() == null){
	// throw new IllegalStateException("erro.municipio_de_logradouro_nao_definido_parametros");
	// }
	// Municipio municipio = logradouro.getMunicipio();
	//
	// // verifica se a data de vencimento deve ser "adiada" por ser feriado ou fim de semana
	// novaDataVencimento.setTime(this.verificarDataUtilVencimento(novaDataVencimento.getTime(),
	// municipio));
	//
	// int numeroDiasVencimentoCobranca =
	// sistemaParametros.getNumeroDiasVencimentoCobranca().intValue();
	//
	// Calendar dataCorrenteMenosNumeroDiasVencimentoCobranca = new GregorianCalendar();
	// dataCorrenteMenosNumeroDiasVencimentoCobranca.setTime(new Date());
	// dataCorrenteMenosNumeroDiasVencimentoCobranca.add(Calendar.DAY_OF_MONTH,
	// (-numeroDiasVencimentoCobranca));
	//
	// if(dataPagamento != null){
	//
	// // Calendar dataCorrente = new GregorianCalendar();
	// // dataCorrente.add(Calendar.DAY_OF_MONTH, (quantidadeDiasVencimentoCobranca * -1));
	//
	// // if (novaDataPagamento.compareTo(novaDataVencimento) <= 0 ||
	// // novaDataVencimento.compareTo(dataCorrente) > 0) {
	// if(novaDataPagamento.compareTo(novaDataVencimento) <= 0){
	// valorMulta = BigDecimal.ZERO;
	// valorJurosMora = BigDecimal.ZERO;
	// valorAtualizacaoMonetaria = BigDecimal.ZERO;
	// calcular = false;
	// }
	// }else if(novaDataVencimento.compareTo(dataCorrenteMenosNumeroDiasVencimentoCobranca) >= 0){
	// valorMulta = BigDecimal.ZERO;
	// valorJurosMora = BigDecimal.ZERO;
	// valorAtualizacaoMonetaria = BigDecimal.ZERO;
	// calcular = false;
	// }
	//
	// if(calcular){
	// BigDecimal indiceMulta = null;
	// BigDecimal indiceJurosMora = null;
	// BigDecimal fatorAtualizacaMonetaria = null;
	//
	// IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade = null;
	//
	// try{
	// indicesAcrescimosImpontualidade =
	// repositorioCobranca.pesquisarIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);
	//
	// if(indicesAcrescimosImpontualidade != null){
	// indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
	// indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
	// fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
	// }
	//
	// }catch(ErroRepositorioException ex){
	// sessionContext.setRollbackOnly();
	// throw new ControladorException("erro.sistema", ex);
	// }
	//
	// // [FS001] - Verificar Existencia dos Indices para Acrescimos por
	// // Impontualidade
	// if(indicesAcrescimosImpontualidade == null){
	// try{
	// indicesAcrescimosImpontualidade = repositorioCobranca
	// .pesquisarMenorIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);
	//
	// if(indicesAcrescimosImpontualidade != null){
	// indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
	// indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
	// fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
	// }
	//
	// }catch(ErroRepositorioException ex){
	// sessionContext.setRollbackOnly();
	// throw new ControladorException("erro.sistema", ex);
	// }
	// }
	//
	// /*
	// * Colocado por Raphael Rossiter em 04/10/2007 [FS001] - Verificar
	// * Existencia dos Indices para Acrescimos por Impontualidade
	// */
	// if(indicesAcrescimosImpontualidade == null){
	// try{
	// indicesAcrescimosImpontualidade =
	// repositorioCobranca.pesquisarMenorIndiceAcrescimoImpontualidade();
	//
	// if(indicesAcrescimosImpontualidade != null){
	// indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
	// indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
	// fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
	// }
	//
	// }catch(ErroRepositorioException ex){
	// sessionContext.setRollbackOnly();
	// throw new ControladorException("erro.sistema", ex);
	// }
	// }
	//
	// if(indicesAcrescimosImpontualidade == null){
	// indiceMulta = BigDecimal.ZERO;
	// indiceJurosMora = BigDecimal.ZERO;
	// fatorAtualizacaMonetaria = BigDecimal.ZERO;
	// }
	//
	// BigDecimal fatorAtualizacaoMonetariaInicial = fatorAtualizacaMonetaria;
	//
	// Calendar dataAtual = Calendar.getInstance();
	// Calendar dataCalendarVencimento = new GregorianCalendar();
	// dataCalendarVencimento.setTime(dataVencimento);
	//
	// Integer dataArrecadacao = Integer.valueOf(anoMesArrecadacao.substring(0, 4) + "" +
	// anoMesArrecadacao.substring(4, 6));
	//
	// Integer dataVencimentoInteger = null;
	// if((dataCalendarVencimento.get(Calendar.MONTH) + 1) < 10){
	// dataVencimentoInteger = Integer.valueOf(dataCalendarVencimento.get(Calendar.YEAR) + "0"
	// + (dataCalendarVencimento.get(Calendar.MONTH) + 1));
	// }else{
	// dataVencimentoInteger = Integer.valueOf(dataCalendarVencimento.get(Calendar.YEAR) + ""
	// + (dataCalendarVencimento.get(Calendar.MONTH) + 1));
	// }
	//
	// // calcular valor de juros de mora
	// if(dataVencimento != null){
	//
	// int diasEmAtraso = 0;
	//
	// if(dataPagamento != null){
	// diasEmAtraso = Util.obterQuantidadeDiasEntreDuasDatas(dataVencimento, dataPagamento);
	//
	// }else{
	// diasEmAtraso = Util.obterQuantidadeDiasEntreDuasDatas(dataVencimento, dataAtual.getTime());
	// }
	//
	// if(diasEmAtraso <= 0){
	// valorJurosMora = BigDecimal.ZERO;
	// }else{
	// valorJurosMora = valorDebito.multiply(new
	// BigDecimal(diasEmAtraso).multiply(Util.dividirArredondando(indiceJurosMora,
	// new BigDecimal(3000))));
	// }
	// }
	//
	// /*
	// * Alterado por Raphael Rossiter em 27/08/2007 OBJ: Calcular atualização tarifária
	// */
	// if(sistemaParametros.getIndicadorAtualizacaoTarifaria() == ConstantesSistema.NAO){
	//
	// // Calcular Valor de Atualização Monetária
	// valorAtualizacaoMonetaria = this.calcularValorAtualizacaoMonetaria(dataVencimento,
	// dataPagamento, dataArrecadacao,
	// fatorAtualizacaoMonetariaInicial, fatorAtualizacaMonetaria, indicesAcrescimosImpontualidade,
	// valorDebito,
	// indiceMulta, indiceJurosMora, dataVencimentoInteger);
	//
	// }else{
	//
	// // Calcular Valor de Atualização Tarifária
	// valorAtualizacaoMonetaria = this.calcularValorAtualizacaoTarifaria(sistemaParametros,
	// idConta);
	// }
	//
	// // calcular valor da multa
	// if(indicadorMulta == 2
	// && (dataVencimento != null &&
	// (dataVencimento.compareTo(Util.formatarDataSemHora(dataAtual.getTime()))) < 0)){
	//
	// if(valorMultasCobradas == null){
	// valorMultasCobradas = BigDecimal.ZERO;
	// }
	//
	// if(((String)
	// ParametroCobranca.P_CALCULA_MULTA_COM_DEBITO_ATUALIZADO.executar(ExecutorParametrosCobranca.getInstancia()))
	// .equals(ConstantesSistema.SIM.toString())){
	// valorMulta =
	// valorDebito.add(valorJurosMora).add(valorAtualizacaoMonetaria).subtract(valorMultasCobradas).multiply(
	// Util.dividirArredondando(indiceMulta, new BigDecimal(100)));
	// }else{
	// valorMulta = valorDebito.subtract(valorMultasCobradas).multiply(
	// Util.dividirArredondando(indiceMulta, new BigDecimal(100)));
	// }
	// }
	// }
	//
	// calcularAcrescimoPorImpontualidade.setValorMulta(valorMulta);
	// calcularAcrescimoPorImpontualidade.setValorJurosMora(valorJurosMora);
	// calcularAcrescimoPorImpontualidade.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);
	//
	// return calcularAcrescimoPorImpontualidade;
	// }
	//

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Verifica a Data Útil do Vencimento passado, atribuindo a data correta, se necessário
	 */
	public Date verificarDataUtilVencimento(Date dataVencimento, Municipio municipio) throws ControladorException{

		Date dataCalculada = dataVencimento;

		if(dataCalculada != null){

			try{
				Collection<MunicipioFeriado> colecaoMunicipio = repositorioCobranca.pesquisarFeriadoMunicipal(municipio, null);
				Collection<NacionalFeriado> colecaoNacionalFeriado = repositorioCobranca.pesquisarFeriadoNacional(dataCalculada);

				boolean adiarData = true;
				while(adiarData){

					if(Util.ehDiaUtil(dataCalculada, colecaoNacionalFeriado, colecaoMunicipio)){
						adiarData = false;

					}else{
						dataCalculada = Util.adicionarNumeroDiasDeUmaData(dataCalculada, 1);

					}
				}
			}catch(ErroRepositorioException ex){
				throw new ControladorException("erro.sistema");
			}
		}

		return dataCalculada;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Author: Raphael Rossiter
	 * 
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param dataArrecadacao
	 * @param fatorAtualizacaoMonetariaInicial
	 * @param fatorAtualizacaMonetaria
	 * @param indicesAcrescimosImpontualidade
	 * @param valorDebito
	 * @param indiceMulta
	 * @param indiceJurosMora
	 * @param dataVencimentoInteger
	 * @return BigDecimal valorAtualizacaoMonetaria
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAtualizacaoMonetaria(Date dataVencimento, Date dataPagamento, Integer dataArrecadacao,
					BigDecimal fatorAtualizacaoMonetariaInicial, BigDecimal fatorAtualizacaMonetaria,
					IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade, BigDecimal valorDebito, BigDecimal indiceMulta,
					BigDecimal indiceJurosMora, Integer dataVencimentoInteger) throws ControladorException{

		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;

		if(dataVencimento != null && dataVencimentoInteger.intValue() < dataArrecadacao.intValue()){

			String anoMesReferenciaFatorAtualizacaoMonetariaFinal = "";

			if(dataPagamento != null){

				Calendar data = new GregorianCalendar();
				data.setTime(dataPagamento);

				anoMesReferenciaFatorAtualizacaoMonetariaFinal = data.get(Calendar.YEAR) + "";
				if(data.get(Calendar.MONTH) < 10){
					anoMesReferenciaFatorAtualizacaoMonetariaFinal = anoMesReferenciaFatorAtualizacaoMonetariaFinal + "0"
									+ (data.get(Calendar.MONTH) + 1);
				}else{
					anoMesReferenciaFatorAtualizacaoMonetariaFinal = anoMesReferenciaFatorAtualizacaoMonetariaFinal + ""
									+ (data.get(Calendar.MONTH) + 1);
				}

			}else{

				// alterado por Vivianne Sousa
				anoMesReferenciaFatorAtualizacaoMonetariaFinal = Util.getAnoMesComoString(new Date());
				// anoMesReferenciaFatorAtualizacaoMonetariaFinal =
				// anoMesArrecadacao;
			}

			// pesquisar o fator atualizacao monetaria final
			try{
				indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarIndiceAcrescimoImpontualidade(Integer.valueOf(
								anoMesReferenciaFatorAtualizacaoMonetariaFinal).intValue());

				if(indicesAcrescimosImpontualidade != null){
					indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
					indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
					fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
				}

			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

			if(indicesAcrescimosImpontualidade == null){
				try{
					indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarMenorIndiceAcrescimoImpontualidade(Integer.valueOf(
									anoMesReferenciaFatorAtualizacaoMonetariaFinal).intValue());

					if(indicesAcrescimosImpontualidade != null){
						indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
						indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
						fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
					}

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
			if(indicesAcrescimosImpontualidade == null){
				indiceMulta = new BigDecimal(0);
				indiceJurosMora = new BigDecimal(0);
				fatorAtualizacaMonetaria = new BigDecimal(0);
			}

			BigDecimal fatorAtualizacaoMonetariaFinal = fatorAtualizacaMonetaria;

			BigDecimal percentualAtualizacaoMonetaria = null;

			if(((fatorAtualizacaoMonetariaInicial.compareTo(BigDecimal.ZERO)) != 0)
							&& ((fatorAtualizacaoMonetariaFinal.compareTo(BigDecimal.ZERO)) != 0)){

				percentualAtualizacaoMonetaria = Util.dividirArredondando(fatorAtualizacaoMonetariaFinal, fatorAtualizacaoMonetariaInicial);

				valorAtualizacaoMonetaria = (valorDebito.multiply(percentualAtualizacaoMonetaria)).subtract(valorDebito);
			}
		}

		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Author: Raphael Rossiter
	 * 
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param dataArrecadacao
	 * @param fatorAtualizacaoMonetariaInicial
	 * @param fatorAtualizacaMonetaria
	 * @param indicesAcrescimosImpontualidade
	 * @param valorDebito
	 * @param indiceMulta
	 * @param indiceJurosMora
	 * @param dataVencimentoInteger
	 * @return BigDecimal valorAtualizacaoMonetaria
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAtualizacaoTarifaria(SistemaParametro sistemaParametro, Integer idConta) throws ControladorException{

		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;

		if(idConta != null){

			Conta conta = this.getControladorFaturamento().pesquisarContaAtualizacaoTarifaria(idConta);

			/*
			 * Alterado por Raphael Rossiter em 11/09/2007 (Analista: Rosana Carvalho) OBJ: Não
			 * calcular a atualização tarifaria caso o
			 * CNTA_AMREFERENCIACONTA seja maior ou igual que PARM_AMATUALIZACAOTARIFARIA
			 */
			if(sistemaParametro.getAnoMesAtualizacaoTarifaria() != null
							&& conta.getReferencia() < sistemaParametro.getAnoMesAtualizacaoTarifaria().intValue()){

				/*
				 * Para simular o cálculo a partir dos dados que estão na conta, será preciso
				 * substituir o ConsumoTarifa do imóvel pelo ConsumoTarifa
				 * que está na conta.
				 */
				Imovel imovel = conta.getImovel();
				imovel.setConsumoTarifa(conta.getConsumoTarifa());

				// [UC0105] - Obter Consumo Mínimo da Ligação
				Integer consumoMinimoLigacao = getControladorMicromedicao().obterConsumoMinimoLigacao(imovel, null);

				// [UC0108] - Obter Quantidade de Economias por Categoria
				Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasContaCategoria(conta);

				Integer anoMesReferencia = sistemaParametro.getAnoMesFaturamento();

				// Data de Leitura Anterior
				Integer anoMesReferenciaAnterior = Util.subtrairMesDoAnoMes(anoMesReferencia, 1);

				Date dataLeituraAnterior = null;
				try{

					dataLeituraAnterior = (Date) this.repositorioFaturamento.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(imovel
									.getRota().getFaturamentoGrupo().getId(), FaturamentoAtividade.EFETUAR_LEITURA,
									anoMesReferenciaAnterior);

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// Data de Leitura Atual
				Date dataLeituraAtual = null;
				try{

					dataLeituraAtual = (Date) this.repositorioFaturamento.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(imovel
									.getRota().getFaturamentoGrupo().getId(), FaturamentoAtividade.EFETUAR_LEITURA, anoMesReferencia);

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				/*
				 * Caso NÃO existe cronograma para o anoMes informado
				 */

				if(dataLeituraAnterior == null || dataLeituraAtual == null){

					int mesConta = Util.obterMes(anoMesReferencia);
					int anoConta = Util.obterAno(anoMesReferencia);

					int ultimoDiaMes = Integer.valueOf(Util.obterUltimoDiaMes(mesConta, anoConta));

					dataLeituraAtual = Util.criarData(ultimoDiaMes, mesConta, anoConta);

					dataLeituraAnterior = Util.criarData(1, mesConta, anoConta);
				}

				BigDecimal percentualEsgoto = BigDecimal.ZERO;
				if(conta.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO)){
					percentualEsgoto = conta.getPercentualEsgoto();
				}

				// Valores de água e esgoto que estão na conta (VALOR ANTIGO)
				BigDecimal valorAguaEsgotoAnterior = BigDecimal.ZERO;

				if(conta.getValorAgua() != null){
					valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorAgua());
				}

				if(conta.getValorEsgoto() != null){
					valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorEsgoto());
				}

				// Valores de água e esgoto (VALOR ATUAL)
				BigDecimal valorAguaEsgotoAtual = BigDecimal.ZERO;

				// [UC0120] - Calcular Valores de Água e/ou Esgoto
				Collection<CalcularValoresAguaEsgotoHelper> colecaoCalcularValoresAguaEsgotoHelper = this.getControladorFaturamento()
								.calcularValoresAguaEsgoto(anoMesReferencia, conta.getLigacaoAguaSituacao().getId(),
												conta.getLigacaoEsgotoSituacao().getId(), Short.valueOf((short) 1),
												Short.valueOf((short) 1), colecaoCategorias, conta.getConsumoAgua(),
												conta.getConsumoEsgoto(), consumoMinimoLigacao, dataLeituraAnterior, dataLeituraAtual,
												percentualEsgoto, conta.getConsumoTarifa().getId(), imovel.getId());

				if(colecaoCalcularValoresAguaEsgotoHelper != null && !colecaoCalcularValoresAguaEsgotoHelper.isEmpty()){

					CalcularValoresAguaEsgotoHelper valoresAguaEsgoto = null;

					if(colecaoCalcularValoresAguaEsgotoHelper.size() > 1){

						Iterator itAguaEsgoto = colecaoCalcularValoresAguaEsgotoHelper.iterator();

						while(itAguaEsgoto.hasNext()){

							valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) itAguaEsgoto.next();

							if(valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null){
								valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
							}

							if(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null){
								valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
							}
						}
					}else{

						valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) Util
										.retonarObjetoDeColecao(colecaoCalcularValoresAguaEsgotoHelper);

						if(valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null){
							valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
						}

						if(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null){
							valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
						}
					}

					valorAtualizacaoMonetaria = valorAguaEsgotoAtual.subtract(valorAguaEsgotoAnterior);

					if(valorAtualizacaoMonetaria.compareTo(BigDecimal.ZERO) == -1){
						valorAtualizacaoMonetaria = BigDecimal.ZERO;
					}
				}

			}

		}

		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0200] Inserir Débito Automático
	 * 
	 * @author Roberta Costa
	 * @created 04/01/2006
	 * @param matriculaImovel
	 *            Matrícula do Imovel
	 * @param codigoBanco
	 *            Código do Banco
	 * @param codigoAgencia
	 *            Código da Agência
	 * @param identificacaoCliente
	 *            Identificação do Cliente no Banco
	 * @param dataOpcao
	 *            Data da Opção
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public String[] inserirDebitoAutomatico(String matriculaImovel, String codigoBanco, String codigoAgencia, String identificacaoCliente,
					Date dataOpcao) throws ControladorException{

		// Variável de mensagem de retorno
		String descricaoOcorrencia = "OK";
		String descricaoOcorrenciaAux = ""; 

		try{
			Calendar dataAtual = Calendar.getInstance();
			dataAtual.set(Calendar.HOUR, 0);
			dataAtual.set(Calendar.MINUTE, 0);
			dataAtual.set(Calendar.SECOND, 0);
			dataAtual.set(Calendar.MILLISECOND, 0);

			if(dataOpcao.after(dataAtual.getTime())){
				descricaoOcorrencia = "DATA OPÇÃO MAIOR QUE A DATA ATUAL";
			}else{

				// [FS0001] - Verificar existência da matrícula do imóvel
				Integer existeImovel = null;
				try{

					existeImovel = repositorioImovel.verificarExistenciaImovel(Integer.valueOf(matriculaImovel));
				}catch(NumberFormatException e){
					existeImovel = null;
				}

				if(existeImovel == null || existeImovel == 0){
					descricaoOcorrencia = "IDENTIFICAÇÃO DO IMÓVEL NÃO CADASTRADA";
				}else{
					// [FS0002] - Verificar existência do Banco
					Integer existeBanco = null;
					try{
						existeBanco = repositorioArrecadacao.verificarExistenciaBanco(Integer.valueOf(codigoBanco));
					}catch(NumberFormatException e){
						existeBanco = null;
					}

					if(existeBanco == null){
						descricaoOcorrencia = "BANCO NÃO CADASTRADO";
					}else{

						// [FS0003] - Verificar existência do Agência
						Integer existeAgencia = repositorioArrecadacao.verificarExistenciaAgencia(codigoAgencia,
										Integer.valueOf(codigoBanco));

						String pIncluirAgenciaNaoCadastrada = ParametroArrecadacao.P_INCLUIR_AGENCIA_NAO_CADASTRADA_INCLUSAO_DEBITO_AUTOMATICO
										.executar().toString();

						if(existeAgencia == null && pIncluirAgenciaNaoCadastrada.equals(Short.toString(ConstantesSistema.SIM))){
							Banco banco = new Banco();
							banco.setId(Integer.valueOf(codigoBanco));

							Agencia agenciaInserir = new Agencia();
							agenciaInserir.setBanco(banco);
							agenciaInserir.setCodigoAgencia(codigoAgencia);
							agenciaInserir.setNomeAgencia(codigoAgencia);
							agenciaInserir.setNumeroTelefone("9999999");
							agenciaInserir.setUltimaAlteracao(new Date());

							existeAgencia = this.getControladorArrecadacao().inserirAgenciaBancaria(agenciaInserir);

							if(existeAgencia != null){
								descricaoOcorrenciaAux = "OK - AGÊNCIA CADASTRADA: " + codigoAgencia + "; BANCO: " + codigoBanco;
							}
						}

						if(existeAgencia == null){
							descricaoOcorrencia = "AGÊNCIA NÃO CADASTRADA";
						}else{

							// [FS0004] - Verifica a data de Opção posterior já informanda
							String resultadoDataOpcao = repositorioCobranca.verificarDataOpcao(matriculaImovel, dataOpcao,
											identificacaoCliente, codigoAgencia);
							if(resultadoDataOpcao != null){
								descricaoOcorrencia = "IMÓVEL JÁ É DÉBITO AUTOMÁTICO";
							}else{

								// Verifica se o Imóvel já é Débito Automático
								String resultadoDebitoAutomatico = repositorioCobranca.verificarDebitoAutomatico(matriculaImovel);
								if(resultadoDebitoAutomatico != null){

									// Atualiza a data da exclusão com a data corrente em Débio
									// Automático
									repositorioCobranca.atualizarDataExclusao(matriculaImovel);
								}

								Agencia agencia = new Agencia();
								agencia.setId(existeAgencia);

								Imovel imovel = new Imovel();
								imovel.setId(Integer.valueOf(matriculaImovel));

								DebitoAutomatico debitoAutomatico = new DebitoAutomatico(identificacaoCliente, dataOpcao, new Date(), null,
												new Date(), agencia, imovel);

								// Insere o Imóvel em Débito Automático
								repositorioCobranca.inserirDebitoAutomatico(debitoAutomatico);

								// Atualiza o indicador de débio automático em Imóvel
								Integer indicadorDebito = 1;
								repositorioCobranca.atualizarIndicadorDebitoAutomatico(matriculaImovel, indicadorDebito);
							}
						}
					}
				}
			}
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		String[] retorno = new String[2];

		retorno[0] = descricaoOcorrencia;
		retorno[1] = descricaoOcorrenciaAux;

		return retorno;
	}

	/**
	 * [UC0656] Inserir Negativador
	 * 
	 * @author Saulo Lima
	 * @created 09/06/2008
	 * @param Negativador
	 *            Negativador
	 * @throws ControladorException
	 *             Controlador Exception
	 * @return String
	 */
	public String inserirNegativador(Negativador negativador) throws ControladorException{

		short codigoAgente = negativador.getCodigoAgente();

		boolean existeCodigoAgente = false;

		FiltroNegativador filtroNegativador = new FiltroNegativador();
		filtroNegativador.adicionarParametro(new ParametroSimples(FiltroNegativador.CODIGO_AGENTE, codigoAgente));

		Collection negativadores = getControladorUtil().pesquisar(filtroNegativador, Negativador.class.getName());

		if(negativadores != null && !negativadores.isEmpty()){
			throw new ControladorException("atencao.codigo_agente_negativador_ja_existe");
		}

		// Variável de mensagem de retorno
		String descricaoOcorrencia = "OK";

		// Insere o Imóvel em Débito Automático
		try{
			repositorioUtil.inserir(negativador);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return descricaoOcorrencia;
	}

	/**
	 * [UC0201] Remover Débito Automático
	 * 
	 * @author
	 * @created 09/01/2006
	 * @param matriculaImovel
	 *            Matrícula do Imovel
	 * @param codigoBanco
	 *            Código do Banco
	 * @param codigoAgencia
	 *            Código da Agência
	 * @param identificacaoCliente
	 *            Identificação do Cliente no Banco
	 * @param dataOpcao
	 *            Data da Opção
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public String removerDebitoAutomatico(String matriculaImovel, String codigoBanco, String codigoAgencia, String identificacaoCliente,
					Date dataOpcao, Usuario usuarioLogado) throws ControladorException{

		// Variável de mensagem de retorno
		String descricaoOcorrencia = "OK";

		try{

			// [FS0001] - Verificar existência da matrícula do imóvel
			Integer existeImovel = null;
			try{

				existeImovel = repositorioImovel.verificarExistenciaImovel(Integer.valueOf(matriculaImovel));
			}catch(NumberFormatException e){
				existeImovel = null;
			}

			if(existeImovel == null){
				descricaoOcorrencia = "IDENTIFICAÇÃO DO IMÓVEL NÃO CADASTRADA";
			}else{

				// [FS0002] - Verificar existência do Banco
				Integer existeBanco = null;
				try{
					existeBanco = repositorioArrecadacao.verificarExistenciaBanco(Integer.valueOf(codigoBanco));
				}catch(NumberFormatException e){
					existeBanco = null;
				}

				if(existeBanco == null){
					descricaoOcorrencia = "BANCO NÃO CADASTRADO";
				}else{

					// [FS0003] - Verificar existência do Agência
					Integer existeAgencia = null;

					existeAgencia = repositorioArrecadacao.verificarExistenciaAgencia(codigoAgencia, Integer.valueOf(codigoBanco));

					if(existeAgencia == null){
						descricaoOcorrencia = "AGÊNCIA NÃO CADASTRADA";
					}else{

						// Verifica se o Imóvel já é Débito Automático
						String idAgenciaDebitoAutomatico = repositorioCobranca.verificarDebitoAutomatico(matriculaImovel);

						if(idAgenciaDebitoAutomatico == null){
							descricaoOcorrencia = "IMÓVEL NÃO É DÉBITO AUTOMÁTICO";
						}else{

							// Insere o Imóvel em Débito Automático
							String idAgencia = repositorioCobranca.verificarDebitoAutomaticoBancoAgencia(codigoBanco, codigoAgencia);
							if(!idAgenciaDebitoAutomatico.equals(idAgencia)){
								descricaoOcorrencia = "IMÓVEL É DÉBITO AUTOMÁTICO DE OUTRO BANCO/AGÊNCIA";
							}else{

								// Verifica a data de Opção posterior já informanda
								String resultadoDataOpcao = repositorioCobranca.verificarDataOpcaoExclusao(matriculaImovel, dataOpcao,
												identificacaoCliente);
								if(resultadoDataOpcao != null){
									descricaoOcorrencia = "DATA DA OPÇÃO DO DÉBITO AUTOMÁTICO MAIOR QUE A DATA INFORMADA";
								}else{

									// ------------ REGISTRAR TRANSAÇÃO----------------------------
									FiltroDebitoAutomatico filtroDebitoAutomatico = new FiltroDebitoAutomatico();
									filtroDebitoAutomatico.adicionarParametro(new ParametroSimples(FiltroDebitoAutomatico.IMOVEL_ID, Util
													.obterInteger(matriculaImovel)));
									filtroDebitoAutomatico.adicionarParametro(new ParametroNulo(FiltroDebitoAutomatico.DATA_EXCLUSAO));
									filtroDebitoAutomatico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoAutomatico.IMOVEL);

									DebitoAutomatico debitoAutomatico = (DebitoAutomatico) Util.retonarObjetoDeColecao(getControladorUtil()
													.pesquisar(filtroDebitoAutomatico, DebitoAutomatico.class.getName()));

									// Atualiza a data da exclusão do débito automático
									debitoAutomatico.setDataExclusao(new Date());
									debitoAutomatico.setUltimaAlteracao(new Date());

									RegistradorOperacao registradorOperacao = new RegistradorOperacao(
													Operacao.OPERACAO_EXCLUIR_DEBITO_AUTOMATICO, debitoAutomatico.getId(),
													debitoAutomatico.getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado,
																	UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

									registradorOperacao.registrarOperacao(debitoAutomatico);
									getControladorUtil().atualizar(debitoAutomatico);

									// Atualiza o indicador de débito automático do imóvel
									FiltroImovel filtroImovel = new FiltroImovel();
									filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, debitoAutomatico.getImovel()
													.getId()));

									Imovel imovel = (Imovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel,
													Imovel.class.getName()));

									imovel.setIndicadorDebitoConta(ConstantesSistema.NAO);
									imovel.setUltimaAlteracao(new Date());

									RegistradorOperacao registradorOperacaoImovel = new RegistradorOperacao(
													Operacao.OPERACAO_EXCLUIR_DEBITO_AUTOMATICO, imovel.getId(), imovel.getId(),
													new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

									registradorOperacaoImovel.registrarOperacao(imovel);
									getControladorUtil().atualizar(imovel);
									// ------------ REGISTRAR TRANSAÇÃO----------------------------
								}
							}
						}
					}
				}
			}
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		return descricaoOcorrencia;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @param grupoCobranca
	 *            Grupo de Cobrança
	 * @param anoMesReferencia
	 *            Ano/Mês de referência do ciclo de cobrança
	 * @param idCronogramaAtividadeAcaoCobranca
	 *            Código do cronograma da atividade da ação de cobrança
	 * @param idComandoAtividadeAcaoCobranca
	 *            Código do comando da atividade da ação de cobrança
	 * @param rotas
	 *            Coleção de rotas
	 * @param acaoCobranca
	 *            Ação de cobrança
	 * @param atividadeCobranca
	 *            Atividade de cobrança
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param criterioCobranca
	 *            Critério de cobrança
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	/*
	 * public void gerarAtividadeAcaoCobranca(CobrancaGrupo grupoCobranca, int
	 * anoMesReferencia, Integer idCronogramaAtividadeAcaoCobranca, Integer
	 * idComandoAtividadeAcaoCobranca, Collection<Rota> rotas, CobrancaAcao
	 * acaoCobranca, CobrancaAtividade atividadeCobranca, Integer
	 * indicadorCriterio, CobrancaCriterio criterioCobranca, Cliente cliente,
	 * Integer relacaoClienteImovel, int anoMesReferenciaInicial, int
	 * anoMesReferenciaFinal, Date dataVencimentoInicial, Date
	 * dataVencimentoFinal) throws ControladorException{
	 * //IMPLEMENTAR QUANDO O MAPEAMENTO DA QUINTA ITERACAO ESTIVER PRONTO }
	 */

	/**
	 * Consultar Dados do Cliente Imovel Vinculado Auhtor: Rafael Santos Data:
	 * 23/01/2006
	 * 
	 * @param imovel
	 *            Imovel
	 * @return Dados do Imovel Vinculado
	 * @throws ControladorException
	 */
	public Cliente consultarDadosClienteImovelUsuario(Imovel imovel) throws ControladorException{

		Cliente cliente = null;

		Object[] colecaoClienteArray = null;

		try{
			colecaoClienteArray = repositorioMicromedicao.consultarDadosClienteImovelUsuario(imovel);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoClienteArray != null && !(colecaoClienteArray.length < 0)){

			cliente = new Cliente();

			// Seta o id do cliente
			if(colecaoClienteArray[0] != null){
				cliente.setId((Integer) colecaoClienteArray[0]);
			}

			// Seta o nome do cliente
			if(colecaoClienteArray[1] != null){
				cliente.setNome((String) colecaoClienteArray[1]);
			}
		}

		return cliente;
	}

	/**
	 * Consultar Dados do Cliente Imovel Vinculado Auhtor: Rafael Santos Data: 23/01/2006
	 * 
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return Consumo Tipo
	 * @throws ControladorException
	 */
	public ConsumoTipo consultarDadosConsumoTipoConsumoHistorico(ConsumoHistorico consumoHistorico) throws ControladorException{

		ConsumoTipo consumoTipo = null;

		Object[] colecaoConsumoTipoArray = null;

		try{
			colecaoConsumoTipoArray = repositorioMicromedicao.consultarDadosConsumoTipoConsumoHistorico(consumoHistorico);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoConsumoTipoArray != null && !(colecaoConsumoTipoArray.length < 0)){

			consumoTipo = new ConsumoTipo();

			// Descricao Abreviada
			if(colecaoConsumoTipoArray[0] != null){
				consumoTipo.setDescricaoAbreviada((String) colecaoConsumoTipoArray[0]);
			}

			// Id
			if(colecaoConsumoTipoArray[1] != null){
				consumoTipo.setId((Integer) colecaoConsumoTipoArray[1]);
			}
		}

		return consumoTipo;
	}

	/**
	 * Consultar Historico Medição Individualizada
	 * [UC001779] Consultar Histórico Medição Individualizada
	 * 
	 * @author Rafael Santos
	 * @date 23/01/2006
	 * @param imovelCondominio
	 *            Imovel Condominio
	 * @param anoMesFaturamento
	 *            Ano Mês Fauramento
	 * @return Dados do Historico Medição Individualizada
	 * @throws ControladorException
	 */
	public Collection consultarHistoricoMedicaoIndividualizada(Imovel imovelCondominio, String anoMesFaturamento)
					throws ControladorException{

		Collection colecaoHistoricosMedicaoIndividualizada = null;
		MedicaoHistorico medicaoHistorico = null;
		ConsumoHistorico consumoHistorico = null;
		ConsumoHistorico consumoHistoricoAgua = null;
		LigacaoTipo ligacaoTipo = null;
		Cliente cliente = null;
		ConsumoTipo consumoTipo = null;

		// Matricula Nome do Cliente Tipo de Consumo Consumo de Água Medido Consumo de Água Faturado
		// Consumo Esgoto Faturado Consumo do Rateio
		ConsultarHistoricoMedicaoIndividualizadaHelper consultarHistoricoMedicaoIndividualizadaHelper = null;

		if(imovelCondominio != null){

			colecaoHistoricosMedicaoIndividualizada = new ArrayList();

			// imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper = new ConsultarHistoricoMedicaoIndividualizadaHelper();

			ligacaoTipo = new LigacaoTipo();
			ligacaoTipo.setId(LigacaoTipo.LIGACAO_AGUA);

			// consultar consumo Historico imovel condominio Ligacao Agua
			consumoHistoricoAgua = this.obterConsumoHistoricoMedicaoIndividualizada(imovelCondominio, ligacaoTipo,
							Integer.valueOf(anoMesFaturamento).intValue());

			// inscrição do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper.setMatriculaImovel(imovelCondominio.getId().toString());

			cliente = this.consultarDadosClienteImovelUsuario(imovelCondominio);

			// nome do cliente do imovel condominio
			// consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario(cliente.getNome());
			if(cliente != null){
				consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario(cliente.getNome());
			}else{
				consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario("");
			}

			consumoTipo = consultarDadosConsumoTipoConsumoHistorico(consumoHistoricoAgua);
			if(consumoTipo != null){
				// tipo de consumo do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper.setTipoConsumo(consumoTipo.getDescricaoAbreviada());

			}else{
				// tipo de consumo do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper.setTipoConsumo("");

			}

			try{
				medicaoHistorico = repositorioMicromedicao.pesquisarMedicaoHistoricoTipoAgua(imovelCondominio.getId(),
								Integer.valueOf(anoMesFaturamento));
			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
			if(medicaoHistorico != null){
				// consumo agua medido do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaMedido(medicaoHistorico.getNumeroConsumoMes().toString());
			}else{
				consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaMedido("");
			}

			// consumo agua faturado do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaFaturado(consumoHistoricoAgua.getNumeroConsumoFaturadoMes()
							.toString());

			// consumo rateio do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper.setConsumoRateio(consumoHistoricoAgua.getConsumoRateio().toString());

			ligacaoTipo.setId(LigacaoTipo.LIGACAO_ESGOTO);

			// consultar consumo Historico imovel condominio Ligacao Esgoto
			consumoHistorico = this.obterConsumoHistorico(imovelCondominio, ligacaoTipo, Integer.valueOf(anoMesFaturamento).intValue());

			// consumo esgoto do imovel condominio
			if(consumoHistorico != null){
				consultarHistoricoMedicaoIndividualizadaHelper.setConsumoEsgoto(consumoHistorico.getNumeroConsumoFaturadoMes().toString());
			}else{
				consultarHistoricoMedicaoIndividualizadaHelper.setConsumoEsgoto("");
			}

			// adicionando dados do imovel condominio
			colecaoHistoricosMedicaoIndividualizada.add(consultarHistoricoMedicaoIndividualizadaHelper);

			Collection colecaoConsumoHistoricoImoveisVinculados = this.consultarConsumoHistoricoImoveisVinculados(consumoHistoricoAgua);

			// obter os dados para os imoveis vinculados coleção de ids dos imoveis vinculados ao
			// condominio
			if(colecaoConsumoHistoricoImoveisVinculados != null && !colecaoConsumoHistoricoImoveisVinculados.isEmpty()){

				Iterator iColecaoConsumoHistoricoImoveisVinculados = colecaoConsumoHistoricoImoveisVinculados.iterator();

				while(iColecaoConsumoHistoricoImoveisVinculados.hasNext()){
					String idImovelVinculados = ((Integer) iColecaoConsumoHistoricoImoveisVinculados.next()).toString();

					// imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper = new ConsultarHistoricoMedicaoIndividualizadaHelper();

					ligacaoTipo = new LigacaoTipo();
					ligacaoTipo.setId(LigacaoTipo.LIGACAO_AGUA);

					Imovel imovelVinculado = new Imovel();
					imovelVinculado.setId(Integer.valueOf(idImovelVinculados));

					// consultar consumo Historico imovel vinculado Ligacao Agua
					consumoHistorico = this.obterConsumoHistoricoMedicaoIndividualizada(imovelVinculado, ligacaoTipo,
									Integer.valueOf(anoMesFaturamento).intValue());

					// inscrição do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper.setMatriculaImovel(imovelVinculado.getId().toString());

					cliente = this.consultarDadosClienteImovelUsuario(imovelVinculado);

					// nome do cliente do imovel vinculado
					if(cliente != null){
						consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario(cliente.getNome());
					}else{
						consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario("");
					}

					consumoTipo = consultarDadosConsumoTipoConsumoHistorico(consumoHistorico);
					if(consumoTipo != null){
						// tipo de consumo do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper.setTipoConsumo(consumoTipo.getDescricaoAbreviada());

					}else{
						// tipo de consumo do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper.setTipoConsumo("");

					}

					try{
						medicaoHistorico = repositorioMicromedicao.pesquisarMedicaoHistoricoTipoAgua(imovelVinculado.getId(),
										Integer.valueOf(anoMesFaturamento));
					}catch(ErroRepositorioException e){
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
					if(medicaoHistorico != null){
						// consumo agua medido do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaMedido(medicaoHistorico.getNumeroConsumoMes()
										.toString());
					}else{
						consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaMedido("");
					}
					// consumo agua faturado do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper.setConsumoAguaFaturado(consumoHistorico.getNumeroConsumoFaturadoMes()
									.toString());
					// consumo rateio do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper.setConsumoRateio(consumoHistorico.getConsumoRateio().toString());

					ligacaoTipo.setId(LigacaoTipo.LIGACAO_ESGOTO);

					// consultar consumo Historico imovel vinculado Ligacao Esgoto
					consumoHistorico = this.obterConsumoHistorico(imovelVinculado, ligacaoTipo, Integer.valueOf(anoMesFaturamento)
									.intValue());

					// consumo esgoto do imovel vinculado
					if(consumoHistorico != null){
						consultarHistoricoMedicaoIndividualizadaHelper.setConsumoEsgoto(consumoHistorico.getNumeroConsumoFaturadoMes()
										.toString());
					}else{
						consultarHistoricoMedicaoIndividualizadaHelper.setConsumoEsgoto("");
					}

					// adicionando dados do imovel vinculado
					colecaoHistoricosMedicaoIndividualizada.add(consultarHistoricoMedicaoIndividualizadaHelper);
				}
			}
		}

		return colecaoHistoricosMedicaoIndividualizada;
	}

	/**
	 * Consultar Matriculas dos Imoveis Vinculados do Imovel condominio
	 * [UC0179] Consultar Historico Medição Indiviualizada
	 * 
	 * @author Rafael Santos
	 * @date 23/01/2006
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarConsumoHistoricoImoveisVinculados(ConsumoHistorico consumoHistorico) throws ControladorException{

		try{
			return repositorioMicromedicao.consultarConsumoHistoricoImoveisVinculados(consumoHistorico);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Consultar Matriculas dos Imoveis Vinculados do Imovel condominio Auhtor: Rafael Santos Data:
	 * 23/01/2006 [UC0179] Consultar Historico Medição
	 * Indiviualizada
	 * 
	 * @param imovel
	 *            Imovel
	 * @param ligcaoTipo
	 *            Tipo de Ligacação
	 * @param anoMesFaturamento
	 *            Ano Mes Faturamento
	 * @exception ControladorException
	 * @return Consumo Historico do Imovel
	 */
	public ConsumoHistorico obterConsumoHistoricoMedicaoIndividualizada(Imovel imovel, LigacaoTipo ligacaoTipo, int anoMesReferencia)
					throws ControladorException{

		ConsumoHistorico consumoHistorico = null;

		Object[] colecaoConsumoHistoricoArray = null;

		try{
			colecaoConsumoHistoricoArray = repositorioMicromedicao.obterConsumoHistoricoMedicaoIndividualizada(imovel, ligacaoTipo,
							anoMesReferencia);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoConsumoHistoricoArray != null && !(colecaoConsumoHistoricoArray.length < 0)){

			consumoHistorico = new ConsumoHistorico();

			// Seta o id do histórico
			if(colecaoConsumoHistoricoArray[0] != null){
				consumoHistorico.setId((Integer) colecaoConsumoHistoricoArray[0]);
			}
			// Seta Consumo Rateio
			if(colecaoConsumoHistoricoArray[1] != null){
				consumoHistorico.setConsumoRateio((Integer) colecaoConsumoHistoricoArray[1]);
			}
			// Seta o tipo de ligação
			if(colecaoConsumoHistoricoArray[2] != null){
				consumoHistorico.setNumeroConsumoFaturadoMes((Integer) colecaoConsumoHistoricoArray[2]);
			}

			// Seta o tipo de ligação
			if(colecaoConsumoHistoricoArray[3] != null){
				consumoHistorico.setConsumoTipo((ConsumoTipo) colecaoConsumoHistoricoArray[3]);
			}

		}

		return consumoHistorico;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 14/02/2006
	 * @param DebitoCreditoSituacaoAnterior
	 *            DebitoCreditoSituacaoAtual idConta
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoConta(String codigoConta, int situacaoAtual, int anoMesReferenciaContabil) throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoConta(codigoConta, situacaoAtual, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 15/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idGuiaPagamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoGuiaPagamento(String codigoGuiaPagamento, int situacaoAtualGuia, int anoMesReferenciaContabil)
					throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoGuiaPagamento(codigoGuiaPagamento, situacaoAtualGuia, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 15/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idGuiaPagamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarParcelamento(Integer codigoParcelamento, Integer parcelamentoSituacao, String motivo) throws ControladorException{

		try{
			repositorioCobranca.atualizarParcelamento(codigoParcelamento, parcelamentoSituacao, motivo);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idDebitoACobrar
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoDebitoACobrar(String codigoDebitoACobrar, int situacaoAtualDebito, int anoMesReferenciaContabil)
					throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoDebitoACobrar(codigoDebitoACobrar, situacaoAtualDebito, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Vitor Hora
	 * @created 02/09/2008
	 * @param DebitoCreditoSituacaoAtual
	 *            idDebitoACobrar
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoDebitoACobrarHistorico(String codigoDebitoACobrar, int situacaoAtualDebito, int anoMesReferenciaContabil)
					throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoDebitoACobrarHistorico(codigoDebitoACobrar, situacaoAtualDebito, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idCreditoARealizar
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoCreditoARealizar(String codigoCreditoARealizar, int situacaoAtualCredito, int anoMesReferenciaContabil)
					throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoCreditoARealizar(codigoCreditoARealizar, situacaoAtualCredito, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar referente ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerDebitoACobrarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ControladorException{

		try{
			repositorioCobranca.removerDebitoACobrarDoParcelamento(codigoImovel, codigoParcelamento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar categoria referente ao
	 * parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerDebitoACobrarCategoriaDoParcelamento(Integer idDebito) throws ControladorException{

		try{
			repositorioCobranca.removerDebitoACobrarCategoriaDoParcelamento(idDebito);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover credito a realizar referente ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerCreditoARealizarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ControladorException{

		try{
			repositorioCobranca.removerCreditoARealizarDoParcelamento(codigoImovel, codigoParcelamento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover guia pagamento referente ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerGuiaPagamentoDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ControladorException{

		try{
			FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.IMOVEL_ID, codigoImovel));
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, codigoParcelamento));
			Collection colecaoGuiasPagamentos = repositorioUtil.pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());
			GuiaPagamento guiaPagamento = (GuiaPagamento) Util.retonarObjetoDeColecao(colecaoGuiasPagamentos);
			if(guiaPagamento != null && !guiaPagamento.equals("") && guiaPagamento.getId() != null && !guiaPagamento.getId().equals("")){

				FiltroPagamento filtroPagamento = new FiltroPagamento();
				filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamento.GUIA_PAGAMENTO_ID, guiaPagamento.getId()));
				Collection colecaoPagamentos = repositorioUtil.pesquisar(filtroPagamento, Pagamento.class.getName());

				if(colecaoPagamentos != null && !colecaoPagamentos.isEmpty()){

					Iterator iter = colecaoPagamentos.iterator();

					while(iter.hasNext()){
						Pagamento pagamento = (Pagamento) iter.next();
						getControladorArrecadacao().removerGuiaPagamentoPagamento(pagamento.getId());

					}
				}

				repositorioCobranca.removerClienteGuiaPagamentoDoParcelamento(guiaPagamento.getId());

				repositorioCobranca.removerGuiaPagamentoCobrancaDoParcelamento(guiaPagamento.getId());

				repositorioCobranca.removerGuiaPagamentoDoParcelamento(codigoImovel, codigoParcelamento);
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.parcelamento.nao.pode.ser.desfeito");
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança
	 * 
	 * @author Pedro Alexandre
	 * @created 03/02/2006
	 * @param idsAtividadesCobrancaCronograma
	 *            Array de id's de atividades de cobrança do cronograma
	 * @param idsAtividadesCobrancaEventuais
	 *            Array de id´s de atividades de cobrança eventuais
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void executarAtividadeAcaoCobranca(String[] idsAtividadesCobrancaCronograma, String[] idsAtividadesCobrancaEventuais,
					Usuario usuario) throws ControladorException{

		// pesquisa os parametros do sistem na base
		SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		// recupera o nº de dias após vencimento para início de cobrança
		short numeroDiasVencimentoCobranca = sistemaParametros.getNumeroDiasVencimentoCobranca();

		// recupera o ano/mês corrente de faturamento
		Integer anoMesFaturamentoCorrente = sistemaParametros.getAnoMesFaturamento();

		// cria o filtro de rota
		FiltroRota filtroRota = new FiltroRota();

		// cria a variável que vai armazenar a coleção de rotas pesquisada
		Collection<Rota> colecaoRotas = null;

		// recupera a data corrente
		Date dataCorrente = new Date();

		// cria o indicador do critério de rota
		final int indicadorCriterioRota = 1;

		// cria o ano/mês de referência inicial
		String anoMesReferenciaInicial = "000101";

		// cria o ano/mês de referência final
		// o ano/mês final vai ser o ano/mês de faturamento corrente mais um mês
		String anoMesReferenciaFinal = (Integer.valueOf(Util.somarData(anoMesFaturamentoCorrente))).toString();

		// cria o formato da data
		SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

		// cria a variável que vai armazenar a data de vencimento inicial
		Date dataVencimentoInicial = null;

		// cria a variável que vai armazenar a data de vencimento final
		Date dataVencimentoFinal = null;

		try{
			// cria a data de vencimento inicial
			dataVencimentoInicial = formato.parse("01/01/0001");

			// erro na criação da data
		}catch(ParseException e){
			// seta a data de vencimento inicial para nula
			dataVencimentoInicial = null;
		}

		// recupera a data de vencimento final
		dataVencimentoFinal = Util.subtrairNumeroDiasDeUmaData(dataCorrente, numeroDiasVencimentoCobranca);

		/*
		 * Executa as atividades de cobrança do cronograma que foram previamente comandas
		 * ===============================================================================
		 */
		// se o usuário selecionou alguma atividade de cobrança de cronograma
		if(idsAtividadesCobrancaCronograma != null){
			// laço para executar as atividades de cobrança do cronograma
			FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
			// carrega os objetos da pesquisa
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao");

			// Carrega a ação precedente
			filtroCobrancaAcaoAtividadeCronograma
							.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao.cobrancaAcaoPredecessora.servicoTipo");

			filtroCobrancaAcaoAtividadeCronograma
							.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao.servicoTipo");

			filtroCobrancaAcaoAtividadeCronograma
							.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.cobrancaGrupo");
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
			for(int i = 0; idsAtividadesCobrancaCronograma.length > i; i++){

				// cria o filtro de cobrança de ação da atividade do cronograma

				// seta o código no filtro
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID,
								idsAtividadesCobrancaCronograma[i]));

				filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();

				// pesquisa a atividade de ação do cronograma no sistema
				Collection atividadesCobrancaCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
								CobrancaAcaoAtividadeCronograma.class.getName());

				// recupera oobjeto CobrancaAcaoAtividadeCronograma da coleção
				CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) Util
								.retonarObjetoDeColecao(atividadesCobrancaCronograma);

				// repera o grupo de cobrança
				CobrancaGrupo grupoCobranca = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaGrupoCronogramaMes()
								.getCobrancaGrupo();

				// recupera o ano/mês de referência do ciclo de cobrança
				int anoMesReferenciaCicloCobranca = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
								.getCobrancaGrupoCronogramaMes().getAnoMesReferencia();

				// recupera o código da atividade
				Integer atividade = cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId();

				// seta o código do grupo de cobrança no filtro de rota
				filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, grupoCobranca.getId()));

				// carrega os objetos necessários de rota
				// filtroRota.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");

				// pesqusia a coleção de rotas
				colecaoRotas = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

				// se a atividade for "simular" ou "emitir"
				if(atividade.intValue() == CobrancaAtividade.SIMULAR.intValue()
								|| atividade.intValue() == CobrancaAtividade.EMITIR.intValue()){

					// chama o metódo de gerar atividade de ação de cobrança o metódo vai retornar
					// um objeto
					// GerarAtividadeAcaoCobrancaHelper contendo a quantidade de documentos, a
					// quantidade de itens
					// cobrados e o valor dos documentos
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this.gerarAtividadeAcaoCobranca(grupoCobranca,
									anoMesReferenciaCicloCobranca, cobrancaAcaoAtividadeCronograma, null, colecaoRotas,
									cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaAcao(),
									cobrancaAcaoAtividadeCronograma.getCobrancaAtividade(), indicadorCriterioRota, null, null, null,
									anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, new Date(),
									1, null, usuario);

					// Soma os valores atuais mais os valores calculados
					Integer quantidadeDocumentosAtual = cobrancaAcaoAtividadeCronograma.getQuantidadeDocumentos();
					Integer quantidadeItensCobradosAtual = cobrancaAcaoAtividadeCronograma.getQuantidadeDocumentos();
					BigDecimal valorDocumentoAtual = cobrancaAcaoAtividadeCronograma.getValorDocumentos();

					if(quantidadeDocumentosAtual == null){
						quantidadeDocumentosAtual = Integer.valueOf(0);
					}

					if(quantidadeItensCobradosAtual == null){
						quantidadeItensCobradosAtual = Integer.valueOf(0);
					}

					if(valorDocumentoAtual == null){
						valorDocumentoAtual = BigDecimal.ZERO;
					}

					cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentosAtual
									+ gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca());
					cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos());
					cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentoAtual.add(gerarAtividadeAcaoCobrancaHelper
									.getValorDocumentosCobranca()));
					cobrancaAcaoAtividadeCronograma.setRealizacao(dataCorrente);
					getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);

					// se a atividade for encerrar atividade de ação de cobrança
				}else if(atividade == CobrancaAtividade.ENCERRAR){
					// CHAMAR O [UC0000] Encerrar Atividade de Ação de Cobrança
					// O caso de uso ainda não foi especificado dia:06/02/2006
				}
			}
			filtroCobrancaAcaoAtividadeCronograma = null;
		}

		/*
		 * Executa as atividades de cobrança eventuais que foram previamente comandas
		 * =========================================================================
		 */
		// se o usuário selecionou alguma atividade de cobrança eventual
		if(idsAtividadesCobrancaEventuais != null){
			// laço para executar as atividades de cobrança eventuais
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			// carrega os objetos da pesquisa
			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaGrupo");
			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao");

			// Carrega a ação precedente
			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.cobrancaAcaoPredecessora.servicoTipo");

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.servicoTipo");

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.documentoTipo");

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");
			for(int i = 0; idsAtividadesCobrancaEventuais.length > i; i++){

				// cria o filtro de cobrança ação atividade comando

				// adiciona o código da atividade de cobrança eventual no filtro
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
								idsAtividadesCobrancaEventuais[i]));

				// pesquisa a atividade de cobrança de comando no sistema
				Collection atividadesCobrancaComando = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
								CobrancaAcaoAtividadeComando.class.getName());

				filtroCobrancaAcaoAtividadeComando.limparListaParametros();

				// recupera o objeto CobrancaAcaoAtividadeComando da coleção
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util
								.retonarObjetoDeColecao(atividadesCobrancaComando);

				// recupera o grupo de cobrança
				CobrancaGrupo grupoCobranca = cobrancaAcaoAtividadeComando.getCobrancaGrupo();

				// recupera o código da atividade
				Integer atividade = cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId();

				Integer indicadorCriterio = null;

				if(cobrancaAcaoAtividadeComando.getIndicadorCriterio() != null){
					indicadorCriterio = cobrancaAcaoAtividadeComando.getIndicadorCriterio().intValue();
				}

				// pesquisa a coleção de rotas
				colecaoRotas = this.pesquisarListaRotasComando(grupoCobranca, cobrancaAcaoAtividadeComando);

				// se a atividade for "simular" ou "emitir"
				if(atividade.intValue() == CobrancaAtividade.SIMULAR.intValue()
								|| atividade.intValue() == CobrancaAtividade.EMITIR.intValue()){

					// chama o metódo de gerar atividade de ação de cobrança o metódo vai retornar
					// um objeto
					// GerarAtividadeAcaoCobrancaHelper contendo a quantidade de documentos, a
					// quantidade de itens
					// cobrados e o valor dos documentos
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this.gerarAtividadeAcaoCobranca(grupoCobranca,
									anoMesFaturamentoCorrente, null, cobrancaAcaoAtividadeComando, colecaoRotas,
									cobrancaAcaoAtividadeComando.getCobrancaAcao(), cobrancaAcaoAtividadeComando.getCobrancaAtividade(),
									indicadorCriterio, cobrancaAcaoAtividadeComando.getCobrancaCriterio(), cobrancaAcaoAtividadeComando
													.getCliente(), cobrancaAcaoAtividadeComando.getClienteRelacaoTipo(),
									cobrancaAcaoAtividadeComando.getAnoMesReferenciaContaInicial().toString(), cobrancaAcaoAtividadeComando
													.getAnoMesReferenciaContaFinal().toString(), cobrancaAcaoAtividadeComando
													.getDataVencimentoContaInicial(), cobrancaAcaoAtividadeComando
													.getDataVencimentoContaFinal(), new Date(), 1, null, usuario);

					// Soma os valores atuais mais os valores calculados

					// Recupera
					Integer quantidadeDocumentosAtual = cobrancaAcaoAtividadeComando.getQuantidadeDocumentos();
					Integer quantidadeItensCobradosAtual = cobrancaAcaoAtividadeComando.getQuantidadeDocumentos();
					BigDecimal valorDocumentoAtual = cobrancaAcaoAtividadeComando.getValorDocumentos();

					if(quantidadeDocumentosAtual == null){
						quantidadeDocumentosAtual = Integer.valueOf(0);
					}

					if(quantidadeItensCobradosAtual == null){
						quantidadeItensCobradosAtual = Integer.valueOf(0);
					}

					if(valorDocumentoAtual == null){
						valorDocumentoAtual = BigDecimal.ZERO;
					}

					cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(quantidadeDocumentosAtual
									+ gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca());
					cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos());
					cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentoAtual.add(gerarAtividadeAcaoCobrancaHelper
									.getValorDocumentosCobranca()));
					cobrancaAcaoAtividadeComando.setRealizacao(dataCorrente);
					getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);

					// se a atividade for encerrar atividade de ação de cobrança
				}else if(atividade == CobrancaAtividade.ENCERRAR){
					// CHAMAR O [UC0000] Encerrar Atividade de Ação de Cobrança
					// O caso de uso ainda não foi especificado dia:06/02/2006
				}

			}
			filtroCobrancaAcaoAtividadeComando = null;
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança - fluxo principal
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @param grupoCobranca
	 *            Grupo de Cobrança
	 * @param anoMesReferenciaCicloCobranca
	 *            Ano/Mês de referência do ciclo de cobrança
	 * @param idCronogramaAtividadeAcaoCobranca
	 *            Código do cronograma da atividade da ação de cobrança
	 * @param idComandoAtividadeAcaoCobranca
	 *            Código do comando da atividade da ação de cobrança
	 * @param rotas
	 *            Coleção de rotas
	 * @param acaoCobranca
	 *            Ação de cobrança
	 * @param atividadeCobranca
	 *            Atividade de cobrança
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param criterioCobranca
	 *            Critério de cobrança
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 * @deprecated
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobranca(CobrancaGrupo grupoCobranca, int anoMesReferenciaCicloCobranca,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Collection<Rota> rotas, CobrancaAcao acaoCobranca,
					CobrancaAtividade atividadeCobranca, Integer indicadorCriterio, CobrancaCriterio criterioCobranca, Cliente cliente,
					ClienteRelacaoTipo relacaoClienteImovel, String anoMesReferenciaInicial, String anoMesReferenciaFinal,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual, int idFuncionalidadeIniciada,
					Cliente clienteSuperior, Usuario usuario) throws ControladorException{

		return null;
				}

	private void emitirOrdensServicoDocumentoCobranca(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, Usuario usuario) throws ControladorException{

		try{
			Collection<OrdemServico> colecaoPesquisaOrdemServico = repositorioCobranca.pesquisarOrdemServicoCobrancaAtividadeAcao(
							cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);
			if(colecaoPesquisaOrdemServico != null && !colecaoPesquisaOrdemServico.isEmpty()){
				List<OrdemServico> listPesquisaOrdemServico = new ArrayList();
				listPesquisaOrdemServico.addAll(colecaoPesquisaOrdemServico);
				byte[] relatorioByte = GeradorRelatorioOrdemServico.getInstancia().gerarRelatorioOrdemServico(listPesquisaOrdemServico);
				ServicoTipo servicoTipo = null;
				if(cobrancaAcaoAtividadeComando != null){
					servicoTipo = cobrancaAcaoAtividadeComando.getCobrancaAcao().getServicoTipo();
				}else{
					servicoTipo = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getServicoTipo();
				}

				RelatorioOrdemServicoCobranca relatorio = new RelatorioOrdemServicoCobranca(usuario, "/"
								+ servicoTipo.getOrdemServicoLayout().getNomeRelatorio());
				relatorio.addParametro("relatorio", relatorioByte);
				relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
				this.getControladorBatch().iniciarProcessoRelatorio(relatorio);
			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}catch(GeradorRelatorioOrdemServicoException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	private void emitirOrdensServicoDocumentoCobranca(List<Integer> listaIdentificadoresOS, Usuario usuario) throws ControladorException{

		if(listaIdentificadoresOS != null && !listaIdentificadoresOS.isEmpty()){
			TarefaRelatorio tarefaRelatorio = new GeradorRelatorioOrdemServico(usuario,
							ConstantesRelatorios.RELATORIO_ORDEM_SERVICO_COBRANCA);
			tarefaRelatorio.addParametro("listaOrdemServico",
							getControladorOrdemServico().listarOrdensServicoOrdenadasPorInscricao(listaIdentificadoresOS));
			tarefaRelatorio.addParametro("tipoFormatoRelatorio", Integer.valueOf(TarefaRelatorio.TIPO_PDF));
			this.getControladorBatch().iniciarProcessoRelatorio(tarefaRelatorio);
		}
	}



	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * [SB0001] Gerar Atividade de Ação de Cobrança para os Imóveis do Cliente *
	 * [SB0015] - Selecionar Cliente da Ação de Cobrança
	 */

	private Cliente selecionarClienteAcaoCobranca(ClienteRelacaoTipo relacaoClienteImovel, Imovel imovel){

		Cliente cliente = null;

		// 1. O sistema seleciona o cliente da ação de cobrança de acordo com as
		// seguintes regras
		// [FS0006 - Verificar existência do cliente da ação de cobrança]:
		// 1.1. Caso o cliente da ação seja o indicado na conta (Tipo Relação
		// Cliente-Imóvel para Seleção do Cliente da Ação de Cobrança com o valor nulo):
		if(relacaoClienteImovel == null){
			// 1.1.1. Selecionar o cliente com nome na conta (CLIE_ID da tabela
			// CLIENTE_IMOVEL com IMOV_ID=Id do Imóvel em processamento e
			// CLIM_ICNOMECONTA=1
			// e CLIM_DTRELACAOFIM com o valor nulo).
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.INDICADOR_NOME_CONTA, ConstantesSistema.SIM));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);

			Collection colecaoClienteImovel = Fachada.getInstancia().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());
			ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(colecaoClienteImovel);

			if(clienteImovel != null){
				cliente = clienteImovel.getCliente();
			}

		}else{

			// 1.2. Caso contrário:
			// 1.2.1. Selecionar o cliente de acordo com o tipo de relação definido (CLIE_ID
			// da tabela CLIENTE_IMOVEL com IMOV_ID=Id do Imóvel em processamento e
			// CRTP_ID=Tipo Relação Cliente-Imóvel para Seleção do Cliente da Ação de
			// Cobrança e CLIM_DTRELACAOFIM com o valor nulo).

			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, relacaoClienteImovel
							.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);

			Collection colecaoClienteImovel = Fachada.getInstancia().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());
			ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(colecaoClienteImovel);

			if(clienteImovel != null){
				cliente = clienteImovel.getCliente();
			}

		}

		return cliente;

	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0001] Gerar Atividade de
	 * Ação de Cobrança para os Imóveis do Cliente
	 * 
	 * @author Pedro Alexandre
	 * @created 07/02/2006
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 * @author Hugo Lima
	 * @created 02/03/2012
	 *          Alteração de método adequado para receber o id da funcionalidade permitindo assim o
	 *          registro no log de execução do processo
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImoveisCliente(
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Cliente cliente, ClienteRelacaoTipo relacaoClienteImovel,
					Integer indicadorCriterio, CobrancaAcao acaoCobranca, CobrancaAtividade atividadeCobranca,
					Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando, CobrancaCriterio cobrancaCriterioComando,
					String anoMesReferenciaInicial, String anoMesReferenciaFinal, Date dataVencimentoInicial, Date dataVencimentoFinal,
					Date dataAtual, Cliente clienteSuperior, SistemaParametro sistemaParametros, Integer idSetorComercial,
					Integer idFuncionalidadeIniciada, Integer idFaturamentoGrupoCronogramaMensal) throws ControladorException{

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = criarHelperAtividadeCobranca();

		boolean flagTerminou = false;
		int numeroInicial = 0;

		while(!flagTerminou){

			Collection colecaoImoveis = null;
			// item 1
			// Alterado por Sávio Luiz data:26/11/2007
			if(clienteSuperior != null){

				Collection<Integer> colecaoIdsClientes = getControladorCadastro().pesquisarClientesSubordinados(clienteSuperior.getId());
				if(colecaoIdsClientes != null && !colecaoIdsClientes.isEmpty()){
					colecaoIdsClientes.add(clienteSuperior.getId());
					colecaoImoveis = getControladorImovel().pesquisarImoveisClientesRelacao(colecaoIdsClientes, numeroInicial,
									idSetorComercial);
				}else{
					colecaoIdsClientes = new ArrayList();
					colecaoIdsClientes.add(clienteSuperior.getId());
					colecaoImoveis = getControladorImovel().pesquisarImoveisClientesRelacao(colecaoIdsClientes, numeroInicial,
									idSetorComercial);
				}

			}else{
				colecaoImoveis = getControladorImovel().pesquisarImoveisClientesRelacao(cliente, relacaoClienteImovel, numeroInicial,
								idSetorComercial);
			}

			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){

				if(colecaoImoveis.size() < 500){
					flagTerminou = true;
				}

				// Objetos declarados/inicializados fora do loop para poupar memoria,
				// devido a qtde de imoveis que serão processados
				Imovel imovel = new Imovel();
				LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
				ImovelPerfil imovelPerfil = new ImovelPerfil();
				Quadra quadra = new Quadra();
				// Rota rotaEmpresa = null;
				Localidade localidade = new Localidade();
				SetorComercial setorComercial = new SetorComercial();
				CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
				Rota rota = new Rota();
				Empresa empresa = new Empresa();

				imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
				imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
				imovel.setImovelPerfil(imovelPerfil);
				imovel.setQuadra(quadra);
				imovel.setLocalidade(localidade);
				imovel.setSetorComercial(setorComercial);
				imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
				quadra.setRota(rota);
				imovel.setRota(rota);
				rota.setEmpresa(empresa);

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

				labelRotasClientes: while(iteratorColecaoImoveis.hasNext()){

					Object[] arrayImovel = (Object[]) iteratorColecaoImoveis.next();


					imovel.setId((Integer) arrayImovel[0]);

					rota.setId((Integer) arrayImovel[1]);

					ligacaoAguaSituacao.setId((Integer) arrayImovel[2]);

					ligacaoEsgotoSituacao.setId((Integer) arrayImovel[3]);

					imovelPerfil.setId((Integer) arrayImovel[4]);

					// caso a ação de cobrança gere a ordem de serviço
					if(acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null){
						// seta a empresa cobranca
						empresa.setId((Integer) arrayImovel[14]);
					}else{
						// seta a empresa
						empresa.setId((Integer) arrayImovel[5]);
					}

					localidade.setId((Integer) arrayImovel[6]);

					setorComercial.setCodigo((Integer) arrayImovel[7]);

					quadra.setNumeroQuadra((Integer) arrayImovel[8]);

					imovel.setLote((Short) arrayImovel[9]);

					imovel.setLote((Short) arrayImovel[10]);

					quadra.setId((Integer) arrayImovel[11]);

					cobrancaSituacaoTipo.setId((Integer) arrayImovel[12]);

					imovel.setIndicadorDebitoConta((Short) arrayImovel[13]);

					imovel.setIndicadorExclusao((Short) arrayImovel[15]);


					// cria o objeto que vai armazenar temporariamente os dados retornados
					// pelo [SB0003], para cada imóvel
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

					// [SB0003] - Gerar Atividade de Ação de Cobrança para o imóvel
					gerarAtividadeAcaoCobrancaHelperTemp = this.gerarAtividadeAcaoCobrancaParaImovel(cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, imovel, indicadorCriterio, acaoCobranca, atividadeCobranca,
									cobrancaCriterioComando, colecaoCobrancaCriterioLinhaComando, anoMesReferenciaInicial,
									anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
									idFaturamentoGrupoCronogramaMensal, relacaoClienteImovel);

					// se o objeto retornado for diferente de nulo
					if(gerarAtividadeAcaoCobrancaHelperTemp != null){

						// recupera a quantidade de documentos de cobrança, quantidade
						// de itens cobrados e o valor do documento do objeto retornado pelo
						// [SB0003]
						gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeDocumentosCobranca() + 1);
						gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeItensCobradosDocumentos()
										+ gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos());
						gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getValorDocumentosCobranca()
										.add(gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca()));

						// Caso seja um comando eventual e a quantidade de
						// documentos gerados seja igual a quantidade máxima de documentos
						// especificada no comando

						// Alterado por Chico, 06/06/08, analista: Ana Breda
						// caso seja um comando de cronograma, verificar é foi preenchida a
						// quantidade maxima de documentos a ser gerada
						if((cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getQuantidadeMaximaDocumentos() != null && cobrancaAcaoAtividadeComando
										.getQuantidadeMaximaDocumentos().equals(
														gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca()))
										|| (cobrancaAcaoAtividadeCronograma != null
														&& cobrancaAcaoAtividadeCronograma.getQuantidadeMaximaDocumentos() != null && cobrancaAcaoAtividadeCronograma
														.getQuantidadeMaximaDocumentos().equals(
																		gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca()))){
							// não roda mais os imóveis das rotas pos teriores
							break labelRotasClientes;
						}

					}

					// se o indicador do critério for igual a 2(dois) - "usa o critério do comando"
				}

				// 3.2. Para cada 500 imóveis e no último imóvel, o sistema registra mensagem
				// <<Inclui>> [UC3043 Registrar Log de Execução do Processo], passando o id da
				// funcionalidade iniciada e a mensagem ["Quantidade de imóveis processados: " +
				// quantidade de imóveis já processados].
				if(!Util.isVazioOuBranco(idFuncionalidadeIniciada)){
					if(flagTerminou && colecaoImoveis.size() < 500){
						this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada,
										"Quantidade de imóveis processados: " + (numeroInicial + colecaoImoveis.size()));
					}else{
						this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada,
										"Quantidade de imóveis processados: " + (numeroInicial + 500));
					}
				}

				imovel = null;
				ligacaoAguaSituacao = null;
				ligacaoEsgotoSituacao = null;
				imovelPerfil = null;
				quadra = null;
				// Rota rotaEmpresa = null;
				localidade = null;
				setorComercial = null;
				cobrancaSituacaoTipo = null;
				rota = null;
				empresa = null;

			}else{
				flagTerminou = true;
			}
			numeroInicial = numeroInicial + 500;
			colecaoImoveis = null;
		}

		// fim item 2

		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}



	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0003] Gerar Atividade de
	 * Ação de Cobrança para Imóvel
	 * 
	 * @author Pedro Alexandre
	 * @created 08/02/2006
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param imovel
	 *            Imóvel
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param criterioCobranca
	 *            Critériode cobrança para ser utilizado
	 * @param colecaoCobrancaCriterioLinha
	 *            Coleção de linha de critério de cobrança
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @param idFaturamentoAtividadeCronograma
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImovel(
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Imovel imovel, Integer indicadorCriterio,
					CobrancaAcao acaoCobranca, CobrancaAtividade atividadeCobranca, CobrancaCriterio criterioCobranca,
					Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha, String anoMesReferenciaInicial,
					String anoMesReferenciaFinal, Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual,
					SistemaParametro sistemaParametros, Integer idFaturamentoGrupoCronogramaMensal, ClienteRelacaoTipo relacaoClienteImovel)
					throws ControladorException{

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = null;

		Date dataCorrente = new Date();
		Collection<CobrancaDocumentoItem> colecaoDebitosNotificados = null;

		// ************************************************************************
		// [SB0015] - Selecionar Cliente da Ação de Cobrança
		Cliente cliente = this.selecionarClienteAcaoCobranca(relacaoClienteImovel, imovel);

		if(cliente == null){
			// [FS0006] - Verificar existência do cliente da ação de cobrança
			informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.CLIENTE_SEM_NOME_CONTA, cobrancaAcaoAtividadeComando,
							cobrancaAcaoAtividadeCronograma);

			return gerarAtividadeAcaoCobrancaHelper;
		}
		// ************************************************************************

		// 1. Caso o imóvel esteja excluído (IMOV_ICEXCLUSAO = 1 da tabela IMOVEL), registrar motivo
		// de não geração "Imóvel excluído" [SB0009 - Registrar motivo de não geração do documento
		// de cobrança] e passar para o próximo imóvel.
		if(!Util.isVazioOuBranco(imovel.getIndicadorExclusao()) && imovel.getIndicadorExclusao().equals(ConstantesSistema.SIM)){
			informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_EXCLUIDO, cobrancaAcaoAtividadeComando,
							cobrancaAcaoAtividadeCronograma);

			return gerarAtividadeAcaoCobrancaHelper;
		}

		// 2. Caso a ação de cobrança não permita a seleção do imóvel caso o cliente usuário da ação
		// de cobrança não tenha o CPF/CNPJ preenchido (CBAC_ICCPFCNPJ com o valor 2 (Não)):
		if(acaoCobranca.getIndicadorCPFCNPJ().equals(ConstantesSistema.NAO)){

			if(cliente != null && cliente.getCpf() == null && cliente.getCnpj() == null){
				// 2.1. Caso o cliente usuário da ação de cobrança do imóvel não tenha o CPF/CNPJ
				// preenchido
				// (CLIE_NNCPF e CLIE_NNCNPJ com o valor nulo ou branco na tabela CLIENTE com
				// CLIE_ID=CLIE_ID da tabela CLIENTE_IMOVEL selecionado no SB0015 com
				// IMOV_ID=IMOV_ID da
				// tabela IMOVEL e CLIM_DTRELACAOFIM com o valor nulo), registrar motivo de não
				// geração
				// "Cliente sem CPF/CNPJ" [SB0009 - Registrar motivo de não geração do documento de
				// cobrança] e passar para o próximo imóvel.

				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.CLIENTE_SEM_CPF_CNPJ, cobrancaAcaoAtividadeComando,
								cobrancaAcaoAtividadeCronograma);
				return gerarAtividadeAcaoCobrancaHelper;
			}

		}else{
			// 3. Caso contrário, ou seja, a ação de cobrança permita a seleção do imóvel caso o
			// cliente
			// da ação de cobrança não tenha o CPF/CNPJ preenchido (CBAC_ICCPFCNPJ com o valor 1
			// (Sim)):
			// 3.1. Caso o critério exija que o cliente da ação de cobrança tenha o CPF/CNPJ
			// preenchido
			// (CBCT_ICCPFCNPJ com o valor 1 (Sim)):
			if(criterioCobranca.getIndicadorComCpf().equals(ConstantesSistema.SIM)){
				// 3.1.1. Caso o cliente da ação de cobrança do imóvel não tenha o CPF/CNPJ
				// preenchido
				// (CLIE_NNCPF e CLIE_NNCNPJ com o valor nulo ou branco na tabela CLIENTE com
				// CLIE_ID=CLIE_ID da tabela CLIENTE_IMOVEL selecionado no SB0015), registrar motivo
				// de não
				// geração "Cliente sem CPF/CNPJ" [SB0009 - Registrar motivo de não geração do
				// documento de
				// cobrança] e passar para o próximo imóvel.
				if(cliente != null && cliente.getCpf() == null && cliente.getCnpj() == null){
					informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.CLIENTE_SEM_CPF_CNPJ,
									cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);
					return gerarAtividadeAcaoCobrancaHelper;
				}
			}
		}

		// 4. Caso a ação de cobrança não permita a seleção do imóvel caso o endereço não tenha o
		// CEP preenchido (CBAC_ICCEP com o valor 2 (Não)) e o endereço do imóvel (<<Inclui>>
		// [UC0085] Obter Endereço com os dados do endereço da tabela IMOVEL) não tenha o CEP
		// preenchido (CEP retornado do [UC0085] com o valor nulo ou branco ou zero), registrar
		// motivo de não geração "Imóvel sem CEP" [SB0009 - Registrar motivo de não geração do
		// documento de cobrança] e passar para o próximo imóvel.
		if(acaoCobranca.getIndicadorCEP().equals(ConstantesSistema.NAO)){
			Object[] endereco = this.getControladorEndereco().pesquisarEnderecoFormatadoLista(imovel.getId(), 0);
			String cep = (String) endereco[3];
			if(Util.isVazioOuBranco(cep)){
				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SEM_CEP, cobrancaAcaoAtividadeComando,
								cobrancaAcaoAtividadeCronograma);
				return gerarAtividadeAcaoCobrancaHelper;
			}
		}

		// 6. Caso o critério exija que o cliente da ação de cobrança tenha telefone
		// (CBCT_ICTELEFONE com o valor 1 (Sim)):

		if(criterioCobranca.getIndicadorComTelefone().equals(ConstantesSistema.SIM)){

			// 6.1. Caso o cliente da ação de cobrança do imóvel não tenha telefone (não existe
			// ocorrência na tabela CLIENTE_FONE com CLIE_ID=CLIE_ID da tabela CLIENTE_IMOVEL
			// selecionado no SB0015), registrar motivo de não geração "Cliente sem FONE" [SB0009 _
			// Registrar motivo de não geração do documento de cobrança] e passar para o próximo
			// imóvel.

			Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFonePorCliente(cliente.getId());

			if(Util.isVazioOrNulo(colecaoClienteFone)){
				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.CLIENTE_SEM_FONE, cobrancaAcaoAtividadeComando,
								cobrancaAcaoAtividadeCronograma);
				return gerarAtividadeAcaoCobrancaHelper;
			}
		}

		// *************************************************************************

		// item 2
		CobrancaAcao cobrancaAcaoPrecedente = acaoCobranca.getCobrancaAcaoPredecessora();
		if(cobrancaAcaoPrecedente != null && !cobrancaAcaoPrecedente.equals("")){

			// item 2.1
			// data mínima de emissão/realização da ação precedente = data corrente -
			// CBAC_NNDIASMINIMOACAOPRECEDENTE
			Date dataMinimaEmissaoRealizacaoAcaoPrecente = Util.subtrairNumeroDiasDeUmaData(dataCorrente,
							acaoCobranca.getNumeroDiasMinimoAcaoPrecedente());
			// calcula a data minima de emissão/realização da ação precedente diminuindo o numero de
			// dias da validade
			Date dataEmissaoValidacaoAcaoPrecente = Util.subtrairNumeroDiasDeUmaData(dataCorrente,
							cobrancaAcaoPrecedente.getNumeroDiasValidade());

			// Formata a data para a última hora, minutos e segundos
			Calendar dataCalendar = new GregorianCalendar();
			dataCalendar.setTime(dataMinimaEmissaoRealizacaoAcaoPrecente);
			dataCalendar.set(Calendar.HOUR_OF_DAY, 23);
			dataCalendar.set(Calendar.MINUTE, 59);
			dataCalendar.set(Calendar.SECOND, 59);
			dataCalendar.set(Calendar.MILLISECOND, 999);
			dataMinimaEmissaoRealizacaoAcaoPrecente = dataCalendar.getTime();

			// Formata a data para a última hora, minutos e segundos
			// dataCalendar = new GregorianCalendar();
			dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
			dataCalendar.set(Calendar.HOUR_OF_DAY, 00);
			dataCalendar.set(Calendar.MINUTE, 00);
			dataCalendar.set(Calendar.SECOND, 00);
			dataCalendar.set(Calendar.MILLISECOND, 000);
			dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();

			dataCalendar = null;

			// item 3.2
			Integer idDocumentoCobrancaAcaoPrecedente = null;
			try{
				idDocumentoCobrancaAcaoPrecedente = repositorioCobranca.pesquisarDocumentoCobrancaRelativoAcaoPrecedente(imovel.getId(),
								cobrancaAcaoPrecedente.getDocumentoTipo().getId(), acaoCobranca.getId(),
								dataMinimaEmissaoRealizacaoAcaoPrecente, dataEmissaoValidacaoAcaoPrecente);
			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

			// item 3.3.1
			// se não existe documentos de ação de cobrança para o imóvel
			if(idDocumentoCobrancaAcaoPrecedente == null){

				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SEM_DOC_PRECED_VALIDO,
								cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

				return gerarAtividadeAcaoCobrancaHelper;

				// item 3.3.2 se o imóvel possui documento de cobrança
			}

			// 2.3 - se a ação de cobrança precedente gerar ordem de serviço
			if(cobrancaAcaoPrecedente.getServicoTipo() != null){

				try{
					idDocumentoCobrancaAcaoPrecedente = repositorioCobranca.pesquisarDocumentoCobrancaAcaoPrecedente(imovel.getId(),
									cobrancaAcaoPrecedente.getServicoTipo().getId(), AtendimentoMotivoEncerramento.INDICADOR_EXECUCAO_SIM,
									dataMinimaEmissaoRealizacaoAcaoPrecente);

				}catch(ErroRepositorioException ex){
					throw new ControladorException("erro.sistema", ex);
				}
				// Caso não exista ordem de serviço, relativa a ação precedente passar para próximo
				// imóvel
				if(idDocumentoCobrancaAcaoPrecedente == null){

					informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SEM_OS_EXECUTADA,
									cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

					return gerarAtividadeAcaoCobrancaHelper;
				}
			}

			colecaoDebitosNotificados = this.pesquisarDebitosNotificados(idDocumentoCobrancaAcaoPrecedente);

		}

		/*
		 * 5. Caso o imóvel esteja com negociação pendente (ou seja, exista ocorrência na tabela
		 * COBRANCA_NEGOCIACAO_ATEND com IMOV_ID = matrícula do imóvel e RGAT_ID = RGAT_ID da tabela
		 * REGISTRO_ATENDIMENTO com RGAT_TMENCERRAMENTO igual a nulo), passar para o próximo imóvel.
		 */

		try{
			Collection collIdCobrancaNegociacaoAtendimento = repositorioCobranca.pesquisarCobrancaNegociacaoAtendimento(imovel.getId());
			if(collIdCobrancaNegociacaoAtendimento != null && !collIdCobrancaNegociacaoAtendimento.isEmpty()){

				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_NEGOCIACAO_DEB_PENDENTE,
								cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

				return gerarAtividadeAcaoCobrancaHelper;
			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		/*
		 * 6. Caso o imóvel esteja negativado (existe ocorrência na tabela NEGATIVADOR_MOVIMENTO_REG
		 * com IMOV_ID=Id do imóvel e NMRG_ICACEITO com o valor 1 ou nulo e NMRG_CDEXCLUSAOTIPO com
		 * o valor nulo e NMRG_IDREGINCLUSAO com o valor nulo) e a ação de cobrança seja de uma
		 * negativação (Ação de cobrança = Negativação SPC - BRASIL ou Ação de cobrança =
		 * Negativação SPC - SÃO PAULO ou Ação de cobrança = Negativação SERASA) , passar para o
		 * próximo imóvel;
		 */
		if(acaoCobranca.getId().intValue() == CobrancaAcao.NEGATIVACAO_SPC_BRASIL.intValue()
						|| acaoCobranca.getId().intValue() == CobrancaAcao.NEGATIVACAO_SPC_SP.intValue()
						|| acaoCobranca.getId().intValue() == CobrancaAcao.NEGATIVACAO_SERASA.intValue()){

			boolean isImovelNegativado = this.getControladorSpcSerasa().isImovelNegativado(imovel.getId(), acaoCobranca.getId());

			if(isImovelNegativado){

				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_NEGATIVACAO_VALIDA,
								cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

				return gerarAtividadeAcaoCobrancaHelper;
			}
		}

		/*
		 * 7.1. Caso a ação de cobrança não seja cobrança bancária (CBAC_DSCOBRANCAACAO diferente de
		 * "COBRANCA BANCARIA" para CBAC_ID=Id da Ação de Cobrança recebido), nem negativação (Ação
		 * de cobrança diferente de Negativação SPC - BRASIL e Ação de cobrança diferente de
		 * Negativação SPC - SÃO PAULO e Ação de cobrança diferente de Negativação SERASA), nem
		 * cobrança administrativa (CBAC_DSCOBRANCAACAO diferente de "COBRANCA ADMINISTRATIVA" para
		 * CBAC_ID=Id da Ação de Cobrança recebido)
		 */
		if(acaoCobranca.getId().intValue() != CobrancaAcao.NEGATIVACAO_SPC_BRASIL.intValue()
						&& acaoCobranca.getId().intValue() != CobrancaAcao.NEGATIVACAO_SPC_SP.intValue()
						&& acaoCobranca.getId().intValue() != CobrancaAcao.NEGATIVACAO_SERASA.intValue()
						&& acaoCobranca.getId().intValue() != CobrancaAcao.COBRANCA_BANCARIA.intValue()
						&& acaoCobranca.getId().intValue() != CobrancaAcao.COBRANCA_ADMINISTRATIVA.intValue()){

			try{
				Object[] retorno = null;

				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID, acaoCobranca
								.getId()));
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_USO, ConstantesSistema.SIM));
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);

				// Recupera a ação de cobrança sucessora a ação de cobrança que está sendo
				// tratada
				Collection<CobrancaAcao> colecaoAcaoCobrancaSucessora = getControladorUtil().pesquisar(filtroCobrancaAcao,
								CobrancaAcao.class.getName());

				// 7.1.2. Caso a ação do comando não seja predecessora de outra ação
				if(Util.isVazioOrNulo(colecaoAcaoCobrancaSucessora)){

					retorno = repositorioCobranca.pesquisarDocumentoCobrancaValido(imovel.getId(), acaoCobranca.getDocumentoTipo().getId(),
									acaoCobranca.getNumeroDiasValidade(), false);

					// 7.1.2.1.Caso já exista a mesma ação de cobrança para o imóvel ainda no
					// período de validade e a situação da ação não permita a geração de nova ação
					// para o imóvel
					if(!Util.isVazioOrNulo(retorno)){

						// 7.1.2.1.1. Registrar motivo de não geração
						// "Imóvel possui documento deste tipo válido" [SB0009 - Registrar motivo de
						// não geração do documento de cobrança] e passar para o próximo imóvel.
						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_DOCUMENTO_TIPO_VALIDO,
										cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

						return gerarAtividadeAcaoCobrancaHelper;
					}

				}else{
					// 7.1.3. Caso contrário, ou seja, caso a ação do comando seja predecessora de
					// outra ação

					// Coletando os tipos de documento das ações de cobrança sucessoras à ação que
					// está sendo processada
					Collection<Integer> acoesSucessorasIdDocTipo = new ArrayList<Integer>();
					for(CobrancaAcao acaoSucessora : colecaoAcaoCobrancaSucessora){
						if(acaoSucessora.getDocumentoTipo() != null){
							acoesSucessorasIdDocTipo.add(acaoSucessora.getDocumentoTipo().getId());
						}
					}

					retorno = repositorioCobranca.pesquisarDocumentoCobrancaValido(imovel.getId(), acaoCobranca.getDocumentoTipo().getId(),
									acaoCobranca.getNumeroDiasValidade(), true);

					// 7.1.3.1. Caso já exista a mesma ação de cobrança para o imóvel ainda no
					// período de validade e a situação da ação não permita a geração de nova ação
					// para o imóvel e a situação do débito não permita a geração de nova ação para
					// o imóvel
					if(!Util.isVazioOrNulo(retorno)){
						Date dataEmissaoDocPredecessor = (Date) retorno[1];

						List documentosSucessores = repositorioCobranca.pesquisarDocumentoCobrancaSucessor(imovel.getId(),
										acoesSucessorasIdDocTipo, dataEmissaoDocPredecessor);

						// 7.1.3.1.1. Caso não exista a ação sucessora OU a ação sucessora exista e
						// esteja válida
						if(Util.isVazioOrNulo(documentosSucessores) || verificarDocumentosSucessoresValidos(documentosSucessores)){

							// 7.1.3.1.1.1. Registrar motivo de não geração
							// "Imóvel possui documento deste tipo válido" [SB0009 - Registrar
							// motivo de não geração do documento de cobrança] e passar para o
							// próximo imóvel.
							informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_DOCUMENTO_TIPO_VALIDO,
											cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

							return gerarAtividadeAcaoCobrancaHelper;
						}

					}else{
						// 7.1.3.2. Caso contrário, ou seja, caso não exista documento válido para a
						// ação do comando

						Integer idDocumentoSucessorValido = repositorioCobranca.pesquisarDocumentoCobrancaSucessorValido(imovel.getId(),
										acoesSucessorasIdDocTipo);

						// 7.1.3.2.1. Caso exista ação sucessora gerada para o imóvel e a ação
						// sucessora esteja no período de validade e a situação da ação sucessora
						// não permita a geração de nova ação para o imóvel
						if(idDocumentoSucessorValido != null){

							// 7.1.3.2.1.1. Registrar motivo de não geração
							// "Imóvel possui documento deste tipo válido" [SB0009 - Registrar
							// motivo de não geração do documento de cobrança] e passar para o
							// próximo imóvel.
							informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_DOCUMENTO_SUCESSOR_VALIDO,
											cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

							return gerarAtividadeAcaoCobrancaHelper;
						}
					}
				}

			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
		}

		VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovelHelper = null;

		try{

			// item 6
			// Caso Contrário verificar se o critério satisfaz o critério de cobrança e alguma das
			// linhas do critério
			// [SB0004] - Verificar Critério de Cobrança para o Imóvel
			verificarCriterioCobrancaParaImovelHelper = this.verificarCriterioCobrancaParaImovel(imovel, acaoCobranca, criterioCobranca,
							colecaoCobrancaCriterioLinha, anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial,
							dataVencimentoFinal, colecaoDebitosNotificados, sistemaParametros, cobrancaAcaoAtividadeComando);

			if(colecaoDebitosNotificados != null){
				colecaoDebitosNotificados.clear();
				colecaoDebitosNotificados = null;
			}

			// recupera a flag para saber se o imóvel satisfaz o critério de cobrança
			boolean flagCriterioCobrancaImovel = verificarCriterioCobrancaParaImovelHelper.isFlagCriterioCobrancaImovel();
			// se o imóvel satisfaz o critério de cobrança
			if(flagCriterioCobrancaImovel){

				// TODO Bruno Santos
				if(acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO)){
					if(!verificaSituacaoImovelPerfilParcelamentoRD(imovel, acaoCobranca)){

						// aqui 8.1
						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_NAO_SATISFAZ_RD,
										cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma);

						return gerarAtividadeAcaoCobrancaHelper;
					}
				}

				Object[] retornoDocumentoCobranca = null;

				gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

				BigDecimal valorDebitoImovel = verificarCriterioCobrancaParaImovelHelper.getValorDebitoImovel();

				BigDecimal somatorioAcrescimos = BigDecimal.ZERO;

				Collection<ContaValoresHelper> colecaoContasValores = verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores();

				if(!Util.isVazioOrNulo(colecaoContasValores)){
					for(ContaValoresHelper contaValorHelper : colecaoContasValores){
						if(contaValorHelper.getValorMulta() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(contaValorHelper.getValorMulta());
						}
						if(contaValorHelper.getValorJurosMora() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(contaValorHelper.getValorJurosMora());
						}
						if(contaValorHelper.getValorAtualizacaoMonetaria() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(contaValorHelper.getValorAtualizacaoMonetaria());
						}
					}
				}

				Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = verificarCriterioCobrancaParaImovelHelper
								.getColecaoGuiasPagamentoValores();

				if(!Util.isVazioOrNulo(colecaoGuiasPagamentoValores)){
					for(GuiaPagamentoValoresHelper guiaPagamentoValorHelper : colecaoGuiasPagamentoValores){

						if(guiaPagamentoValorHelper.getValorMulta() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(guiaPagamentoValorHelper.getValorMulta());
						}
						if(guiaPagamentoValorHelper.getValorJurosMora() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(guiaPagamentoValorHelper.getValorJurosMora());
						}
						if(guiaPagamentoValorHelper.getValorAtualizacaoMonetaria() != null){
							somatorioAcrescimos = somatorioAcrescimos.add(guiaPagamentoValorHelper.getValorAtualizacaoMonetaria());
						}
					}
				}

				BigDecimal valorDocumento = valorDebitoImovel.add(somatorioAcrescimos);

				if(atividadeCobranca.getId().intValue() == CobrancaAtividade.EMITIR.intValue()){

					// [SB0005] - Gerar Documento de Cobrança
					DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
					if(cobrancaAcaoAtividadeCronograma != null){
						documentoEmissaoForma.setId(DocumentoEmissaoForma.CRONOGRAMA);
					}else{
						documentoEmissaoForma.setId(DocumentoEmissaoForma.EVENTUAL);
					}

					// // Cliente cliente = null;
					// Integer idCliente = null;
					//
					// if(acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SERASA)
					// || acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SPC_SP)
					// || acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SPC_BRASIL)){
					//
					// String parametroClienteRelacaoTipoNegativacao = ((String)
					// ParametroCobranca.P_CLIENTE_RELACAO_TIPO_NEGATIVACAO
					// .executar());
					// if(parametroClienteRelacaoTipoNegativacao != null){
					// idCliente =
					// this.getControladorImovel().consultarClienteRelacaoTipoPorImovel(imovel.getId(),
					// new Short(parametroClienteRelacaoTipoNegativacao));
					// }
					// }else{
					// idCliente =
					// this.getControladorImovel().consultarClienteRelacaoTipoPorImovel(imovel.getId(),
					// ClienteRelacaoTipo.USUARIO.shortValue());
					// }
					//
					// if(idCliente != null){
					// cliente = new Cliente();
					// cliente.setId(idCliente);
					// }

					Empresa empresa = null;
					Integer idEmpresa = null;

					if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getEmpresa() != null){
						idEmpresa = cobrancaAcaoAtividadeComando.getEmpresa().getId();
					}else if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getEmpresa() != null){
						idEmpresa = cobrancaAcaoAtividadeCronograma.getEmpresa().getId();
					}
					if(idEmpresa != null){
						empresa = new Empresa();
						empresa.setId(idEmpresa);
					}

					// TODO Saulo Lima - Melhorando uso memória - 01/10/2010
					retornoDocumentoCobranca = this.gerarDocumentoCobranca(imovel, acaoCobranca.getIndicadorGeracaoTaxa().shortValue(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoDebitoACobrar(), somatorioAcrescimos,
									BigDecimal.ZERO, sistemaParametros.getAnoMesFaturamento(), documentoEmissaoForma,
									acaoCobranca.getDocumentoTipo(), cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma,
									empresa, criterioCobranca, acaoCobranca, valorDocumento, dataAtual,
									verificarCriterioCobrancaParaImovelHelper.getColecaoCreditoARealizar(), cliente, null,
									sistemaParametros, idFaturamentoGrupoCronogramaMensal, Boolean.FALSE);

				}

				// seta a quantidade de documentos pra 1(um)
				gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(1);

				// seta a quantidade de itens cobrados de documentos
				gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(verificarCriterioCobrancaParaImovelHelper
								.getQuantidadeItensEmDebito());

				// seta o valor de documentos de cobrança
				gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(valorDocumento);

				boolean inserirCobrancaAcaoAtividadeImovel = true;

				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null && acaoCobranca.getDocumentoTipo().getId() != null
								&& acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO)){
					if(retornoDocumentoCobranca != null && retornoDocumentoCobranca[1] != null
									&& (((Integer) retornoDocumentoCobranca[1]).intValue() == 0)){

						PreParcelamento preParcelamento = (PreParcelamento) retornoDocumentoCobranca[0];
						CobrancaDocumento cobrancaDocumento = preParcelamento.getDocumentoCobranca();

						// ********** Remove Preparcelamento **********************
						getControladorUtil().remover(preParcelamento);

						// ********** Remove Cobrança Documento Itens *************
						Collection colecaoCobrancaDocumentoItens = this.obterCobrancaDocumentoItem(cobrancaDocumento);
						if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItens)){
							this.getControladorUtil().removerColecaoObjetos(colecaoCobrancaDocumentoItens);
						}

						// ********** Remove Cobrança Documento *******************
						getControladorUtil().remover(cobrancaDocumento);

						inserirCobrancaAcaoAtividadeImovel = false;
					}
				}

				if(inserirCobrancaAcaoAtividadeImovel){
					// Comandos gerados ou simulados .
					CobrancaAcaoAtividadeImovel cobrancaAcaoAtividadeImovel = new CobrancaAcaoAtividadeImovel();
					cobrancaAcaoAtividadeImovel.setImovel(imovel);
					cobrancaAcaoAtividadeImovel.setQuantidadeDocumentoItem(verificarCriterioCobrancaParaImovelHelper
									.getQuantidadeItensEmDebito());
					cobrancaAcaoAtividadeImovel.setValorDocumento(valorDocumento);
					cobrancaAcaoAtividadeImovel.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAcaoAtividadeImovel.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
					cobrancaAcaoAtividadeImovel.setUltimaAlteracao(new Date());

					getControladorUtil().inserir(cobrancaAcaoAtividadeImovel);
					cobrancaAcaoAtividadeImovel = null;
				}

			}else{
				return gerarAtividadeAcaoCobrancaHelper;
			}

		}finally{
			if(verificarCriterioCobrancaParaImovelHelper != null){
				if(verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores() != null){
					verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores().clear();
				}
				if(verificarCriterioCobrancaParaImovelHelper.getColecaoDebitoACobrar() != null){
					verificarCriterioCobrancaParaImovelHelper.getColecaoDebitoACobrar().clear();
				}
				if(verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores() != null){
					verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores().clear();
				}
				verificarCriterioCobrancaParaImovelHelper.setColecaoContasValores(null);
				verificarCriterioCobrancaParaImovelHelper.setColecaoDebitoACobrar(null);
				verificarCriterioCobrancaParaImovelHelper.setColecaoGuiasPagamentoValores(null);
				verificarCriterioCobrancaParaImovelHelper.setQuantidadeItensEmDebito(null);
				verificarCriterioCobrancaParaImovelHelper.setValorDebitoImovel(null);
				verificarCriterioCobrancaParaImovelHelper = null;
			}
		}

		return gerarAtividadeAcaoCobrancaHelper;
	}

	/**
	 * Verifica se há em uma lista de documentos sucessores um que seja válido, ou seja, (dtEmissao
	 * + diasValidade >= dataAtual) && castId in (PENDENTE, ENTREGUE, ENVIADOS)
	 * 
	 * @author Luciano Galvão
	 * @date 08/11/2013
	 */
	private boolean verificarDocumentosSucessoresValidos(List<Object[]> documentosSucessores){

		Date dataEmissao = null;
		Short diasValidade = null;
		Integer idCobrancaAcaoSituacao = null;
		Date dataValidadeEmissao = null;

		if(!Util.isVazioOrNulo(documentosSucessores)){

			Date dataAtual = new Date();

			for(Object[] documentoSucessor : documentosSucessores){
				dataEmissao = (Date) documentoSucessor[0];
				diasValidade = (Short) documentoSucessor[1];
				idCobrancaAcaoSituacao = (Integer) documentoSucessor[2];

				if(dataEmissao != null){
					if(diasValidade != null){
						dataValidadeEmissao = Util.adicionarNumeroDiasDeUmaData(dataEmissao, diasValidade.intValue());
					}else{
						dataValidadeEmissao = dataEmissao;
					}

					// (dtEmissao + diasValidade >= dataAtual)
					// && castId in (PENDENTE, ENTREGUE, ENVIADOS)
					if(idCobrancaAcaoSituacao != null){
						if(Util.compararData(dataValidadeEmissao, dataAtual) >= 0
										&& (idCobrancaAcaoSituacao.equals(CobrancaAcaoSituacao.PENDENTE)
														|| idCobrancaAcaoSituacao.equals(CobrancaAcaoSituacao.ENTREGUE) || idCobrancaAcaoSituacao
															.equals(CobrancaAcaoSituacao.ENVIADOS))){
							return true;
						}
					}
				}
			}
		}

		return false;
	}

	private boolean verificaSituacaoImovelPerfilParcelamentoRD(Imovel imovel, CobrancaAcao acaoCobranca){

		if(imovel.getLigacaoAgua() == null && imovel.getLigacaoEsgotoSituacao() == null){
			return false;
		}else if(imovel.getLigacaoAguaSituacao() == null && imovel.getLigacaoEsgotoSituacao() != null){
			return false;
		}

		Integer idAgua = imovel.getLigacaoAguaSituacao() != null ? imovel.getLigacaoAguaSituacao().getId() : null;
		Integer idEsgoto = imovel.getLigacaoEsgotoSituacao() != null ? imovel.getLigacaoEsgotoSituacao().getId() : null;

		ImovelSituacao imovelSituacao = null;

		try{
			// Condição 1
			if(idAgua != null && idEsgoto != null){
				imovelSituacao = getControladorImovel().obterSituacaoImovel(idAgua, idEsgoto);
				// Condição 2
				if(imovelSituacao == null){
					imovelSituacao = getControladorImovel().obterSituacaoImovel(idAgua, null);
				}
			}
		}catch(ControladorException e1){
			return false;
		}

		if(imovelSituacao != null){
			try{
				Subcategoria subcategoria = obterSubCategoriaMaiorEconomia(imovel);

				ParcelamentoPerfil perfilParcelamento = null;
				perfilParcelamento = this.obterPerfilParcelamento(imovel.getId(), imovelSituacao.getImovelSituacaoTipo().getId(), imovel
								.getImovelPerfil().getId(), subcategoria.getId(), acaoCobranca.getPrimeiraResolucaoDiretoria().getId(),
								true);

				if(perfilParcelamento == null){
					return false;
				}
				perfilParcelamento = this
								.obterPerfilParcelamento(imovel.getId(), imovelSituacao.getImovelSituacaoTipo().getId(), imovel
												.getImovelPerfil().getId(), subcategoria.getId(), acaoCobranca
												.getSegundaResolucaoDiretoria().getId(), true);

				if(perfilParcelamento == null){
					return false;
				}
				perfilParcelamento = this.obterPerfilParcelamento(imovel.getId(), imovelSituacao.getImovelSituacaoTipo().getId(), imovel
								.getImovelPerfil().getId(), subcategoria.getId(), acaoCobranca.getTerceiraResolucaoDiretoria().getId(),
								true);

				if(perfilParcelamento == null){
					return false;
				}
			}catch(ControladorException e){
				return false;
			}
		}else{
			return false;
		}

		return true;
	}

	public void gerarAcumuladoDadosRelativosDocumentosGerados(OrdemServico ordemServico, boolean atendimentoMotivoEncerramentoNULO,
					boolean identificadorPrazoNULO, Integer idCobrancaDebitoSituacao) throws ControladorException{

		if(ordemServico.getAgente() != null){

			/**
			 * [UC0251] 8. Caso a ordem de serviço esteja associada a documento de cobrança(CBDO_ID
			 * diferente de nulo na tabela ORDEM_SERVIÇO) para a
			 * ordem em questão: 8.1. Gerar/acumular dados relativos aos documentos gerados(tabela
			 * COBRANCA_PRODUTIVIDADE) obtendo os dados a partir de
			 * COBRANCA_DOCUMENTO - Verificar a existencia pela chave composta(todos os campos
			 * exceto o CPRO_ID e campos de quantidade/valores) de linha
			 * na tabela. Caso exista, acumular na existente as colunas de quantidade e valor, caso
			 * contrário, inserir nova linha.
			 */

			/*
			 * Verifica se a realmente a Ordem de Serviço existe na base da dados;
			 * e carrega o Cobrança Documento;
			 */
			FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();
			filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade("cobrancaDocumento");
			filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade("cobrancaDocumento.cobrancaAcao");
			filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade("servicoTipo");
			filtroOrdemServico.adicionarParametro(new ParametroSimples("id", ordemServico.getId()));
			filtroOrdemServico.adicionarParametro(new ParametroNaoNulo("cobrancaDocumento"));

			ordemServico = (OrdemServico) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroOrdemServico,
							OrdemServico.class.getName()));

			if(ordemServico == null){
				throw new ControladorException("atencao.required", null, "Ordem de Serviço");
			}else if(ordemServico.getCobrancaDocumento() != null && ordemServico.getCobrancaDocumento().getId() != null){

				/*
				 * A OS tem Documento de Cobrança
				 */

				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.ORDEMS_SERVICO_ID, ordemServico
								.getId().toString()));
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.ATIVIDADE_COMANDO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.ATIVIDADE_CRONOGRAMA);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.COBRANCA_ACAO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.EMPRESA);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.COBRANCA_ACAO_DOCUMENTO_TIPO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.COBRANCA_ACAO_SERVICO_TIPO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.IMOVEL_HIDROMETRO_INSTALACAO);
				filtroCobrancaDocumento
								.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.IMOVEL_LIGACAO_AGUA_SUPRESSAO_TIPO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.IMOVEL_LIGACAO_AGUA_CORTE_TIPO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.ORDEMS_SERVICO);
				// filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.ORDEMS_SERVICO_ATENDIMENTO_MOTIVO_ENCERRAMENTO);
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.COBRANCA_DOCUMENTO_ITEMS);

				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtroCobrancaDocumento, CobrancaDocumento.class.getName()));

				/*
				 * Cria uma chave para verificar se será uma atualização ou inserção de Cobrança
				 * Produtividade
				 */
				FiltroCobrancaProdutividade filtroCobrancaProdutividade = new FiltroCobrancaProdutividade();
				filtroCobrancaProdutividade.adicionarParametro(new ParametroNulo(FiltroCobrancaProdutividade.ANO_MES_REFERENCIA));
				filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.DATA, Util
								.formatarDataSemHora(Calendar.getInstance().getTime())));

				if(cobrancaDocumento.getCobrancaAcaoAtividadeComando() != null
								&& cobrancaDocumento.getCobrancaAcaoAtividadeComando().getId() != null){
					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(
									FiltroCobrancaProdutividade.COMANDO_ACAO_EVENTUAL_ID, cobrancaDocumento
													.getCobrancaAcaoAtividadeComando().getId()));
				}else if(cobrancaDocumento.getCobrancaAcaoAtividadeCronograma() != null
								&& cobrancaDocumento.getCobrancaAcaoAtividadeCronograma().getId() != null){
					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(
									FiltroCobrancaProdutividade.COMANDO_ACAO_CRONOGRAMA_ID, cobrancaDocumento
													.getCobrancaAcaoAtividadeCronograma().getId()));
				}

				if(cobrancaDocumento.getCobrancaAcao() != null){
					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.COBRANCA_ACAO_ID,
									cobrancaDocumento.getCobrancaAcao().getId()));
				}

				if(cobrancaDocumento.getEmpresa() != null){
					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.EMPRESA_ID,
									cobrancaDocumento.getEmpresa().getId()));
				}

				if(cobrancaDocumento.getCobrancaAcao() != null && cobrancaDocumento.getCobrancaAcao().getDocumentoTipo() != null){

					Integer doctipid = null;
					try{
						doctipid = cobrancaDocumento.getCobrancaAcao().getDocumentoTipo().getId();
						filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.DOCUMENTO_TIPO_ID,
										doctipid));
					}catch(NullPointerException e){
						// do nothing
					}

				}

				Integer servtipid = null;

				if(cobrancaDocumento.getCobrancaAcao() != null && cobrancaDocumento.getCobrancaAcao().getServicoTipo() != null){
					try{
						servtipid = cobrancaDocumento.getCobrancaAcao().getServicoTipo().getId();
					}catch(NullPointerException e){
						// do nothing
					}
					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.SERVICO_TIPO_ID,
									servtipid));
				}

				int idhid = 2;
				if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getHidrometroInstalacaoHistorico() != null){
					idhid = 1;
				}
				filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.IDENTIFICADOR_HIDROMETRO,
								idhid));

				Integer supressaoTipoId = null;
				SupressaoTipo supressaoTipo = null;
				try{
					if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getLigacaoAgua() != null
									&& cobrancaDocumento.getImovel().getLigacaoAgua().getSupressaoTipo() != null){
						supressaoTipo = cobrancaDocumento.getImovel().getLigacaoAgua().getSupressaoTipo();
						supressaoTipoId = supressaoTipo.getId();
						filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.SUPRESSAO_TIPO_ID,
										supressaoTipoId));
					}
				}catch(NullPointerException e){
					// do nothing
				}

				Integer corteid = null;
				CorteTipo corteTipo = null;
				try{
					if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getLigacaoAgua() != null
									&& cobrancaDocumento.getImovel().getLigacaoAgua().getCorteTipo() != null){
						corteTipo = cobrancaDocumento.getImovel().getLigacaoAgua().getCorteTipo();
						corteid = corteTipo.getId();
						filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.CORTE_TIPO_ID,
										corteid));
					}
				}catch(NullPointerException e){
					// do nothing
				}

				AtendimentoMotivoEncerramento atendimentoMotivoEncerramento = null;
				if(!atendimentoMotivoEncerramentoNULO){
					Set<OrdemServico> ordensServico = cobrancaDocumento.getOrdensServico();
					atendimentoMotivoEncerramento = null;
					if(ordensServico != null && ordensServico.size() == 1){
						OrdemServico os = ordensServico.iterator().next();
						if(os.getAtendimentoMotivoEncerramento().getId() != null){
							atendimentoMotivoEncerramento = os.getAtendimentoMotivoEncerramento();

							if(atendimentoMotivoEncerramento != null){
								filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(
												FiltroCobrancaProdutividade.ATENDIMENTO_MOTIVO_ENCERRAMENTO_ID,
												atendimentoMotivoEncerramento.getId()));
							}
						}else{
							filtroCobrancaProdutividade.adicionarParametro(new ParametroNulo(
											FiltroCobrancaProdutividade.ATENDIMENTO_MOTIVO_ENCERRAMENTO_ID));
						}
					}else{
						filtroCobrancaProdutividade.adicionarParametro(new ParametroNulo(
										FiltroCobrancaProdutividade.ATENDIMENTO_MOTIVO_ENCERRAMENTO_ID));
					}

				}else{
					filtroCobrancaProdutividade.adicionarParametro(new ParametroNulo(
									FiltroCobrancaProdutividade.ATENDIMENTO_MOTIVO_ENCERRAMENTO_ID));
				}

				filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(
								FiltroCobrancaProdutividade.COBRANCA_DEBITO_SITUACAO_ID, idCobrancaDebitoSituacao));

				Integer filtroIdPrazo = null;

				if(ordemServico.getServicoTipo() != null && ordemServico.getServicoTipo().getPrazoExecucao() != null){

					if(!identificadorPrazoNULO){
						int difDataEmissaoDataExecucao = Util.obterQuantidadeDiasEntreDuasDatas(ordemServico.getDataGeracao(),
										ordemServico.getDataExecucao());
						int prazoServicoTipo = ordemServico.getServicoTipo().getPrazoExecucao();

						// execucao dentro do prazo?
						if(difDataEmissaoDataExecucao <= prazoServicoTipo){
							// sim
							filtroIdPrazo = 1;
						}else{
							// nao
							filtroIdPrazo = 2;
						}
					}

					filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.IDENTIFICADOR_PRAZO,
									filtroIdPrazo));

				}

				Collection<CobrancaProdutividade> colecaoCobrancaProdutividade = getControladorUtil().pesquisar(
								filtroCobrancaProdutividade, CobrancaProdutividade.class.getName());

				Iterator<CobrancaProdutividade> it = colecaoCobrancaProdutividade.iterator();

				Set<CobrancaDocumentoItem> cobDocItens = cobrancaDocumento.getCobrancaDocumentoItems();
				int quantContas = 0;
				BigDecimal valorContas = BigDecimal.ZERO;
				FiltroConta filtroConta = new FiltroConta();
				for(CobrancaDocumentoItem cobrancaDocumentoItem : cobDocItens){
					ContaGeral conta = cobrancaDocumentoItem.getContaGeral();

					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, conta.getId()));

					Conta contaRetorno = (Conta) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroConta,
									Conta.class.getName()));

					filtroConta.limparListaParametros();

					if(contaRetorno != null){
						quantContas++;
						valorContas = valorContas.add(contaRetorno.getValorTotal());
					}
				}
				filtroConta = null;
				if(colecaoCobrancaProdutividade != null && !colecaoCobrancaProdutividade.isEmpty()){

					if(it.hasNext()){
						// atualiza cobranca sucesso existente
						CobrancaProdutividade cobrancaProdutividade = it.next();

						cobrancaProdutividade.setQuantidadeContas(cobrancaProdutividade.getQuantidadeContas() + quantContas);
						cobrancaProdutividade.setValorContas(cobrancaProdutividade.getValorContas().add(valorContas));
						cobrancaProdutividade.setQuantidadeDocumentos(cobrancaProdutividade.getQuantidadeDocumentos() + 1);
						cobrancaProdutividade.setQuantidadeClientes(cobrancaProdutividade.getQuantidadeClientes() + 1);
						cobrancaProdutividade.setValorDocumentos(cobrancaProdutividade.getValorDocumentos().add(
										cobrancaDocumento.getValorDocumento()));
						cobrancaProdutividade.setUltimaAlteracao(new Date());

						getControladorUtil().atualizar(cobrancaProdutividade);
					}

				}else{
					CobrancaProdutividade cobrancaProdutividade = new CobrancaProdutividade();
					cobrancaProdutividade.setAnoMesReferencia(null);
					cobrancaProdutividade.setData(Util.formatarDataSemHora(Calendar.getInstance().getTime()));

					if(cobrancaDocumento.getCobrancaAcaoAtividadeComando() != null){
						cobrancaProdutividade.setComandoAcaoEventual(cobrancaDocumento.getCobrancaAcaoAtividadeComando());
					}

					if(cobrancaDocumento.getCobrancaAcaoAtividadeCronograma() != null){
						cobrancaProdutividade.setComandoAcaoCronograma(cobrancaDocumento.getCobrancaAcaoAtividadeCronograma());
					}

					cobrancaProdutividade.setCobrancaAcao(cobrancaDocumento.getCobrancaAcao());
					cobrancaProdutividade.setEmpresa(cobrancaDocumento.getEmpresa());
					cobrancaProdutividade.setDocumentoTipo(cobrancaDocumento.getCobrancaAcao().getDocumentoTipo());
					cobrancaProdutividade.setServicoTipo(cobrancaDocumento.getCobrancaAcao().getServicoTipo());
					cobrancaProdutividade.setIdentificadorHidrometro(idhid);
					cobrancaProdutividade.setSupressaoTipo(supressaoTipo);
					cobrancaProdutividade.setCorteTipo(corteTipo);
					cobrancaProdutividade.setAtendimentoMotivoEncerramento(atendimentoMotivoEncerramento);

					CobrancaDebitoSituacao cobdebsit = new CobrancaDebitoSituacao();
					cobdebsit.setId(idCobrancaDebitoSituacao);
					cobrancaProdutividade.setCobrancaDebitoSituacao(cobdebsit);
					cobrancaProdutividade.setIdentificadorPrazo(filtroIdPrazo);

					cobrancaProdutividade.setQuantidadeContas(quantContas);
					cobrancaProdutividade.setValorContas(valorContas);
					cobrancaProdutividade.setQuantidadeDocumentos(1);
					cobrancaProdutividade.setQuantidadeClientes(1);
					cobrancaProdutividade.setValorDocumentos(cobrancaDocumento.getValorDocumento());

					cobrancaProdutividade.setUltimaAlteracao(new Date());

					getControladorUtil().inserir(cobrancaProdutividade);
				}

			}

		}

	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0004] Verificar Critério
	 * de Cobrança para Imóvel
	 * 
	 * @author Pedro Alexandre
	 * @created 08/02/2006
	 * @param imovel
	 *            Imóvel
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param cobrancaCriterio
	 *            Critériode cobrança para ser utilizado
	 * @param colecaoCobrancaCriterioLinha
	 *            Coleção de linha de critério de cobrança
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @param colecaoDebitosNotificados
	 *            Coleção de Débitos Notificados
	 * @param sistemaParametros
	 *            Parâmetros do Sistema
	 * @throws ControladorException
	 *             Controlador Exception
	 * @return Retorna um objeto contendo todas as informações necessárias prara
	 *         identificar se um imóvel satisfaz os critérios de cobrança
	 */
	public VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovel(Imovel imovel, CobrancaAcao acaoCobranca,
					CobrancaCriterio cobrancaCriterio, Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha,
					String anoMesReferenciaInicial, String anoMesReferenciaFinal, Date dataVencimentoInicial, Date dataVencimentoFinal,
					Collection<CobrancaDocumentoItem> colecaoDebitosNotificados, SistemaParametro sistemaParametros,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando) throws ControladorException{

		VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovelHelper = new VerificarCriterioCobrancaParaImovelHelper();
		verificarCriterioCobrancaParaImovelHelper.setFlagCriterioCobrancaImovel(false);

		// item 3
		// se o indicador de emissão da ação de cobrança para imóvel,com situação especial de
		// cobrança e o imóvel esteja com algum tipo de situação
		// especial de cobrança
		if(cobrancaCriterio.getIndicadorEmissaoImovelParalisacao().shortValue() == 2 && imovel.getCobrancaSituacaoTipo().getId() != null){

			informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SIT_ESPECIAL_COBRANCA,
							cobrancaAcaoAtividadeComando, null);

			return verificarCriterioCobrancaParaImovelHelper;
		}

		try{
			// Item 4 - Caso o imóvel esteja com alguma situação de cobrança
			Collection colecaoImovelCobrancaSituacao = null;
			colecaoImovelCobrancaSituacao = repositorioCobranca.pesquisarImovelCobrancaSituacao(imovel.getId());

			if(colecaoImovelCobrancaSituacao != null && !colecaoImovelCobrancaSituacao.isEmpty()){

				// Item 4.1 - Caso o indicador de emissão da ação de cobrança para imóvel,com
				// situação de cobrança
				// correspondente a " 2-NÃO" e o imóvel esteja com algum tipo de situação de
				// cobrança,
				// passar o imovel, indicando q o imovel nao satisfaz o criterio de cobranca,
				// registrar motivo de não geração "Imóvel está em situação de cobrança não
				// permitida"
				if(cobrancaCriterio.getIndicadorEmissaoImovelSituacaoCobranca().shortValue() == 2){

					FiltroCriterioSituacaoCobranca filtroCriterioSituacaoCobranca = new FiltroCriterioSituacaoCobranca();
					filtroCriterioSituacaoCobranca.adicionarParametro(new ParametroSimples(
									FiltroCriterioSituacaoCobranca.COBRANCA_CRITERIO_ID, cobrancaCriterio.getId()));
					filtroCriterioSituacaoCobranca
									.adicionarCaminhoParaCarregamentoEntidade(FiltroCriterioSituacaoCobranca.COBRANCA_SITUACAO);
					Collection<CriterioSituacaoCobranca> colecaoCriterioSituacaoCobranca = getControladorUtil().pesquisar(
									filtroCriterioSituacaoCobranca, CriterioSituacaoCobranca.class.getName());

					// 4.1.1. Caso exista restrição das situações de cobrança para o critério
					if(!Util.isVazioOrNulo(colecaoCriterioSituacaoCobranca)){

						// Agrupando os Ids de Critério de Situação de Cobrança em uma coleção de
						// Inteiros para utilizar o método containsAll em seguida
						Collection<Integer> idsCriterioSituacaoCobranca = new ArrayList<Integer>();
						for(CriterioSituacaoCobranca criterioSituacaoCobranca : colecaoCriterioSituacaoCobranca){
							if(criterioSituacaoCobranca.getComp_id() != null
											&& criterioSituacaoCobranca.getComp_id().getCobrancaSituacao() != null){
								idsCriterioSituacaoCobranca.add(criterioSituacaoCobranca.getComp_id().getCobrancaSituacao().getId());
							}
						}

						// 4.1.1.1. Caso as situações de cobrança do imóvel estejam contidas nas
						// selecionadas para o critério
						if(!Util.isVazioOrNulo(idsCriterioSituacaoCobranca)
										&& idsCriterioSituacaoCobranca.containsAll(colecaoImovelCobrancaSituacao)){

							informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SIT_COBRANCA_NAO_PERMITIDA,
											cobrancaAcaoAtividadeComando, null);

							return verificarCriterioCobrancaParaImovelHelper;
						}

						// 4.1.2. Caso contrário, ou seja, não existe restrição das situações de
						// cobrança para o critério
					}else{

						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SIT_COBRANCA_NAO_PERMITIDA,
										cobrancaAcaoAtividadeComando, null);

						return verificarCriterioCobrancaParaImovelHelper;
					}

				}else{
					// Item 4.2 - Caso o indicado de emissao da acao de cobranca para imovel com
					// situacao de cobranca, corresponder a SIM (1)
					// Verificar se a situacao de cobranca do imovel esta contida nas situacoes de
					// cobranca contempladas no criterio de cobranca
					boolean situacaoCobrancaImovelContidaNasSelecionadas = false;
					Collection colecaoSituacoesCobrancaSelecionadas = repositorioCobranca
									.pesquisarCobrancaSituacaoPorCobrancaCriterio(cobrancaCriterio.getId());

					if(colecaoSituacoesCobrancaSelecionadas != null && !colecaoSituacoesCobrancaSelecionadas.isEmpty()){
						for(Iterator iterSitImov = colecaoImovelCobrancaSituacao.iterator(); iterSitImov.hasNext();){
							Integer idSitCobImov = (Integer) iterSitImov.next();

							for(Iterator iter = colecaoSituacoesCobrancaSelecionadas.iterator(); iter.hasNext();){
								Integer idCobrancaSituacao = (Integer) iter.next();
								if(idCobrancaSituacao.equals(idSitCobImov)){
									situacaoCobrancaImovelContidaNasSelecionadas = true;
									break;
								}
							}
							if(situacaoCobrancaImovelContidaNasSelecionadas){
								break;
							}
						}
						// Disponibilizar o mais rapido possivel para o GC coletar
						colecaoImovelCobrancaSituacao.clear();
						colecaoImovelCobrancaSituacao = null;
						colecaoSituacoesCobrancaSelecionadas.clear();
						colecaoSituacoesCobrancaSelecionadas = null;
					}
					// 4.2.1. Caso as situações de cobrança do imóvel
					// não estejam contidas nas selecionadas para o critério,
					// indicar que o imóvel não satisfaz o critério de cobrança,
					// registrar motivo de não geração "Imóvel está em situação de cobrança não
					// permitida"
					if(!situacaoCobrancaImovelContidaNasSelecionadas){

						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SIT_COBRANCA_NAO_PERMITIDA,
										cobrancaAcaoAtividadeComando, null);

						return verificarCriterioCobrancaParaImovelHelper;
					}
				}
			}
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		FiltroImovelSubCategoria fltImovSubcat = new FiltroImovelSubCategoria();
		fltImovSubcat.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelSubCategoria.SUBCATEGORIA_CATEGORIA);
		fltImovSubcat.adicionarParametro(new ParametroSimples(FiltroImovelSubCategoria.IMOVEL_ID, imovel.getId()));
		Collection<ImovelSubcategoria> imovSubcats = getControladorUtil().pesquisar(fltImovSubcat, ImovelSubcategoria.class.getName());
		// Disponibilizar o mais rapido possivel para o GC coletar
		fltImovSubcat.getColecaoCaminhosParaCarregamentoEntidades().clear();
		fltImovSubcat.limparListaParametros();
		fltImovSubcat = null;

		Collection ligacoesAguaImovel = null;

		// item 16
		// laço para verificar se alguma linha do critério de cobrança satisfaz o critério de
		// cobrança do imóvel
		labelLinha: for(CobrancaCriterioLinha cobrancaCriterioLinha : colecaoCobrancaCriterioLinha){

			// item 16.1
			// se o perfil do imóvel for igual ao da linha
			if(!imovel.getImovelPerfil().getId().equals((cobrancaCriterioLinha.getImovelPerfil().getId()))){

				continue labelLinha;
			}

			boolean achouCategoria = false;
			// se a categoria do imóvel for igual ao da linha
			for(ImovelSubcategoria imovelSubcategoria : imovSubcats){
				if(imovelSubcategoria.getComp_id().getSubcategoria().getCategoria().getId()
								.equals((cobrancaCriterioLinha.getCategoria().getId()))){
					achouCategoria = true;
					break;
				}
			}
			if(!achouCategoria){

				continue labelLinha;
			}

			// calcula a quantidade de itens em débito do imóvel
			// /*
			// * comentado por pedro alexandre dia 01/04/2006 quantidadeItensEmDebito =
			// * colecaoContasValores.size(); quantidadeItensEmDebito =
			// * colecaoGuiasPagamentoValores.size(); quantidadeItensEmDebito =
			// * colecaoDebitoACobrar.size();
			// */
			// fim item 15
			// cria uma flag para o indicador de cobrança
			// boolean flagIndicadorCriterioCobranca = false;
			if(cobrancaCriterioLinha.getSituacaoMedicao() != null){
				// Calendar aa = Calendar.getInstance();
				if(ligacoesAguaImovel == null){
					FiltroLigacaoAgua fla = new FiltroLigacaoAgua();
					fla.adicionarParametro(new ParametroSimples(FiltroLigacaoAgua.ID, imovel.getId()));
					ligacoesAguaImovel = getControladorUtil().pesquisar(fla, LigacaoAgua.class.getName());
					// Disponibilizar o mais rapido possivel para o GC coletar
					fla.limparListaParametros();
					fla = null;
				}
				// LOGGER.info(Util.calcularDiferencaTempo(aa)+" FiltroLigacaoAgua");
				if(ligacoesAguaImovel != null && !ligacoesAguaImovel.isEmpty()){
					LigacaoAgua la = (LigacaoAgua) ligacoesAguaImovel.iterator().next();

					// 16.11(alterado dia 06082009)
					// hidrometrada -
					if(la.getHidrometroInstalacaoHistorico() != null && cobrancaCriterioLinha.getSituacaoMedicao().intValue() == 2){

						continue labelLinha;
					}

					// 16.12(alterado dia 06082009)
					// nao hidrometrada
					if(la.getHidrometroInstalacaoHistorico() == null && cobrancaCriterioLinha.getSituacaoMedicao().intValue() == 1){

						continue labelLinha;
					}
					// 16.13(alterado dia 06082009)
					if(la.getDataLigacao() != null && cobrancaCriterioLinha.getDataLimite() != null
									&& la.getDataLigacao().getTime() > cobrancaCriterioLinha.getDataLimite().getTime()){

						continue labelLinha;
					}
				}
			}

			anoMesReferenciaFinal = "999912";
			anoMesReferenciaInicial = "198001";
			dataVencimentoInicial = Util.converteStringParaDate("01/01/1980");
			dataVencimentoFinal = Util.converteStringParaDate("31/12/9999");

			if(cobrancaCriterioLinha.getReferenciaDebitoInicial() != null){
				anoMesReferenciaInicial = cobrancaCriterioLinha.getReferenciaDebitoInicial() + "";
			}
			if(cobrancaCriterioLinha.getReferenciaDebitoFinal() != null){
				anoMesReferenciaFinal = cobrancaCriterioLinha.getReferenciaDebitoFinal() + "";
			}
			if(cobrancaCriterioLinha.getDiasParaVencimento() != null){
				dataVencimentoFinal = Util.subtrairNumeroDiasDeUmaData(new Date(), cobrancaCriterioLinha.getDiasParaVencimento());
			}

			// item 6
			final int indicadorDebitoImovel = 1;
			String codigoCliente = null;
			Integer clienteRelacaoTipo = null;
			int indicadorPagamento = 1;
			int indicadorCreditoARalizar = acaoCobranca.getIndicadorConsideraCreditoRealizar();
			int indicadorNotasPromissorias = 2;
			int indicadorGuiaPagamento = acaoCobranca.getIndicadorConsideraGuiaPagamento();
			String matriculaImovel = imovel.getId().toString();
			int indicadorConta = cobrancaCriterio.getIndicadorEmissaoContaRevisao();
			int indicadorDebitoACobrar = acaoCobranca.getIndicadorCobrancaDebACobrar();
			int indicadorCalcularAcrescimoImpontualidade = acaoCobranca.getIndicadorAcrescimoImpontualidade().intValue();

			ObterDebitoImovelOuClienteHelper debitoImovel = this.obterDebitoImovelOuCliente(indicadorDebitoImovel, matriculaImovel,
							codigoCliente, clienteRelacaoTipo, anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial,
							dataVencimentoFinal, indicadorPagamento, indicadorConta, indicadorDebitoACobrar, indicadorCreditoARalizar,
							indicadorNotasPromissorias, indicadorGuiaPagamento, indicadorCalcularAcrescimoImpontualidade, null,
							sistemaParametros, new Date(), ConstantesSistema.SIM, null, ConstantesSistema.SIM, ConstantesSistema.SIM,
							ConstantesSistema.SIM);

			// [SB0013] - Verificar Titularidade do Débito
			getControladorRegistroAtendimento().verificarTitularidadeDebito(imovel.getId(),
							cobrancaCriterio.getIndicadorConsiderarApenasDebitoTitularAtual(), cobrancaCriterio.getClienteRelacaoTipo(),
							debitoImovel);

			Short pIndicadorConsiderarDebitoPrescrito = ConstantesSistema.NUMERO_NAO_INFORMADO;

			try{
				pIndicadorConsiderarDebitoPrescrito = Util
								.converterStringParaShort((String) ParametroCobranca.P_INDICADOR_CONSIDERAR_DEBITO_PRESCRITO_NAS_ACOES_DE_COBRANCA
												.executar());

			}catch(ControladorException e){

				throw new ControladorException("atencao.sistemaparametro_inexistente", null,
								"P_INDICADOR_CONSIDERAR_DEBITO_PRESCRITO_NAS_ACOES_DE_COBRANCA");
			}

			// Verifica se é para retirar débitos prescritos da ação de cobrança
			this.verificarRetirarContaOuGuiaPrescrita(imovel.getId(), pIndicadorConsiderarDebitoPrescrito, debitoImovel);

			Collection<ContaValoresHelper> colecaoContasValores = debitoImovel.getColecaoContasValores();
			Collection<DebitoACobrar> colecaoDebitoACobrar = debitoImovel.getColecaoDebitoACobrar();
			Collection<CreditoARealizar> colecaoCreditoARealizar = debitoImovel.getColecaoCreditoARealizar();
			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = debitoImovel.getColecaoGuiasPagamentoValores();

			// caso nao esteja devendo conta
			if((colecaoContasValores == null || colecaoContasValores.size() == 0)
							&& (acaoCobranca.getIndicadorDebito() == null || new Short("2").equals(acaoCobranca.getIndicadorDebito()))){

				informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SEM_DEBITO, cobrancaAcaoAtividadeComando, null);

				return verificarCriterioCobrancaParaImovelHelper;
			}

			debitoImovel = null;

			// item 7
			Collection<DebitoACobrar> colecaoDebitoACobrarParaRemocao = new ArrayList();
			Collection<ContaValoresHelper> colecaoContasValoresParaRemocao = new ArrayList();
			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresRemocao = new ArrayList();

			if(colecaoContasValores != null){

				// laço para verificar quais contas não constam nos débitos notificados
				for(ContaValoresHelper contaValorHelper : colecaoContasValores){
					if(contaValorHelper.getValorPago() != null && contaValorHelper.getValorPago().compareTo(BigDecimal.ZERO) == 1){
						colecaoContasValoresParaRemocao.add(contaValorHelper);
					}else{
						boolean flagAchouConta = false;
						if(colecaoDebitosNotificados != null && !colecaoDebitosNotificados.isEmpty()){
							labelConta: for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados){
								if(cobrancaDocumentoItem.getContaGeral() != null){
									if(cobrancaDocumentoItem.getContaGeral().getId().intValue() == contaValorHelper.getConta().getId()
													.intValue()){
										flagAchouConta = true;
										break labelConta;
									}
								}
							}
						}
						// se a conta não consta nos items
						if(!flagAchouConta && acaoCobranca.getCobrancaAcaoPredecessora() != null){
							colecaoContasValoresParaRemocao.add(contaValorHelper);
						}
						// Alterado por Sávio Luiz Analista:Adriano Brito
						// Data:11/10/2007
						else{
							if(contaValorHelper.getConta() != null){
								if(contaValorHelper.getConta().getDebitoCreditoSituacaoAtual() != null
												&& contaValorHelper.getConta().getDebitoCreditoSituacaoAtual().getId()
																.equals(DebitoCreditoSituacao.PARCELADA)){
									colecaoContasValoresParaRemocao.add(contaValorHelper);
								}else if(acaoCobranca.getId().intValue() == CobrancaAcao.COBRANCA_BANCARIA.intValue()){
									if(contaValorHelper.getConta().getContaMotivoRevisao() != null
													&& isCobrancaBancaria(contaValorHelper.getConta().getContaMotivoRevisao().getId()
																	.toString())){
										colecaoContasValoresParaRemocao.add(contaValorHelper);

									}

								}
							}
						}
					}
				}
			}

			/*
			 * Aqui ele percorre a colecaoDebitoACobrar comparando com cada objeto da coleção
			 * colecaoDebitosNotificados
			 * Se forem o mesmo ele remove o debito a Cobrar da coleção.
			 */
			// laço para verificar quais débitos a cobrar não constam nos débitos notificados
			if((colecaoDebitoACobrar != null && colecaoDebitoACobrar.size() >= 1)
							&& (colecaoDebitosNotificados != null && colecaoDebitosNotificados.size() >= 1)){
				for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){
					// boolean flagAchouDebitoACobrar = false;
					if(colecaoDebitosNotificados != null && !colecaoDebitosNotificados.isEmpty()){
						labelDebitoACobrar: for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados){
							if(cobrancaDocumentoItem.getDebitoACobrarGeral() != null){
								if(cobrancaDocumentoItem.getDebitoACobrarGeral().getId().intValue() == debitoACobrar.getId().intValue()){
									// flagAchouDebitoACobrar = true;
									colecaoDebitoACobrarParaRemocao.add(debitoACobrar);
									break labelDebitoACobrar;
								}
							}
						}
					}
				}
			}

			// laço para verificar quais guias de pagamento não constam nos débitos notificados
			if(colecaoGuiasPagamentoValores != null){
				Short numeroPrestacao = null;
				Integer idGuiaPagamento = null;

				boolean verificarExistenciaGuiaParcelamento = true;
				boolean existeGuiaParcelamento = false;

				for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores){
					numeroPrestacao = guiaPagamentoValoresHelper.getNumeroPrestacao();
					idGuiaPagamento = guiaPagamentoValoresHelper.getIdGuiaPagamento();

					verificarExistenciaGuiaParcelamento = true;

					if(guiaPagamentoValoresHelper.getValorPago() != null
									&& guiaPagamentoValoresHelper.getValorPago().compareTo(BigDecimal.ZERO) == 1){
						colecaoGuiasPagamentoValoresRemocao.add(guiaPagamentoValoresHelper);

						verificarExistenciaGuiaParcelamento = false;
					}else{
						boolean flagAchouGuiaPagamento = false;

						// se a coleção de débitos notificados não estiver vazia
						if(colecaoDebitosNotificados != null && !colecaoDebitosNotificados.isEmpty()){
							labelGuiaPagamento: for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados){
								if(cobrancaDocumentoItem.getGuiaPagamentoGeral() != null){
									if(cobrancaDocumentoItem.getGuiaPagamentoGeral().getGuiaPagamento().getId().intValue() == idGuiaPagamento
													.intValue()
													&& cobrancaDocumentoItem.getNumeroDaPrestacao().intValue() == numeroPrestacao
																	.intValue()){
										flagAchouGuiaPagamento = true;
										break labelGuiaPagamento;
									}
								}
							}
							// se a guia de pagamento não consta nos items
							if(!flagAchouGuiaPagamento){
								colecaoGuiasPagamentoValoresRemocao.add(guiaPagamentoValoresHelper);

								verificarExistenciaGuiaParcelamento = false;
							}
						}
					}

					// [FS0005] - Verificar existência de guia de parcelamento de cobrança bancária
					if(verificarExistenciaGuiaParcelamento){

						existeGuiaParcelamento = this.verificarGuiaPagamentoParcelamentoCobrancaBancaria(idGuiaPagamento, numeroPrestacao);

						// existeGuiaParcelamento =
						// this.verificarGuiaPagamentoParcelamentoCobrancaBancariaComBoletoGeradoValido(
						// idGuiaPagamento, numeroPrestacao);
						//
						// if(!existeGuiaParcelamento){
						// existeGuiaParcelamento =
						// this.verificarGuiaPagamentoParcelamentoCobrancaBancariaPendentesGeracaoBoleto(
						// idGuiaPagamento, numeroPrestacao);
						// }

						if(existeGuiaParcelamento){
							colecaoGuiasPagamentoValoresRemocao.add(guiaPagamentoValoresHelper);
						}
					}
				}
			}

			// remove as contas, débitos a cobrar e guias de pagamento que não constam nos itens de
			// documentode cobrança
			if(colecaoContasValores != null){
				colecaoContasValores.removeAll(colecaoContasValoresParaRemocao);
			}
			if(colecaoDebitoACobrar != null){
				colecaoDebitoACobrar.removeAll(colecaoDebitoACobrarParaRemocao);
			}
			if(colecaoGuiasPagamentoValores != null){
				colecaoGuiasPagamentoValores.removeAll(colecaoGuiasPagamentoValoresRemocao);
			}

			// Disponibilizar o mais rapido possivel para o GC coletar
			colecaoContasValoresParaRemocao.clear();
			colecaoContasValoresParaRemocao = null;
			colecaoDebitoACobrarParaRemocao.clear();
			colecaoDebitoACobrarParaRemocao = null;
			colecaoGuiasPagamentoValoresRemocao.clear();
			colecaoGuiasPagamentoValoresRemocao = null;

			// 6.3. Caso a ação de cobrança seja aviso de corte ou corte
			FiltroDebitoCobrado filtroDebitoCobrado = null;
			FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = null;
			Collection<DebitoCobrado> colecaoDebitosCobrados = null;
			Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacoes = null;

			if(acaoCobranca != null && acaoCobranca.getId() != null){
				if((acaoCobranca.getId().equals(CobrancaAcao.AVISO_CORTE) || acaoCobranca.getId().equals(CobrancaAcao.CORTE_FISICO))){

					Collection<Integer> tiposDebito = getControladorParcelamento().getTiposDebitoParcelamento();

					if(!Util.isVazioOrNulo(colecaoContasValores)){

						// 6.3.1. Caso alguma das contas da lista de contas retornada pelo [UC0067]
						// possua serviço de parcelamento da cobrança administrativa
						for(ContaValoresHelper contaValorHelper : colecaoContasValores){
							filtroDebitoCobrado = new FiltroDebitoCobrado();
							filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID, contaValorHelper
											.getConta().getId()));
							filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
											FiltroDebitoCobrado.INDICADOR_REMUNERA_COBRANCA_ADM, ConstantesSistema.SIM));
							filtroDebitoCobrado.adicionarParametro(new ParametroSimplesColecao(FiltroDebitoCobrado.DEBITO_TIPO_ID,
											tiposDebito));

							colecaoDebitosCobrados = getControladorUtil().pesquisar(filtroDebitoCobrado, DebitoCobrado.class.getName());

							if(!Util.isVazioOrNulo(colecaoDebitosCobrados)){
								informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
												cobrancaAcaoAtividadeComando, null);
								return verificarCriterioCobrancaParaImovelHelper;
							}
						}
					}

					if(!Util.isVazioOrNulo(colecaoGuiasPagamentoValores)){

						// Acrescenta os tipos de débito de entrada de parcelamento
						tiposDebito.addAll(getTiposDebitoEntradaParcelamento());

						// OU alguma das guias da lista de guias retornada pelo [UC0067] possua
						// alguma
						// prestação com serviço de parcelamento da cobrança administrativa
						for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores){
							filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
							filtroGuiaPagamentoPrestacao
											.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
															guiaPagamentoValoresHelper.getIdGuiaPagamento()));
							filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
											FiltroGuiaPagamentoPrestacao.INDICADOR_REMUNERA_COBRANCA_ADM, ConstantesSistema.SIM));
							filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimplesColecao(
											FiltroGuiaPagamentoPrestacao.DEBITO_TIPO_ID, tiposDebito));

							colecaoGuiaPagamentoPrestacoes = getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
											GuiaPagamentoPrestacao.class.getName());

							if(!Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacoes)){
								informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
												cobrancaAcaoAtividadeComando, null);
								return verificarCriterioCobrancaParaImovelHelper;
							}
						}
					}

					// Limpando a coleção de tipos de débito utilizada nas consultas acima
					tiposDebito.clear();
					tiposDebito = null;

				}else if(acaoCobranca.getId().equals(CobrancaAcao.COBRANCA_ADMINISTRATIVA)){

					Collection<ContaValoresHelper> contasComMotivoRevisaoConsideradosCobrancaAdm = new ArrayList<ContaValoresHelper>();

					if(!Util.isVazioOrNulo(colecaoContasValores)){

						Collection<Integer> colecaoMotivosConsideradosCobrancaAdm = Util
										.converterStringParaColecaoInteger(ParametroCobranca.P_MOTIVO_REVISAO_CONSIDERADOS_COBRANCA_ADMINISTRATIVA
														.executar());

						for(ContaValoresHelper contaValorHelper : colecaoContasValores){

							if(contaValorHelper.getConta() != null){
								// Se alguma das contas estiver marcada como remunerável, registrar
								// motivo de não geração "Imóvel com item remunerável"
								if(contaValorHelper.getConta().getIndicadorRemuneraCobrancaAdministrativa() != null
												&& contaValorHelper.getConta().getIndicadorRemuneraCobrancaAdministrativa()
																.equals(ConstantesSistema.SIM)){

									informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
													cobrancaAcaoAtividadeComando, null);
									return verificarCriterioCobrancaParaImovelHelper;
								}

								filtroDebitoCobrado = new FiltroDebitoCobrado();
								filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID, contaValorHelper
												.getConta().getId()));
								filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
												FiltroDebitoCobrado.INDICADOR_REMUNERA_COBRANCA_ADM, ConstantesSistema.SIM));

								colecaoDebitosCobrados = getControladorUtil().pesquisar(filtroDebitoCobrado, DebitoCobrado.class.getName());

								// Se há algum débito cobrado da conta marcado como remunerável,
								// registrar motivo de não geração "Imóvel com item remunerável"
								if(!Util.isVazioOrNulo(colecaoDebitosCobrados)){
									informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
													cobrancaAcaoAtividadeComando, null);
									return verificarCriterioCobrancaParaImovelHelper;
								}

								// Identifica as contas com motivo de revisão não considerado pela
								// cobrança administrativa. Estas contas deverão ser removidas da
								// coleção principal de contas
								if(((ContaHelper) contaValorHelper.getConta()).getIdContaMotivoRevisao() != null
												&& !Util.isVazioOrNulo(colecaoMotivosConsideradosCobrancaAdm)
												&& !colecaoMotivosConsideradosCobrancaAdm.contains(((ContaHelper) contaValorHelper
																.getConta()).getIdContaMotivoRevisao())){

									// Adiciona à coleção de contas que serão removidas da coleção
									// principal
									contasComMotivoRevisaoConsideradosCobrancaAdm.add(contaValorHelper);
								}
							}
						}
					}

					if(!Util.isVazioOrNulo(colecaoGuiasPagamentoValores)){

						// Se há alguma prestação de guia de pagamento marcada como remunerável,
						// registrar motivo de não geração "Imóvel com item remunerável"
						for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores){
							filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
							filtroGuiaPagamentoPrestacao
											.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
															guiaPagamentoValoresHelper.getIdGuiaPagamento()));
							filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
											FiltroGuiaPagamentoPrestacao.INDICADOR_REMUNERA_COBRANCA_ADM, ConstantesSistema.SIM));

							colecaoGuiaPagamentoPrestacoes = getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
											GuiaPagamentoPrestacao.class.getName());

							if(!Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacoes)){
								informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
												cobrancaAcaoAtividadeComando, null);
								return verificarCriterioCobrancaParaImovelHelper;
							}
						}
					}

					if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){

						// Se há débito a cobrar marcado como remunerável,
						// registrar motivo de não geração "Imóvel com item remunerável"
						for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){
							if(debitoACobrar.getIndicadorRemuneraCobrancaAdministrativa() != null
											&& debitoACobrar.getIndicadorRemuneraCobrancaAdministrativa().equals(ConstantesSistema.SIM)){

								informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_ITEM_REMUNERAVEL,
												cobrancaAcaoAtividadeComando, null);
								return verificarCriterioCobrancaParaImovelHelper;
							}
						}
					}

					// 6.4.2. Retirar da lista de contas retornada pelo [UC0067] as contas com
					// motivo de revisão não considerado pela cobrança administrativa
					if(colecaoContasValores != null && contasComMotivoRevisaoConsideradosCobrancaAdm != null){
						colecaoContasValores.removeAll(contasComMotivoRevisaoConsideradosCobrancaAdm);
					}
					contasComMotivoRevisaoConsideradosCobrancaAdm.clear();
					contasComMotivoRevisaoConsideradosCobrancaAdm = null;

					if(!Util.isVazioOrNulo(colecaoContasValores)){

						String anosVencimentoAntigoCobrancaAdmStr = ParametroCobranca.P_ANOS_VENCIMENTO_ANTIGO_COBRANCA_ADMINISTRATIVA
										.executar();
						Integer anosVencimentoAntigoCobrancaAdm = null;

						if(!Util.isVazioOuBranco(anosVencimentoAntigoCobrancaAdmStr)
										&& !anosVencimentoAntigoCobrancaAdmStr.equals(ConstantesSistema.NUMERO_NAO_INFORMADO_STRING)){
							anosVencimentoAntigoCobrancaAdm = Util.converterStringParaInteger(anosVencimentoAntigoCobrancaAdmStr);

							if(anosVencimentoAntigoCobrancaAdm != null){
								Date dataVencimentoAntigo = Util.subtrairNumeroAnosDeUmaData(new Date(), anosVencimentoAntigoCobrancaAdm);

								boolean todasContasAntigas = true;
								for(ContaValoresHelper contaValorHelper : colecaoContasValores){

									// Se existe pelo menos uma conta que NÃO é antiga, interrompe o
									// laço
									if(contaValorHelper.getConta() != null
													&& contaValorHelper.getConta().getDataVencimentoConta() != null
													&& contaValorHelper.getConta().getDataVencimentoConta().compareTo(dataVencimentoAntigo) >= 0){

										todasContasAntigas = false;
										break;
									}
								}

								// 6.4.3. Caso todas as contas da lista de contas retornada pelo
								// [UC0067] tenham vencimento antigo para a cobrança administrativa,
								// ou seja, tenham a data de vencimento menor que a data atual menos
								// a quantidade de anos informada no parâmetro
								// P_ANOS_VENCIMENTO_ANTIGO_COBRANCA_ADMINISTRATIVA, registrar
								// motivo de não geração "Imóvel c/ deb. antigo p/ação"
								if(todasContasAntigas){
									informarCobrancaDocumentoNaoGerado(imovel,
													MotivoNaoGeracaoDocumento.IMOVEL_COM_DEBITO_ANTIGO_PARA_ACAO,
													cobrancaAcaoAtividadeComando, null);
									return verificarCriterioCobrancaParaImovelHelper;
								}
							}
						}

					}
				}
			}

			// item 9
			// se as coleções de contas, débitos a cobrar e guias de pagamento estiverem vazia
			if((colecaoContasValores == null || colecaoContasValores.isEmpty())
							&& (colecaoDebitoACobrar == null || colecaoDebitoACobrar.isEmpty())
							&& (colecaoGuiasPagamentoValores == null || colecaoGuiasPagamentoValores.isEmpty())){

				// item 9.1
				// Caso seja comando eventual e o indicador de selecionar apenas imóveis com débitos
				// seja igual a sim(1) descarta o imóvel
				if(cobrancaAcaoAtividadeComando == null
								|| (cobrancaAcaoAtividadeComando.getIndicadorBoletim() != null && cobrancaAcaoAtividadeComando
												.getIndicadorDebito().equals(CobrancaAcaoAtividadeComando.INDICADOR_DEBITO_SIM))){

					// 6.6.2.2. Registrar motivo de não geração "Imóvel sem débito para a ação"
					// [SB0009 - Registrar motivo de não geração do documento de cobrança]
					informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_SEM_DEBITO, cobrancaAcaoAtividadeComando,
									null);

					return verificarCriterioCobrancaParaImovelHelper;
				}
			}

			// item 10
			// se o indicador de emissão de débito da conta do mês for igual a 2(dois) - NÃO
			if(cobrancaCriterio.getIndicadorEmissaoDebitoContaMes().intValue() == 2){
				if(colecaoContasValores != null && colecaoContasValores.size() == 1){
					Conta conta = (colecaoContasValores.iterator().next()).getConta();
					// se a conta for a conta do mês
					if(conta.getReferencia() == Util.subtrairData(sistemaParametros.getAnoMesFaturamento())){

						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_DEBITO_SOMENTE_CONTA_MES,
										cobrancaAcaoAtividadeComando, null);

						return verificarCriterioCobrancaParaImovelHelper;
					}
				}
			}

			// item 11
			// se o indicador de emissão de débito da conta antiga for igual a 2(dois) - NÃO
			if(cobrancaCriterio.getIndicadorEmissaoDebitoContaAntiga().intValue() == 2){
				if(colecaoContasValores != null && colecaoContasValores.size() == 1){
					Conta conta = (colecaoContasValores.iterator().next()).getConta();
					// se a conta for uma conta antiga
					if(conta.getReferencia() <= (sistemaParametros.getAnoMesFaturamento() - (cobrancaCriterio.getNumeroContaAntiga() * 100))){

						// 6.8.2. Registrar motivo de não geração
						// "Imóvel com débito somente de uma conta antiga" [SB0009 - Registrar
						// motivo de não geração do documento de cobrança]
						informarCobrancaDocumentoNaoGerado(imovel, MotivoNaoGeracaoDocumento.IMOVEL_COM_DEBITO_SOMENTE_CONTA_ANTIGA,
										cobrancaAcaoAtividadeComando, null);

						return verificarCriterioCobrancaParaImovelHelper;
					}
				}
			}

			// item 12
			/*
			 * se o indicador de emissão de débito da conta do mês for igual a 2(dois) - NÃO
			 * e o indicador de emissão de débito da conta antiga for igual a 2(dois) - NÃO
			 */
			if(cobrancaCriterio.getIndicadorEmissaoDebitoContaMes().intValue() == 2
							&& cobrancaCriterio.getIndicadorEmissaoDebitoContaAntiga().intValue() == 2){

				if(colecaoContasValores != null){
					if(colecaoContasValores.size() == 2){
						boolean flagContaMes = false;
						boolean flagContaAntiga = false;

						// laço para verificar se as contas é uma do mês e outra antiga
						for(ContaValoresHelper contaValorHelper : colecaoContasValores){
							Conta conta = contaValorHelper.getConta();

							// se a conta for a do mês
							if(conta.getReferencia() == Util.subtrairData(sistemaParametros.getAnoMesFaturamento())){
								flagContaMes = true;
							}

							// se a conta não for antiga
							if(conta.getReferencia() <= (sistemaParametros.getAnoMesFaturamento() - (cobrancaCriterio
											.getNumeroContaAntiga() * 100))){
								flagContaAntiga = true;
							}
						}

						// se as contas for uma antiga e a outra a do mês
						if(flagContaMes && flagContaAntiga){

							// 6.9.2. Registrar motivo de não geração
							// "Imóvel com débito somente da conta do mês e de uma conta antiga"
							// [SB0009 - Registrar motivo de não geração do documento de cobrança]
							informarCobrancaDocumentoNaoGerado(imovel,
											MotivoNaoGeracaoDocumento.IMOVEL_COM_DEBITO_SOMENTE_CONTA_MES_ANTIGA,
											cobrancaAcaoAtividadeComando, null);

							return verificarCriterioCobrancaParaImovelHelper;

						}
					}
				}
			}

			// ..............................................................................
			// Aplica filtro de intervalo da qtde de dias desde o vencimento do debito
			if(cobrancaCriterioLinha.getQuantidadeDiasVencimentoInicial() != null
							|| cobrancaCriterioLinha.getQuantidadeDiasVencimentoFinal() != null){

				if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){

					Collection remover = new ArrayList();
					Calendar calendarDataAtual = Calendar.getInstance();
					Calendar calendarVenctoContaMinimo = Calendar.getInstance();
					Calendar calendarVenctoContaMaximo = Calendar.getInstance();

					for(ContaValoresHelper contaValorHelper : colecaoContasValores){

						Conta conta = contaValorHelper.getConta();
						Integer qtdDiasInicial = cobrancaCriterioLinha.getQuantidadeDiasVencimentoInicial();
						Integer qtdDiasFinal = cobrancaCriterioLinha.getQuantidadeDiasVencimentoFinal();

						Date venctoConta = conta.getDataVencimentoConta();

						calendarDataAtual.set(Calendar.MILLISECOND, 0);
						calendarDataAtual.set(Calendar.SECOND, 0);
						calendarDataAtual.set(Calendar.MINUTE, 0);
						calendarDataAtual.set(Calendar.HOUR, 0);

						if(qtdDiasInicial != null){
							calendarVenctoContaMinimo.setTime(venctoConta);
							calendarVenctoContaMinimo.add(Calendar.DATE, qtdDiasInicial);

							calendarVenctoContaMinimo.set(Calendar.MILLISECOND, 0);
							calendarVenctoContaMinimo.set(Calendar.SECOND, 0);
							calendarVenctoContaMinimo.set(Calendar.MINUTE, 0);
							calendarVenctoContaMinimo.set(Calendar.HOUR, 0);
							// se o vencimento da conta fizer menos tempo que a qtde minima de dias
							// vencido, descartar
							if(calendarDataAtual.compareTo(calendarVenctoContaMinimo) < 0){
								remover.add(contaValorHelper);

								continue;
							}
						}

						if(qtdDiasFinal != null){
							calendarVenctoContaMaximo.setTime(venctoConta);
							calendarVenctoContaMaximo.add(Calendar.DATE, qtdDiasFinal);

							calendarVenctoContaMaximo.set(Calendar.MILLISECOND, 0);
							calendarVenctoContaMaximo.set(Calendar.SECOND, 0);
							calendarVenctoContaMaximo.set(Calendar.MINUTE, 0);
							calendarVenctoContaMaximo.set(Calendar.HOUR, 0);
							// se o vencimento da conta fizer mais tempo que a qtde maxima de dias
							// vencido, descartar.
							if(calendarDataAtual.compareTo(calendarVenctoContaMaximo) > 0){
								remover.add(contaValorHelper);

								continue;
							}
						}
					}
					if(!remover.isEmpty()){
						colecaoContasValores.removeAll(remover);
					}
					// Disponibilizar o mais rapido possivel para o GC coletar
					remover.clear();
					remover = null;

					if(colecaoContasValores.isEmpty()){

						continue labelLinha;
					}
				}
			}
			// ..............................................................................

			// item 13
			// o sistema calcula a quantidade de contas com parcelamento do imóvel
			int quantidadeContasParcelamento = 0;
			// item 14
			// cria a variável que vai armazenar o débito do imóvel
			BigDecimal valorDebitoImovel = BigDecimal.ZERO;
			// cria a variável que vai armazenar a quantidades de itens em débito
			Integer quantidadeItensEmDebito = Integer.valueOf(0);
			if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){
				ArrayList idsContas = new ArrayList();
				// laço para somar os valores das contas no valor do débito do imóvel
				for(ContaValoresHelper contaValorHelp : colecaoContasValores){
					Conta conta = contaValorHelp.getConta();
					valorDebitoImovel = valorDebitoImovel.add(conta.getValorAgua());
					valorDebitoImovel = valorDebitoImovel.add(conta.getValorEsgoto());
					valorDebitoImovel = valorDebitoImovel.add(conta.getDebitos());
					valorDebitoImovel = valorDebitoImovel.subtract(conta.getValorCreditos());
					valorDebitoImovel = valorDebitoImovel.subtract(conta.getValorImposto());
					idsContas.add(conta.getId());
				}

				if(cobrancaCriterioLinha.getQuantidadeMinimaContasParcelamento().intValue() > 0){
					quantidadeContasParcelamento = getControladorFaturamento().pesquisarQuantidadeDebitosCobradosComParcelamentoPorConta(
									idsContas);
				}
				// Disponibilizar o mais rapido possivel para o GC coletar
				idsContas.clear();
				idsContas = null;

				// item 14
				// calcula a quantidade de itens em débito do imóvel
				quantidadeItensEmDebito = quantidadeItensEmDebito + colecaoContasValores.size();
			}

			// laço para somar os valores das guias de pagamento no valor do débito do imóvel
			if(colecaoGuiasPagamentoValores != null && !colecaoGuiasPagamentoValores.isEmpty()){

				for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores){
					// adiciona o valor do débito da guia ao valor do débito do imóvel
					valorDebitoImovel = valorDebitoImovel.add(guiaPagamentoValoresHelper.getValorTotalPrestacao());
				}
				// item 14
				// calcula a quantidade de itens em débito do imóvel
				quantidadeItensEmDebito = quantidadeItensEmDebito + colecaoGuiasPagamentoValores.size();
			}

			// item 15
			// laço para somar os valores dos débitos a cobrar no valor do débito do imóvel
			if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
				for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){
					valorDebitoImovel = valorDebitoImovel.add(debitoACobrar.getValorTotalComBonus());
				}
				quantidadeItensEmDebito = quantidadeItensEmDebito + colecaoDebitoACobrar.size();
			}

			// item 16.3
			// se o valor do débito do imóvel for menor que o valor minimo do débito da linha de
			// critério de cobrança
			// ou se o valor do débito do imóvel for maior que o valor máximo do débito da linha de
			// critério de cobrança
			if(valorDebitoImovel.doubleValue() < cobrancaCriterioLinha.getValorMinimoDebito().doubleValue()
							|| valorDebitoImovel.doubleValue() > cobrancaCriterioLinha.getValorMaximoDebito().doubleValue()){

				continue labelLinha;
			}

			// item 16.4
			// se a quantidade de itens em débito do imóvel for menor que a quantidade minima de
			// contas da linha de critério de cobrança
			// ou se a quantidade de itens em débito do imóvel for maior que a quantidade máxima de
			// contas da linha de critério de cobrança
			if(quantidadeItensEmDebito.intValue() < cobrancaCriterioLinha.getQuantidadeMinimaContas().intValue()
							|| quantidadeItensEmDebito.intValue() > cobrancaCriterioLinha.getQuantidadeMaximaContas().intValue()){

				continue labelLinha;
			}
			// fim item 16.4

			// item 16.5
			// caso o imóvel esteja cadastrado como débito automático
			if(imovel.getIndicadorDebitoConta() != null && imovel.getIndicadorDebitoConta().shortValue() == 1){

				// item 16.5.1
				// se o valor do débito do imóvel seja menor que o valor minimo para débito
				// automático
				if(valorDebitoImovel.doubleValue() < cobrancaCriterioLinha.getValorMinimoDebitoDebitoAutomatico().doubleValue()){

					continue labelLinha;
				}

				// item 16.5.2
				// se a quantidade de itens em débito do imóvel for menor que a quantidade minima de
				// itens para débito automático
				if(quantidadeItensEmDebito.intValue() < cobrancaCriterioLinha.getQuantidadeMinimaContasDebitoAutomatico()){

					continue labelLinha;
				}
			}

			// item 16.6
			// caso o imóvel possua débito somente da conta do mês
			if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){

				// --ALTERADO POR LEONARDO VIEIRA
				boolean flagContaMes = false;

				for(ContaValoresHelper contaValorHelper : colecaoContasValores){

					// recupera a conta
					Conta conta = contaValorHelper.getConta();

					// se a conta for a do mês
					if(conta.getReferencia() == Util.subtrairData(sistemaParametros.getAnoMesFaturamento())){
						flagContaMes = true;
					}
				}

				if(colecaoContasValores.size() == 1 && flagContaMes){
					if(cobrancaCriterio.getIndicadorEmissaoInquilinoDebitoContaMes() == 1){
						// Calendar a9 = Calendar.getInstance();
						boolean usuarioNaoIquilino = getControladorCliente().verificaUsuarioinquilino(
										Util.converterStringParaInteger(matriculaImovel));
						// LOGGER.info(Util.calcularDiferencaTempo(a9)+" a10 verificaUsuarioinquilino ");
						if(usuarioNaoIquilino){
							if(valorDebitoImovel.doubleValue() < cobrancaCriterioLinha.getValorMinimoContaMes().doubleValue()){

								continue labelLinha;
							}
						}
					}else{
						if(valorDebitoImovel.doubleValue() < cobrancaCriterioLinha.getValorMinimoContaMes().doubleValue()){

							continue labelLinha;
						}
					}
				}
			}
			// fim item 16.6

			// item 16.7
			// Caso a quantidade de contas do imóvel com parcelamento seja maior que a quantidade
			// minima de contas com parcelamento para emissão
			// de ação de cobrança
			if(quantidadeContasParcelamento < cobrancaCriterioLinha.getQuantidadeMinimaContasParcelamento().intValue()){

				continue labelLinha;
			}

			// // Aplica filtro de intervalo da qtde de dias desde o vencimento do debito
			// if(cobrancaCriterioLinha.getQuantidadeDiasVencimentoInicial() != null
			// || cobrancaCriterioLinha.getQuantidadeDiasVencimentoFinal() != null){
			//
			// if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){
			//
			// Collection remover = new ArrayList();
			// Calendar calendarDataAtual = Calendar.getInstance();
			// Calendar calendarVenctoContaMinimo = Calendar.getInstance();
			// Calendar calendarVenctoContaMaximo = Calendar.getInstance();
			//
			// for(ContaValoresHelper contaValorHelper : colecaoContasValores){
			//
			// Conta conta = contaValorHelper.getConta();
			// Integer qtdDiasInicial = cobrancaCriterioLinha.getQuantidadeDiasVencimentoInicial();
			// Integer qtdDiasFinal = cobrancaCriterioLinha.getQuantidadeDiasVencimentoFinal();
			//
			// Date venctoConta = conta.getDataVencimentoConta();
			//
			// calendarDataAtual.set(Calendar.MILLISECOND, 0);
			// calendarDataAtual.set(Calendar.SECOND, 0);
			// calendarDataAtual.set(Calendar.MINUTE, 0);
			// calendarDataAtual.set(Calendar.HOUR, 0);
			//
			// if(qtdDiasInicial != null){
			// calendarVenctoContaMinimo.setTime(venctoConta);
			// calendarVenctoContaMinimo.add(Calendar.DATE, qtdDiasInicial);
			//
			// calendarVenctoContaMinimo.set(Calendar.MILLISECOND, 0);
			// calendarVenctoContaMinimo.set(Calendar.SECOND, 0);
			// calendarVenctoContaMinimo.set(Calendar.MINUTE, 0);
			// calendarVenctoContaMinimo.set(Calendar.HOUR, 0);
			// // se o vencimento da conta fizer menos tempo que a qtde minima de dias
			// // vencido, descartar
			// if(calendarDataAtual.compareTo(calendarVenctoContaMinimo) < 0){
			// remover.add(contaValorHelper);
			//
			// continue;
			// }
			// }
			//
			// if(qtdDiasFinal != null){
			// calendarVenctoContaMaximo.setTime(venctoConta);
			// calendarVenctoContaMaximo.add(Calendar.DATE, qtdDiasFinal);
			//
			// calendarVenctoContaMaximo.set(Calendar.MILLISECOND, 0);
			// calendarVenctoContaMaximo.set(Calendar.SECOND, 0);
			// calendarVenctoContaMaximo.set(Calendar.MINUTE, 0);
			// calendarVenctoContaMaximo.set(Calendar.HOUR, 0);
			// // se o vencimento da conta fizer mais tempo que a qtde maxima de dias
			// // vencido, descartar.
			// if(calendarDataAtual.compareTo(calendarVenctoContaMaximo) > 0){
			// remover.add(contaValorHelper);
			//
			// continue;
			// }
			// }
			// }
			// if(!remover.isEmpty()){
			// colecaoContasValores.removeAll(remover);
			// }
			// // Disponibilizar o mais rapido possivel para o GC coletar
			// remover.clear();
			// remover = null;
			//
			// if(colecaoContasValores.isEmpty()){
			//
			// continue labelLinha;
			// }
			// }
			// }
			// caso o imóvel satisfazer todos os critérios anteriores seta a flag pra true (indica
			// que o imóvel satisfaz o critério de cobrança)
			// item 17
			// seta os dados no objeto que vai ser retornado pelo metódo

			verificarCriterioCobrancaParaImovelHelper.setFlagCriterioCobrancaImovel(true);
			verificarCriterioCobrancaParaImovelHelper.setQuantidadeItensEmDebito(quantidadeItensEmDebito);
			verificarCriterioCobrancaParaImovelHelper.setValorDebitoImovel(valorDebitoImovel);
			verificarCriterioCobrancaParaImovelHelper.setColecaoContasValores(colecaoContasValores);
			verificarCriterioCobrancaParaImovelHelper.setColecaoDebitoACobrar(colecaoDebitoACobrar);
			verificarCriterioCobrancaParaImovelHelper.setColecaoCreditoARealizar(colecaoCreditoARealizar);
			verificarCriterioCobrancaParaImovelHelper.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValores);

			// termina o laço das linhas de critério de cobrança
			break labelLinha;
		}
		// fim item 16

		// Disponibilizar o mais rapido possivel para o GC coletar
		if(ligacoesAguaImovel != null){
			ligacoesAguaImovel.clear();
			ligacoesAguaImovel = null;
		}

		// Disponibilizar o mais rapido possivel para o GC coletar
		if(imovSubcats != null){
			imovSubcats.clear();
			imovSubcats = null;
		}
		return verificarCriterioCobrancaParaImovelHelper;
	}

	public boolean isCobrancaBancaria(String idMotivoRevisao){

		String[] idsMotivoRevisao = null;
		try{
			idsMotivoRevisao = ((String) ParametroCobranca.P_MOTIVO_REVISAO_COBRANCA_BANCARIA.executar(ExecutorParametrosCobranca
							.getInstancia())).split(",");
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(idsMotivoRevisao != null){

			if(idMotivoRevisao != null){
				for(int i = 0; i < idsMotivoRevisao.length; i++){
					if(idsMotivoRevisao[i].equals(idMotivoRevisao)){
						return true;
					}
				}
			}

		}
		return false;
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança [SF0001] Selecionar Lista
	 * de Rotas
	 * 
	 * @author Pedro Alexandre
	 * @created 06/02/2006
	 * @param cobrancaGrupo
	 *            Grupo de cobrança
	 * @param cobrancaAcaoAtividadeComando
	 *            Cobrança Ação Atividade Comando
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<Rota> pesquisarListaRotasComando(CobrancaGrupo cobrancaGrupo,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando) throws ControladorException{

		// cria a variável que vai armazenar a coleção de rotas pesquisadas
		Collection<Rota> colecaoRotas = null;

		// crio filtro de rota
		FiltroRota filtroRota = new FiltroRota();

		// se o grupo de cobrança não estiver nulo
		if(cobrancaGrupo != null){

			// seta o código do grupo de cobrança no filtro de rota
			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupo.getId()));

			// carrega os objetos necessários de rota
			// filtroRota.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");

			// pesquisa a coleção de rotas
			colecaoRotas = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		}else{

			// cria o objeto da coleção de rotas
			colecaoRotas = new ArrayList();

			// cria o filtro de cobrança de atividade do comando de rotas
			FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();

			// seta o código da cobrança de ação de atividade do comando no
			// filtro
			filtroCobrancaAtividadeComandoRotas.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID, cobrancaAcaoAtividadeComando.getId()));

			// carrega os objetos necessários para a pesquisa
			filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota");
			// filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota.cobrancaCriterio");

			// pesquisa a coleção de CobrancaAtividadeComandoRota
			Collection<CobrancaAtividadeComandoRota> colecaoCobrancaAtividadeRotas = getControladorUtil().pesquisar(
							filtroCobrancaAtividadeComandoRotas, CobrancaAtividadeComandoRota.class.getName());

			// laço para recuperar todas as rotas
			for(CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota : colecaoCobrancaAtividadeRotas){
				// adiciona a rota na coleção
				colecaoRotas.add(cobrancaAtividadeComandoRota.getRota());
			}
		}

		// retorna a coleção de rotas pesquisadas
		return colecaoRotas;
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeCronograma
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma() throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarCobrancaAcaoAtividadeCronograma();

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeComando
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando() throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarCobrancaAcaoAtividadeComando();

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método utilizado obter o consumo histórico de um imóvel de acordo com o
	 * tipo de ligação e ano mês de referência
	 */
	public ConsumoHistorico obterConsumoHistorico(Imovel imovel, LigacaoTipo ligacaoTipo, int anoMesReferencia) throws ControladorException{

		ConsumoHistorico consumoHistorico = null;

		Collection colecaoConsumoHistoricoArray = null;

		try{
			colecaoConsumoHistoricoArray = repositorioMicromedicao.pesquisarConsumoHistorico(imovel, ligacaoTipo, anoMesReferencia);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoConsumoHistoricoArray != null && !colecaoConsumoHistoricoArray.isEmpty()){

			Object[] consumoHistoricoArray = Util.retonarObjetoDeColecaoArray(colecaoConsumoHistoricoArray);

			consumoHistorico = new ConsumoHistorico();

			// Seta o id do histórico
			if(consumoHistoricoArray[0] != null){
				consumoHistorico.setId((Integer) consumoHistoricoArray[0]);
			}

			// Seta o id do imóvel
			if(consumoHistoricoArray[1] != null){
				imovel.setId(imovel.getId());
			}

			// Seta o tipo de ligação
			if(consumoHistoricoArray[2] != null){
				consumoHistorico.setLigacaoTipo(ligacaoTipo);
			}

			// Seta o ano mes de referência
			if(consumoHistoricoArray[3] != null){
				consumoHistorico.setReferenciaFaturamento(anoMesReferencia);
			}

			// Seta o indicador de alteração dos últimos consumos
			if(consumoHistoricoArray[4] != null){
				consumoHistorico.setIndicadorAlteracaoUltimosConsumos(Short.valueOf((short) 2));
			}

			// Seta o indicador de ajuste
			if(consumoHistoricoArray[5] != null){
				consumoHistorico.setIndicadorAjuste((Short) consumoHistoricoArray[5]);
			}

			// Seta o consumo a ser cobrado no mês
			if(consumoHistoricoArray[6] != null){
				consumoHistorico.setNumeroConsumoFaturadoMes((Integer) consumoHistoricoArray[6]);
			}

			// Seta o consumo rateio
			if(consumoHistoricoArray[7] != null){
				consumoHistorico.setConsumoRateio((Integer) consumoHistoricoArray[7]);
			}

			// Seta o consumo histórico condomínio
			if(consumoHistoricoArray[8] != null){

				ConsumoHistorico consumoHistoricoCondominio = new ConsumoHistorico();
				consumoHistoricoCondominio.setId((Integer) consumoHistoricoArray[8]);
				consumoHistorico.setConsumoHistoricoCondominio(consumoHistoricoCondominio);
			}

			// Seta o indicador imóvel condomínio
			if(consumoHistoricoArray[9] != null){
				consumoHistorico.setIndicadorImovelCondominio((Short) consumoHistoricoArray[9]);
			}

			// Seta o consumo médio
			if(consumoHistoricoArray[10] != null){
				consumoHistorico.setConsumoMedio((Integer) consumoHistoricoArray[10]);
			}

			// Seta o consumo mínimo de água
			if(consumoHistoricoArray[11] != null){
				consumoHistorico.setConsumoMinimo((Integer) consumoHistoricoArray[11]);
			}

			// Seta o percentual de coleta
			if(consumoHistoricoArray[12] != null){
				consumoHistorico.setPercentualColeta((BigDecimal) consumoHistoricoArray[12]);
			}

			// Seta a última alteração
			if(consumoHistoricoArray[13] != null){
				consumoHistorico.setUltimaAlteracao((Date) consumoHistoricoArray[13]);
			}

			// Seta o rateio tipo
			if(consumoHistoricoArray[14] != null){
				RateioTipo rateioTipo = new RateioTipo();
				rateioTipo.setId((Integer) consumoHistoricoArray[14]);
				consumoHistorico.setRateioTipo(rateioTipo);
			}

			// Seta o consumo tipo
			if(consumoHistoricoArray[15] != null){
				ConsumoTipo consumoTipo = new ConsumoTipo();
				consumoTipo.setId((Integer) consumoHistoricoArray[15]);
				consumoHistorico.setConsumoTipo(consumoTipo);
			}

			// Seta a anormalidade de consumo
			if(consumoHistoricoArray[16] != null){
				ConsumoAnormalidade consumoAnormalidade = new ConsumoAnormalidade();
				consumoAnormalidade.setId((Integer) consumoHistoricoArray[16]);
				consumoHistorico.setConsumoAnormalidade(consumoAnormalidade);
			}

			// Seta o poço tipo
			if(consumoHistoricoArray[17] != null){
				PocoTipo pocoTipo = new PocoTipo();
				pocoTipo.setId((Integer) consumoHistoricoArray[17]);
				consumoHistorico.setPocoTipo(pocoTipo);
			}

			// Seta o faturamento situação tipo
			if(consumoHistoricoArray[18] != null){
				FaturamentoSituacaoTipo faturamentoSituacaoTipo = new FaturamentoSituacaoTipo();
				faturamentoSituacaoTipo.setId((Integer) consumoHistoricoArray[18]);
				consumoHistorico.setFaturamentoSituacaoTipo(faturamentoSituacaoTipo);
			}

			// Seta o faturamento situação tipo
			if(consumoHistoricoArray[19] != null){
				consumoHistorico.setIndicadorFaturamento((Short) consumoHistoricoArray[19]);
			}
		}

		return consumoHistorico;
	}

	/**
	 * Inseri a cobrança situação historico na base passando a coleção de cobrança situação
	 * historico
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 20/03/2006
	 * @param collectionCobrancaSituacaoHistorico
	 * @return
	 */
	public void inserirCobrancaSituacaoHistorico(Collection collectionCobrancaSituacaoHistorico) throws ControladorException{

		try{
			this.repositorioCobranca.inserirCobrancaSituacaoHistorico(collectionCobrancaSituacaoHistorico);

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Verifica a existência de parcelamento no mês
	 * [FS0012] Verifica a existência de parcelamento no mês
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @param codigoImovel
	 * @return Collection<Parcelamento>
	 */
	public Collection<Parcelamento> verificarParcelamentoMesImovel(Integer codigoImovel) throws ControladorException{

		FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.IMOVEL_ID, codigoImovel));
		filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.ANO_MES_REFERENCIA_FATURAMENTO, Util
						.getAnoMesComoInteger(new Date())));
		filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.PARCELAMENTO_SITUACAO, ParcelamentoSituacao.NORMAL));

		Collection<Parcelamento> colecaoParcelamento = getControladorUtil().pesquisar(filtroParcelamento, Parcelamento.class.getName());

		return colecaoParcelamento;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Atualiza a situação das Contas para Efetuar Parcelamento
	 * atualizarContaEfetuarParcelamentoDebito
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	public void atualizarContaEfetuarParcelamentoDebito(Conta conta) throws ControladorException{

		SistemaParametro sistemaParametros = null;
		sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		Integer situacaoAnterior = null;
		if(conta.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.NORMAL)
						&& (conta.getReferenciaContabil() >= sistemaParametros.getAnoMesFaturamento())
						|| (conta.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.RETIFICADA) || conta
										.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.INCLUIDA))
						&& (conta.getReferenciaContabil() >= sistemaParametros.getAnoMesFaturamento())){

			situacaoAnterior = conta.getDebitoCreditoSituacaoAtual().getId();
		}// else {
			// situacaoAnterior = null;
			// }

		// 6.1.1.2 Situação atual
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
		conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		if(situacaoAnterior == null){
			conta.setDebitoCreditoSituacaoAnterior(null);
		}else{
			DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
			conta.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
		}

		conta.setUltimaAlteracao(new Date());

		// 6.1.1.3 Mês/ano de referência contábil
		conta.setReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));

		// Atualiza na Base de dados
		// getControladorUtil().atualizar(conta);

		// 6.1.1.4. O sistema transfere para o histórico de contas, as contas,
		// juntamente com seus débitos cobrados e créditos realizados.
		getControladorFaturamento().transferirContasParaHistorico(Collections.singletonList(conta),
						sistemaParametros.getAnoMesFaturamento().intValue());

		// 6.1.1.5. Para cada conta transferida para o histórico, atualiza o indicador.
		// getControladorFaturamento().atualizarIndicadorContaNoHistorico(Collections.singletonList(conta));

		ContaGeral contaGeral = new ContaGeral();
		contaGeral.setId(conta.getId());
		contaGeral.setIndicadorHistorico(Short.valueOf("1"));
		contaGeral.setUltimaAlteracao(Calendar.getInstance().getTime());

		this.getControladorUtil().atualizar(contaGeral);
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Obtém as Opções de Parcelamento do Débito do Imóvel
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Roberta Costa, Vivianne Sousa
	 * @date 21/03/2006, 30/10/2006
	 * @author Andre Nishimura
	 * @date 29 de Janeiro de 2009
	 *       Alteração para gravar valores de desconto dos itens do documento de cobrança (Desconto
	 *       impontualidade)
	 * @param colecaoContaValores
	 * @param efetuarParcelamentoDebitosActionForm
	 * @return Collection
	 * @author Andre Nishimura
	 * @date 18 de Outubro de 2010
	 *       Alteraçao para contemplar novas regras para calculo da parcela minimo, entrada minima e
	 *       restriçao por faixa de valor do debito para parcelamento.
	 */
	public NegociacaoOpcoesParcelamentoHelper obterOpcoesDeParcelamento(Integer resolucaoDiretoria, Integer codigoImovel,
					BigDecimal valorEntradaInformado, Integer situacaoAguaId, Integer situacaoEsgotoId, Integer perfilImovelId,
					String inicioIntervaloParcelamento, Integer indicadorRestabelecimento, Collection colecaoContaValores,
					BigDecimal valorDebitoAtualizado, BigDecimal valorTotalMultas, BigDecimal valorTotalJurosMora,
					BigDecimal valorTotalAtualizacoesMonetarias, Integer numeroReparcelamentoConsecutivos,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoHelper, Usuario usuario,
					BigDecimal valorDebitoACobrarParcelamentoImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito, IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
					String dataVencimentoEntradaParcelamento, boolean verificaNulidade,
					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacaoPassado) throws ControladorException{

		// SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper = new NegociacaoOpcoesParcelamentoHelper();

		Collection<Integer> tiposFinanciamento = Util
						.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO
						.executar());

		// [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
		Object[] situacaoImovelPerfilParcelamento = this.verificarSituacaoImovelPerfilParcelamento(situacaoAguaId, situacaoEsgotoId,
						codigoImovel, perfilImovelId, resolucaoDiretoria, numeroReparcelamentoConsecutivos,
						valorDebitoACobrarParcelamentoImovel, verificaNulidade, parcelamentoQuantidadePrestacaoPassado, usuario);

		ParcelamentoPerfil parcelamentoPerfil = (ParcelamentoPerfil) situacaoImovelPerfilParcelamento[0];

		// Validação para: Opções de cálculo de valor mínimo prestação
		validarObrigatoriedadePrestacaoMinimaParcelamentoPerfil(parcelamentoPerfil, true);

		ImovelSituacao imovelSituacao = (ImovelSituacao) situacaoImovelPerfilParcelamento[1];
		Collection colecaoParcelamentoQuantidadePrestacao = (Collection) situacaoImovelPerfilParcelamento[2];

		negociacaoOpcoesParcelamentoHelper.setParcelamentoPerfil(parcelamentoPerfil);

		// -- Alteraçao para guardar valores dos descontos de guia e contas (Andre)
		negociacaoOpcoesParcelamentoHelper.setCobrancaDocumentoItemConta(colecaoContaValores);
		negociacaoOpcoesParcelamentoHelper.setCobrancaDocumentoItemGuia(colecaoGuiaPagamentoHelper);

		// Calcula o valor do desconto nos acrescimos por impontualidade
		BigDecimal valorDescontoAcrecismosImpotualidade = BigDecimal.ZERO;
		BigDecimal percentualDesconto = BigDecimal.ZERO;
		BigDecimal valorDescontoAcrecismos = BigDecimal.ZERO;
		percentualDesconto = Util.dividirArredondando(
						parcelamentoPerfil.getPercentualDescontoAcrescimo().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO), new BigDecimal(100));
		negociacaoOpcoesParcelamentoHelper.setPercentualDescontoAcrescimosImpontualidade(percentualDesconto.setScale(
						Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		// 1. [SB0003]- Calcular valor do desconto por antiguidade do débito
		BigDecimal valorDescontoAntiguidade = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimosImpontualidade = BigDecimal.ZERO;
		int quantidadeMinimaMesesAntiguidade = 0;

		BigDecimal[] valorDescontoAntiguidadeDebito = calcularValorDescontoAntiguidadeDebito(resolucaoDiretoria, codigoImovel,
						valorEntradaInformado, situacaoAguaId, situacaoEsgotoId, colecaoContaValores, parcelamentoPerfil,
						indicadorRestabelecimento, valorTotalMultas, valorTotalJurosMora, valorTotalAtualizacoesMonetarias,
						negociacaoOpcoesParcelamentoHelper);

		if(valorDescontoAntiguidadeDebito != null && !valorDescontoAntiguidadeDebito.equals("")){
			valorDescontoAntiguidade = valorDescontoAntiguidadeDebito[0];
			valorTotalAcrescimosImpontualidade = valorDescontoAntiguidadeDebito[1];
			quantidadeMinimaMesesAntiguidade = valorDescontoAntiguidadeDebito[2].intValue();
		}

		// 2. O sistema calcula o valor do desconto nos acréscimos por impontualidade

		// GUIA PAGAMENTO
		BigDecimal valorAcrescimosImpontualidadeGuiaPagamento = BigDecimal.ZERO;
		valorAcrescimosImpontualidadeGuiaPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		if(!(parcelamentoPerfil.getPercentualDescontoAcrescimo().compareTo(BigDecimal.ZERO) == 0)){
			// Pega os acréscimos de Guias de Pagamento
			if(colecaoGuiaPagamentoHelper != null && !colecaoGuiaPagamentoHelper.isEmpty()){
				Iterator<GuiaPagamentoValoresHelper> guiaPagamentoValores = colecaoGuiaPagamentoHelper.iterator();

				BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
				BigDecimal valorJurosMora = BigDecimal.ZERO;
				BigDecimal valorMulta = BigDecimal.ZERO;

				while(guiaPagamentoValores.hasNext()){
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = guiaPagamentoValores.next();

					valorAtualizacaoMonetaria = BigDecimal.ZERO;
					if(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
									&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")){
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria()
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
										.add(valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						negociacaoOpcoesParcelamentoHelper.incrementaDescontoMulta(
										guiaPagamentoValoresHelper,
										guiaPagamentoValoresHelper.getValorMulta()
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
														.multiply(percentualDesconto)
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorJurosMora = BigDecimal.ZERO;
					if(guiaPagamentoValoresHelper.getValorJurosMora() != null && !guiaPagamentoValoresHelper.getValorJurosMora().equals("")){
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper.getValorJurosMora().setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento.add(valorJurosMora
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						negociacaoOpcoesParcelamentoHelper.incrementaDescontoMora(
										guiaPagamentoValoresHelper,
										guiaPagamentoValoresHelper.getValorJurosMora()
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
														.multiply(percentualDesconto)
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorMulta = BigDecimal.ZERO;
					if(guiaPagamentoValoresHelper.getValorMulta() != null && !guiaPagamentoValoresHelper.getValorMulta().equals("")){
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento.add(valorMulta.setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						negociacaoOpcoesParcelamentoHelper.incrementaDescontoCorrecaoMonetaria(
										guiaPagamentoValoresHelper,
										guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria()
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
														.multiply(percentualDesconto)
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}
				}
			}
		}

		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO, Integer
						.valueOf(resolucaoDiretoria)));

		Collection colecaoRD = getControladorUtil().pesquisar(filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoRD);

		// Disponibilizar para o GC
		filtroResolucaoDiretoria.limparListaParametros();
		filtroResolucaoDiretoria = null;

		// ==================== RD especial =======================
		BigDecimal valorDescontoSancoesRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoTarifaSocialRDEspecial = BigDecimal.ZERO;

		Integer anoMesAtualMenosQuantMinimaMesesAntiguidade = 0;
		if(quantidadeMinimaMesesAntiguidade != 0){
			Date data = Util.adcionarOuSubtrairMesesAData(new Date(), -quantidadeMinimaMesesAntiguidade, 0);
			anoMesAtualMenosQuantMinimaMesesAntiguidade = Util.getAnoMesComoInteger(data);
		}

		Integer anoMesLimiteMinimo = parcelamentoPerfil.getAnoMesReferenciaLimiteInferior();
		Integer anoMesLimiteMaximo = parcelamentoPerfil.getAnoMesReferenciaLimiteSuperior();

		if(anoMesLimiteMinimo == null || anoMesInicialReferenciaDebito.compareTo(anoMesLimiteMinimo) > 0){
			anoMesLimiteMinimo = anoMesInicialReferenciaDebito;
		}

		if(anoMesLimiteMinimo.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) < 0){
			anoMesLimiteMinimo = anoMesAtualMenosQuantMinimaMesesAntiguidade;
		}

		if(anoMesInicialReferenciaDebito.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) == 1){
			anoMesAtualMenosQuantMinimaMesesAntiguidade = anoMesInicialReferenciaDebito;
		}

		if(anoMesLimiteMaximo == null || anoMesFinalReferenciaDebito.compareTo(anoMesLimiteMaximo) < 0){
			anoMesLimiteMaximo = anoMesFinalReferenciaDebito;
		}

		if(rd.getIndicadorDescontoSancoes().equals(ConstantesSistema.SIM)){
			BigDecimal valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;

			valorDescontoSancoesRDEspecialDebitoACobrar = pesquisarValorDebitoACobrarSancoes(Integer.valueOf(codigoImovel),
							anoMesInicialReferenciaDebito, anoMesLimiteMaximo);
			if(valorDescontoSancoesRDEspecialDebitoACobrar == null){
				valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
			}

			valorDescontoSancoesRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoSancoes(Integer.valueOf(codigoImovel),
							anoMesAtualMenosQuantMinimaMesesAntiguidade, anoMesLimiteMaximo);
			if(valorDescontoSancoesRDEspecialDebitoCobrado == null){
				valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
			}

			valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecialDebitoACobrar.add(valorDescontoSancoesRDEspecialDebitoCobrado);

			if(parcelamentoPerfil.getPercentualDescontoSancao() != null
							&& !(parcelamentoPerfil.getPercentualDescontoSancao().compareTo(BigDecimal.ZERO) == 0)){
				valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecial.multiply(parcelamentoPerfil.getPercentualDescontoSancao()
								.divide(new BigDecimal("100.00")));
			}

			valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = pesquisarValorDebitoACobrar(Integer.valueOf(codigoImovel),
							anoMesInicialReferenciaDebito, anoMesLimiteMaximo);
			if(valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar == null){
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			}

			valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoContas(Integer.valueOf(codigoImovel),
							anoMesAtualMenosQuantMinimaMesesAntiguidade, anoMesLimiteMaximo);
			if(valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado == null){
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;
			}

			valorDescontoAcrescimosImpontualidadeRDEspecial = valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado
							.add(valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar);

		}

		if(perfilImovelId.equals(ImovelPerfil.TARIFA_SOCIAL) && parcelamentoPerfil.getIndicadorRetroativoTarifaSocial() != null
						&& parcelamentoPerfil.getIndicadorRetroativoTarifaSocial().equals(ConstantesSistema.SIM)){

			valorDescontoTarifaSocialRDEspecial = obterDescontoTarifaSocial(codigoImovel, anoMesLimiteMinimo, anoMesLimiteMaximo,
							parcelamentoPerfil, negociacaoOpcoesParcelamentoHelper);

		}
		// =========================================================

		valorDescontoAcrecismos = valorTotalAcrescimosImpontualidade
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).add(
										valorAcrescimosImpontualidadeGuiaPagamento.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
		valorDescontoAcrecismosImpotualidade = valorDescontoAcrecismos.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).multiply(
						percentualDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		valorDescontoAcrecismosImpotualidade = valorDescontoAcrecismosImpotualidade.add(valorDescontoAcrescimosImpontualidadeRDEspecial);
		negociacaoOpcoesParcelamentoHelper
						.setValorDescontoAcrescimosImpontualidadeRDEspecial(valorDescontoAcrescimosImpontualidadeRDEspecial);

		// fim da alteraçao

		// 3. Caso o tipo da situação do imovel seja INATIVO (com situação da
		// LIGACAO_AGUA igual a Suprimido, Suprimido Parcial a Pedido ou Suprimido Parcial
		BigDecimal valorDescontoInatividade = BigDecimal.ZERO;

		// Valor do Débito Total menos os descontos de Acrescimo e Antiguidade
		BigDecimal valorDebitoDescontoInatividade = BigDecimal.ZERO;

		valorDebitoDescontoInatividade = valorDebitoAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
						.subtract(valorDescontoAcrecismosImpotualidade.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		if(imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.INATIVO)
						|| imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.LIGADO_SO_ESGOTO)){

			// 3.1 Calcula a qtd de meses de inatividade de ligação de água
			FiltroLigacaoAgua filtroLigacaoAgua = new FiltroLigacaoAgua();
			filtroLigacaoAgua.adicionarParametro(new ParametroSimples(FiltroLigacaoAgua.ID, codigoImovel));

			Collection<LigacaoAgua> colecaoLigacaoAgua = getControladorUtil().pesquisar(filtroLigacaoAgua, LigacaoAgua.class.getName());

			// Disponibilizar para o GC
			filtroLigacaoAgua.limparListaParametros();
			filtroLigacaoAgua = null;

			Calendar dataAnoMesReferencia = new GregorianCalendar();
			dataAnoMesReferencia.set(Calendar.YEAR, Integer.valueOf(inicioIntervaloParcelamento.substring(3, 4)).intValue());
			dataAnoMesReferencia.set(Calendar.MONTH, Integer.valueOf(inicioIntervaloParcelamento.substring(0, 2)).intValue());
			dataAnoMesReferencia.set(Calendar.DATE, 01);

			Date dataCorrente = new Date();
			Date dataCorte = null;
			Date dataSupressao = null;

			int quantidadeMeses = 0;

			if(colecaoLigacaoAgua == null || colecaoLigacaoAgua.isEmpty()){

				// [FS0008] - Verificar a existência da data de supressão da ligação de água
				quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(), dataCorrente);

			}else{
				// Pega a primeira ocorrência da coleção
				LigacaoAgua ligacaoAgua = (LigacaoAgua) Util.retonarObjetoDeColecao(colecaoLigacaoAgua);

				if(ligacaoAgua != null){
					if(situacaoAguaId != null && situacaoAguaId.equals(LigacaoAguaSituacao.CORTADO)){
						dataCorte = ligacaoAgua.getDataCorte();
					}else{
						dataSupressao = ligacaoAgua.getDataSupressao();
					}
				}

				if(dataSupressao != null && !dataSupressao.equals("")){
					quantidadeMeses = Util.dataDiff(dataSupressao, dataCorrente);
				}else if(dataCorte != null && !dataCorte.equals("")){
					quantidadeMeses = Util.dataDiff(dataCorte, dataCorrente);
				}else{
					// [FS0008] - Verificar a existência da data de supressão da ligação de água
					quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(), dataCorrente);
				}
			}

			// 3.2 Obtem os percentuais de desconto por tempo de inatividade
			ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeMenor = null;
			try{
				parcelamentoDescontoInatividadeMenor = repositorioCobranca.obterPercentualDescontoInatividade(parcelamentoPerfil.getId(),
								quantidadeMeses);
			}catch(ErroRepositorioException e){
				e.printStackTrace();
			}

			if(parcelamentoDescontoInatividadeMenor != null){

				BigDecimal percentualDescontoMultaInatividade = null;
				BigDecimal percentualDescontoJurosMoraInatividade = null;

				BigDecimal percentualDescontoInatividade = null;
				if(indicadorRestabelecimento.equals(2)){
					// 3.3.1 Com restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividade = Util.dividirArredondando(
									percentualDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
									new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO).multiply(
									valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

					/*----------------------------------------------------------------------*
					 * Cálculo do desconto de multa e juros mora por inatividade (INÍCIO)
					 * (Sem Restabelecimento) - @author Luciano Galvão
					 *----------------------------------------------------------------------*/

					// Calcula o valor de desconto de multa por inatividade
					percentualDescontoMultaInatividade = parcelamentoDescontoInatividadeMenor
									.getPercentualDescontoMultaSemRestabelecimento();

					// Calcula o valor de desconto de juros mora por inatividade
					percentualDescontoJurosMoraInatividade = parcelamentoDescontoInatividadeMenor
									.getPercentualDescontoJurosMoraSemRestabelecimento();

					valorDescontoInatividade = calcularDescontoPorInatividadeMultaEJurosMora(valorTotalMultas, valorTotalJurosMora,
									percentualDescontoMultaInatividade, percentualDescontoJurosMoraInatividade, valorDescontoInatividade);
					/*----------------------------------------------------------------------*
					 * Cálculo do desconto de multa e juros mora por inatividade (FIM)
					 * (Sem Restabelecimento) - @author Luciano Galvão
					 *----------------------------------------------------------------------*/

				}else if(indicadorRestabelecimento.equals(1)){
					// 3.3.2 Sem restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor.getPercentualDescontoComRestabelecimento()
									.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividade = Util.dividirArredondando(
									percentualDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
									new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO).multiply(
									valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

					/*----------------------------------------------------------------------*
					 * Cálculo do desconto de multa e juros mora por inatividade (INÍCIO)
					 * (Com Restabelecimento) - @author Luciano Galvão
					 *----------------------------------------------------------------------*/

					// Calcula o valor de desconto de multa por inatividade
					percentualDescontoMultaInatividade = parcelamentoDescontoInatividadeMenor
									.getPercentualDescontoMultaComRestabelecimento();

					// Calcula o valor de desconto de juros mora por inatividade
					percentualDescontoJurosMoraInatividade = parcelamentoDescontoInatividadeMenor
									.getPercentualDescontoJurosMoraComRestabelecimento();

					valorDescontoInatividade = calcularDescontoPorInatividadeMultaEJurosMora(valorTotalMultas, valorTotalJurosMora,
									percentualDescontoMultaInatividade, percentualDescontoJurosMoraInatividade, valorDescontoInatividade);
					/*----------------------------------------------------------------------*
					 * Cálculo do desconto de multa e juros mora por inatividade (FIM)
					 * (Com Restabelecimento) - @author Luciano Galvão
					 *----------------------------------------------------------------------*/

				}else{
					valorDescontoInatividade = BigDecimal.ZERO;
				}
				negociacaoOpcoesParcelamentoHelper.setPercentualDescontoInatividadeLigacaoAgua(percentualDescontoInatividade);
			}else{
				// 3.3 Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividade = BigDecimal.ZERO;
			}
		}else{
			// Caso Ativo atribui zero
			valorDescontoInatividade = BigDecimal.ZERO;
		}

		// 5. O sistema calcula o valor do estorno de descontos anteriores [SB0039 - Calcular Valor
		// do Estorno de Descontos Concedidos em Parcelamentos Anteriores].

		// 6. Caso exista estorno de descontos concedidos em parcelamentos anteriores (Valor do
		// Estorno de Descontos Concedidos em Parcelamentos Anteriores retornado pelo [SB0039] é
		// diferente de nulo e de zero), o sistema calcula o novo valor do débito atualizado:
		// 6.1. Valor do débito atualizado = valor do débito atualizado mais Valor do Estorno de
		// Descontos Concedidos em Parcelamentos Anteriores.
		LOGGER.info("valorDebitoAtualizado = " + valorDebitoAtualizado);
		BigDecimal valorEstornoDescontos = (BigDecimal) calcularValorEstornoDescontosConcedidosEmParcAnteriores(colecaoContaValores)[0];
		if(valorEstornoDescontos.compareTo(BigDecimal.ZERO) > 0){
			valorDebitoAtualizado = valorDebitoAtualizado.add(valorEstornoDescontos);
			LOGGER.info("valorEstornoDescontos = " + valorEstornoDescontos);
			LOGGER.info("valorDebitoAtualizado = " + valorDebitoAtualizado);
		}

		BigDecimal valorDebitoOriginal = valorDebitoAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
						.subtract(valorTotalAcrescimosImpontualidade)
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		BigDecimal valorDebitoDesconto = BigDecimal.ZERO;

		valorDebitoDesconto = valorDebitoAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoAcrecismosImpotualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		// Verifica se a média da atualização monetária dos últimos 12 (doze) meses deva ser
		// acrescida à taxa de juros do parcelamento

		BigDecimal mediaFatorAtualizacaoMonetaria = BigDecimal.ZERO;

		Short indicadorAcrescimo = rd.getIndicadorTrataMediaAtualizacaoMonetaria();

		if(indicadorAcrescimo != null && indicadorAcrescimo.equals(ConstantesSistema.SIM)){
			try{
				mediaFatorAtualizacaoMonetaria = repositorioCobranca.obterMediaFatorAtualizacaoMonetaria();
			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
		}

		// ========================= RD especial ===============================
		BigDecimal valorDescontoPagamentoAVistaRDEspecial = BigDecimal.ZERO;
		if(parcelamentoPerfil.getPercentualDescontoAVista() != null
						&& !(parcelamentoPerfil.getPercentualDescontoAVista().compareTo(BigDecimal.ZERO) == 0)
						&& parcelamentoPerfil.getParcelaQuantidadeMinimaFatura() != null){
			// obter desconto de pagamento a vista
			BigDecimal valorDescontos = BigDecimal.ZERO;

			valorDescontos = valorDescontoAcrecismosImpotualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
							.add(valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos.add(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos.add(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos.add(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));

			valorDescontoPagamentoAVistaRDEspecial = obterValorDescontoPagamentoAVista(codigoImovel, anoMesInicialReferenciaDebito,
							anoMesLimiteMaximo, indicadoresParcelamentoHelper, parcelamentoPerfil, valorDescontos);
			negociacaoOpcoesParcelamentoHelper.setValorDescontoPagamentoAVistaRDEspecial(valorDescontoPagamentoAVistaRDEspecial);

		}
		// =====================================================================

		// Coloca os valores dos descontos no objeto helper
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAcrecismosImpotualidade(valorDescontoAcrecismosImpotualidade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoInatividade(valorDescontoInatividade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAntiguidade(valorDescontoAntiguidade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoSancoesRDEspecial(valorDescontoSancoesRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoTarifaSocialRDEspecial(valorDescontoTarifaSocialRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoPagamentoAVistaRDEspecial(valorDescontoPagamentoAVistaRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorEstornoDescontos(valorEstornoDescontos);

		// 5. Gera a Lista de opções de parcelamento
		BigDecimal valorEntrada = BigDecimal.ZERO;
		BigDecimal valorEntradaMinima = BigDecimal.ZERO;
		BigDecimal valorEntradaSugerida = null;
		if(colecaoParcelamentoQuantidadePrestacao != null && !colecaoParcelamentoQuantidadePrestacao.isEmpty()){
			// 5.1. Inicializa a quantidade de prestação com valor 1
			Short quantidadePrestacao = 1;

			// 5.2. Calcula o valor mínimo permitido para a prestação = valor da
			// tarifa miníma de água para o imóvel *
			// (PCPF_PCTARIFAMINIMAPRESTACAO/100)
			// Alteração do caso de uso 09/08/2006 - Roberta Costa

			// Pesquisa o imovel na base
			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, codigoImovel));
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CONSUMO_TARIFA);

			Collection<Imovel> imovelPesquisado = getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

			// Disponibilizar para o GC
			filtroImovel.limparListaParametros();
			filtroImovel.getColecaoCaminhosParaCarregamentoEntidades().clear();
			filtroImovel = null;

			// Verificar existêncioa da matrícula do imóvel
			Imovel imovel = null;
			if(imovelPesquisado != null && !imovelPesquisado.isEmpty()){
				imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
			}

			// Calcula o valor minimo da tarifa de água do imóvel
			BigDecimal valorTarifaMinimaAguaImovel = getControladorFaturamento().obterTarifaMinimaAguaImovel(imovel).setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

			// -----------------------------------------------------------------------------------------------
			// Opções de cálculo de valor mínimo prestação
			BigDecimal valorMinimoPrestacao = null;

			// Caso o percentual de valor minimo informado no perfil do parcelamento.
			// Caso contrário o percentual de taxa minima informado no perfil do parcelamento.
			if(parcelamentoPerfil.getValorDebitoPrestacao() != null){
				// Valor minímo da prestação na opção de parcelamento aba de negociação
				valorMinimoPrestacao = parcelamentoPerfil.getValorDebitoPrestacao();
			}else if(parcelamentoPerfil.getPercentualTarifaMinimaPrestacao() != null){
				// Valor minímo da prestação na opção de parcelamento aba de negociação
				valorMinimoPrestacao = valorTarifaMinimaAguaImovel.multiply(parcelamentoPerfil.getPercentualTarifaMinimaPrestacao().divide(
								new BigDecimal("100.00")));
			}else{
				// Define se a prestaçao minima vai ser uma porcentagem do valor do debito ORIGINAL
				// ou ATUALIZADO
				if(parcelamentoPerfil.getIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima().equals(
								ParcelamentoPerfil.INDICADOR_DEBITO_ORIGINAL)){
					valorMinimoPrestacao = valorDebitoOriginal.multiply(parcelamentoPerfil
									.getPercentualValorDebitoCalculoValorMinimoPrestacao().divide(new BigDecimal("100.00")));
				}else if(parcelamentoPerfil.getIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima().equals(
								ParcelamentoPerfil.INDICADOR_DEBITO_ATUALIZADO)){
					valorMinimoPrestacao = valorDebitoAtualizado.multiply(parcelamentoPerfil
									.getPercentualValorDebitoCalculoValorMinimoPrestacao().divide(new BigDecimal("100.00")));
				}else{
					throw new ControladorException("atencao.indicador.valor.debito.original.atualizado.prestacao.minima.ausente");
				}
			}

			valorMinimoPrestacao.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

			// -----------------------------------------------------------------------------------------------

			negociacaoOpcoesParcelamentoHelper.setValorMinimoPrestacao(valorMinimoPrestacao);

			// 5.3.2. valor da entrada reparcelamento = valor do débito com desconto *
			// (PQTP_PCVLRREPARCELADO/100)
			BigDecimal valorEntradaReparcelamento = BigDecimal.ZERO;

			// 5.4. Para cada ocorrência selecionada da tabela PARCELAMENTO_QUANTIDADE_PRESTACAO
			Iterator parcelamentoQuantidadePrestacaoValores = colecaoParcelamentoQuantidadePrestacao.iterator();

			BigDecimal taxaJuros = BigDecimal.ZERO;
			BigDecimal valorAParcelar = BigDecimal.ZERO;
			BigDecimal valorZero = BigDecimal.ZERO;
			BigDecimal valorCem = new BigDecimal("100.00");
			BigDecimal valorPrestacao = BigDecimal.ZERO;
			boolean minimoPermitido = true;
			Integer numDiasVencEntrada = null;

			BigDecimal percentualDescontoJurosMora = BigDecimal.ZERO;
			BigDecimal percentualDescontoMulta = BigDecimal.ZERO;
			BigDecimal percentualDescontoCorrecaoMonetaria = BigDecimal.ZERO;

			BigDecimal valorAuxiliar = BigDecimal.ZERO;

			BigDecimal valorDescontoJurosMora = BigDecimal.ZERO;
			BigDecimal valorDescontoMulta = BigDecimal.ZERO;
			BigDecimal valorDescontoAtualizacaoMonetaria = BigDecimal.ZERO;

			BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao = BigDecimal.ZERO;

			BigDecimal valorDebitoComDescontoNaPrestacao = null;

			negociacaoOpcoesParcelamentoHelper.setOpcoesParcelamento(new ArrayList());

			BigDecimal percentualMinimoEntradaRdve = null;

			ResolucaoDiretoriaParametrosValorEntrada resolucaoDiretoriaParametrosValorEntrada = this
							.pesquisarResolucaoDiretoriaParametrosValorEntrada(resolucaoDiretoria, new Date());

			if(resolucaoDiretoriaParametrosValorEntrada != null){
				percentualMinimoEntradaRdve = resolucaoDiretoriaParametrosValorEntrada.getPercentualMinimoEntrada();
			}

			// Verificar permissão especial
			boolean temPermissaoValMinimoPrestacao = this.getControladorPermissaoEspecial().verificarPermissaoEspecial(
							PermissaoEspecial.TESTAR_VAL_MINIMO_PRESTACAO, usuario);
			boolean temPermissaoNaoTestarQtdePrestacao = this.getControladorPermissaoEspecial()
							.verificarPermissaoNaoTestarQtdePrestacaoParcelamento(usuario);
			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
			while(parcelamentoQuantidadePrestacaoValores.hasNext()){
				ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = (ParcelamentoQuantidadePrestacao) parcelamentoQuantidadePrestacaoValores
								.next();

				if(parcelamentoQuantidadePrestacaoPassado != null){
					quantidadePrestacao = parcelamentoQuantidadePrestacaoPassado.getQuantidadeMaximaPrestacao();
				}

				percentualDescontoJurosMora = parcelamentoQuantidadePrestacao.getPercentualDescontoJurosMora();
				percentualDescontoMulta = parcelamentoQuantidadePrestacao.getPercentualDescontoMulta();
				percentualDescontoCorrecaoMonetaria = parcelamentoQuantidadePrestacao.getPercentualDescontoCorrecaoMonetaria();

				valorDebitoComDescontoNaPrestacao = null;
				valorDescontoAcrescimosImpontualidadeNaPrestacao = null;

				// [SB0032 - Verificar Desconto Por Número Prestações]
				if((percentualDescontoJurosMora != null && percentualDescontoJurosMora.compareTo(BigDecimal.ZERO) > 0)
								|| (percentualDescontoMulta != null && percentualDescontoMulta.compareTo(BigDecimal.ZERO) > 0)
								|| (percentualDescontoCorrecaoMonetaria != null && percentualDescontoCorrecaoMonetaria
												.compareTo(BigDecimal.ZERO) > 0)){

					valorDescontoJurosMora = BigDecimal.ZERO;

					if(percentualDescontoJurosMora != null && percentualDescontoJurosMora.compareTo(BigDecimal.ZERO) > 0
									&& valorTotalJurosMora != null){
						valorAuxiliar = percentualDescontoJurosMora.divide(valorCem).setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
						valorDescontoJurosMora = valorTotalJurosMora.multiply(valorAuxiliar).setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
					}

					valorDescontoMulta = BigDecimal.ZERO;

					if(percentualDescontoMulta != null && percentualDescontoMulta.compareTo(BigDecimal.ZERO) > 0
									&& valorTotalMultas != null){
						valorAuxiliar = percentualDescontoMulta.divide(valorCem).setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
						valorDescontoMulta = valorTotalMultas.multiply(valorAuxiliar).setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
					}

					valorDescontoAtualizacaoMonetaria = BigDecimal.ZERO;

					if(percentualDescontoCorrecaoMonetaria != null && percentualDescontoCorrecaoMonetaria.compareTo(BigDecimal.ZERO) > 0
									&& valorTotalAtualizacoesMonetarias != null){
						valorAuxiliar = percentualDescontoCorrecaoMonetaria.divide(valorCem).setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
						valorDescontoAtualizacaoMonetaria = valorTotalAtualizacoesMonetarias.multiply(valorAuxiliar).setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					}

					valorDescontoAcrescimosImpontualidadeNaPrestacao = valorDescontoJurosMora.add(valorDescontoMulta);
					valorDescontoAcrescimosImpontualidadeNaPrestacao = valorDescontoAcrescimosImpontualidadeNaPrestacao
									.add(valorDescontoAtualizacaoMonetaria);

					valorDebitoDesconto = BigDecimal.ZERO;

					valorDebitoDesconto = valorDebitoAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
									.subtract(valorDescontoAcrescimosImpontualidadeNaPrestacao.setScale(Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));

					valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
									.subtract(valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));

					valorDebitoDesconto = valorDebitoDesconto.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO));

					valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
									.subtract(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));

					valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
									.subtract(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));

					valorDebitoComDescontoNaPrestacao = valorDebitoDesconto;
				}

				if(parcelamentoQuantidadePrestacao.getNumeroDiasVencimentoDaEntrada() != null){
					numDiasVencEntrada = parcelamentoQuantidadePrestacao.getNumeroDiasVencimentoDaEntrada();
				}

				negociacaoOpcoesParcelamentoHelper.setNumeroDiasVencimentoEntrada(numDiasVencEntrada);

				Short quantidadeMaxPrestacaoEspecial = parcelamentoQuantidadePrestacao.getQuantidadeMaxPrestacaoEspecial();

				while((quantidadePrestacao <= parcelamentoQuantidadePrestacao.getQuantidadeMaximaPrestacao() && minimoPermitido || (quantidadeMaxPrestacaoEspecial != null
								&& quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && temPermissaoNaoTestarQtdePrestacao))){
					OpcoesParcelamentoHelper parcelamento = new OpcoesParcelamentoHelper();

					// 5.4.1. Para cada quantidade de prestações até que a quantidade de prestações
					// seja maior que a quantidade máxima de parcelamentoQuantidadePrestacao
					BigDecimal percentualEntradaMinima = BigDecimal.ZERO;
					BigDecimal percentualEntradaSugerida = BigDecimal.ZERO;

					if(quantidadePrestacao <= parcelamentoQuantidadePrestacao.getQuantidadeMaximaPrestacao()
									|| (quantidadeMaxPrestacaoEspecial != null && quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && temPermissaoNaoTestarQtdePrestacao)){

						parcelamento.setValorDebitoAtualizado(valorDebitoAtualizado);
						parcelamento.setValorDescontoAcrescimosImpontualidadeNaPrestacao(valorDescontoAcrescimosImpontualidadeNaPrestacao);
						parcelamento.setValorDebitoComDescontoNaPrestacao(valorDebitoComDescontoNaPrestacao);

						parcelamento.setPercentualDescontoJurosMora(percentualDescontoJurosMora);
						parcelamento.setPercentualDescontoMulta(percentualDescontoMulta);
						parcelamento.setPercentualDescontoCorrecaoMonetaria(percentualDescontoCorrecaoMonetaria);

						parcelamento.setNumeroMesesEntreParcelas(parcelamentoQuantidadePrestacao.getNumeroMesesEntreParcelas());
						parcelamento.setNumeroParcelasALancar(parcelamentoQuantidadePrestacao.getNumeroParcelasALancar());
						parcelamento.setNumeroMesesInicioCobranca(parcelamentoQuantidadePrestacao.getNumeroMesesInicioCobranca());

						Integer numeroDiasVencimentoDaEntrada = parcelamentoQuantidadePrestacao.getNumeroDiasVencimentoDaEntrada();

						if(numeroDiasVencimentoDaEntrada == null
										|| (numeroDiasVencimentoDaEntrada != null && numeroDiasVencimentoDaEntrada.equals(0))){
							numeroDiasVencimentoDaEntrada = Integer
											.parseInt((String) ParametroCobranca.P_NUMERO_DIAS_CALCULO_VENCIMENTO_PARCELA
															.executar(ExecutorParametrosCobranca.getInstancia()));
						}

						parcelamento.setNumeroDiasVencimentoDaEntrada(numeroDiasVencimentoDaEntrada);

						parcelamento.setQuantidadePrestacao(quantidadePrestacao);

						BigDecimal percentualValorReparcelado = parcelamentoQuantidadePrestacao.getPercentualValorReparcelado();
						// 5.3. Caso haja informação de percentual para cálculo de valor reparcelado
						// (PQTR_PCVLRREPARCELADO da tabela PARECLAMENTO_QUANTIDADE_PRESTACAO com
						// valor diferente de nulo)
						if(percentualValorReparcelado != null && percentualValorReparcelado.compareTo(BigDecimal.ZERO) != 0){

							// 5.3.1. o sistema deverá somar as parcelas vencidas e a vencer de
							// parcelamento ativo
							BigDecimal totalParcelasVencidas = valorZero;
							BigDecimal totalParcelasAVencer = valorZero;

							filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.IMOVEL_ID, imovel.getId()));
							filtroDebitoACobrar.adicionarParametro(new ParametroSimplesColecao(FiltroDebitoACobrar.FINANCIAMENTO_TIPO_ID,
											tiposFinanciamento));

							Collection colecaoDebitoACobrarParcelamento = getControladorUtil().pesquisar(filtroDebitoACobrar,
											DebitoACobrar.class.getName());

							// Disponibilizar para o GC
							filtroDebitoACobrar.limparListaParametros();

							Iterator itDebitoACobrarParcelamento = colecaoDebitoACobrarParcelamento.iterator();

							while(itDebitoACobrarParcelamento.hasNext()){
								DebitoACobrar debitoACobrar = (DebitoACobrar) itDebitoACobrarParcelamento.next();
								BigDecimal valorDebito = debitoACobrar.getValorDebito();
								totalParcelasAVencer.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								totalParcelasAVencer = totalParcelasAVencer.add(valorDebito);
							}

							Collection colecaoDebitoCobradoParcelamento = null;
							if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
								Iterator contaValores = colecaoContaValores.iterator();

								ContaValoresHelper contaValoresHelper = null;
								while(contaValores.hasNext()){
									contaValoresHelper = (ContaValoresHelper) contaValores.next();
								}

								if(contaValoresHelper != null){

									filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID,
													contaValoresHelper.getConta().getId()));
									filtroDebitoCobrado.adicionarParametro(new ParametroSimplesColecao(
													FiltroDebitoCobrado.FINANCIAMENTO_TIPO_ID, tiposFinanciamento));

									colecaoDebitoCobradoParcelamento = getControladorUtil().pesquisar(filtroDebitoCobrado,
													DebitoCobrado.class.getName());

									// Disponibilizar para o GC
									filtroDebitoCobrado.limparListaParametros();
								}

							}

							if(colecaoDebitoCobradoParcelamento != null){
								Iterator itDebitoCobradoParcelamento = colecaoDebitoCobradoParcelamento.iterator();

								while(itDebitoCobradoParcelamento.hasNext()){
									DebitoCobrado debitoCobrado = (DebitoCobrado) itDebitoCobradoParcelamento.next();
									BigDecimal vlPrestacao = debitoCobrado.getValorPrestacao();

									totalParcelasVencidas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
									totalParcelasVencidas = totalParcelasVencidas.add(vlPrestacao);
								}
							}

							BigDecimal valorTotalParcelas = totalParcelasAVencer.add(totalParcelasVencidas);

							// 5.3.2. valor da entrada reparcelamento = (valor calculo debitoACobrar
							// + debitoCobrado) * (PQTP_PCVLRREPARCELADO/100)
							valorEntradaReparcelamento = valorTotalParcelas.multiply(percentualValorReparcelado.divide(valorCem));

						}

						if(percentualMinimoEntradaRdve != null){
							percentualMinimoEntradaRdve = percentualMinimoEntradaRdve.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO);

							valorEntradaMinima = valorDebitoDesconto.multiply(percentualMinimoEntradaRdve.divide(valorCem));
						}else{
							// 5.4.1.1. caso o valor de percentual mínimo esteja informado
							if(parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada() != null
											&& parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().compareTo(BigDecimal.ZERO) > 0){

								percentualEntradaMinima = parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().setScale(
												Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								if(parcelamentoQuantidadePrestacao.getIndicadorEntradaParcelamento().intValue() == ParcelamentoQuantidadePrestacao.DEBITO_ATUALIZADO
												.intValue()){
									valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
								}else if(parcelamentoQuantidadePrestacao.getIndicadorEntradaParcelamento().intValue() == ParcelamentoQuantidadePrestacao.DEBITO_ORIGINAL
												.intValue()){

									BigDecimal valorOriginalComDesconto = valorDebitoDesconto
													.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
													.subtract(valorTotalAcrescimosImpontualidade)
													.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
									valorEntradaMinima = valorOriginalComDesconto.multiply(percentualEntradaMinima.divide(valorCem));
								}

							}
							// 5.4.1.2. caso o valor de percentual tarifa mínima esteja informado
							if(parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel() != null
											&& parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().compareTo(BigDecimal.ZERO) > 0){

								percentualEntradaMinima = parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().setScale(
												Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

								valorEntradaMinima = valorTarifaMinimaAguaImovel.multiply(percentualEntradaMinima.divide(valorCem));

							}

							// Valor minimo para entrada
							if(parcelamentoQuantidadePrestacao.getValorMinimoEntrada() != null
											&& !parcelamentoQuantidadePrestacao.getValorMinimoEntrada().equals(valorZero)){

								valorEntradaMinima = parcelamentoQuantidadePrestacao.getValorMinimoEntrada().setScale(
												Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							}

							// 5.4.1.3.
							ParcelamentoFaixaValor parcelamentoFaixaValorMenor = null;

							Boolean usouValorAtualizado = true;
							try{
								// Caso tenha uma faixa com o valor atualizado...
								parcelamentoFaixaValorMenor = repositorioCobranca.obterParcelamentoFaixaValor(
												parcelamentoQuantidadePrestacao.getId(), valorDebitoDesconto,
												ParcelamentoFaixaValor.DEBITO_ATUALIZADO);

								// Caso contrario refaz a pesquisa com o valor original (Sem os
								// acrescimos)
								if(parcelamentoFaixaValorMenor == null){
									parcelamentoFaixaValorMenor = repositorioCobranca.obterParcelamentoFaixaValor(
													parcelamentoQuantidadePrestacao.getId(),
													valorDebitoAtualizado.subtract(valorTotalAcrescimosImpontualidade),
													ParcelamentoFaixaValor.DEBITO_ORIGINAL);
									usouValorAtualizado = false;
								}

								if(parcelamentoFaixaValorMenor != null){
									if(parcelamentoFaixaValorMenor.getPercentualFaixa() != null){
										percentualEntradaMinima = parcelamentoFaixaValorMenor.getPercentualFaixa().setScale(
														Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

										if(usouValorAtualizado){
											valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
										}else{
											valorEntradaMinima = valorDebitoAtualizado.subtract(valorTotalAcrescimosImpontualidade)
															.multiply(percentualEntradaMinima.divide(valorCem));
										}
									}else if(parcelamentoFaixaValorMenor.getValorFixoEntrada() != null){
										valorEntradaMinima = parcelamentoFaixaValorMenor.getValorFixoEntrada();
									}else{
										throw new ControladorException("atencao.parcelamento.faixa.valor.nao.cadastrado.para.este.debito");
									}
								}

							}catch(ErroRepositorioException e){
								throw new ControladorException(e.getMessage());
							}
						}

						// caso o valor de percentual de entrada sugerida esteja informado
						if(parcelamentoQuantidadePrestacao.getPercentualEntradaSugerida() != null
										&& parcelamentoQuantidadePrestacao.getPercentualEntradaSugerida().compareTo(BigDecimal.ZERO) > 0){

							percentualEntradaSugerida = parcelamentoQuantidadePrestacao.getPercentualEntradaSugerida().setScale(
											Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

							valorEntradaSugerida = valorDebitoAtualizado.multiply(percentualEntradaSugerida.divide(valorCem));
						}

						// 5.4.1.4. Valor da Entrada
						valorEntrada = obterValorEntradaParcelamento(valorEntradaInformado, valorEntradaMinima, valorEntradaReparcelamento,
										usuario, valorEntradaSugerida);

						parcelamento.setValorEntradaMinima(valorEntrada.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));

						// 6. O sistema calcula a média dos índices de atualização monetária dos
						// últimos 12 meses
						// (IACI_NNFATORATUALIZACAOMONETAR da tabela INDICES_ACRESCIMOS_IMPTDE com
						// IACI_AMREFERENCIA >= (ANO-MÊS ATUAL MENOS 12)).

						// 7.4.1.5. Taxa de juros = (PQTP_TXJUROS / 100) + média das
						// atualizações monetárias dos últimos doze meses.

						taxaJuros = Util.dividirArredondando(
										parcelamentoQuantidadePrestacao.getTaxaJuros().add(Util.truncar(mediaFatorAtualizacaoMonetaria, 6)),
										valorCem);

						taxaJuros = Util.truncar(taxaJuros, 4);

						// Multiplica por 100 para exibição na tela
						parcelamento.setTaxaJuros(taxaJuros.multiply(valorCem));

						// 5.4.1.6. Valor da Prestação fórmula 01
						// 5.4.1.6.1. Calcula o valor a parcelar
						MathContext decimal = MathContext.DECIMAL64;

						valorAParcelar = valorDebitoDesconto.subtract(valorEntrada, decimal);

						// 5.4.1.6.2.Caso taxa de juros seja maior que zero
						if(taxaJuros.compareTo(valorZero) == 1){

							// 5.4.1.6.2 Calcula o valor da prestação
							valorPrestacao = (BigDecimal) ParametroCobranca.P_CALCULAR_VALOR_PRESTACAO_PARCELAMENTO.executar(this, -1,
											valorAParcelar, valorEntrada, taxaJuros, quantidadePrestacao, decimal);

						}else{
							// 5.4.1.6.3. Calcula o valor da prestação
							valorPrestacao = valorAParcelar.divide(new BigDecimal(quantidadePrestacao), decimal);
						}

						parcelamento.setValorPrestacao(valorPrestacao.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));

						// RD Especial
						if(parcelamentoPerfil.getIndicadorAlertaParcelaMinima() != null
										&& parcelamentoPerfil.getIndicadorAlertaParcelaMinima().equals(ConstantesSistema.SIM)){

							if(valorPrestacao.compareTo(valorTarifaMinimaAguaImovel) == 1){
								parcelamento.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.SIM);
							}else{
								parcelamento.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
							}

						}else{
							parcelamento.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
						}

						// 5.4.2. Caso o valor da prestação seja menor que o valor minímo permitido
						if((valorPrestacao.compareTo(valorMinimoPrestacao) == -1 && !temPermissaoValMinimoPrestacao)
										|| valorPrestacao.compareTo(valorZero) <= 0){
							minimoPermitido = false;
						}else{
							negociacaoOpcoesParcelamentoHelper.getOpcoesParcelamento().add(parcelamento);
						}

						// 5.4.3. Adicionar 1 a quantidade de prestações
						quantidadePrestacao++;
					}
				}
			}
			filtroDebitoACobrar = null;
			filtroDebitoCobrado = null;
		}

		negociacaoOpcoesParcelamentoHelper.setValorEntradaMinima(valorEntradaMinima.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));

		negociacaoOpcoesParcelamentoHelper.setValorEntrada(valorEntrada.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));

		if(dataVencimentoEntradaParcelamento != null){
			negociacaoOpcoesParcelamentoHelper.setDataVencimentoEntrada(Util.converteStringParaDate(dataVencimentoEntradaParcelamento));
		}

		// 6. Retorna o valor da entrada miníma e a lista de opções do parcelamento
		return negociacaoOpcoesParcelamentoHelper;
	}

	private BigDecimal calcularDescontoPorInatividadeMultaEJurosMora(BigDecimal valorTotalMultas, BigDecimal valorTotalJurosMora,
					BigDecimal percentualDescontoMultaInatividade, BigDecimal percentualDescontoJurosMoraInatividade,
					BigDecimal valorDescontoInatividade){

		BigDecimal valorDescontoMultaInatividade;
		BigDecimal valorDescontoJurosMoraInatividade;

		if(valorDescontoInatividade == null){
			valorDescontoInatividade = BigDecimal.ZERO;
		}

		// Se o percentual de desconto na multa e o valor da multa forem maiores que
		// ZERO
		if(percentualDescontoMultaInatividade != null && percentualDescontoMultaInatividade.compareTo(BigDecimal.ZERO) > 0
						&& valorTotalMultas != null && valorTotalMultas.compareTo(BigDecimal.ZERO) > 0){

			valorDescontoMultaInatividade = Util.dividirArredondando(
							percentualDescontoMultaInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
							new BigDecimal("100.00"));
			valorDescontoMultaInatividade = valorDescontoMultaInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(
							valorTotalMultas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

			valorDescontoInatividade = valorDescontoInatividade.add(valorDescontoMultaInatividade);
		}

		// Se o percentual de desconto nos juros e o valor dos juros forem maiores que
		// ZERO
		if(percentualDescontoJurosMoraInatividade != null && percentualDescontoJurosMoraInatividade.compareTo(BigDecimal.ZERO) > 0
						&& valorTotalJurosMora != null && valorTotalJurosMora.compareTo(BigDecimal.ZERO) > 0){

			valorDescontoJurosMoraInatividade = Util.dividirArredondando(
							percentualDescontoJurosMoraInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
							new BigDecimal("100.00"));
			valorDescontoJurosMoraInatividade = valorDescontoJurosMoraInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(
							valorTotalJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

			valorDescontoInatividade = valorDescontoInatividade.add(valorDescontoJurosMoraInatividade);
		}
		return valorDescontoInatividade;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Calcula o valor do desconto por antiguidade do débito
	 * [SB0003] - Calcular valor do desconto por antiguidade do débito
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @author Andre Nishimura
	 * @date 29 de Janeiro de 2009
	 *       Alteração para gravar valores de desconto dos itens do documento de cobrança (Desconto
	 *       impontualidade)
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public BigDecimal[] calcularValorDescontoAntiguidadeDebito(Integer resolucaoDiretoria, Integer codigoImovel, BigDecimal valorEntrada,
					Integer situacaoAgua, Integer situacaoEsgoto, Collection colecaoContaValores, ParcelamentoPerfil parcelamentoPerfil,
					Integer indicadorRestabelecimento, BigDecimal valorTotalMultas, BigDecimal valorTotalJurosMora,
					BigDecimal valorTotalAtualizacoesMonetarias, NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper)
					throws ControladorException{

		// Campos Formulário
		BigDecimal valorDescontoAntiguidade = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimosImpontualidade = BigDecimal.ZERO;
		int quantidadeMinimaMesesAntiguidade = 0;
		int maiorQuantidadeMinimaMesesAntiguidade = 0;

		// 2. Para cada conta da lista de conta de Débitos
		BigDecimal valorDescontoAntiguidadeConta = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeMulta = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeJurosMora = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeAtualizacoesMonetarias = BigDecimal.ZERO;
		// **************************************** Corrigindo problemas de arrendondamento
		BigDecimal valorDescontoAntiguidadeContaDiferenca = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeMultaDiferenca = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeJurosMoraDiferenca = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidadeAtualizacoesMonetariasDiferenca = BigDecimal.ZERO;
		// ****************************************
		if(colecaoContaValores != null && !colecaoContaValores.equals("")){
			Iterator contaValores = colecaoContaValores.iterator();

			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
			FiltroParcelamentoDescontoAntiguidade filtroParcelamentoDescontoAntiguidade = new FiltroParcelamentoDescontoAntiguidade();

			BigDecimal valorResidual = BigDecimal.ZERO;

			while(contaValores.hasNext()){
				valorDescontoAntiguidadeConta = BigDecimal.ZERO;
				valorDescontoAntiguidadeMulta = BigDecimal.ZERO;
				valorDescontoAntiguidadeJurosMora = BigDecimal.ZERO;
				valorDescontoAntiguidadeAtualizacoesMonetarias = BigDecimal.ZERO;

				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
				if(contaValoresHelper.getIndicadorContasDebito() == null
								|| !contaValoresHelper.getIndicadorContasDebito().equals(Integer.valueOf(2))){

					// 2.1 Calcula a quantidade de meses de antiguidade do débito
					int quantidadeMeses = 0;

					Calendar dataAnoMesReferencia = new GregorianCalendar();

					String mesAnoReferencia = Util.formatarAnoMesParaMesAno(contaValoresHelper.getConta().getReferencia());
					dataAnoMesReferencia.set(Calendar.YEAR, Integer.valueOf(mesAnoReferencia.substring(3, 7)));
					dataAnoMesReferencia.set(Calendar.MONTH, Integer.valueOf(mesAnoReferencia.substring(0, 2)) - 1);
					dataAnoMesReferencia.set(Calendar.DAY_OF_MONTH, 01);

					Calendar dataAnoMesReferenciaParametro = new GregorianCalendar();

					String mesAnoReferenciaParametro = Util.formatarAnoMesParaMesAno(sistemaParametros.getAnoMesFaturamento());
					dataAnoMesReferenciaParametro.set(Calendar.YEAR, Integer.valueOf(mesAnoReferenciaParametro.substring(3, 7)));
					dataAnoMesReferenciaParametro.set(Calendar.MONTH, Integer.valueOf(mesAnoReferenciaParametro.substring(0, 2)) - 1);
					dataAnoMesReferenciaParametro.set(Calendar.DAY_OF_MONTH, 01);

					quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(), dataAnoMesReferenciaParametro.getTime());

					// 2.2 Obtém o percentual de desconto por antiguidade do débito

					filtroParcelamentoDescontoAntiguidade.adicionarParametro(new ParametroSimples(
									FiltroParcelamentoDescontoAntiguidade.PARCELAMENTO_PERFIL, parcelamentoPerfil.getId()));
					filtroParcelamentoDescontoAntiguidade.adicionarParametro(new MenorQue(
									FiltroParcelamentoDescontoAntiguidade.QUANTIDADE_MINIMA_MESES_DEBITO, quantidadeMeses));

					Collection<ParcelamentoDescontoAntiguidade> colecaoParcelamentoDescontoAntiguidade = getControladorUtil().pesquisar(
									filtroParcelamentoDescontoAntiguidade, ParcelamentoDescontoAntiguidade.class.getName());

					filtroParcelamentoDescontoAntiguidade.limparListaParametros();

					BigDecimal percentualDescontoAntiguidade = BigDecimal.ZERO;

					// 2.3 Caso nenhuma ocorrência tenha sido selecionada passar para a próxima
					// conta
					if(colecaoParcelamentoDescontoAntiguidade != null && !colecaoParcelamentoDescontoAntiguidade.isEmpty()){
						Iterator parcelamentoDescontoAntiguidadeValores = colecaoParcelamentoDescontoAntiguidade.iterator();
						ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeMaior = new ParcelamentoDescontoAntiguidade();

						quantidadeMinimaMesesAntiguidade = 0;
						maiorQuantidadeMinimaMesesAntiguidade = 0;

						// 2.4 Determina o percentual de desconto por antiguidade do débito
						while(parcelamentoDescontoAntiguidadeValores.hasNext()){
							ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeValores
											.next();
							quantidadeMinimaMesesAntiguidade = parcelamentoDescontoAntiguidade.getQuantidadeMinimaMesesDebito();
							if(quantidadeMinimaMesesAntiguidade > maiorQuantidadeMinimaMesesAntiguidade){
								maiorQuantidadeMinimaMesesAntiguidade = quantidadeMinimaMesesAntiguidade;
								parcelamentoDescontoAntiguidadeMaior = parcelamentoDescontoAntiguidade;
							}
						}

						// 2.4.1 Caso a situação da ligação de água do imóvel
						// corresponda suprimido, suprimido parcial ou suprimido parcial a pedido
						if(situacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO) || situacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC)
										|| situacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)){

							// 2.4.1.1 Caso tenha sido informado que haverá restabelecimento
							if(indicadorRestabelecimento.equals(Integer.valueOf(1))){
								percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior
												.getPercentualDescontoComRestabelecimento();
							}else if(indicadorRestabelecimento.equals(Integer.valueOf(2))){
								percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior
												.getPercentualDescontoSemRestabelecimento();
							}
						}else{

							// 2.4.2 Casoa a situação do imóvel seja diferente de 2
							percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior.getPercentualDescontoAtivo();
						}
						negociacaoOpcoesParcelamentoHelper.setPercentualDescontoAntiguidadeDebito(percentualDescontoAntiguidade.setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

						// 2.5 Calcula os valores
						BigDecimal percentual = Util.dividirArredondando(percentualDescontoAntiguidade, new BigDecimal("100"));

						// 2.5.1 Valor desconto por antiguidade da conta
						valorDescontoAntiguidadeConta = contaValoresHelper.getConta().getValorTotal()
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).multiply(percentual);
						// ************************ Resolvendo problema de arrendondamento no
						// desconto no valor da conta 24/01/2011 - André Nishimura
						// Acumulando a diferença dos arredondamentos para incluir nos descontos da
						// ultima conta

						valorDescontoAntiguidadeContaDiferenca = valorDescontoAntiguidadeContaDiferenca.add(valorDescontoAntiguidadeConta
										.subtract(valorDescontoAntiguidadeConta.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO)));

						// ************************

						negociacaoOpcoesParcelamentoHelper.incrementaDescontoValor(contaValoresHelper, valorDescontoAntiguidadeConta
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

						// 2.5.2 Valor desconto por antiguidade da multa E GUARDA VALOR INDIVIDUAL
						// DO DESCONTO DE IMPONTUALIDADE
						if(contaValoresHelper.getValorMulta() != null){
							valorDescontoAntiguidadeMulta = contaValoresHelper.getValorMulta()
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).multiply(percentual);
							// ************************ Resolvendo problema de arrendondamento no
							// desconto no valor da multa 24/01/2011 - André Nishimura
							// Acumulando a diferença dos arredondamentos para incluir nos descontos
							// da ultima conta

							valorDescontoAntiguidadeMultaDiferenca = valorDescontoAntiguidadeMultaDiferenca
											.add(valorDescontoAntiguidadeMulta.subtract(valorDescontoAntiguidadeMulta.setScale(
															Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)));

							// ************************
							negociacaoOpcoesParcelamentoHelper.incrementaDescontoMulta(contaValoresHelper, valorDescontoAntiguidadeMulta
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// 2.5.3 Valor desconto por antiguidade nos juros de mora
						if(contaValoresHelper.getValorJurosMora() != null){
							valorDescontoAntiguidadeJurosMora = contaValoresHelper.getValorJurosMora()
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).multiply(percentual);

							// ************************ Resolvendo problema de arrendondamento no
							// desconto no valor da mora 24/01/2011 - André Nishimura
							// Acumulando a diferença dos arredondamentos para incluir nos descontos
							// da ultima conta

							valorDescontoAntiguidadeJurosMoraDiferenca = valorDescontoAntiguidadeJurosMoraDiferenca
											.add(valorDescontoAntiguidadeJurosMora.subtract(valorDescontoAntiguidadeJurosMora.setScale(
															Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)));

							// ************************
							negociacaoOpcoesParcelamentoHelper.incrementaDescontoMora(contaValoresHelper, valorDescontoAntiguidadeJurosMora
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

						}

						// 2.5.4 Valor desconto por antiguidade nas atualizações
						// monetárias
						if(contaValoresHelper.getValorJurosMora() != null){
							valorDescontoAntiguidadeAtualizacoesMonetarias = contaValoresHelper.getValorAtualizacaoMonetaria()
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).multiply(percentual);
							// ************************ Resolvendo problema de arrendondamento no
							// desconto no valor dos juros 24/01/2011 - André Nishimura
							// Acumulando a diferença dos arredondamentos para incluir nos descontos
							// da ultima conta

							valorDescontoAntiguidadeAtualizacoesMonetariasDiferenca = valorDescontoAntiguidadeAtualizacoesMonetariasDiferenca
											.add(valorDescontoAntiguidadeAtualizacoesMonetarias
															.subtract(valorDescontoAntiguidadeAtualizacoesMonetarias.setScale(
																			Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)));

							// ************************
							negociacaoOpcoesParcelamentoHelper.incrementaDescontoCorrecaoMonetaria(contaValoresHelper,
											valorDescontoAntiguidadeAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// 2.6 Acumula o valor do desconto por antiguidade
						valorDescontoAntiguidade = valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO).add(
										valorDescontoAntiguidadeConta.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						valorDescontoAntiguidade = valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO).add(
										valorDescontoAntiguidadeMulta.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						valorDescontoAntiguidade = valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO).add(
										valorDescontoAntiguidadeJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						valorDescontoAntiguidade = valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO).add(
										valorDescontoAntiguidadeAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));

						// 2.7 Subtrai o valor das multas
						if(valorTotalMultas != BigDecimal.ZERO){
							valorTotalMultas = valorTotalMultas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
											.subtract(valorDescontoAntiguidadeMulta.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// 2.8 Subtrai o valor total dos juros de mora
						if(valorTotalJurosMora != BigDecimal.ZERO){
							valorTotalJurosMora = valorTotalJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO).subtract(
											valorDescontoAntiguidadeJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// 2.7 Subtrai o valor total das atualizações monetárias
						if(valorTotalAtualizacoesMonetarias != BigDecimal.ZERO){
							valorTotalAtualizacoesMonetarias = valorTotalAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO).subtract(
											valorDescontoAntiguidadeAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));
						}
					}

					// Calcula o valor dos descontos de impontualidade das contas individualmente
					BigDecimal percentualDescontoAcrescimosImpontualidade = negociacaoOpcoesParcelamentoHelper
									.getPercentualDescontoAcrescimosImpontualidade();

					if(percentualDescontoAcrescimosImpontualidade != null){
						BigDecimal valorMulta = contaValoresHelper.getValorMulta();

						if(valorMulta != null && valorDescontoAntiguidadeMulta != null){
							BigDecimal valorDescontoMultaItem = (valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO).subtract(valorDescontoAntiguidadeMulta.setScale(
											Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)))
											.multiply(percentualDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));

							BigDecimal valorDescontoMultaItemAux = negociacaoOpcoesParcelamentoHelper.incrementaDescontoMulta(
											contaValoresHelper, valorDescontoMultaItem);

							valorDescontoMultaItem = valorDescontoMultaItem.subtract(valorDescontoMultaItemAux);
							valorResidual = valorResidual.add(valorDescontoMultaItem);
						}

						BigDecimal valorJurosMora = contaValoresHelper.getValorJurosMora();

						if(valorJurosMora != null && valorDescontoAntiguidadeJurosMora != null){
							BigDecimal valorDescontoMoraItem = (valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO).subtract(valorDescontoAntiguidadeJurosMora.setScale(
											Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)))
											.multiply(percentualDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));

							BigDecimal valorDescontoMoraItemAux = negociacaoOpcoesParcelamentoHelper.incrementaDescontoMora(
											contaValoresHelper, valorDescontoMoraItem);

							valorDescontoMoraItem = valorDescontoMoraItem.subtract(valorDescontoMoraItemAux);
							valorResidual = valorResidual.add(valorDescontoMoraItem);
						}

						BigDecimal valorAtualizacaoMonetaria = contaValoresHelper.getValorAtualizacaoMonetaria();

						if(valorAtualizacaoMonetaria != null && valorDescontoAntiguidadeAtualizacoesMonetarias != null){
							BigDecimal valorDescontoCorrecaoMonetariaItem = (valorAtualizacaoMonetaria.setScale(
											Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
											.subtract(valorDescontoAntiguidadeAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO)))
											.multiply(percentualDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));

							BigDecimal valorDescontoCorrecaoMonetariaItemAux = negociacaoOpcoesParcelamentoHelper
											.incrementaDescontoCorrecaoMonetaria(contaValoresHelper, valorDescontoCorrecaoMonetariaItem);

							valorDescontoCorrecaoMonetariaItem = valorDescontoCorrecaoMonetariaItem
											.subtract(valorDescontoCorrecaoMonetariaItemAux);
							valorResidual = valorResidual.add(valorDescontoCorrecaoMonetariaItem);
						}

						if(valorResidual.compareTo(BigDecimal.ZERO) == 1 && !contaValores.hasNext()){
							negociacaoOpcoesParcelamentoHelper.incrementaDescontoMulta(contaValoresHelper, valorResidual);
						}
					}
				}
			}
			filtroParcelamentoDescontoAntiguidade = null;
		}

		// ************************ Resolvendo problema de arrendondamento no desconto 24/01/2011 -
		// André Nishimura
		// Incluindo os valores acumulados da diferença dos arredondamentos dos descontos na ultima
		// conta do parcelamento
		BigDecimal descontoRestoAcumuladoArredondamento = valorDescontoAntiguidadeContaDiferenca
						.add(valorDescontoAntiguidadeMultaDiferenca).add(valorDescontoAntiguidadeJurosMoraDiferenca)
						.add(valorDescontoAntiguidadeAtualizacoesMonetariasDiferenca)
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		ContaValoresHelper contaValoresHelper = (ContaValoresHelper) Util.retonarObjetoDeColecao(colecaoContaValores);
		negociacaoOpcoesParcelamentoHelper.incrementaDescontoValor(contaValoresHelper,
						descontoRestoAcumuladoArredondamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDescontoAntiguidade = valorDescontoAntiguidade.add(
						descontoRestoAcumuladoArredondamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO))
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		// *************************************************************************************************************

		// 3. Recalcula o valor total dos acrescimos por impontualidade
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalMultas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalAtualizacoesMonetarias.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		// 4. Retorna o valor do desconto por antiguidade e o valor total dos acrescimos por
		// impontualidade
		BigDecimal[] valorDescontoAntiguidadeDebito = new BigDecimal[3];

		valorDescontoAntiguidadeDebito[0] = valorDescontoAntiguidade
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		valorDescontoAntiguidadeDebito[1] = valorTotalAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO);
		valorDescontoAntiguidadeDebito[2] = new BigDecimal(maiorQuantidadeMinimaMesesAntiguidade);

		return valorDescontoAntiguidadeDebito;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Obtém o Perfil do parcelamento para o imóvel
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * @param codigoImovel
	 * @param resolucaoDiretoria
	 * @param imovelSituacao
	 * @param subcategoria
	 * @return ParcelamentoPerfil
	 */
	public ParcelamentoPerfil obterPerfilParcelamento(Integer codigoImovel, Integer imovelSituacaoId, Integer perfilImovelId,
					Integer subcategoriaId, Integer resolucaoDiretoria, boolean verificaNulidadde) throws ControladorException{

		FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
		filtroParcelamentoPerfil.adicionarCaminhoParaCarregamentoEntidade("categoria");

		if(perfilImovelId != null && !perfilImovelId.equals("")){
			if(!verificaNulidadde){
				filtroParcelamentoPerfil
								.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID, perfilImovelId));
			}else{
				filtroParcelamentoPerfil.adicionarParametro(new ConectorOr(new ParametroSimples(FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID,
								perfilImovelId), new ParametroNulo(FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID)));
			}
		}else{
			filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID));
		}

		filtroParcelamentoPerfil
						.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.IMOVEL_SITUACAO_TIPO_ID, imovelSituacaoId));

		if(subcategoriaId != null && !subcategoriaId.equals("")){
			if(!verificaNulidadde){
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.SUBCATEGORIA_ID, subcategoriaId));
			}else{
				filtroParcelamentoPerfil.adicionarParametro(new ConectorOr(new ParametroSimples(FiltroParcelamentoPerfil.SUBCATEGORIA_ID,
								subcategoriaId), new ParametroNulo(FiltroParcelamentoPerfil.SUBCATEGORIA_ID)));
			}
		}else{
			filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(FiltroParcelamentoPerfil.SUBCATEGORIA_ID));
		}

		filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
						resolucaoDiretoria));

		Collection<ParcelamentoPerfil> colecaoParcelamentoPerfil = getControladorUtil().pesquisar(filtroParcelamentoPerfil,
						ParcelamentoPerfil.class.getName());

		filtroParcelamentoPerfil.getColecaoCaminhosParaCarregamentoEntidades().clear();
		filtroParcelamentoPerfil.limparListaParametros();
		filtroParcelamentoPerfil = null;

		// Verificar existência da situacao do imóvel
		ParcelamentoPerfil perfilParcelamento = null;

		if(colecaoParcelamentoPerfil != null && !colecaoParcelamentoPerfil.isEmpty()){

			// Pega a primeira ocorrência da coleção
			perfilParcelamento = (ParcelamentoPerfil) Util.retonarObjetoDeColecao(colecaoParcelamentoPerfil);

			colecaoParcelamentoPerfil.clear();
			colecaoParcelamentoPerfil = null;
		}

		return perfilParcelamento;
	}

	/**
	 * Obtem a Lista de Rotas
	 * [UC0244] Manter Comando Ação Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * @param codigoImovel
	 * @param idRotaInicial
	 * @param idRotaFinal
	 * @param idSetorComercialInicial
	 * @param idSetorComercialFinal
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param idGerenciaRegional
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListasRotas(String idRotaInicial, String idRotaFinal, String nuQuadraInicial, String nuQuadraFinal,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String idLocalidadeInicial,
					String idLocalidadeFinal, String idGerenciaRegional, String idUnidadeNegocio) throws ControladorException{

		Collection colecaoRotas = new ArrayList();

		if((idRotaInicial != null && !idRotaInicial.equals("")) && (idRotaFinal != null && !idRotaFinal.equals(""))){
			FiltroRota filtroRota = new FiltroRota();

			// filtroRota.adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
			Intervalo intervalo = new Intervalo(FiltroRota.ID_ROTA, idRotaInicial, idRotaFinal);
			filtroRota.adicionarParametro(intervalo);

			colecaoRotas = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		}else if((nuQuadraInicial != null && !nuQuadraInicial.equals("")) && (nuQuadraFinal != null && !nuQuadraFinal.equals(""))
						&& (codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))){

			FiltroRota filtroRota = new FiltroRota();

			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.SETOR_COMERCIAL_CODIGO, codigoSetorComercialInicial));

			colecaoRotas = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		}else if((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
						&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){

			FiltroRota filtroRota = new FiltroRota();
			// filtroRota.adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
			Intervalo intervalo = new Intervalo(FiltroRota.LOCALIDADE_ID, idLocalidadeInicial, idLocalidadeFinal);
			filtroRota.adicionarParametro(intervalo);

			if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
							&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){

				// filtroRota.adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
				Intervalo intervaloSetor = new Intervalo(FiltroRota.SETOR_COMERCIAL_CODIGO, codigoSetorComercialInicial,
								codigoSetorComercialFinal);
				filtroRota.adicionarParametro(intervaloSetor);
			}

			colecaoRotas = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		}else if(idUnidadeNegocio != null && !idUnidadeNegocio.equals("")
						&& !idUnidadeNegocio.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID_UNIDADE_NEGOCIO, idUnidadeNegocio));

			Collection colecaoLocalidades = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoLocalidades != null && !colecaoLocalidades.isEmpty()){

				Iterator iteratorColecaoLocalidades = colecaoLocalidades.iterator();
				FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
				FiltroRota filtroRota = new FiltroRota();
				while(iteratorColecaoLocalidades.hasNext()){
					Localidade localidade = (Localidade) iteratorColecaoLocalidades.next();

					filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID_LOCALIDADE, localidade.getId()));

					Collection colecaoSetoresComerciais = this.getControladorUtil().pesquisar(filtroSetorComercial,
									SetorComercial.class.getName());

					filtroSetorComercial.limparListaParametros();

					if(colecaoSetoresComerciais != null && !colecaoSetoresComerciais.isEmpty()){

						Iterator iteratorColecaoSetoresComerciais = colecaoSetoresComerciais.iterator();

						while(iteratorColecaoSetoresComerciais.hasNext()){
							SetorComercial setorComercial = (SetorComercial) iteratorColecaoSetoresComerciais.next();

							filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.SETOR_COMERCIAL_ID, setorComercial.getId()));

							Collection colecaoRotasSetorComercialLocalidadeGerencia = this.getControladorUtil().pesquisar(filtroRota,
											Rota.class.getName());

							filtroRota.limparListaParametros();

							if(colecaoRotasSetorComercialLocalidadeGerencia != null
											&& !colecaoRotasSetorComercialLocalidadeGerencia.isEmpty()){
								Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
												.iterator();

								while(iteratorColecaoRotasSetorComercialLocalidadeGerencia.hasNext()){
									Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia.next();

									colecaoRotas.add(rota);
								}
							}
						}
					}
				}
				filtroSetorComercial = null;
				filtroRota = null;
			}

		}else if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
						&& !idGerenciaRegional.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID_GERENCIA, idGerenciaRegional));

			Collection colecaoLocalidades = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoLocalidades != null && !colecaoLocalidades.isEmpty()){

				Iterator iteratorColecaoLocalidades = colecaoLocalidades.iterator();
				FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
				FiltroRota filtroRota = new FiltroRota();
				while(iteratorColecaoLocalidades.hasNext()){
					Localidade localidade = (Localidade) iteratorColecaoLocalidades.next();

					filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID_LOCALIDADE, localidade.getId()));

					Collection colecaoSetoresComerciais = this.getControladorUtil().pesquisar(filtroSetorComercial,
									SetorComercial.class.getName());

					filtroSetorComercial.limparListaParametros();

					if(colecaoSetoresComerciais != null && !colecaoSetoresComerciais.isEmpty()){

						Iterator iteratorColecaoSetoresComerciais = colecaoSetoresComerciais.iterator();

						while(iteratorColecaoSetoresComerciais.hasNext()){
							SetorComercial setorComercial = (SetorComercial) iteratorColecaoSetoresComerciais.next();

							filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.SETOR_COMERCIAL_ID, setorComercial.getId()));

							Collection colecaoRotasSetorComercialLocalidadeGerencia = this.getControladorUtil().pesquisar(filtroRota,
											Rota.class.getName());

							filtroRota.limparListaParametros();

							if(colecaoRotasSetorComercialLocalidadeGerencia != null
											&& !colecaoRotasSetorComercialLocalidadeGerencia.isEmpty()){
								Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
												.iterator();

								while(iteratorColecaoRotasSetorComercialLocalidadeGerencia.hasNext()){
									Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia.next();

									colecaoRotas.add(rota);
								}
							}
						}
					}
				}
				filtroSetorComercial = null;
				filtroRota = null;
			}

		}
		return colecaoRotas;

	}

	/**
	 * Obter Lista de Rotas Comando
	 * [UC0243] - Inserir Comando de Ação de Cobrança
	 * Selecionar as Lsitas de Rotas do Comando
	 * [SF0009] - Selecionar Lista de Rotas do Comando
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * @param idCobrancaGrupo
	 * @return
	 */
	public Collection obterListaRotasComando(String idCobrancaGrupo, Collection colecaoIdCobrancaAtividadeComandoRota)
					throws ControladorException{

		Collection colecaoListaRotasComando = null;
		if(idCobrancaGrupo != null && !idCobrancaGrupo.equals("")){
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, idCobrancaGrupo));

			colecaoListaRotasComando = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());
		}else{

			if(colecaoIdCobrancaAtividadeComandoRota != null && !colecaoIdCobrancaAtividadeComandoRota.isEmpty()){
				colecaoListaRotasComando = new ArrayList();
				Iterator iteratorColecaoIdCobrancaAtividadeComandoRota = colecaoIdCobrancaAtividadeComandoRota.iterator();
				FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
				filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota");
				while(iteratorColecaoIdCobrancaAtividadeComandoRota.hasNext()){

					CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK = (CobrancaAtividadeComandoRotaPK) iteratorColecaoIdCobrancaAtividadeComandoRota
									.next();

					filtroCobrancaAtividadeComandoRotas.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
									compIDCobrancaAtividadeComandoRotaPK.getCobrancaAcaoAtividadeComandoId()));
					filtroCobrancaAtividadeComandoRotas.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAtividadeComandoRotas.COMP_ID_ROTA_ID, compIDCobrancaAtividadeComandoRotaPK.getRotaId()));

					Collection colecaoRotasCobrancaAtividadeComandoRota = this.getControladorUtil().pesquisar(
									filtroCobrancaAtividadeComandoRotas, CobrancaAtividadeComandoRota.class.getName());

					filtroCobrancaAtividadeComandoRotas.limparListaParametros();

					if(colecaoRotasCobrancaAtividadeComandoRota != null && !colecaoRotasCobrancaAtividadeComandoRota.isEmpty()){
						Iterator iteratorColecaoRotasCobrancaAtividadeComandoRota = colecaoRotasCobrancaAtividadeComandoRota.iterator();

						while(iteratorColecaoRotasCobrancaAtividadeComandoRota.hasNext()){
							CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoRotasCobrancaAtividadeComandoRota
											.next();

							colecaoListaRotasComando.add(cobrancaAtividadeComandoRota.getRota());
						}
					}
				}
				filtroCobrancaAtividadeComandoRotas = null;
			}
		}

		return colecaoListaRotasComando;

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Gera os Débitos a Cobrar dos Acréscimos por Impontualidade
	 * [SB0005] - Gerar Débitos a Cobrar dos Acréscimos por Impontualidade
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * @author Isaac Silva
	 * @date 22/08/2011
	 * @param imovel
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param taxaJuros
	 * @param parcelamentoId
	 * @param colecaoCategoria
	 * @param numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @param numeroMesesInicioCobranca
	 * @throws ControladorException
	 */
	private void gerarDebitosACobrarAcrescimosImpontualidadeParcelamento(Imovel imovel, BigDecimal valorAtualizacaoMonetaria,
					BigDecimal valorJurosMora, BigDecimal valorMulta, BigDecimal taxaJuros, Integer parcelamentoId,
					Collection<Categoria> colecaoCategoria, Integer numeroMesesEntreParcelas, Integer numeroParcelasALancar,
					Integer numeroMesesInicioCobranca) throws ControladorException{

		// Início para alimentar a tabela debito a cobrar com o novo parcelamento.

		// Atualização Monetária
		if(valorAtualizacaoMonetaria != null && !(valorAtualizacaoMonetaria.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoAtualizacaMonetaria = filtrarDebitoTipo(DebitoTipo.ATUALIZACAO_MONETARIA);

			// Inclui o débito a cobrar para Atualização Monetária
			inserirDebitoACobrarDebitoTipo(debitoTipoAtualizacaMonetaria, imovel, Short.valueOf((short) 1), valorAtualizacaoMonetaria,
							taxaJuros, parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.CANCELADA, true,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);
		}

		// Juros Mora
		if(valorJurosMora != null && !(valorJurosMora.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoJurosMora = filtrarDebitoTipo(DebitoTipo.JUROS_MORA);

			// Inclui o débito a cobrar para Juros Mora
			inserirDebitoACobrarDebitoTipo(debitoTipoJurosMora, imovel, Short.valueOf((short) 1), valorJurosMora, taxaJuros,
							parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.CANCELADA, true,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);
		}

		// Multa por Impontualidade
		if(valorMulta != null && !(valorMulta.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoMultaImpontualidade = filtrarDebitoTipo(DebitoTipo.MULTA_IMPONTUALIDADE);

			// Inclui o débito a cobrar para Multa
			inserirDebitoACobrarDebitoTipo(debitoTipoMultaImpontualidade, imovel, Short.valueOf((short) 1), valorMulta, taxaJuros,
							parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.CANCELADA, true,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);

		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Pega o Tipo do Débito de acordo com a constante informada
	 * filtrarDebitoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * @param debitoTipo
	 * @param imovel
	 * @param valorDebito
	 * @param taxaJuros
	 * @param parcelamentoId
	 */
	public DebitoTipo filtrarDebitoTipo(Integer tipoDebito) throws ControladorException{

		FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();

		filtroDebitoTipo.adicionarParametro(new ParametroSimples(FiltroDebitoTipo.ID, tipoDebito));

		Collection colecaoDebitoTipo = this.getControladorUtil().pesquisar(filtroDebitoTipo, DebitoTipo.class.getName());

		DebitoTipo debitoTipo = new DebitoTipo();
		if(colecaoDebitoTipo != null && !colecaoDebitoTipo.isEmpty()){
			debitoTipo = (DebitoTipo) colecaoDebitoTipo.iterator().next();
		}
		return debitoTipo;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Insere Débito A Cobrar de acordo com Tipo do Débito do Imóvel
	 * inserirDebitoACobrarDebitoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * @author Isaac Silva
	 * @date 22/08/2011
	 * @param debitoTipo
	 * @param imovel
	 * @param numeroPrestacao
	 * @param valorDebito
	 * @param taxaJuros
	 * @param parcelamentoId
	 * @param colecaoCategoria
	 * @param parcelamentoGrupoId
	 * @param debitoCreditoSituacaoId
	 * @param efetuarParcelamento
	 *            se true atualiza os atributos: numeroMesesEntreParcelas, numeroParcelasALancar,
	 *            numeroMesesInicioCobranca que serão usados no faturamento;
	 * @param numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @param numeroMesesInicioCobranca
	 * @throws ControladorException
	 */
	public void inserirDebitoACobrarDebitoTipo(DebitoTipo debitoTipo, Imovel imovel, Short numeroPrestacao, BigDecimal valorDebito,
					BigDecimal taxaJuros, Integer parcelamentoId, Collection<Categoria> colecaoCategoria, Integer parcelamentoGrupoId,
					Integer debitoCreditoSituacaoId, boolean efetuarParcelamento, Integer numeroMesesEntreParcelas,
					Integer numeroParcelasALancar, Integer numeroMesesInicioCobranca, Integer anoMesReferenciaDebito)
					throws ControladorException{

		SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		// Insere o débito a cobrar na tabela DEBITO_A_COBRAR_GERAL
		DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
		debitoACobrarGeral.setIndicadorHistorico(Short.valueOf((short) 2));
		debitoACobrarGeral.setUltimaAlteracao(new Date());
		// Recupera o código do débito a cobrar geral inserido Integer
		Integer debitoACobrarGeralIdBase = (Integer) getControladorUtil().inserir(debitoACobrarGeral);
		debitoACobrarGeral.setId(debitoACobrarGeralIdBase);

		// Seta o objeto débito a cobrar com os parâmetros solicitados
		DebitoACobrar debitoACobrar = new DebitoACobrar();
		DebitoACobrarHistorico debitoACobrarHistorico = new DebitoACobrarHistorico();

		// ******* Campanha Parcelamento date 22/08/2011 ******************
		if(efetuarParcelamento){
			debitoACobrar.setNumeroMesesEntreParcelas(numeroMesesEntreParcelas);
			debitoACobrarHistorico.setNumeroMesesEntreParcelas(numeroMesesEntreParcelas);

			debitoACobrar.setNumeroParcelasALancar(numeroParcelasALancar);
			debitoACobrarHistorico.setNumeroParcelasALancar(numeroParcelasALancar);

			debitoACobrar.setAnoMesReferenciaUltimaCobranca(null);
			debitoACobrarHistorico.setAnoMesReferenciaUltimaCobranca(null);
		}
		// *********** date 22/08/2011 ******************

		debitoACobrar.setId(debitoACobrarGeralIdBase);
		debitoACobrarHistorico.setId(debitoACobrarGeralIdBase);

		debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);

		debitoACobrar.setImovel(imovel);
		debitoACobrarHistorico.setImovel(imovel);

		debitoACobrar.setDebitoTipo(debitoTipo);
		debitoACobrarHistorico.setDebitoTipo(debitoTipo);

		debitoACobrarHistorico.setDebitoGeradoRealizar(new Date());

		debitoACobrar.setGeracaoDebito(new Date());

		if(anoMesReferenciaDebito == null){
			debitoACobrar.setAnoMesReferenciaDebito(sistemaParametros.getAnoMesFaturamento());
			debitoACobrarHistorico.setAnoMesReferenciaDebito(sistemaParametros.getAnoMesFaturamento());
		}else{
			debitoACobrar.setAnoMesReferenciaDebito(anoMesReferenciaDebito);
			debitoACobrarHistorico.setAnoMesReferenciaDebito(anoMesReferenciaDebito);
		}

		if(efetuarParcelamento){
			// ******* Campanha Parcelamento date 22/08/2011 ******************
			Integer numeroMesesInicioCobrancaParcela = null;

			if(numeroMesesInicioCobranca == null){
				numeroMesesInicioCobrancaParcela = 1;
			}else{
				numeroMesesInicioCobrancaParcela = numeroMesesInicioCobranca;
			}

			Integer anoMesCobrancaDebito = Util.somaMesAnoMesReferencia(sistemaParametros.getAnoMesFaturamento(),
							numeroMesesInicioCobrancaParcela);

			debitoACobrar.setAnoMesCobrancaDebito(anoMesCobrancaDebito);
			debitoACobrarHistorico.setAnoMesCobrancaDebito(anoMesCobrancaDebito);
			// *********** date 22/08/2011 ******************
		}else{
			debitoACobrar.setAnoMesCobrancaDebito(sistemaParametros.getAnoMesArrecadacao());
			debitoACobrarHistorico.setAnoMesCobrancaDebito(sistemaParametros.getAnoMesArrecadacao());
		}

		debitoACobrar.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
		debitoACobrarHistorico.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());

		debitoACobrar.setValorDebito(valorDebito);
		debitoACobrarHistorico.setValorDebito(valorDebito);

		debitoACobrar.setNumeroPrestacaoDebito(numeroPrestacao);
		debitoACobrarHistorico.setPrestacaoDebito(numeroPrestacao);

		debitoACobrar.setNumeroPrestacaoCobradas(Short.valueOf((short) 0));
		debitoACobrarHistorico.setPrestacaoCobradas(Short.valueOf((short) 0));

		debitoACobrar.setLocalidade(imovel.getLocalidade());
		debitoACobrarHistorico.setLocalidade(imovel.getLocalidade());

		debitoACobrar.setQuadra(imovel.getQuadra());
		debitoACobrarHistorico.setQuadra(imovel.getQuadra());

		debitoACobrar.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
		debitoACobrarHistorico.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());

		debitoACobrar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
		debitoACobrarHistorico.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());

		debitoACobrar.setNumeroLote(imovel.getLote());
		debitoACobrarHistorico.setLote(imovel.getLote());

		debitoACobrar.setNumeroSubLote(imovel.getSubLote());
		debitoACobrarHistorico.setSublote(imovel.getSubLote());

		debitoACobrar.setPercentualTaxaJurosFinanciamento(taxaJuros);
		debitoACobrarHistorico.setPercentualTaxaJurosFinanciamento(taxaJuros);

		RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		registroAtendimento.setId(null);
		debitoACobrar.setRegistroAtendimento(registroAtendimento);
		debitoACobrar.setOrdemServico(null);
		debitoACobrarHistorico.setRegistroAtendimento(registroAtendimento);
		debitoACobrarHistorico.setOrdemServico(null);

		debitoACobrar.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());
		debitoACobrarHistorico.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());

		debitoACobrar.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());
		debitoACobrarHistorico.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());

		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(debitoCreditoSituacaoId);
		debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		// Altera de cancelada para parcelada (3 para 5)
		DebitoCreditoSituacao debitoCreditoSituacaoAtualHistorico = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtualHistorico.setId(DebitoCreditoSituacao.PARCELADA);
		debitoACobrarHistorico.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtualHistorico);

		debitoACobrar.setDebitoCreditoSituacaoAnterior(null);
		debitoACobrarHistorico.setDebitoCreditoSituacaoAnterior(null);

		ParcelamentoGrupo parcelamentoGrupo = new ParcelamentoGrupo();
		parcelamentoGrupo.setId(parcelamentoGrupoId);
		debitoACobrar.setParcelamentoGrupo(parcelamentoGrupo);
		debitoACobrarHistorico.setParcelamentoGrupo(parcelamentoGrupo);

		CobrancaForma cobrancaForma = new CobrancaForma();
		cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
		debitoACobrar.setCobrancaForma(cobrancaForma);
		debitoACobrarHistorico.setCobrancaForma(cobrancaForma);

		if(parcelamentoId != null && !parcelamentoId.equals("")){
			Parcelamento parcelamento = new Parcelamento();
			parcelamento.setId(parcelamentoId);
			debitoACobrar.setParcelamento(parcelamento);
			debitoACobrarHistorico.setParcelamento(parcelamento);
		}else{
			debitoACobrar.setParcelamento(null);
			debitoACobrarHistorico.setParcelamento(null);
		}
		debitoACobrar.setUltimaAlteracao(new Date());
		debitoACobrarHistorico.setUltimaAlteracao(new Date());

		// getControladorUtil().inserir(debitoACobrar);

		// Recupera o código do débito a cobrar inserido Integer
		// Integer debitoACobrarIdBase = (Integer)

		// Verifica situacao do debito a cobrar para enviar ou não para histórico.
		if(debitoACobrar.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA)){
			// if(false){

			Collection<DebitoACobrar> colecaoDebitoACobrar = new ArrayList<DebitoACobrar>();
			colecaoDebitoACobrar.add(debitoACobrar);
			// getControladorFaturamento().transferirDebitosACobrarParaHistorico(colecaoDebitoACobrar);
			getControladorUtil().inserir(debitoACobrarHistorico);
			Collection<DebitoACobrarHistorico> colecaoDebitoACobrarTemp = new ArrayList<DebitoACobrarHistorico>();
			colecaoDebitoACobrarTemp.add(debitoACobrarHistorico);
			getControladorFaturamento().atualizarIndicadorDebitoACobrarNoHistorico(colecaoDebitoACobrarTemp);

			// 2.1. [UC0185] Obter Valor por Categoria
			Collection<BigDecimal> colecaoValorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoria, valorDebito);

			// Cria as iterações de categoria e valor
			Iterator iteratorCategoria = colecaoCategoria.iterator();
			Iterator iteratorValorCategoria = colecaoValorCategoria.iterator();

			// Laço para criar os débitos a cobrar por categoria
			while(iteratorCategoria.hasNext()){
				// Recupera a categoria
				Categoria categoria = (Categoria) iteratorCategoria.next();

				// Recupera o valor da categoria
				BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

				// Cria o débito a cobrar categoria
				DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
				DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico = new DebitoACobrarCategoriaHistorico();

				DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(debitoACobrar, categoria);
				DebitoACobrarHistorico dach = new DebitoACobrarHistorico();
				dach.setId(debitoACobrar.getId());
				DebitoACobrarCategoriaHistoricoPK debitoACobrarCategoriaHistoricoPK = new DebitoACobrarCategoriaHistoricoPK(dach, categoria);

				debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
				debitoACobrarCategoriaHistorico.setComp_id(debitoACobrarCategoriaHistoricoPK);

				/*
				 * DebitoACobrar debitoACobrarBase = new DebitoACobrar();
				 * debitoACobrarBase.setId(debitoACobrarGeralIdBase);
				 * debitoACobrarCategoria.setDebitoACobrar(debitoACobrarBase);
				 */
				debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
				debitoACobrarCategoriaHistorico.setDebitoACobrarHistorico(debitoACobrarHistorico);

				debitoACobrarCategoria.setCategoria(categoria);
				debitoACobrarCategoriaHistorico.setCategoria(categoria);

				debitoACobrarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
				debitoACobrarCategoriaHistorico.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());

				debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
				debitoACobrarCategoriaHistorico.setValorCategoria(valorPorCategoria);

				debitoACobrarCategoria.setUltimaAlteracao(new Date());
				debitoACobrarCategoriaHistorico.setUltimaAlteracao(new Date());

				// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
				getControladorUtil().inserir(debitoACobrarCategoriaHistorico);

			}
		}else{

			getControladorUtil().inserir(debitoACobrar);

			// 2.1. [UC0185] Obter Valor por Categoria
			Collection<BigDecimal> colecaoValorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoria, valorDebito);

			// Cria as iterações de categoria e valor
			Iterator iteratorCategoria = colecaoCategoria.iterator();
			Iterator iteratorValorCategoria = colecaoValorCategoria.iterator();

			// Laço para criar os débitos a cobrar por categoria
			while(iteratorCategoria.hasNext()){
				// Recupera a categoria
				Categoria categoria = (Categoria) iteratorCategoria.next();

				// Recupera o valor da categoria
				BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

				// Cria o débito a cobrar categoria
				DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
				DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico = new DebitoACobrarCategoriaHistorico();

				DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(debitoACobrar, categoria);
				DebitoACobrarHistorico dach = new DebitoACobrarHistorico();
				dach.setId(debitoACobrar.getId());
				DebitoACobrarCategoriaHistoricoPK debitoACobrarCategoriaHistoricoPK = new DebitoACobrarCategoriaHistoricoPK(dach, categoria);

				debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
				debitoACobrarCategoriaHistorico.setComp_id(debitoACobrarCategoriaHistoricoPK);

				/*
				 * DebitoACobrar debitoACobrarBase = new DebitoACobrar();
				 * debitoACobrarBase.setId(debitoACobrarGeralIdBase);
				 * debitoACobrarCategoria.setDebitoACobrar(debitoACobrarBase);
				 */
				debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
				debitoACobrarCategoriaHistorico.setDebitoACobrarHistorico(debitoACobrarHistorico);

				debitoACobrarCategoria.setCategoria(categoria);
				debitoACobrarCategoriaHistorico.setCategoria(categoria);

				debitoACobrarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
				debitoACobrarCategoriaHistorico.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());

				debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
				debitoACobrarCategoriaHistorico.setValorCategoria(valorPorCategoria);

				debitoACobrarCategoria.setUltimaAlteracao(new Date());
				debitoACobrarCategoriaHistorico.setUltimaAlteracao(new Date());

				// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
				getControladorUtil().inserir(debitoACobrarCategoria);

			}

		}

	}

	private void inserirDebitoACobrarDebitoTipo(DebitoTipo debitoTipo, Imovel imovel, Short numeroPrestacao,
					Map<Categoria, BigDecimal> mapaValoresPorCategoria, BigDecimal taxaJuros, Integer parcelamentoId,
					Integer parcelamentoGrupoId, Integer debitoCreditoSituacaoId, boolean efetuarParcelamento,
					Integer numeroMesesEntreParcelas, Integer numeroParcelasALancar, Integer numeroMesesInicioCobranca,
					Short indicadorTotalRemuneracaoCobrancaAdm, Short indicadorParcialRemuneracaoCobrancaAdm) throws ControladorException{

		BigDecimal valorDebito = Util.somaColecaoBigDecimal(mapaValoresPorCategoria.values());

		if(valorDebito != null && valorDebito.compareTo(BigDecimal.ZERO) > 0){
			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

			// Insere o débito a cobrar na tabela DEBITO_A_COBRAR_GERAL
			DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
			debitoACobrarGeral.setIndicadorHistorico(Short.valueOf((short) 2));
			debitoACobrarGeral.setUltimaAlteracao(new Date());
			// Recupera o código do débito a cobrar geral inserido Integer
			Integer debitoACobrarGeralIdBase = (Integer) getControladorUtil().inserir(debitoACobrarGeral);
			debitoACobrarGeral.setId(debitoACobrarGeralIdBase);

			// Seta o objeto débito a cobrar com os parâmetros solicitados
			DebitoACobrar debitoACobrar = new DebitoACobrar();
			DebitoACobrarHistorico debitoACobrarHistorico = new DebitoACobrarHistorico();

			// ******* Campanha Parcelamento date 22/08/2011 ******************
			if(efetuarParcelamento){
				debitoACobrar.setNumeroMesesEntreParcelas(numeroMesesEntreParcelas);
				debitoACobrarHistorico.setNumeroMesesEntreParcelas(numeroMesesEntreParcelas);

				debitoACobrar.setNumeroParcelasALancar(numeroParcelasALancar);
				debitoACobrarHistorico.setNumeroParcelasALancar(numeroParcelasALancar);

				debitoACobrar.setAnoMesReferenciaUltimaCobranca(null);
				debitoACobrarHistorico.setAnoMesReferenciaUltimaCobranca(null);
			}
			// *********** date 22/08/2011 ******************

			debitoACobrar.setId(debitoACobrarGeralIdBase);
			debitoACobrarHistorico.setId(debitoACobrarGeralIdBase);

			debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);

			debitoACobrar.setImovel(imovel);
			debitoACobrarHistorico.setImovel(imovel);

			debitoACobrar.setDebitoTipo(debitoTipo);
			debitoACobrarHistorico.setDebitoTipo(debitoTipo);

			debitoACobrarHistorico.setDebitoGeradoRealizar(new Date());

			debitoACobrar.setGeracaoDebito(new Date());

			debitoACobrar.setAnoMesReferenciaDebito(sistemaParametros.getAnoMesFaturamento());
			debitoACobrarHistorico.setAnoMesReferenciaDebito(sistemaParametros.getAnoMesFaturamento());

			if(efetuarParcelamento){
				// ******* Campanha Parcelamento date 22/08/2011 ******************
				Integer numeroMesesInicioCobrancaParcela = null;

				if(numeroMesesInicioCobranca == null){
					numeroMesesInicioCobrancaParcela = 1;
				}else{
					numeroMesesInicioCobrancaParcela = numeroMesesInicioCobranca;
				}

				Integer anoMesCobrancaDebito = Util.somaMesAnoMesReferencia(sistemaParametros.getAnoMesFaturamento(),
								numeroMesesInicioCobrancaParcela);

				debitoACobrar.setAnoMesCobrancaDebito(anoMesCobrancaDebito);
				debitoACobrarHistorico.setAnoMesCobrancaDebito(anoMesCobrancaDebito);
				// *********** date 22/08/2011 ******************
			}else{
				debitoACobrar.setAnoMesCobrancaDebito(sistemaParametros.getAnoMesArrecadacao());
				debitoACobrarHistorico.setAnoMesCobrancaDebito(sistemaParametros.getAnoMesArrecadacao());
			}

			debitoACobrar.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
			debitoACobrarHistorico.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());

			debitoACobrar.setValorDebito(valorDebito);
			debitoACobrarHistorico.setValorDebito(valorDebito);

			debitoACobrar.setNumeroPrestacaoDebito(numeroPrestacao);
			debitoACobrarHistorico.setPrestacaoDebito(numeroPrestacao);

			debitoACobrar.setNumeroPrestacaoCobradas(Short.valueOf((short) 0));
			debitoACobrarHistorico.setPrestacaoCobradas(Short.valueOf((short) 0));

			debitoACobrar.setLocalidade(imovel.getLocalidade());
			debitoACobrarHistorico.setLocalidade(imovel.getLocalidade());

			debitoACobrar.setQuadra(imovel.getQuadra());
			debitoACobrarHistorico.setQuadra(imovel.getQuadra());

			debitoACobrar.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
			debitoACobrarHistorico.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());

			debitoACobrar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			debitoACobrarHistorico.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());

			debitoACobrar.setNumeroLote(imovel.getLote());
			debitoACobrarHistorico.setLote(imovel.getLote());

			debitoACobrar.setNumeroSubLote(imovel.getSubLote());
			debitoACobrarHistorico.setSublote(imovel.getSubLote());

			debitoACobrar.setPercentualTaxaJurosFinanciamento(taxaJuros);
			debitoACobrarHistorico.setPercentualTaxaJurosFinanciamento(taxaJuros);

			RegistroAtendimento registroAtendimento = new RegistroAtendimento();
			registroAtendimento.setId(null);
			debitoACobrar.setRegistroAtendimento(registroAtendimento);
			debitoACobrar.setOrdemServico(null);
			debitoACobrarHistorico.setRegistroAtendimento(registroAtendimento);
			debitoACobrarHistorico.setOrdemServico(null);

			debitoACobrar.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());
			debitoACobrarHistorico.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());

			debitoACobrar.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());
			debitoACobrarHistorico.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());

			DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAtual.setId(debitoCreditoSituacaoId);
			debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

			// Altera de cancelada para parcelada (3 para 5)
			DebitoCreditoSituacao debitoCreditoSituacaoAtualHistorico = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAtualHistorico.setId(DebitoCreditoSituacao.PARCELADA);
			debitoACobrarHistorico.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtualHistorico);

			debitoACobrar.setDebitoCreditoSituacaoAnterior(null);
			debitoACobrarHistorico.setDebitoCreditoSituacaoAnterior(null);

			ParcelamentoGrupo parcelamentoGrupo = new ParcelamentoGrupo();
			parcelamentoGrupo.setId(parcelamentoGrupoId);
			debitoACobrar.setParcelamentoGrupo(parcelamentoGrupo);
			debitoACobrarHistorico.setParcelamentoGrupo(parcelamentoGrupo);

			CobrancaForma cobrancaForma = new CobrancaForma();
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
			debitoACobrar.setCobrancaForma(cobrancaForma);
			debitoACobrarHistorico.setCobrancaForma(cobrancaForma);

			if(parcelamentoId != null && !parcelamentoId.equals("")){
				Parcelamento parcelamento = new Parcelamento();
				parcelamento.setId(parcelamentoId);
				debitoACobrar.setParcelamento(parcelamento);
				debitoACobrarHistorico.setParcelamento(parcelamento);
			}else{
				debitoACobrar.setParcelamento(null);
				debitoACobrarHistorico.setParcelamento(null);
			}

			// 1. Caso o Indicador de Remuneração Total Cobrança Administrativa esteja com o valor 1
			// (sim)
			if(indicadorTotalRemuneracaoCobrancaAdm != null && indicadorTotalRemuneracaoCobrancaAdm.equals(ConstantesSistema.SIM)){

				// 1.1. Atribuir o valor 1 (sim) ao Indicador Remunera Cobrança Adm.
				debitoACobrar.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);
				debitoACobrarHistorico.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

				// Caso contrário
			}else{
				// 2.1. Atribuir o Indicador de Remuneração Parcial Cobrança Administrativa para o
				// tipo de débito e item contábil correspondente
				debitoACobrar.setIndicadorRemuneraCobrancaAdministrativa(indicadorParcialRemuneracaoCobrancaAdm);
				debitoACobrarHistorico.setIndicadorRemuneraCobrancaAdministrativa(indicadorParcialRemuneracaoCobrancaAdm);
			}

			debitoACobrar.setUltimaAlteracao(new Date());
			debitoACobrarHistorico.setUltimaAlteracao(new Date());

			// getControladorUtil().inserir(debitoACobrar);

			// Recupera o código do débito a cobrar inserido Integer
			// Integer debitoACobrarIdBase = (Integer)

			// Verifica situacao do debito a cobrar para enviar ou não para histórico.
			if(debitoACobrar.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA)){
				// if(false){

				Collection<DebitoACobrar> colecaoDebitoACobrar = new ArrayList<DebitoACobrar>();
				colecaoDebitoACobrar.add(debitoACobrar);
				// getControladorFaturamento().transferirDebitosACobrarParaHistorico(colecaoDebitoACobrar);
				getControladorUtil().inserir(debitoACobrarHistorico);
				Collection<DebitoACobrarHistorico> colecaoDebitoACobrarTemp = new ArrayList<DebitoACobrarHistorico>();
				colecaoDebitoACobrarTemp.add(debitoACobrarHistorico);
				getControladorFaturamento().atualizarIndicadorDebitoACobrarNoHistorico(colecaoDebitoACobrarTemp);

				// Insere os objetos DebitoACobrarCategoria
				for(Categoria categoria : mapaValoresPorCategoria.keySet()){
					// Recupera o valor da categoria
					BigDecimal valorPorCategoria = mapaValoresPorCategoria.get(categoria);

					// Cria o débito a cobrar categoria
					DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
					DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico = new DebitoACobrarCategoriaHistorico();

					DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(debitoACobrar, categoria);
					DebitoACobrarHistorico dach = new DebitoACobrarHistorico();
					dach.setId(debitoACobrar.getId());
					DebitoACobrarCategoriaHistoricoPK debitoACobrarCategoriaHistoricoPK = new DebitoACobrarCategoriaHistoricoPK(dach,
									categoria);

					debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
					debitoACobrarCategoriaHistorico.setComp_id(debitoACobrarCategoriaHistoricoPK);

					/*
					 * DebitoACobrar debitoACobrarBase = new DebitoACobrar();
					 * debitoACobrarBase.setId(debitoACobrarGeralIdBase);
					 * debitoACobrarCategoria.setDebitoACobrar(debitoACobrarBase);
					 */
					debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
					debitoACobrarCategoriaHistorico.setDebitoACobrarHistorico(debitoACobrarHistorico);

					debitoACobrarCategoria.setCategoria(categoria);
					debitoACobrarCategoriaHistorico.setCategoria(categoria);

					debitoACobrarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
					debitoACobrarCategoriaHistorico.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());

					debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
					debitoACobrarCategoriaHistorico.setValorCategoria(valorPorCategoria);

					debitoACobrarCategoria.setUltimaAlteracao(new Date());
					debitoACobrarCategoriaHistorico.setUltimaAlteracao(new Date());

					// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
					getControladorUtil().inserir(debitoACobrarCategoriaHistorico);
				}

			}else{

				getControladorUtil().inserir(debitoACobrar);

				for(Categoria categoria : mapaValoresPorCategoria.keySet()){

					// Recupera o valor da categoria
					BigDecimal valorPorCategoria = mapaValoresPorCategoria.get(categoria);

					// Cria o débito a cobrar categoria
					DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
					DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico = new DebitoACobrarCategoriaHistorico();

					DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(debitoACobrar, categoria);
					DebitoACobrarHistorico dach = new DebitoACobrarHistorico();
					dach.setId(debitoACobrar.getId());
					DebitoACobrarCategoriaHistoricoPK debitoACobrarCategoriaHistoricoPK = new DebitoACobrarCategoriaHistoricoPK(dach,
									categoria);

					debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
					debitoACobrarCategoriaHistorico.setComp_id(debitoACobrarCategoriaHistoricoPK);

					/*
					 * DebitoACobrar debitoACobrarBase = new DebitoACobrar();
					 * debitoACobrarBase.setId(debitoACobrarGeralIdBase);
					 * debitoACobrarCategoria.setDebitoACobrar(debitoACobrarBase);
					 */
					debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
					debitoACobrarCategoriaHistorico.setDebitoACobrarHistorico(debitoACobrarHistorico);

					debitoACobrarCategoria.setCategoria(categoria);
					debitoACobrarCategoriaHistorico.setCategoria(categoria);

					debitoACobrarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
					debitoACobrarCategoriaHistorico.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());

					debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
					debitoACobrarCategoriaHistorico.setValorCategoria(valorPorCategoria);

					debitoACobrarCategoria.setUltimaAlteracao(new Date());
					debitoACobrarCategoriaHistorico.setUltimaAlteracao(new Date());

					// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
					getControladorUtil().inserir(debitoACobrarCategoria);
				}
			}
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Verifica a Situação do Imóvel e o Perfil Parcelamento
	 * [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * @param codigoImovel
	 * @param resolucaoDiretoria
	 * @param verificaNulidade
	 *            TODO
	 * @param parcelamentoQuantidadePrestacao
	 *            TODO
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public Object[] verificarSituacaoImovelPerfilParcelamento(Integer situacaoAguaId, Integer situacaoEsgotoId, Integer codigoImovel,
					Integer perfilImovelId, Integer resolucaoDiretoria, Integer numeroReparcelamentoConsecutivos,
					BigDecimal valorDebitoACobrarParcelamentoImovel, boolean verificaNulidade,
					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao, Usuario usuario) throws ControladorException{

		// 1. Obtem a situação do imovel
		ImovelSituacao imovelSituacao = null;

		// Condição 1
		if(situacaoAguaId != null && situacaoEsgotoId != null){
			imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, situacaoEsgotoId);
			// Condição 2
			if(imovelSituacao == null){
				imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, null);
			}
		}

		// [FS004] Verificar existência da situação do imóvel
		if(imovelSituacao == null){
			throw new ControladorException("atencao.nao.existe.situacao.imovel.correspondente.situacao.agua.esgoto");
		}

		// 2. Obtém o perfil do parcelamento para o imóvel
		ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();

		if(imovelSituacao != null){
			// Pega a subcategoria do imóvel
			Imovel imovel = new Imovel();
			imovel.setId(codigoImovel);

			Subcategoria subcategoria = obterSubCategoriaMaiorEconomia(imovel);

			// Condição 1 - iper_id = iper_id do imovel e scat_id = scat_id do
			// imovel
			parcelamentoPerfil = obterPerfilParcelamento(codigoImovel, imovelSituacao.getImovelSituacaoTipo().getId(), perfilImovelId,
							subcategoria.getId(), resolucaoDiretoria, verificaNulidade);

			// Condição 2 - iper_id = iper_id do imovel e scat_id = null do
			// imovel
			if(parcelamentoPerfil == null){
				parcelamentoPerfil = obterPerfilParcelamento(codigoImovel, imovelSituacao.getImovelSituacaoTipo().getId(), perfilImovelId,
								null, resolucaoDiretoria, verificaNulidade);
				// Condição 3 - iper_id = null do imovel e scat_id = scat_id do
				// imovel
				if(parcelamentoPerfil == null){
					parcelamentoPerfil = obterPerfilParcelamento(codigoImovel, imovelSituacao.getImovelSituacaoTipo().getId(), null,
									subcategoria.getId(), resolucaoDiretoria, verificaNulidade);
					// Condição 4 - iper_id = null do imovel e scat_id = null
					if(parcelamentoPerfil == null){
						parcelamentoPerfil = obterPerfilParcelamento(codigoImovel, imovelSituacao.getImovelSituacaoTipo().getId(), null,
										null, resolucaoDiretoria, verificaNulidade);
					}
				}
			}
		}

		// [FS005] Verificar existência do perfil de parcelamento
		if(parcelamentoPerfil == null){
			throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel");
		}

		// 3. Obtem a condição referente a quantidade de reparcelamentos
		// consecutivos já realizados para perfil do parcelamento para o imóvel

		Integer numeroReparcelamentoConsecutivosMaisUm = numeroReparcelamentoConsecutivos;
		// se o valorDebitoACobrarParcelamentoImovel for diferente de 0
		// somar 1 ao numero de reparcelamento
		if(valorDebitoACobrarParcelamentoImovel.compareTo(BigDecimal.ZERO) != 0){
			numeroReparcelamentoConsecutivosMaisUm++;
		}

		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = null;
		try{
			parcelamentoQuantidadeReparcelamento = repositorioCobranca.obterQtdeReparcelamentoPerfil(parcelamentoPerfil.getId(),
							Short.valueOf(numeroReparcelamentoConsecutivosMaisUm.shortValue()));
		}catch(ErroRepositorioException e){
			e.printStackTrace();
		}

		if(parcelamentoQuantidadeReparcelamento == null){
			// [FS0006] Verificar a esxistência da quantidade de reparcelamentos
			// para o perfil
			throw new ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		}

		//
		//
		// if (parcelamentoQuantidadeReparcelamento == null){
		// [FS0006] Verificar a existência da quantidade de reparcelamentos
		// para o perfil
		// throw new
		// ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		// }

		// FiltroParcelamentoQuantidadeReparcelamento
		// filtroParcelamentoQuantidadeReparcelamento = new
		// FiltroParcelamentoQuantidadeReparcelamento();
		//
		// filtroParcelamentoQuantidadeReparcelamento.adicionarParametro(new
		// ParametroSimples(FiltroParcelamentoQuantidadeReparcelamento.PARCELAMENTO_PERFIL,
		// parcelamentoPerfil.getId()));
		// filtroParcelamentoQuantidadeReparcelamento.adicionarParametro(new
		// MenorQue(FiltroParcelamentoQuantidadeReparcelamento.QUANTIDADE_MAXIMA_REPARCELAMENTO,
		// numeroReparcelamentoConsecutivos));
		//
		// Collection<ParcelamentoQuantidadeReparcelamento>
		// colecaoParcelamentoQuantidadeReparcelamento =
		// getControladorUtil().pesquisar(filtroParcelamentoQuantidadeReparcelamento,
		// ParcelamentoQuantidadeReparcelamento.class.getName());

		// Verificar existência da situacao do imóvel
		// Integer parcelamentoQuantidadeReparcelamentoId = null;
		//
		// if (colecaoParcelamentoQuantidadeReparcelamento != null &&
		// !colecaoParcelamentoQuantidadeReparcelamento.isEmpty()) {
		// Iterator parcelamentoQuantidadeReparcelamentoValores =
		// colecaoParcelamentoQuantidadeReparcelamento.iterator();
		//
		// int quantidadeMaximaReparcelamento = 0;
		// int menorQuantidadeMaximaReparcelamento = 999;
		//
		// while (parcelamentoQuantidadeReparcelamentoValores.hasNext()) {
		// ParcelamentoQuantidadeReparcelamento
		// parcelamentoQuantidadeReparcelamento =
		// (ParcelamentoQuantidadeReparcelamento)
		// parcelamentoQuantidadeReparcelamentoValores.next();
		// quantidadeMaximaReparcelamento =
		// parcelamentoQuantidadeReparcelamento.getQuantidadeMaximaReparcelamento();
		// if (quantidadeMaximaReparcelamento <
		// menorQuantidadeMaximaReparcelamento) {
		// menorQuantidadeMaximaReparcelamento = quantidadeMaximaReparcelamento;
		// parcelamentoQuantidadeReparcelamentoId =
		// parcelamentoQuantidadeReparcelamento.getId();
		// }
		// }
		// } else {
		// [FS0006] Verificar a esxistência da quantidade de reparcelamentos
		// para o perfil
		// throw new
		// ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		// }

		// 8. Obtem o percentual de entrada mínimo e taxa de juros por qtd de
		// prestações

		Collection<ParcelamentoQuantidadePrestacao> colecaoParcelamentoQuantidadePrestacao = null;
		if(parcelamentoQuantidadePrestacao != null){
			colecaoParcelamentoQuantidadePrestacao = new ArrayList<ParcelamentoQuantidadePrestacao>();
			colecaoParcelamentoQuantidadePrestacao.add(parcelamentoQuantidadePrestacao);

		}else{
			FiltroParcelamentoQuantidadePrestacao filtroParcelamentoQuantidadePrestacao = new FiltroParcelamentoQuantidadePrestacao(
							FiltroParcelamentoQuantidadePrestacao.TAXA_JUROS);

			filtroParcelamentoQuantidadePrestacao.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoQuantidadePrestacao.PARCELAMENTO_QUANTIDADE_REPARCELAMENTO,
							parcelamentoQuantidadeReparcelamento.getId()));
			filtroParcelamentoQuantidadePrestacao.setCampoOrderBy(FiltroParcelamentoQuantidadePrestacao.QUANTIDADE_MAXIMA_PRESTACAO);

			colecaoParcelamentoQuantidadePrestacao = getControladorUtil().pesquisar(filtroParcelamentoQuantidadePrestacao,
							ParcelamentoQuantidadePrestacao.class.getName());

		}

		// [FS0007] Verificar a existência das condições do parcelamento por
		// quantidade de prestações
		boolean temPermissaoParcelarNaoTestarQtdReparc = getControladorPermissaoEspecial().verificarPermissaoEspecial(
						PermissaoEspecial.PARCELAR_NAO_TESTAR_QTDE_DE_PRESTACAO, usuario);

		if(!temPermissaoParcelarNaoTestarQtdReparc
						&& (colecaoParcelamentoQuantidadePrestacao == null || colecaoParcelamentoQuantidadePrestacao.isEmpty())){
			throw new ControladorException("atencao.nao.existe.condicao.parcelamento.quantidade.prestacoes");
		}

		Object[] situacaoImovelPerfilParcelamento = new Object[3];
		situacaoImovelPerfilParcelamento[0] = parcelamentoPerfil;
		situacaoImovelPerfilParcelamento[1] = imovelSituacao;
		situacaoImovelPerfilParcelamento[2] = colecaoParcelamentoQuantidadePrestacao;

		return situacaoImovelPerfilParcelamento;
	}

	private Subcategoria obterSubCategoriaMaiorEconomia(Imovel imovel) throws ControladorException{

		Collection colecaoImovelSubCategoria = getControladorImovel().obterColecaoImovelSubcategorias(imovel, 1);

		Subcategoria subcategoria = null;

		if(colecaoImovelSubCategoria != null && !colecaoImovelSubCategoria.isEmpty()){
			Iterator iteretorImovelSubCategoria = colecaoImovelSubCategoria.iterator();
			int quantidadeEconomisas = 0;
			int maiorQuantidadeEconomisas = 0;

			while(iteretorImovelSubCategoria.hasNext()){
				ImovelSubcategoria imovelSubCategoria = (ImovelSubcategoria) iteretorImovelSubCategoria.next();
				quantidadeEconomisas = imovelSubCategoria.getQuantidadeEconomias();
				if(quantidadeEconomisas > maiorQuantidadeEconomisas){
					maiorQuantidadeEconomisas = quantidadeEconomisas;
					subcategoria = imovelSubCategoria.getComp_id().getSubcategoria();
				}
			}
		}
		return subcategoria;
	}

	/**
	 * Monta um mapa distribuindo os valores das contas informadas pelas respectivas categorias e
	 * itens
	 * contábeis, descontando proporcionalmente o valor de entrada caso haja. Caso haja
	 * acréscimos gerados pelo parcelamento atual, calcula e salva os valores pelas categorias
	 * de cada conta.
	 * 
	 * @param valorTotalContaValores
	 * @param valorEntrada
	 * @param valorCreditoARealizar
	 * @param colecaoContaValores
	 * @param indicadorAcrescimosImpotualidade
	 * @return
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Map<Categoria, Map<Integer, BigDecimal>> distribuirTotalContaPorCategoriaItemContabil(BigDecimal valorTotalContaValores,
					BigDecimal valorEntrada, BigDecimal valorCreditoARealizar, Collection<ContaValoresHelper> colecaoContaValores,
					String indicadorAcrescimosImpotualidade) throws ControladorException, ErroRepositorioException{

		Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = new HashMap<Categoria, Map<Integer, BigDecimal>>();
		Categoria filtro = new Categoria();

		if(valorTotalContaValores != null && !(valorTotalContaValores.compareTo(BigDecimal.ZERO) == 0)){
			BigDecimal valorContasAbatido = valorTotalContaValores.compareTo(valorEntrada) < 0 ? BigDecimal.ZERO : valorTotalContaValores
							.subtract(valorEntrada);

			BigDecimal valorAgua = BigDecimal.ZERO;
			BigDecimal valorEsgoto = BigDecimal.ZERO;
			BigDecimal valorRestante = BigDecimal.ZERO;
			BigDecimal valorTotal = BigDecimal.ZERO;

			// Acumula valores de água, esgoto e débito das contas selecionadas, descontando o valor
			// de entrada caso exista.
			for(ContaValoresHelper contaHelper : colecaoContaValores){

				// Carregando categorias da conta
				FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
				filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, contaHelper.getConta().getId()));
				filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.CONTA_CATEGORIA_HISTORICOS);
				Collection<ContaHistorico> colecaoContaHistorico = this.getControladorUtil().pesquisar(filtroContaHistorico,
								ContaHistorico.class.getName());

				if(!colecaoContaHistorico.isEmpty()){
					Collection<ContaCategoriaHistorico> contaCategoriasHistorico = colecaoContaHistorico.iterator().next()
									.getContaCategoriaHistoricos();

					// Carregando débitos cobrados categorias da conta
					Collection<DebitoCobradoCategoriaHistorico> colecaoDebitoCobradoCategoriaHistorico = repositorioFaturamento
									.buscarDebitoCobradoCategoriaHistoricoPorIdConta(contaHelper.getConta().getId());

					if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(contaHelper.getValorTotalConta()) < 0){
						// valor entrada diferente de Zero e
						// menor q o valor total de contas

						BigDecimal valorConta = contaHelper.getValorTotalConta().subtract(valorEntrada);
						// Subtrai do valor da conta o valor do credito.
						valorConta = valorConta.subtract(valorCreditoARealizar);
						valorEntrada = BigDecimal.ZERO;
						valorTotal = valorTotal.add(valorConta);

						// Calcula valor proporcional de água, esgoto e débitos para o resíduo da
						// conta
						// não coberto pelo valor da entrada.
						BigDecimal fator = valorConta.divide(contaHelper.getValorTotalConta(), 2, BigDecimal.ROUND_DOWN);

						BigDecimal valorCategoria = BigDecimal.ZERO;

						// Povoando valores dos itens contábeis de água e esgoto das contas por
						// categoria.
						for(ContaCategoriaHistorico contaCategoria : contaCategoriasHistorico){
							filtro.setId(contaCategoria.getComp_id().getCategoria().getId());

							if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
								Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();

								// Povoando valor de água, caso exista.
								if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
									valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);

									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);

								}


								// Povoando valor de esgoto, caso exista.
								if(contaCategoria.getValorEsgoto() != null
												&& contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
									valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
									
									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);
								}


								mapaCategoriaItensContabeisValor.put(new Categoria(contaCategoria.getComp_id().getCategoria().getId(),
												(int) contaCategoria.getQuantidadeEconomia()), mapaItensValor);
							}else{
								Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

								// Acumulando valor de água, caso exista.
								if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
									if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_AGUA)){
										valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN)
														.add(mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_AGUA));
									}else{
										valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
									}

									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);
								}


								// Acumulando valor de esgoto, caso exista.
								if(contaCategoria.getValorEsgoto() != null
												&& contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
									if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
										valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN)
														.add(mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_ESGOTO));
									}else{
										valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
									}
									
									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);
								}

							}
						}

						// Povoando valores dos itens contábeis dos débitos cobrados por categoria.
						for(DebitoCobradoCategoriaHistorico debitoCobradoCategoria : colecaoDebitoCobradoCategoriaHistorico){
							filtro.setId(debitoCobradoCategoria.getComp_id().getCategoria().getId());

							if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
								Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
								mapaItensValor.put(
												debitoCobradoCategoria.getDebitoCobradoHistorico().getLancamentoItemContabil().getId(),
												debitoCobradoCategoria.getValorCategoria().multiply(fator)
																.setScale(2, BigDecimal.ROUND_DOWN));
								mapaCategoriaItensContabeisValor.put(new Categoria(debitoCobradoCategoria.getComp_id().getCategoria()
												.getId(), debitoCobradoCategoria.getQuantidadeEconomia()), mapaItensValor);
							}else{
								Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

								if(mapaItensValor.containsKey(debitoCobradoCategoria.getDebitoCobradoHistorico()
												.getLancamentoItemContabil().getId())){
									valorCategoria = debitoCobradoCategoria
													.getValorCategoria()
													.multiply(fator)
													.setScale(2, BigDecimal.ROUND_DOWN)
													.add(mapaItensValor.get(debitoCobradoCategoria.getDebitoCobradoHistorico()
																	.getLancamentoItemContabil().getId()));
								}else{
									valorCategoria = debitoCobradoCategoria.getValorCategoria().multiply(fator)
													.setScale(2, BigDecimal.ROUND_DOWN);
								}
								mapaItensValor.put(debitoCobradoCategoria.getDebitoCobradoHistorico().getLancamentoItemContabil().getId(),
												valorCategoria);
							}
						}

					}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(contaHelper.getValorTotalConta()) == 0){
						// valor entrada diferente de Zero e
						// valor entrada igual a valor total de contas

						valorEntrada = BigDecimal.ZERO;

					}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(contaHelper.getValorTotalConta()) > 0){
						// valor entrada diferente de Zero e
						// valor entrada maior q o valor total de contas

						valorEntrada = valorEntrada.subtract(contaHelper.getValorTotalConta());

					}else if(valorEntrada.compareTo(BigDecimal.ZERO) == 0){
						// acumula valores totais da conta caso não haja mais valor de entrada a
						// compensar.

						valorTotal = valorTotal.add(contaHelper.getValorTotalConta());

						BigDecimal valorCategoria = BigDecimal.ZERO;
						for(ContaCategoriaHistorico contaCategoria : contaCategoriasHistorico){
							filtro.setId(contaCategoria.getComp_id().getCategoria().getId());

							if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
								Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();

								// Povoando valor de água, caso exista.
								if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, contaCategoria.getValorAgua());
								}

								// Povoando valor de esgoto, caso exista.
								if(contaCategoria.getValorEsgoto() != null
												&& contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, contaCategoria.getValorEsgoto());
								}

								mapaCategoriaItensContabeisValor.put(new Categoria(contaCategoria.getComp_id().getCategoria().getId(),
												(int) contaCategoria.getQuantidadeEconomia()), mapaItensValor);
							}else{
								Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

								// Acumulando valor de água, caso exista.
								if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
									if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_AGUA)){
										valorCategoria = contaCategoria.getValorAgua().add(
														mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_AGUA));
									}else{
										valorCategoria = contaCategoria.getValorAgua();
									}

									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);
								}


								// Acumulando valor de esgoto, caso exista.
								if(contaCategoria.getValorEsgoto() != null
												&& contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
									if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
										valorCategoria = contaCategoria.getValorEsgoto().add(
														mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_ESGOTO));
									}else{
										valorCategoria = contaCategoria.getValorEsgoto();
									}
									mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);
								}

							}
						}

						// Povoando valores dos itens contábeis dos débitos cobrados por categoria.
						for(DebitoCobradoCategoriaHistorico debitoCobradoCategoria : colecaoDebitoCobradoCategoriaHistorico){
							filtro.setId(debitoCobradoCategoria.getComp_id().getCategoria().getId());

							if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
								Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
								mapaItensValor.put(debitoCobradoCategoria.getDebitoCobradoHistorico().getLancamentoItemContabil().getId(),
												debitoCobradoCategoria.getValorCategoria());
								mapaCategoriaItensContabeisValor.put(new Categoria(debitoCobradoCategoria.getComp_id().getCategoria()
												.getId(), debitoCobradoCategoria.getQuantidadeEconomia()), mapaItensValor);
							}else{
								Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

								if(mapaItensValor.containsKey(debitoCobradoCategoria.getDebitoCobradoHistorico()
												.getLancamentoItemContabil().getId())){
									valorCategoria = debitoCobradoCategoria.getValorCategoria().add(
													mapaItensValor.get(debitoCobradoCategoria.getDebitoCobradoHistorico()
																	.getLancamentoItemContabil().getId()));
								}else{
									valorCategoria = debitoCobradoCategoria.getValorCategoria();
								}
								mapaItensValor.put(debitoCobradoCategoria.getDebitoCobradoHistorico().getLancamentoItemContabil().getId(),
												valorCategoria);
							}
						}
					}

					// Distribui o acréscimo por impontualidade por categoria caso ele seja
					// considerado
					// no parcelamento
					if("1".equals(indicadorAcrescimosImpotualidade)){
						// Obtém as categorias dessa conta.
						List<Categoria> colecaoCategoriasObterValor = new ArrayList();

						for(ContaCategoriaHistorico contaCategoria : contaCategoriasHistorico){
							Categoria categoria = new Categoria();
							categoria.setId(contaCategoria.getComp_id().getCategoria().getId());
							categoria.setQuantidadeEconomiasCategoria((int) contaCategoria.getQuantidadeEconomia());
							colecaoCategoriasObterValor.add(categoria);
						}

						// Obter os valores para cada categoria ordenados pelo id da categoria.
						Collection<BigDecimal> colecaoCategoriasValor = getControladorImovel().obterValorPorCategoria(
										colecaoCategoriasObterValor, contaHelper.getValorTotalContaValoresParcelamento());

						Iterator<BigDecimal> iteratorValor = colecaoCategoriasValor.iterator();
						BigDecimal valorCategoria = BigDecimal.ZERO;
						for(Categoria categoria : colecaoCategoriasObterValor){

							// Salva ou acumula no mapa o valor do acréscimo por cateoria e item
							// contábil.
							if(!mapaCategoriaItensContabeisValor.containsKey(categoria)){
								Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
								mapaItensValor.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, iteratorValor.next());
								mapaCategoriaItensContabeisValor.put(categoria, mapaItensValor);
							}else{
								Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(categoria);

								if(mapaItensValor.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
									valorCategoria = iteratorValor.next().add(
													mapaItensValor.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE));
								}else{
									valorCategoria = iteratorValor.next();
								}
								mapaItensValor.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);
							}
						}
					}
				}
				// Caso a conta seja EP(entrada de parcelamento) ou NB(não baixa) não considerar
				// para a distribuição de valores
				// e ajustar o valor da entrada.
				else{
					valorEntrada = valorEntrada.subtract(contaHelper.getValorTotalConta());
				}

			}

			// Verifica se resta valor de conta a ser incluído como débito do parcelamento.
			if(valorContasAbatido.compareTo(BigDecimal.ZERO) != 0){
				Categoria menorCategoriaAgua = new Categoria(Integer.MAX_VALUE);
				Categoria menorCategoriaEsgoto = new Categoria(Integer.MAX_VALUE);
				Categoria menorCategoriaRestante = new Categoria(Integer.MAX_VALUE);
				Integer menorIdItemContabilRestante = Integer.MAX_VALUE;

				// Calcula totais de água, esgoto e débito.
				for(Categoria categoria : mapaCategoriaItensContabeisValor.keySet()){
					Map<Integer, BigDecimal> itens = mapaCategoriaItensContabeisValor.get(categoria);

					for(Integer idItemContabil : itens.keySet()){
						if(idItemContabil.equals(LancamentoItemContabil.TARIFA_DE_AGUA)){
							valorAgua = valorAgua.add(itens.get(idItemContabil));
							menorCategoriaAgua = categoria.getId() < menorCategoriaAgua.getId() ? categoria : menorCategoriaAgua;
						}else if(idItemContabil.equals(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
							valorEsgoto = valorEsgoto.add(itens.get(idItemContabil));
							menorCategoriaEsgoto = categoria.getId() < menorCategoriaEsgoto.getId() ? categoria : menorCategoriaEsgoto;
						}else if(!idItemContabil.equals(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
							valorRestante = valorRestante.add(itens.get(idItemContabil));
							menorCategoriaRestante = categoria.getId() < menorCategoriaRestante.getId() ? categoria
											: menorCategoriaRestante;
						}
					}
				}

				if(valorRestante.compareTo(BigDecimal.ZERO) != 0){
					Map<Integer, BigDecimal> itens = mapaCategoriaItensContabeisValor.get(menorCategoriaRestante);
					for(Integer idItemContabil : itens.keySet()){
						if(!idItemContabil.equals(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
							menorIdItemContabilRestante = idItemContabil < menorIdItemContabilRestante ? idItemContabil
											: menorIdItemContabilRestante;
						}
					}
				}

				BigDecimal diferenca = valorTotal.subtract(valorAgua.add(valorEsgoto.add(valorRestante)));

				// Adicionando diferença entre o total e o somatórios dos totais de Água, Esgoto e
				// Debitos, caso exista.
				if(diferenca.compareTo(BigDecimal.ZERO) != 0){
					// no valor da água.
					if(valorAgua.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaAgua).put(
										LancamentoItemContabil.TARIFA_DE_AGUA,
										mapaCategoriaItensContabeisValor.get(menorCategoriaAgua).get(LancamentoItemContabil.TARIFA_DE_AGUA)
														.add(diferenca));
					}
					// no valor do esgoto, caso não tenha água.
					else if(valorEsgoto.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaEsgoto).put(
										LancamentoItemContabil.TARIFA_DE_ESGOTO,
										mapaCategoriaItensContabeisValor.get(menorCategoriaEsgoto)
														.get(LancamentoItemContabil.TARIFA_DE_ESGOTO).add(diferenca));
					}
					// no valor dos débito, caso não tenha água nem esgoto.
					else if(valorRestante.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaRestante).put(
										menorIdItemContabilRestante,
										mapaCategoriaItensContabeisValor.get(menorCategoriaRestante).get(menorIdItemContabilRestante)
														.add(diferenca));
					}
				}
			}
		}

		// Mapa com os totais de água, esgoto, débitos e acréscimos das contas parceladas
		// distribuídos por Categoria e LancamentoItemContabil.
		return mapaCategoriaItensContabeisValor;
	}

	/**
	 * Monta um mapa distribuindo os valores das contas informadas pelas respectivas categorias e
	 * itens
	 * contábeis, descontando proporcionalmente o valor de entrada caso haja. Caso haja
	 * acréscimos gerados pelo parcelamento atual, calcula e salva os valores pelas categorias
	 * de cada guia de pagamento.
	 * 
	 * @param valorTotalGuiasPagamento
	 * @param valorEntrada
	 * @param colecaoGuiaPagamentoValores
	 * @param indicadorAcrescimosImpotualidade
	 * @return
	 * @throws ControladorException
	 */
	private Map<Categoria, Map<Integer, BigDecimal>> distribuirTotalGuiaPagamentoPorCategoriaItemContabil(
					BigDecimal valorTotalGuiasPagamento, BigDecimal valorEntrada,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, String indicadorAcrescimosImpotualidade)
					throws ControladorException{

		Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = new HashMap<Categoria, Map<Integer, BigDecimal>>();
		Categoria filtro = new Categoria();

		if(valorTotalGuiasPagamento != null && !(valorTotalGuiasPagamento.compareTo(BigDecimal.ZERO) == 0)){
			BigDecimal valorAbatido = valorTotalGuiasPagamento.compareTo(valorEntrada) < 0 ? BigDecimal.ZERO : valorTotalGuiasPagamento
							.subtract(valorEntrada);

			BigDecimal valorCalculado = BigDecimal.ZERO;
			BigDecimal valorTotal = BigDecimal.ZERO;

			// Acumula valores de água, esgoto e débito das contas selecionadas, descontando o valor
			// de entrada caso exista.
			for(GuiaPagamentoValoresHelper guiaHelper : colecaoGuiaPagamentoValores){

				// Carregando categorias da conta
				FiltroGuiaPagamentoHistorico filtroGuiaPagamentoHistorico = new FiltroGuiaPagamentoHistorico();
				filtroGuiaPagamentoHistorico.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoHistorico.ID, guiaHelper
								.getIdGuiaPagamento()));
				filtroGuiaPagamentoHistorico
								.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoHistorico.GUIAS_PAGAMENTO_CATEGORIA_HISTORICO);
				Collection<GuiaPagamentoHistorico> colecaoGuiaPagamentoHistorico = this.getControladorUtil().pesquisar(
								filtroGuiaPagamentoHistorico, GuiaPagamentoHistorico.class.getName());

				Collection<GuiaPagamentoCategoriaHistorico> guiaPagamentoCategoriaHistoricos = colecaoGuiaPagamentoHistorico.iterator()
								.next().getGuiasPagamentoCategoriaHistorico();

				if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(guiaHelper.getValorTotalPrestacao()) < 0){
					// valor entrada diferente de Zero e
					// menor q o valor total de contas

					BigDecimal valorGuias = guiaHelper.getValorTotalPrestacao().subtract(valorEntrada);

					valorEntrada = BigDecimal.ZERO;
					valorTotal = valorTotal.add(valorGuias);

					// Calcula valor proporcional de água, esgoto e débitos para o resíduo da conta
					// não coberto pelo valor da entrada.
					BigDecimal fator = valorGuias.divide(guiaHelper.getValorTotalPrestacao(), 2, BigDecimal.ROUND_DOWN);

					BigDecimal valorCategoria = BigDecimal.ZERO;

					for(GuiaPagamentoCategoriaHistorico guiaCategoria : guiaPagamentoCategoriaHistoricos){
						filtro.setId(guiaCategoria.getComp_id().getCategoriaId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(guiaCategoria.getLancamentoItemContabil().getId(), guiaCategoria.getValorCategoria()
											.multiply(fator).setScale(2, BigDecimal.ROUND_DOWN));

							mapaCategoriaItensContabeisValor.put(
											new Categoria(guiaCategoria.getComp_id().getCategoriaId(), guiaCategoria
															.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(guiaCategoria.getLancamentoItemContabil().getId())){
								valorCategoria = guiaCategoria.getValorCategoria().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN)
												.add(mapaItensValor.get(guiaCategoria.getLancamentoItemContabil().getId()));
							}else{
								valorCategoria = guiaCategoria.getValorCategoria().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
							}
							mapaItensValor.put(guiaCategoria.getLancamentoItemContabil().getId(), valorCategoria);
						}
					}

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(guiaHelper.getValorTotalPrestacao()) == 0){
					// valor entrada diferente de Zero e
					// valor entrada igual a valor total de contas

					valorEntrada = BigDecimal.ZERO;

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(guiaHelper.getValorTotalPrestacao()) > 0){
					// valor entrada diferente de Zero e
					// valor entrada maior q o valor total de contas

					valorEntrada = valorEntrada.subtract(guiaHelper.getValorTotalPrestacao());

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) == 0){
					// acumula valores totais da conta caso não haja mais valor de entrada a
					// compensar.

					valorTotal = valorTotal.add(guiaHelper.getValorTotalPrestacao());

					BigDecimal valorCategoria = BigDecimal.ZERO;

					for(GuiaPagamentoCategoriaHistorico guiaCategoria : guiaPagamentoCategoriaHistoricos){
						filtro.setId(guiaCategoria.getComp_id().getCategoriaId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(guiaCategoria.getLancamentoItemContabil().getId(), guiaCategoria.getValorCategoria());
							mapaCategoriaItensContabeisValor.put(
											new Categoria(guiaCategoria.getComp_id().getCategoriaId(), guiaCategoria
															.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(guiaCategoria.getLancamentoItemContabil().getId())){
								valorCategoria = guiaCategoria.getValorCategoria().add(
												mapaItensValor.get(guiaCategoria.getLancamentoItemContabil().getId()));
							}else{
								valorCategoria = guiaCategoria.getValorCategoria();
							}
							mapaItensValor.put(guiaCategoria.getLancamentoItemContabil().getId(), valorCategoria);
						}
					}
				}

				// Distribui o acréscimo por impontualidade por categoria caso ele seja considerado
				// no parcelamento
				if("1".equals(indicadorAcrescimosImpotualidade)){
					// Obtém as categorias dessa guia.
					List<Categoria> colecaoCategoriasObterValor = new ArrayList();

					for(GuiaPagamentoCategoriaHistorico guiaCategoria : guiaPagamentoCategoriaHistoricos){
						Categoria categoria = new Categoria();
						categoria.setId(guiaCategoria.getComp_id().getCategoriaId());
						categoria.setQuantidadeEconomiasCategoria(guiaCategoria.getQuantidadeEconomia());
						colecaoCategoriasObterValor.add(categoria);
					}

					// Obter os valores para cada categoria ordenados pelo id da categoria.
					Collection<BigDecimal> colecaoCategoriasValor = getControladorImovel().obterValorPorCategoria(
									colecaoCategoriasObterValor, guiaHelper.getValorAcrescimosImpontualidade());

					Iterator<BigDecimal> iteratorValor = colecaoCategoriasValor.iterator();
					BigDecimal valorCategoria = BigDecimal.ZERO;

					for(Categoria categoria : colecaoCategoriasObterValor){

						// Salva ou acumula no mapa o valor do acréscimo por cateoria e item
						// contábil.
						if(!mapaCategoriaItensContabeisValor.containsKey(categoria)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, iteratorValor.next());
							mapaCategoriaItensContabeisValor.put(categoria, mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(categoria);

							if(mapaItensValor.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
								valorCategoria = iteratorValor.next().add(
												mapaItensValor.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE));
							}else{
								valorCategoria = iteratorValor.next();
							}
							mapaItensValor.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);
						}
					}
				}

			}

			// Verifica se resta valor de conta a ser incluído como débito do parcelamento.
			if(valorAbatido.compareTo(BigDecimal.ZERO) != 0){
				Categoria menorCategoria = new Categoria(Integer.MAX_VALUE);
				Integer menorIdItemContabil = Integer.MAX_VALUE;

				// Calcula total pelo povoamento do mapa de valores.
				for(Categoria categoria : mapaCategoriaItensContabeisValor.keySet()){
					Map<Integer, BigDecimal> itens = mapaCategoriaItensContabeisValor.get(categoria);

					for(Integer idItemContabil : itens.keySet()){
						if(!idItemContabil.equals(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
							valorCalculado = valorCalculado.add(itens.get(idItemContabil));
							menorCategoria = categoria.getId() < menorCategoria.getId() ? categoria : menorCategoria;
							menorIdItemContabil = idItemContabil < menorIdItemContabil ? idItemContabil : menorIdItemContabil;
						}
					}
				}

				BigDecimal diferenca = valorTotal.subtract(valorCalculado);

				// Adicionando diferença caso exista
				if(diferenca.compareTo(BigDecimal.ZERO) != 0){
					if(valorCalculado.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoria).put(menorIdItemContabil,
										mapaCategoriaItensContabeisValor.get(menorCategoria).get(menorIdItemContabil).add(diferenca));
					}
				}
			}
		}

		return mapaCategoriaItensContabeisValor;
	}

	/**
	 * Monta um mapa distribuindo os valores dos débitos a cobrar informados pelas respectivas
	 * categorias e itens
	 * contábeis, descontando proporcionalmente o valor de entrada caso haja.
	 * 
	 * @param valorTotalDebitosACobrar
	 * @param valorEntrada
	 * @param colecaoDebitoACobrar
	 * @return
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Map<Categoria, Map<Integer, BigDecimal>> distribuirTotalDebitoACobrarPorCategoriaItemContabil(
					BigDecimal valorTotalDebitosACobrar, BigDecimal valorEntrada, Collection<DebitoACobrar> colecaoDebitoACobrar)
					throws ControladorException, ErroRepositorioException{

		Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = new HashMap<Categoria, Map<Integer, BigDecimal>>();
		Categoria filtro = new Categoria();

		if(valorTotalDebitosACobrar != null && !(valorTotalDebitosACobrar.compareTo(BigDecimal.ZERO) == 0)){
			BigDecimal valorAbatido = valorTotalDebitosACobrar.compareTo(valorEntrada) < 0 ? BigDecimal.ZERO : valorTotalDebitosACobrar
							.subtract(valorEntrada);

			BigDecimal valorCalculado = BigDecimal.ZERO;
			BigDecimal valorTotal = BigDecimal.ZERO;

			// Acumula valores de água, esgoto e débito das contas selecionadas, descontando o valor
			// de entrada caso exista.
			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){

				// Carregando categorias do débito.
				DebitoACobrarHistorico debitoACobrarHistorico = new DebitoACobrarHistorico();
				debitoACobrarHistorico.setId(debitoACobrar.getId());
				debitoACobrarHistorico = repositorioFaturamento.pesquisarDebitoACobrarHistorico(debitoACobrarHistorico);
				Collection<DebitoACobrarCategoriaHistorico> debitoACobrarCategoriasHistorico = debitoACobrarHistorico
								.getDebitoACobrarCategoriasHistorico();

				if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(debitoACobrar.getValorDebito()) < 0){
					// valor entrada diferente de Zero e
					// menor q o valor total de contas

					BigDecimal valorDebito = debitoACobrar.getValorDebito().subtract(valorEntrada);
					valorEntrada = BigDecimal.ZERO;
					valorTotal = valorTotal.add(valorDebito);

					// Calcula valor proporcional de água, esgoto e débitos para o resíduo da conta
					// não coberto pelo valor da entrada.
					BigDecimal fator = valorDebito.divide(debitoACobrar.getValorDebito(), 2, BigDecimal.ROUND_DOWN);

					BigDecimal valorCategoria = BigDecimal.ZERO;

					for(DebitoACobrarCategoriaHistorico debitoCategoriaHistorico : debitoACobrarCategoriasHistorico){
						filtro.setId(debitoCategoriaHistorico.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil().getId(),
											debitoCategoriaHistorico.getValorCategoria().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN));

							mapaCategoriaItensContabeisValor.put(
											new Categoria(debitoCategoriaHistorico.getComp_id().getCategoria().getId(),
															debitoCategoriaHistorico.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil()
											.getId())){
								valorCategoria = debitoCategoriaHistorico
												.getValorCategoria()
												.multiply(fator)
												.setScale(2, BigDecimal.ROUND_DOWN)
												.add(mapaItensValor.get(debitoCategoriaHistorico.getDebitoACobrarHistorico()
																.getLancamentoItemContabil().getId()));
							}else{
								valorCategoria = debitoCategoriaHistorico.getValorCategoria().multiply(fator)
												.setScale(2, BigDecimal.ROUND_DOWN);
							}
							mapaItensValor.put(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil().getId(),
											valorCategoria);
						}
					}

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(debitoACobrar.getValorDebito()) == 0){
					// valor entrada diferente de Zero e
					// valor entrada igual a valor total de contas

					valorEntrada = BigDecimal.ZERO;

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(debitoACobrar.getValorDebito()) > 0){
					// valor entrada diferente de Zero e
					// valor entrada maior q o valor total de contas

					valorEntrada = valorEntrada.subtract(debitoACobrar.getValorDebito());

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) == 0){
					// acumula valores totais da conta caso não haja mais valor de entrada a
					// compensar.

					valorTotal = valorTotal.add(debitoACobrar.getValorDebito());

					BigDecimal valorCategoria = BigDecimal.ZERO;

					for(DebitoACobrarCategoriaHistorico debitoCategoriaHistorico : debitoACobrarCategoriasHistorico){
						filtro.setId(debitoCategoriaHistorico.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil().getId(),
											debitoCategoriaHistorico.getValorCategoria());

							mapaCategoriaItensContabeisValor.put(
											new Categoria(debitoCategoriaHistorico.getComp_id().getCategoria().getId(),
															debitoCategoriaHistorico.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil()
											.getId())){
								valorCategoria = debitoCategoriaHistorico.getValorCategoria().add(
												mapaItensValor.get(debitoCategoriaHistorico.getDebitoACobrarHistorico()
																.getLancamentoItemContabil().getId()));
							}else{
								valorCategoria = debitoCategoriaHistorico.getValorCategoria();
							}
							mapaItensValor.put(debitoCategoriaHistorico.getDebitoACobrarHistorico().getLancamentoItemContabil().getId(),
											valorCategoria);
						}
					}
				}
			}

			// Verifica se resta valor de conta a ser incluído como débito do parcelamento.
			if(valorAbatido.compareTo(BigDecimal.ZERO) != 0){

				Categoria menorCategoria = new Categoria(Integer.MAX_VALUE);
				Integer menorIdItemContabil = Integer.MAX_VALUE;

				// Calcula total de débito.
				for(Categoria categoria : mapaCategoriaItensContabeisValor.keySet()){
					Map<Integer, BigDecimal> itens = mapaCategoriaItensContabeisValor.get(categoria);

					for(Integer idItemContabil : itens.keySet()){
						valorCalculado = valorCalculado.add(itens.get(idItemContabil));
						menorCategoria = categoria.getId() < menorCategoria.getId() ? categoria : menorCategoria;
						menorIdItemContabil = idItemContabil < menorIdItemContabil ? idItemContabil : menorIdItemContabil;
					}
				}

				BigDecimal diferenca = valorTotal.subtract(valorCalculado);

				// Adicionando diferença caso exista
				if(diferenca.compareTo(BigDecimal.ZERO) != 0){
					if(valorCalculado.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoria).put(menorIdItemContabil,
										mapaCategoriaItensContabeisValor.get(menorCategoria).get(menorIdItemContabil).add(diferenca));
					}
				}
			}
		}

		return mapaCategoriaItensContabeisValor;
	}

	/**
	 * Monta um mapa com os valores de acréscimo de impontualidade referentes ao parcelamento atual
	 * das contas e guias de pagamento informadas.
	 * 
	 * @param valorTotalAcrescimosImpontualidade
	 * @param valorEntrada
	 * @param mapaContaCategoriaItensContabeisValor
	 * @param mapaGuiaCategoriaItensContabeisValor
	 * @return
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Map<Categoria, Map<Integer, BigDecimal>> distribuirTotalAcrescimosPorCategoriaItemContabil(
					BigDecimal valorTotalAcrescimosImpontualidade, BigDecimal valorEntrada,
					Map<Categoria, Map<Integer, BigDecimal>> mapaContaCategoriaItensContabeisValor,
					Map<Categoria, Map<Integer, BigDecimal>> mapaGuiaCategoriaItensContabeisValor) throws ControladorException,
					ErroRepositorioException{

		Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = new HashMap<Categoria, Map<Integer, BigDecimal>>();

		if(valorTotalAcrescimosImpontualidade != null && !(valorTotalAcrescimosImpontualidade.compareTo(BigDecimal.ZERO) == 0)){
			BigDecimal valorAbatido = valorTotalAcrescimosImpontualidade.compareTo(valorEntrada) <= 0 ? BigDecimal.ZERO
							: valorTotalAcrescimosImpontualidade.subtract(valorEntrada);

			// Verifica se resta valor de conta a ser incluído como débito do parcelamento.
			if(valorAbatido.compareTo(BigDecimal.ZERO) != 0){

				// Calcula valor proporcional para o resíduo do acréscimo
				// não coberto pelo valor da entrada.
				BigDecimal fator = BigDecimal.ONE;

				if(valorAbatido.compareTo(valorTotalAcrescimosImpontualidade) != 0){
					fator = valorAbatido.divide(valorTotalAcrescimosImpontualidade, 2, BigDecimal.ROUND_DOWN);
				}

				BigDecimal valorCalculado = BigDecimal.ZERO;
				BigDecimal valorCategoria = BigDecimal.ZERO;
				Categoria menorCategoria = new Categoria(Integer.MAX_VALUE);

				// Transferindo e ajustando valores de acréscimos de contas.
				if(mapaContaCategoriaItensContabeisValor != null){
					for(Categoria categoria : mapaContaCategoriaItensContabeisValor.keySet()){
						Map<Integer, BigDecimal> itens = mapaContaCategoriaItensContabeisValor.get(categoria);

						if(itens.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
							valorCategoria = itens.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE).multiply(fator)
											.setScale(2, BigDecimal.ROUND_DOWN);
							valorCalculado = valorCalculado.add(valorCategoria);
							menorCategoria = categoria.getId() < menorCategoria.getId() ? categoria : menorCategoria;

							if(!mapaCategoriaItensContabeisValor.containsKey(categoria)){
								Map<Integer, BigDecimal> itensContabeis = new HashMap<Integer, BigDecimal>();
								itensContabeis.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);

								mapaCategoriaItensContabeisValor.put(categoria, itensContabeis);
							}else{
								Map<Integer, BigDecimal> itensContabeis = mapaCategoriaItensContabeisValor.get(categoria);

								if(itensContabeis.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
									valorCategoria = valorCategoria.add(itensContabeis
													.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE));
								}
								itensContabeis.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);
							}

							itens.remove(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE);
						}
					}
				}

				// Transferindo e ajustando acréscimos de guias de pagamento.
				if(mapaGuiaCategoriaItensContabeisValor != null){
					for(Categoria categoria : mapaGuiaCategoriaItensContabeisValor.keySet()){
						Map<Integer, BigDecimal> itens = mapaGuiaCategoriaItensContabeisValor.get(categoria);

						if(itens.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
							valorCategoria = itens.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE).multiply(fator)
											.setScale(2, BigDecimal.ROUND_DOWN);
							valorCalculado = valorCalculado.add(valorCategoria);
							menorCategoria = categoria.getId() < menorCategoria.getId() ? categoria : menorCategoria;

							if(!mapaCategoriaItensContabeisValor.containsKey(categoria)){
								Map<Integer, BigDecimal> itensContabeis = new HashMap<Integer, BigDecimal>();
								itensContabeis.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);

								mapaCategoriaItensContabeisValor.put(categoria, itensContabeis);
							}else{
								Map<Integer, BigDecimal> itensContabeis = mapaCategoriaItensContabeisValor.get(categoria);

								if(itensContabeis.containsKey(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE)){
									valorCategoria = valorCategoria.add(itensContabeis
													.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE));
								}
								itensContabeis.put(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE, valorCategoria);
							}

							itens.remove(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE);
						}
					}
				}

				BigDecimal diferenca = valorAbatido.subtract(valorCalculado);

				// Adicionando diferença caso exista
				if(diferenca.compareTo(BigDecimal.ZERO) != 0 && !mapaCategoriaItensContabeisValor.isEmpty()){
					if(mapaCategoriaItensContabeisValor.get(menorCategoria) != null){
						mapaCategoriaItensContabeisValor.get(menorCategoria).put(
										LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE,
										mapaCategoriaItensContabeisValor.get(menorCategoria)
														.get(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE).add(diferenca));
					}
				}
			}
		}

		return mapaCategoriaItensContabeisValor;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Gera os Débitos a Cobrar do Parcelamento
	 * [SB0005] - Gerar Débitos a Cobrar do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * @param valorEntrada
	 * @author Isaac Silva
	 * @date 22/08/2011
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	public void gerarDebitosACobrarParcelamento(
					Imovel imovel,
					Short numeroPrestacao,
					BigDecimal taxaJuros,
					Integer parcelamentoId,
					Collection<Categoria> colecaoCategoria,
					Map<Integer, BigDecimal> mapeamentoJurosParcelamento,
					Integer numeroMesesEntreParcelas,
					Integer numeroParcelasALancar,
					Integer numeroMesesInicioCobranca,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaConta,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaGuiaPagamento,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaDebitoACobrar,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaAcrescimoImpontualidade,
					Map<Integer, BigDecimal> mapaCreditoRealizadoItemContabil, Short indicadorTotalRemuneracaoCobrancaAdm)
					throws ControladorException, ErroRepositorioException{

		// ***********************************************************
		// 1. Parcelamento de Contas
		// ***********************************************************
		if(mapaListaAcumuladaConta != null && !mapaListaAcumuladaConta.isEmpty()){
			for(Integer chaveDebitoTipo : mapaListaAcumuladaConta.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaConta
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());

					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui o débito a cobrar para Parcelamento de Contas
					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, mapaValoresPorCategoria, taxaJuros, parcelamentoId,
									ParcelamentoGrupo.DOCUMENTOS_EMITIDOS, DebitoCreditoSituacao.NORMAL, true, numeroMesesEntreParcelas,
									numeroParcelasALancar, numeroMesesInicioCobranca, indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm());
				}
			}
		}

		// ***********************************************************
		// 2. Parcelamento de Guias de Pagamento
		// ***********************************************************
		if(mapaListaAcumuladaGuiaPagamento != null && !mapaListaAcumuladaGuiaPagamento.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaGuiaPagamento.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaGuiaPagamento
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui o débito a cobrar para Parcelamento de Guias de Pagamento
					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, mapaValoresPorCategoria, taxaJuros, parcelamentoId,
									ParcelamentoGrupo.DOCUMENTOS_EMITIDOS, DebitoCreditoSituacao.NORMAL, true, numeroMesesEntreParcelas,
									numeroParcelasALancar, numeroMesesInicioCobranca, indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm());
				}
			}
		}

		// ***********************************************************
		// 3. Parcelamento de Acrescimos por Impontualidade
		// ***********************************************************

		if(mapaListaAcumuladaAcrescimoImpontualidade != null && !mapaListaAcumuladaAcrescimoImpontualidade.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaAcrescimoImpontualidade.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaAcrescimoImpontualidade
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui o débito a cobrar para Parcelamento de Guias de Pagamento
					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, mapaValoresPorCategoria, taxaJuros, parcelamentoId,
									ParcelamentoGrupo.FINANCIAMENTOS_A_COBRAR_CURTO_PRAZO, DebitoCreditoSituacao.NORMAL, true,
									numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca,
									indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm());
				}
			}
		}

		// ***********************************************************
		// 4. Parcelamento de Debitos a Cobrar Financiamento
		// ***********************************************************
		if(mapaListaAcumuladaDebitoACobrar != null && !mapaListaAcumuladaDebitoACobrar.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaDebitoACobrar.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Integer parcelamentoGrupo = null;
				if(chaveDebitoTipo.equals(Integer.valueOf(ParametroParcelamento.P_TIPO_DEBITO_PARCELAMENTO_FINANCIAMENTO.executar()))){
					parcelamentoGrupo = ParcelamentoGrupo.FINANCIAMENTOS_A_COBRAR_CURTO_PRAZO;
				}else{
					parcelamentoGrupo = ParcelamentoGrupo.PARCELAMENTOS_A_COBRAR_CURTO_PRAZO;
				}

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaDebitoACobrar
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui o débito a cobrar para Parcelamento de Guias de Pagamento
					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, mapaValoresPorCategoria, taxaJuros, parcelamentoId,
									parcelamentoGrupo, DebitoCreditoSituacao.NORMAL, true, numeroMesesEntreParcelas, numeroParcelasALancar,
									numeroMesesInicioCobranca, indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm());
				}
			}
		}

		// ***********************************************************
		// 6. Juros sobre Parcelamento
		// ***********************************************************

		if(!Util.isVazioOuBranco(mapeamentoJurosParcelamento)){

			for(Integer chaveDebitoTipo : mapeamentoJurosParcelamento.keySet()){

				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);
				BigDecimal valorJuros = mapeamentoJurosParcelamento.get(chaveDebitoTipo);

				// Juros sobre Parcelamento
				Map<Categoria, BigDecimal> valorJurosPorCategoria = distribuirJurosParcelamentoPorCategoria(colecaoCategoria, valorJuros);

				inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, valorJurosPorCategoria, taxaJuros, parcelamentoId,
								ParcelamentoGrupo.JUROS_COBRADOS, DebitoCreditoSituacao.NORMAL, true, numeroMesesEntreParcelas,
								numeroParcelasALancar, numeroMesesInicioCobranca, indicadorTotalRemuneracaoCobrancaAdm,
								ConstantesSistema.NAO);

			}
		}

		// ***********************************************************
		// 7. Credito Realizado
		// ***********************************************************

		if(!Util.isVazioOuBranco(mapaCreditoRealizadoItemContabil)){

			for(Integer chaveDebitoTipo : mapaCreditoRealizadoItemContabil.keySet()){

				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				BigDecimal valorEstorno = mapaCreditoRealizadoItemContabil.get(chaveDebitoTipo);

				// eston Parcelamento
				Map<Categoria, BigDecimal> valorEstornoPorCategoria = distribuirEstornoParcelamentoPorCategoria(colecaoCategoria,
								valorEstorno);

				inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, numeroPrestacao, valorEstornoPorCategoria, taxaJuros, parcelamentoId,
								ParcelamentoGrupo.FINANCIAMENTOS_A_COBRAR_CURTO_PRAZO, DebitoCreditoSituacao.PARCELADA, true,
								numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, ConstantesSistema.NAO,
								ConstantesSistema.NAO);

			}
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Gera os Crédito a Realizar do Parcelamento
	 * [SB0006] - Gerar Crédito a Realizar do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	private void gerarCreditoARealizarParcelamento(Imovel imovel, Short numeroPrestacao, BigDecimal taxaJuros, Integer parcelamentoId,
					BigDecimal valorDescontoAcresimosImpontualidade, BigDecimal valorDescontoAntiguidadeDebito,
					BigDecimal valorDescontoInatividadeLigacaoAgua, BigDecimal valorCreditoAnteriores,
					Collection<Categoria> colecaoCategoria, BigDecimal valorDescontoSancoesRDEspecial,
					BigDecimal descontoTarifaSocialRDEspecial, Map<Integer, BigDecimal> mapaListaCreditoItemContabil,
					BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao, Integer numeroMesesInicioCobranca)
					throws ControladorException{

		// 1. Desconto por Acréscimo por Impontualidade
		if((valorDescontoAcresimosImpontualidade != null && !(valorDescontoAcresimosImpontualidade.compareTo(BigDecimal.ZERO) == 0))
						|| (valorDescontoAcrescimosImpontualidadeNaPrestacao != null && !(valorDescontoAcrescimosImpontualidadeNaPrestacao
										.compareTo(BigDecimal.ZERO) == 0))){
			CreditoTipo creditoTipoDescontoAcrescimoImpotualidade = filtrarCreditoTipo(CreditoTipo.DESCONTO_ACRESCIMOS_IMPONTUALIDADE);

			BigDecimal valorDesconto = BigDecimal.ZERO;

			if(valorDescontoAcrescimosImpontualidadeNaPrestacao != null){
				valorDesconto = valorDescontoAcrescimosImpontualidadeNaPrestacao;
			}else{
				valorDesconto = valorDescontoAcresimosImpontualidade;
			}

			// 1. Inclui o crédito a realizar para Desconto Acréscimo por
			// Impontualidade
			if(creditoTipoDescontoAcrescimoImpotualidade.getId() != null){
				inserirCreditoARealizarCreditoTipo(creditoTipoDescontoAcrescimoImpotualidade, imovel, valorDesconto, numeroPrestacao,
								parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}else{

				throw new ControladorException("atencao.credito_tipo.inexistente");
			}
		}

		// 2. Desconto por Antiguidade do Débito
		if(valorDescontoAntiguidadeDebito != null && !(valorDescontoAntiguidadeDebito.compareTo(BigDecimal.ZERO) == 0)){
			CreditoTipo creditoTipoAntiguidadeDebito = filtrarCreditoTipo(CreditoTipo.DESCONTO_ANTIGUIDADE_DEBITO);

			// 2. Inclui o crédito a realizar para Desconto por Antiguidade do
			// Débito
			if(creditoTipoAntiguidadeDebito.getId() != null){
				inserirCreditoARealizarCreditoTipo(creditoTipoAntiguidadeDebito, imovel, valorDescontoAntiguidadeDebito, numeroPrestacao,
								parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}else{

				throw new ControladorException("atencao.credito_tipo.inexistente");
			}
		}

		// 3. Desconto por Inatividade dea Ligação da Água
		if(valorDescontoInatividadeLigacaoAgua != null && !(valorDescontoInatividadeLigacaoAgua.compareTo(BigDecimal.ZERO) == 0)){
			CreditoTipo creditoTipoInatividadeLigacaoAgua = filtrarCreditoTipo(CreditoTipo.DESCONTO_INATIVIDADE_LIGACAO_AGUA);

			// 3. Inclui o crédito a realizar para Desconto por Inatividade dea
			// Ligação da Água
			if(creditoTipoInatividadeLigacaoAgua.getId() != null){
				inserirCreditoARealizarCreditoTipo(creditoTipoInatividadeLigacaoAgua, imovel, valorDescontoInatividadeLigacaoAgua,
								numeroPrestacao, parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}else{

				throw new ControladorException("atencao.credito_tipo.inexistente");
			}
		}

		// 4. Créditos Anteriores
		if(!Util.isVazioOuBranco(mapaListaCreditoItemContabil)){
			for(Integer idLancamentoContabil : mapaListaCreditoItemContabil.keySet()){
				LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(idLancamentoContabil);

				CreditoTipo creditoTipoCreditoAnteriores = filtrarCreditoTipo(CreditoTipo.CREDITOS_ANTERIORES);
				creditoTipoCreditoAnteriores.setLancamentoItemContabil(lancamentoItemContabil);

				BigDecimal valorCreditoAnterioresItemContabil = mapaListaCreditoItemContabil.get(idLancamentoContabil);

				// 4. Inclui o crédito a realizar para Créditos Anteriores
				inserirCreditoARealizarCreditoTipo(creditoTipoCreditoAnteriores, imovel, valorCreditoAnterioresItemContabil,
								numeroPrestacao, parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}
		}

		// 5. Desconto por Sanções
		if(valorDescontoSancoesRDEspecial != null && !(valorDescontoSancoesRDEspecial.compareTo(BigDecimal.ZERO) == 0)){
			CreditoTipo creditoTipoSancoes = filtrarCreditoTipo(CreditoTipo.DESCONTO_SANCOES);

			// 5. Inclui o crédito a realizar para Desconto por Sanções
			if(creditoTipoSancoes.getId() != null){
				inserirCreditoARealizarCreditoTipo(creditoTipoSancoes, imovel, valorDescontoSancoesRDEspecial, numeroPrestacao,
								parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}else{

				throw new ControladorException("atencao.credito_tipo.inexistente");
			}
		}

		// 6. Desconto por Tarifa Social
		if(descontoTarifaSocialRDEspecial != null && !(descontoTarifaSocialRDEspecial.compareTo(BigDecimal.ZERO) == 0)){
			CreditoTipo creditoTipoTarifaSocial = filtrarCreditoTipo(CreditoTipo.DESCONTO_TARIFA_SOCIAL);

			// 6. Inclui o crédito a realizar para Desconto por Tarifa Social
			if(creditoTipoTarifaSocial.getId() != null){
				inserirCreditoARealizarCreditoTipo(creditoTipoTarifaSocial, imovel, descontoTarifaSocialRDEspecial, numeroPrestacao,
								parcelamentoId, colecaoCategoria, numeroMesesInicioCobranca, true);
			}else{

				throw new ControladorException("atencao.credito_tipo.inexistente");
			}
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Insere Crédito A Realizar de acordo com Tipo do Crédito do Imóvel
	 * inserirCreditoARealizarCreditoTipo
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 05/04/2006 - 27/09/2006
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	private void inserirCreditoARealizarCreditoTipo(CreditoTipo creditoTipo, Imovel imovel, BigDecimal valorCredito, Short numeroPrestacao,
					Integer parcelamentoId, Collection<Categoria> colecaoCategoria, Integer numeroMesesInicioCobranca,
					boolean efetuarParcelamento) throws ControladorException{

		SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		// Insere o crédito a realizar na tabela CREDITO_A_REALIZAR_GERAL
		CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
		creditoARealizarGeral.setIndicadorHistorico(Short.valueOf((short) 2));
		creditoARealizarGeral.setUltimaAlteracao(new Date());
		// Recupera o código do crédito a realizar geral inserido Integer
		Integer creditoARealizarGeralIdBase = (Integer) getControladorUtil().inserir(creditoARealizarGeral);
		creditoARealizarGeral.setId(creditoARealizarGeralIdBase);

		// Seta o objeto crédito a realizar com os parâmtros solicitados
		CreditoARealizar creditoARealizar = new CreditoARealizar();

		creditoARealizar.setId(creditoARealizarGeralIdBase);
		creditoARealizar.setCreditoARealizarGeral(creditoARealizarGeral);
		creditoARealizar.setImovel(imovel);
		creditoARealizar.setCreditoTipo(creditoTipo);
		creditoARealizar.setGeracaoCredito(new Date());
		creditoARealizar.setAnoMesReferenciaCredito(null);

		if(efetuarParcelamento){

			Integer numeroMesesInicioCobrancaParcela = null;

			if(numeroMesesInicioCobranca == null){

				numeroMesesInicioCobrancaParcela = 1;
			}else{

				numeroMesesInicioCobrancaParcela = numeroMesesInicioCobranca;
			}

			Integer anoMesCobrancaDebito = Util.somaMesAnoMesReferencia(sistemaParametros.getAnoMesFaturamento(),
							numeroMesesInicioCobrancaParcela);

			creditoARealizar.setAnoMesCobrancaCredito(anoMesCobrancaDebito);

		}else{

			creditoARealizar.setAnoMesCobrancaCredito(sistemaParametros.getAnoMesArrecadacao());
		}

		creditoARealizar.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
		creditoARealizar.setValorCredito(valorCredito);
		creditoARealizar.setValorResidualMesAnterior(BigDecimal.ZERO);
		creditoARealizar.setNumeroPrestacaoCredito(numeroPrestacao);
		creditoARealizar.setNumeroPrestacaoRealizada(Short.valueOf((short) 0));
		creditoARealizar.setLocalidade(imovel.getLocalidade());
		creditoARealizar.setQuadra(imovel.getQuadra());
		creditoARealizar.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
		creditoARealizar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
		creditoARealizar.setNumeroLote(imovel.getLote());
		creditoARealizar.setNumeroSubLote(imovel.getSubLote());

		/*
		 * RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		 * registroAtendimento.setId(new Integer("1"));
		 * creditoARealizar.setRegistroAtendimento(registroAtendimento);
		 */
		creditoARealizar.setRegistroAtendimento(null);
		creditoARealizar.setOrdemServico(null);

		creditoARealizar.setLancamentoItemContabil(creditoTipo.getLancamentoItemContabil());

		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);
		creditoARealizar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		creditoARealizar.setDebitoCreditoSituacaoAnterior(null);

		CreditoOrigem creditoOrigem = new CreditoOrigem();
		creditoOrigem.setId(CreditoOrigem.DESCONTOS_CONCEDIDOS_NO_PARCELAMENTO);
		creditoARealizar.setCreditoOrigem(creditoOrigem);

		Parcelamento parcelamento = new Parcelamento();
		parcelamento.setId(parcelamentoId);
		creditoARealizar.setParcelamento(parcelamento);

		creditoARealizar.setUltimaAlteracao(new Date());

		// Insere o crédito a realizar na base
		// Integer creditoARealizarIdBase = (Integer)
		getControladorUtil().inserir(creditoARealizar);


		Set colecaoCreditoARealizarCategoria = new HashSet();
		// 2.1. [UC0185] Obter Valor por Categoria
		Collection<BigDecimal> colecaoValorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoria, valorCredito);

		// Cria as iterações de categoria e valor
		Iterator iteratorCategoria = colecaoCategoria.iterator();
		Iterator iteratorValorCategoria = colecaoValorCategoria.iterator();

		// Laço para criar os débitos a cobrar por categoria
		while(iteratorCategoria.hasNext()){
			// Recupera a categoria
			Categoria categoria = (Categoria) iteratorCategoria.next();

			// Recupera o valor da categoria
			BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

			// Cria o débito a cobrar categoria
			CreditoARealizarCategoria creditoARealizarCategoria = new CreditoARealizarCategoria();

			CreditoARealizarCategoriaPK creditoARealizarCategoriaPK = new CreditoARealizarCategoriaPK(creditoARealizar, categoria);
			creditoARealizarCategoria.setComp_id(creditoARealizarCategoriaPK);

			/*
			 * CreditoARealizar creditoARealizarBase = new CreditoARealizar();
			 * creditoARealizarBase.setId(creditoARealizarIdBase);
			 * creditoARealizarCategoria.setCreditoARealizar(creditoARealizarBase);
			 */
			creditoARealizarCategoria.setCreditoARealizar(creditoARealizar);

			creditoARealizarCategoria.setCategoria(categoria);
			creditoARealizarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
			creditoARealizarCategoria.setValorCategoria(valorPorCategoria);
			creditoARealizarCategoria.setUltimaAlteracao(new Date());


			// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
			getControladorUtil().inserir(creditoARealizarCategoria);

			colecaoCreditoARealizarCategoria.add(creditoARealizarCategoria);

		}

		creditoARealizar.setCreditoARealizarCategoria(colecaoCreditoARealizarCategoria);

		getControladorContabil().registrarLancamentoContabil(creditoARealizar, OperacaoContabil.INCLUIR_CREDITO_A_REALIZAR);
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Pega o Tipo do Crédito de acordo com a constante informada
	 * filtrarCreditoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * @param tipoCredito
	 * @return
	 * @throws ControladorException
	 */
	public CreditoTipo filtrarCreditoTipo(Integer tipoCredito) throws ControladorException{

		FiltroCreditoTipo filtroCreditoTipo = new FiltroCreditoTipo();

		filtroCreditoTipo.adicionarParametro(new ParametroSimples(FiltroCreditoTipo.ID, tipoCredito));

		Collection colecaoCreditoTipo = this.getControladorUtil().pesquisar(filtroCreditoTipo, CreditoTipo.class.getName());

		CreditoTipo creditoTipo = new CreditoTipo();
		if(colecaoCreditoTipo != null && !colecaoCreditoTipo.isEmpty()){
			creditoTipo = (CreditoTipo) colecaoCreditoTipo.iterator().next();
		}
		return creditoTipo;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Gera os a Entrada do Parcelamento
	 * [SB0008] - Gerar a Entrada do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * @author Saulo Lima
	 * @date 03/02/2009
	 *       Correção para inserir apenas uma Prestação independente do número de Categorias
	 * @author eduardo henrique
	 * @date 14/02/2009
	 *       Correção na Geração do Nr. de Prestações do Guia_Pagamento_Categoria da Guia de
	 *       Pagamento de Entrada de Parc.
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	public void gerarEntradaParcelamento(Imovel imovel,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					Integer parcelamentoId, Collection<ContaValoresHelper> colecaoContaValores, Usuario usuarioLogado, Pagamento pagamento,
					String indicadorContasRevisao, String indicadorCobrancaParcelamento, Integer idGuiaPagamentoGeral,
					Integer numeroDiasVencimentoEntrada, Date dataEntradaParcelamento, Short indicadorTotalRemuneracaoCobrancaAdm)
					throws ControladorException{

		// Contas marcadas como entrada de parcelamento
		Collection<Conta> colecaoContaEP = null;

		// Obtém o valor completo da entrada a partir do Map
		// (TipoDebito -> ItemContabil -> Categoria -> Valor)
		BigDecimal valorEntradaCompleta = obterValorEntradaCompleta(valorEntradaPorTipoDebito);

		// Identifica as contas marcadas como entrada de parcelamento (EP)
		if(!Util.isVazioOrNulo(colecaoContaValores)){
			colecaoContaEP = new ArrayList<Conta>();

			Integer indicadorContasDebito = null;
			Conta conta = null;

			for(ContaValoresHelper contaValoresHelper : colecaoContaValores){
				indicadorContasDebito = contaValoresHelper.getIndicadorContasDebito();

				if(indicadorContasDebito != null && indicadorContasDebito.equals(Integer.valueOf(1))){
					conta = contaValoresHelper.getConta();
					colecaoContaEP.add(conta);
				}
			}
		}

		// Caso existam contas marcadas como entrada de parcelamento (EP)
		if(!Util.isVazioOrNulo(colecaoContaEP)){
			// Colocar as contas marcadas como EP em revisão
			// com o motivo correspondente a entrada de Parcelamento
			ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
			contaMotivoRevisao.setId(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO);

			this.getControladorFaturamento().colocarRevisaoConta(colecaoContaEP, null, contaMotivoRevisao, usuarioLogado,
							indicadorContasRevisao.equals("1"));

			this.getControladorFaturamento().alterarVencimentoConta(colecaoContaEP, null, dataEntradaParcelamento, usuarioLogado);

			// Associar as contas marcadas como EP ao parcelamento
			// atualiza PARC_ID da tabela CONTA com o id do parcelamento
			Parcelamento parcelamento = new Parcelamento();
			parcelamento.setId(parcelamentoId);

			for(Conta conta : colecaoContaEP){
				conta.setParcelamento(parcelamento);

				// Caso o Indicador de Remuneração Total Cobrança Administrativa esteja com o valor
				// 1 (sim)
				if(indicadorTotalRemuneracaoCobrancaAdm != null && indicadorTotalRemuneracaoCobrancaAdm.equals(ConstantesSistema.SIM)){
					conta.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);
				}

				try{
					repositorioCobranca.associarContaParcelamento(conta);
				}catch(ErroRepositorioException e){
					throw new ControladorException("erro.sistema", e);
				}
			}
		}else{
			if(!(valorEntradaCompleta.compareTo(BigDecimal.ZERO) == 0)){
				Integer idGuiaPagamentoGeralAux = null;

				DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO);

				// Inclui a guia de pagamento do parcelamento
				if("1".equals(indicadorCobrancaParcelamento)){
					// Cobrança do Parcelamento: Débito a Cobrar

					GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
					guiaPagamentoGeral.setIndicadorHistorico(Short.valueOf((short) 2));
					guiaPagamentoGeral.setUltimaAlteracao(new Date());

					idGuiaPagamentoGeralAux = (Integer) getControladorUtil().inserir(guiaPagamentoGeral);
					guiaPagamentoGeral.setId(idGuiaPagamentoGeralAux);

					GuiaPagamento guiaPagamento = new GuiaPagamento();
					guiaPagamento.setId(idGuiaPagamentoGeralAux);
					guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
					guiaPagamento.setLocalidade(imovel.getLocalidade());
					guiaPagamento.setSetorComercial(imovel.getSetorComercial());
					guiaPagamento.setImovel(imovel);
					guiaPagamento.setCliente(null);
					guiaPagamento.setRegistroAtendimento(null);
					guiaPagamento.setOrdemServico(null);

					if(parcelamentoId != null){
						Parcelamento parcelamento = new Parcelamento();
						parcelamento.setId(parcelamentoId);
						guiaPagamento.setParcelamento(parcelamento);
					}

					DocumentoTipo documentoTipo = new DocumentoTipo(DocumentoTipo.ENTRADA_DE_PARCELAMENTO);
					guiaPagamento.setDocumentoTipo(documentoTipo);

					guiaPagamento.setOrigem(null);
					guiaPagamento.setValorDebito(valorEntradaCompleta);
					guiaPagamento.setNumeroPrestacaoTotal(Short.valueOf((short) 1));
					guiaPagamento.setDataInclusao(new Date());
					guiaPagamento.setUltimaAlteracao(new Date());

					guiaPagamento.setGuiaPagamentoGeral(guiaPagamentoGeral);

					this.getControladorUtil().inserir(guiaPagamento);
				}

				// Para cada tipo de débito e item contábil, gera as guias de prestação para o valor
				// de entrada
				if(valorEntradaPorTipoDebito != null && !valorEntradaPorTipoDebito.isEmpty()){
					for(Integer chaveTipoDebito : valorEntradaPorTipoDebito.keySet()){
						DebitoTipo debitoTipo = this.filtrarDebitoTipo(chaveTipoDebito);

						Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValorEntradaPorItemContabil = valorEntradaPorTipoDebito
										.get(chaveTipoDebito);

						if(mapaValorEntradaPorItemContabil != null && !mapaValorEntradaPorItemContabil.isEmpty()){
							for(LancamentoItemContabilParcelamentoHelper itemContabil : mapaValorEntradaPorItemContabil.keySet()){

								Map<Categoria, BigDecimal> mapaValorEntradaPorCategoria = mapaValorEntradaPorItemContabil.get(itemContabil);

								if(mapaValorEntradaPorCategoria != null && !mapaValorEntradaPorCategoria.isEmpty()){

									gerarGuiaEntradaParcelamento(imovel, mapaValorEntradaPorCategoria, usuarioLogado, pagamento,
													indicadorCobrancaParcelamento, idGuiaPagamentoGeral, idGuiaPagamentoGeralAux,
													debitoCreditoSituacaoAtual, debitoTipo, itemContabil, dataEntradaParcelamento,
													indicadorTotalRemuneracaoCobrancaAdm);
								}
							}
						}
					}
				}

				// Inclui os registros em CLIENTE_GUIA_PAGAMENTO
				gerarClienteGuiaPagamento(imovel, indicadorCobrancaParcelamento, idGuiaPagamentoGeralAux);
			}
		}
	}

	/**
	 * Sumariza todos os valores de entrada que estão classificados por (TipoDebito -> ItemContabil
	 * -> Categoria)
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private BigDecimal obterValorEntradaCompleta(
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito){

		BigDecimal valorEntradaCompleta = BigDecimal.ZERO;

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> valorEntradaPorItemContabil = null;
		Map<Categoria, BigDecimal> valorEntradaPorCategoria = null;
		if(valorEntradaPorTipoDebito != null && !valorEntradaPorTipoDebito.isEmpty()){

			for(Integer tipoDebito : valorEntradaPorTipoDebito.keySet()){
				valorEntradaPorItemContabil = valorEntradaPorTipoDebito.get(tipoDebito);

				if(valorEntradaPorItemContabil != null && !valorEntradaPorItemContabil.isEmpty()){

					for(LancamentoItemContabilParcelamentoHelper itemContabil : valorEntradaPorItemContabil.keySet()){

						valorEntradaPorCategoria = valorEntradaPorItemContabil.get(itemContabil);
						valorEntradaCompleta = valorEntradaCompleta.add(Util.somaColecaoBigDecimal(valorEntradaPorCategoria.values()));
					}
				}
			}
		}
		return valorEntradaCompleta;
	}

	/**
	 * Gera a guia de entrada de parcelamento
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * [SB0030] - Gerar Guia Entrada Parcelamento
	 * 
	 * @author Luciano Galvao
	 * @date 26/10/2012
	 */
	private void gerarGuiaEntradaParcelamento(Imovel imovel, Map<Categoria, BigDecimal> mapaValorEntradaPorCategoria,
					Usuario usuarioLogado, Pagamento pagamento, String indicadorCobrancaParcelamento, Integer idGuiaPagamentoGeral,
					Integer idGuiaPagamentoGeralAux, DebitoCreditoSituacao debitoCreditoSituacaoAtual, DebitoTipo debitoTipo,
					LancamentoItemContabilParcelamentoHelper itemContabil, Date dataVencimentoGuiaEntrada,
					Short indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException{

		SistemaParametro sistemaParametros = this.getControladorUtil().pesquisarParametrosDoSistema();
		Integer anoMesFaturamento = sistemaParametros.getAnoMesFaturamento();

		Integer idDebitoTipo = debitoTipo.getId();

		FinanciamentoTipo financiamentoTipo = debitoTipo.getFinanciamentoTipo();

		Short numeroPrestacao = new Short("1");

		BigDecimal valorEntrada = Util.somaColecaoBigDecimal(mapaValorEntradaPorCategoria.values());

		// Inclui a prestação da guia de pagamento
		GuiaPagamentoPrestacaoPK guiaPagamentoPrestacaoPK = new GuiaPagamentoPrestacaoPK();

		if("2".equals(indicadorCobrancaParcelamento)){
			// Cobrança do Parcelamento: Guia de Pagamento

			guiaPagamentoPrestacaoPK.setGuiaPagamentoId(idGuiaPagamentoGeral);
		}else{
			guiaPagamentoPrestacaoPK.setGuiaPagamentoId(idGuiaPagamentoGeralAux);
		}

		guiaPagamentoPrestacaoPK.setNumeroPrestacao(numeroPrestacao);
		guiaPagamentoPrestacaoPK.setDebitoTipoId(idDebitoTipo);
		guiaPagamentoPrestacaoPK.setItemLancamentoContabilId(itemContabil.getIdLancamentoItemContabil());

		GuiaPagamentoPrestacao guiaPagamentoPrestacao = new GuiaPagamentoPrestacao();
		guiaPagamentoPrestacao.setComp_id(guiaPagamentoPrestacaoPK);
		guiaPagamentoPrestacao.setDebitoCreditoSituacao(debitoCreditoSituacaoAtual);
		guiaPagamentoPrestacao.setFinanciamentoTipo(financiamentoTipo);
		guiaPagamentoPrestacao.setValorPrestacao(valorEntrada);

		guiaPagamentoPrestacao.setDataVencimento(dataVencimentoGuiaEntrada);

		guiaPagamentoPrestacao.setIndicadorPagamentoPendente(ConstantesSistema.NAO);
		guiaPagamentoPrestacao.setIndicadorCobrancaMulta(ConstantesSistema.NAO);
		guiaPagamentoPrestacao.setAnoMesReferenciaFaturamento(anoMesFaturamento);
		guiaPagamentoPrestacao.setDataEmissao(new Date());
		guiaPagamentoPrestacao.setUltimaAlteracao(new Date());

		// 1. Caso o Indicador de Remuneração Total Cobrança Administrativa esteja com o valor 1
		// (sim)
		if(indicadorTotalRemuneracaoCobrancaAdm != null && indicadorTotalRemuneracaoCobrancaAdm.equals(ConstantesSistema.SIM)){
			guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

			// Caso contrário
		}else{
			// 2.1. Atribuir o Indicador de Remuneração Parcial Cobrança Administrativa recebido
			guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(itemContabil.getIndicadorRemuneracaoParcialCobrancaAdm());
		}

		this.getControladorUtil().inserir(guiaPagamentoPrestacao);

		BigDecimal valorPorCategoria = null;

		GuiaPagamentoCategoriaPK guiaPagamentoCategoriaPK = null;
		GuiaPagamentoCategoria guiaPagamentoCategoria = null;

		for(Categoria categoria : mapaValorEntradaPorCategoria.keySet()){

			// Recupera o valor da categoria
			valorPorCategoria = mapaValorEntradaPorCategoria.get(categoria);

			// Cria a guia de pagamento por categoria
			guiaPagamentoCategoriaPK = new GuiaPagamentoCategoriaPK();

			Integer idGuiaPagamento = null;

			if("2".equals(indicadorCobrancaParcelamento)){
				// Cobrança do Parcelamento: Guia de Pagamento

				idGuiaPagamento = idGuiaPagamentoGeral;
			}else{
				idGuiaPagamento = idGuiaPagamentoGeralAux;
			}

			FiltroGuiaPagamentoCategoria filtroGuiaPagamentoCategoria = new FiltroGuiaPagamentoCategoria();
			filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.GUIA_PAGAMENTO_ID,
							idGuiaPagamento));
			filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.NUMERO_PRESTACAO,
							numeroPrestacao));
			filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.CATEGORIA_ID, categoria
							.getId()));
			filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.LANCAMENTO_ITEM_CONTABIL_ID,
							itemContabil.getIdLancamentoItemContabil()));
			guiaPagamentoCategoria = (GuiaPagamentoCategoria) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(
							filtroGuiaPagamentoCategoria, GuiaPagamentoCategoria.class.getName()));

			if(guiaPagamentoCategoria != null){

				guiaPagamentoCategoria.setValorCategoria(guiaPagamentoCategoria.getValorCategoria().add(valorPorCategoria));
				guiaPagamentoCategoria.setUltimaAlteracao(new Date());

				this.getControladorUtil().atualizar(guiaPagamentoCategoria);

			}else{
				guiaPagamentoCategoriaPK.setGuiaPagamentoId(idGuiaPagamento);
				guiaPagamentoCategoriaPK.setNumeroPrestacao(numeroPrestacao);
				guiaPagamentoCategoriaPK.setCategoriaId(categoria.getId());
				guiaPagamentoCategoriaPK.setLancamentoItemContabilId(itemContabil.getIdLancamentoItemContabil());

				guiaPagamentoCategoria = new GuiaPagamentoCategoria();
				guiaPagamentoCategoria.setComp_id(guiaPagamentoCategoriaPK);
				guiaPagamentoCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
				guiaPagamentoCategoria.setValorCategoria(valorPorCategoria);
				guiaPagamentoCategoria.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(guiaPagamentoCategoria);
			}
		}

		// Lógica do carta com opções de parcelamento
		if(pagamento != null){
			GuiaPagamentoGeral guiaPagamentoGeralAux = new GuiaPagamentoGeral();

			if("2".equals(indicadorCobrancaParcelamento)){
				// Cobrança do Parcelamento: Guia de Pagamento

				guiaPagamentoGeralAux.setId(idGuiaPagamentoGeral);
			}else{
				guiaPagamentoGeralAux.setId(idGuiaPagamentoGeralAux);
			}

			pagamento.setGuiaPagamentoGeral(guiaPagamentoGeralAux);
			pagamento.setNumeroPrestacao(new Integer("1"));

			DocumentoTipo documentoTipoGuia = new DocumentoTipo();
			documentoTipoGuia.setId(DocumentoTipo.GUIA_PAGAMENTO);
			pagamento.setDocumentoTipo(documentoTipoGuia);

			this.getControladorArrecadacao().atualizarPagamento(pagamento, usuarioLogado, null, null, null);
		}
	}

	/**
	 * @param imovel
	 * @param indicadorCobrancaParcelamento
	 * @param idGuiaPagamento
	 * @throws ControladorException
	 */
	private void gerarClienteGuiaPagamento(Imovel imovel, String indicadorCobrancaParcelamento, Integer idGuiaPagamento)
					throws ControladorException{

		// Inclui os clientes do imóvel
		if("1".equals(indicadorCobrancaParcelamento)){
			// Cobrança do Parcelamento: Débito a Cobrar

			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE_RELACAO_TIPO);
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));

			Collection<ClienteImovel> clientesImovel = this.getControladorUtil().pesquisar(filtroClienteImovel,
							ClienteImovel.class.getName());

			if(!Util.isVazioOrNulo(clientesImovel)){
				ClienteGuiaPagamento clienteGuiaPagamento = null;
				Cliente cliente = null;
				ClienteRelacaoTipo clienteRelacaoTipo = null;

				GuiaPagamento guiaPagamento = new GuiaPagamento();
				guiaPagamento.setId(idGuiaPagamento);

				for(ClienteImovel clienteImovel : clientesImovel){
					clienteGuiaPagamento = new ClienteGuiaPagamento();

					cliente = clienteImovel.getCliente();
					clienteGuiaPagamento.setCliente(cliente);

					clienteRelacaoTipo = clienteImovel.getClienteRelacaoTipo();
					clienteGuiaPagamento.setClienteRelacaoTipo(clienteRelacaoTipo);

					clienteGuiaPagamento.setGuiaPagamento(guiaPagamento);
					clienteGuiaPagamento.setUltimaAlteracao(new Date());

					this.getControladorUtil().inserir(clienteGuiaPagamento);
				}
			}
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos - Gera os Dados do Parcelamento
	 * [SB0009] - Gerar Dados do Parcelamento
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 29/03/2006 - 26/09/2006
	 * @author Andre Nishimura
	 * @date 29/12/2008
	 *       Correção na linha 10560
	 *       Inclusao de verificaçao se a conta da Colecao Cobrança Documentos esta vindo nula ou
	 *       nao.
	 * @param dataParcelamento
	 * @param valorConta
	 * @param valorGuiaPapagamento
	 * @param valorServicosACobrar
	 * @param valorParcelamentosACobrar
	 * @param valorCreditoARealizar
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param valorDebitoAtualizado
	 * @param valorDescontoAcrescimos
	 * @param valorDescontoAntiguidade
	 * @param valorDescontoInatividade
	 * @param valorEntrada
	 * @param valorJurosParcelamento
	 * @param numeroPrestacoes
	 * @param valorPrestacao
	 * @param indicadorRestabelecimento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param percentualDescontoAcrescimos
	 * @param percentualDescontoAntiguidade
	 * @param percentualDescontoInatividadeLigacaoAgua
	 * @param imovel
	 * @param usuario
	 * @param parcelamentoPerfilId
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamentoValores
	 * @param colecaoDebitoACobrar
	 * @param colecaoCreditoARealizar
	 * @param taxaJuros
	 * @param indicadorConfirmacaoParcelamento
	 * @param cliente
	 * @return
	 * @throws ControladorException
	 */
	public Parcelamento gerarDadosParcelamento(Date dataParcelamento, BigDecimal valorConta, BigDecimal valorGuiaPapagamento,
					BigDecimal valorServicosACobrar, BigDecimal valorParcelamentosACobrar, BigDecimal valorCreditoARealizar,
					BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora, BigDecimal valorMulta,
					BigDecimal valorDebitoAtualizado, BigDecimal valorDescontoAcrescimos, BigDecimal valorDescontoAntiguidade,
					BigDecimal valorDescontoInatividade, BigDecimal valorEntrada, BigDecimal valorJurosParcelamento,
					Short numeroPrestacoes, BigDecimal valorPrestacao, Short indicadorRestabelecimento, Short indicadorContasRevisao,
					Short indicadorGuiasPagamento, Short indicadorAcrescimosImpotualidade, Short indicadorDebitosACobrar,
					Short indicadorCreditoARealizar, BigDecimal percentualDescontoAcrescimos, BigDecimal percentualDescontoAntiguidade,
					BigDecimal percentualDescontoInatividadeLigacaoAgua, Imovel imovel, Usuario usuario, Integer parcelamentoPerfilId,
					Collection<ContaValoresHelper> colecaoContaValores, Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar,
					BigDecimal taxaJuros, Short indicadorConfirmacaoParcelamento, Cliente cliente, BigDecimal descontoSancoesRDEspecial,
					BigDecimal descontoTarifaSocialRDEspecial, Date dataEntradaParcelamento, String indicadorCobrancaParcelamento,
					Integer anoMesReferenciaDebitoInicial, Integer anoMesReferenciaDebitoFinal, BigDecimal percentualDescontoJurosMora,
					BigDecimal percentualDescontoMulta, BigDecimal percentualDescontoCorrecaoMonetaria,
					BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		Parcelamento parcelamento = new Parcelamento();

		/**
		 * 1. Caso alguma das contas do débito parcelado esteja vinculada com uma ação de cobrança
		 * ativa(CNTA_ID da
		 * tabela CONTA existente em COBRANCA_DOCUMENTO_ITEM com CBDO_ID = CBDO_ID da tabela
		 * COBRANCA_DOCUMENTO e
		 * CACM_ID ou CAAC_ID diferente de nulo, e CACM_DTPRAZOACAO ou CAAC_DTPRAZOACAO da tabela
		 * COBRANCA_ACAO_ATIVIDADE_COMAND ou COBRANCA_ACAO_ATIVIDADE_CRONOG, conforme o caso, com
		 * data maior ou
		 * igual a data corrente), atribuir CBDO_ID da tabela COBRANCA_DOCUMENTO a CBDO_ID da tabela
		 * PARCELAMENTO.
		 */
		// TODO ele recebe uma colecao de contas e vai atribuir ao parcelamento o documento de
		// cobranca mais recente
		// encontrado nessa colecao q preencha as outras condicoes
		// Resp achar o doc de cobranca mais recente da colecao de contas (cobdoc.getEmissao())
		if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){

			List<CobrancaDocumento> documentosCobrancaValidos = new ArrayList<CobrancaDocumento>();

			FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();

			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_COMANDO);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_CRONOGRAMA);

			for(ContaValoresHelper contaValorHelper : colecaoContaValores){

				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO));
				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.CONTA_GERAL_ID,
								contaValorHelper.getConta().getId()));

				Collection<CobrancaDocumentoItem> cobrancaDocumentoItens = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
								CobrancaDocumentoItem.class.getName());

				filtroCobrancaDocumentoItem.limparListaParametros();

				if(cobrancaDocumentoItens != null && !cobrancaDocumentoItens.isEmpty()){

					for(CobrancaDocumentoItem cobrancaDocumentoItem : cobrancaDocumentoItens){

						CobrancaDocumento cobrancaDocumento = cobrancaDocumentoItem.getCobrancaDocumento();

						CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = cobrancaDocumento.getCobrancaAcaoAtividadeComando();
						CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = cobrancaDocumento
										.getCobrancaAcaoAtividadeCronograma();

						if(cobrancaAcaoAtividadeComando != null || cobrancaAcaoAtividadeCronograma != null){
							SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");

							Date dataLimiteAcaoComando = null;
							Date dataLimiteAcaoCronograma = null;
							Date dataAtual = null;

							try{
								dataAtual = df.parse(df.format(new Date()));
							}catch(ParseException e){
								throw new ControladorException("erro.sistema", e);
							}

							if(cobrancaAcaoAtividadeComando != null){
								dataLimiteAcaoComando = cobrancaAcaoAtividadeComando.getDataLimiteAcao();
							}else if(cobrancaAcaoAtividadeCronograma != null){
								dataLimiteAcaoCronograma = cobrancaAcaoAtividadeCronograma.getDataPrazoAcao();
							}

							if((dataLimiteAcaoComando != null && (dataLimiteAcaoComando.compareTo(dataAtual) != -1))
											|| (dataLimiteAcaoCronograma != null && (dataLimiteAcaoCronograma.compareTo(dataAtual) != -1))){

								documentosCobrancaValidos.add(cobrancaDocumento);

							}

						}

					}

				}
			}
			filtroCobrancaDocumentoItem = null;

			if(!documentosCobrancaValidos.isEmpty()){
				if(documentosCobrancaValidos.size() > 1){
					Collections.sort(documentosCobrancaValidos, new Comparator() {

						public int compare(Object o1, Object o2){

							CobrancaDocumento cd1 = (CobrancaDocumento) o1;
							CobrancaDocumento cd2 = (CobrancaDocumento) o2;
							return cd1.getId().compareTo(cd2.getId());
						}
					});
				}
				parcelamento.setCobrancaDocumento(documentosCobrancaValidos.get(documentosCobrancaValidos.size() - 1));
			}

		}

		/**
		 * 2. Gera os dados relativos a parcelamento
		 */
		String dia = Util.formatarData(dataParcelamento).substring(0, 2);
		String mes = Util.formatarData(dataParcelamento).substring(3, 5);
		String ano = Util.formatarData(dataParcelamento).substring(6, 10);

		Calendar dataHoraParcelamento = GregorianCalendar.getInstance();
		dataHoraParcelamento.set(Calendar.DATE, Integer.valueOf(dia).intValue());
		dataHoraParcelamento.set(Calendar.MONTH, Integer.valueOf(mes).intValue() - 1);
		dataHoraParcelamento.set(Calendar.YEAR, Integer.valueOf(ano).intValue());

		parcelamento.setParcelamento(dataHoraParcelamento.getTime());

		ParcelamentoSituacao parcelamentoSituacao = new ParcelamentoSituacao();
		parcelamentoSituacao.setId(ParcelamentoSituacao.NORMAL);
		parcelamento.setParcelamentoSituacao(parcelamentoSituacao);

		parcelamento.setAnoMesReferenciaFaturamento(Util.getAnoMesComoInteger(new Date()));

		// Valor Total das Contas
		parcelamento.setValorConta(valorConta);
		parcelamento.setValorGuiaPapagamento(valorGuiaPapagamento);
		parcelamento.setValorServicosACobrar(valorServicosACobrar);
		parcelamento.setValorParcelamentosACobrar(valorParcelamentosACobrar);
		parcelamento.setValorCreditoARealizar(valorCreditoARealizar);
		parcelamento.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);
		parcelamento.setValorJurosMora(valorJurosMora);
		parcelamento.setValorMulta(valorMulta);
		parcelamento.setValorDebitoAtualizado(valorDebitoAtualizado);

		if(valorDescontoAcrescimosImpontualidadeNaPrestacao != null){
			parcelamento.setValorDescontoAcrescimos(valorDescontoAcrescimosImpontualidadeNaPrestacao);
			parcelamento.setPercentualDescontoAcrescimos(BigDecimal.ZERO);
		}else{
			parcelamento.setValorDescontoAcrescimos(valorDescontoAcrescimos);
			parcelamento.setPercentualDescontoAcrescimos(percentualDescontoAcrescimos);
		}

		parcelamento.setValorDescontoAntiguidade(valorDescontoAntiguidade);
		parcelamento.setValorDescontoInatividade(valorDescontoInatividade);
		parcelamento.setValorDescontoSancao(descontoSancoesRDEspecial);
		parcelamento.setValorDescontoTarifaSocial(descontoTarifaSocialRDEspecial);
		parcelamento.setValorEntrada(valorEntrada);
		parcelamento.setDataEntradaParcelamento(dataEntradaParcelamento);
		parcelamento.setValorJurosParcelamento(valorJurosParcelamento);
		parcelamento.setNumeroPrestacoes(numeroPrestacoes);
		parcelamento.setValorPrestacao(valorPrestacao);
		parcelamento.setIndicadorRestabelecimento(indicadorRestabelecimento);
		parcelamento.setIndicadorContasRevisao(indicadorContasRevisao);
		parcelamento.setIndicadorGuiasPagamento(indicadorGuiasPagamento);
		parcelamento.setIndicadorAcrescimosImpontualdade(indicadorAcrescimosImpotualidade);
		parcelamento.setIndicadorDebitoACobrar(indicadorDebitosACobrar);
		parcelamento.setIndicadorCreditoARealizar(indicadorCreditoARealizar);
		parcelamento.setPercentualDescontoAntiguidade(percentualDescontoAntiguidade);
		parcelamento.setPercentualDescontoInatividade(percentualDescontoInatividadeLigacaoAgua);
		parcelamento.setUltimaAlteracao(new Date());

		parcelamento.setImovel(imovel);

		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(imovel.getImovelPerfil().getId());
		parcelamento.setImovelPerfil(imovelPerfil);

		parcelamento.setRegistroAtendimento(null);

		parcelamento.setUsuario(usuario);
		parcelamento.setFuncionario(null);

		LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
		ligacaoAguaSituacao.setId(imovel.getLigacaoAguaSituacao().getId());
		parcelamento.setLigacaoAguaSituacao(ligacaoAguaSituacao);

		LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
		ligacaoEsgotoSituacao.setId(imovel.getLigacaoEsgotoSituacao().getId());
		parcelamento.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

		Localidade localidade = new Localidade();
		localidade.setId(imovel.getLocalidade().getId());
		parcelamento.setLocalidade(localidade);

		Quadra quadra = new Quadra();
		quadra.setId(imovel.getQuadra().getId());
		parcelamento.setQuadra(quadra);

		parcelamento.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
		parcelamento.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());

		CobrancaForma cobrancaForma = new CobrancaForma();
		if(indicadorCobrancaParcelamento != null
						&& indicadorCobrancaParcelamento.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_DEBITO_A_COBRAR)){
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
		}else{
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_BOLETO_BANCARIO);
		}
		parcelamento.setCobrancaForma(cobrancaForma);

		FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
		filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.ID, parcelamentoPerfilId));

		filtroParcelamentoPerfil.adicionarCaminhoParaCarregamentoEntidade("resolucaoDiretoria");

		Collection colecaoParcelamentoPerfil = getControladorUtil().pesquisar(filtroParcelamentoPerfil, ParcelamentoPerfil.class.getName());

		ParcelamentoPerfil parcelamentoPerfilCarregado = (ParcelamentoPerfil) Util.retonarObjetoDeColecao(colecaoParcelamentoPerfil);

		// ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();
		// parcelamentoPerfil.setId(parcelamentoPerfilId);
		parcelamento.setParcelamentoPerfil(parcelamentoPerfilCarregado);
		parcelamento.setResolucaoDiretoria(parcelamentoPerfilCarregado.getResolucaoDiretoria());

		ParcelamentoTipo parcelamentoTipo = new ParcelamentoTipo();
		parcelamentoTipo.setId(ParcelamentoTipo.POR_IMOVEL);
		parcelamento.setParcelamentoTipo(parcelamentoTipo);

		// Taxa de Juros do Parcelamento
		parcelamento.setTaxaJuros(taxaJuros);

		parcelamento.setIndicadorConfirmacaoParcelamento(indicadorConfirmacaoParcelamento);

		parcelamento.setCliente(cliente);

		parcelamento.setAnoMesReferenciaDebitoInicial(anoMesReferenciaDebitoInicial);
		parcelamento.setAnoMesReferenciaDebitoFinal(anoMesReferenciaDebitoFinal);

		parcelamento.setPercentualDescontoJurosMora(percentualDescontoJurosMora);
		parcelamento.setPercentualDescontoMulta(percentualDescontoMulta);
		parcelamento.setPercentualDescontoCorrecaoMonetaria(percentualDescontoCorrecaoMonetaria);

		Short pVerificaParcelamentoMesFatCorrente;

		pVerificaParcelamentoMesFatCorrente = Short.valueOf(ParametroCobranca.P_VERIFICA_PARCELAMENTO_MES_FATURAMENTO_CORRENTE.executar());

		if(pVerificaParcelamentoMesFatCorrente.equals(ConstantesSistema.SIM)){

			// [FS0012] Verificar existência de parcelamento no mês
			Collection<Parcelamento> colecaoParcelamento = verificarParcelamentoMesImovel(imovel.getId());

			if(colecaoParcelamento != null && !colecaoParcelamento.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.parcelamento.processado");
			}

		}

		// Inseri Parcelamento na Base
		Integer parcelamentoId = (Integer) getControladorUtil().inserir(parcelamento);

		// Caso tenha sido optado por parcelamento configurável
		if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

			/*
			 * Para cada configuração de parcelas, obedecendo a sequência informada pelo usuário, o
			 * sistema insere um registro em PARCELAMENTO_CONFIG_PREST
			 */
			for(ParcelamentoConfiguracaoPrestacao parcelamentoConfiguracaoPrestacao : colecaoParcelamentoConfiguracaoPrestacao){

				parcelamentoConfiguracaoPrestacao.setParcelamento(parcelamento);
				parcelamentoConfiguracaoPrestacao.setUltimaAlteracao(new Date());
			}

			getControladorUtil().inserirColecaoObjetos(colecaoParcelamentoConfiguracaoPrestacao);
		}

		Date ultAlt = new Date();
		// Inserindo itens para as Contas
		if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
			// 2. Gera Itens que foram parcelados
			ParcelamentoItem parcelamentoItem = new ParcelamentoItem();
			parcelamentoItem.setUltimaAlteracao(ultAlt);
			Iterator contaValores = colecaoContaValores.iterator();
			while(contaValores.hasNext()){
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();

				Conta conta = contaValoresHelper.getConta();
				Integer idConta = conta.getId();

				Integer indicadorContasDebito = contaValoresHelper.getIndicadorContasDebito();

				// não inserir as contas com indicador de que a conta já foi
				// paga , esteja (NB) marcado
				// ou que o indicador entrada de parcelamento esteja (EP)
				// marcado
				if(indicadorContasDebito == null || (!indicadorContasDebito.equals(2) && !indicadorContasDebito.equals(1))){

					// Conta Geral
					ContaGeral contaGeral = new ContaGeral();
					contaGeral.setId(idConta);

					Parcelamento parcelamentoBase = new Parcelamento();
					parcelamentoBase.setId(parcelamentoId);
					parcelamentoItem.setParcelamento(parcelamentoBase);

					DocumentoTipo documentoTipo = new DocumentoTipo();
					documentoTipo.setId(DocumentoTipo.CONTA);
					parcelamentoItem.setDocumentoTipo(documentoTipo);

					parcelamentoItem.setDebitoACobrarGeral(null);
					parcelamentoItem.setCreditoARealizarGeral(null);
					// parcelamentoItem.setNotaPromissoria(null);
					parcelamentoItem.setGuiaPagamentoGeral(null);
					parcelamentoItem.setContaGeral(contaGeral);
					// parcelamentoItem.setContaHistorico(null);
					// parcelamentoItem.setDebitoACobrarHistorico(null);
					// parcelamentoItem.setCreditoARealizarHistorico(null);
					// parcelamentoItem.setUltimaAlteracao(new Date());

					// Inseri Parcelamento Item na Base
					getControladorUtil().inserir(parcelamentoItem);
				}

				// 3. Caso o item de débito parcelado seja uma conta (CNTA_ID com o valor diferente
				// de nulo), considerando também a conta se o indicador entrada de parcelamento
				// esteja (EP) marcado:
				if(idConta != null && (indicadorContasDebito == null || indicadorContasDebito.equals(1))){

					// Verifica se há relação entre a conta parcelada e algum item de documento de
					// cobrança - [UC3082] Atualizar Item Documento Cobrança
					this.atualizarItemDocumentoCobranca(idConta, null, null, null, CobrancaDebitoSituacao.PARCELADO,
									dataHoraParcelamento.getTime(), CobrancaDebitoSituacao.PENDENTE);

					// 3.1. Verificar se há relação do parcelamento com itens de negativação:

					Integer idImovel = imovel.getId();
					int referenciaConta = conta.getReferencia();

					// [UC0937 - Obter Itens de Negativação Associados à Conta]
					Collection<Integer> itensNegativacaoAssociadosAConta = getControladorSpcSerasa().obterItensNegativacaoAssociadosAConta(
									idImovel, referenciaConta);

					Collection<NegativadorMovimentoRegItem> negativadorMovimentoRegItens = getControladorSpcSerasa()
									.pesquisarNegativadorMovimentoRegItensPorIds((List<Integer>) itensNegativacaoAssociadosAConta);

					if(!Util.isVazioOrNulo(negativadorMovimentoRegItens)){
						for(NegativadorMovimentoRegItem negativadorMovimentoRegItem : negativadorMovimentoRegItens){
							NegativadorMovimentoReg negativadorMovimentoReg = negativadorMovimentoRegItem.getNegativadorMovimentoReg();

							CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
							cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PARCELADO);

							if(negativadorMovimentoReg.getCodigoExclusaoTipo() == null){
								// Negativação não foi excluida

								negativadorMovimentoRegItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
								negativadorMovimentoRegItem.setDataSituacaoDebito(parcelamento.getParcelamento());
							}else{
								// Negativação foi excluida

								negativadorMovimentoRegItem.setCobrancaDebitoSituacaoAposExclusao(cobrancaDebitoSituacao);
								negativadorMovimentoRegItem.setDataSituacaoDebitoAposExclusao(parcelamento.getParcelamento());
							}

							negativadorMovimentoRegItem.setUltimaAlteracao(ultAlt);
							negativadorMovimentoRegItem.setIndicadorSituacaoDefinitiva(ConstantesSistema.SIM);

							// Atualiza o registro de negativação associado ao item
							negativadorMovimentoReg.setIndicadorItemAtualizado(ConstantesSistema.SIM);
							negativadorMovimentoReg.setUltimaAlteracao(ultAlt);

							getControladorUtil().atualizar(negativadorMovimentoReg);

							// Atualiza o item da negativação
							getControladorUtil().atualizar(negativadorMovimentoRegItem);
						}
					}
				}
			}
		}

		// Inserindo itens para as Guias de Pagamento
		if(colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()){
			// 2. Gera Itens que foram parcelados
			ParcelamentoItem parcelamentoItem = new ParcelamentoItem();
			parcelamentoItem.setUltimaAlteracao(ultAlt);
			Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();

			Integer idGuiaPagamento = null;
			Short numeroPrestacao = null;

			while(guiaPagamentoValores.hasNext()){
				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();

				idGuiaPagamento = guiaPagamentoValoresHelper.getIdGuiaPagamento();
				numeroPrestacao = guiaPagamentoValoresHelper.getNumeroPrestacao();

				// Guia de Pagamento Geral Geral
				GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
				guiaPagamentoGeral.setId(idGuiaPagamento);

				Parcelamento parcelamentoBase = new Parcelamento();
				parcelamentoBase.setId(parcelamentoId);
				parcelamentoItem.setParcelamento(parcelamentoBase);

				DocumentoTipo documentoTipo = new DocumentoTipo();
				documentoTipo.setId(DocumentoTipo.GUIA_PAGAMENTO);
				parcelamentoItem.setDocumentoTipo(documentoTipo);

				parcelamentoItem.setDebitoACobrarGeral(null);
				parcelamentoItem.setCreditoARealizarGeral(null);
				// parcelamentoItem.setNotaPromissoria(null);
				parcelamentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
				parcelamentoItem.setNumeroPrestacao(numeroPrestacao);
				parcelamentoItem.setContaGeral(null);
				// parcelamentoItem.setContaHistorico(null);
				// parcelamentoItem.setDebitoACobrarHistorico(null);
				// parcelamentoItem.setCreditoARealizarHistorico(null);

				// Inseri Parcelamento Item na Base
				getControladorUtil().inserir(parcelamentoItem);

				// Verifica se há relação entre a prestação de guia de pagamento parcelada e algum
				// item de documento de cobrança - [UC3082] Atualizar Item Documento Cobrança
				this.atualizarItemDocumentoCobranca(null, idGuiaPagamento, numeroPrestacao, null, CobrancaDebitoSituacao.PARCELADO,
								dataHoraParcelamento.getTime(), CobrancaDebitoSituacao.PENDENTE);
			}
		}

		// Inserindo itens para Débitos a Cobrar
		if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
			// 2. Gera Itens que foram parcelados
			ParcelamentoItem parcelamentoItem = new ParcelamentoItem();
			parcelamentoItem.setUltimaAlteracao(ultAlt);
			Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

			Integer idDebitoACobrar = null;

			while(debitoACobrarValores.hasNext()){
				DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

				idDebitoACobrar = debitoACobrar.getId();

				// Debito A Cobrar Geral
				DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
				debitoACobrarGeral.setId(debitoACobrar.getId());

				Parcelamento parcelamentoBase = new Parcelamento();
				parcelamentoBase.setId(parcelamentoId);
				parcelamentoItem.setParcelamento(parcelamentoBase);

				DocumentoTipo documentoTipo = new DocumentoTipo();
				documentoTipo.setId(DocumentoTipo.DEBITO_A_COBRAR);
				parcelamentoItem.setDocumentoTipo(documentoTipo);

				parcelamentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
				parcelamentoItem.setCreditoARealizarGeral(null);
				// parcelamentoItem.setNotaPromissoria(null);
				parcelamentoItem.setGuiaPagamentoGeral(null);
				parcelamentoItem.setContaGeral(null);
				// parcelamentoItem.setContaHistorico(null);
				// parcelamentoItem.setDebitoACobrarHistorico(null);
				// parcelamentoItem.setCreditoARealizarHistorico(null);

				// Inseri Parcelamento Item na Base
				getControladorUtil().inserir(parcelamentoItem);

				// Verifica se há relação entre o débito a cobrar parcelado e algum item de
				// documento de cobrança - [UC3082] Atualizar Item Documento Cobrança
				this.atualizarItemDocumentoCobranca(null, null, null, idDebitoACobrar, CobrancaDebitoSituacao.PARCELADO,
								dataHoraParcelamento.getTime(), CobrancaDebitoSituacao.PENDENTE);
			}
		}

		// Inserindo itens para Crédito a Realizar
		if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
			// 2. Gera Itens que foram parcelados
			ParcelamentoItem parcelamentoItem = new ParcelamentoItem();
			parcelamentoItem.setUltimaAlteracao(ultAlt);
			Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();

			while(creditoARealizarValores.hasNext()){
				CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();

				// Credito A Realizar Geral
				CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
				creditoARealizarGeral.setId(creditoARealizar.getId());

				Parcelamento parcelamentoBase = new Parcelamento();
				parcelamentoBase.setId(parcelamentoId);
				parcelamentoItem.setParcelamento(parcelamentoBase);

				DocumentoTipo documentoTipo = new DocumentoTipo();
				documentoTipo.setId(DocumentoTipo.CREDITO_A_REALIZAR);
				parcelamentoItem.setDocumentoTipo(documentoTipo);

				parcelamentoItem.setDebitoACobrarGeral(null);
				parcelamentoItem.setCreditoARealizarGeral(creditoARealizar.getCreditoARealizarGeral());
				// parcelamentoItem.setNotaPromissoria(null);
				parcelamentoItem.setGuiaPagamentoGeral(null);
				// parcelamentoItem.setConta(null);
				// parcelamentoItem.setContaHistorico(null);
				// parcelamentoItem.setDebitoACobrarHistorico(null);
				// parcelamentoItem.setCreditoARealizarHistorico(null);

				// Inseri Parcelamento Item na Base
				getControladorUtil().inserir(parcelamentoItem);
			}
		}

		// return parcelamentoId;
		return parcelamento;
	}

	/**
	 * Permite inserir uma ResolucaoDiretoria
	 * [UC0217] Inserir Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 30/03/2006
	 */
	public Integer inserirResolucaoDiretoria(ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado) throws ControladorException{

		// [FS0001] - Validar Período de Vigência
		if(resolucaoDiretoria.getDataVigenciaFim() != null){
			if(resolucaoDiretoria.getDataVigenciaInicio().compareTo(resolucaoDiretoria.getDataVigenciaFim()) >= 0){
				throw new ControladorException("atencao.termino_vigencia.anterior.inicio_vigencia");
			}
		}

		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.NUMERO, resolucaoDiretoria
						.getNumeroResolucaoDiretoria()));

		Collection colecaoResolucaoDiretoria = getControladorUtil().pesquisar(filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());

		if(colecaoResolucaoDiretoria != null && !colecaoResolucaoDiretoria.isEmpty()){
			throw new ControladorException("atencao.numero_resolucao_ja_existente");
		}

		resolucaoDiretoria.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_INSERIR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		resolucaoDiretoria.setOperacaoEfetuada(operacaoEfetuada);
		resolucaoDiretoria.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(resolucaoDiretoria);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer id = (Integer) getControladorUtil().inserir(resolucaoDiretoria);

		// Inserir os grupos habilitados associados
		if(resolucaoDiretoria.getResolucaoDiretoriaGrupos() != null && !resolucaoDiretoria.getResolucaoDiretoriaGrupos().isEmpty()){

			Iterator<ResolucaoDiretoriaGrupo> iteratorResolucaoDiretoriaGrupo = resolucaoDiretoria.getResolucaoDiretoriaGrupos().iterator();
			while(iteratorResolucaoDiretoriaGrupo.hasNext()){
				ResolucaoDiretoriaGrupo resolucaoDiretoriaGrupo = iteratorResolucaoDiretoriaGrupo.next();
				getControladorUtil().inserir(resolucaoDiretoriaGrupo);
			}
		}

		// Inserir as restricoes de debito
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getParcelamentosSituacaoEspecial())){
			for(ParcelamentoSituacaoEspecial parcelamentoSituacaoEspecial : resolucaoDiretoria.getParcelamentosSituacaoEspecial()){
				getControladorUtil().inserir(parcelamentoSituacaoEspecial);
			}
		}
		// Inserir as condições para pagamento à vista
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getResolucaoDiretoriaCondicoesPagtoAVista())){
			for(ResolucaoDiretoriaParametrosPagamentoAVista resolucaoDiretoriaParametrosPagtoAVista : resolucaoDiretoria
							.getResolucaoDiretoriaCondicoesPagtoAVista()){
				getControladorUtil().inserir(resolucaoDiretoriaParametrosPagtoAVista);
			}
		}

		// Inserir as condições do Valor de Entrada
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getResolucaoDiretoriaCondicoesValorEntrada())){
			for(ResolucaoDiretoriaParametrosValorEntrada resolucaoDiretoriaParametrosValorEntrada : resolucaoDiretoria
							.getResolucaoDiretoriaCondicoesValorEntrada()){
				getControladorUtil().inserir(resolucaoDiretoriaParametrosValorEntrada);
			}
		}

		return id;

	}

	/**
	 * Este caso de uso permite a consulta de documentos de cobrança
	 * [UC0257] - Consultar Documentos de Cobrança
	 * [SB0001] - Apresenta Itens do Documento de Cobrança
	 * 
	 * @author Rafael Corrêa & Raphael Rossiter
	 * @date 05/04/2006
	 * @author Saulo Lima
	 * @date 19/01/2009
	 *       Organização
	 */
	public CobrancaDocumentoHelper apresentaItensDocumentoCobranca(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		CobrancaDocumentoHelper cobrancaDocumentoHelper = new CobrancaDocumentoHelper();

		FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();

		filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));

		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.localidade");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.quadra");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.setorComercial.municipio.unidadeFederacao");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroBairro.bairro.municipio.unidadeFederacao");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.ligacaoAguaSituacao");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.ligacaoEsgotoSituacao");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.logradouro.logradouroTipo");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.logradouro.logradouroTitulo");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.enderecoReferencia");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.cep");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("documentoEmissaoForma");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("motivoNaoEntregaDocumento");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade("empresa");
		filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.COBRANCA_ACAO_SITUACAO);

		Collection colecaoCobrancaDocumento = getControladorUtil().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());

		CobrancaDocumento cobrancaDocumentoCarregado = (CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento);

		cobrancaDocumentoHelper.setCobrancaDocumento(cobrancaDocumentoCarregado);

		/*
		 * FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new
		 * FiltroCobrancaDocumentoItem();
		 * filtroCobrancaDocumentoItem.setConsultaSemLimites(true);
		 * filtroCobrancaDocumentoItem
		 * .adicionarCaminhoParaCarregamentoEntidade("contaGeral.conta.debitoCreditoSituacaoAtual");
		 * filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(
		 * "contaGeral.contaHistorico.debitoCreditoSituacaoAtual");
		 * filtroCobrancaDocumentoItem
		 * .adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral.debitoACobrar.debitoTipo");
		 * filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(
		 * "debitoACobrarGeral.debitoACobrarHistorico.debitoTipo");
		 * filtroCobrancaDocumentoItem
		 * .adicionarCaminhoParaCarregamentoEntidade(
		 * "guiaPagamentoGeral.guiaPagamento.guiasPagamentoPrestacao.debitoTipo");
		 * filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(
		 * "guiaPagamentoGeral.guiaPagamentoHistorico.debitoTipo");
		 * filtroCobrancaDocumentoItem .adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		 * filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
		 * cobrancaDocumentoCarregado.getId()));
		 */

		/*
		 * Collection colecaoCobrancaDocumentoItem =
		 * getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
		 * CobrancaDocumentoItem.class.getName());
		 */

		try{
			Collection colecaoCobrancaDocumentoItem = repositorioCobranca.pesquisarDocumentoItem(cobrancaDocumento);

			if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){

				cobrancaDocumentoHelper.setQuantidadeItensCobrancaDocumento(colecaoCobrancaDocumentoItem.size());

				Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
				CobrancaDocumentoItem cobrancaDocumentoItem = null;

				Collection colecaoCobrancaDocumentoItemConta = new ArrayList();
				Collection colecaoCobrancaDocumentoItemDebitoACobrar = new ArrayList();
				Collection colecaoCobrancaDocumentoItemGuiaPagamento = new ArrayList();

				while(iteratorColecaoCobrancaDocumentoItem.hasNext()){

					cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

					// cobrancaDocumentoItem.getContaGeral().getConta();
					// cobrancaDocumentoItem.getContaGeral().getContaHistorico();
					if(cobrancaDocumentoItem.getDocumentoTipo().getId().equals(DocumentoTipo.CONTA)){
						colecaoCobrancaDocumentoItemConta.add(cobrancaDocumentoItem);
					}else if(cobrancaDocumentoItem.getDocumentoTipo().getId().equals(DocumentoTipo.DEBITO_A_COBRAR)){
						colecaoCobrancaDocumentoItemDebitoACobrar.add(cobrancaDocumentoItem);
					}else if(cobrancaDocumentoItem.getDocumentoTipo().getId().equals(DocumentoTipo.GUIA_PAGAMENTO)){
						colecaoCobrancaDocumentoItemGuiaPagamento.add(cobrancaDocumentoItem);
					}
				}

				cobrancaDocumentoHelper.setColecaoCobrancaDocumentoItemConta(colecaoCobrancaDocumentoItemConta);
				cobrancaDocumentoHelper.setColecaoCobrancaDocumentoItemDebitoACobrar(colecaoCobrancaDocumentoItemDebitoACobrar);
				cobrancaDocumentoHelper.setColecaoCobrancaDocumentoItemGuiaPagamento(colecaoCobrancaDocumentoItemGuiaPagamento);
			}else{
				cobrancaDocumentoHelper.setQuantidadeItensCobrancaDocumento(0);
			}

		}catch(ErroRepositorioException ere){
			throw new ControladorException("erro.sistema", ere);
		}
		return cobrancaDocumentoHelper;
	}

	/**
	 * Verifica se há valor a ser cobrado no parcelamento
	 * 
	 * @author Luciano Galvao
	 * @created 23/10/2012
	 */
	private boolean verificarValorSerCobradoParcelamento(Parcelamento parcelamento){

		boolean resultado = false;

		if(parcelamento != null){
			boolean multaDifZero = (parcelamento.getValorMulta() != null)
							&& !(parcelamento.getValorMulta().compareTo(BigDecimal.ZERO) == 0);
			boolean descontoAntiguidadeDifZero = (parcelamento.getValorDescontoAntiguidade() != null)
							&& !(parcelamento.getValorDescontoAntiguidade().compareTo(BigDecimal.ZERO) == 0);
			boolean atualizacaoMonetariaIgualZero = (parcelamento.getValorAtualizacaoMonetaria() != null)
							&& (parcelamento.getValorAtualizacaoMonetaria().compareTo(BigDecimal.ZERO) == 0);
			boolean jurosMoraIgualZero = (parcelamento.getValorJurosMora() != null)
							&& (parcelamento.getValorJurosMora().compareTo(BigDecimal.ZERO) == 0);
			boolean indicadorAcrescimosImpontualidadeIgualZero = (parcelamento.getIndicadorAcrescimosImpontualdade() != null)
							&& (parcelamento.getIndicadorAcrescimosImpontualdade().compareTo(Short.valueOf("2")) == 0);

			resultado = (multaDifZero || descontoAntiguidadeDifZero) && atualizacaoMonetariaIgualZero && jurosMoraIgualZero
							&& indicadorAcrescimosImpontualidadeIgualZero;

		}

		return resultado;
	}

	/**
	 * Inserir um comando de atividade de cobrança de Cronograma
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Inserir cobranca acao atividade comando
	 * 
	 * @author ebandeira henrique
	 * @date 29/08/2008
	 * @since v0.04
	 *        Alteração para v0.06
	 * @author Virgínia Melo
	 * @date 06/11/2008
	 */
	public void inserirComandoAcaoCobrancaCronograma(CobrancaAtividade cobrancaAtividade, CobrancaAcao cobrancaAcao,
					CobrancaGrupo cobrancaGrupo, Empresa empresa, Usuario usuarioLogado) throws ControladorException{

		// valida Empresa e datas informadas
		/*
		 * if (dataPrevistaAcao != null){
		 * try {
		 * Util.formatarData(dataPrevistaAcao);
		 * }catch (Exception e) {
		 * throw new ControladorException("atencao.data_previsao_acao_invalida");
		 * }
		 * }else {
		 * throw new ControladorException("atencao.data_previsao_acao_invalida");
		 * }
		 * if (dataLimiteAcao != null){
		 * try {
		 * Util.formatarData(dataLimiteAcao);
		 * }catch (Exception e) {
		 * throw new ControladorException("atencao.data_limite_acao_invalida");
		 * }
		 * }else {
		 * throw new ControladorException("atencao.data_limite_acao_invalida");
		 * }
		 */

		// [FS0001] verifica existência de Dados
		if(empresa != null && empresa.getId() != null){
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
			filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, empresa.getId()));

			Collection colecaoEmpresas = getControladorUtil().pesquisar(filtroEmpresa, Empresa.class.getName());

			if(colecaoEmpresas == null || colecaoEmpresas.isEmpty()){
				throw new ControladorException("atencao.empresa_comando_cobranca_acao_inexistente");
			}
		}else{
			throw new ControladorException("atencao.empresa_comando_cobranca_acao_nao_informado");
		}

		// [FS0001] e [FS0019]
		/*
		 * if (programaCobranca != null && programaCobranca.getId() != null){
		 * FiltroProgramaCobranca filtroProgramaCobranca = new FiltroProgramaCobranca();
		 * filtroProgramaCobranca.adicionarParametro(new ParametroSimples(FiltroProgramaCobranca.ID,
		 * programaCobranca.getId()));
		 * Collection colecaoProgramasCobranca = (Collection)
		 * getControladorUtil().pesquisar(filtroProgramaCobranca,ProgramaCobranca.class.getName());
		 * //[FS0019] - Verificar Programa Selcionado
		 * if(colecaoProgramasCobranca != null && !colecaoProgramasCobranca.isEmpty()){
		 * Iterator iteratorColecaoProgramaCobranca = colecaoProgramasCobranca.iterator();
		 * while (iteratorColecaoProgramaCobranca.hasNext()) {
		 * ProgramaCobranca programaCobrancaPesquisa = (ProgramaCobranca)
		 * iteratorColecaoProgramaCobranca.next();
		 * if(programaCobrancaPesquisa == null || programaCobrancaPesquisa.getDataEncerramento() !=
		 * null){
		 * throw new ControladorException("atencao.programa_cobranca_encerrado");
		 * }
		 * }
		 * } else {
		 * throw new ControladorException("atencao.programa_cobranca_inexistente");
		 * }
		 * }else{
		 * throw new ControladorException("atencao.programa_cobranca_inexistente");
		 * }
		 */

		// Verificação do GrupoCobrança
		if(cobrancaGrupo != null && cobrancaGrupo.getId() != null){
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
			filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, cobrancaGrupo.getId()));

			Collection colecaoCobrancasGrupo = getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

			if(colecaoCobrancasGrupo == null || colecaoCobrancasGrupo.isEmpty()){
				throw new ControladorException("atencao.grupo_cobranca_acao_inexistente");
			}
			CobrancaGrupo cobrancaGrupoBase = (CobrancaGrupo) Util.retonarObjetoDeColecao(colecaoCobrancasGrupo);
			if(cobrancaGrupoBase.getAnoMesReferencia() == null){
				throw new ControladorException("atencao.grupo_cobranca_ano_mes_referencia_inexistente");
			}
			cobrancaGrupo.setAnoMesReferencia(cobrancaGrupoBase.getAnoMesReferencia());
		}else{
			throw new ControladorException("atencao.grupo_cobranca_acao_nao_informado");
		}

		// [FS0020]
		if(cobrancaAcao != null && cobrancaAcao.getId() != null){
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, cobrancaAcao.getId()));

			Collection colecaoCobrancasAcao = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if(colecaoCobrancasAcao == null || colecaoCobrancasAcao.isEmpty()){
				throw new ControladorException("atencao.cobranca_acao_inexistente");
			}
			// verificação 1.1
			FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
			// filtroCobrancaAcaoCronograma.adicionarParametro(new
			// ParametroSimples(FiltroCobrancaAcaoCronograma.PROGRAMA_COBRANCA, programaCobranca));
			filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
							cobrancaAcao.getId()));
			filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_GRUPO_ID, cobrancaGrupo.getId()));
			filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_GRUPO_MES_REFERENCIA, cobrancaGrupo
											.getAnoMesReferencia()));

			Collection<CobrancaAcaoCronograma> colecaoAcaoCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoCronograma,
							CobrancaAcaoCronograma.class.getName());
			if(colecaoAcaoCronograma == null || colecaoAcaoCronograma.isEmpty()){
				throw new ControladorException("atencao.cobranca_acao_sem_cronograma");
			}

		}else{
			throw new ControladorException("atencao.cobranca_acao_nao_informado");
		}

		// Obtem o Cronograma Ação Atividade Cronograma
		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		// filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new
		// ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.PROGRAMA_COBRANCA,
		// programaCobranca));
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO, cobrancaAcao));
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID, cobrancaGrupo.getId()));
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_REFERENCIA, cobrancaGrupo
														.getAnoMesReferencia()));

		Collection<CobrancaAcaoAtividadeCronograma> colecaoAcaoCronograma = getControladorUtil().pesquisar(
						filtroCobrancaAcaoAtividadeCronograma, CobrancaAcaoAtividadeCronograma.class.getName());
		for(Iterator iterator = colecaoAcaoCronograma.iterator(); iterator.hasNext();){
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iterator.next();

			cobrancaAcaoAtividadeCronograma.setComando(new Date());
			// cobrancaAcaoAtividadeCronograma.setDataPrevista(dataPrevistaAcao);
			// cobrancaAcaoAtividadeCronograma.setDataPrazoAcao(dataLimiteAcao);
			cobrancaAcaoAtividadeCronograma.setCobrancaAtividade(cobrancaAtividade);
			cobrancaAcaoAtividadeCronograma.setEmpresa(empresa);

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_CRONOGRAMA,
							new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_CRONOGRAMA);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);
			cobrancaAcaoAtividadeCronograma.setOperacaoEfetuada(operacaoEfetuada);
			cobrancaAcaoAtividadeCronograma.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronograma);

			getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);
		}
	}

	/**
	 * Inserir um comando de atividade de cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Inserir cobranca acao atividade comando
	 * [SB0007] - Inserir cobranca acao atividade comando
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	// public void inserirComandoAcaoCobrancaEventual(String idCobrancaAcao, String
	// idCobrancaAtividade, String idCobrancaGrupo,
	// String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal, String
	// codigoSetorComercialInicial,
	// String codigoSetorComercialFinal, String idSetorComercialInicial, String
	// idSetorComercialFinal, String idCliente,
	// String idClienteRelacaoTipo, String anoMesReferencialInicial, String anoMesReferencialFinal,
	// String dataVencimentoContaInicial, String dataVencimentoContaFinal, String indicador, String
	// idRotaInicial,
	// String idRotaFinal, String idUnidadeNegocio) throws ControladorException{
	//
	// // executar comando
	// CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new
	// CobrancaAcaoAtividadeComando();
	//
	// // id gerado pelo sistema
	// CobrancaAcao cobrancaAcao = new CobrancaAcao();
	//
	// FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
	// filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID,
	// idCobrancaAcao));
	// filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
	// filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
	// Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao,
	// CobrancaAcao.class.getName());
	// cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();
	//
	// // id da ação de cobranca selecionada
	// cobrancaAcaoAtividadeComando.setCobrancaAcao(cobrancaAcao);
	// // id da atividade de cobranca
	//
	// FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
	// filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.ID,
	// idCobrancaAtividade));
	// Collection colecaoCobrancaAtividade =
	// this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
	// CobrancaAtividade.class.getName());
	// CobrancaAtividade cobrancaAtividade = (CobrancaAtividade)
	// colecaoCobrancaAtividade.iterator().next();
	// cobrancaAcaoAtividadeComando.setCobrancaAtividade(cobrancaAtividade);
	// // comando
	// cobrancaAcaoAtividadeComando.setComando(new Date());
	// // realizacao
	// cobrancaAcaoAtividadeComando.setRealizacao(null);
	// // ultima alteracao
	// cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());
	// // usuario
	// Usuario usuario = new Usuario();
	// usuario.setId(Integer.valueOf(1));
	// cobrancaAcaoAtividadeComando.setUsuario(usuario);
	// // empresa
	// cobrancaAcaoAtividadeComando.setEmpresa(null);
	//
	// // id Cobranca Grupo
	// if(idCobrancaGrupo != null && !idCobrancaGrupo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO
	// + "")){
	// CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
	// cobrancaGrupo.setId(Integer.valueOf(idCobrancaGrupo));
	// cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
	// }else{
	// cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
	// }
	//
	// // id Gerencia Regional
	// if(idGerenciaRegional != null &&
	// !idGerenciaRegional.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
	// GerenciaRegional gerenciaRegional = new GerenciaRegional();
	// gerenciaRegional.setId(Integer.valueOf(idGerenciaRegional));
	// cobrancaAcaoAtividadeComando.setGerenciaRegional(gerenciaRegional);
	// }else{
	// cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
	// }
	//
	// // localidade inicial e final
	// if((idLocalidadeInicial != null && !idLocalidadeInicial.equals("")) && (idLocalidadeFinal !=
	// null && !idLocalidadeFinal.equals(""))){
	// Localidade localidadeInicial = new Localidade();
	// localidadeInicial.setId(Integer.valueOf(idLocalidadeInicial));
	// cobrancaAcaoAtividadeComando.setLocalidadeInicial(localidadeInicial);
	//
	// Localidade localidadeFinal = new Localidade();
	// localidadeFinal.setId(Integer.valueOf(idLocalidadeFinal));
	// cobrancaAcaoAtividadeComando.setLocalidadeFinal(localidadeFinal);
	// }else{
	// cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
	// cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
	// }
	//
	// // codigo do setor comercial inicial e final
	// if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
	// && (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){
	// cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(Integer.valueOf(codigoSetorComercialInicial));
	// cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(Integer.valueOf(codigoSetorComercialFinal));
	// }else{
	// cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(null);
	// cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
	// }//
	//
	// // rota inicial e final
	// if((idRotaInicial != null && !idRotaInicial.equals(ConstantesSistema.NUMERO_NAO_INFORMADO +
	// ""))
	// && (idRotaFinal != null && !idRotaFinal.equals(ConstantesSistema.NUMERO_NAO_INFORMADO +
	// ""))){
	// Rota rotaInicial = new Rota();
	// rotaInicial.setId(Integer.valueOf(idRotaInicial));
	// cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);
	//
	// Rota rotaFinal = new Rota();
	// rotaFinal.setId(Integer.valueOf(idRotaFinal));
	// cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
	// }else{
	// cobrancaAcaoAtividadeComando.setRotaInicial(null);
	// cobrancaAcaoAtividadeComando.setRotaFinal(null);
	// }
	//
	// // id do cliente
	// if(idCliente != null && !idCliente.equals("")){
	// Cliente cliente = new Cliente();
	// cliente.setId(Integer.valueOf(idCliente));
	// cobrancaAcaoAtividadeComando.setCliente(cliente);
	// }else{
	// cobrancaAcaoAtividadeComando.setCliente(null);
	// }
	//
	// // id cliente relação tipo
	// if(idClienteRelacaoTipo != null &&
	// !idClienteRelacaoTipo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
	// ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
	// clienteRelacaoTipo.setId(Integer.valueOf(idClienteRelacaoTipo));
	// cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(clienteRelacaoTipo);
	// }else{
	// cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
	// }
	//
	// // inicial referencial
	// if(anoMesReferencialInicial != null && !anoMesReferencialInicial.equals("")){
	// String anoInicial = anoMesReferencialInicial.substring(3, 7);
	// String mesInicial = anoMesReferencialInicial.substring(0, 2);
	// String anoMes = anoInicial + mesInicial;
	//
	// cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(Integer.valueOf(anoMes));
	// }else{
	// cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(Integer.valueOf("198001"));
	// }
	//
	// // final referencial
	// if(anoMesReferencialFinal != null && !anoMesReferencialFinal.equals("")){
	// String anoFinal = anoMesReferencialFinal.substring(3, 7);
	// String mesFinal = anoMesReferencialFinal.substring(0, 2);
	// String anoMes = anoFinal + mesFinal;
	// cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(Integer.valueOf(anoMes));
	// }else{
	// String periodoFinalConta =
	// this.getControladorUtil().pesquisarParametrosDoSistema().getAnoMesArrecadacao() + "";
	// String ano = periodoFinalConta.substring(0, 4);
	// String mes = periodoFinalConta.substring(4, 6);
	// cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(Integer.valueOf(ano + mes));
	// }
	//
	// // data inicial conta
	// if(dataVencimentoContaInicial != null && !dataVencimentoContaInicial.equals("")){
	// cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util.converteStringParaDate(dataVencimentoContaInicial));
	// }else{
	// cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util.converteStringParaDate("01/01/1980"));
	// }
	//
	// // data final conta
	// if(dataVencimentoContaFinal != null && !dataVencimentoContaFinal.equals("")){
	// cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util.converteStringParaDate(dataVencimentoContaFinal));
	// }else{
	//
	// Calendar calendarNova = Calendar.getInstance();
	//
	// calendarNova.add(Calendar.MONTH, -1);
	//
	// String dataNova = "";
	// dataNova = calendarNova.getActualMaximum(Calendar.DAY_OF_MONTH) + "";
	//
	// if(calendarNova.get(Calendar.MONTH) < 10){
	// dataNova = dataNova + "/0" + (calendarNova.get(Calendar.MONTH) + 1);
	// }else{
	// dataNova = dataNova + "/" + (calendarNova.get(Calendar.MONTH) + 1);
	// }
	// dataNova = dataNova + "/" + calendarNova.get(Calendar.YEAR);
	//
	// cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util.converteStringParaDate(dataNova));
	// }
	//
	// // indicador de critério
	// if(indicador != null && !indicador.equals("")){
	// if(indicador.equals("Rota")){
	// cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf((short) 1));
	// }else{
	// cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf((short) 2));
	// }
	// cobrancaAcaoAtividadeComando.setCobrancaCriterio(null);
	// }
	//
	// cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(null);
	// cobrancaAcaoAtividadeComando.setValorDocumentos(null);
	// cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(null);
	//
	// // inserir cobranca acao atividade comando
	// Integer idCobrancaAcaoAtividadeComando = (Integer)
	// this.getControladorUtil().inserir(cobrancaAcaoAtividadeComando);
	//
	// cobrancaAcaoAtividadeComando.setId(idCobrancaAcaoAtividadeComando);
	//
	// Collection colecaoIdCobrancaAtividadeComandoRota = new ArrayList();
	//
	// if((idGerenciaRegional != null && !idGerenciaRegional.equals(""))
	// && (idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))){
	// // [FS008] - Obter Lista de Rotas
	// Collection colecaoRotas = this.obterListasRotas(idRotaInicial, idRotaFinal,
	// idSetorComercialInicial, idSetorComercialFinal,
	// idLocalidadeInicial, idLocalidadeFinal, idGerenciaRegional, idUnidadeNegocio);
	// if(colecaoRotas != null && !colecaoRotas.isEmpty()){
	//
	// CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
	// Iterator iteratorColecaoRotas = colecaoRotas.iterator();
	// while(iteratorColecaoRotas.hasNext()){
	// Rota rota = (Rota) iteratorColecaoRotas.next();
	//
	// CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new
	// CobrancaAtividadeComandoRotaPK();
	// cobrancaAtividadeComandoRotaPK.setCobrancaAcaoAtividadeComandoId(cobrancaAcaoAtividadeComando.getId());
	// cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());
	//
	// cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
	// cobrancaAtividadeComandoRota.setComp_id(cobrancaAtividadeComandoRotaPK);
	// cobrancaAtividadeComandoRota.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
	// cobrancaAtividadeComandoRota.setRota(rota);
	// cobrancaAtividadeComandoRota.setUltimaAlteracao(new Date());
	//
	// // inserir cobranca atividade comando rota
	// CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK =
	// (CobrancaAtividadeComandoRotaPK) this
	// .getControladorUtil().inserir(cobrancaAtividadeComandoRota);
	//
	// colecaoIdCobrancaAtividadeComandoRota.add(compIDCobrancaAtividadeComandoRotaPK);
	// }
	// }
	// }
	// }

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Consultar Cobranca Ação
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcao consultarCobrancaAcao(String idCobrancaAcao) throws ControladorException{

		CobrancaAcao cobrancaAcao = null;

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

		if(colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()){
			cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();
		}

		return cobrancaAcao;

	}

	/**
	 * Obter Lista de Rotas Comando
	 * [UC0243] - Inserir Comando de Ação de Cobrança
	 * Selecionar as Lsitas de Rotas do Comando
	 * [SF0009] - Selecionar Lista de Rotas do Comando
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * @param idCobrancaGrupo
	 * @return
	 */
	public Collection obterListaRotasComando(String idCobrancaGrupo, String idCobrancaAcaoAtividadeComando) throws ControladorException{

		Collection colecaoListaRotasComando = null;
		if(idCobrancaGrupo != null && !idCobrancaGrupo.equals("")){
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, idCobrancaGrupo));
			// filtroRota
			// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
			colecaoListaRotasComando = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());
		}else{

			if(idCobrancaAcaoAtividadeComando != null && !idCobrancaAcaoAtividadeComando.equals("")){
				colecaoListaRotasComando = new ArrayList();
				FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
				filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota");
				filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota");

				filtroCobrancaAtividadeComandoRotas.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
								idCobrancaAcaoAtividadeComando));

				Collection colecaoRotasCobrancaAtividadeComandoRota = this.getControladorUtil().pesquisar(
								filtroCobrancaAtividadeComandoRotas, CobrancaAtividadeComandoRota.class.getName());

				if(colecaoRotasCobrancaAtividadeComandoRota != null && !colecaoRotasCobrancaAtividadeComandoRota.isEmpty()){
					Iterator iteratorColecaoRotasCobrancaAtividadeComandoRota = colecaoRotasCobrancaAtividadeComandoRota.iterator();

					FiltroRota filtroRota = new FiltroRota();
					while(iteratorColecaoRotasCobrancaAtividadeComandoRota.hasNext()){
						CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoRotasCobrancaAtividadeComandoRota
										.next();

						filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.ID_ROTA, cobrancaAtividadeComandoRota.getRota()
										.getId()));
						// filtroRota
						// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);

						Collection colecaoRota = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

						filtroRota.limparListaParametros();

						if(colecaoListaRotasComando != null && !colecaoListaRotasComando.isEmpty()){
							colecaoListaRotasComando.add(colecaoRota.iterator().next());
						}
					}
					filtroRota = null;
				}

			}

		}

		return colecaoListaRotasComando;

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Executa o Comando Eventual
	 * [SF0009] Executar Comando Eventual
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @param cobrancaAtividade
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcao
	 * @param colecaoRotas
	 * @return
	 * @throws ControladorException
	 */
	public GerarAtividadeAcaoCobrancaHelper executarComandoEventual(CobrancaAtividade cobrancaAtividade,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, CobrancaAcao cobrancaAcao, Collection colecaoRotas,
					Usuario usuario) throws ControladorException{

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = null;
		if(cobrancaAtividade.getId().intValue() == CobrancaAtividade.ENCERRAR.intValue()){
			// [UC0000] - Encerrar Atividade de A ção de Cobrança
			// TODO Falta Implementar o caso de uso que não existe
		}else{
			String[] idComandos = new String[1];
			idComandos[0] = cobrancaAcaoAtividadeComando.getId().toString();
			// [UC0251] - Gerar Atividade de Ação de Cobrança
			/* gerarAtividadeAcaoCobrancaHelper = */this.executarAtividadeAcaoCobranca(null, idComandos, usuario);
			/*
			 * ( null, this.getControladorUtil() .pesquisarParametrosDoSistema()
			 * .getAnoMesFaturamento().intValue(), null,
			 * cobrancaAcaoAtividadeComando.getId(), colecaoRotas, cobrancaAcao,
			 * cobrancaAtividade, new Integer(
			 * cobrancaAcaoAtividadeComando.getIndicadorCriterio() .toString()),
			 * cobrancaAcaoAtividadeComando .getCobrancaCriterio(),
			 * cobrancaAcaoAtividadeComando.getCliente(),
			 * cobrancaAcaoAtividadeComando.getClienteRelacaoTipo(),
			 * cobrancaAcaoAtividadeComando
			 * .getAnoMesReferenciaContaInicial().toString(),
			 * cobrancaAcaoAtividadeComando
			 * .getAnoMesReferenciaContaFinal().toString(),
			 * cobrancaAcaoAtividadeComando .getDataVencimentoContaInicial(),
			 * cobrancaAcaoAtividadeComando.getDataVencimentoContaFinal());
			 */
		}

		return gerarAtividadeAcaoCobrancaHelper;

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Verificar Seleção de pelo menos uma atividade de cobrança
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @author eduardo henrique
	 * @date 01/09/2008
	 *       Alteração para exibição do Programa de Cobrança ao invés da Atividade de Cobrança
	 * @author Virgínia Melo
	 * @date 07/11/2008
	 *       Desfazer alteração para v0.06.
	 */
	public Collection obterListaAtividadeCronogramaAcaoCobrancaComandadas() throws ControladorException{

		Collection colecaoAtividadeCronogramaAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.COMANDO));

		ConectorOr conectorOr = new ConectorOr(new ParametroNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO), new MenorQue(
						FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO, FiltroCobrancaAcaoAtividadeCronograma.COMANDO));

		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);

		filtroCobrancaAcaoAtividadeCronograma.setConsultaSemLimites(true);

		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(conectorOr);

		colecaoAtividadeCronogramaAcaoCobrancaComandadas = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		return colecaoAtividadeCronogramaAcaoCobrancaComandadas;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Verificar Seleção de pelo menos uma atividade de cobrança
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * @author eduardo henrique
	 * @date 01/09/2008
	 *       Alteração para exibição do Programa de Cobrança ao invés da Atividade de Cobrança
	 * @author Virgínia Melo
	 * @date 10/11/2008
	 *       Alterações para a v0.06 (desfazer)
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListaAtividadesEventuaisAcaoCobrancaComandadas() throws ControladorException{

		Collection colecaoAtividadesEventuaisAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeComando.COMANDO));

		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
						FiltroCobrancaAcaoAtividadeComando.DATA_ENCERRAMENTO_REALIZADA));

		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);

		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);

		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);

		filtroCobrancaAcaoAtividadeComando.setConsultaSemLimites(true);

		colecaoAtividadesEventuaisAcaoCobrancaComandadas = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		return colecaoAtividadesEventuaisAcaoCobrancaComandadas;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Exclui Comando de Atividade do Cronograma de Ação de Cobrança
	 * [SB0001] - Excluir Comando de Atividade de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeCronogramaAcaoCobranca(String[] idsCobrancaAcaoAtividadeCronograma) throws ControladorException{

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);

		for(int i = 0; i < idsCobrancaAcaoAtividadeCronograma.length; i++){
			String idCobrancaAcaoAtividadeCrongrama = idsCobrancaAcaoAtividadeCronograma[i];

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID,
							idCobrancaAcaoAtividadeCrongrama));

			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) ((List) (getControladorUtil()
							.pesquisar(filtroCobrancaAcaoAtividadeCronograma, CobrancaAcaoAtividadeCronograma.class.getName()))).get(0);

			filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID,
							idCobrancaAcaoAtividadeCrongrama));

			// Procura na base
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaNaBase = (CobrancaAcaoAtividadeCronograma) ((List) (getControladorUtil()
							.pesquisar(filtroCobrancaAcaoAtividadeCronograma, CobrancaAcaoAtividadeCronograma.class.getName()))).get(0);

			filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();

			// Verificar se o CobrancaAcaoAtividadeCronograma já foi atualizado
			// por outro usuário
			if(cobrancaAcaoAtividadeCronogramaNaBase.getUltimaAlteracao().after(cobrancaAcaoAtividadeCronograma.getUltimaAlteracao())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaAcaoAtividadeCronograma.setComando(null);
			cobrancaAcaoAtividadeCronograma.setUltimaAlteracao(new Date());
			// atualiza

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * RegistradorOperacao registradorOperacao = new
			 * RegistradorOperacao(
			 * Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_CRONOGRAMA, new
			 * UsuarioAcaoUsuarioHelper(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			 * Operacao operacao = new Operacao();
			 * operacao.setId(Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_CRONOGRAMA);
			 * OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			 * operacaoEfetuada.setOperacao(operacao);
			 * cobrancaAcaoAtividadeCronograma.setOperacaoEfetuada(operacaoEfetuada);
			 * cobrancaAcaoAtividadeCronograma.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronograma);
			 * //------------ REGISTRAR TRANSAÇÃO ----------------
			 */

			getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);
		}
		filtroCobrancaAcaoAtividadeCronograma = null;

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Exclui Comando de Atividade de Eventual de Ação de Cobrança
	 * [SB0003] - Excluir Comando de Atividade Eventual de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeEventualAcaoCobranca(String[] idsCobrancaAcaoAtividadeEventual) throws ControladorException{

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();

		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.USUARIO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.EMPRESA);
		filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);

		FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();

		filtroCobrancaAtividadeComandoRotas
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO);

		for(int i = 0; i < idsCobrancaAcaoAtividadeEventual.length; i++){
			String idCobrancaAcaoAtividadeEventual = idsCobrancaAcaoAtividadeEventual[i];

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeEventual));

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) ((List) (getControladorUtil()
							.pesquisar(filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName()))).get(0);

			filtroCobrancaAcaoAtividadeComando.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeEventual));

			// Procura na base
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoNaBase = (CobrancaAcaoAtividadeComando) ((List) (getControladorUtil()
							.pesquisar(filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName()))).get(0);

			filtroCobrancaAcaoAtividadeComando.limparListaParametros();

			// Verificar se o CobrancaAcaoAtividadeComando já foi atualizado por
			// outro usuário
			if(cobrancaAcaoAtividadeComandoNaBase.getUltimaAlteracao().after(cobrancaAcaoAtividadeComando.getUltimaAlteracao())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			// filtrar as rotas dos comandos

			filtroCobrancaAtividadeComandoRotas
							.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
											idCobrancaAcaoAtividadeEventual));

			Collection colecaoCobrancaAtividadeComandoRotas = getControladorUtil().pesquisar(filtroCobrancaAtividadeComandoRotas,
							CobrancaAtividadeComandoRota.class.getName());

			filtroCobrancaAtividadeComandoRotas.limparListaParametros();

			if(colecaoCobrancaAtividadeComandoRotas != null && !colecaoCobrancaAtividadeComandoRotas.isEmpty()){
				Iterator iteratorColecaoCobrancaAtividadeComandoRotas = colecaoCobrancaAtividadeComandoRotas.iterator();

				while(iteratorColecaoCobrancaAtividadeComandoRotas.hasNext()){
					CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoCobrancaAtividadeComandoRotas
									.next();
					// exclui cobrancaAtividadeComandoRota
					getControladorUtil().remover(cobrancaAtividadeComandoRota);
				}
			}

			// exclui cobrancaAcaoAtividadeComando
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * RegistradorOperacao registradorOperacao = new
			 * RegistradorOperacao(
			 * Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_EVENTUAL, new
			 * UsuarioAcaoUsuarioHelper(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			 * Operacao operacao = new Operacao();
			 * operacao.setId(Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_EVENTUAL);
			 * OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			 * operacaoEfetuada.setOperacao(operacao);
			 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
			 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
			 */
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			getControladorUtil().remover(cobrancaAcaoAtividadeComando);
		}

		filtroCobrancaAcaoAtividadeComando = null;
		filtroCobrancaAtividadeComandoRotas = null;

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar Linhas do Criterios
	 * [SB0005] - Consultar Linhas do Criterios
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCriterioCobranca
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarLinhasCriterio(String idCriterioCobranca) throws ControladorException{

		FiltroCobrancaCriterioLinha filtroCobrancaCriterioLinha = new FiltroCobrancaCriterioLinha();
		filtroCobrancaCriterioLinha.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterioLinha.COBRANCA_CRITERIO_ID,
						idCriterioCobranca));
		filtroCobrancaCriterioLinha.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterioLinha.CATEGORIA);
		filtroCobrancaCriterioLinha.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterioLinha.IMOVEL_PERFIL);
		filtroCobrancaCriterioLinha.setCampoOrderBy(FiltroCobrancaCriterioLinha.ID_IMOVEL_PERFIL, FiltroCobrancaCriterioLinha.ID_CATEGORIA);

		Collection colecaoCobrancaCriterioLinha = getControladorUtil().pesquisar(filtroCobrancaCriterioLinha,
						CobrancaCriterioLinha.class.getName());

		if(colecaoCobrancaCriterioLinha == null || colecaoCobrancaCriterioLinha.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhum_registro_tabela", null, "Tabela Cobrança Critério Linha");
		}

		return colecaoCobrancaCriterioLinha;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Selecionar Critérios do Comando
	 * [SB0004] - Selecionar Critérios do Comando
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * @param idCobrancaAcao
	 * @param idCobrancaAcaoAtividadeComando
	 * @param indicadorCriterioComandoMarcado
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarCriteriosComando(String idCobrancaAcao) throws ControladorException{

		FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();

		filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID_COBRANCA_ACAO, idCobrancaAcao));
		// filtroCobrancaCriterio
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterio.COBRANCA_ACAO);

		Collection colecaoCriterioCobranca = getControladorUtil().pesquisar(filtroCobrancaCriterio, CobrancaCriterio.class.getName());

		if(colecaoCriterioCobranca == null || colecaoCriterioCobranca.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhum_registro_tabela", null, "Tabela Cobrança Critério");
		}
		return colecaoCriterioCobranca;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar O Periodo Final da Conta para usar em Cobranca Ação Atividade
	 * Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public String consultarPeriodoFinalContaCobrancaAcaoAtividadeComando() throws ControladorException{

		String periodoFinalContaCobrancaAcaoAtividadeComando = null;

		String periodoFinalConta = this.getControladorUtil().pesquisarParametrosDoSistema().getAnoMesArrecadacao() + "";
		if(periodoFinalConta != null && !periodoFinalConta.equals("")){

			String ano = periodoFinalConta.substring(0, 4);
			String mes = periodoFinalConta.substring(4, 6);

			periodoFinalContaCobrancaAcaoAtividadeComando = mes + "/" + ano;
		}

		return periodoFinalContaCobrancaAcaoAtividadeComando;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar O Periodo Vencimento da Conta para usar em Cobranca Ação
	 * Atividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 */
	public String consultarPeriodoVencimentoContaFinalCobrancaAcaoAtividadeComando() throws ControladorException{

		Calendar calendar = new GregorianCalendar();

		calendar.add(Calendar.MONTH, -1);

		String periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = "";
		if(calendar.get(Calendar.DAY_OF_MONTH) < 10){
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando + "0"
							+ calendar.get(Calendar.DAY_OF_MONTH);
		}else{
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = calendar.get(Calendar.DAY_OF_MONTH) + "";
		}
		if(calendar.get(Calendar.MONTH) < 10){
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando + "/0"
							+ calendar.get(Calendar.MONTH);
		}else{
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando + "/"
							+ calendar.get(Calendar.MONTH);
		}
		periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando + "/"
						+ calendar.get(Calendar.YEAR);

		return periodoVencimentoContaFinalCobrancaAcaoAtividadeComando;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Grupo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaGrupo() throws ControladorException{

		FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
		filtroCobrancaGrupo.setCampoOrderBy(FiltroCobrancaGrupo.DESCRICAO);
		Collection colecaoCobrancaGrupo = this.getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

		if(colecaoCobrancaGrupo == null || colecaoCobrancaGrupo.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhum_registro_tabela", null, "Tabela Cobrança Grupo");
		}

		return colecaoCobrancaGrupo;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAtividade() throws ControladorException{

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.setCampoOrderBy(FiltroCobrancaAtividade.DESCRICAO);
		Collection colecaoCobrancaAtividade = this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if(colecaoCobrancaAtividade == null || colecaoCobrancaAtividade.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhum_registro_tabela", null, "Tabela Cobrança Atividade");
		}
		return colecaoCobrancaAtividade;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobranca Acao
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAcao() throws ControladorException{

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.setCampoOrderBy(FiltroCobrancaAcao.DESCRICAO);
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

		if(colecaoCobrancaAcao == null || colecaoCobrancaAcao.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhum_registro_tabela", null, "Tabela Cobrança Ação");
		}

		return colecaoCobrancaAcao;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Gerencia Regionais
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoGerenciaRegional() throws ControladorException{

		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();
		filtroGerenciaRegional.setCampoOrderBy(FiltroGerenciaRegional.NOME_ABREVIADO);
		Collection colecaoGerenciaRegional = this.getControladorUtil().pesquisar(filtroGerenciaRegional, GerenciaRegional.class.getName());

		if(colecaoGerenciaRegional == null || colecaoGerenciaRegional.isEmpty()){
			throw new ControladorException("atencao.pesquisa_inexistente", null, "Tabela Gerência Regional");
		}

		return colecaoGerenciaRegional;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Unidade de Negocio
	 * 
	 * @author Rafael Santos
	 * @date 11/10/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoUnidadeNegocio() throws ControladorException{

		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();
		filtroUnidadeNegocio.setCampoOrderBy(FiltroGerenciaRegional.NOME_ABREVIADO);
		Collection colecaoUnidadeNegocio = this.getControladorUtil().pesquisar(filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if(colecaoUnidadeNegocio == null || colecaoUnidadeNegocio.isEmpty()){
			throw new ControladorException("atencao.pesquisa_inexistente", null, "Tabela Unidade Negocio");
		}

		return colecaoUnidadeNegocio;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Relações Cliente Tipo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoClienteRelacaoTipo() throws ControladorException{

		FiltroClienteRelacaoTipo filtroClienteRelacaoTipo = new FiltroClienteRelacaoTipo();
		filtroClienteRelacaoTipo.setCampoOrderBy(FiltroClienteRelacaoTipo.DESCRICAO);
		// carrega os cliente relação tipo
		Collection colecaoClienteRelacaoTipo = this.getControladorUtil().pesquisar(filtroClienteRelacaoTipo,
						ClienteRelacaoTipo.class.getName());
		if(colecaoClienteRelacaoTipo == null || colecaoClienteRelacaoTipo.isEmpty()){
			throw new ControladorException("atencao.pesquisa_inexistente", null, "Tabela Cliente Relação Tipo");
		}
		return colecaoClienteRelacaoTipo;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Cobrança Atividade pela Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade obterCobrancaAtividade(String idCobrancaAtividade) throws ControladorException{

		CobrancaAtividade cobrancaAtividade = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();

		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.ID, idCobrancaAtividade));

		Collection colecaoCobrancaAtividade = this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if(colecaoCobrancaAtividade != null && !colecaoCobrancaAtividade.isEmpty()){
			cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade.iterator().next();
		}

		return cobrancaAtividade;
	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar as Coleção de Rotas do Setor Comercial
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRota(String idSetorComercial) throws ControladorException{

		FiltroRota filtroRota = new FiltroRota();
		filtroRota.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
		filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.SETOR_COMERCIAL_ID, idSetorComercial));

		Collection colecaoRota = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		return colecaoRota;

	}

	/**
	 * Inserir um comando de atividade de cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Verificar existência do comando eventual na base
	 * [FS0016] - Verificar existência do comando eventual
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @throws ControladorException
	 * @date 04/04/2006,05/07/2007
	 * @author eduardo henrique
	 * @date 30/08/2008
	 *       Alterações no [UC0243]
	 * @author Virgínia Melo
	 * @date 08/11/2008
	 *       Alterações no [UC0243]
	 * @author Virgínia Melo
	 * @date 05/08/2009
	 *       Não considerar os campos anoMesReferencialInicial, anoMesReferencialFinal,
	 *       dataVencimentoContaInicial e dataVencimentoContaFinal.
	 * @param idCobrancaAcao
	 *            Obrigatório
	 * @param idProgramaCobranca
	 *            Obrigatório
	 * @param idCobrancaAcaoAtividadeComando
	 *            (Utilizado apenas na verificação da Alteração - será usado como !=)
	 */
	private void verficarExistenciaComandoEventual(String[] idsCobrancaAcao, String idCobrancaAtividade, String idCobrancaGrupo,
					String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal, String codigoSetorComercialInicial,
					String codigoSetorComercialFinal, String idCliente, String idClienteRelacaoTipo, String anoMesReferencialInicial,
					String anoMesReferencialFinal, String dataVencimentoContaInicial, String dataVencimentoContaFinal,
					String indicadorCriterioComando, String quadraInicial, String quadraFinal, String rotaInicial, String rotaFinal,
					String idComando, String idUnidadeNegocio, String codigoClienteSuperior, String idCobrancaAcaoAtividadeComando)
					throws ControladorException{

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		for(int i = 0; i < idsCobrancaAcao.length; i++){

			if(idsCobrancaAcao.length == 1){
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO, idsCobrancaAcao[i]));
			}else{
				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if(i == 0){
					filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO, idsCobrancaAcao[i], FiltroParametro.CONECTOR_OR,
									idsCobrancaAcao.length));
				}else{
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if(idsCobrancaAcao.length == i + 1){
						filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO, idsCobrancaAcao[i]));
					}else{
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO, idsCobrancaAcao[i],
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
		}
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE, idCobrancaAtividade));

		// //data de realização e comando
		// ParametroNulo parametro1 = new
		// ParametroNulo(FiltroCobrancaAcaoAtividadeComando.REALIZACAO);
		// MenorQueComparacaoColuna parametro2 =
		// ConectorOr conectorOr = new ConectorOr(parametro1,parametro2);
		//
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.REALIZACAO,
						FiltroParametro.CONECTOR_OR, 2));
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new MenorQueComparacaoColuna(FiltroCobrancaAcaoAtividadeComando.REALIZACAO,
						FiltroCobrancaAcaoAtividadeComando.COMANDO));

		// id Cobranca Grupo
		if(idCobrancaGrupo != null && !idCobrancaGrupo.equals("") && !idCobrancaGrupo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_GRUPO, idCobrancaGrupo));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_GRUPO));
		}

		// id Gerencia Regional
		if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
						&& !idGerenciaRegional.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL, idGerenciaRegional));
		}else{
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL));
		}

		// id Unidade Negocio
		if(idUnidadeNegocio != null && !idUnidadeNegocio.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO, idUnidadeNegocio));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO));
		}

		// localidade inicial e final
		if((idLocalidadeInicial != null && !idLocalidadeInicial.equals("")) && (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL, idLocalidadeInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL, idLocalidadeFinal));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL));
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL));
		}

		// setor comercial inicial e final
		if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
						&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL, codigoSetorComercialInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL, codigoSetorComercialFinal));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL));
		}

		// id do cliente superior
		if(codigoClienteSuperior != null && !codigoClienteSuperior.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_SUPERIOR, codigoClienteSuperior));
		}else{
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_SUPERIOR));
		}

		// id do cliente
		if(idCliente != null && !idCliente.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE));
		}

		// id cliente relação tipo
		if(idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals("")
						&& !idClienteRelacaoTipo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO, idClienteRelacaoTipo));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO));
		}

		// ano mes referencial inicial
		// ano mes referencial final
		// inicial
		/*
		 * if (anoMesReferencialInicial != null
		 * && !anoMesReferencialInicial.equals("")) {
		 * String anoInicial = anoMesReferencialInicial.substring(3, 7);
		 * String mesInicial = anoMesReferencialInicial.substring(0, 2);
		 * String anoMes = anoInicial + mesInicial;
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL,
		 * anoMes));
		 * } else {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL,
		 * "198001"));
		 * }
		 */

		// final
		/*
		 * if (anoMesReferencialFinal != null
		 * && !anoMesReferencialFinal.equals("")) {
		 * String anoFinal = anoMesReferencialFinal.substring(3, 7);
		 * String mesFinal = anoMesReferencialFinal.substring(0, 2);
		 * String anoMes = anoFinal + mesFinal;
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL,
		 * anoMes));
		 * } else {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL,
		 * "999912"));
		 * }
		 */

		// data vencimento conta inicial
		// data vencimento conta final
		// data inicial
		/*
		 * if (dataVencimentoContaInicial != null
		 * && !dataVencimentoContaInicial.equals("")) {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL,
		 * Util
		 * .converteStringParaDate(dataVencimentoContaInicial)));
		 * } else {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL,
		 * Util.converteStringParaDate("01/01/1980")));
		 * }
		 */

		// data final
		/*
		 * if (dataVencimentoContaFinal != null
		 * && !dataVencimentoContaFinal.equals("")) {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL,
		 * Util
		 * .converteStringParaDate(dataVencimentoContaFinal)));
		 * } else {
		 * filtroCobrancaAcaoAtividadeComando
		 * .adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL,
		 * Util.converteStringParaDate("31/12/9999")));
		 * }
		 */

		// indicador de critério
		if(indicadorCriterioComando != null && !indicadorCriterioComando.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO, indicadorCriterioComando));

			// if(indicadorCriterioComando.equals("Rota")){
			// filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
			// FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO, 1));
			// }else{
			// filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
			// FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO, 2));

			// }
		}

		// cobrança criterio
		if(idComando != null && !idComando.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO, idComando));
		}else{
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO));
		}

		// quadra inicial e final
		if((quadraInicial != null && !quadraInicial.equals("")) && (quadraFinal != null && !quadraFinal.equals(""))){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL, quadraInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL, quadraFinal));
		}else{
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL));
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL));
		}

		// rota inicial e final
		if((rotaInicial != null && !rotaInicial.equals("")) && (rotaFinal != null && !rotaFinal.equals(""))){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_INICIAL, rotaInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_FINAL, rotaFinal));
		}else{
			filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_INICIAL));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_FINAL));
		}

		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.ARQUIVO_IMOVEL));

		if(idCobrancaAcaoAtividadeComando != null){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));
		}

		Collection colecaoCobrancaAcaoAtividadeComando = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		if(colecaoCobrancaAcaoAtividadeComando != null && !colecaoCobrancaAcaoAtividadeComando.isEmpty()){

			// Existe comando não realizado para esta atividade com estes mesmos parametros
			throw new ControladorException("atencao.existe.comando");
		}

	}

	/**
	 * Inserir um comando de atividade de cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Verificar referência final menor que referência inicial
	 * [FS0012] - Verificar referência final menor que referência inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void validarAnoMesInicialFinalComandoAcaoCobranca(String anoMesContaInicial, String anoMesContaFinal)
					throws ControladorException{

		if(anoMesContaFinal != null && !anoMesContaFinal.equals("")){

			String anoFinal = anoMesContaFinal.substring(3, 7);
			String mesFinal = anoMesContaFinal.substring(0, 2);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, 1);
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());

			String periodoFinalConta = this.getControladorUtil().pesquisarParametrosDoSistema().getAnoMesArrecadacao() + "";

			String anoFinalArrecadacao = periodoFinalConta.substring(0, 4);
			String mesFinalArrecadacao = periodoFinalConta.substring(4, 6);

			Calendar periodoAnoMesArrecadacao = new GregorianCalendar();
			periodoAnoMesArrecadacao.set(Calendar.DATE, 1);
			periodoAnoMesArrecadacao.set(Calendar.MONTH, (Integer.valueOf(mesFinalArrecadacao).intValue() - 1));
			periodoAnoMesArrecadacao.set(Calendar.YEAR, Integer.valueOf(anoFinalArrecadacao).intValue());

			if(periodoFinal.compareTo(periodoAnoMesArrecadacao) > 0){
				throw new ControladorException(
				// Mês/Ano Final do Período de Referência das Contas maior que o
				// mês ano da arrecadação({0})
								"atencao.periodo_final.maior.mes_ano", null, mesFinalArrecadacao + "/" + anoFinalArrecadacao);
			}

		}

		if((anoMesContaInicial != null && !anoMesContaInicial.equals("")) && (anoMesContaFinal != null && !anoMesContaFinal.equals(""))){
			if(anoMesContaInicial.length() == 7 & anoMesContaFinal.length() == 7){

				String anoInicial = anoMesContaInicial.substring(3, 7);
				String mesInicial = anoMesContaInicial.substring(0, 2);

				String anoFinal = anoMesContaFinal.substring(3, 7);
				String mesFinal = anoMesContaFinal.substring(0, 2);

				boolean valida = Util.validarAnoMes(anoMesContaInicial);
				if(valida){
					throw new ControladorException("errors.invalid", null, "Mês/Ano Inicial do Período da Referência das Contas");
				}

				valida = Util.validarAnoMes(anoMesContaFinal);
				if(valida){
					throw new ControladorException("errors.invalid", null, "Mês/Ano Final do Período da Referência das Contas");
				}

				Calendar periodoInicial = new GregorianCalendar();
				periodoInicial.set(Calendar.DATE, 1);
				periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
				periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());

				Calendar periodoFinal = new GregorianCalendar();
				periodoFinal.set(Calendar.DATE, 1);
				periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
				periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());

				if(periodoInicial.compareTo(new GregorianCalendar()) > 0){
					throw new ControladorException(//
									// Mês/Ano Final do Período de Referência das Contas
									// posterior ao mês e ano corrente
									"atencao.periodo_inicial.maior.data_corrente");
				}

				if(periodoInicial.compareTo(periodoFinal) > 0){
					throw new ControladorException(
					// Mês/Ano Inicial do Período da Referência das Contas
					// posterior ao Mês/Ano Final do Período de
					// Referência das
					// Contas
									"atencao.referencia_inicial.maior.referencia_final");
				}
			}else{
				if(anoMesContaInicial.length() < 7){
					throw new ControladorException("errors.invalid", null, "Mês/Ano Inicial do Período da Referência das Contas");
				}

				if(anoMesContaFinal.length() < 7){
					throw new ControladorException("errors.invalid", null, "Mês/Ano Final do Período da Referência das Contas");
				}

			}
		}

	}

	/**
	 * Inserir um comando de atividade de cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Verificar data final menos que data inicial
	 * [FS0014] - Verificar data final menos que data inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void verificarVencimentoContaComandoAcaoCobranca(String anoMesVencimentoInicial, String anoMesVencimentoFinal)
					throws ControladorException{

		if(anoMesVencimentoInicial != null && !anoMesVencimentoInicial.equals("")){
			String anoInicial = anoMesVencimentoInicial.substring(6, 10);
			String mesInicial = anoMesVencimentoInicial.substring(3, 5);
			String diaInicial = anoMesVencimentoInicial.substring(0, 2);

			boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
			if(valida){
				throw new ControladorException("errors.invalid", null, "Data Inicial do Período de Vencimento das Contas");
			}

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());

			if(periodoInicial.compareTo(new GregorianCalendar()) > 0){
				throw new ControladorException(
				// Data Final do Período de Vencimento das Contas posterior à
				// data corrente
								"atencao.data_final.maior.data_corrente");
			}

		}

		if((anoMesVencimentoInicial != null && !anoMesVencimentoInicial.equals(""))
						&& (anoMesVencimentoFinal != null && !anoMesVencimentoFinal.equals(""))){

			if(anoMesVencimentoInicial.length() == 10 & anoMesVencimentoFinal.length() == 10){
				String anoInicial = anoMesVencimentoInicial.substring(6, 10);
				String mesInicial = anoMesVencimentoInicial.substring(3, 5);
				String diaInicial = anoMesVencimentoInicial.substring(0, 2);

				String anoFinal = anoMesVencimentoFinal.substring(6, 10);
				String mesFinal = anoMesVencimentoFinal.substring(3, 5);
				String diaFinal = anoMesVencimentoInicial.substring(0, 2);

				boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
				if(valida){
					throw new ControladorException("errors.invalid", null, "Data Inicial do Período de Vencimento das Contas");
				}
				valida = Util.validarDiaMesAno(anoMesVencimentoFinal);
				if(valida){
					throw new ControladorException("errors.invalid", null, "Data Final do Período de Vencimento das Contas");
				}

				Calendar periodoInicial = new GregorianCalendar();
				periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
				periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
				periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());

				Calendar periodoFinal = new GregorianCalendar();
				periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
				periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
				periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());

				if(periodoInicial.compareTo(periodoFinal) > 0){
					throw new ControladorException(
					// Data Inicial do Período de Vencimento das Contas
					// posterior à Data Final do Período de Vencimento das Contas
									"atencao.data_inicial.maior.data_final");
				}
			}else{
				if(anoMesVencimentoInicial.length() < 10){
					throw new ControladorException("errors.invalid", null, "Data Inicial do Período de Vencimento das Contas");
				}

				if(anoMesVencimentoFinal.length() < 10){
					throw new ControladorException("errors.invalid", null, "Data Final do Período de Vencimento das Contas");
				}

			}
		}

	}

	/**
	 * Inserir um comando de atividade de cobrança eventual
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * Inserir cobranca acao atividade comando
	 * [SB0007] - Inserir cobranca acao atividade comando
	 * 
	 * @author Rafael Santos
	 * @author eduardo henrique
	 * @date 30/08/2008
	 *       Alterações no [UC0243] para a v0.04
	 * @author Virgínia Melo
	 * @date 08/11/2008
	 *       Alterações no [UC0243] para a v0.06
	 * @author Virgínia Melo
	 * @date 06/08/2009
	 *       Adicionado campo valorLimiteEmissao.
	 *       Os campos de referencia e data de vencimento não serão mais utilizados.
	 *       OBS : Validações de existência de entidades relacionadas deve já ter sido realizada.
	 * @throws ControladorException
	 */
	private Collection inserirComandoAcaoCobrancaCriterioEventual(String[] idsCobrancaAcao, String idCobrancaAtividade,
					String idCobrancaGrupo, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String idSetorComercialInicial,
					String idSetorComercialFinal, String idCliente, String idClienteRelacaoTipo, String anoMesReferencialInicial,
					String anoMesReferencialFinal, String dataVencimentoContaInicial, String dataVencimentoContaFinal,
					String indicadorCriterio, String nuQuadraInicial, String nuQuadraFinal, String idRotaInicial, String idRotaFinal,
					String idComando, String unidadeNegocio, Usuario usuarioLogado, String titulo, String descricaoSolicitacao,
					String prazoExecucao,
					String quantidadeMaximaDocumentos, String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
 String codigoClienteSuperior, String idEmpresa, String valorLimiteEmissao,
					byte[] arquivoImoveis, String arrecadador,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente, CobrancaCriterio cobrancaCriterio,
					String indicadorGerarRelacaoDocumento, String formatoArquivo) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = null;
		Operacao operacao = new Operacao();
		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		Collection colecaoCobrancaAcaoAtividadeComando = new ArrayList();

		// executar comando
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();

		// id gerado pelo sistema
		CobrancaAcao cobrancaAcao = null;

		// id da atividade de cobranca

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.ID, idCobrancaAtividade));
		Collection colecaoCobrancaAtividade = this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());
		CobrancaAtividade cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade.iterator().next();
		cobrancaAcaoAtividadeComando.setCobrancaAtividade(cobrancaAtividade);
		// comando
		cobrancaAcaoAtividadeComando.setComando(new Date());
		// realizacao
		cobrancaAcaoAtividadeComando.setRealizacao(null);
		// ultima alteracao
		cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());

		// usuario
		cobrancaAcaoAtividadeComando.setUsuario(usuarioLogado);

		// empresa
		Empresa empresa = new Empresa();
		if(!GenericValidator.isBlankOrNull(idEmpresa)){
			// se o id da empresa não vier vazio nem nulo
			empresa.setId(Integer.valueOf(idEmpresa));
		}
		cobrancaAcaoAtividadeComando.setEmpresa(empresa);

		// id Cobranca Grupo
		if(idCobrancaGrupo != null && !idCobrancaGrupo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !idCobrancaGrupo.equals("")){
			CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
			cobrancaGrupo.setId(Integer.valueOf(idCobrancaGrupo));
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
		}else{
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
		}

		// id Gerencia Regional
		if(idGerenciaRegional != null && !idGerenciaRegional.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
						&& !idGerenciaRegional.equals("")){
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(Integer.valueOf(idGerenciaRegional));
			cobrancaAcaoAtividadeComando.setGerenciaRegional(gerenciaRegional);
		}else{
			cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
		}

		// id Unidade Negocio
		if(unidadeNegocio != null && !unidadeNegocio.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !unidadeNegocio.equals("")){
			UnidadeNegocio unidadeNegocioObj = new UnidadeNegocio();
			unidadeNegocioObj.setId(Integer.valueOf(unidadeNegocio));
			cobrancaAcaoAtividadeComando.setUnidadeNegocio(unidadeNegocioObj);
		}else{
			cobrancaAcaoAtividadeComando.setUnidadeNegocio(null);
		}

		// localidade inicial e final
		if((idLocalidadeInicial != null && !idLocalidadeInicial.equals("")) && (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){
			Localidade localidadeInicial = new Localidade();
			localidadeInicial.setId(Integer.valueOf(idLocalidadeInicial));
			cobrancaAcaoAtividadeComando.setLocalidadeInicial(localidadeInicial);

			Localidade localidadeFinal = new Localidade();
			localidadeFinal.setId(Integer.valueOf(idLocalidadeFinal));
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(localidadeFinal);
		}else{
			cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
		}

		// codigo do setor comercial inicial e final
		if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
						&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(Integer.valueOf(codigoSetorComercialInicial));
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(Integer.valueOf(codigoSetorComercialFinal));
		}else{
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(null);
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
		}//

		if(arquivoImoveis.length > 0){
			cobrancaAcaoAtividadeComando.setArquivoImoveis(arquivoImoveis);
		}

		if(!Util.isVazioOuBranco(arrecadador) && !arrecadador.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
			Arrecadador arrecadadorAux = new Arrecadador();
			arrecadadorAux.setId(Util.obterInteger(arrecadador));
			cobrancaAcaoAtividadeComando.setArrecadador(arrecadadorAux);
		}

		// quadra inicial e final
		if((nuQuadraInicial != null && !nuQuadraInicial.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !nuQuadraInicial.equals(""))
						&& (nuQuadraFinal != null && !nuQuadraFinal.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !nuQuadraFinal
										.equals(""))){

			cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(Integer.valueOf(nuQuadraInicial));
			cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(Integer.valueOf(nuQuadraFinal));
		}else{
			cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(null);
			cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(null);
		}

		// rota inicial e final
		if((idRotaInicial != null && !idRotaInicial.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))
						&& (idRotaFinal != null && !idRotaFinal.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))){
			Rota rotaInicial = new Rota();
			rotaInicial.setId(Integer.valueOf(idRotaInicial));
			cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);

			Rota rotaFinal = new Rota();
			rotaFinal.setId(Integer.valueOf(idRotaFinal));
			cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
		}else{
			cobrancaAcaoAtividadeComando.setRotaInicial(null);
			cobrancaAcaoAtividadeComando.setRotaFinal(null);
		}

		// id do cliente
		if(idCliente != null && !idCliente.equals("")){
			Cliente cliente = new Cliente();
			cliente.setId(Integer.valueOf(idCliente));
			cobrancaAcaoAtividadeComando.setCliente(cliente);
		}else{
			cobrancaAcaoAtividadeComando.setCliente(null);
		}

		// id do cliente superior
		if(codigoClienteSuperior != null && !codigoClienteSuperior.equals("")){
			Cliente cliente = new Cliente();
			cliente.setId(Integer.valueOf(codigoClienteSuperior));
			cobrancaAcaoAtividadeComando.setSuperior(cliente);
		}else{
			cobrancaAcaoAtividadeComando.setSuperior(null);
		}

		// id cliente relação tipo
		if(idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
						&& !idClienteRelacaoTipo.equals("")){
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(Integer.valueOf(idClienteRelacaoTipo));
			cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(clienteRelacaoTipo);
		}else{
			cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
		}

		if(indicadorGerarRelacaoDocumento != null && !indicadorGerarRelacaoDocumento.equals("")){
			cobrancaAcaoAtividadeComando.setIndicadorGerarRelacaoDocumento(Short.valueOf(indicadorGerarRelacaoDocumento));
		}

		cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(null);
		cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(null);
		cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(null);
		cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(null);

		cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(null);
		cobrancaAcaoAtividadeComando.setValorDocumentos(null);
		cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(null);

		cobrancaAcaoAtividadeComando.setDescricaoTitulo(titulo);
		cobrancaAcaoAtividadeComando.setDescricaoSolicitacao(descricaoSolicitacao);
		cobrancaAcaoAtividadeComando.setDataEncerramentoPrevista(null);
		if(prazoExecucao != null && !prazoExecucao.equals("")){
			cobrancaAcaoAtividadeComando.setQuantidadeDiasRealizacao(Short.valueOf(prazoExecucao));
		}
		if(quantidadeMaximaDocumentos != null && !quantidadeMaximaDocumentos.equals("")){
			cobrancaAcaoAtividadeComando.setQuantidadeMaximaDocumentos(Integer.valueOf(quantidadeMaximaDocumentos));
		}
		// if(indicadorGerarBoletimCadastro != null && !indicadorGerarBoletimCadastro.equals("")){
		cobrancaAcaoAtividadeComando.setIndicadorBoletim(ConstantesSistema.NAO);
		// }
		if(indicadorImoveisDebito != null && !indicadorImoveisDebito.equals("")){
			cobrancaAcaoAtividadeComando.setIndicadorDebito(Short.valueOf(indicadorImoveisDebito));
		}
		if(valorLimiteEmissao != null && !valorLimiteEmissao.equals("")){
			cobrancaAcaoAtividadeComando.setValorLimiteEmissao(Util.formatarMoedaRealparaBigDecimal(valorLimiteEmissao));
		}

		cobrancaAcaoAtividadeComando.setPrecedente(cobrancaAcaoAtividadeComandoPrecedente);

		// Formato (PDF ou CSV)
		if(!Util.isVazioOuBranco(formatoArquivo)){
			Integer formatoArquivoInt = Integer.valueOf(formatoArquivo);
			cobrancaAcaoAtividadeComando.setFormatoArquivo(formatoArquivoInt);
		}

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();

		for(int i = 0; i < idsCobrancaAcao.length; i++){

			if(idsCobrancaAcao.length == 1){
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idsCobrancaAcao[i]));
			}else{
				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if(i == 0){
					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idsCobrancaAcao[i],
									FiltroParametro.CONECTOR_OR, idsCobrancaAcao.length));
				}else{
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if(idsCobrancaAcao.length == i + 1){
						filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idsCobrancaAcao[i]));
					}else{
						// senão inseri no filtro o conector or
						filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idsCobrancaAcao[i],
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
		}

		filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
		filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
		filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.COBRANCA_CRITERIO);
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

		if(colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()){
			Iterator iterator = colecaoCobrancaAcao.iterator();
			while(iterator.hasNext()){
				cobrancaAcao = (CobrancaAcao) iterator.next();
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoColecao = new CobrancaAcaoAtividadeComando();
				cobrancaAcaoAtividadeComandoColecao = cobrancaAcaoAtividadeComando;
				// id da ação de cobranca selecionada
				cobrancaAcaoAtividadeComandoColecao.setCobrancaAcao(cobrancaAcao);

				if(cobrancaAcao.getIndicadorBoletim() != null
								&& cobrancaAcao.getIndicadorBoletim().equals(CobrancaAcao.INDICADOR_BOLETIM_NAO)){
					if(indicadorGerarBoletimCadastro != null && !indicadorGerarBoletimCadastro.equals("")){
						Short indicadorBoletim = Short.valueOf(indicadorGerarBoletimCadastro);
						if(indicadorBoletim.equals(CobrancaAcao.INDICADOR_BOLETIM_SIM)){
							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.acoes.selecionada.nao.boletim");
						}
					}
				}

				if(cobrancaAcao.getIndicadorDebito() != null && cobrancaAcao.getIndicadorDebito().equals(CobrancaAcao.INDICADOR_DEBITO_NAO)){
					if(indicadorImoveisDebito != null && !indicadorImoveisDebito.equals("")){
						Short indicadorDebito = Short.valueOf(indicadorImoveisDebito);
						if(indicadorDebito.equals(CobrancaAcao.INDICADOR_BOLETIM_NAO)){
							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.acoes.selecionada.nao.debito");
						}
					}
				}

				// indicador de critério
				if(indicadorCriterio != null && !indicadorCriterio.equals("")){
					if(indicadorCriterio.equals(ConstantesSistema.INDICADOR_CRITERIO_ACAO)){

						// 5. Caso contrário, o sistema seleciona o critério de cobrança da ação

						cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf(ConstantesSistema.INDICADOR_CRITERIO_ACAO));
						if(cobrancaAcao.getCobrancaCriterio() != null){
							cobrancaAcaoAtividadeComando.setCobrancaCriterio(cobrancaAcao.getCobrancaCriterio());
						}else{
							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.pesquisa.cobranca_acao_sem_criterio");
						}

					}else{

						// 4. Caso o indicador do critério a ser utilizado seja igual a (2) ("usa o
						// critério
						// do comando"), o sistema seleciona o critério de cobrança e as linhas
						// associadas
						// (a partir das tabelas COBRANCA_CRITERIO e COBRANCA_CRITERIO_LINHA com
						// CBCT_ID=id
						// do critério de cobrança recebido).

						cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf(ConstantesSistema.INDICADOR_CRITERIO_COMANDO));
						if(cobrancaCriterio != null){
							cobrancaAcaoAtividadeComando.setCobrancaCriterio(cobrancaCriterio);
						}else{
							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.pesquisa.criterio_inexistente");
						}

					}
				}

				if(idComando != null && !idComando.equals("")){

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
									new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

					operacao.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
					operacaoEfetuada.setOperacao(operacao);
					cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
					cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
					// ------------ REGISTRAR TRANSAÇÃO ----------------

				}else{
					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
									new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

					operacao.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
					operacaoEfetuada.setOperacao(operacao);
					cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
					cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
					// ------------ REGISTRAR TRANSAÇÃO ----------------

				}

				// inserir cobranca acao atividade comando
				Integer idCobrancaAcaoAtividadeComando = (Integer) this.getControladorUtil().inserir(cobrancaAcaoAtividadeComandoColecao);

				colecaoCobrancaAcaoAtividadeComando.add(idCobrancaAcaoAtividadeComando);
			}
		}

		// [FS008] - Obter Lista de Rotas
		Collection colecaoRotas = null;

		if(arquivoImoveis != null && arquivoImoveis.length > 0){

			ArrayList<Integer> idImoveis = new ArrayList<Integer>();

			File arquivo = null;
			FileReader fileReader = null;
			BufferedReader br = null;

			try{
				arquivo = File.createTempFile("gsan", ".txt");

				if(!arquivo.exists()){
					arquivo.createNewFile();
				}

				FileOutputStream fos = new FileOutputStream(arquivo);
				fos.write(arquivoImoveis);
				fos.flush();
				fos.close();

				fileReader = new FileReader(arquivo);
				br = new BufferedReader(fileReader);

				String linha = null;

				while((linha = br.readLine()) != null){
					if(Util.isInteger(linha)){
						idImoveis.add(Util.obterInteger(linha));
					}
				}

			}catch(IOException e){
				throw new ControladorException("erro.sistema", e);
			}finally{
				try{
					if(br != null){
						br.close();
					}

					if(fileReader != null){
						fileReader.close();
					}
				}catch(IOException e){
					throw new ControladorException("erro.sistema", e);
				}

				if(arquivo.exists()){
					arquivo.delete();
				}
			}

			if(!Util.isVazioOrNulo(idImoveis)){
				colecaoRotas = this.getControladorImovel().pesquisarRotasDosImoveis(idImoveis);
			}
		}else if(cobrancaAcaoAtividadeComandoPrecedente != null){
			Integer idComandoPrecedente = cobrancaAcaoAtividadeComandoPrecedente.getId();

			if(idComandoPrecedente != null){
				colecaoRotas = this.pesquisarRotasDoComandoPrecedente(idComandoPrecedente);
			}
		}else{
			colecaoRotas = this.obterListasRotas(idRotaInicial, idRotaFinal, nuQuadraInicial, nuQuadraFinal, codigoSetorComercialInicial,
							codigoSetorComercialFinal, idLocalidadeInicial, idLocalidadeFinal, idGerenciaRegional, unidadeNegocio);
		}

		if(colecaoRotas != null && !colecaoRotas.isEmpty()){

			CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
			Iterator iteratorColecaoRotas = colecaoRotas.iterator();
			while(iteratorColecaoRotas.hasNext()){
				Rota rota = (Rota) iteratorColecaoRotas.next();

				registradorOperacao = null;
				operacao = new Operacao();
				operacaoEfetuada = new OperacaoEfetuada();
				if(colecaoCobrancaAcaoAtividadeComando != null && !colecaoCobrancaAcaoAtividadeComando.isEmpty()){
					Iterator iteCobrancaAtividadeComando = colecaoCobrancaAcaoAtividadeComando.iterator();
					while(iteCobrancaAtividadeComando.hasNext()){
						Integer idCobrancaAcaoAtividadeComandoColecao = (Integer) iteCobrancaAtividadeComando.next();
						CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new CobrancaAtividadeComandoRotaPK();
						cobrancaAtividadeComandoRotaPK.setCobrancaAcaoAtividadeComandoId(idCobrancaAcaoAtividadeComandoColecao);
						cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());

						cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
						cobrancaAtividadeComandoRota.setComp_id(cobrancaAtividadeComandoRotaPK);
						CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoAux = new CobrancaAcaoAtividadeComando();
						cobrancaAcaoAtividadeComandoAux.setId(idCobrancaAcaoAtividadeComandoColecao);
						cobrancaAtividadeComandoRota.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComandoAux);
						cobrancaAtividadeComandoRota.setRota(rota);
						cobrancaAtividadeComandoRota.setUltimaAlteracao(new Date());

						if(idComando != null && !idComando.equals("")){
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
											new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

							operacao.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
							operacaoEfetuada.setOperacao(operacao);
							cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
							cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
							registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
						}else{
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
											new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

							operacao.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
							operacaoEfetuada.setOperacao(operacao);
							cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
							cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
							registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
						}
						// inserir cobranca atividade comando rota
						this.getControladorUtil().inserir(cobrancaAtividadeComandoRota);
					}
				}
			}
		}

		// colecaoRotas = new ArrayList();
		// if(cobrancaAcaoAtividadeComando.getCobrancaGrupo() != null){
		//
		// FiltroRota filtroRota = new FiltroRota();
		// filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID,
		// cobrancaAcaoAtividadeComando
		// .getCobrancaGrupo().getId()));
		// colecaoRotas = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());
		//
		// }else{
		//
		// try{
		// colecaoRotas =
		// repositorioBatch.pesquisarRotasProcessamentoBatchCobrancaGrupoNaoInformado(cobrancaAcaoAtividadeComando
		// .getId());
		// }catch(ErroRepositorioException e){
		// sessionContext.setRollbackOnly();
		// }
		//
		// }
		//
		// if(colecaoRotas == null || colecaoRotas.isEmpty()){
		// if(idCliente == null && codigoClienteSuperior == null){
		// throw new ControladorException("atencao.comando.nao.existe.rotas");
		// }
		// }

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Consultar CobrancaAtividade
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade consultarCobrancaAtividade(String idCobrancaAtividade) throws ControladorException{

		CobrancaAtividade cobrancaAtividade = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAtividade));

		Collection colecaoCobrancaAtividade = this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if(colecaoCobrancaAtividade != null && !colecaoCobrancaAtividade.isEmpty()){
			cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade.iterator().next();
		}

		return cobrancaAtividade;

	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Atualizar Comando
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarCobrancaAcaoAtividadeComando(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper) throws ControladorException{

		if(gerarAtividadeAcaoCobrancaHelper != null){
			// incluir os dados gerados pela atividade ação cobrança
			cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca());
			cobrancaAcaoAtividadeComando.setValorDocumentos(gerarAtividadeAcaoCobrancaHelper.getValorDocumentosCobranca());
			cobrancaAcaoAtividadeComando
							.setQuantidadeItensCobrados(gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos());
			cobrancaAcaoAtividadeComando.setRealizacao(new Date());

			// atualizar os dados de cobranca acao atividade comando
			this.getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);
		}

	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @author eduardo henrique
	 * @date 30/08/2008
	 *       Alterações no [UC0243] para a v0.04
	 * @author Virgínia Melo
	 * @date 08/11/2008
	 *       Alterações no [UC0243] para a v0.06
	 * @author Virgínia Melo
	 * @date 05/08/2009
	 *       Adicionado campo valorLimiteEmissao
	 * @param dataPrevistaAcao
	 *            TODO
	 * @param idEmpresa
	 *            TODO
	 * @param idProgramaCobranca
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection concluirComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String[] idsCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicadorCriterioComando, String quadraInicial, String quadraFinal,
					String rotaInicial, String rotaFinal, String setorComercialOrigemID, String setorComercialDestinoID, String idComando,
					String unidadeNegocio, Usuario usuarioLogado, String titulo, String descricaoSolicitacao, String prazoExecucao,
					String quantidadeMaximaDocumentos, String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
					String codigoClienteSuperior, String idEmpresa, String valorLimiteEmissao, byte[] arquivoImoveis, String arrecadador,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente, CobrancaCriterio cobrancaCriterio,
					String indicadorGerarRelacaoDocumento, String idCobrancaAcaoAtividadeComando, String formatoArquivo)
					throws ControladorException{

		// Valida Empresa
		/*
		 * CR25779
		 * Removida a obrigatoriedade do campo EMPRESA pela alteração da forma como são associadas
		 * as ordens de serviço
		 * à empresa. Agora o usuário tanto pode associar a ordem à empresa na hora da criação do
		 * comando
		 * como também pode fazer isso depois, em uma nova funcionalidade onde o usuário poderá
		 * associar várias
		 * ordens de serviço de uma vez a uma empresa.
		 * 10/06/2010
		 * if (idEmpresa != null && !idEmpresa.equals("")){
		 * FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
		 * filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, idEmpresa));
		 * Collection colecaoEmpresas = (Collection) getControladorUtil().pesquisar(filtroEmpresa,
		 * Empresa.class.getName());
		 * if(colecaoEmpresas == null || colecaoEmpresas.isEmpty()){
		 * throw new ControladorException("atencao.empresa_comando_cobranca_acao_inexistente");
		 * }
		 * }else{
		 * throw new ControladorException("atencao.empresa_comando_cobranca_acao_nao_informado");
		 * }
		 */

		// [FS0012] - Verificar referência final menor que referência inicial
		// this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta,
		// periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		// this.verificarVencimentoContaComandoAcaoCobranca(periodoVencimentoContaInicial,
		// periodoVencimentoContaFinal);

		// [FS0016] - Verificar existência do comando eventual
		// Caso não tenha informado o arquivo de imóveis
		if(arquivoImoveis == null || arquivoImoveis.length == 0){
			this.verficarExistenciaComandoEventual(idsCobrancaAcao, idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
							localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD, setorComercialDestinoCD, idCliente,
							clienteRelacaoTipo, periodoInicialConta, periodoFinalConta, periodoVencimentoContaInicial,
							periodoVencimentoContaFinal, indicadorCriterioComando, quadraInicial, quadraFinal, rotaInicial, rotaFinal,
							idComando, unidadeNegocio, codigoClienteSuperior, idCobrancaAcaoAtividadeComando);
		}

		// inserir comando de ação de cobança
		// [SB0007]
		Collection colecaoCobrancaAcaoAtividadeComando = this.inserirComandoAcaoCobrancaCriterioEventual(idsCobrancaAcao,
						idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional, localidadeOrigemID, localidadeDestinoID,
						setorComercialOrigemCD, setorComercialDestinoCD, setorComercialOrigemID, setorComercialDestinoID, idCliente,
						clienteRelacaoTipo, periodoInicialConta, periodoFinalConta, periodoVencimentoContaInicial,
						periodoVencimentoContaFinal, indicadorCriterioComando, quadraInicial, quadraFinal, rotaInicial, rotaFinal,
						idComando, unidadeNegocio, usuarioLogado, titulo, descricaoSolicitacao, prazoExecucao, quantidadeMaximaDocumentos,
						indicadorImoveisDebito, indicadorGerarBoletimCadastro, codigoClienteSuperior, idEmpresa, valorLimiteEmissao,
						arquivoImoveis, arrecadador, cobrancaAcaoAtividadeComandoPrecedente, cobrancaCriterio,
						indicadorGerarRelacaoDocumento, formatoArquivo);

		return colecaoCobrancaAcaoAtividadeComando;

	}

	/**
	 * Inserir Comando de Ação de Cobrança
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection executarComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String[] idsCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String rotaInicial, String rotaFinal, String setorComercialOrigemID,
					String setorComercialDestinoID, String idComando, Usuario usuarioLogado, String titulo, String descricaoSolicitacao,
					String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior) throws ControladorException{

		// [FS0012] - Verificar referência final menor que referência inicial
		this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta, periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		this.verificarVencimentoContaComandoAcaoCobranca(periodoVencimentoContaInicial, periodoVencimentoContaFinal);

		// [FS0016] - Verificar existência do comando eventual
		/*
		 * this.verficarExistenciaComandoEventual(idsCobrancaAcao,
		 * idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
		 * localidadeOrigemID, localidadeDestinoID,
		 * setorComercialOrigemCD, setorComercialDestinoCD, indicador,
		 * rotaInicial, rotaFinal, idComando,
		 * null, null);
		 * // inserir comando de ação de cobança
		 * // [SB0007]
		 * Collection colecaoCobrancaAcaoAtividadeComando = this
		 * .inserirComandoAcaoCobrancaCriterioEventual(idsCobrancaAcao,
		 * idCobrancaGrupo, idGerenciaRegional,
		 * localidadeOrigemID, localidadeDestinoID,
		 * setorComercialOrigemCD, setorComercialDestinoCD,
		 * setorComercialOrigemID, setorComercialDestinoID,
		 * indicador, rotaInicial, rotaFinal,
		 * idComando, null,
		 * usuarioLogado,
		 * titulo, descricaoSolicitacao, prazoExecucao, null, null, null);
		 */
		Collection colecaoCobrancaAcaoAtividadeComando = new ArrayList();
		Iterator iteCobrancaAcaoAtividadeComando = colecaoCobrancaAcaoAtividadeComando.iterator();
		while(iteCobrancaAcaoAtividadeComando.hasNext()){
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) iteCobrancaAcaoAtividadeComando
							.next();

			// [SF0009] - Selecionar Lista de Rotas do Comando
			Collection colecaoRotas = this.obterListaRotasComando(idCobrancaGrupo, cobrancaAcaoAtividadeComando.getId().toString());

			// pesquisar cobranca atividade
			CobrancaAtividade cobrancaAtividade = this.consultarCobrancaAtividade(idCobrancaAtividade);

			// pesquisar cobranca acao
			// CobrancaAcao cobrancaAcao = this
			// .consultarCobrancaAcao(.getId());

			// [SF0010] - Executar Comando Eventual
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this.executarComandoEventual(cobrancaAtividade,
							cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeComando.getCobrancaAcao(), colecaoRotas, usuarioLogado);

			// atualizar os dados de cobranca acao atividade comando
			this.atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando, gerarAtividadeAcaoCobrancaHelper);
		}

		return colecaoCobrancaAcaoAtividadeComando;

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Consultar Cobranca Ação CAtividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * @author eduardo henrique
	 * @date 01/09/2008
	 *       Alteração na consulta requerida pelas mudanças no [UC0244] para v0.04
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando consultarCobrancaAcaoAtividadeComando(String idCobrancaAcaoAtividadeComando)
					throws ControladorException{

		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

		if(idCobrancaAcaoAtividadeComando != null && !idCobrancaAcaoAtividadeComando.equals("")){

			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ARRECADADOR);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ARRECADADOR_CLIENTE);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.USUARIO);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.EMPRESA);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);

			filtroCobrancaAcaoAtividadeComando
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.PROGRAMA_COBRANCA);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));

			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.PRECEDENTE);

			Collection colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());
			if(colecaoCobrancaAcaoAtividadeComando != null && !colecaoCobrancaAcaoAtividadeComando.isEmpty()){
				cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) colecaoCobrancaAcaoAtividadeComando.iterator().next();
			}

		}

		return cobrancaAcaoAtividadeComando;
	}

	/**
	 * Permite atualizar os dados de uma resolução de diretoria
	 * [UC0218] Manter Resolução de Diretoria
	 * [SB0001] Atualizar Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 10/04/2006
	 */
	public void atualizarResolucaoDiretoria(ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado) throws ControladorException{

		// [FS0001] - Validar Período de Vigência
		if(resolucaoDiretoria.getDataVigenciaFim() != null){
			if(resolucaoDiretoria.getDataVigenciaInicio().compareTo(resolucaoDiretoria.getDataVigenciaFim()) >= 0){
				throw new ControladorException("atencao.termino_vigencia.anterior.inicio_vigencia");
			}
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO, resolucaoDiretoria.getId()));

		Collection colecaoResolucaoDiretoriaBase = getControladorUtil().pesquisar(filtroResolucaoDiretoria,
						ResolucaoDiretoria.class.getName());

		if(colecaoResolucaoDiretoriaBase == null || colecaoResolucaoDiretoriaBase.isEmpty()){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		ResolucaoDiretoria resolucaoDiretoriaBase = (ResolucaoDiretoria) colecaoResolucaoDiretoriaBase.iterator().next();

		if(resolucaoDiretoriaBase.getUltimaAlteracao().after(resolucaoDiretoria.getUltimaAlteracao())){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		resolucaoDiretoria.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_ATUALIZAR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		operacaoEfetuada.setArgumentoValor(resolucaoDiretoria.getId());

		resolucaoDiretoria.setOperacaoEfetuada(operacaoEfetuada);
		resolucaoDiretoria.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(resolucaoDiretoria);
		// getControladorTransacao().registrarTransacao(resolucaoDiretoria);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		getControladorUtil().atualizar(resolucaoDiretoria);

		// Atualizar grupos habilitados associados

		// Recupera e apaga grupos habilitados associados antigos
		FiltroResolucaoDiretoriaGrupo filtroResolucaoDiretoriaGrupo = new FiltroResolucaoDiretoriaGrupo();
		filtroResolucaoDiretoriaGrupo.adicionarParametro(new ParametroSimples("resolucaoDiretoria", resolucaoDiretoria));
		Collection colecaoResolucaoDiretoriaGruposAntigos = getControladorUtil().pesquisar(filtroResolucaoDiretoriaGrupo,
						ResolucaoDiretoriaGrupo.class.getName());
		getControladorUtil().removerColecaoObjetos(colecaoResolucaoDiretoriaGruposAntigos);

		// Recupera e adiciona grupos habilitados associados novos se existirem

		if(!Util.isVazioOrNulo(resolucaoDiretoria.getResolucaoDiretoriaGrupos())){

			Collection colecaoResolucaoDiretoriaGruposNovos = new ArrayList();

			for(ResolucaoDiretoriaGrupo resolucaoDiretoriaGrupo : resolucaoDiretoria.getResolucaoDiretoriaGrupos()){

				colecaoResolucaoDiretoriaGruposNovos.add(resolucaoDiretoriaGrupo);
			}
			getControladorUtil().inserirColecaoObjetos(colecaoResolucaoDiretoriaGruposNovos);
		}

		// Recupera e apaga resticoes de debitos antigas
		FiltroParcelamentoSituacaoEspecial filtroParcelamentoSituacaoEspecial = new FiltroParcelamentoSituacaoEspecial();
		filtroParcelamentoSituacaoEspecial.adicionarParametro(new ParametroSimples(FiltroParcelamentoSituacaoEspecial.RESOLUCAO_DIRETORIA,
						resolucaoDiretoria));

		Collection colecaoParcelamentoSituacaoEspecial = getControladorUtil().pesquisar(filtroParcelamentoSituacaoEspecial,
						ParcelamentoSituacaoEspecial.class.getName());

		getControladorUtil().removerColecaoObjetos(colecaoParcelamentoSituacaoEspecial);

		// Atualiza listra com as restricoes selecionadas
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getParcelamentosSituacaoEspecial())){

			colecaoParcelamentoSituacaoEspecial = new ArrayList();

			for(ParcelamentoSituacaoEspecial parcelamentoSituacaoEspecial : resolucaoDiretoria.getParcelamentosSituacaoEspecial()){

				colecaoParcelamentoSituacaoEspecial.add(parcelamentoSituacaoEspecial);
			}
			getControladorUtil().inserirColecaoObjetos(colecaoParcelamentoSituacaoEspecial);
		}

		// Recupera e apaga as condições de pagto à vista antigas
		FiltroResolucaoDiretoriaParametrosPagamentoAVista filtroResolucaoDiretoriaParametrosPagamentoAVista = new FiltroResolucaoDiretoriaParametrosPagamentoAVista();
		filtroResolucaoDiretoriaParametrosPagamentoAVista.adicionarParametro(new ParametroSimples(
						FiltroResolucaoDiretoriaParametrosPagamentoAVista.RESOLUCAO_DIRETORIA_ID, resolucaoDiretoria.getId()));

		Collection colecaoCondicaoPagtoAVista = getControladorUtil().pesquisar(filtroResolucaoDiretoriaParametrosPagamentoAVista,
						ResolucaoDiretoriaParametrosPagamentoAVista.class.getName());

		getControladorUtil().removerColecaoObjetos(colecaoCondicaoPagtoAVista);

		// Atualiza lista com as condições de pagto à vista selecionadas
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getResolucaoDiretoriaCondicoesPagtoAVista())){

			colecaoCondicaoPagtoAVista = new ArrayList();

			for(ResolucaoDiretoriaParametrosPagamentoAVista condicaoPagtoAVista : resolucaoDiretoria
							.getResolucaoDiretoriaCondicoesPagtoAVista()){

				colecaoCondicaoPagtoAVista.add(condicaoPagtoAVista);
			}
			getControladorUtil().inserirColecaoObjetos(colecaoCondicaoPagtoAVista);
		}

		// Recupera e apaga as condições de valor de entrada antigas
		FiltroResolucaoDiretoriaParametrosValorEntrada filtroResolucaoDiretoriaParametrosValorEntrada = new FiltroResolucaoDiretoriaParametrosValorEntrada();
		filtroResolucaoDiretoriaParametrosValorEntrada.adicionarParametro(new ParametroSimples(
						FiltroResolucaoDiretoriaParametrosValorEntrada.RESOLUCAO_DIRETORIA_ID, resolucaoDiretoria.getId()));

		Collection colecaoCondicaoValorEntrada = getControladorUtil().pesquisar(filtroResolucaoDiretoriaParametrosValorEntrada,
						ResolucaoDiretoriaParametrosValorEntrada.class.getName());

		getControladorUtil().removerColecaoObjetos(colecaoCondicaoValorEntrada);

		// Atualiza lista com as condições de pagto à vista selecionadas
		if(!Util.isVazioOrNulo(resolucaoDiretoria.getResolucaoDiretoriaCondicoesValorEntrada())){

			colecaoCondicaoValorEntrada = new ArrayList();

			for(ResolucaoDiretoriaParametrosValorEntrada condicaoValorEntrada : resolucaoDiretoria
							.getResolucaoDiretoriaCondicoesValorEntrada()){

				colecaoCondicaoValorEntrada.add(condicaoValorEntrada);
			}
			getControladorUtil().inserirColecaoObjetos(colecaoCondicaoValorEntrada);
		}
	}

	/**
	 * Manter Comando de Ação de Cobrança
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * @author eduardo henrique
	 * @date 02/09/2008
	 *       Alterações no [UC0244] para a v0.04
	 * @author Virgínia Melo
	 * @date 07/11/2008
	 *       Alterações no [UC0244] para a v0.06
	 * @author Virgínia Melo
	 * @date 06/08/2009
	 *       Adicionado campo valorLimiteEmissao
	 * @return
	 * @throws ControladorException
	 */
	public void concluirManterComandoAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String idCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicadorCriterioComando, String quadraInicial, String quadraFinal,
					String rotaInicial, String rotaFinal, String setorComercialOrigemID, String setorComercialDestinoID,
					String idCobrancaAcaoAtividadeComando, Date realizacao, Date comando, Date ultimaDataAtualizacao, Usuario usuario,
					Empresa empresa, Integer quantidadeDocumentos, BigDecimal valorDocumentos, Integer quantidadeItensCobrados,
					String idComando, String unidadeNegocio, String titulo, String descricaoSolicitacao, String prazoExecucao,
					String quantidadeMaximaDocumentos, String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
					String codigoClienteSuperior, String valorLimiteEmissao, byte[] arquivoImoveis, String arrecadador,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente, CobrancaCriterio cobrancaCriterio,
					String indicadorGerarRelacaoDocumento, String formatoArquivo) throws ControladorException{

		// [FS0011] - Verificar execução do comando
		if(realizacao == null){
			// [FS0012] - Verificar referência final menor que referência
			// inicial
			this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta, periodoFinalConta);

			// [FS0014] - Verificar data final menos que data inicial
			this.verificarVencimentoContaComandoAcaoCobranca(periodoVencimentoContaInicial, periodoVencimentoContaFinal);
		}

		String[] idsCobrancaAcao = new String[1];
		idsCobrancaAcao[0] = idCobrancaAcao;

		// [FS0016] - Verificar existência do comando eventual
		// Caso não tenha informado o arquivo de imóveis
		if(arquivoImoveis == null || arquivoImoveis.length == 0){
			this.verficarExistenciaComandoEventual(idsCobrancaAcao, idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
							localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD, setorComercialDestinoCD, idCliente,
							clienteRelacaoTipo, periodoInicialConta, periodoFinalConta, periodoVencimentoContaInicial,
							periodoVencimentoContaFinal, indicadorCriterioComando, quadraInicial, quadraFinal, rotaInicial, rotaFinal,
							idComando, unidadeNegocio, codigoClienteSuperior, idCobrancaAcaoAtividadeComando);

		}

		/*
		 * this.verficarExistenciaComandoEventual(idCobrancaAcao,
		 * null, idCobrancaGrupo, idGerenciaRegional,
		 * localidadeOrigemID, localidadeDestinoID,
		 * setorComercialOrigemCD, setorComercialDestinoCD, indicador,
		 * rotaInicial, rotaFinal, idComando,
		 * unidadeNegocio, idProgramaCobranca, idCobrancaAcaoAtividadeComando);
		 * // inserir comando de ação de cobança
		 * // [SB0007]
		 * this.atualizarComandoAcaoCobrancaEventual(idCobrancaAcao,
		 * idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
		 * localidadeOrigemID, localidadeDestinoID,
		 * setorComercialOrigemCD, setorComercialDestinoCD,
		 * setorComercialOrigemID, setorComercialDestinoID,
		 * indicador, rotaInicial,
		 * rotaFinal, idCobrancaAcaoAtividadeComando,
		 * comando, realizacao, usuario,
		 * idEmpresa, idComando, unidadeNegocio, titulo,
		 * descricaoSolicitacao, dataPrevistaAcao, dataLimiteAcao,
		 * idProgramaCobranca, ultimaDataAtualizacao);
		 */

		// inserir comando de ação de cobança
		// [SB0007]
		this.atualizarComandoAcaoCobrancaEventual(idCobrancaAcao, idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
						localidadeOrigemID, localidadeDestinoID, setorComercialOrigemCD, setorComercialDestinoCD, setorComercialOrigemID,
						setorComercialDestinoID, idCliente, clienteRelacaoTipo, periodoInicialConta, periodoFinalConta,
						periodoVencimentoContaInicial, periodoVencimentoContaFinal, indicadorCriterioComando, quadraInicial, quadraFinal,
						rotaInicial, rotaFinal, idCobrancaAcaoAtividadeComando, ultimaDataAtualizacao, comando, realizacao, usuario,
						empresa, quantidadeDocumentos, valorDocumentos, quantidadeItensCobrados, idComando, unidadeNegocio, titulo,
						descricaoSolicitacao, prazoExecucao, quantidadeMaximaDocumentos, indicadorImoveisDebito,
						indicadorGerarBoletimCadastro, codigoClienteSuperior, valorLimiteEmissao, arquivoImoveis, arrecadador,
						cobrancaAcaoAtividadeComandoPrecedente, cobrancaCriterio, indicadorGerarRelacaoDocumento, formatoArquivo);

	}

	/**
	 * Manter Comando de Ação de Cobrança
	 * [UC0244] Manter Comando Ação de Cobrança
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void executarComandoManterAcaoCobranca(String periodoInicialConta, String periodoFinalConta,
					String periodoVencimentoContaInicial, String periodoVencimentoContaFinal, String idCobrancaAcao,
					String idCobrancaAtividade, String idCobrancaGrupo, String idGerenciaRegional, String localidadeOrigemID,
					String localidadeDestinoID, String setorComercialOrigemCD, String setorComercialDestinoCD, String idCliente,
					String clienteRelacaoTipo, String indicador, String rotaInicial, String rotaFinal, String setorComercialOrigemID,
					String setorComercialDestinoID, String idComando, String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao,
					Date comando, Date realizacao, Usuario usuario, Empresa empresa, Integer quantidadeDocumentos,
					BigDecimal valorDocumentos, Integer quantidadeItensCobrados, String titulo, String descricaoSolicitacao,
					String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior) throws ControladorException{

		// [FS0012] - Verificar referência final menor que referência inicial
		this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta, periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		this.verificarVencimentoContaComandoAcaoCobranca(periodoVencimentoContaInicial, periodoVencimentoContaFinal);

		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
		// atualizar comando de ação de cobança
		// [SB0006]
		/*
		 * CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = this
		 * .atualizarComandoAcaoCobrancaEventual(idCobrancaAcao,
		 * idCobrancaAtividade, idCobrancaGrupo,
		 * idGerenciaRegional, localidadeOrigemID,
		 * localidadeDestinoID, setorComercialOrigemCD,
		 * setorComercialDestinoCD, setorComercialOrigemID,
		 * setorComercialDestinoID, periodoInicialConta, periodoFinalConta,
		 * periodoVencimentoContaInicial, periodoVencimentoContaFinal,
		 * indicador,
		 * rotaInicial, rotaFinal, idCobrancaAcaoAtividadeComando,
		 * ultimaDataAtualizacao, comando,
		 * realizacao, usuario, empresa, idComando,
		 * null, titulo, descricaoSolicitacao,
		 * null, null, null);
		 */

		// [SF0008] - Selecionar Lista de Rotas do Comando
		Collection colecaoRotas = this.obterListaRotasComando(idCobrancaGrupo, idCobrancaAcaoAtividadeComando);

		// pesquisar cobranca atividade
		CobrancaAtividade cobrancaAtividade = this.consultarCobrancaAtividade(idCobrancaAtividade);

		// pesquisar cobranca acao
		CobrancaAcao cobrancaAcao = this.consultarCobrancaAcao(idCobrancaAcao);

		// [SF0009] - Executar Comando Eventual
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this.executarComandoEventual(cobrancaAtividade,
						cobrancaAcaoAtividadeComando, cobrancaAcao, colecaoRotas, usuario);

		// atualizar os dados de cobranca acao atividade comando
		this.atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando, gerarAtividadeAcaoCobrancaHelper);

	}

	/**
	 * Manter um comando de atividade de cobrança eventual
	 * [UC0244] - Inserir Comando Ação de Cobrança
	 * Manter cobranca acao atividade comando
	 * [SB0006] - Atualizar Comando Eventual
	 * 
	 * @author eduardo henrique
	 * @date 02/09/2008
	 *       Alterações no [UC0244] para a v0.04
	 * @author Virgínia Melo
	 * @date 07/11/2008
	 *       Alterações no [UC0244] para a v0.06
	 * @author Rafael Santos
	 * @param dataPrevistaAcao
	 *            TODO
	 * @param dataLimiteAcao
	 *            TODO
	 * @param idProgramaCobranca
	 *            TODO
	 * @param ultimaDataAtualizacao
	 *            TODO
	 * @throws ControladorException
	 * @date 24/04/2006
	 */
	private CobrancaAcaoAtividadeComando atualizarComandoAcaoCobrancaEventual(String idCobrancaAcao, String idCobrancaAtividade,
					String idCobrancaGrupo, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String codigoSetorComercialInicial, String codigoSetorComercialFinal, String idSetorComercialInicial,
					String idSetorComercialFinal, String idCliente, String idClienteRelacaoTipo, String anoMesReferencialInicial,
					String anoMesReferencialFinal, String dataVencimentoContaInicial, String dataVencimentoContaFinal,
					String indicadorCriterioComando, String nuQuadraInicial, String nuQuadraFinal, String idRotaInicial,
					String idRotaFinal, String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao, Date comando, Date realizacao,
					Usuario usuario, Empresa empresa, Integer quantidadeDocumentos, BigDecimal valorDocumentos,
					Integer quantidadeItensCobrados, String idComando, String unidadeNegocio, String titulo, String descricaoSolicitacao,
					String prazoExecucao, String quantidadeMaximaDocumentos, String indicadorImoveisDebito,
					String indicadorGerarBoletimCadastro, String codigoClienteSuperior, String valorLimiteEmissao, byte[] arquivoImoveis,
					String arrecadador, CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoPrecedente,
					CobrancaCriterio cobrancaCriterio, String indicadorGerarRelacaoDocumento, String formatoArquivo)
					throws ControladorException{

		// executar comando
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		// RegistradorOperacao registradorOperacao = null;
		// Operacao operacao = new Operacao();
		// OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// em caso de já existir a data de realização, então atualiza só o prazo de execução
		if(realizacao != null){
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));
			Collection colecaoCobrancaAcaoAtividadeComando = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());

			if(colecaoCobrancaAcaoAtividadeComando == null || colecaoCobrancaAcaoAtividadeComando.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoBase = (CobrancaAcaoAtividadeComando) Util
							.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComando);

			if(cobrancaAcaoAtividadeComandoBase.getUltimaAlteracao().after(ultimaDataAtualizacao)){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			if(prazoExecucao != null && !prazoExecucao.equals("")){
				cobrancaAcaoAtividadeComandoBase.setQuantidadeDiasRealizacao(Short.valueOf(prazoExecucao));
				cobrancaAcaoAtividadeComandoBase.setUltimaAlteracao(new Date());
				getControladorUtil().atualizar(cobrancaAcaoAtividadeComandoBase);
			}
			cobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComandoBase;

		}else{

			// executar comando
			cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();

			cobrancaAcaoAtividadeComando.setId(Integer.valueOf(idCobrancaAcaoAtividadeComando));
			cobrancaAcaoAtividadeComando.setUltimaAlteracao(ultimaDataAtualizacao);
			// id gerado pelo sistema
			CobrancaAcao cobrancaAcao = new CobrancaAcao();

			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
			filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
			filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
			Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());
			cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();

			// id da ação de cobranca selecionada
			cobrancaAcaoAtividadeComando.setCobrancaAcao(cobrancaAcao);
			// id da atividade de cobranca

			FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
			filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.ID, idCobrancaAtividade));
			Collection colecaoCobrancaAtividade = this.getControladorUtil().pesquisar(filtroCobrancaAtividade,
							CobrancaAtividade.class.getName());
			CobrancaAtividade cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade.iterator().next();
			cobrancaAcaoAtividadeComando.setCobrancaAtividade(cobrancaAtividade);

			// id Cobranca Grupo
			if(idCobrancaGrupo != null && !idCobrancaGrupo.equals("")
							&& !idCobrancaGrupo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
				CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
				cobrancaGrupo.setId(Integer.valueOf(idCobrancaGrupo));
				cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
			}else{
				cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
			}

			if((arquivoImoveis != null && arquivoImoveis.length > 0) || arquivoImoveis == null){
				cobrancaAcaoAtividadeComando.setArquivoImoveis(arquivoImoveis);
			}else{
				cobrancaAcaoAtividadeComando.setArquivoImoveis(consultarCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComando)
								.getArquivoImoveis());
			}

			if(!arrecadador.equals("") && !arrecadador.equals("-1")){
				Arrecadador arrecadadorAux = new Arrecadador();
				arrecadadorAux.setId(Util.obterInteger(arrecadador));
				cobrancaAcaoAtividadeComando.setArrecadador(arrecadadorAux);
			}

			// id Gerencia Regional
			if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
							&& !idGerenciaRegional.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
				GerenciaRegional gerenciaRegional = new GerenciaRegional();
				gerenciaRegional.setId(Integer.valueOf(idGerenciaRegional));
				cobrancaAcaoAtividadeComando.setGerenciaRegional(gerenciaRegional);
			}else{
				cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
			}

			// Unidade Negocio
			if(unidadeNegocio != null && !unidadeNegocio.equals("") && !unidadeNegocio.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
				UnidadeNegocio unidadeNegocioObj = new UnidadeNegocio();
				unidadeNegocioObj.setId(Integer.valueOf(unidadeNegocio));
				cobrancaAcaoAtividadeComando.setUnidadeNegocio(unidadeNegocioObj);
			}else{
				cobrancaAcaoAtividadeComando.setUnidadeNegocio(null);
			}

			// localidade inicial e final
			if((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
							&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){
				Localidade localidadeInicial = new Localidade();
				localidadeInicial.setId(Integer.valueOf(idLocalidadeInicial));
				cobrancaAcaoAtividadeComando.setLocalidadeInicial(localidadeInicial);

				Localidade localidadeFinal = new Localidade();
				localidadeFinal.setId(Integer.valueOf(idLocalidadeFinal));
				cobrancaAcaoAtividadeComando.setLocalidadeFinal(localidadeFinal);
			}else{
				cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
				cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
			}

			// codigo do setor comercial inicial e final
			if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
							&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){
				cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(Integer.valueOf(codigoSetorComercialInicial));
				cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(Integer.valueOf(codigoSetorComercialFinal));
			}else{
				cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(null);
				cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
			}//

			// quadra inicial e final
			if((nuQuadraInicial != null && !nuQuadraInicial.equals("")) && (nuQuadraFinal != null && !nuQuadraFinal.equals(""))){

				cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(Integer.valueOf(nuQuadraInicial));
				cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(Integer.valueOf(nuQuadraFinal));

			}else{
				cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(null);
				cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(null);
			}

			// rota inicial e final
			if((idRotaInicial != null && !idRotaInicial.equals("")) && (idRotaFinal != null && !idRotaFinal.equals(""))){
				Rota rotaInicial = new Rota();
				rotaInicial.setId(Integer.valueOf(idRotaInicial));
				cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);

				Rota rotaFinal = new Rota();
				rotaFinal.setId(Integer.valueOf(idRotaFinal));
				cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
			}else{
				cobrancaAcaoAtividadeComando.setRotaInicial(null);
				cobrancaAcaoAtividadeComando.setRotaFinal(null);
			}

			// codigo do cliente superior
			if(codigoClienteSuperior != null && !codigoClienteSuperior.equals("")){
				Cliente cliente = new Cliente();
				cliente.setId(Integer.valueOf(codigoClienteSuperior));
				cobrancaAcaoAtividadeComando.setSuperior(cliente);
			}else{
				cobrancaAcaoAtividadeComando.setSuperior(null);
			}

			// id do cliente
			if(idCliente != null && !idCliente.equals("")){
				Cliente cliente = new Cliente();
				cliente.setId(Integer.valueOf(idCliente));
				cobrancaAcaoAtividadeComando.setCliente(cliente);
			}else{
				cobrancaAcaoAtividadeComando.setCliente(null);
			}

			// id cliente relação tipo
			if(idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals("")
							&& !idClienteRelacaoTipo.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")){
				ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
				clienteRelacaoTipo.setId(Integer.valueOf(idClienteRelacaoTipo));
				cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(clienteRelacaoTipo);
			}else{
				cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
			}

			if(indicadorGerarRelacaoDocumento != null && !indicadorGerarRelacaoDocumento.equals("")){
				cobrancaAcaoAtividadeComando.setIndicadorGerarRelacaoDocumento(Short.valueOf(indicadorGerarRelacaoDocumento));
			}

			// Formato (PDF ou CSV)
			if(!Util.isVazioOuBranco(formatoArquivo)){
				Integer formatoArquivoInt = Integer.valueOf(formatoArquivo);
				cobrancaAcaoAtividadeComando.setFormatoArquivo(formatoArquivoInt);
			}else{
				cobrancaAcaoAtividadeComando.setFormatoArquivo(null);
			}

			// inicial referencial
			/*
			 * if (anoMesReferencialInicial != null && !anoMesReferencialInicial.equals("")) {
			 * String anoInicial = anoMesReferencialInicial.substring(3, 7);
			 * String mesInicial = anoMesReferencialInicial.substring(0, 2);
			 * String anoMes = anoInicial + mesInicial;
			 * cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(Integer.valueOf(anoMes));
			 * } else {
			 * cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(Integer.valueOf("198001")
			 * );
			 * }
			 * // final referencial
			 * if (anoMesReferencialFinal != null && !anoMesReferencialFinal.equals("")) {
			 * String anoFinal = anoMesReferencialFinal.substring(3, 7);
			 * String mesFinal = anoMesReferencialFinal.substring(0, 2);
			 * String anoMes = anoFinal + mesFinal;
			 * cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(Integer.valueOf(anoMes));
			 * } else {
			 * String periodoFinalConta =
			 * this.getControladorUtil().pesquisarParametrosDoSistema().getAnoMesArrecadacao() + "";
			 * String ano = periodoFinalConta.substring(0, 4);
			 * String mes = periodoFinalConta.substring(4, 6);
			 * cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(Integer.valueOf(ano +
			 * mes));
			 * }
			 * // data inicial conta
			 * if (dataVencimentoContaInicial != null && !dataVencimentoContaInicial.equals("")) {
			 * cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util.converteStringParaDate
			 * (dataVencimentoContaInicial));
			 * } else {
			 * cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util.converteStringParaDate
			 * ("01/01/1980"));
			 * }
			 * // data final conta
			 * if (dataVencimentoContaFinal != null && !dataVencimentoContaFinal.equals("")) {
			 * cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util.converteStringParaDate(
			 * dataVencimentoContaFinal));
			 * } else {
			 * Calendar calendarNova = Calendar.getInstance();
			 * calendarNova.add(Calendar.MONTH, -1);
			 * String dataNova = "";
			 * dataNova = calendarNova.getActualMaximum(Calendar.DAY_OF_MONTH) + "";
			 * if (calendarNova.get(Calendar.MONTH) < 10) {
			 * dataNova = dataNova + "/0" + (calendarNova.get(Calendar.MONTH) + 1);
			 * } else {
			 * dataNova = dataNova + "/" + (calendarNova.get(Calendar.MONTH) + 1);
			 * }
			 * dataNova = dataNova + "/" + calendarNova.get(Calendar.YEAR);
			 * cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util.converteStringParaDate(
			 * dataNova));
			 * }
			 */

			cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(null);
			cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(null);
			cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(null);
			cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(null);

			// indicador de critério
			// cobrancaAcaoAtividadeComando.setIndicadorCriterio(ConstantesSistema.NAO);
			if(indicadorCriterioComando != null && !indicadorCriterioComando.equals("")){
				if(indicadorCriterioComando.equals("1")){
					cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf((short) 1));
				}else{
					cobrancaAcaoAtividadeComando.setIndicadorCriterio(Short.valueOf((short) 2));
				}
			}

			if(cobrancaCriterio != null){
				cobrancaAcaoAtividadeComando.setCobrancaCriterio(cobrancaCriterio);
			}

			// Criterio de Cobranca
			if(idComando != null && !idComando.equals("")){
				// CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				// cobrancaCriterio.setId(Integer.valueOf(idComando));
				// cobrancaAcaoAtividadeComando.setCobrancaCriterio(cobrancaCriterio);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				/*
				 * registradorOperacao = new RegistradorOperacao(
				 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO, new
				 * UsuarioAcaoUsuarioHelper(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO)
				 * ; operacaoEfetuada.setOperacao(operacao);
				 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
				 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
				 */
				// ------------ REGISTRAR TRANSAÇÃO ----------------
			}else{
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				/*
				 * registradorOperacao = new RegistradorOperacao(
				 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA, new
				 * UsuarioAcaoUsuarioHelper(usuarioLogado, /*
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
				 * operacaoEfetuada.setOperacao(operacao);
				 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
				 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
				 */
				// ------------ REGISTRAR TRANSAÇÃO ----------------
			}

			// campos que mantiveram o valor
			// comando
			cobrancaAcaoAtividadeComando.setComando(comando);
			// realizacao
			cobrancaAcaoAtividadeComando.setRealizacao(realizacao);
			// usuario
			cobrancaAcaoAtividadeComando.setUsuario(usuario);
			// empresa
			cobrancaAcaoAtividadeComando.setEmpresa(empresa);
			cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(quantidadeDocumentos);
			cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentos);
			cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(quantidadeItensCobrados);

			// [FS0003] - Atualização realizada por outro usuário
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));

			Collection colecaoCobrancaAcaoAtividadeComandoBase = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());

			if(colecaoCobrancaAcaoAtividadeComandoBase == null || colecaoCobrancaAcaoAtividadeComandoBase.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoBase = (CobrancaAcaoAtividadeComando) colecaoCobrancaAcaoAtividadeComandoBase
							.iterator().next();

			if(cobrancaAcaoAtividadeComandoBase.getUltimaAlteracao().after(cobrancaAcaoAtividadeComando.getUltimaAlteracao())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());

			cobrancaAcaoAtividadeComando.setDescricaoTitulo(titulo);
			cobrancaAcaoAtividadeComando.setDescricaoSolicitacao(descricaoSolicitacao);
			if(prazoExecucao != null && !prazoExecucao.equals("")){
				cobrancaAcaoAtividadeComando.setQuantidadeDiasRealizacao(Short.valueOf(prazoExecucao));
			}
			if(quantidadeMaximaDocumentos != null && !quantidadeMaximaDocumentos.equals("")){
				cobrancaAcaoAtividadeComando.setQuantidadeMaximaDocumentos(Integer.valueOf(quantidadeMaximaDocumentos));
			}
			if(valorLimiteEmissao != null && !valorLimiteEmissao.equals("")){
				cobrancaAcaoAtividadeComando.setValorLimiteEmissao(Util.formatarMoedaRealparaBigDecimal(valorLimiteEmissao));
			}
			// if(indicadorGerarBoletimCadastro != null &&
			// !indicadorGerarBoletimCadastro.equals("")){
			// cobrancaAcaoAtividadeComando.setIndicadorBoletim(Short.valueOf(indicadorGerarBoletimCadastro));
			cobrancaAcaoAtividadeComando.setIndicadorBoletim(Short.valueOf(Short.valueOf((short) 2)));
			// }
			if(indicadorImoveisDebito != null && !indicadorImoveisDebito.equals("")){
				cobrancaAcaoAtividadeComando.setIndicadorDebito(Short.valueOf(indicadorImoveisDebito));
			}

			if(cobrancaAcaoAtividadeComandoPrecedente != null){
				cobrancaAcaoAtividadeComando.setPrecedente(cobrancaAcaoAtividadeComandoPrecedente);
			}

			getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);

			Collection colecaoIdCobrancaAtividadeComandoRota = new ArrayList();

			// if ((idGerenciaRegional != null &&
			// !idGerenciaRegional.equals(""))
			// && (idLocalidadeInicial != null && !idLocalidadeInicial
			// .equals(""))) {

			FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
			filtroCobrancaAtividadeComandoRotas.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID, idCobrancaAcaoAtividadeComando));

			Collection colecaoCobrancaAtividadeComandoRotas = this.getControladorUtil().pesquisar(filtroCobrancaAtividadeComandoRotas,
							CobrancaAtividadeComandoRota.class.getName());
			if(colecaoCobrancaAtividadeComandoRotas != null && !colecaoCobrancaAtividadeComandoRotas.isEmpty()){

				Iterator iteratorColecaoCobrancaAtividadeComandoRotas = colecaoCobrancaAtividadeComandoRotas.iterator();
				while(iteratorColecaoCobrancaAtividadeComandoRotas.hasNext()){
					CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoCobrancaAtividadeComandoRotas
									.next();
					// registradorOperacao = null;
					// operacao = new Operacao();
					// operacaoEfetuada = new OperacaoEfetuada();

					// Criterio de Cobranca
					if(idComando != null && !idComando.equals("")){
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO, new
						 * UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.
						 * OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}else{
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA, new
						 * UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.
						 * OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}
					this.getControladorUtil().remover(cobrancaAtividadeComandoRota);
				}
			}

			// [FS008] - Obter Lista de Rotas
			Collection colecaoRotas = null;

			if(arquivoImoveis != null && arquivoImoveis.length > 0){

				ArrayList<Integer> idImoveis = new ArrayList<Integer>();

				File arquivo = null;
				FileReader fileReader = null;
				BufferedReader br = null;

				try{
					arquivo = File.createTempFile("gsan", ".txt");

					if(!arquivo.exists()){
						arquivo.createNewFile();
					}

					FileOutputStream fos = new FileOutputStream(arquivo);
					fos.write(arquivoImoveis);
					fos.flush();
					fos.close();

					fileReader = new FileReader(arquivo);
					br = new BufferedReader(fileReader);

					String linha = null;

					while((linha = br.readLine()) != null){
						if(Util.isInteger(linha)){
							idImoveis.add(Util.obterInteger(linha));
						}
					}

				}catch(IOException e){
					throw new ControladorException("erro.sistema", e);
				}finally{
					try{
						if(br != null){
							br.close();
						}

						if(fileReader != null){
							fileReader.close();
						}
					}catch(IOException e){
						throw new ControladorException("erro.sistema", e);
					}

					if(arquivo.exists()){
						arquivo.delete();
					}
				}

				if(!Util.isVazioOrNulo(idImoveis)){
					colecaoRotas = this.getControladorImovel().pesquisarRotasDosImoveis(idImoveis);
				}
			}else if(cobrancaAcaoAtividadeComandoPrecedente != null){
				Integer idComandoPrecedente = cobrancaAcaoAtividadeComandoPrecedente.getId();

				if(idComandoPrecedente != null){
					colecaoRotas = this.pesquisarRotasDoComandoPrecedente(idComandoPrecedente);
				}
			}else{
				colecaoRotas = this.obterListasRotas(idRotaInicial, idRotaFinal, nuQuadraInicial, nuQuadraFinal,
								codigoSetorComercialInicial, codigoSetorComercialFinal, idLocalidadeInicial, idLocalidadeFinal,
								idGerenciaRegional, unidadeNegocio);
			}

			if(colecaoRotas != null && !colecaoRotas.isEmpty()){

				CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
				Iterator iteratorColecaoRotas = colecaoRotas.iterator();
				while(iteratorColecaoRotas.hasNext()){
					Rota rota = (Rota) iteratorColecaoRotas.next();

					// registradorOperacao = null;
					// operacao = new Operacao();
					// operacaoEfetuada = new OperacaoEfetuada();

					CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new CobrancaAtividadeComandoRotaPK();
					cobrancaAtividadeComandoRotaPK.setCobrancaAcaoAtividadeComandoId(cobrancaAcaoAtividadeComando.getId());
					cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());

					cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
					cobrancaAtividadeComandoRota.setComp_id(cobrancaAtividadeComandoRotaPK);
					cobrancaAtividadeComandoRota.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAtividadeComandoRota.setRota(rota);
					cobrancaAtividadeComandoRota.setUltimaAlteracao(new Date());

					// Criterio de Cobranca
					if(idComando != null && !idComando.equals("")){
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO, new
						 * UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.
						 * OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}else{
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA, new
						 * UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.
						 * OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}

					// inserir cobranca atividade comando rota
					CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK = (CobrancaAtividadeComandoRotaPK) this
									.getControladorUtil().inserir(cobrancaAtividadeComandoRota);

					colecaoIdCobrancaAtividadeComandoRota.add(compIDCobrancaAtividadeComandoRotaPK);
				}
			}
		}
		// }

		return cobrancaAcaoAtividadeComando;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Faz as atualizações e inserções do parcelamento do débito
	 * concluirParcelamentoDebitos
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 26/04/2006 - 26/09/2006
	 * @author eduardo henrique
	 * @date 22/04/2009
	 *       Correção na geração dos débitos a cobrar de Parcelamentos Anteriores.
	 * @author isilva
	 * @date 20/08/2011
	 *       Adicionar paramentros para configurar freqüência de cobrança de debitos à cobrar no
	 *       parcelamento
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamentoValores
	 * @param colecaoDebitoACobrar
	 * @param colecaoCreditoARealizar
	 * @param indicadorRestabelecimento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param imovel
	 * @param valorEntradaInformado
	 * @param valorASerNegociado
	 * @param valorASerParcelado
	 * @param dataParcelamento
	 * @param valorTotalContaValores
	 * @param valorGuiasPagamento
	 * @param valorDebitoACobrarServico
	 * @param valorDebitoACobrarParcelamento
	 * @param valorCreditoARealizar
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param valorDebitoTotalAtualizado
	 * @param descontoAcrescimosImpontualidade
	 * @param descontoAntiguidadeDebito
	 * @param descontoInatividadeLigacaoAgua
	 * @param percentualDescontoAcrescimosImpontualidade
	 * @param percentualDescontoAntiguidadeDebito
	 * @param percentualDescontoInatividadeLigacaoAgua
	 * @param parcelamentoPerfilId
	 * @param valorAcrescimosImpontualidade
	 * @param valorDebitoACobrarServicoLongoPrazo
	 * @param valorDebitoACobrarServicoCurtoPrazo
	 * @param valorDebitoACobrarParcelamentoLongoPrazo
	 * @param valorDebitoACobrarParcelamentoCurtoPrazo
	 * @param numeroPrestacoes
	 * @param valorPrestacao
	 * @param valorEntradaMinima
	 * @param taxaJuros
	 * @param indicadorConfirmacaoParcelamento
	 * @param cliente
	 * @parem numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @param numeroMesesInicioCobranca
	 * @throws ControladorException
	 */
	public Integer concluirParcelamentoDebitos(Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, Collection<DebitoACobrar> colecaoDebitoACobrar,
					Collection<CreditoARealizar> colecaoCreditoARealizar, String indicadorRestabelecimento, String indicadorContasRevisao,
					String indicadorGuiasPagamento, String indicadorAcrescimosImpotualidade, String indicadorDebitosACobrar,
					String indicadorCreditoARealizar, Imovel imovel, BigDecimal valorEntradaInformado, BigDecimal valorASerNegociado,
					BigDecimal valorASerParcelado, Date dataParcelamento, BigDecimal valorTotalContaValores,
					BigDecimal valorGuiasPagamento, BigDecimal valorDebitoACobrarServico, BigDecimal valorDebitoACobrarParcelamento,
					BigDecimal valorCreditoARealizar, BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora,
					BigDecimal valorMulta, BigDecimal valorDebitoTotalAtualizado, BigDecimal descontoAcrescimosImpontualidade,
					BigDecimal descontoAntiguidadeDebito, BigDecimal descontoInatividadeLigacaoAgua,
					BigDecimal percentualDescontoAcrescimosImpontualidade, BigDecimal percentualDescontoAntiguidadeDebito,
					BigDecimal percentualDescontoInatividadeLigacaoAgua, Integer parcelamentoPerfilId,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDebitoACobrarServicoLongoPrazo,
					BigDecimal valorDebitoACobrarServicoCurtoPrazo, BigDecimal valorDebitoACobrarParcelamentoLongoPrazo,
					BigDecimal valorDebitoACobrarParcelamentoCurtoPrazo, Short numeroPrestacoes, BigDecimal valorPrestacao,
					BigDecimal valorEntradaMinima, BigDecimal taxaJuros, String indicadorConfirmacaoParcelamento, Cliente cliente,
					Usuario usuarioLogado, String cpfCnpjClienteParcelamentoDigitado, BigDecimal descontoSancoesRDEspecial,
					BigDecimal descontoTarifaSocialRDEspecial, Date dataEntradaParcelamento, Pagamento pagamento,
					Integer numeroMesesEntreParcelas, Integer numeroParcelasALancar, Integer numeroMesesInicioCobranca,
					Integer idBoletoBancario, String indicadorCobrancaParcelamento, String indicadorParcelamentoCobrancaBancaria,
					Integer numeroDiasVencimentoEntrada, String indicadorPessoaFisicaJuridica, Integer anoMesReferenciaDebitoInicial,
					Integer anoMesReferenciaDebitoFinal, BigDecimal percentualDescontoJurosMora, BigDecimal percentualDescontoMulta,
					BigDecimal percentualDescontoCorrecaoMonetaria, BigDecimal valorDescontoAcrescimosImpontualidadeNaPrestacao,
					BigDecimal valorFinalFinanciamento, Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		try{

			// Pega as informações de Sistema Parâmetros
			SistemaParametro sistemaParametros = null;
			sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

			Collection<Integer> tiposFinanciamento = Util
							.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO.executar());

			// valida as coleções recebidas para garantir que todos os elementos de contas, guias e
			// debitos a cobrar recebidos sejam
			// do imóvel. Alguns casos ocorreram em produção que foram passados coleções de contas
			// de outro imóvel
			Parcelamento parcelamentoValidacao = new Parcelamento();
			parcelamentoValidacao.setImovel(imovel);
			parcelamentoValidacao.setValorConta(valorTotalContaValores);
			parcelamentoValidacao.setValorGuiaPapagamento(valorGuiasPagamento);
			parcelamentoValidacao.setValorServicosACobrar(valorDebitoACobrarServico);
			parcelamentoValidacao.setValorParcelamentosACobrar(valorDebitoACobrarParcelamento);
			parcelamentoValidacao.setValorCreditoARealizar(valorCreditoARealizar);

			this.validarEntidadesDebitoParcelamentoImovel(parcelamentoValidacao, colecaoContaValores, colecaoGuiaPagamentoValores,
							colecaoDebitoACobrar, colecaoCreditoARealizar);
			parcelamentoValidacao = null;

			Short permiteParcelamentoSemConta = Util.converterStringParaShort((String) ParametroCobranca.P_PERMITE_PARCEL_SEM_CONTA
							.executar());

			Collection<Conta> colecaoContaTransferidaHistorico = null;

			if(permiteParcelamentoSemConta != null){
				// DESO Permite parcelamento de débitos e/ou guias de pagamentos, sem a necessidade
				// de uma conta. Portanto, tem que verificar se tem conta envolvida no parcelamento
				// para nao mandar para o historico conta que nao tá sendo parcelada.
				if(permiteParcelamentoSemConta.equals(ConstantesSistema.SIM)){
					if(valorTotalContaValores != null && !valorTotalContaValores.equals(BigDecimal.ZERO)
									&& !valorTotalContaValores.equals(new BigDecimal("0.00"))){
						colecaoContaTransferidaHistorico = classificarContasParaHistorico(colecaoContaValores, usuarioLogado,
										indicadorContasRevisao);
					}
				}else{
					colecaoContaTransferidaHistorico = classificarContasParaHistorico(colecaoContaValores, usuarioLogado,
									indicadorContasRevisao);
				}
			}else{
				colecaoContaTransferidaHistorico = classificarContasParaHistorico(colecaoContaValores, usuarioLogado,
								indicadorContasRevisao);
			}

			// Verificar e Atualizar Itens Documento de Cobrança e da Cobrança Administrativa

			if(!Util.isVazioOrNulo(colecaoContaTransferidaHistorico)){
				Collection<Integer> colecaoContaId = new ArrayList<Integer>();

				Integer idConta = null;

				for(Conta conta : colecaoContaTransferidaHistorico){
					idConta = conta.getId();
					colecaoContaId.add(idConta);
				}

				this.getControladorFaturamento().atualizarCobrancaDocumentoItemContaCobrancaAdministrativa(colecaoContaId);
			}

			Collection<GuiaPagamento> colecaoGuiaPagamentoTransferidoHistorico = classificarGuiaPagamentoParaHistorico(
							colecaoGuiaPagamentoValores, indicadorGuiasPagamento);

			this.getControladorFaturamento().atualizarCobrancaDocumentoItemGuiaCobrancaAdministrativa(
							colecaoGuiaPagamentoTransferidoHistorico);

			// Debito a cobrar help para atualização do novo débito referente ao parcelamento.
			Collection<DebitoACobrar> colecaoDebitoACobrarHelp = new ArrayList<DebitoACobrar>();

			Collection<DebitoACobrar> colecaoDebitoACobrarTemp = new ArrayList<DebitoACobrar>();
			Map debitoACobrarValorDivida = new HashMap();

			classificarDebitoACobrarParaHistorico(colecaoDebitoACobrar, indicadorDebitosACobrar, sistemaParametros,
							colecaoDebitoACobrarHelp, colecaoDebitoACobrarTemp, debitoACobrarValorDivida);

			Collection<CreditoARealizar> colecaoCreditoARealizarParaAtualizacao = classificarCreditoARealizarParaHistorico(
							colecaoCreditoARealizar, indicadorCreditoARealizar, sistemaParametros);

			/*
			 * [SB0009] - Gerar Dados do Parcelamento
			 */
			BigDecimal valorJurosParcelamento = BigDecimal.ZERO;
			if((taxaJuros != null) && (taxaJuros.compareTo(BigDecimal.ZERO) != 0)){
				valorJurosParcelamento = valorFinalFinanciamento.add(valorEntradaInformado);
				valorJurosParcelamento = valorJurosParcelamento.subtract(valorASerNegociado);

				if(valorJurosParcelamento.compareTo(BigDecimal.ZERO) == -1){
					valorJurosParcelamento = BigDecimal.ZERO;
				}
			}

			Parcelamento parcelamento = gerarDadosParcelamento(
							dataParcelamento,
							valorTotalContaValores,
							valorGuiasPagamento,
							valorDebitoACobrarServico,
							valorDebitoACobrarParcelamento,
							valorCreditoARealizar,
							valorAtualizacaoMonetaria,
							valorJurosMora,
							valorMulta,
							valorDebitoTotalAtualizado,
							descontoAcrescimosImpontualidade,
							descontoAntiguidadeDebito,
							descontoInatividadeLigacaoAgua,
							valorEntradaInformado,
							valorJurosParcelamento,
							numeroPrestacoes,
							valorPrestacao,
							indicadorRestabelecimento.equals("") ? null : Short.valueOf(indicadorRestabelecimento),
							indicadorContasRevisao.equals("") ? null : Short.valueOf(indicadorContasRevisao),
							indicadorGuiasPagamento.equals("") ? null : Short.valueOf(indicadorGuiasPagamento),
							indicadorAcrescimosImpotualidade.equals("") ? null : Short.valueOf(indicadorAcrescimosImpotualidade),
							indicadorDebitosACobrar.equals("") ? null : Short.valueOf(indicadorDebitosACobrar),
							indicadorCreditoARealizar.equals("") ? null : Short.valueOf(indicadorCreditoARealizar),
							percentualDescontoAcrescimosImpontualidade,
							percentualDescontoAntiguidadeDebito,
							percentualDescontoInatividadeLigacaoAgua,
							imovel,
							usuarioLogado,
							parcelamentoPerfilId,
							colecaoContaValores,
							colecaoGuiaPagamentoValores,
							colecaoDebitoACobrar,
							colecaoCreditoARealizar,
							taxaJuros,
							indicadorConfirmacaoParcelamento.equals("") ? Short.valueOf((short) 1) : Short
											.valueOf(indicadorConfirmacaoParcelamento), cliente, descontoSancoesRDEspecial,
							descontoTarifaSocialRDEspecial, dataEntradaParcelamento, indicadorCobrancaParcelamento,
							anoMesReferenciaDebitoInicial, anoMesReferenciaDebitoFinal, percentualDescontoJurosMora,
							percentualDescontoMulta, percentualDescontoCorrecaoMonetaria, valorDescontoAcrescimosImpontualidadeNaPrestacao,
							colecaoParcelamentoConfiguracaoPrestacao);
			Integer parcelamentoId = parcelamento.getId();

			if(colecaoCreditoARealizarParaAtualizacao != null && colecaoCreditoARealizarParaAtualizacao.size() > 0){
				for(CreditoARealizar creditoARealizar : colecaoCreditoARealizarParaAtualizacao){
					creditoARealizar.setParcelamento(parcelamento);
				}
			}

			// 6.1.5.4. O sistema transfere para o histórico de créditos
			// a realizar, os créditos a realizar que foram parcelados
			this.getControladorFaturamento().transferirCreditoARealizarParaHistorico(colecaoCreditoARealizarParaAtualizacao);

			// 6.1.5.5. Para cada crédito a realizar transferido,
			// atualiza o indicador de que o crédito a realizar está no
			// histórico
			this.getControladorFaturamento().atualizarIndicadorCreditosARealizarNoHistorico(colecaoCreditoARealizarParaAtualizacao);

			classificarDebitoACobrarTempParaHistorico(colecaoDebitoACobrarTemp, debitoACobrarValorDivida, parcelamentoId);

			// Insere na tabela debito a cobrar o valor do parcelamento em linha separadas.
			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrarHelp){
				debitoACobrar.setId(null);
				debitoACobrar.setGeracaoDebito(new Date());
				debitoACobrar.setNumeroPrestacaoCobradas(Short.valueOf("0"));

				// ******* Campanha Parcelamento date 22/08/2011 ******************
				Integer numeroMesesInicioCobrancaParcela = null;

				if(numeroMesesInicioCobranca == null){
					numeroMesesInicioCobrancaParcela = 1;
				}else{
					numeroMesesInicioCobrancaParcela = numeroMesesInicioCobranca;
				}

				Integer anoMesCobrancaDebito = Util.somaMesAnoMesReferencia(sistemaParametros.getAnoMesFaturamento(),
								numeroMesesInicioCobrancaParcela);

				debitoACobrar.setAnoMesCobrancaDebito(anoMesCobrancaDebito);

				debitoACobrar.setNumeroMesesEntreParcelas(numeroMesesEntreParcelas);
				debitoACobrar.setNumeroParcelasALancar(numeroParcelasALancar);
				debitoACobrar.setAnoMesReferenciaUltimaCobranca(null);
			}

			// 6.1.8 [UC0108] Determinar a quantidade de economias por categoria
			Collection<Categoria> colecaoCategoria = this.getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

			BigDecimal valorEntrada = BigDecimal.ZERO;
			if((valorEntradaInformado.compareTo(BigDecimal.ZERO) == 0)){
				valorEntrada = valorEntradaMinima;
			}else{
				valorEntrada = valorEntradaInformado;
			}

			// Distribui Total Contas por Categoria
			Map<Categoria, Map<Integer, BigDecimal>> mapaIdCategoriaItemContabilValor = distribuirTotalContaPorCategoriaItemContabil(
							valorTotalContaValores, valorEntrada, valorCreditoARealizar, colecaoContaValores,
							indicadorAcrescimosImpotualidade);

			// Acumular Juros de Parcelamento Normal e em Cobrança Administrativa
			Map<Integer, BigDecimal> mapaListaAcumuladaJurosParcelamento = this.obterMapeamentoJurosParcelamento(valorJurosParcelamento,
							colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar);

			// Indica se há contas marcadas como entrada de parcelamento
			boolean existeContaComoEntradaParcelamento = existeContaComoEntradaParcelamento(colecaoContaValores);

			// Valor de entrada a ser deduzido durante o processo de acúmulo dos valores por
			// TipoDebito, ItemContabil e Categoria. Este valor inicia com o valor de entrada
			// completo e estará reduzindo a cada valor identificado

			BigDecimal valorEntradaParaDeduzir = valorEntrada;

			// Mapa que será utilizado para acumular os valores de entrada por TipoDebito,
			// ItemContabil e
			// Categoria. Os Tipos de Débito para a entrada são os seguintes:
			// ENTRADA_PARCELAMENTO, ENTRADA_PARCELAMENTO_COBRANCA_ADMINISTRATIVA
			Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito = new HashMap<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>();

			// *************************************************************
			// Acumula os valores de DÉBITO em Maps na estrutura
			// (TipoDebito -> ItemContabil -> Categoria -> Valor)
			// Durante a identificação dos valores o Valor de Entrada
			// já é deduzido - [SB0029]
			// *************************************************************

			Short[] indicadorTotalRemuneracaoCobrancaAdm = new Short[1];
			indicadorTotalRemuneracaoCobrancaAdm[0] = ConstantesSistema.NAO;
			
			// 7.1.1.5. Acumular lista de Item Contábil de Conta os valores das contas
			// juntamente com seus débitos cobrados realizados que foram parcelados
			Object[] retorno = acumularListaConta(colecaoContaValores, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
							existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);

			Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaConta = (Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>) retorno[0];
			valorEntradaParaDeduzir = (BigDecimal) retorno[1];

			// 7.1.2.5. Acumular lista de Item Contábil de Guia os valores das Guias de
			// Pagamento que foram parcelados:
			retorno = acumularListaGuiaPagamento(colecaoGuiaPagamentoValores, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
							existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);

			Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaGuiaPagamento = (Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>) retorno[0];
			valorEntradaParaDeduzir = (BigDecimal) retorno[1];

			// 7.1.3.6. Acumular lista de Item Contábil de Débito a Cobrar-Financiamento os
			// valores dos débitos a cobrar de serviços que foram parcelados
			retorno = acumularListaDebitoACobrar(colecaoDebitoACobrar, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
							existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);

			this.cancelarCreditoARealizarParcelamentoComConcessaoDesconto(colecaoDebitoACobrar, usuarioLogado);

			Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaDebitoACobrar = (Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>) retorno[0];
			valorEntradaParaDeduzir = (BigDecimal) retorno[1];

			// *************************************************************
			// Acumula os valores de ACRÉSCIMO em um Map na estrutura
			// (TipoDebito -> ItemContabil -> Valor)
			// *************************************************************

			// 7.1.1.9.1. Acumular na lista de Item Contábil de Acréscimos por Impontualidade-Normal
			// e Cobrança Administrativa
			BigDecimal valorDescontoAcrescimos = BigDecimal.ZERO;

			if(valorDescontoAcrescimosImpontualidadeNaPrestacao != null
							&& valorDescontoAcrescimosImpontualidadeNaPrestacao.compareTo(BigDecimal.ZERO) > 0){
				valorDescontoAcrescimos = valorDescontoAcrescimosImpontualidadeNaPrestacao;
			}else if(descontoAcrescimosImpontualidade != null && descontoAcrescimosImpontualidade.compareTo(BigDecimal.ZERO) > 0){
				valorDescontoAcrescimos = descontoAcrescimosImpontualidade;
			}

			retorno = this.acumularListaAcrescimos(colecaoContaValores, colecaoGuiaPagamentoValores, existeContaComoEntradaParcelamento,
							valorDescontoAcrescimos, indicadorCobrancaParcelamento, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
							indicadorTotalRemuneracaoCobrancaAdm);

			Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaAcrescimoImpontualidade = (Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>) retorno[0];
			valorEntradaParaDeduzir = (BigDecimal) retorno[1];

			// *************************************************************
			// Acumula os valores de CRÉDITO em um Map na estrutura
			// (ItemContabil -> Valor)
			// *************************************************************

			// 7.1.1.6. e 7.1.4.5. Acumular lista de Item Contábil de Crédito os valores de créditos
			// da conta que foram parcelados
			Map<Integer, BigDecimal> mapaListaCreditoItemContabil = acumularListaCreditoItemContabil(colecaoCreditoARealizar,
							colecaoContaValores);

			Integer idGuiaPagamentoGeral = null;

			// [SB0005 - Gerar Débitos a Cobrar dos Acréscimos por Impontualidade]
			this.gerarDebitosACobrarAcrescimosImpontualidadeParcelamento(imovel, valorAtualizacaoMonetaria, valorJurosMora, valorMulta,
							taxaJuros, parcelamentoId, colecaoCategoria, numeroMesesEntreParcelas, numeroParcelasALancar,
							numeroMesesInicioCobranca);


			// [SB0007 - Gerar Créditos a Realizar do Parcelamento].
			if(indicadorCobrancaParcelamento != null
							&& indicadorCobrancaParcelamento.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_DEBITO_A_COBRAR)){
				this.gerarCreditoARealizarParcelamento(imovel, numeroPrestacoes, valorJurosParcelamento, parcelamentoId,
								descontoAcrescimosImpontualidade, descontoAntiguidadeDebito, descontoInatividadeLigacaoAgua,
								valorCreditoARealizar, colecaoCategoria, descontoSancoesRDEspecial, descontoTarifaSocialRDEspecial,
								mapaListaCreditoItemContabil, valorDescontoAcrescimosImpontualidadeNaPrestacao, numeroMesesEntreParcelas);
			}

			// 6.1.10. Caso o campo "Cobrança do Parcelamento" esteja com a opção "Débito A Cobrar"
			// selecionada.
			if(indicadorCobrancaParcelamento != null
							&& indicadorCobrancaParcelamento.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_DEBITO_A_COBRAR)){
				// [SB0006 - Gerar Débitos a Cobrar do Parcelamento]
				this.gerarDebitosACobrarParcelamento(imovel, numeroPrestacoes, taxaJuros, parcelamentoId, colecaoCategoria,
								mapaListaAcumuladaJurosParcelamento, numeroMesesEntreParcelas, numeroParcelasALancar,
								numeroMesesInicioCobranca, mapaListaAcumuladaConta, mapaListaAcumuladaGuiaPagamento,
								mapaListaAcumuladaDebitoACobrar, mapaListaAcumuladaAcrescimoImpontualidade, null,
								indicadorTotalRemuneracaoCobrancaAdm[0]);

			}else if(indicadorCobrancaParcelamento != null
							&& indicadorCobrancaParcelamento.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_GUIA_PAGAMENTO)){
				// 6.1.9. Caso contrário, ou seja, o campo "Cobrança do Parcelamento" esteja com a
				// opção "Guia de Pagamento" selecionada.
				// [SB0013 - Gerar Guias de Pagamento do Parcelamento].
				idGuiaPagamentoGeral = this.gerarGuiaPagamentoParcelamento(imovel, parcelamento, colecaoCategoria, valorEntrada,
								colecaoContaValores, idBoletoBancario, indicadorParcelamentoCobrancaBancaria, numeroDiasVencimentoEntrada,
								valorASerNegociado, mapaListaAcumuladaConta, mapaListaAcumuladaGuiaPagamento,
								mapaListaAcumuladaDebitoACobrar, mapaListaAcumuladaJurosParcelamento,
								mapaListaAcumuladaAcrescimoImpontualidade, indicadorTotalRemuneracaoCobrancaAdm[0],
								colecaoParcelamentoConfiguracaoPrestacao);
			}

			// if(colecaoContaValores != null){
			// cancelarBoletoUnico(colecaoContaValores, usuarioLogado, idBoletoBancario);
			// }

			// [SB0008 - Gerar a Entrada do Parcelamento]
			this.gerarEntradaParcelamento(imovel, valorEntradaPorTipoDebito, parcelamentoId, colecaoContaValores, usuarioLogado, pagamento,
							indicadorContasRevisao, indicadorCobrancaParcelamento, idGuiaPagamentoGeral, numeroDiasVencimentoEntrada,
							dataEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm[0]);

			// Registra a transferência das parcelas de longo para curto prazo dos débitos
			// originais.
			getControladorContabil().transferirDebitosParaCurtoPrazo(colecaoDebitoACobrar);

			// Registrar lançamento contábil de parcelamento.
			if(mapaIdCategoriaItemContabilValor != null && !mapaIdCategoriaItemContabilValor.isEmpty()){

				ParcelamentoHelper parcelamentoHelper = new ParcelamentoHelper(parcelamento, mapaIdCategoriaItemContabilValor);
				getControladorContabil().registrarLancamentoContabil(parcelamentoHelper, OperacaoContabil.PARCELAMENTO);
			}

			// Registrar lançamento contábil de parcelamento para as contas com PDD
			for(ContaValoresHelper contaValoresHelper : colecaoContaValores){
				Conta conta = this.repositorioArrecadacao.pesquisarConta(contaValoresHelper.getConta().getId());
				if(conta != null){

					if(conta.getIndicadorPDD() != null && conta.getIndicadorPDD().equals(ConstantesSistema.SIM)){
						this.getControladorContabil().atualizarProvisaoDevedoresDuvidososLancamentoContabil(conta, sistemaParametros,
										ProvisaoDevedoresDuvidososMotivoBaixa.PARCELAMENTO);
					}
				}else{
					ContaHistorico contaHistorico = this.repositorioArrecadacao.pesquisarContaHistorico(contaValoresHelper.getConta()
									.getId());

					if(contaHistorico.getIndicadorPDD() != null && contaHistorico.getIndicadorPDD().equals(ConstantesSistema.SIM)){
						this.getControladorContabil().atualizarProvisaoDevedoresDuvidososLancamentoContabil(contaHistorico,
										sistemaParametros, ProvisaoDevedoresDuvidososMotivoBaixa.PARCELAMENTO);
					}
				}
			}

			// Atualiza a quantidade de parcelamentos e reparcelamenos do imóvel
			Short numeroParcelamento = 0;
			Short numeroReparcelamento = Short.valueOf((short) 0);
			Short numeroReparcelamentoConsecutivos = Short.valueOf((short) 0);

			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.IMOVEL_ID, imovel.getId()));
			filtroDebitoACobrar.adicionarParametro(new ParametroSimplesColecao(FiltroDebitoACobrar.FINANCIAMENTO_TIPO_ID,
							tiposFinanciamento));

			Collection colecaoDebitoACobrarParcelamento = getControladorUtil()
							.pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

			Collection colecaoDebitoCobradoParcelamento = null;
			if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
				Iterator contaValores = colecaoContaValores.iterator();
				FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
				while(contaValores.hasNext()){
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();

					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID, contaValoresHelper.getConta()
									.getId()));
					filtroDebitoCobrado.adicionarParametro(new ParametroSimplesColecao(FiltroDebitoCobrado.FINANCIAMENTO_TIPO_ID,
									tiposFinanciamento));

					colecaoDebitoCobradoParcelamento = getControladorUtil().pesquisar(filtroDebitoCobrado, DebitoCobrado.class.getName());
					filtroDebitoCobrado.limparListaParametros();
				}
				filtroDebitoCobrado = null;

			}

			if(colecaoDebitoACobrarParcelamento != null && !colecaoDebitoACobrarParcelamento.isEmpty()
							|| colecaoDebitoCobradoParcelamento != null && !colecaoDebitoCobradoParcelamento.isEmpty()){
				if(imovel.getNumeroReparcelamento() == null){
					numeroReparcelamento = Short.valueOf((short) 0);
				}else{
					numeroReparcelamento = (short) (imovel.getNumeroReparcelamento() + 1);
				}
				if(imovel.getNumeroReparcelamentoConsecutivos() == null){
					numeroReparcelamentoConsecutivos = Short.valueOf((short) 0);
				}else{
					numeroReparcelamentoConsecutivos = (short) (imovel.getNumeroReparcelamentoConsecutivos() + 1);
				}

			}
			if(imovel.getNumeroParcelamento() == null){
				numeroParcelamento = Short.valueOf((short) 1);
			}else{
				numeroParcelamento = (short) (imovel.getNumeroParcelamento() + 1);
			}

			imovel.setNumeroParcelamento(numeroParcelamento);
			imovel.setNumeroReparcelamento(numeroReparcelamento);
			imovel.setNumeroReparcelamentoConsecutivos(numeroReparcelamentoConsecutivos);
			imovel.setUltimaAlteracao(new Date());
			getControladorUtil().atualizar(imovel);

			// Insere CPF/CNPJ para o cliente do Parcelamento
			if(!Util.isVazioOuBranco(cpfCnpjClienteParcelamentoDigitado) && !Util.isVazioOuBranco(indicadorPessoaFisicaJuridica)){
				this.getControladorCliente().atualizarCpfCnpjCliente(cpfCnpjClienteParcelamentoDigitado, cliente.getId(),
								indicadorPessoaFisicaJuridica);
			}

			return parcelamentoId;

		}catch(ControladorException ce){
			ce.printStackTrace();
			sessionContext.setRollbackOnly();
			throw ce;
		}catch(Exception ex){
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Acumular lista de Item Contábil de Conta os valores das contas
	 * juntamente com seus débitos cobrados realizados que foram parcelados
	 * 
	 * @author Carlos Chrystian
	 * @date 19/07/2012
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 * @param valorEntrada
	 * @param colecaoContaValores
	 * @param existeContaComoEntradaParcelamento
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Object[] acumularListaConta(Collection<ContaValoresHelper> colecaoContaValores, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException,
					ErroRepositorioException{

		// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
		Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal = new HashMap<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>();
		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor = null;
		Object[] retorno = null;
		Integer tipoDebito = null;
		BigDecimal valorAgua = BigDecimal.ZERO;
		BigDecimal valorEsgoto = BigDecimal.ZERO;
		LancamentoItemContabilParcelamentoHelper itemContabilTarifaAgua = null;
		LancamentoItemContabilParcelamentoHelper itemContabilTarifaEsgoto = null;


		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		if(!Util.isVazioOrNulo(colecaoContaValores)){
			// Acumula valores de água, esgoto e débito das contas selecionadas.
			for(ContaValoresHelper contaHelper : colecaoContaValores){

				// Define o valor inicial do Indicador de Remuneração Total Cobrança Administrativa
				getControladorParcelamento().iniciarIndicadorRemuneracaoTotal(indicadorTotalRemuneracaoCobrancaAdm, contaHelper);

				// Carregando categorias da conta
				FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
				filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, contaHelper.getConta().getId()));

				Collection<ContaHistorico> colecaoContaHistorico = this.getControladorUtil().pesquisar(filtroContaHistorico,
								ContaHistorico.class.getName());

				// ******************************************************************
				// Acumulando os valores de Itens Contábeis relacionados a Conta:
				// TARIFA_DE_AGUA e TARIFA_DE_ESGOTO
				// Os valores serão acumulados por Item Contábil e Categoria
				// ******************************************************************

				if(!Util.isVazioOrNulo(colecaoContaHistorico)){

					Collection<ContaCategoriaHistorico> colecaoContaCategoriaHistorico = null;

					// Povoando valores dos itens contábeis de água e esgoto das contas.
					for(ContaHistorico contaHistorico : colecaoContaHistorico){

						// Itentifica o tipo de débito da conta
						retorno = getControladorParcelamento().identificarTipoDebitoConta(contaHistorico);

						tipoDebito = (Integer) retorno[0];

						// Se o indicador total de remuneração ainda não foi LIGADO, considera o
						// valor atribuído ao identificar tipo de débito
						if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
							indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
						}

						indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

						// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
						mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

						// Consulta as categorias da conta
						colecaoContaCategoriaHistorico = consultarColecaoContaCategoriaHistorico(contaHistorico.getId());

						// Se possui ContaCategoria, distribui os valores por item contábil e
						// categoria
						if(!Util.isVazioOrNulo(colecaoContaCategoriaHistorico)){

							itemContabilTarifaAgua = new LancamentoItemContabilParcelamentoHelper(LancamentoItemContabil.TARIFA_DE_AGUA,
											indicadorParcialRemuneracaoCobrancaAdm);
							itemContabilTarifaEsgoto = new LancamentoItemContabilParcelamentoHelper(
											LancamentoItemContabil.TARIFA_DE_ESGOTO, indicadorParcialRemuneracaoCobrancaAdm);

							// Captura o Map (Categoria -> Valor) que já existe para o item contábil
							// TARIFA_DE_AGUA. Caso não exista, cria um Map vazio
							Map<Categoria, BigDecimal> mapaCategoriaValorTarifaAgua = mapaItensCategoriaValor.get(itemContabilTarifaAgua);
							if(mapaCategoriaValorTarifaAgua == null){
								mapaCategoriaValorTarifaAgua = new HashMap<Categoria, BigDecimal>();
							}

							// Captura o Map (Categoria -> Valor) que já existe para o item contábil
							// TARIFA_DE_ESGOTO. Caso não exista, cria um Map vazio
							Map<Categoria, BigDecimal> mapaCategoriaValorTarifaEsgoto = mapaItensCategoriaValor
											.get(itemContabilTarifaEsgoto);
							if(mapaCategoriaValorTarifaEsgoto == null){
								mapaCategoriaValorTarifaEsgoto = new HashMap<Categoria, BigDecimal>();
							}

							// Para cada ContaCategoria, será capturado o valor por item contábil
							// para ser acumulado no
							// Map (TipoDebito -> Item Contábil -> Categoria -> Valor)
							for(ContaCategoriaHistorico contaCategoriaHistorico : colecaoContaCategoriaHistorico){

								// Instancia uma Categoria apenas com o Id e com a quantidade de
								// economias desta Categoria, que pode ser alterada caso seja
								// encontrada outra conta com um número maior de economias
								Categoria categoriaAtual = new Categoria(contaCategoriaHistorico.getComp_id().getCategoria().getId());

								if(contaCategoriaHistorico.getQuantidadeEconomia() > 0){
									categoriaAtual.setQuantidadeEconomiasCategoria(new Integer(contaCategoriaHistorico
													.getQuantidadeEconomia()));
								}

								// Povoando valor de água, caso exista.
								if(contaCategoriaHistorico.getValorAgua() != null
												&& contaCategoriaHistorico.getValorAgua().compareTo(BigDecimal.ZERO) > 0){

									valorAgua = contaCategoriaHistorico.getValorAgua().setScale(2, BigDecimal.ROUND_DOWN);

									valorEntradaParaDeduzir = acumularCategoriaValor(valorAgua, valorEntradaParaDeduzir, tipoDebito,
													itemContabilTarifaAgua, categoriaAtual, mapaCategoriaValorTarifaAgua,
													valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);
								}

								// Povoando valor de esgoto, caso exista.
								if(contaCategoriaHistorico.getValorEsgoto() != null
												&& contaCategoriaHistorico.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){

									valorEsgoto = contaCategoriaHistorico.getValorEsgoto().setScale(2, BigDecimal.ROUND_DOWN);

									valorEntradaParaDeduzir = acumularCategoriaValor(valorEsgoto, valorEntradaParaDeduzir, tipoDebito,
													itemContabilTarifaEsgoto, categoriaAtual, mapaCategoriaValorTarifaEsgoto,
													valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);
								}
							}

							// ******************************************************************
							// Armazena os Maps manipulados acima
							// ******************************************************************

							// Se o Map (Categoria -> Valor) para o item contábil TARIFA_DE_AGUA
							// estiver preenchido, guarda no
							// Map (ItemContabil -> Categoria -> Valor)
							if(!mapaCategoriaValorTarifaAgua.isEmpty()){
								mapaItensCategoriaValor.put(itemContabilTarifaAgua, mapaCategoriaValorTarifaAgua);
							}

							// Se o Map (Categoria -> Valor) para o item contábil TARIFA_DE_ESGOTO
							// estiver preenchido, guarda no
							// Map (ItemContabil -> Categoria -> Valor)
							if(!mapaCategoriaValorTarifaEsgoto.isEmpty()){
								mapaItensCategoriaValor.put(itemContabilTarifaEsgoto, mapaCategoriaValorTarifaEsgoto);
							}

							// Se o Map (ItemContabil -> Categoria -> Valor) para o tipo de débito
							// em questão estiver preenchido, guarda no
							// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
							if(!mapaItensCategoriaValor.isEmpty()){
								mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
							}
						}
					}

					// ******************************************************************
					// Acumula os valores de Itens Contábeis relacionados a
					// Débitos Cobrados. Os valores serão acumulados por Item Contábil
					// e Categoria
					// ******************************************************************
					valorEntradaParaDeduzir = acumularListaDebitoCobradoConta(mapaPrincipal, contaHelper, valorEntradaParaDeduzir,
									valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);
				}
			}
		}

		Object[] resultado = new Object[2];
		resultado[0] = mapaPrincipal;
		resultado[1] = valorEntradaParaDeduzir;

		return resultado;
	}

	/**
	 * Acumula os valores por categoria dos Débitos Cobrados de uma determinada Conta
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 * @param mapaPrincipal
	 * @param contaHelper
	 * @param existeContaComoEntradaParcelamento
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private BigDecimal acumularListaDebitoCobradoConta(
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal,
					ContaValoresHelper contaHelper, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm)
					throws ErroRepositorioException, ControladorException{

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor = null;
		Integer tipoDebito = null;
		BigDecimal valorDebitoCobrado = null;
		Object[] retorno = null;

		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		// Carregando débitos cobrados do histórico
		Collection<DebitoCobradoHistorico> colecaoDebitoCobradoHistorico = repositorioFaturamento
						.pesquisarDebitosCobradosHistorico(contaHelper.getConta().getId());

		if(!Util.isVazioOrNulo(colecaoDebitoCobradoHistorico)){

			// Povoando valores dos itens contábeis dos débitos cobrados.
			for(DebitoCobradoHistorico debitoCobradoHistorico : colecaoDebitoCobradoHistorico){

				// Identifica o tipo de débito do DebicoCobradoHistorico
				retorno = getControladorParcelamento().identificarTipoDebitoDebitoCobrado(contaHelper, debitoCobradoHistorico);

				tipoDebito = (Integer) retorno[0];

				// Se o indicador TOTAL ainda não foi "ligado", considera o que foi definido para
				// este tipo de débito
				if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
					indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
				}

				indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

				// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
				mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

				// Consulta a coleção de DebitoCobradoCategoriaHistorico
				Collection<DebitoCobradoCategoriaHistorico> colecaoDebitoCobradoCategoriaHistorico = consultarColecaoDebitoCobradoCategoriaHistorico(debitoCobradoHistorico);

				if(!Util.isVazioOrNulo(colecaoDebitoCobradoCategoriaHistorico)){
					// Captura o Map (Categoria -> Valor) que já existe para o item contábil
					// do DebitoCobrado. Caso não exista, cria um Map vazio

					LancamentoItemContabilParcelamentoHelper itemContabilDebitoCobrado = new LancamentoItemContabilParcelamentoHelper(
									debitoCobradoHistorico.getLancamentoItemContabil().getId(), indicadorParcialRemuneracaoCobrancaAdm);

					Map<Categoria, BigDecimal> mapaCategoriaValorDebitoCobrado = mapaItensCategoriaValor.get(itemContabilDebitoCobrado);

					if(mapaCategoriaValorDebitoCobrado == null){
						mapaCategoriaValorDebitoCobrado = new HashMap<Categoria, BigDecimal>();
					}

					// ******************************************************************
					// Percorre as Categorias do DebitoCobrado, acumulando seus valores
					// num Mapa (Categoria -> Valor)
					// ******************************************************************
					for(DebitoCobradoCategoriaHistorico debitoCobradoCategoriaHistorico : colecaoDebitoCobradoCategoriaHistorico){

						// Instancia uma Categoria apenas com o Id e com a quantidade de
						// economias desta Categoria, que pode ser alterada caso seja
						// encontrada outra conta com um número maior de economias
						Categoria categoriaAtual = new Categoria(debitoCobradoCategoriaHistorico.getCategoria().getId());

						if(debitoCobradoCategoriaHistorico.getQuantidadeEconomia() != null
										&& debitoCobradoCategoriaHistorico.getQuantidadeEconomia().intValue() > 0){
							categoriaAtual.setQuantidadeEconomiasCategoria(debitoCobradoCategoriaHistorico.getQuantidadeEconomia());
						}

						// Povoando valor de água, caso exista.
						if(debitoCobradoCategoriaHistorico.getValorCategoria() != null
										&& debitoCobradoCategoriaHistorico.getValorCategoria().compareTo(BigDecimal.ZERO) > 0){

							valorDebitoCobrado = debitoCobradoCategoriaHistorico.getValorCategoria().setScale(2, BigDecimal.ROUND_DOWN);

							valorEntradaParaDeduzir = acumularCategoriaValor(valorDebitoCobrado, valorEntradaParaDeduzir, tipoDebito,
											itemContabilDebitoCobrado, categoriaAtual, mapaCategoriaValorDebitoCobrado,
											valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);
						}
					}

					// ******************************************************************
					// Armazena os Maps manipulados acima
					// ******************************************************************

					// Se o Map (Categoria -> Valor) para o item contábil do DebicoCobrado
					// estiver preenchido, guarda no
					// Map (ItemContabil -> Categoria -> Valor)
					if(!mapaCategoriaValorDebitoCobrado.isEmpty()){
						mapaItensCategoriaValor.put(itemContabilDebitoCobrado, mapaCategoriaValorDebitoCobrado);
					}

					// Se o Map (ItemContabil -> Categoria -> Valor) para o tipo de débito
					// em questão estiver preenchido, guarda no
					// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
					if(!mapaItensCategoriaValor.isEmpty()){
						mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
					}
				}
			}
		}

		return valorEntradaParaDeduzir;
	}



	/**
	 * Acumular lista de Item Contábil de Guia os valores das Guias de Pagamento que foram
	 * parcelados
	 * 
	 * @author Carlos Chrystian
	 * @date 19/07/2012
	 * @author Luciano Galvao
	 * @date 01/11/2012
	 */
	private Object[] acumularListaGuiaPagamento(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores,
					BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException{

		Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal = new HashMap<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>();
		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor = null;
		Integer tipoDebito = null;
		BigDecimal valorGuiaPagamento = null;
		Object[] retorno = null;
		Collection<GuiaPagamentoPrestacaoHistorico> colecaoGuiaPagamentoPrestacaoHistorico = null;
		Collection<Integer> colecaoIdLancamentoItemContabilProcessado = null;
		Integer idLancamentoItemContabil = null;

		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValores)){

			// Acumula valores da Guia de Pagamento do Item Contábil.
			for(GuiaPagamentoValoresHelper guiaHelper : colecaoGuiaPagamentoValores){
				// Carregando guias da pagamento
				colecaoGuiaPagamentoPrestacaoHistorico = pesquisarGuiaPagamentoPrestacoesHistorico(guiaHelper.getIdGuiaPagamento(),
								guiaHelper.getNumeroPrestacao());

				colecaoIdLancamentoItemContabilProcessado = new ArrayList<Integer>();

				for(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico : colecaoGuiaPagamentoPrestacaoHistorico){

					idLancamentoItemContabil = guiaPagamentoPrestacaoHistorico.getLancamentoItemContabil().getId();

					// Verifica se o lançamento contábil já foi processado
					if(colecaoIdLancamentoItemContabilProcessado.contains(idLancamentoItemContabil)){
						continue;
					}else{
						colecaoIdLancamentoItemContabilProcessado.add(idLancamentoItemContabil);
					}

					// Identifica o tipo de débito do GuiaPagamentoPrestacaoHistorico
					retorno = getControladorParcelamento().identificarTipoDebitoGuiaPagamento(guiaHelper.getIdGuiaPagamento(),
									guiaHelper.getNumeroPrestacao(), idLancamentoItemContabil);

					tipoDebito = (Integer) retorno[0];

					// Se o indicador TOTAL ainda não foi "ligado", considera o que foi definido
					// para
					// este tipo de débito
					if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
						indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
					}

					indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

					LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper = new LancamentoItemContabilParcelamentoHelper(
									guiaPagamentoPrestacaoHistorico.getLancamentoItemContabil().getId(),
									indicadorParcialRemuneracaoCobrancaAdm);

					// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
					mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

					// Consulta a coleção de GuiaPagamentoCategoriaHistorico
					Collection<GuiaPagamentoCategoriaHistorico> colecaoGuiaPagamentoCategoriaHistorico = consultarColecaoGuiaPagamentoCategoriaHistorico(
									guiaPagamentoPrestacaoHistorico.getComp_id().getGuiaPagamentoId(), guiaPagamentoPrestacaoHistorico
													.getComp_id().getNumeroPrestacao(), guiaPagamentoPrestacaoHistorico
													.getLancamentoItemContabil().getId());

					if(!Util.isVazioOrNulo(colecaoGuiaPagamentoCategoriaHistorico)){
						// Captura o Map (Categoria -> Valor) que já existe para o item contábil
						// do GuiaPagamentoPrestacaoHistorico. Caso não exista, cria um Map vazio
						Map<Categoria, BigDecimal> mapaCategoriaValorGuiaPagamento = mapaItensCategoriaValor.get(lancamentoContabilHelper);

						if(mapaCategoriaValorGuiaPagamento == null){
							mapaCategoriaValorGuiaPagamento = new HashMap<Categoria, BigDecimal>();
						}

						// ******************************************************************
						// Percorre as Categorias do GuiaPagamentoPrestacaoHistorico,
						// acumulando seus valores num Mapa (Categoria -> Valor)
						// ******************************************************************
						for(GuiaPagamentoCategoriaHistorico guiaPagamentoCategoriaHistorico : colecaoGuiaPagamentoCategoriaHistorico){

							// Instancia uma Categoria apenas com o Id e com a quantidade de
							// economias desta Categoria, que pode ser alterada caso seja
							// encontrada outra conta com um número maior de economias
							Categoria categoriaAtual = new Categoria(guiaPagamentoCategoriaHistorico.getCategoria().getId());

							if(guiaPagamentoCategoriaHistorico.getQuantidadeEconomia() != null
											&& guiaPagamentoCategoriaHistorico.getQuantidadeEconomia().intValue() > 0){
								categoriaAtual.setQuantidadeEconomiasCategoria(guiaPagamentoCategoriaHistorico.getQuantidadeEconomia());
							}

							// Povoando valor de água, caso exista.
							if(guiaPagamentoCategoriaHistorico.getValorCategoria() != null
											&& guiaPagamentoCategoriaHistorico.getValorCategoria().compareTo(BigDecimal.ZERO) > 0){

								valorGuiaPagamento = guiaPagamentoCategoriaHistorico.getValorCategoria().setScale(2, BigDecimal.ROUND_DOWN);

								valorEntradaParaDeduzir = acumularCategoriaValor(valorGuiaPagamento, valorEntradaParaDeduzir, tipoDebito,
												lancamentoContabilHelper, categoriaAtual, mapaCategoriaValorGuiaPagamento,
												valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);
							}
						}

						// ******************************************************************
						// Armazena os Maps manipulados acima
						// ******************************************************************

						// Se o Map (Categoria -> Valor) para o item contábil do
						// GuiaPagamentoPrestacaoHistorico estiver preenchido, guarda no
						// Map (ItemContabil -> Categoria -> Valor)
						if(!mapaCategoriaValorGuiaPagamento.isEmpty()){
							mapaItensCategoriaValor.put(lancamentoContabilHelper, mapaCategoriaValorGuiaPagamento);
						}

						// Se o Map (ItemContabil -> Categoria -> Valor) para a guia de pagamento
						// prestação histórico em questão estiver preenchido, guarda no
						// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
						if(!mapaItensCategoriaValor.isEmpty()){
							mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
						}
					}
				}
			}
		}

		Object[] resultado = new Object[2];
		resultado[0] = mapaPrincipal;
		resultado[1] = valorEntradaParaDeduzir;

		return resultado;
	}

	/**
	 * Acumula um valor passado em um item contábil, a partir de um Map(ItemContabil ->
	 * ValorItemContabil)
	 * 
	 * @author Luciano Galvao
	 * @date 29/10/2012
	 */
	private void acumularValorEntrada(
					Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> valorEntradaPorItemContabil,
					LancamentoItemContabilParcelamentoHelper itemContabil, Categoria categoria, BigDecimal valorEntradaParaAcumular){

		Map<Categoria, BigDecimal> valorEntradaPorCategoria = valorEntradaPorItemContabil.get(itemContabil);

		if(valorEntradaPorCategoria == null){
			valorEntradaPorCategoria = new HashMap<Categoria, BigDecimal>();
			valorEntradaPorItemContabil.put(itemContabil, valorEntradaPorCategoria);
		}

		BigDecimal valorEntradaAcumulado = valorEntradaPorCategoria.get(categoria);

		if(valorEntradaAcumulado == null){
			valorEntradaAcumulado = BigDecimal.ZERO;
		}

		valorEntradaAcumulado = valorEntradaAcumulado.add(valorEntradaParaAcumular);

		valorEntradaPorCategoria.put(categoria, valorEntradaAcumulado);
	}

	/**
	 * Retorna <true> se existe alguma conta da coleção marcada como Entrada de Parcelamento,
	 * <false> caso contrário.
	 * 
	 * @author Luciano Galvao
	 * @date 25/10/2012
	 */
	private boolean existeContaComoEntradaParcelamento(Collection<ContaValoresHelper> colecaoContaValores){

		boolean existeContaEP = false;
		Collection<Conta> colecaoContaEP = null;

		if(!Util.isVazioOrNulo(colecaoContaValores)){
			colecaoContaEP = new ArrayList<Conta>();

			Integer indicadorContasDebito = null;

			for(ContaValoresHelper contaValoresHelper : colecaoContaValores){
				indicadorContasDebito = contaValoresHelper.getIndicadorContasDebito();

				if(indicadorContasDebito != null && indicadorContasDebito.equals(Integer.valueOf(ConstantesSistema.SIM))){
					colecaoContaEP.add(contaValoresHelper.getConta());
				}
			}

			// Se foi localizada alguma conta marcada como EP (indicadorContasDebito = SIM)
			if(!Util.isVazioOrNulo(colecaoContaEP)){
				existeContaEP = true;
			}
		}

		return existeContaEP;

	}

	public void classificarDebitoACobrarTempParaHistorico(Collection<DebitoACobrar> colecaoDebitoACobrarTemp, Map debitoACobrarValorDivida,
					Integer parcelamentoId) throws ControladorException{

		Collection<DebitoACobrar> colecaoDebitoACobrarParaHistorico = new ArrayList<DebitoACobrar>();

		if(colecaoDebitoACobrarTemp != null && colecaoDebitoACobrarTemp.size() > 0){
			Parcelamento parcelamento = null;
			if(parcelamentoId != null){
				parcelamento = new Parcelamento();
				parcelamento.setId(parcelamentoId);
			}
			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrarTemp){

				DebitoACobrar debitoACobrarParaHistorico = new DebitoACobrar();

				debitoACobrar.setParcelamento(parcelamento);
				debitoACobrarParaHistorico.setParcelamento(parcelamento);

				debitoACobrarParaHistorico.setId(debitoACobrar.getId());
				debitoACobrarParaHistorico.setGeracaoDebito(debitoACobrar.getGeracaoDebito());
				debitoACobrarParaHistorico.setAnoMesReferenciaDebito(debitoACobrar.getAnoMesReferenciaDebito());
				debitoACobrarParaHistorico.setAnoMesCobrancaDebito(debitoACobrar.getAnoMesCobrancaDebito());
				debitoACobrarParaHistorico.setValorDebito(debitoACobrar.getValorDebito());
				debitoACobrarParaHistorico.setNumeroPrestacaoDebito(debitoACobrar.getNumeroPrestacaoDebito());
				debitoACobrarParaHistorico.setNumeroPrestacaoCobradas(debitoACobrar.getNumeroPrestacaoCobradas());
				debitoACobrarParaHistorico.setCodigoSetorComercial(debitoACobrar.getCodigoSetorComercial());
				debitoACobrarParaHistorico.setNumeroQuadra(debitoACobrar.getNumeroQuadra());
				debitoACobrarParaHistorico.setNumeroLote(debitoACobrar.getNumeroLote());
				debitoACobrarParaHistorico.setNumeroSubLote(debitoACobrar.getNumeroSubLote());
				debitoACobrarParaHistorico.setUltimaAlteracao(debitoACobrar.getUltimaAlteracao());
				debitoACobrarParaHistorico.setAnoMesReferenciaContabil(debitoACobrar.getAnoMesReferenciaContabil());
				debitoACobrarParaHistorico.setPercentualTaxaJurosFinanciamento(debitoACobrar.getPercentualTaxaJurosFinanciamento());
				debitoACobrarParaHistorico.setImovel(debitoACobrar.getImovel());
				debitoACobrarParaHistorico.setDocumentoTipo(debitoACobrar.getDocumentoTipo());
				debitoACobrarParaHistorico.setParcelamento(debitoACobrar.getParcelamento());
				debitoACobrarParaHistorico.setFinanciamentoTipo(debitoACobrar.getFinanciamentoTipo());
				debitoACobrarParaHistorico.setOrdemServico(debitoACobrar.getOrdemServico());
				debitoACobrarParaHistorico.setQuadra(debitoACobrar.getQuadra());
				debitoACobrarParaHistorico.setLocalidade(debitoACobrar.getLocalidade());
				debitoACobrarParaHistorico.setDebitoTipo(debitoACobrar.getDebitoTipo());
				debitoACobrarParaHistorico.setRegistroAtendimento(debitoACobrar.getRegistroAtendimento());
				debitoACobrarParaHistorico.setLancamentoItemContabil(debitoACobrar.getLancamentoItemContabil());
				debitoACobrarParaHistorico.setDebitoCreditoSituacaoAnterior(debitoACobrar.getDebitoCreditoSituacaoAnterior());
				debitoACobrarParaHistorico.setDebitoCreditoSituacaoAtual(debitoACobrar.getDebitoCreditoSituacaoAtual());
				debitoACobrarParaHistorico.setParcelamentoGrupo(debitoACobrar.getParcelamentoGrupo());
				debitoACobrarParaHistorico.setCobrancaForma(debitoACobrar.getCobrancaForma());
				debitoACobrarParaHistorico.setDebitoACobrarCategorias(debitoACobrar.getDebitoACobrarCategorias());
				debitoACobrarParaHistorico.setValorDebitoPorCategoria(debitoACobrar.getValorDebitoPorCategoria());
				debitoACobrarParaHistorico.setDebitoACobrarGeralOrigem(debitoACobrar.getDebitoACobrarGeralOrigem());
				debitoACobrarParaHistorico.setDebitoACobrarGeral(debitoACobrar.getDebitoACobrarGeral());

				debitoACobrarParaHistorico.setNumeroMesesEntreParcelas(debitoACobrar.getNumeroMesesEntreParcelas());
				debitoACobrarParaHistorico.setNumeroParcelasALancar(debitoACobrar.getNumeroParcelasALancar());
				debitoACobrarParaHistorico.setAnoMesReferenciaUltimaCobranca(debitoACobrar.getAnoMesReferenciaUltimaCobranca());

				if(debitoACobrarValorDivida.containsKey(debitoACobrarParaHistorico.getId())){
					debitoACobrarParaHistorico
									.setValorDebito((BigDecimal) debitoACobrarValorDivida.get(debitoACobrarParaHistorico.getId()));
				}

				colecaoDebitoACobrarParaHistorico.add(debitoACobrarParaHistorico);
			}
		}

		this.getControladorFaturamento().transferirDebitosACobrarParaHistorico(colecaoDebitoACobrarParaHistorico, Boolean.FALSE);

		// 6.1.4.6. Para cada débito a cobrar transferido, atualiza o indicador de que o débito a
		// cobrar está no histórico
		this.getControladorFaturamento().atualizarIndicadorDebitoACobrarNoHistorico(colecaoDebitoACobrarTemp);
	}

	public Collection<CreditoARealizar> classificarCreditoARealizarParaHistorico(Collection<CreditoARealizar> colecaoCreditoARealizar,
					String indicadorCreditoARealizar, SistemaParametro sistemaParametros) throws ControladorException{

		Collection<CreditoARealizar> colecaoCreditoARealizarParaAtualizacao = new ArrayList<CreditoARealizar>();
		// 6.1.5 Para cada crédito a realizar
		if(indicadorCreditoARealizar.equals("1")){
			if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
				Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();
				Integer situacaoAnterior = null;

				FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();

				while(creditoARealizarValores.hasNext()){
					CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();

					filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.ID, creditoARealizar.getId()));

					Collection creditoARealizarPesquisada = getControladorUtil().pesquisar(filtroCreditoARealizar,
									CreditoARealizar.class.getName());

					filtroCreditoARealizar.limparListaParametros();

					CreditoARealizar creditoARealizarParaAtualizacao = new CreditoARealizar();
					if(creditoARealizarPesquisada != null && !creditoARealizarPesquisada.isEmpty()){
						creditoARealizarParaAtualizacao = (CreditoARealizar) creditoARealizarPesquisada.iterator().next();
					}

					// 6.1.5.1 Situação anterior
					if(creditoARealizar.getAnoMesReferenciaContabil() != null
									&& creditoARealizar.getAnoMesReferenciaContabil().equals(sistemaParametros.getAnoMesFaturamento())){
						situacaoAnterior = creditoARealizar.getDebitoCreditoSituacaoAtual().getId();
					}else{
						situacaoAnterior = null;
					}

					// 6.1.5.2 Situação atual
					DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
					debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
					creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

					if(situacaoAnterior == null){
						creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAnterior(null);
					}else{
						DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
						debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
						creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
					}

					creditoARealizarParaAtualizacao.setUltimaAlteracao(new Date());

					// 6.1.5.3. Mês/ano de referência contábil
					creditoARealizarParaAtualizacao.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));

					colecaoCreditoARealizarParaAtualizacao.add(creditoARealizarParaAtualizacao);

					// Atualiza Crédito a Realizar na base de dados
					// getControladorUtil().atualizar(creditoARealizarParaAtualizacao);

				}
				filtroCreditoARealizar = null;
			}
		}
		return colecaoCreditoARealizarParaAtualizacao;
	}

	public void classificarDebitoACobrarParaHistorico(Collection<DebitoACobrar> colecaoDebitoACobrar, String indicadorDebitosACobrar,
					SistemaParametro sistemaParametros, Collection<DebitoACobrar> colecaoDebitoACobrarHelp,
					Collection<DebitoACobrar> colecaoDebitoACobrarTemp, Map debitoACobrarValorDivida) throws ControladorException{

		// 6.1.4 Para cada débito a cobrar
		if(indicadorDebitosACobrar.toString().equals("1")){
			if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
				Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();
				Integer situacaoAnterior = null;

				// Início para carregar a tabela debito a cobrar historico

				FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
				while(debitoACobrarValores.hasNext()){
					DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

					filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, debitoACobrar.getId()));
					filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.DEBITO_TIPO);

					Collection debitoACobrarPesquisada = getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

					filtroDebitoACobrar.limparListaParametros();

					DebitoACobrar debitoACobrarParaAtualizacao = new DebitoACobrar();
					if(debitoACobrarPesquisada != null && !debitoACobrarPesquisada.isEmpty()){
						debitoACobrarParaAtualizacao = (DebitoACobrar) debitoACobrarPesquisada.iterator().next();
					}

					// 6.1.4.1 Situação anterior
					if(debitoACobrar.getAnoMesCobrancaDebito().equals(sistemaParametros.getAnoMesFaturamento())){
						situacaoAnterior = debitoACobrar.getDebitoCreditoSituacaoAtual().getId();
					}else{
						situacaoAnterior = null;
					}

					// 6.1.4.2 Situação atual
					DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
					if(debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
						debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.CANCELADA);
					}else{
						debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
					}
					debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

					if(situacaoAnterior == null){
						debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAnterior(null);
					}else{
						DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
						debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
						debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
					}

					debitoACobrarParaAtualizacao.setUltimaAlteracao(new Date());

					// 6.1.4.4. Mês/ano de referência contábil
					debitoACobrarParaAtualizacao.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));

					debitoACobrarValorDivida.put(debitoACobrarParaAtualizacao.getId(), debitoACobrarParaAtualizacao.getValorDebito());

					short numeroPrestacaoTotal = 1;
					short numeroPrestacaoCobrada = 1;

					numeroPrestacaoTotal = debitoACobrarParaAtualizacao.getNumeroPrestacaoDebito();
					numeroPrestacaoCobrada = debitoACobrarParaAtualizacao.getNumeroPrestacaoCobradas();

					BigDecimal vlor = new BigDecimal((debitoACobrarParaAtualizacao.getValorDebito().doubleValue() / numeroPrestacaoTotal)
									* (numeroPrestacaoTotal - numeroPrestacaoCobrada));
					vlor = vlor.setScale(Parcelamento.CASAS_DECIMAIS, BigDecimal.ROUND_HALF_UP);

					debitoACobrarParaAtualizacao.setValorDebito(vlor);

					if(debitoACobrarParaAtualizacao.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_ACRESCIMOS_IMPONTUALIDADE)
									|| debitoACobrarParaAtualizacao.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO)
									|| debitoACobrarParaAtualizacao.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_CONTAS)
									|| debitoACobrarParaAtualizacao.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_GUIAS_PAGAMENTO)
									|| debitoACobrarParaAtualizacao.getDebitoTipo().getId().equals(DebitoTipo.CORRECAO_PARCELAMENTO)){

						colecaoDebitoACobrarHelp.add(debitoACobrarParaAtualizacao);
					}

					colecaoDebitoACobrarTemp.add(debitoACobrarParaAtualizacao);

				}
				filtroDebitoACobrar = null;
			}
		}
	}

	public Collection<GuiaPagamento> classificarGuiaPagamentoParaHistorico(
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, String indicadorGuiasPagamento)
					throws ControladorException{

		Collection<GuiaPagamento> colecaoGuiaPagamentoTransferidoHistorico = new ArrayList<GuiaPagamento>();

		// 6.1.3. Para cada guia de pagamento
		if(indicadorGuiasPagamento.equals("1")){
			if(colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()){
				Iterator guiPagamentoValores = colecaoGuiaPagamentoValores.iterator();

				while(guiPagamentoValores.hasNext()){
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiPagamentoValores.next();

					GuiaPagamento guiaPagamento = new GuiaPagamento();

					guiaPagamento.setId(guiaPagamentoValoresHelper.getIdGuiaPagamento());

					// Recupera as guias de pagamento prestação
					Set<GuiaPagamentoPrestacao> colecaoguiaPagamentoPrestacoes = guiaPagamentoValoresHelper.getGuiaPagamentoPrestacoes() == null ? null
									: guiaPagamentoValoresHelper.getGuiaPagamentoPrestacoes();

					// Recupera o indicador de cobrança administrativa
					Short indicadorCobrancaAdministrativa = guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa() == null ? null
									: guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa();

					if(!Util.isVazioOrNulo(colecaoguiaPagamentoPrestacoes) && !Util.isVazioOuBranco(indicadorCobrancaAdministrativa)){
						// Insere o indicador de cobrança administrativa para a guia prestação
						for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoguiaPagamentoPrestacoes){
							guiaPagamentoPrestacao.setIndicadorCobrancaAdministrativa(indicadorCobrancaAdministrativa);
						}

						// Atualiza as guias prestações
						getControladorBatch().atualizarColecaoObjetoParaBatch((Collection) colecaoguiaPagamentoPrestacoes);

						// Insere as guias de pagamento prestaçãoes atualizadas
						guiaPagamento.setGuiasPagamentoPrestacao(colecaoguiaPagamentoPrestacoes);
					}

					// 6.1.3.1 Situação atual
					DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
					debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
					guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

					// 6.1.3.3. O sistema transfere para o histórico de guias de
					// pagamento, as guias, que foram parceladas (DCST_ID com o valor correspondente
					// a parcelada)
					Collection<GuiaPagamento> colecaoGuiasPagamento = new ArrayList<GuiaPagamento>();
					colecaoGuiasPagamento.add(guiaPagamento);
					this.getControladorArrecadacao().transferirGuiaPagamentoParaHistorico(colecaoGuiasPagamento);

					colecaoGuiaPagamentoTransferidoHistorico.add(guiaPagamento);
				}
			}
		}

		return colecaoGuiaPagamentoTransferidoHistorico;
	}

	public Collection<Conta> classificarContasParaHistorico(Collection<ContaValoresHelper> colecaoContaValores, Usuario usuarioLogado,
					String indicadorContasRevisao) throws ControladorException{

		Collection<Conta> colecaoContaTransferidaHistorico = new ArrayList<Conta>();

		// 6.1.1 Para cada conta da lista de contas em débito cujo indicador de
		// que a conta já foi paga, não esteja marcada, atualizar
		if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
			Iterator contaValores = colecaoContaValores.iterator();

			Collection<Conta> colecaoContas = new ArrayList();

			while(contaValores.hasNext()){
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
				colecaoContas.add(contaValoresHelper.getConta());
			}

			contaValores = colecaoContaValores.iterator();
			FiltroConta filtroConta = new FiltroConta();
			filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
			while(contaValores.hasNext()){
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();

				filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaValoresHelper.getConta().getId()));

				Collection<Conta> contaPesquisada = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

				filtroConta.limparListaParametros();

				Conta conta = new Conta();
				if(contaPesquisada != null && !contaPesquisada.isEmpty()){
					conta = contaPesquisada.iterator().next();

					// Data de última alteração
					conta.setUltimaAlteracao(new Date());

					if(contaValoresHelper.getIndicadorContasDebito() != null){
						// Caso não seja marcarda como NB e tb n esteja marcada como
						// EP
						if(!contaValoresHelper.getIndicadorContasDebito().equals(Integer.valueOf(2))
										&& !contaValoresHelper.getIndicadorContasDebito().equals(Integer.valueOf(1))){
							// Atualiza Contas na Base de Dados
							this.atualizarContaEfetuarParcelamentoDebito(conta);

							colecaoContaTransferidaHistorico.add(conta);
						}else if(contaValoresHelper.getIndicadorContasDebito().equals(Integer.valueOf(2))){
							// 6.1.2. Colocar em revisão como motivo correspondente
							// a pagamento comprovado as contas que estejam
							// marcardas como NB
							ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
							// 98 é o código de Pagamento Comprovado
							contaMotivoRevisao.setId(ContaMotivoRevisao.REVISAO_POR_PAGAMENTO_COMPROVADO);

							getControladorFaturamento().colocarRevisaoConta(colecaoContas, conta.getId().toString(), contaMotivoRevisao,
											usuarioLogado, indicadorContasRevisao.equals("1"));
						}
					}else{
						// Atualiza Contas na Base de Dados
						this.atualizarContaEfetuarParcelamentoDebito(conta);

						colecaoContaTransferidaHistorico.add(conta);
					}

					// Se o parâmetro da Contra-Ação do parcelamento for no ato do
					// "Efetuar Pacelamento", verificar Contra-Ação
					String contraAcaoParcelamentoIndicador = ConstantesAplicacao.get("aplicacao.contra_acao.parcelamento");
					if(contraAcaoParcelamentoIndicador != null && Util.isInteger(contraAcaoParcelamentoIndicador)){

						int contraAcaoIndicador = Util.converterStringParaInteger(contraAcaoParcelamentoIndicador);
						if(contraAcaoIndicador == ContraAcao.CONTRA_ACAO_EFETUAR_PARCELAMENTO){

							/**
							 * Chama metodo para gerar a Contra-Ação
							 * Andre Nishimura
							 * 26 de Abril de 2010
							 */
							this.validaDocumentoCobrancaPagamentoParaContraAcao(conta.getId());
						}
					}

					/*
					 * Classificar Pagamentos - verifica se já existe
					 * pagamentos para o imóvel no mês de referência da
					 * conta.
					 */
					// Collection<Pagamento> pagamentos = (Collection<Pagamento>)
					// getControladorArrecadacao().selecionarPagamentosNaoClassificadosConta(conta.getImovel(),
					// Integer.valueOf(conta.getReferencia()));
					// if (pagamentos != null && !pagamentos.isEmpty()){
					// Iterator pagamentosIterator = pagamentos.iterator();
					//
					// while (pagamentosIterator.hasNext()) {
					// Pagamento pagamento = (Pagamento) pagamentosIterator.next();
					//
					// getControladorArrecadacao().classificarPagamentos(pagamento);
					// }
					//
					// }
				}
			}
			filtroConta = null;
		}

		return colecaoContaTransferidaHistorico;
	}

	/**
	 * Insere um Cronograma de Cobrança com as Ações de Cobranças e suas Atividades
	 * [UC0312] Inserir Cornograma de Cobrança
	 * 
	 * @author Vitor
	 * @param usuarioLogado
	 * @data 13/08/2008
	 *       Alterações realizadas pra v0.05
	 * @author Virgínia Melo
	 * @data 10/09/2008
	 *       Desfazer alterações para v0.06
	 * @atuthor Virgínia Melo
	 * @data 03/11/2008
	 * @author Virgínia Melo
	 * @date 10/08/2009
	 *       Atualização do código para a versão mais recente.
	 * @param colecaoCobrancaCronogramaHelper
	 *            , usuarioLogado.
	 */
	public void inserirCobrancaCronograma(Collection colecaoCobrancaCronogramaHelper, Usuario usuarioLogado) throws ControladorException{

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_CRONOGRAMA_COBRANCA,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		Iterator iteratorHelper = colecaoCobrancaCronogramaHelper.iterator();

		// -- Validar se todas as rotas do grupo informado possui um criterio definido para cada
		// ação
		Integer idGrupoCobranca = null;
		Collection<Integer> idsAcoesCobranca = new ArrayList<Integer>();

		for(CobrancaCronogramaHelper cobrancaCronograma : (Collection<CobrancaCronogramaHelper>) colecaoCobrancaCronogramaHelper){
			idGrupoCobranca = cobrancaCronograma.getCobrancaGrupoCronogramaMes().getCobrancaGrupo().getId();
			idsAcoesCobranca.add(cobrancaCronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getId());
		}

		// if (idsAcoesCobranca.size() > 0) {
		// PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new
		// PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
		// filtro.setIdGrupoCobranca(idGrupoCobranca);
		// filtro.setIdsAcoesCobranca(idsAcoesCobranca);
		//
		// Integer qtdeRotasSemCriterios = pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
		// if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) {
		// throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
		// }
		// }
		// -------------

		Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista = new HashMap();

		CobrancaCronogramaHelper cobrancaCronogramaHelper = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes = null;
		CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		Collection cobrancasAtividadesParaInsercao = null;
		// Collection colecaoCobrancaAcao = null;
		Collection colecaoAtividades = null;

		Integer idCobrancaGrupoCronogramaMesRetorno = null;
		Integer idCobrancaAcaoCronogramaRetorno = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesRetorno = null;
		CobrancaAcaoCronograma cobrancaAcaoCronogramaRetorno = null;
		// CobrancaAcaoCronograma cobrancaAcaoCronogramaAnterior = null;

		// FiltroCobrancaAcao filtroCobrancaAcao = null;
		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.INDICADOR_USO,
						ConstantesSistema.INDICADOR_USO_ATIVO));
		colecaoAtividades = getControladorUtil().pesquisar(filtroCobrancaAtividade, CobrancaAtividade.class.getName());

		// ----Usado para comparar a ultima data da acao anterior com a primeira da atual
		Calendar ultimaDataAcaoAnterior = Calendar.getInstance();
		int inserirCronograma = 0;
		int comparaGrupo = 0;

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaTeste = null;
		// CobrancaAcaoAtividadeCronograma
		// cobrancaAcaoAtividadeCronogramaAnterior = null;
		FiltroRota filtroRota = new FiltroRota();
		FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
		FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
		while(iteratorHelper.hasNext()){
			// inserirCronograma = 0;
			cobrancaCronogramaHelper = (CobrancaCronogramaHelper) iteratorHelper.next();

			cobrancaGrupoCronogramaMes = cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes();
			cobrancasAtividadesParaInsercao = cobrancaCronogramaHelper.getCobrancasAtividadesParaInsercao();
			cobrancaAcaoCronograma = cobrancaCronogramaHelper.getCobrancaAcaoCronograma();

			// verifica se existe rotas para o cronograma e a ação especifica

			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupoCronogramaMes.getCobrancaGrupo()
							.getId()));
			if(cobrancaAcaoCronograma.getCobrancaAcao().getId() != null
							&& cobrancaAcaoCronograma.getCobrancaAcao().getId().equals(CobrancaAcao.CORTE_ADMINISTRATIVO)
							&& sistemaParametro.getCodigoEmpresaFebraban() != null
							&& sistemaParametro.getCodigoEmpresaFebraban().equals(Empresa.EMPRESA_FEBRABAN_COMPESA)){
				filtroRota.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroRota.EMPRESA_COBRANCA_ID, 1));
			}
			Collection<Rota> colecaoRotas = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

			filtroRota.limparListaParametros();

			if(colecaoRotas == null || colecaoRotas.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.nao.existe.rotas.grupo");
			}

			if(comparaGrupo == 0){
				comparaGrupo = 1;
				/**
				 * [FS0002] Validar referência do cronograma
				 */

				filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, cobrancaGrupoCronogramaMes
								.getCobrancaGrupo().getId()));
				Collection cobrancaGrupos;

				cobrancaGrupos = getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

				filtroCobrancaGrupo.limparListaParametros();

				CobrancaGrupo cobrancaGrupo = null;

				if(!cobrancaGrupos.isEmpty()){
					cobrancaGrupo = (CobrancaGrupo) cobrancaGrupos.iterator().next();
					if(cobrancaGrupoCronogramaMes.getAnoMesReferencia() < cobrancaGrupo.getAnoMesReferencia()){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.cobranca.mes_ano_anterior_grupo", null,
										Util.formatarAnoMesParaMesAno(cobrancaGrupo.getAnoMesReferencia()));
					}
				}

				/**
				 * [FS0003] Verificar existência do cronograma para o grupo
				 */

				filtroCobrancaGrupoCronogramaMes.adicionarParametro(new ParametroSimples(
								FiltroCobrancaGrupoCronogramaMes.ID_COBRANCA_GRUPO, cobrancaGrupoCronogramaMes.getCobrancaGrupo().getId()));
				filtroCobrancaGrupoCronogramaMes.adicionarParametro(new ParametroSimples(
								FiltroCobrancaGrupoCronogramaMes.ANO_MES_REFERENCIA, cobrancaGrupoCronogramaMes.getAnoMesReferencia()));

				Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil().pesquisar(filtroCobrancaGrupoCronogramaMes,
								CobrancaGrupoCronogramaMes.class.getName());

				filtroCobrancaGrupoCronogramaMes.limparListaParametros();

				if(!colecaoCobrancaGrupoCronogramaMes.isEmpty()){
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.cobranca.existencia_cronograma_grupo", null, cobrancaGrupo.getDescricao(),
									Util.formatarAnoMesParaMesAno(cobrancaGrupoCronogramaMes.getAnoMesReferencia()));
				}
			}

			/**
			 * [FS0004] Validar Datas Previstas
			 */
			Iterator iteratorTestaDatas = cobrancasAtividadesParaInsercao.iterator();

			int mes = 0;
			int ano = 0;
			int mudarCronograma = 0;
			String anoMes = null;
			Calendar dataCobrancaTeste = Calendar.getInstance();
			// Calendar dataCobrancaAnterior = null;

			while(iteratorTestaDatas.hasNext()){
				// if (cobrancaAcaoAtividadeCronogramaAnterior == null) {
				cobrancaAcaoAtividadeCronogramaTeste = (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas.next();
				dataCobrancaTeste.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());
				/**
				 * [FS0006] Verifica Ação Predecessora
				 */
				mapAcaoAtividadeDataPrevista = validarAtividadeAcaoPredecessora(cobrancaAcaoCronograma.getCobrancaAcao(),
								cobrancaAcaoCronograma.getCobrancaAcao().getCobrancaAcaoPredecessora(),
								cobrancaAcaoAtividadeCronogramaTeste, mapAcaoAtividadeDataPrevista);

				if(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null){
					dataCobrancaTeste.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());

					ano = dataCobrancaTeste.get(Calendar.YEAR);
					mes = dataCobrancaTeste.get(Calendar.MONTH) + 1;

					if(mes < 10){
						anoMes = ano + "0" + mes;
					}else{
						anoMes = ano + "" + mes;
					}
					if(cobrancaGrupoCronogramaMes.getAnoMesReferencia() > Integer.parseInt(anoMes)){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.cobranca.data_prevista_mes_ano_menor", null,
										cobrancaAcaoAtividadeCronogramaTeste.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
										cobrancaAcaoCronograma.getCobrancaAcao().getDescricaoCobrancaAcao());
					}
				}

				if(mudarCronograma == 0){

					if(inserirCronograma == 0){
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao.registrarOperacao(cobrancaGrupoCronogramaMes);
						// ------------ REGISTRAR TRANSAÇÃO ---------------

						inserirCronograma = 1;
						cobrancaGrupoCronogramaMes.setUltimaAlteracao(new Date());
						idCobrancaGrupoCronogramaMesRetorno = (Integer) getControladorUtil().inserir(cobrancaGrupoCronogramaMes);
						cobrancaGrupoCronogramaMesRetorno = new CobrancaGrupoCronogramaMes();
						cobrancaGrupoCronogramaMesRetorno.setId(idCobrancaGrupoCronogramaMesRetorno);
					}

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao.registrarOperacao(cobrancaAcaoCronograma);
					// ------------ REGISTRAR TRANSAÇÃO ---------------

					if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
									&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

					}else{
						mudarCronograma = colecaoAtividades.size();

						cobrancaAcaoCronograma.setUltimaAlteracao(new Date());
						cobrancaAcaoCronograma.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMesRetorno);
						idCobrancaAcaoCronogramaRetorno = (Integer) getControladorUtil().inserir(cobrancaAcaoCronograma);
						cobrancaAcaoCronogramaRetorno = new CobrancaAcaoCronograma();
						cobrancaAcaoCronogramaRetorno.setId(idCobrancaAcaoCronogramaRetorno);
					}

				}
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
				// ------------ REGISTRAR TRANSAÇÃO ---------------
				if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
								&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

				}else{
					cobrancaAcaoAtividadeCronogramaTeste.setCobrancaAcaoCronograma(cobrancaAcaoCronogramaRetorno);
					cobrancaAcaoAtividadeCronogramaTeste.setUltimaAlteracao(new Date());
					cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeDocumentos(Integer.valueOf(0));
					cobrancaAcaoAtividadeCronogramaTeste.setValorDocumentos(BigDecimal.ZERO);
					cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeItensCobrados(Integer.valueOf(0));

					getControladorUtil().inserir(cobrancaAcaoAtividadeCronogramaTeste);
					if(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null){
						ultimaDataAcaoAnterior.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());
					}
					// cobrancaAcaoAtividadeCronogramaAnterior =
					// cobrancaAcaoAtividadeCronogramaTeste;
					// diminui um no contador de mudanca de Cronograma
					mudarCronograma -= 1;
				}
			}

			// cobrancaAcaoCronogramaAnterior = cobrancaAcaoCronograma;
		}
		filtroRota = null;
		filtroCobrancaGrupo = null;
		filtroCobrancaGrupoCronogramaMes = null;

	}

	/**
	 * Pesquisa a quantidade de Rotas que nao possui um Criterio definido para
	 * cada uma das Acoes de Cobrancas passadas no filtro
	 * 
	 * @author Victor Cisneiros
	 * @date 10/12/2008
	 */
	public Integer pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public void validarAcaoCobrancaCronogramaPredecessora(Collection colecaoCobrancaCronogramaHelper,
					CobrancaCronogramaHelper cobrancaCronogramaHelperAtual) throws ControladorException{

		if(cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma() != null
						&& cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma().getCobrancaAcao().getCobrancaAcaoPredecessora() != null){
			CobrancaCronogramaHelper cobrancaCronogramaHelperAnterior = null;
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaAnterior = null;
			// Calendar dataAtividadeAcaoPredecesora = Calendar.getInstance();
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaAtual = (CobrancaAcaoAtividadeCronograma) cobrancaCronogramaHelperAtual
							.getCobrancasAtividadesParaInsercao().iterator().next();

			Iterator iteratorAcao = colecaoCobrancaCronogramaHelper.iterator();
			while(iteratorAcao.hasNext()){
				cobrancaCronogramaHelperAnterior = (CobrancaCronogramaHelper) iteratorAcao.next();

				if(cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma().getCobrancaAcao().getCobrancaAcaoPredecessora().getId()
								.equals(cobrancaCronogramaHelperAnterior.getCobrancaAcaoCronograma().getCobrancaAcao().getId())){
					break;
				}
			}

			Iterator iteratorAtividadeCronograma = cobrancaCronogramaHelperAnterior.getCobrancasAtividadesParaInsercao().iterator();
			while(iteratorAtividadeCronograma.hasNext()){
				cobrancaAcaoAtividadeCronogramaAnterior = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma.next();
			}

			if((cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista() != null)
							&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null
							&& cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista().after(
											cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.data_prevista_predecessora_maior");
			}
			if((cobrancaAcaoAtividadeCronogramaAnterior != null)
							&& (cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista() == null)
							&& (cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma().getCobrancaAcao().getCobrancaAcaoPredecessora() != null)
							&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.data_predecessora_nula", null, cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
			}
			if((cobrancaAcaoAtividadeCronogramaAnterior != null) && (cobrancaAcaoAtividadeCronogramaAnterior.getComando() == null)
							&& (cobrancaAcaoAtividadeCronogramaAtual.getComando() != null)){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.comandar_predecessora", null, cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
			}
			if((cobrancaAcaoAtividadeCronogramaAtual.getCobrancaAtividade().getCobrancaAtividadePredecessora() != null)
							&& (cobrancaAcaoAtividadeCronogramaAnterior.getComando() == null)
							&& (cobrancaAcaoAtividadeCronogramaAtual.getComando() != null)){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.comandar_predecessora", null, cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
			}
			if(cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista() != null
							&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null
							&& cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista().after(
											cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.data_acao_anterior", null, cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
			}
		}

	}

	/**
	 * Filtrar Cronograma de Cobrança com as Ações de Cobranças e suas Atividades
	 * [UC03125] Inserir Cronograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @data 29/04/2006
	 *       Customização para v0.05
	 * @author Virgínia Melo
	 * @data 15/09/2008
	 *       Desfazer alterações para v0.06
	 * @author Virgínia Melo
	 * @data 03/11/2008
	 * @param idGrupoCobranca
	 *            , mesAno
	 * @return Colecao de CobrancaAcaoAtividadeCronograma
	 */
	public FiltroCobrancaAcaoAtividadeCronograma filtrarCobrancaCronograma(String idGrupoCobranca, String mesAno)
					throws ControladorException{

		FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

		if(idGrupoCobranca != null && !idGrupoCobranca.equals("-1") && !idGrupoCobranca.equals("")){
			filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, idGrupoCobranca));
		}

		Collection colecaoCobrancaGrupo = getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

		CobrancaGrupo cobrancaGrupo = (CobrancaGrupo) colecaoCobrancaGrupo.iterator().next();

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		// [FS0002] Verifica existência de cronograma
		if(idGrupoCobranca != null && !idGrupoCobranca.equals("-1") && !idGrupoCobranca.equals("")){
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO, idGrupoCobranca));

		}

		if(mesAno != null && !mesAno.trim().equals("")){
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO, Util
											.formatarMesAnoComBarraParaAnoMes(mesAno)));

		}else{
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO, cobrancaGrupo
											.getAnoMesReferencia()));
		}

		return filtroCobrancaAcaoAtividadeCronograma;

	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 29/04/2006
	 * @param codigoImovel
	 * @throws ControladorException
	 *             Controlador Exception
	 */

	public void atualizarDadosParcelamentoParaImovel(Integer codigoImovel) throws ControladorException{

		try{
			FiltroImovel filtroImovel = new FiltroImovel();

			Imovel imovel = null;

			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, codigoImovel));

			Collection<Imovel> colecaoImovel = getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

			imovel = ((Imovel) ((List) colecaoImovel).get(0));

			Short numeroParcelamento = imovel.getNumeroParcelamento();
			Short numeroReparcelamentoConsecutivo = imovel.getNumeroReparcelamentoConsecutivos();
			Short numeroReparcelamento = imovel.getNumeroReparcelamento();

			if(numeroParcelamento > 0){
				numeroParcelamento = (short) (imovel.getNumeroParcelamento() - 1);
			}
			if(numeroReparcelamentoConsecutivo > 0){
				numeroReparcelamento = (short) (imovel.getNumeroReparcelamento() - 1);
				numeroReparcelamentoConsecutivo = (short) (imovel.getNumeroReparcelamentoConsecutivos() - 1);
			}

			repositorioCobranca.atualizarDadosParcelamentoImovel(codigoImovel, numeroParcelamento, numeroReparcelamento,
							numeroReparcelamentoConsecutivo);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamentos por entrada não paga
	 * Este caso de uso permite desfazer os parcelamentos de débitos efetuados
	 * no mês cuja entrada não tenha sido paga.
	 * 
	 * @author Fernanda Paiva
	 * @created 02/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void desfazerParcelamentosPorEntradaNaoPaga(int idFuncionalidadeIniciada) throws ControladorException{

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		// cria uma coleção de parcelamentos de débitos efetuados no mês corrente
		Collection parcelamentosMes = null;

		// cria uma coleção de guias de pagamento correspondente a entrada do parcelamento
		Collection guiaPagamento = null;

		// cria uma coleção de contas correspondente a entrada do parcelamento
		Collection conta = null;

		// cria uma coleção de pagamentos para a guia de pagamento correspondente a entrada do
		// parcelamento
		Collection pagamento = null;

		// cria uma coleção de pagamentos para a guia de pagamento correspondente a entrada do
		// parcelamento
		Collection pagamentoConta = null;

		try{
			// pesquisa os parametros do sistem na base
			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

			// recupera o ano/mês corrente de faturamento

			int anoMesReferenciaArrecadacao = sistemaParametros.getAnoMesArrecadacao();

			int anoMesReferenciaArrecadacaoMenosUm = anoMesReferenciaArrecadacao;

			Date dataParcelamentoIntervaloInicio = Util.criarData(1, Util.obterMes(anoMesReferenciaArrecadacao),
							Util.obterAno(anoMesReferenciaArrecadacao));

			Date dataParcelamentoIntervaloFim = Util.criarData(31, Util.obterMes(anoMesReferenciaArrecadacao),
							Util.obterAno(anoMesReferenciaArrecadacao));

			// recupera todos os parcelamentos no mes atual e que esteja com a situacao normal
			parcelamentosMes = repositorioCobranca.pesquisarParcelamentosSituacaoNormalNoMes(ParcelamentoSituacao.NORMAL.toString(),
							dataParcelamentoIntervaloInicio, dataParcelamentoIntervaloFim);

			if(parcelamentosMes != null && !parcelamentosMes.isEmpty()){

				Iterator parcelamentosMesIterator = parcelamentosMes.iterator();

				while(parcelamentosMesIterator.hasNext()){

					// Obtém os dados do crédito realizado
					Object[] dadosParcelamento = (Object[]) parcelamentosMesIterator.next();
					Integer numeroParcelamentosMes = (Integer) dadosParcelamento[0];

					guiaPagamento = repositorioCobranca.pesquisarGuiaPagamentoDoParcelamento(numeroParcelamentosMes.toString());

					if(guiaPagamento != null && !guiaPagamento.isEmpty()){

						Iterator guiaPagamentoIterator = guiaPagamento.iterator();

						while(guiaPagamentoIterator.hasNext()){

							Object[] dadosGuiaPagamento = (Object[]) guiaPagamentoIterator.next();

							Integer numeroGuiaPagamento = (Integer) dadosGuiaPagamento[0];

							Calendar calendario = new GregorianCalendar();
							String anoMesArrecadacao = anoMesReferenciaArrecadacaoMenosUm + "";

							calendario.set(Calendar.YEAR, Integer.valueOf(anoMesArrecadacao.substring(0, 4)).intValue());
							calendario.set(Calendar.MONTH, Integer.valueOf(anoMesArrecadacao.substring(4, 6)).intValue() - 1);
							calendario.set(Calendar.DAY_OF_MONTH, calendario.getActualMaximum(Calendar.DAY_OF_MONTH));

							if(((Date) dadosGuiaPagamento[1]).compareTo(calendario.getTime()) <= 0){

								// retorno da pesquisa recupera todos os parcelamentos no mes atual
								// e que esteja com a situacao normal

								pagamento = repositorioCobranca.pesquisarPagamentoParaGuiaPagamentoDoParcelamento(numeroGuiaPagamento
												.toString());

								if(pagamento == null || pagamento.isEmpty()){

									this.desfazerParcelamentosDebito(ParcelamentoMotivoDesfazer.ENTRADA_NAO_PAGA.toString(),
													numeroParcelamentosMes, Usuario.USUARIO_BATCH);
								}
							}
						}
					}else{

						// ============ PARTE NOVA - CONTAS ============

						conta = repositorioCobranca.pesquisarContaDoParcelamento(numeroParcelamentosMes);

						if(conta != null && !conta.isEmpty()){

							Iterator contaIterator = conta.iterator();

							while(contaIterator.hasNext()){

								Integer numeroConta = (Integer) contaIterator.next();
								pagamentoConta = repositorioCobranca.pesquisarPagamentoParaContaDoParcelamento(numeroConta.toString());

								if(pagamentoConta == null || pagamentoConta.isEmpty()){

									this.desfazerParcelamentosDebito(ParcelamentoMotivoDesfazer.ENTRADA_NAO_PAGA.toString(),
													numeroParcelamentosMes, Usuario.USUARIO_BATCH);
									break;
								}
							}
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception ex){

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			ex.printStackTrace();
			sessionContext.setRollbackOnly();

			throw new EJBException(ex);
		}

	}

	/**
	 * [UC0316] Inserir Critério de Cobrança
	 * Este caso de uso inseri a cobrança critério e as linhas da cobrança critério
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 04/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Integer inserirCobrancaCriterio(CobrancaCriterio cobrancaCriterio, Usuario usuarioLogado) throws ControladorException{

		Integer idCobrancaCriterio = null;

		try{

			// ------------ REGISTRAR TRANSAÇÃO ----------------------------
			RegistradorOperacao registradorOperacaoCriterioCobranca = new RegistradorOperacao(Operacao.OPERACAO_CRITERIO_COBRANCA_INSERIR,
							new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacaoCriterioCobranca = new Operacao();
			operacaoCriterioCobranca.setId(Operacao.OPERACAO_CRITERIO_COBRANCA_INSERIR);

			OperacaoEfetuada operacaoEfetuadaCriterioCobranca = new OperacaoEfetuada();
			operacaoEfetuadaCriterioCobranca.setOperacao(operacaoCriterioCobranca);

			cobrancaCriterio.setOperacaoEfetuada(operacaoEfetuadaCriterioCobranca);
			cobrancaCriterio.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacaoCriterioCobranca.registrarOperacao(cobrancaCriterio);
			// ------------ REGISTRAR TRANSAÇÃO ----------------------------

			Collection colecaoCobrancaCriterioLinha = cobrancaCriterio.getCobrancaCriterioLinhas();
			Collection colecaoCobrancaCriterioSituacaoCobranca = cobrancaCriterio.getCriteriosSituacaoCobranca();
			Collection colecaoCobrancaCriterioSituacaoLigacaoAgua = cobrancaCriterio.getCriteriosSituacaoLigacaoAgua();
			Collection colecaoCobrancaCriterioSituacaoLigacaoEsgoto = cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto();

			cobrancaCriterio.setCobrancaCriterioLinhas(null);
			cobrancaCriterio.setCriteriosSituacaoCobranca(null);
			cobrancaCriterio.setCriteriosSituacaoLigacaoAgua(null);
			cobrancaCriterio.setCriteriosSituacaoLigacaoEsgoto(null);

			idCobrancaCriterio = (Integer) repositorioUtil.inserir(cobrancaCriterio);
			cobrancaCriterio.setId(idCobrancaCriterio);

			// inserindo as situacoes de cobranca
			if(colecaoCobrancaCriterioSituacaoCobranca != null){
				Iterator iterSitCob = colecaoCobrancaCriterioSituacaoCobranca.iterator();
				while(iterSitCob.hasNext()){
					CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iterSitCob.next();
					critSitCob.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitCob.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitCob);
				}
			}

			// inserindo as situacoes de ligacao de agua para o criterio
			if(colecaoCobrancaCriterioSituacaoLigacaoAgua != null){
				Iterator iterSitLigAgua = colecaoCobrancaCriterioSituacaoLigacaoAgua.iterator();
				while(iterSitLigAgua.hasNext()){
					CriterioSituacaoLigacaoAgua critSitLigAgua = (CriterioSituacaoLigacaoAgua) iterSitLigAgua.next();
					critSitLigAgua.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitLigAgua.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigAgua);

				}
			}

			// inserindo as Situacaoes de ligacao de esgoto para o criterio
			if(colecaoCobrancaCriterioSituacaoLigacaoEsgoto != null){
				Iterator iterSitLigEsgoto = colecaoCobrancaCriterioSituacaoLigacaoEsgoto.iterator();
				while(iterSitLigEsgoto.hasNext()){
					CriterioSituacaoLigacaoEsgoto critSitLigEsgoto = (CriterioSituacaoLigacaoEsgoto) iterSitLigEsgoto.next();
					critSitLigEsgoto.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitLigEsgoto.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigEsgoto);

				}
			}

			// insere cada cobrança criterio linha
			if(colecaoCobrancaCriterioLinha != null){
				Iterator cobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha.iterator();
				while(cobrancaCriterioLinhaIterator.hasNext()){

					CobrancaCriterioLinha cobrancaCriterioLinha = (CobrancaCriterioLinha) cobrancaCriterioLinhaIterator.next();

					cobrancaCriterioLinha.setCobrancaCriterio(cobrancaCriterio);

					// caso não tenha informado o valor minimo débito
					if(cobrancaCriterioLinha.getValorMinimoDebito() == null){
						cobrancaCriterioLinha.setValorMinimoDebito(BigDecimal.ZERO);
					}

					// caso não tenha informado o valor máximo débito
					if(cobrancaCriterioLinha.getValorMaximoDebito() == null){
						cobrancaCriterioLinha.setValorMaximoDebito(new BigDecimal("99999999999.99"));
					}

					// caso não tenha informado a quantidade minima de contas
					if(cobrancaCriterioLinha.getQuantidadeMinimaContas() == null){
						cobrancaCriterioLinha.setQuantidadeMinimaContas(Short.valueOf("0"));
					}

					// caso não tenha informado a quantidade máxima de contas
					if(cobrancaCriterioLinha.getQuantidadeMaximaContas() == null){
						cobrancaCriterioLinha.setQuantidadeMaximaContas(Integer.valueOf("9999"));
					}

					// caso não tenha informado o valor minimo do débito para cliente com débito
					// automático
					if(cobrancaCriterioLinha.getValorMinimoDebitoDebitoAutomatico() == null){
						cobrancaCriterioLinha.setValorMinimoDebitoDebitoAutomatico(BigDecimal.ZERO);
					}

					// caso não tenha informado a quantidade minima de contas para cliente com
					// débito automático
					if(cobrancaCriterioLinha.getQuantidadeMinimaContasDebitoAutomatico() == null){
						cobrancaCriterioLinha.setQuantidadeMinimaContasDebitoAutomatico(Short.valueOf("0"));
					}

					// caso não tenha informado valor mínimo da conta do mês
					if(cobrancaCriterioLinha.getValorMinimoContaMes() == null){
						cobrancaCriterioLinha.setValorMinimoContaMes(BigDecimal.ZERO);
					}

					// caso não informe ligacao agua situacao
					if(cobrancaCriterioLinha.getLigacaoAguaSituacao() != null
									&& cobrancaCriterioLinha.getLigacaoAguaSituacao().getId() == -1){
						cobrancaCriterioLinha.setLigacaoAguaSituacao(null);
					}

					// caso não informe ligacao esgoto situacao
					if(cobrancaCriterioLinha.getLigacaoEsgotoSituacao() != null
									&& cobrancaCriterioLinha.getLigacaoEsgotoSituacao().getId() == -1){
						cobrancaCriterioLinha.setLigacaoEsgotoSituacao(null);
					}

					repositorioUtil.inserir(cobrancaCriterioLinha);
				}

			}
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return idCobrancaCriterio;
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * Este caso de uso atualiza a cobrança critério e as linhas da cobrança
	 * critério
	 * [SB0001] Atualizar Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 11/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void atualizarCobrancaCriterio(CobrancaCriterio cobrancaCriterio, Collection colecaoCobrancaCriterioLinha,
					Collection colecaoCobrancaCriterioLinhaRemovidas, Collection colecaoCriterioSituacaoCobrancaNovos,
					Collection colecaoCriterioSituacaoLigacaoAguaNovos, Collection colecaoCriterioSituacaoLigacaoEsgotoNovos,
					Usuario usuarioLogado) throws ControladorException{

		try{

			CobrancaCriterio cobrancaCriterioNaBase = null;
			FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
			filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID, cobrancaCriterio.getId()));

			Collection<CobrancaCriterio> collectionCobrancaCriterio = repositorioUtil.pesquisar(filtroCobrancaCriterio,
							CobrancaCriterio.class.getName());

			// ------------ REGISTRAR TRANSAÇÃO ----------------------------
			RegistradorOperacao registradorOperacaoCriterioCobranca = new RegistradorOperacao(
							Operacao.OPERACAO_CRITERIO_COBRANCA_ATUALIZAR, new UsuarioAcaoUsuarioHelper(usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacaoCriterioCobranca = new Operacao();
			operacaoCriterioCobranca.setId(Operacao.OPERACAO_CRITERIO_COBRANCA_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuadaCriterioCobranca = new OperacaoEfetuada();
			operacaoEfetuadaCriterioCobranca.setOperacao(operacaoCriterioCobranca);

			cobrancaCriterio.setOperacaoEfetuada(operacaoEfetuadaCriterioCobranca);
			cobrancaCriterio.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacaoCriterioCobranca.registrarOperacao(cobrancaCriterio);
			// ------------ REGISTRAR TRANSAÇÃO ----------------------------

			// Caso a pesquisa tenha retornado o critério de cobrança
			if(collectionCobrancaCriterio != null && !collectionCobrancaCriterio.isEmpty()){

				// Recupera da coleção a rota que vai ser atualizada
				cobrancaCriterioNaBase = (CobrancaCriterio) Util.retonarObjetoDeColecao(collectionCobrancaCriterio);
			}
			// Verificar se o logradouro já foi atualizado por outro usuário
			// durante
			// esta atualização
			if(cobrancaCriterioNaBase == null || cobrancaCriterioNaBase.getUltimaAlteracao().after(cobrancaCriterio.getUltimaAlteracao())){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaCriterio.setUltimaAlteracao(new Date());

			repositorioUtil.atualizar(cobrancaCriterio);

			if(colecaoCobrancaCriterioLinhaRemovidas != null && !colecaoCobrancaCriterioLinhaRemovidas.isEmpty()){
				Iterator cobrancaCriterioLinhaRemovidasIterator = colecaoCobrancaCriterioLinhaRemovidas.iterator();
				while(cobrancaCriterioLinhaRemovidasIterator.hasNext()){
					// inseri cada cobrança criterio linha
					CobrancaCriterioLinha cobrancaCriterioLinhaRemovida = (CobrancaCriterioLinha) cobrancaCriterioLinhaRemovidasIterator
									.next();
					repositorioUtil.remover(cobrancaCriterioLinhaRemovida);
				}
			}

			Iterator cobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha.iterator();
			while(cobrancaCriterioLinhaIterator.hasNext()){
				// inseri cada cobrança criterio linha
				CobrancaCriterioLinha cobrancaCriterioLinha = (CobrancaCriterioLinha) cobrancaCriterioLinhaIterator.next();
				cobrancaCriterioLinha.setCobrancaCriterio(cobrancaCriterio);

				// ------------ REGISTRAR TRANSAÇÃO ----------------
				cobrancaCriterioLinha.setOperacaoEfetuada(operacaoEfetuadaCriterioCobranca);
				cobrancaCriterioLinha.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacaoCriterioCobranca.registrarOperacao(cobrancaCriterioLinha);
				// ------------ REGISTRAR TRANSAÇÃO ----------------

				// caso não tenha informado o valor minimo débito
				if(cobrancaCriterioLinha.getValorMinimoDebito() == null){
					cobrancaCriterioLinha.setValorMinimoDebito(BigDecimal.ZERO);
				}
				// caso não tenha informado o valor máximo débito
				if(cobrancaCriterioLinha.getValorMaximoDebito() == null){
					cobrancaCriterioLinha.setValorMaximoDebito(new BigDecimal("99999999999.99"));
				}
				// caso não tenha informado a quantidade minima de contas
				if(cobrancaCriterioLinha.getQuantidadeMinimaContas() == null){
					cobrancaCriterioLinha.setQuantidadeMinimaContas(Short.valueOf((short) 0));
				}
				// caso não tenha informado a quantidade máxima de contas
				if(cobrancaCriterioLinha.getQuantidadeMaximaContas() == null){
					cobrancaCriterioLinha.setQuantidadeMaximaContas(Integer.valueOf("9999"));
				}
				// caso não tenha informado o valor minimo do débito para
				// cliente
				// com débito automático
				if(cobrancaCriterioLinha.getValorMinimoDebitoDebitoAutomatico() == null){
					cobrancaCriterioLinha.setValorMinimoDebitoDebitoAutomatico(BigDecimal.ZERO);
				}
				// caso não tenha informado a quantidade minima de contas para
				// cliente com
				// débito automático
				if(cobrancaCriterioLinha.getQuantidadeMinimaContasDebitoAutomatico() == null){
					cobrancaCriterioLinha.setQuantidadeMinimaContasDebitoAutomatico(Short.valueOf((short) 0));
				}
				// caso não tenha informado valor mínimo da conta do mês
				if(cobrancaCriterioLinha.getValorMinimoContaMes() == null){
					cobrancaCriterioLinha.setValorMinimoContaMes(BigDecimal.ZERO);
				}

				// caso não informe ligacao agua situacao
				/*
				 * if (cobrancaCriterioLinha.getLigacaoAguaSituacao() != null &&
				 * cobrancaCriterioLinha.getLigacaoAguaSituacao().getId() == -1) {
				 * cobrancaCriterioLinha.setLigacaoAguaSituacao(null);
				 * }
				 */

				// caso não informe ligacao esgoto situacao
				/*
				 * if (cobrancaCriterioLinha.getLigacaoEsgotoSituacao() != null &&
				 * cobrancaCriterioLinha.getLigacaoEsgotoSituacao().getId() == -1) {
				 * cobrancaCriterioLinha.setLigacaoEsgotoSituacao(null);
				 * }
				 */

				cobrancaCriterioLinha.setUltimaAlteracao(new Date());
				repositorioUtil.inserirOuAtualizar(cobrancaCriterioLinha);
			}
			// removendo criterios de situacao de cobranca antigos
			if(cobrancaCriterio.getCriteriosSituacaoCobranca() != null && !cobrancaCriterio.getCriteriosSituacaoCobranca().isEmpty()){
				for(Iterator iter = cobrancaCriterio.getCriteriosSituacaoCobranca().iterator(); iter.hasNext();){
					CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iter.next();
					repositorioUtil.remover(critSitCob);
				}
			}
			// removendo criterios de situacao de ligacao de agua antigos
			if(cobrancaCriterio.getCriteriosSituacaoLigacaoAgua() != null && !cobrancaCriterio.getCriteriosSituacaoLigacaoAgua().isEmpty()){
				for(Iterator iter = cobrancaCriterio.getCriteriosSituacaoLigacaoAgua().iterator(); iter.hasNext();){
					CriterioSituacaoLigacaoAgua critSitLigacaoAgua = (CriterioSituacaoLigacaoAgua) iter.next();
					repositorioUtil.remover(critSitLigacaoAgua);
				}
			}
			// removendo criterios de situacao de ligacao de esgoto antigos
			if(cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto() != null
							&& !cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto().isEmpty()){
				for(Iterator iter = cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto().iterator(); iter.hasNext();){
					CriterioSituacaoLigacaoEsgoto critSitLigacaoEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
					repositorioUtil.remover(critSitLigacaoEsgoto);
				}
			}

			// Inserindo os novos criterios de situacao de cobranca
			if(colecaoCriterioSituacaoCobrancaNovos != null && !colecaoCriterioSituacaoCobrancaNovos.isEmpty()){
				for(Iterator iter = colecaoCriterioSituacaoCobrancaNovos.iterator(); iter.hasNext();){
					CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iter.next();
					critSitCob.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitCob);
				}
			}

			// Inserindo os novos criterios de situacao de ligacao de agua
			if(colecaoCriterioSituacaoLigacaoAguaNovos != null && !colecaoCriterioSituacaoLigacaoAguaNovos.isEmpty()){
				for(Iterator iter = colecaoCriterioSituacaoLigacaoAguaNovos.iterator(); iter.hasNext();){
					CriterioSituacaoLigacaoAgua critSitLigacaoAgua = (CriterioSituacaoLigacaoAgua) iter.next();
					critSitLigacaoAgua.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigacaoAgua);
				}
			}

			// Inserindo os novos criterios de situacao de ligacao de esgoto
			if(colecaoCriterioSituacaoLigacaoEsgotoNovos != null && !colecaoCriterioSituacaoLigacaoEsgotoNovos.isEmpty()){
				for(Iterator iter = colecaoCriterioSituacaoLigacaoEsgotoNovos.iterator(); iter.hasNext();){
					CriterioSituacaoLigacaoEsgoto critSitLigacaoEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
					critSitLigacaoEsgoto.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigacaoEsgoto);
				}
			}

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * Este caso de uso remove a cobrança critério e as linhas da cobrança
	 * critério
	 * [SB0002] Excluir Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 11/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerCobrancaCriterio(String[] idsCobrancaCriterio, Usuario usuarioLogado) throws ControladorException{

		try{
			// remove primeiro as linhas do critério cobrança

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_CRITERIO_COBRANCA_REMOVER);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			repositorioCobranca.removerCobrancaCriterioLinha(idsCobrancaCriterio);

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
			colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// remove os critérios cobrança
			getControladorUtil().remover(idsCobrancaCriterio, CobrancaCriterio.class.getName(), operacaoEfetuada, colecaoUsuarios);

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0313] Manter Cornograma de Cobrança
	 * Testa se a atividade cronograma é para ser inserido ou atualizado
	 */
	public CobrancaCronogramaHelper testeInserirAtualizarAtividadeCronograma(CobrancaCronogramaHelper cobrancaCronogramaHelper){

		try{
			Iterator iteratorAtividadeCronograma = cobrancaCronogramaHelper.getCobrancasAtividadesParaInsercao().iterator();

			FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, cobrancaCronogramaHelper
											.getCobrancaAcaoCronograma().getId()));
			// filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");

			Collection colecaoAtividadeCrongramaBase = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
							CobrancaAcaoAtividadeCronograma.class.getName());
			Iterator iteratorBase = colecaoAtividadeCrongramaBase.iterator();

			while(iteratorAtividadeCronograma.hasNext()){

				CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma
								.next();
				iteratorBase = colecaoAtividadeCrongramaBase.iterator();

				while(iteratorBase.hasNext()){
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaBase = (CobrancaAcaoAtividadeCronograma) iteratorBase
									.next();

					if(cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId()
									.equals(cobrancaAcaoAtividadeCronogramaBase.getCobrancaAtividade().getId())){
						cobrancaAcaoAtividadeCronograma.setId(cobrancaAcaoAtividadeCronogramaBase.getId());
					}
				}
			}

		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return cobrancaCronogramaHelper;

	}

	/**
	 * [UC0313] Manter Cornograma de Cobrança
	 * Testa se o Acao cronograma é para ser inserido ou atualizado
	 */
	public CobrancaCronogramaHelper testeInserirAtualizarCronograma(CobrancaCronogramaHelper cobrancaCronogramaHelper){

		try{
			if(cobrancaCronogramaHelper.getCobrancaAcaoCronograma() != null
							&& cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getId() != null){
				FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
				filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES, cobrancaCronogramaHelper
												.getCobrancaGrupoCronogramaMes().getId()));

				filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID,
								cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getId()));

				Collection colecaoCobrancaAcaoBase = getControladorUtil().pesquisar(filtroCobrancaAcaoCronograma,
								CobrancaAcaoCronograma.class.getName());

				if(!colecaoCobrancaAcaoBase.isEmpty()){
					CobrancaAcaoCronograma cobrancaAcaoCronograma = (CobrancaAcaoCronograma) colecaoCobrancaAcaoBase.iterator().next();
					cobrancaCronogramaHelper.getCobrancaAcaoCronograma().setId(cobrancaAcaoCronograma.getId());
					// cobrancaCronogramaHelper =
					// this.testeInserirAtualizarAtividadeCronograma(cobrancaCronogramaHelper);
				}
			}
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return cobrancaCronogramaHelper;
	}

	/**
	 * Manter - Atualizar um Cronograma de Cobrança com as Ações de Cobranças e suas Atividades
	 * [UC0313] Manter Cronograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @data 05/05/2006
	 * @author Virgínia Melo
	 * @data 17/09/2008
	 *       Customização v0.05
	 * @author Virgínia Melo
	 * @date 12/08/2009
	 *       Atualização do código para a versão mais recente.
	 * @param colecaoCobrancaCronogramaHelper
	 * @param colecaoCronogramaHelperErroAtualizacao
	 * @param usuarioLogado
	 */
	public void atualizarCobrancaCronograma(Collection colecaoCobrancaCronogramaHelper, Collection colecaoCronogramaHelperErroAtualizacao,
					Usuario usuarioLogado) throws ControladorException{

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_ATUALIZAR_CRONOGRAMA_COBRANCA,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		Iterator iteratorHelper = colecaoCobrancaCronogramaHelper.iterator();

		// -- Validar se todas as rotas do grupo informado possui um criterio definido para cada
		// ação
		Integer idGrupoCobranca = null;
		Collection<Integer> idsAcoesCobranca = new ArrayList<Integer>();

		for(CobrancaCronogramaHelper cobrancaCronograma : (Collection<CobrancaCronogramaHelper>) colecaoCobrancaCronogramaHelper){
			idGrupoCobranca = cobrancaCronograma.getCobrancaGrupoCronogramaMes().getCobrancaGrupo().getId();
			idsAcoesCobranca.add(cobrancaCronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getId());
		}

		// if (idsAcoesCobranca.size() > 0) {
		// PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new
		// PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
		// filtro.setIdGrupoCobranca(idGrupoCobranca);
		// filtro.setIdsAcoesCobranca(idsAcoesCobranca);
		//
		// Integer qtdeRotasSemCriterios = pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
		// if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) {
		// throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
		// }
		// }
		// -------------

		CobrancaCronogramaHelper cobrancaCronogramaHelper = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes = null;
		CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		Collection cobrancasAtividadesParaInsercao = null;
		// Collection colecaoCobrancaAcao = null;
		Collection colecaoAtividades = null;

		Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista = new HashMap();

		Integer idCobrancaGrupoCronogramaMesRetorno = null;
		Integer idCobrancaAcaoCronogramaRetorno = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesRetorno = null;
		CobrancaAcaoCronograma cobrancaAcaoCronogramaRetorno = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.INDICADOR_USO,
						ConstantesSistema.INDICADOR_USO_ATIVO));
		colecaoAtividades = getControladorUtil().pesquisar(filtroCobrancaAtividade, CobrancaAtividade.class.getName());

		// ----Usado para comparar a ultima data da acao anterior com a primeira
		// da atual
		Calendar ultimaDataAcaoAnterior = Calendar.getInstance();
		int inserirCronograma = 0;
		int comparaGrupo = 0;
		int mudarAcao = 0;

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaTeste = null;

		FiltroRota filtroRota = new FiltroRota();

		while(iteratorHelper.hasNext()){
			// inserirCronograma = 0;
			mudarAcao = 0;
			cobrancaCronogramaHelper = (CobrancaCronogramaHelper) iteratorHelper.next();

			cobrancaGrupoCronogramaMes = cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes();

			cobrancaCronogramaHelper = this.testeInserirAtualizarCronograma(cobrancaCronogramaHelper);

			cobrancasAtividadesParaInsercao = cobrancaCronogramaHelper.getCobrancasAtividadesParaInsercao();
			cobrancaAcaoCronograma = cobrancaCronogramaHelper.getCobrancaAcaoCronograma();

			// verifica se existe rotas para o cronograma e a ação especifica
			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupoCronogramaMes.getCobrancaGrupo()
							.getId()));
			if(cobrancaAcaoCronograma.getCobrancaAcao().getId() != null
							&& cobrancaAcaoCronograma.getCobrancaAcao().getId().equals(CobrancaAcao.CORTE_ADMINISTRATIVO)
							&& sistemaParametro.getCodigoEmpresaFebraban() != null
							&& sistemaParametro.getCodigoEmpresaFebraban().equals(Empresa.EMPRESA_FEBRABAN_COMPESA)){
				filtroRota.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroRota.EMPRESA_COBRANCA_ID, 1));
			}
			Collection<Rota> colecaoRotas = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

			filtroRota.limparListaParametros();

			if(colecaoRotas == null || colecaoRotas.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.cobranca.nao.existe.rotas.grupo");
			}

			if(comparaGrupo == 0){
				comparaGrupo = 1;
				/**
				 * [FS0002] Validar referência do cronograma
				 */
				FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
				filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, cobrancaGrupoCronogramaMes
								.getCobrancaGrupo().getId()));
				// Collection cobrancaGrupos;

				// cobrancaGrupos = getControladorUtil().pesquisar(
				// filtroCobrancaGrupo, CobrancaGrupo.class.getName());

				// CobrancaGrupo cobrancaGrupo = null;

				/*
				 * MODIFICAR PARA TESTAR SE O REGISTRO JÁ FOI ALTERADO
				 * [FS0003] -----------------------------
				 */
				FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
				filtroCobrancaGrupoCronogramaMes.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupoCronogramaMes.ID,
								cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes().getId()));

				Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil().pesquisar(filtroCobrancaGrupoCronogramaMes,
								CobrancaGrupoCronogramaMes.class.getName());

				if(!colecaoCobrancaGrupoCronogramaMes.isEmpty()){
					CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesBase = (CobrancaGrupoCronogramaMes) colecaoCobrancaGrupoCronogramaMes
									.iterator().next();

					if(cobrancaGrupoCronogramaMesBase.getUltimaAlteracao().after(
									cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes().getUltimaAlteracao())){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.atualizacao.timestamp");
					}
				}
			}

			/**
			 * [FS0004] Validar Datas Previstas
			 */
			Iterator iteratorTestaDatas = cobrancasAtividadesParaInsercao.iterator();

			int mes = 0;
			int ano = 0;
			int mudarCronograma = 0;
			// boolean remover = true;
			String anoMes = null;
			Calendar dataCobrancaTeste = Calendar.getInstance();
			// Calendar dataCobrancaAnterior = null;

			while(iteratorTestaDatas.hasNext()){
				// if (cobrancaAcaoAtividadeCronogramaAnterior == null) {
				cobrancaAcaoAtividadeCronogramaTeste = (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas.next();

				if(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null
								&& !cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista().toString().equals("")){
					dataCobrancaTeste.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());
				}

				mapAcaoAtividadeDataPrevista = validarAtividadeAcaoPredecessora(cobrancaAcaoCronograma.getCobrancaAcao(),
								cobrancaAcaoCronograma.getCobrancaAcao().getCobrancaAcaoPredecessora(),
								cobrancaAcaoAtividadeCronogramaTeste, mapAcaoAtividadeDataPrevista);
				/**
				 * [FS0006] Verifica Ação Predecessora
				 */
				// if (primeiraVez == 0) {
				// primeiraVez = 1;
				// } else {
				// filtroCobrancaAcao = new FiltroCobrancaAcao();
				// filtroCobrancaAcao
				// .adicionarParametro(new ParametroSimples(
				// FiltroCobrancaAcao.ID,
				// cobrancaAcaoCronograma
				// .getCobrancaAcao().getId()));
				// filtroCobrancaAcao
				// .adicionarParametro(new ParametroNaoNulo(
				// FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID));
				// colecaoCobrancaAcao = getControladorUtil().pesquisar(
				// filtroCobrancaAcao,
				// CobrancaAcao.class.getName());
				/*
				 * this.validarAcaoCobrancaCronogramaPredecessora(
				 * colecaoCobrancaCronogramaHelper, cobrancaCronogramaHelper);
				 */

				if(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null){
					dataCobrancaTeste.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());

					ano = dataCobrancaTeste.get(Calendar.YEAR);
					mes = dataCobrancaTeste.get(Calendar.MONTH) + 1;

					if(mes < 10){
						anoMes = ano + "0" + mes;
					}else{
						anoMes = ano + "" + mes;
					}
					if(cobrancaGrupoCronogramaMes.getAnoMesReferencia() > Integer.parseInt(anoMes)){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.cobranca.data_prevista_mes_ano_menor", null,
										cobrancaAcaoAtividadeCronogramaTeste.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
										cobrancaAcaoCronograma.getCobrancaAcao().getDescricaoCobrancaAcao());
					}
				}
				// } else {
				// cobrancaAcaoAtividadeCronogramaTeste =
				// (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas
				// .next();
				// anoMes = null;
				// if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() !=
				// null) {
				// dataCobrancaTeste = Calendar.getInstance();
				// dataCobrancaTeste
				// .setTime(cobrancaAcaoAtividadeCronogramaTeste
				// .getDataPrevista());
				//
				// ano = dataCobrancaTeste.get(Calendar.YEAR);
				// mes = dataCobrancaTeste.get(Calendar.MONTH) + 1;
				//
				// if (mes < 10) {
				// anoMes = ano + "0" + mes;
				// } else {
				// anoMes = ano + "" + mes;
				// }
				// } else {
				// dataCobrancaTeste = null;
				// }
				//
				// if (anoMes != null
				// && cobrancaGrupoCronogramaMes.getAnoMesReferencia() > Integer
				// .parseInt(anoMes)) {
				// sessionContext.setRollbackOnly();
				// throw new ControladorException(
				// "atencao.cobranca.data_prevista_mes_ano_menor");
				// }
				//
				// /*
				// * if ((cobrancaAcaoAtividadeCronogramaAnterior
				// * .getDataPrevista() != null) &&
				// * cobrancaAcaoAtividadeCronogramaTeste .getDataPrevista() !=
				// * null && cobrancaAcaoAtividadeCronogramaAnterior
				// * .getDataPrevista().after(
				// * cobrancaAcaoAtividadeCronogramaTeste .getDataPrevista())) {
				// * sessionContext.setRollbackOnly(); throw new
				// * ControladorException(
				// * "atencao.cobranca.data_prevista_predecessora_maior"); }
				// */
				//
				// Collections.sort((List) colecaoCobrancaCronogramaHelper,
				// new Comparator() {
				// public int compare(Object a, Object b) {
				// String posicao1 = ""
				// + ((CobrancaCronogramaHelper) a)
				// .getCobrancaAcaoCronograma()
				// .getCobrancaAcao()
				// .getOrdemRealizacao();
				// String posicao2 = ""
				// + ((CobrancaCronogramaHelper) b)
				// .getCobrancaAcaoCronograma()
				// .getCobrancaAcao()
				// .getOrdemRealizacao();
				//
				// return posicao1.compareTo(posicao2);
				// }
				// });
				//
				// this.validarAcaoCobrancaCronogramaPredecessora(
				// colecaoCobrancaCronogramaHelper,
				// cobrancaCronogramaHelper);
				// }
				/**
				 * Testa para saber se o objeto vai ser inserido ou atualizado.
				 */
				if(cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes() == null
								&& cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes().getId() == null){

					if(mudarCronograma == 0){

						if(inserirCronograma == 0){
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao.registrarOperacao(cobrancaGrupoCronogramaMes);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							inserirCronograma = 1;
							cobrancaGrupoCronogramaMes.setUltimaAlteracao(new Date());
							idCobrancaGrupoCronogramaMesRetorno = (Integer) getControladorUtil().inserir(cobrancaGrupoCronogramaMes);
							cobrancaGrupoCronogramaMesRetorno = new CobrancaGrupoCronogramaMes();
							cobrancaGrupoCronogramaMesRetorno.setId(idCobrancaGrupoCronogramaMesRetorno);
						}
						if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
										&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

						}else{
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao.registrarOperacao(cobrancaAcaoCronograma);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							mudarCronograma = colecaoAtividades.size();

							cobrancaAcaoCronograma.setUltimaAlteracao(new Date());
							cobrancaAcaoCronograma.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMesRetorno);
							idCobrancaAcaoCronogramaRetorno = (Integer) getControladorUtil().inserir(cobrancaAcaoCronograma);
							cobrancaAcaoCronogramaRetorno = new CobrancaAcaoCronograma();
							cobrancaAcaoCronogramaRetorno.setId(idCobrancaAcaoCronogramaRetorno);
						}
					}

					if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
									&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

					}else{
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						cobrancaAcaoAtividadeCronogramaTeste.setCobrancaAcaoCronograma(cobrancaAcaoCronogramaRetorno);
						cobrancaAcaoAtividadeCronogramaTeste.setUltimaAlteracao(new Date());

						cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeDocumentos(Integer.valueOf(0));
						cobrancaAcaoAtividadeCronogramaTeste.setValorDocumentos(BigDecimal.ZERO);
						cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeItensCobrados(Integer.valueOf(0));

						getControladorUtil().inserir(cobrancaAcaoAtividadeCronogramaTeste);
						// diminui um no contador de mudanca de Cronograma
						mudarCronograma -= 1;
					}
				}else{
					if(mudarAcao == 0){
						mudarAcao = 1;

						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao.registrarOperacao(cobrancaGrupoCronogramaMes);
						// ------------ REGISTRAR TRANSAÇÃO ----------------

						cobrancaGrupoCronogramaMes.setUltimaAlteracao(new Date());
						cobrancaAcaoAtividadeCronogramaTeste.setUltimaAlteracao(new Date());
						cobrancaAcaoCronograma.setUltimaAlteracao(new Date());

						getControladorUtil().atualizar(cobrancaGrupoCronogramaMes);
						cobrancaAcaoCronograma.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMes);
						// cobrancaAcaoCronograma.setId(null);
						if(cobrancaAcaoCronograma.getCobrancaGrupoCronogramaMes() == null
										|| cobrancaAcaoCronograma.getCobrancaGrupoCronogramaMes().getId() == null){
							cobrancaAcaoCronograma.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMes);
						}

						if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
										&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

						}else{
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao.registrarOperacao(cobrancaAcaoCronograma);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							if(cobrancaAcaoCronograma.getId() == null){
								Integer idCobrancaAcaoCronograma = (Integer) getControladorUtil().inserir(cobrancaAcaoCronograma);
								cobrancaAcaoCronograma.setId(idCobrancaAcaoCronograma);
							}else{
								getControladorUtil().atualizar(cobrancaAcaoCronograma);
							}
						}
					}

					if(cobrancaAcaoCronograma.getCobrancaAcao().getIndicadorObrigatoriedade().intValue() == 2
									&& cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() == null){

					}else{
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						cobrancaAcaoAtividadeCronogramaTeste.setCobrancaAcaoCronograma(cobrancaAcaoCronograma);
						cobrancaAcaoAtividadeCronogramaTeste.setUltimaAlteracao(new Date());

						if(cobrancaAcaoAtividadeCronogramaTeste.getId() == null){
							cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeDocumentos(Integer.valueOf(0));
							cobrancaAcaoAtividadeCronogramaTeste.setValorDocumentos(BigDecimal.ZERO);
							cobrancaAcaoAtividadeCronogramaTeste.setQuantidadeItensCobrados(Integer.valueOf(0));

							getControladorUtil().inserir(cobrancaAcaoAtividadeCronogramaTeste);
						}else{
							getControladorUtil().atualizar(cobrancaAcaoAtividadeCronogramaTeste);
						}
					}
				}

				if(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null){
					ultimaDataAcaoAnterior.setTime(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista());
				}
			}
		}
		filtroRota = null;
	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerCobrancaCronograma(String[] idsCobrancaCronograma, Usuario usuarioLogado) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_COBRANCA_CRONOGRAMA_REMOVER,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_COBRANCA_CRONOGRAMA_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
		for(int i = 0; i < idsCobrancaCronograma.length; i++){
			String idCobrancaCronograma = idsCobrancaCronograma[i];

			filtroCobrancaGrupoCronogramaMes.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupoCronogramaMes.ID,
							idCobrancaCronograma));

			Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil().pesquisar(filtroCobrancaGrupoCronogramaMes,
							CobrancaGrupoCronogramaMes.class.getName());

			filtroCobrancaGrupoCronogramaMes.limparListaParametros();

			if(colecaoCobrancaGrupoCronogramaMes != null && !colecaoCobrancaGrupoCronogramaMes.isEmpty()){
				CobrancaGrupoCronogramaMes cobrancaCronograma = (CobrancaGrupoCronogramaMes) Util
								.retonarObjetoDeColecao(colecaoCobrancaGrupoCronogramaMes);

				// Remove os dados das tabelas dependentes
				removerCobrancaAcaoAtividadeCronograma(idCobrancaCronograma);
				removerCobrancaAcaoCronograma(idCobrancaCronograma);

				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				cobrancaCronograma.setOperacaoEfetuada(operacaoEfetuada);
				cobrancaCronograma.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(cobrancaCronograma);
				// ------------ REGISTRAR TRANSAÇÃO----------------------------

				getControladorUtil().remover(cobrancaCronograma);

			}

		}
		filtroCobrancaGrupoCronogramaMes = null;
	}

	private void removerCobrancaAcaoCronograma(String idCobrancaCronograma) throws ControladorException{

		FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
		filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
						idCobrancaCronograma));

		Collection colecaoCobrancaAcaoCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoCronograma,
						CobrancaAcaoCronograma.class.getName());

		getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoCronograma);
	}

	private void removerCobrancaAcaoAtividadeCronograma(String idCobrancaCronograma) throws ControladorException{

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_ID, idCobrancaCronograma));
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));

		Collection colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		if(colecaoCobrancaAcaoAtividadeCronograma != null && !colecaoCobrancaAcaoAtividadeCronograma.isEmpty()){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.faturamento.exclusao_nao_permitida");
		}

		filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_ID, idCobrancaCronograma));

		colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoAtividadeCronograma);
	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */

	public void removerCobrancaCronograma(Collection<CobrancaCronogramaHelper> colecaocobrancaCronogramaHelperRemover)
					throws ControladorException{

		int i = 1;
		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
		for(CobrancaCronogramaHelper cobrancaCronogramaHelper : colecaocobrancaCronogramaHelperRemover){

			if(colecaocobrancaCronogramaHelperRemover.size() == 1){
				filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
								cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getCobrancaAcao().getId()));

				filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES, cobrancaCronogramaHelper
												.getCobrancaGrupoCronogramaMes().getId()));

			}else{

				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if(i == 1){
					filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
									cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getCobrancaAcao().getId(),
									FiltroParametro.CONECTOR_OR, colecaocobrancaCronogramaHelperRemover.size()));
				}else{
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if(colecaocobrancaCronogramaHelperRemover.size() == i){
						filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
										cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getCobrancaAcao().getId()));
						filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES, cobrancaCronogramaHelper
														.getCobrancaGrupoCronogramaMes().getId()));
					}else{
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
										cobrancaCronogramaHelper.getCobrancaAcaoCronograma().getCobrancaAcao().getId(),
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
			i++;
		}

		Collection<CobrancaAcaoCronograma> colecaoCobrancaAcaoCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoCronograma,
						CobrancaAcaoCronograma.class.getName());

		if(colecaoCobrancaAcaoCronograma == null || colecaoCobrancaAcaoCronograma.isEmpty()){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.registro_remocao_nao_existente");
		}

		Collection colecaoCobrancaAcaoCronogramaRemover = new ArrayList();

		i = 1;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		for(CobrancaAcaoCronograma cobrancaAcaoCronograma : colecaoCobrancaAcaoCronograma){
			if(colecaocobrancaCronogramaHelperRemover.size() == 1){
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, cobrancaAcaoCronograma.getId()));

			}else{

				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if(i == 1){
					filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, cobrancaAcaoCronograma.getId(),
									FiltroParametro.CONECTOR_OR, colecaocobrancaCronogramaHelperRemover.size()));
				}else{
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if(colecaocobrancaCronogramaHelperRemover.size() == i){
						filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, cobrancaAcaoCronograma.getId()));
					}else{
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, cobrancaAcaoCronograma.getId(),
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
			i++;
			colecaoCobrancaAcaoCronogramaRemover.add(cobrancaAcaoCronograma);
		}

		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		Collection colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronogramaTeste = filtroCobrancaAcaoAtividadeCronograma;

		filtroCobrancaAcaoAtividadeCronogramaTeste
						.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));

		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		Collection colecaoCobrancaAcaoAtividadeCronogramaTeste = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronogramaTeste,
						CobrancaAcaoAtividadeCronograma.class.getName());

		if(!colecaoCobrancaAcaoAtividadeCronogramaTeste.isEmpty()){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.dependencias.acao_realizada");
		}

		try{

			// remove as coleções pesquisadas
			getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoAtividadeCronograma);

			getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoCronogramaRemover);
		}catch(ControladorException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroNaoNulo(
		// FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
		// cobrancaAcaoCronograma.getId()));
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes");
		//
		// FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new
		// FiltroCobrancaAcaoCronograma();
		// filtroCobrancaAcaoCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaGrupoCronogramaMes");
		// filtroCobrancaAcaoCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.cobrancaAcaoPredecessora");
		//
		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		// FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronogramaTeste =
		// filtroCobrancaAcaoCronograma;
		//
		// /**
		// * [FS0004] Cronograma de cobranca possui atividades ja realizadas
		// */
		// for (int i = 0; i < ids.length; i++) {
		//
		// if ((i + 1) == ids.length) {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronogramaTeste
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.COBRANCA_ACAO_PREDECESSORA,
		// ids[i]));
		//
		// } else {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronogramaTeste
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.COBRANCA_ACAO_PREDECESSORA,
		// ids[i], ParametroSimples.CONECTOR_OR));
		// }
		// }
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroNaoNulo(
		// FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		//
		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		// Collection colecaoCobrancaAtividadeTeste = getControladorUtil()
		// .pesquisar(filtroCobrancaAcaoCronogramaTeste,
		// CobrancaAcaoCronograma.class.getName());
		// if (!colecaoCobrancaAtividadeTeste.isEmpty()) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException(
		// "atencao.dependencias.nao_remover_com_acao_sucessora");
		// }
		//
		// Collection colecaoCobrancaAcaoAtividade = getControladorUtil()
		// .pesquisar(filtroCobrancaAcaoAtividadeCronograma,
		// CobrancaAcaoAtividadeCronograma.class.getName());
		//
		// if (!colecaoCobrancaAcaoAtividade.isEmpty()) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException("atencao.dependencias.existentes");
		// }
		//
		// filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();
		// filtroCobrancaAcaoCronograma.limparListaParametros();
		// for (int i = 0; i < ids.length; i++) {
		//
		// if ((i + 1) == ids.length) {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		// } else {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		// }
		// }
		//
		// colecaoCobrancaAcaoAtividade = getControladorUtil().pesquisar(
		// filtroCobrancaAcaoAtividadeCronograma,
		// CobrancaAcaoAtividadeCronograma.class.getName());
		//
		// CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma =
		// null;
		// Iterator iteratorRemoveAtividades = colecaoCobrancaAcaoAtividade
		// .iterator();
		// while (iteratorRemoveAtividades.hasNext()) {
		// cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma)
		// iteratorRemoveAtividades
		// .next();
		//
		// if (cobrancaAcaoAtividadeCronograma.getRealizacao() != null) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException(
		// "atencao.dependencias.acao_realizada");
		// }
		// getControladorUtil().remover(cobrancaAcaoAtividadeCronograma);
		// }
		//
		// Collection colecaoAcaoCronograma = getControladorUtil().pesquisar(
		// filtroCobrancaAcaoCronograma,
		// CobrancaAcaoCronograma.class.getName());
		// Iterator iteratorAcaoCronogramaRemover = colecaoAcaoCronograma
		// .iterator();
		//
		// CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		//
		// while (iteratorAcaoCronogramaRemover.hasNext()) {
		// cobrancaAcaoCronograma = (CobrancaAcaoCronograma)
		// iteratorAcaoCronogramaRemover
		// .next();
		//
		// getControladorUtil().remover(cobrancaAcaoCronograma);
		// }
		//
		// getControladorUtil().remover(ids,
		// CobrancaGrupoCronogramaMes.class.getName(), null, null);

	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * [SB0002] Excluir Cobrança Cronograma
	 * 
	 * @param ids
	 * @throws ControladorException
	 */

	public void removerCobrancaAtividadeCronograma(String[] ids) throws ControladorException{

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma");

		Collection colecaoAtividadeCronograma = null;
		for(int i = 0; i < (ids.length + 1); i++){
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO, ids[i], ParametroSimples.CONECTOR_OR));
		}

		colecaoAtividadeCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		Iterator iteratorAtividadeCronograma = colecaoAtividadeCronograma.iterator();

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = null;
		while(iteratorAtividadeCronograma.hasNext()){
			cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma.next();

			getControladorUtil().remover(cobrancaAcaoAtividadeCronograma);
		}

		getControladorUtil().remover(ids, CobrancaAcaoCronograma.class.getName(), null, null);
	}

	/**
	 * @author isilva
	 * @param parcelamentoPerfil
	 * @param validacaoEfetuarParcelamento
	 * @throws ControladorException
	 */
	private void validarObrigatoriedadePrestacaoMinimaParcelamentoPerfil(ParcelamentoPerfil parcelamentoPerfil,
					boolean validacaoEfetuarParcelamento) throws ControladorException{

		int qtdNulo = 0;

		if(parcelamentoPerfil.getPercentualTarifaMinimaPrestacao() == null){
			qtdNulo++;
		}

		if(parcelamentoPerfil.getPercentualValorDebitoCalculoValorMinimoPrestacao() == null){
			qtdNulo++;
		}

		if(parcelamentoPerfil.getValorDebitoPrestacao() == null){
			qtdNulo++;
		}

		if(qtdNulo != 2){
			if(validacaoEfetuarParcelamento){
				// Validação para Efetuar Parcelamento
				throw new ControladorException("atencao.prestacao.minima.no.perfil.parcel.ausente.para.rd");
			}else{
				// Validação inserir/ manter Perfil de Parcelamento
				throw new ControladorException("atencao.informe.tarifa.minima.valor.ou.percentual.valor.debito.ou.valor.minimo.prestacao");
			}
		}

		if(parcelamentoPerfil.getPercentualValorDebitoCalculoValorMinimoPrestacao() != null
						&& parcelamentoPerfil.getIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima() == null){
			if(validacaoEfetuarParcelamento){
				// Validação para Efetuar Parcelamento
				throw new ControladorException("atencao.indicador.valor.debito.original.atualizado.prestacao.minima.ausente");
			}else{
				// Validação inserir/ manter Perfil de Parcelamento
				throw new ControladorException("atencao.required", null, "Informe Opções da Prestação Mínima");
			}
		}

	}

	/**
	 * [UC0220] Inserir Perfil de Parcelamento [UC0221] Manter Perfil de
	 * Parcelamento
	 * Validar Inserir Perfil de Parcelamento e Manter Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/05/2006
	 * @param numeroResolucaoDiretoria
	 * @param idImovelSituacaoTipo
	 * @param idImovelPerfil
	 * @param idSubcategoria
	 * @param percentualDescontoAcrescimo
	 * @return
	 */
	protected void validacaoFinalPerfilParcelamento(ParcelamentoPerfil parcelamentoPerfil,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelper, Collection collectionParcelamentoDescontoInatividade,
					Collection collectionParcelamentoDescontoAntiguidade, String acao) throws ControladorException{

		String idResolucaoDiretoria = "" + parcelamentoPerfil.getResolucaoDiretoria().getId();
		String idImovelSituacaoTipo = "" + parcelamentoPerfil.getImovelSituacaoTipo().getId();

		String idImovelPerfil = null;
		if(parcelamentoPerfil.getImovelPerfil() != null){
			idImovelPerfil = "" + parcelamentoPerfil.getImovelPerfil().getId();
		}

		String idSubcategoria = null;
		if(parcelamentoPerfil.getSubcategoria() != null){
			idSubcategoria = "" + parcelamentoPerfil.getSubcategoria().getId();
		}

		String idPerfilParcelamento = "" + parcelamentoPerfil.getId();

		if(acao.equals("INSERIR") && (idResolucaoDiretoria == null || idResolucaoDiretoria.equalsIgnoreCase(""))){
			// Informe Numero da RD.
			throw new ControladorException("atencao.numero_rd_nao_informado");
		}

		if(acao.equals("INSERIR")
						&& (idImovelSituacaoTipo == null || idImovelSituacaoTipo.equals("" + ConstantesSistema.NUMERO_NAO_INFORMADO))){
			// Informe Tipo da Situação do Imóvel
			throw new ControladorException("atencao.tipo_situacao_imovel_nao_informado");
		}

		/*
		 * Inicio Validação das Alterações
		 */

		BigDecimal valorMinimoDebitoAParcelarFaixaDebitoBigDecimal = BigDecimal.ZERO;
		if(!Util.isVazioOuBranco(parcelamentoPerfil.getValorMinimoDebitoAParcelarFaixaDebito())){
			valorMinimoDebitoAParcelarFaixaDebitoBigDecimal = parcelamentoPerfil.getValorMinimoDebitoAParcelarFaixaDebito();
		}else{
			throw new ControladorException("atencao.required", null, "Valor Mínimo de Débito a Parcelar");
		}

		BigDecimal valorMaximoDebitoAParcelarFaixaDebitoBigDecimal = BigDecimal.ZERO;
		if(!Util.isVazioOuBranco(parcelamentoPerfil.getValorMaximoDebitoAParcelarFaixaDebito())){
			valorMaximoDebitoAParcelarFaixaDebitoBigDecimal = parcelamentoPerfil.getValorMaximoDebitoAParcelarFaixaDebito();
		}else{
			throw new ControladorException("atencao.required", null, "Valor Máximo de Débito a Parcelar");
		}

		if(valorMinimoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(new BigDecimal("999999999.99")) > 0
						|| valorMinimoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(BigDecimal.ZERO) < 0){
			throw new ControladorException("atencao.valor.minimo.debito.parcelar.dever.maior.igual.0.e.nao.maior.que.999_999_999.99");
		}else if(valorMaximoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(new BigDecimal("999999999.99")) > 0
						|| valorMaximoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(BigDecimal.ZERO) < 0){
			throw new ControladorException("atencao.valor.maximo.debito.parcelar.dever.maior.igual.0.e.nao.maior.que.999_999_999.99");
		}else if(valorMinimoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(valorMaximoDebitoAParcelarFaixaDebitoBigDecimal) == 0){
			throw new ControladorException("atencao.valor.minimo.e.maximo.debito.parcelar.nao.podem.ser.iguais");
		}else if(valorMinimoDebitoAParcelarFaixaDebitoBigDecimal.compareTo(valorMaximoDebitoAParcelarFaixaDebitoBigDecimal) > 0){
			throw new ControladorException("atencao.valor.minimo.nao.pode.ser.maior.valor.maximo.debito.parcelar");
		}

		if(Util.isVazioOuBranco(parcelamentoPerfil.getIndicadorDebitoOriginalOuAtualizadoFaixaDebito())){
			throw new ControladorException("atencao.required", null, "Opções da Faixa de Débito a Parcelar");
		}

		validarObrigatoriedadePrestacaoMinimaParcelamentoPerfil(parcelamentoPerfil, false);

		if(Util.isVazioOuBranco(parcelamentoPerfil.getIndicadorChequeDevolvido())){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Não parcelar com cheque devolvido");
		}

		if(Util.isVazioOuBranco(parcelamentoPerfil.getIndicadorSancoesUnicaConta())){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Não parcelar com sanções em mais de uma conta");
		}

		/*
		 * Fim Validação das Alterações
		 */

		if(acao.equals("INSERIR")){

			Integer idIimovelPerfil = null;

			if(!Util.isVazioOuBranco(idImovelPerfil)){
				idIimovelPerfil = Integer.valueOf(idImovelPerfil);
			}

			Integer subCategoriaId = null;
			if(!Util.isVazioOuBranco(idSubcategoria)){
				subCategoriaId = Integer.valueOf(idSubcategoria);
			}

			Collection colecaoParcelamentoPerfil;
			try{
				colecaoParcelamentoPerfil = this
								.pesquisarExstenciaPerfilParcelamento(null, Integer.valueOf(idResolucaoDiretoria),
												Integer.valueOf(idImovelSituacaoTipo), idIimovelPerfil, subCategoriaId,
												valorMinimoDebitoAParcelarFaixaDebitoBigDecimal,
												valorMaximoDebitoAParcelarFaixaDebitoBigDecimal, "INSERIR");
			}catch(NumberFormatException e){
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}

			if(colecaoParcelamentoPerfil != null && !colecaoParcelamentoPerfil.isEmpty()){
				throw new ControladorException("atencao.perfil_parcelamento_ja_existe");
			}

		}

		if(collectionParcelamentoQuantidadeReparcelamentoHelper == null || collectionParcelamentoQuantidadeReparcelamentoHelper.isEmpty()){
			throw new ControladorException(
			// Informe Reparcelamento Consecutivo
							"atencao.required", null, " Reparcelamento Consecutivo");
		}
		Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper.iterator();

		while(iterator.hasNext()){

			ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
							.next();

			Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
							.getCollectionParcelamentoQuantidadePrestacaoHelper();

			if(collectionParcelamentoQuantidadePrestacaoHelper == null || collectionParcelamentoQuantidadePrestacaoHelper.isEmpty()){
				// Informações do Parcelamento por Quantidade de Reparcelamentos deve ser informado
				throw new ControladorException("atencao.campo.informado", null,
								"Informações do Parcelamento por Quantidade de Reparcelamentos");
			}else{

				Iterator iteratorParcelamentoQuantidadePrestacaoHelper = collectionParcelamentoQuantidadePrestacaoHelper.iterator();

				while(iteratorParcelamentoQuantidadePrestacaoHelper.hasNext()){

					ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) iteratorParcelamentoQuantidadePrestacaoHelper
									.next();
					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = parcelamentoQuantidadePrestacaoHelper
									.getParcelamentoQuantidadePrestacao();

					if(parcelamentoQuantidadePrestacao.getTaxaJuros() != null
									&& parcelamentoQuantidadePrestacao.getTaxaJuros().toString().length() > 6){
						throw new ControladorException("atencao.nao.e.valor.valido", null, "Taxa de Juros a.m.");
					}

					if(parcelamentoQuantidadePrestacao.getValorMinimoEntrada() != null
									&& parcelamentoQuantidadePrestacao.getValorMinimoEntrada().toString().length() > 12){
						throw new ControladorException("atencao.nao.e.valor.valido", null, "Valor Mín de Entrada");
					}

					if(parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel() != null
									&& parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().toString().length() > 6){
						throw new ControladorException("atencao.nao.e.valor.valido", null, "Percentual Tarifa Mínima");
					}

					if(parcelamentoQuantidadePrestacao.getPercentualValorReparcelado() != null
									&& parcelamentoQuantidadePrestacao.getPercentualValorReparcelado().toString().length() > 6){
						throw new ControladorException("atencao.nao.e.valor.valido", null, "Percentual Valor Reparcelado");
					}

					if(parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada() != null
									&& parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().toString().length() > 6){
						throw new ControladorException("atencao.nao.e.valor.valido", null, "Percentual Valor Débito");
					}

					// Valida Quantidade de Reparcelamento

					Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelper
									.getCollectionParcelamentoFaixaValor();

					if(collectionParcelamentoFaixaValor != null && !collectionParcelamentoFaixaValor.isEmpty()){

						Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor.iterator();

						while(iteratorParcelamentoFaixaValor.hasNext()){

							// Validar Faixa Valor

							ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor.next();

							if(parcelamentoFaixaValor.getValorFaixa() == null){
								throw new ControladorException("atencao.campo.informado", null,
												"Valor Mínimo - Percentual por Faixa de Valor");
							}else if(parcelamentoFaixaValor.getValorFaixa().toString().length() > 12){
								throw new ControladorException("atencao.nao.e.valor.valido", null,
												"Valor Mínimo - Percentual por Faixa de Valor");
							}

							if((parcelamentoFaixaValor.getPercentualFaixa() == null && parcelamentoFaixaValor.getValorFixoEntrada() == null)
											|| (parcelamentoFaixaValor.getPercentualFaixa() != null && parcelamentoFaixaValor
															.getValorFixoEntrada() != null)){
								throw new ControladorException("atencao.campo.informado", null,
												"Percentual ou Valor Fixo de Entrada - Percentual por Faixa de Valor");
							}

							if(parcelamentoFaixaValor.getPercentualFaixa() != null
											&& parcelamentoFaixaValor.getPercentualFaixa().toString().length() > 6){
								throw new ControladorException("atencao.nao.e.valor.valido", null,
												"Percentual - Percentual por Faixa de Valor");
							}

							if(parcelamentoFaixaValor.getValorFixoEntrada() != null
											&& parcelamentoFaixaValor.getValorFixoEntrada().toString().length() > 12){
								throw new ControladorException("atencao.nao.e.valor.valido", null,
												"Valor Fixo de Entrada - Percentual por Faixa de Valor");
							}

							if(parcelamentoFaixaValor.getIndicadorPercentualFaixaValor() == null){
								throw new ControladorException("atencao.campo.informado", null,
												"Opções Entrada - Percentual por Faixa de Valor");
							}

						}

					}else{

						if(parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada() != null
										&& parcelamentoQuantidadePrestacao.getIndicadorEntradaParcelamento() == null){
							throw new ControladorException("atencao.campo.informado", null,
											"Opções do Débito das Informações por Quantidade Máxima de Prestações");
						}
					}

				}

			}

		}

		if(collectionParcelamentoDescontoAntiguidade != null && !collectionParcelamentoDescontoAntiguidade.isEmpty()){

			Iterator iteratorParcelamentoDescontoAntiguidade = collectionParcelamentoDescontoAntiguidade.iterator();

			while(iteratorParcelamentoDescontoAntiguidade.hasNext()){

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iteratorParcelamentoDescontoAntiguidade
								.next();

				if(parcelamentoDescontoAntiguidade.getPercentualDescontoSemRestabelecimento() == null){
					// Percentual de Desconto Sem Restabelecimento
					throw new ControladorException("atencao.required", null, "Percentual de Desconto Sem Restabelecimento");
				}
				// [FS0006]Verificar percentual de desconto
				BigDecimal percentualDescontoSemRestabelecimento = parcelamentoDescontoAntiguidade
								.getPercentualDescontoSemRestabelecimento();
				if(percentualDescontoSemRestabelecimento.compareTo(BigDecimal.ZERO) == 0){
					// Percentual de Desconto Sem Restabelecimento deve
					// somente conter números decimais positivos.
					throw new ControladorException("atencao.float", null, "Percentual de Desconto Sem Restabelecimento");
				}

				if(parcelamentoDescontoAntiguidade.getPercentualDescontoComRestabelecimento() == null){
					throw new ControladorException(
					// Informe Percentual de Desconto Com Restabelecimento
									"atencao.required", null, "  Percentual de Desconto Com Restabelecimento");
				}
				// [FS0006]Verificar percentual de desconto
				BigDecimal percentualDescontoComRestabelecimento = parcelamentoDescontoAntiguidade
								.getPercentualDescontoComRestabelecimento();
				if(percentualDescontoComRestabelecimento.compareTo(BigDecimal.ZERO) == 0){
					// Percentual de Desconto Com Restabelecimento deve somente conter números
					// decimais positivos.
					throw new ControladorException("atencao.float", null, "Percentual de Desconto Com Restabelecimento");
				}

				if(parcelamentoDescontoAntiguidade.getPercentualDescontoAtivo() == null){
					// Informe Percentual de Desconto Ativo
					throw new ControladorException("atencao.required", null, "  Percentual de Desconto Ativo");
				}
				// [FS0006]Verificar percentual de desconto
				BigDecimal percentualDescontoAtivo = parcelamentoDescontoAntiguidade.getPercentualDescontoAtivo();
				if(percentualDescontoAtivo.compareTo(BigDecimal.ZERO) == 0){
					// Percentual de Desconto Ativo deve somente conter números decimais positivos.
					throw new ControladorException("atencao.float", null, "Percentual de Desconto Ativo");
				}
			}

		}

		if(collectionParcelamentoDescontoInatividade != null && !collectionParcelamentoDescontoInatividade.isEmpty()){

			Iterator iteratorParcelamentoDescontoInatividade = collectionParcelamentoDescontoInatividade.iterator();

			while(iteratorParcelamentoDescontoInatividade.hasNext()){

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iteratorParcelamentoDescontoInatividade
								.next();

				if(parcelamentoDescontoInatividade.getPercentualDescontoSemRestabelecimento() == null){
					// Informe Percentual de Desconto Sem Restabelecimento
					throw new ControladorException("atencao.required", null, "  Percentual de Desconto Sem Restabelecimento");
				}
				// [FS0006]Verificar percentual de desconto
				// BigDecimal percentualDescontoSemRestabelecimento =
				// parcelamentoDescontoInatividade
				// .getPercentualDescontoSemRestabelecimento();
				// if(percentualDescontoSemRestabelecimento.compareTo(BigDecimal.ZERO) == 0){
				// // Percentual de Desconto Sem Restabelecimento deve somente conter números
				// // decimais positivos.
				// throw new ControladorException("atencao.float", null,
				// "Percentual de Desconto Sem Restabelecimento");
				// }


				// [FS0010] - Verificar Percentual Máximo
				if(parcelamentoDescontoInatividade.getPercentualDescontoJurosMoraSemRestabelecimento() != null){

					BigDecimal percentualDescontoJurosMoraSemRestabelecimento = parcelamentoDescontoInatividade
									.getPercentualDescontoJurosMoraSemRestabelecimento();

					if(percentualDescontoJurosMoraSemRestabelecimento.compareTo(new BigDecimal(100)) > 0){
						// Caso o percentual informado seja maior que 100%, exibir a mensagem
						// "Percentual não pode ser maior que 100%"
						throw new ControladorException("atencao.percentual.invalido.maximo", null,
										"Percentual de Desconto de Juros Mora Sem Restabelecimento");
					}
				}

				// [FS0010] - Verificar Percentual Máximo
				if(parcelamentoDescontoInatividade.getPercentualDescontoMultaSemRestabelecimento() != null){

					BigDecimal percentualDescontoMultaSemRestabelecimento = parcelamentoDescontoInatividade
									.getPercentualDescontoMultaSemRestabelecimento();

					if(percentualDescontoMultaSemRestabelecimento.compareTo(new BigDecimal(100)) > 0){
						// Caso o percentual informado seja maior que 100%, exibir a mensagem
						// "Percentual não pode ser maior que 100%"
						throw new ControladorException("atencao.percentual.invalido.maximo", null,
										"Percentual de Desconto de Multa Sem Restabelecimento");
					}
				}

				if(parcelamentoDescontoInatividade.getPercentualDescontoComRestabelecimento() == null){
					throw new ControladorException(
					// Informe Percentual de Desconto Com Restabelecimento
									"atencao.required", null, "  Percentual de Desconto Com Restabelecimento");
				}
				// [FS0006]Verificar percentual de desconto
				// BigDecimal percentualDescontoComRestabelecimento =
				// parcelamentoDescontoInatividade
				// .getPercentualDescontoComRestabelecimento();
				// if(percentualDescontoComRestabelecimento.compareTo(BigDecimal.ZERO) == 0){
				// // Percentual de Desconto Com Restabelecimento deve somente conter números
				// // decimais positivos.
				// throw new ControladorException("atencao.float", null,
				// "Percentual de Desconto Com Restabelecimento");
				// }

				// [FS0010] - Verificar Percentual Máximo
				if(parcelamentoDescontoInatividade.getPercentualDescontoJurosMoraComRestabelecimento() != null){

					BigDecimal percentualDescontoJurosMoraComRestabelecimento = parcelamentoDescontoInatividade
									.getPercentualDescontoJurosMoraComRestabelecimento();

					if(percentualDescontoJurosMoraComRestabelecimento.compareTo(new BigDecimal(100)) > 0){
						// Caso o percentual informado seja maior que 100%, exibir a mensagem
						// "Percentual não pode ser maior que 100%"
						throw new ControladorException("atencao.percentual.invalido.maximo", null,
										"Percentual de Desconto de Juros Mora Com Restabelecimento");
					}
				}

				// [FS0010] - Verificar Percentual Máximo
				if(parcelamentoDescontoInatividade.getPercentualDescontoMultaComRestabelecimento() != null){

					BigDecimal percentualDescontoMultaComRestabelecimento = parcelamentoDescontoInatividade
									.getPercentualDescontoMultaComRestabelecimento();

					if(percentualDescontoMultaComRestabelecimento.compareTo(new BigDecimal(100)) > 0){
						// Caso o percentual informado seja maior que 100%, exibir a mensagem
						// "Percentual não pode ser maior que 100%"
						throw new ControladorException("atencao.percentual.invalido.maximo", null,
										"Percentual de Desconto de Multa Com Restabelecimento");
					}
				}
			}
		}

	}

	/**
	 * Inserir o Perfil de Parcelamento na base
	 * [UC0220] Inserir Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/05/2006
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @param usuarioLogado
	 * @return o idPerfilParcelamneto
	 */
	public Integer inserirPerfilParcelamento(ParcelamentoPerfil parcelamentoPerfilNovo,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelper, Collection collectionParcelamentoDescontoInatividade,
					Collection collectionParcelamentoDescontoAntiguidade, Usuario usuarioLogado) throws ControladorException{

		validacaoFinalPerfilParcelamento(parcelamentoPerfilNovo, collectionParcelamentoQuantidadeReparcelamentoHelper,
						collectionParcelamentoDescontoInatividade, collectionParcelamentoDescontoAntiguidade, "INSERIR");

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_PERFIL_PARCELAMENTO_INSERIR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		if(Util.isVazioOuBranco(parcelamentoPerfilNovo.getPercentualValorDebitoCalculoValorMinimoPrestacao())
						&& !Util.isVazioOuBranco(parcelamentoPerfilNovo.getIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima())){
			parcelamentoPerfilNovo.setIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima(null);
		}

		parcelamentoPerfilNovo.setOperacaoEfetuada(operacaoEfetuada);
		parcelamentoPerfilNovo.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(parcelamentoPerfilNovo);
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		// insere o objeto PerfilParcelamento e recupera o seu id
		parcelamentoPerfilNovo.setUltimaAlteracao(new Date());
		Integer idPerfilParcelamento = (Integer) this.getControladorUtil().inserir(parcelamentoPerfilNovo);
		parcelamentoPerfilNovo.setId(idPerfilParcelamento);

		// inserir a coleção de ParcelamentoQuantidadeReparcelamento
		if(collectionParcelamentoQuantidadeReparcelamentoHelper != null && !collectionParcelamentoQuantidadeReparcelamentoHelper.isEmpty()){

			Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper.iterator();

			while(iterator.hasNext()){

				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
								.next();
				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamento.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoQuantidadeReparcelamento.setQuantidadeMaximaReparcelamento(parcelamentoQuantidadeReparcelamentoHelper
								.getQuantidadeMaximaReparcelamento());
				// TODO ver ValorMinimoPrestacao
				/*
				 * parcelamentoQuantidadeReparcelamento
				 * .setValorMinimoPrestacao(parcelamentoQuantidadeReparcelamentoHelper
				 * .getValorMinimoPrestacao());
				 */
				parcelamentoQuantidadeReparcelamento.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamento.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoQuantidadeReparcelamento);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto ParcelamentoQuantidadeReparcelamento e
				// recupera o seu id
				Integer idParcelamentoQuantidadeReparcelamento = (Integer) this.getControladorUtil().inserir(
								parcelamentoQuantidadeReparcelamento);
				parcelamentoQuantidadeReparcelamento.setId(idParcelamentoQuantidadeReparcelamento);

				Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
								.getCollectionParcelamentoQuantidadePrestacaoHelper();

				if(collectionParcelamentoQuantidadePrestacaoHelper != null && !collectionParcelamentoQuantidadePrestacaoHelper.isEmpty()){

					Iterator iteratorParcelamentoQuantidadePrestacaoHelper = collectionParcelamentoQuantidadePrestacaoHelper.iterator();

					while(iteratorParcelamentoQuantidadePrestacaoHelper.hasNext()){

						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) iteratorParcelamentoQuantidadePrestacaoHelper
										.next();

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = parcelamentoQuantidadePrestacaoHelper
										.getParcelamentoQuantidadePrestacao();

						parcelamentoQuantidadePrestacao.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);
						// parcelamentoQuantidadePrestacao
						// .setUltimaAlteracao(new Date());

						// ------------ REGISTRAR TRANSAÇÃO ---------------
						parcelamentoQuantidadePrestacao.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacao.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(parcelamentoQuantidadePrestacao);
						// ------------ REGISTRAR TRANSAÇÃO ---------------

						// insere o objeto parcelamentoQuantidadePrestacao
						Integer idparcelamentoQuantidadePrestacao = (Integer) this.getControladorUtil().inserir(
										parcelamentoQuantidadePrestacao);
						parcelamentoQuantidadePrestacao.setId(idparcelamentoQuantidadePrestacao);

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelper
										.getCollectionParcelamentoFaixaValor();

						if(collectionParcelamentoFaixaValor != null && !collectionParcelamentoFaixaValor.isEmpty()){

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor.iterator();

							while(iteratorParcelamentoFaixaValor.hasNext()){

								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
												.next();

								parcelamentoFaixaValor.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);
								parcelamentoFaixaValor.setUltimaAlteracao(new Date());

								// ------------ REGISTRAR TRANSAÇÃO
								// ---------------
								parcelamentoFaixaValor.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO
								// ---------------

								// insere o objeto parcelamentoFaixaValor
								this.getControladorUtil().inserir(parcelamentoFaixaValor);

							}

						}

					}

				}

			}

		}

		// inserir a coleção de collectionParcelamentoDescontoInatividade
		if(collectionParcelamentoDescontoInatividade != null && !collectionParcelamentoDescontoInatividade.isEmpty()){

			Iterator iterator = collectionParcelamentoDescontoInatividade.iterator();

			while(iterator.hasNext()){

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iterator.next();

				parcelamentoDescontoInatividade.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto parcelamentoDescontoInatividade
				this.getControladorUtil().inserir(parcelamentoDescontoInatividade);

			}

		}

		// inserir a coleção de collectionParcelamentoDescontoAntiguidade
		if(collectionParcelamentoDescontoAntiguidade != null && !collectionParcelamentoDescontoAntiguidade.isEmpty()){

			Iterator iterator = collectionParcelamentoDescontoAntiguidade.iterator();

			while(iterator.hasNext()){

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iterator.next();

				parcelamentoDescontoAntiguidade.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoDescontoAntiguidade.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoAntiguidade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto parcelamentoDescontoAntiguidade
				this.getControladorUtil().inserir(parcelamentoDescontoAntiguidade);

			}

		}

		return idPerfilParcelamento;

	}

	/**
	 * [UC0221] Manter Perfil de Parcelamento
	 * Remove um objeto do tipo ParcelamentoPerfil no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 11/05/2006
	 * @param ids
	 * @param usuarioLogado
	 * @return
	 */
	public void removerPerfilParcelamento(String[] ids, Usuario usuarioLogado) throws ControladorException{

		// remover
		// ParcelamentoQuantidadeReparcelamento,ParcelamentoDescontoAntiguidade,
		// ParcelamentoDescontoInatividade para cada ParcelamentoPerfil a
		// remover
		// e remover ParcelamentoQuantidadePrestacao para cada
		// ParcelamentoQuantidadeReparcelamento remivido

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
		colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		int i = 0;
		FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		FiltroParcelamentoDescontoInatividade filtroParcelamentoDescontoInatividade = new FiltroParcelamentoDescontoInatividade();
		FiltroParcelamentoFaixaValor filtroParcelamentoFaixaValor = new FiltroParcelamentoFaixaValor();
		FiltroParcelamentoQuantidadeReparcelamento filtroParcelamentoQuantidadeReparcelamento = new FiltroParcelamentoQuantidadeReparcelamento();
		FiltroParcelamentoQuantidadePrestacao filtroParcelamentoQuantidadePrestacao = new FiltroParcelamentoQuantidadePrestacao();
		FiltroParcelamentoDescontoAntiguidade filtroParcelamentoDescontoAntiguidade = new FiltroParcelamentoDescontoAntiguidade();
		while(i < ids.length){
			String idPerfilParcelamento = ids[i];
			// [FS0002]Verificar se perfil de parcelamento já foi utilizado

			filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.PARCELAMENTO_PERFIL_ID, idPerfilParcelamento));

			Collection colecaoParcelamento = this.getControladorUtil().pesquisar(filtroParcelamento, Parcelamento.class.getName());

			filtroParcelamento.limparListaParametros();

			if(colecaoParcelamento != null && !colecaoParcelamento.isEmpty()){
				// Perfil de Parcelamento já utilizado, não pode ser alterado
				// nem excluído.
				throw new ControladorException("atencao.perfil_parcelamento_ja_utilizado");
			}

			// coleção de ParcelamentoQuantidadeReparcelamento para remover

			filtroParcelamentoQuantidadeReparcelamento.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoQuantidadeReparcelamento.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoQuantidadeReparcelamento.PARCELAMENTO_PERFIL, idPerfilParcelamento));

			Collection collectionParcelamentoQuantidadeReparcelamento = this.getControladorUtil().pesquisar(
							filtroParcelamentoQuantidadeReparcelamento, ParcelamentoQuantidadeReparcelamento.class.getName());

			filtroParcelamentoQuantidadeReparcelamento.limparListaParametros();

			Iterator iteratorReparcelamento = collectionParcelamentoQuantidadeReparcelamento.iterator();

			while(iteratorReparcelamento.hasNext()){

				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = (ParcelamentoQuantidadeReparcelamento) iteratorReparcelamento
								.next();

				String idParcelamentoQuantidadeReparcelamento = "" + parcelamentoQuantidadeReparcelamento.getId();
				// coleção de ParcelamentoQuantidadePrestacao para remover

				filtroParcelamentoQuantidadePrestacao.adicionarCaminhoParaCarregamentoEntidade("parcelamentoQuantidadeReparcelamento");
				filtroParcelamentoQuantidadePrestacao.adicionarParametro(new ParametroSimples(
								FiltroParcelamentoQuantidadePrestacao.PARCELAMENTO_QUANTIDADE_REPARCELAMENTO,
								idParcelamentoQuantidadeReparcelamento));

				Collection collectionParcelamentoQuantidadePrestacao = this.getControladorUtil().pesquisar(
								filtroParcelamentoQuantidadePrestacao, ParcelamentoQuantidadePrestacao.class.getName());

				filtroParcelamentoQuantidadePrestacao.limparListaParametros();

				Iterator iteratorPrestacao = collectionParcelamentoQuantidadePrestacao.iterator();

				while(iteratorPrestacao.hasNext()){

					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = (ParcelamentoQuantidadePrestacao) iteratorPrestacao
									.next();

					String idParcelamentoQuantidadePrestacao = "" + parcelamentoQuantidadePrestacao.getId();
					// coleção de ParcelamentoFaixaValor para remover

					// filtroParcelamentoFaixaValor
					// .adicionarCaminhoParaCarregamentoEntidade("parcelamentoQuantidadePrestacao");
					filtroParcelamentoFaixaValor.adicionarParametro(new ParametroSimples(
									FiltroParcelamentoFaixaValor.PARCELAMENTO_QUANTIDADE_PRESTACAO, idParcelamentoQuantidadePrestacao));

					Collection collectionParcelamentoFaixaValor = this.getControladorUtil().pesquisar(filtroParcelamentoFaixaValor,
									ParcelamentoFaixaValor.class.getName());

					filtroParcelamentoFaixaValor.limparListaParametros();

					Iterator iteratorFaixaValor = collectionParcelamentoFaixaValor.iterator();

					while(iteratorFaixaValor.hasNext()){

						ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorFaixaValor.next();

						// ------------ REGISTRAR TRANSAÇÃO ----------------
						parcelamentoFaixaValor.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoFaixaValor.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						// remove objeto ParcelamentoFaixaValor na base
						this.getControladorUtil().remover(parcelamentoFaixaValor);

					}

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					parcelamentoQuantidadePrestacao.setOperacaoEfetuada(operacaoEfetuada);
					parcelamentoQuantidadePrestacao.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					// ------------ REGISTRAR TRANSAÇÃO ----------------
					// remove objeto ParcelamentoQuantidadePrestacao na base
					this.getControladorUtil().remover(parcelamentoQuantidadePrestacao);
				}
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoQuantidadeReparcelamento.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoQuantidadeReparcelamento na base
				this.getControladorUtil().remover(parcelamentoQuantidadeReparcelamento);
			}

			// coleção de ParcelamentoDescontoAntiguidade para remover

			filtroParcelamentoDescontoAntiguidade.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoDescontoAntiguidade.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoDescontoAntiguidade.PARCELAMENTO_PERFIL, idPerfilParcelamento));

			Collection collectionParcelamentoDescontoAntiguidade = this.getControladorUtil().pesquisar(
							filtroParcelamentoDescontoAntiguidade, ParcelamentoDescontoAntiguidade.class.getName());

			filtroParcelamentoQuantidadeReparcelamento.limparListaParametros();

			Iterator iteratorAntiguidade = collectionParcelamentoDescontoAntiguidade.iterator();

			while(iteratorAntiguidade.hasNext()){

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iteratorAntiguidade
								.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoDescontoAntiguidade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoDescontoAntiguidade na base
				this.getControladorUtil().remover(parcelamentoDescontoAntiguidade);
			}

			// coleção de ParcelamentoDescontoInatividade para remover

			filtroParcelamentoDescontoInatividade.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoDescontoInatividade.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoDescontoInatividade.PARCELAMENTO_PERFIL, idPerfilParcelamento));

			Collection collectionParcelamentoDescontoInatividade = this.getControladorUtil().pesquisar(
							filtroParcelamentoDescontoInatividade, ParcelamentoDescontoInatividade.class.getName());

			filtroParcelamentoDescontoInatividade.limparListaParametros();

			Iterator iteratorInatividade = collectionParcelamentoDescontoInatividade.iterator();

			while(iteratorInatividade.hasNext()){

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iteratorInatividade
								.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoDescontoInatividade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoDescontoInatividade na base
				this.getControladorUtil().remover(parcelamentoDescontoInatividade);
			}

			i = i + 1;
		}
		filtroParcelamento = null;
		filtroParcelamentoDescontoInatividade = null;
		filtroParcelamentoFaixaValor = null;
		filtroParcelamentoQuantidadeReparcelamento = null;
		filtroParcelamentoQuantidadePrestacao = null;
		filtroParcelamentoDescontoAntiguidade = null;

		// remover ParcelamentoPerfil(s)
		this.getControladorUtil().remover(ids, ParcelamentoPerfil.class.getName(), operacaoEfetuada, colecaoUsuarios);

	}

	/**
	 * Atualizar o Perfil de Parcelamento na base
	 * [UC0221] Manter Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 17/05/2006
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
	 * @param collectionParcelamentoDescontoInatividadeLinhaRemovidas
	 * @param collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
	 * @param collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
	 * @param usuarioLogado
	 * @return
	 */
	public void atualizarPerfilParcelamento(ParcelamentoPerfil parcelamentoPerfil,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelper, Collection collectionParcelamentoDescontoInatividade,
					Collection collectionParcelamentoDescontoAntiguidade,
					Collection collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas,
					Collection collectionParcelamentoDescontoInatividadeLinhaRemovidas,
					Collection collectionParcelamentoDescontoAntiguidadeLinhaRemovidas,
					Collection collectionParcelamentoQuantidadePrestacaoLinhaRemovidas, Usuario usuarioLogado) throws ControladorException{

		validacaoFinalPerfilParcelamento(parcelamentoPerfil, collectionParcelamentoQuantidadeReparcelamentoHelper,
						collectionParcelamentoDescontoInatividade, collectionParcelamentoDescontoAntiguidade, "ATUALIZAR");

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_PERFIL_PARCELAMENTO_ATUALIZAR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		operacaoEfetuada.setArgumentoValor(parcelamentoPerfil.getId());
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		String idPerfilParcelamento = "" + parcelamentoPerfil.getId();

		if(Util.isVazioOuBranco(parcelamentoPerfil.getPercentualValorDebitoCalculoValorMinimoPrestacao())
						&& !Util.isVazioOuBranco(parcelamentoPerfil.getIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima())){
			parcelamentoPerfil.setIndicadorOpcoesDebitoOriginalOuAtualizadoPrestacaoMinima(null);
		}

		FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
		// Seta o filtro para buscar o ParcelamentoPerfil na base
		filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.ID, idPerfilParcelamento));

		// Procura o ParcelamentoPerfil na base
		ParcelamentoPerfil parcelamentoPerfilNaBase = null;
		parcelamentoPerfilNaBase = (ParcelamentoPerfil) ((List) (this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
						ParcelamentoPerfil.class.getName()))).get(0);

		// Verificar se o ParcelamentoPerfil já foi atualizado por outro usuário
		// durante esta atualização
		if(parcelamentoPerfilNaBase.getUltimaAlteracao().after(parcelamentoPerfil.getUltimaAlteracao())){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		parcelamentoPerfil.setOperacaoEfetuada(operacaoEfetuada);
		parcelamentoPerfil.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(parcelamentoPerfil);
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		// atualiza o objeto PerfilParcelamento
		parcelamentoPerfil.setUltimaAlteracao(new Date());
		this.getControladorUtil().atualizar(parcelamentoPerfil);

		// atualizar a coleção de ParcelamentoQuantidadeReparcelamento
		if(collectionParcelamentoQuantidadeReparcelamentoHelper != null && !collectionParcelamentoQuantidadeReparcelamentoHelper.isEmpty()){

			Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper.iterator();

			while(iterator.hasNext()){

				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
								.next();
				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamento.setId(parcelamentoQuantidadeReparcelamentoHelper.getId());
				parcelamentoQuantidadeReparcelamento.setParcelamentoPerfil(parcelamentoPerfil);
				parcelamentoQuantidadeReparcelamento.setQuantidadeMaximaReparcelamento(parcelamentoQuantidadeReparcelamentoHelper
								.getQuantidadeMaximaReparcelamento());
				// TODO ver ValorMinimoPrestacao
				/*
				 * parcelamentoQuantidadeReparcelamento
				 * .setValorMinimoPrestacao(parcelamentoQuantidadeReparcelamentoHelper
				 * .getValorMinimoPrestacao());
				 */
				// parcelamentoQuantidadeReparcelamento
				// .setUltimaAlteracao(new Date());

				parcelamentoQuantidadeReparcelamento.setUltimaAlteracao(parcelamentoQuantidadeReparcelamentoHelper.getUltimaAlteracao());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamento.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoQuantidadeReparcelamento);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere ou atualiza o objeto
				// ParcelamentoQuantidadeReparcelamento
				this.getControladorUtil().inserirOuAtualizar(parcelamentoQuantidadeReparcelamento);

				Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
								.getCollectionParcelamentoQuantidadePrestacaoHelper();
				if(collectionParcelamentoQuantidadePrestacaoHelper != null && !collectionParcelamentoQuantidadePrestacaoHelper.isEmpty()){

					Iterator iteratorParcelamentoQuantidadePrestacaoHelper = collectionParcelamentoQuantidadePrestacaoHelper.iterator();

					while(iteratorParcelamentoQuantidadePrestacaoHelper.hasNext()){

						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) iteratorParcelamentoQuantidadePrestacaoHelper
										.next();

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = parcelamentoQuantidadePrestacaoHelper
										.getParcelamentoQuantidadePrestacao();

						parcelamentoQuantidadePrestacao.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);

						// parcelamentoQuantidadePrestacao
						// .setUltimaAlteracao(new Date());
						parcelamentoQuantidadePrestacao.setUltimaAlteracao(parcelamentoQuantidadePrestacaoHelper
										.getParcelamentoQuantidadePrestacao().getUltimaAlteracao());

						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						parcelamentoQuantidadePrestacao.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacao.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(parcelamentoQuantidadePrestacao);
						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------

						// insere ou atualiza o objeto
						// parcelamentoQuantidadePrestacao

						Integer idParcelamentoQuantidadePrestacao = (Integer) this.getControladorUtil().inserirOuAtualizar(
										parcelamentoQuantidadePrestacao);
						if(idParcelamentoQuantidadePrestacao != null){
							parcelamentoQuantidadePrestacao.setId(idParcelamentoQuantidadePrestacao);
						}

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelper
										.getCollectionParcelamentoFaixaValor();
						if(collectionParcelamentoFaixaValor != null && !collectionParcelamentoFaixaValor.isEmpty()){

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor.iterator();

							while(iteratorParcelamentoFaixaValor.hasNext()){

								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
												.next();

								parcelamentoFaixaValor.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);

								parcelamentoFaixaValor.setUltimaAlteracao(new Date());

								// ------------ REGISTRAR TRANSAÇÃO ------------
								parcelamentoFaixaValor.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO
								// --------------

								// insere ou atualiza o objeto
								// parcelamentoFaixaValor

								this.getControladorUtil().inserirOuAtualizar(parcelamentoFaixaValor);
							}

						}

					}

				}

			}

		}

		// atualizar a coleção de collectionParcelamentoDescontoInatividade
		if(collectionParcelamentoDescontoInatividade != null && !collectionParcelamentoDescontoInatividade.isEmpty()){

			Iterator iterator = collectionParcelamentoDescontoInatividade.iterator();

			while(iterator.hasNext()){

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iterator.next();

				parcelamentoDescontoInatividade.setParcelamentoPerfil(parcelamentoPerfil);

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());
				// insere ou atualiza o objeto parcelamentoDescontoInatividade
				this.getControladorUtil().inserirOuAtualizar(parcelamentoDescontoInatividade);

			}

		}

		// atualizar a coleção de collectionParcelamentoDescontoAntiguidade
		if(collectionParcelamentoDescontoAntiguidade != null && !collectionParcelamentoDescontoAntiguidade.isEmpty()){

			Iterator iterator = collectionParcelamentoDescontoAntiguidade.iterator();

			while(iterator.hasNext()){

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iterator.next();

				parcelamentoDescontoAntiguidade.setParcelamentoPerfil(parcelamentoPerfil);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoAntiguidade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade.setUltimaAlteracao(new Date());
				// insere ou atualiza o objeto parcelamentoDescontoAntiguidade
				this.getControladorUtil().inserirOuAtualizar(parcelamentoDescontoAntiguidade);

			}

		}

		if(collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas != null
						&& !collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas.isEmpty()){

			Iterator parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator = collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
							.iterator();
			while(parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator.hasNext()){

				// remove cada ParcelamentoQuantidadeReparcelamentoHelper linha
				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida = (ParcelamentoQuantidadeReparcelamentoHelper) parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator
								.next();

				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamentoLinhaRemovida = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamentoLinhaRemovida.setId(parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida.getId());

				Collection collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida = parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida
								.getCollectionParcelamentoQuantidadePrestacaoHelper();

				if(collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida != null
								&& !collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida.isEmpty()){

					Iterator parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator = collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida
									.iterator();
					while(parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator.hasNext()){

						// remove cada ParcelamentoFaixaValor e
						// ParcelamentoQuantidadePrestacao linha
						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelperLinhaRemovida = (ParcelamentoQuantidadePrestacaoHelper) parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator
										.next();

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelperLinhaRemovida
										.getCollectionParcelamentoFaixaValor();

						if(collectionParcelamentoFaixaValor != null && !collectionParcelamentoFaixaValor.isEmpty()){

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor.iterator();

							while(iteratorParcelamentoFaixaValor.hasNext()){

								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
												.next();

								// ------------ REGISTRAR TRANSAÇÃO
								// -------------
								parcelamentoFaixaValor.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO ------------
								try{
									repositorioUtil.remover(parcelamentoFaixaValor);
								}catch(ErroRepositorioException e){

									e.printStackTrace();
									sessionContext.setRollbackOnly();
									throw new ControladorException("erro.sistema", e);
								}
							}
						}

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacaoLinhaRemovida = parcelamentoQuantidadePrestacaoHelperLinhaRemovida
										.getParcelamentoQuantidadePrestacao();

						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						parcelamentoQuantidadePrestacaoLinhaRemovida.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacaoLinhaRemovida.adicionarUsuario(usuarioLogado,
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao.registrarOperacao(parcelamentoQuantidadePrestacaoLinhaRemovida);
						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						try{
							repositorioUtil.remover(parcelamentoQuantidadePrestacaoLinhaRemovida);
						}catch(ErroRepositorioException e){

							e.printStackTrace();
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
					}

				}else{
					try{
						repositorioCobranca
										.removerParcelamentoQuantidadePrestacaoEParcelamentoFaixaValor(parcelamentoQuantidadeReparcelamentoLinhaRemovida
														.getId());
					}catch(ErroRepositorioException e){

						e.printStackTrace();
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
				}

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamentoLinhaRemovida.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamentoLinhaRemovida
								.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoQuantidadeReparcelamentoLinhaRemovida);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				try{
					// remove cada ParcelamentoQuantidadeReparcelamento linha
					repositorioUtil.remover(parcelamentoQuantidadeReparcelamentoLinhaRemovida);
				}catch(ErroRepositorioException e){

					e.printStackTrace();
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}
			}
		}

		if(collectionParcelamentoDescontoInatividadeLinhaRemovidas != null
						&& !collectionParcelamentoDescontoInatividadeLinhaRemovidas.isEmpty()){

			Iterator parcelamentoDescontoInatividadeLinhaRemovidasIterator = collectionParcelamentoDescontoInatividadeLinhaRemovidas
							.iterator();
			while(parcelamentoDescontoInatividadeLinhaRemovidasIterator.hasNext()){

				// remove cada ParcelamentoDescontoInatividade linha
				ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeLinhaRemovida = (ParcelamentoDescontoInatividade) parcelamentoDescontoInatividadeLinhaRemovidasIterator
								.next();

				if(parcelamentoDescontoInatividadeLinhaRemovida.getId() != null){

					// ------------ REGISTRAR TRANSAÇÃO ----------------------------
					parcelamentoDescontoInatividadeLinhaRemovida.setOperacaoEfetuada(operacaoEfetuada);
					parcelamentoDescontoInatividadeLinhaRemovida.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(parcelamentoDescontoInatividadeLinhaRemovida);
					// ------------ REGISTRAR TRANSAÇÃO ----------------------------

					try{
						repositorioUtil.remover(parcelamentoDescontoInatividadeLinhaRemovida);
					}catch(ErroRepositorioException e){
						e.printStackTrace();
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
				}
			}
		}

		if(collectionParcelamentoDescontoAntiguidadeLinhaRemovidas != null
						&& !collectionParcelamentoDescontoAntiguidadeLinhaRemovidas.isEmpty()){
			Iterator parcelamentoDescontoAntiguidadeLinhaRemovidasIterator = collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
							.iterator();
			while(parcelamentoDescontoAntiguidadeLinhaRemovidasIterator.hasNext()){
				// remove cada ParcelamentoDescontoAntiguidade linha
				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeLinhaRemovida = (ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeLinhaRemovidasIterator
								.next();
				if(parcelamentoDescontoAntiguidadeLinhaRemovida.getId() != null){

					// ------------ REGISTRAR TRANSAÇÃO ----------------------------
					parcelamentoDescontoAntiguidadeLinhaRemovida.setOperacaoEfetuada(operacaoEfetuada);
					parcelamentoDescontoAntiguidadeLinhaRemovida.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(parcelamentoDescontoAntiguidadeLinhaRemovida);
					// ------------ REGISTRAR TRANSAÇÃO ----------------------------
					try{
						repositorioUtil.remover(parcelamentoDescontoAntiguidadeLinhaRemovida);
					}catch(ErroRepositorioException e){
						e.printStackTrace();
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
				}
			}
		}

		if(collectionParcelamentoQuantidadePrestacaoLinhaRemovidas != null
						&& !collectionParcelamentoQuantidadePrestacaoLinhaRemovidas.isEmpty()){

			Iterator parcelamentoQuantidadePrestacaoLinhaRemovidasIterator = collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
							.iterator();

			Collection<Integer> idsParcelamentoQuantidadePrestacao = new ArrayList<Integer>();

			while(parcelamentoQuantidadePrestacaoLinhaRemovidasIterator.hasNext()){
				ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) parcelamentoQuantidadePrestacaoLinhaRemovidasIterator
								.next();
				idsParcelamentoQuantidadePrestacao.add(parcelamentoQuantidadePrestacaoHelper.getParcelamentoQuantidadePrestacao().getId());
			}

			try{
				repositorioCobranca.removerParcelamentoQuantidadePrestacaoEParcelamentoFaixaValor(idsParcelamentoQuantidadePrestacao);
			}catch(ErroRepositorioException e){
				e.printStackTrace();
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
		}
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Cronograma
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @author Virgínia Melo
	 * @date 10/11/2008
	 *       Alterações no [UC0326] para a v0.06
	 * @return filtroCobrancaAcaoAtividadeCronograma
	 * @throws ControladorException
	 */
	public FiltroCobrancaAcaoAtividadeCronograma construirFiltroCobrancaAcaoAtividadeCronograma(
					String anoMesPeriodoReferenciaCobrancaInicial, String anoMesPeriodoReferenciaCobrancaFinal, String[] grupoCobranca,
					String[] acaoCobranca, String[] atividadeCobranca, String dataPeriodoPrevisaoComandoInicial,
					String dataPeriodoPrevisaoComandoFinal, String dataPeriodoComandoInicial, String dataPeriodoComandoFinal,
					String dataPeriodoRealizacaoComandoInicial, String dataPeriodoRealizacaoComandoFinal,
					String intervaloValorDocumentosInicial, String intervaloValorDocumentosFinal,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String intervaloQuantidadeItensDocumentosInicial, String intervaloQuantidadeItensDocumentosFinal,
					String situacaoCronograma, String situacaoComando) throws ControladorException{

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		boolean peloMenosUmParametroInformado = false;

		// validar Período de Referência da Cobrança
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(anoMesPeriodoReferenciaCobrancaInicial,
						anoMesPeriodoReferenciaCobrancaFinal, "Período de Referência da Cobrança Inicial",
						"Período de Referência da Cobrança Final", "atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if((anoMesPeriodoReferenciaCobrancaInicial != null && !anoMesPeriodoReferenciaCobrancaInicial.equals(""))
						&& (anoMesPeriodoReferenciaCobrancaFinal != null && !anoMesPeriodoReferenciaCobrancaFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaCobrancaInicial.substring(3, 7);
			String mesInicial = anoMesPeriodoReferenciaCobrancaInicial.substring(0, 2);

			String anoFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(3, 7);
			String mesFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(0, 2);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO, anoInicial
							+ mesInicial, anoFinal + mesFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// grupo cobrança
		if(grupoCobranca != null && grupoCobranca.length > 0){
			peloMenosUmParametroInformado = true;

			int i = 0;
			if(grupoCobranca != null){

				while(i < grupoCobranca.length){

					if(!grupoCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < grupoCobranca.length){
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i], ConectorOr.CONECTOR_OR, (grupoCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i]));
						}
					}

					i++;
				}

			}
		}
		/*
		 * // Ação Cobrança if (idAcaoCobranca != null &&
		 * !idAcaoCobranca.trim().equalsIgnoreCase("")) {
		 * filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
		 * idAcaoCobranca)); }
		 * // Programa Cobrança if (idProgramaCobranca != null &&
		 * !idProgramaCobranca.trim().equalsIgnoreCase("")) {
		 * filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
		 * FiltroCobrancaAcaoAtividadeCronograma.ID_PROGRAMA_COBRANCA,
		 * idProgramaCobranca)); }
		 */

		// açao cobrança
		if(acaoCobranca != null && acaoCobranca.length > 0){
			peloMenosUmParametroInformado = true;
			int i = 0;
			if(acaoCobranca != null){

				while(i < acaoCobranca.length){

					if(!acaoCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < acaoCobranca.length){
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i], ConectorOr.CONECTOR_OR, (acaoCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// atividade cobrança
		if(atividadeCobranca != null && atividadeCobranca.length > 0){
			peloMenosUmParametroInformado = true;

			int i = 0;
			if(atividadeCobranca != null){

				while(i < atividadeCobranca.length){

					if(!atividadeCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < atividadeCobranca.length){
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ATIVIDADE, atividadeCobranca[i],
											ConectorOr.CONECTOR_OR, (atividadeCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ATIVIDADE, atividadeCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// validar Período de Previsão do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoPrevisaoComandoInicial, dataPeriodoPrevisaoComandoFinal,
						"Período de Previsão do Comando Inicial", "Período de Previsão do Comando Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Previsão do Comando
		if((dataPeriodoPrevisaoComandoInicial != null && !dataPeriodoPrevisaoComandoInicial.equals(""))
						&& (dataPeriodoPrevisaoComandoFinal != null && !dataPeriodoPrevisaoComandoFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoPrevisaoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoPrevisaoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoPrevisaoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoPrevisaoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoPrevisaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoPrevisaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.DATA_PREVISTA, periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// validar Período do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoComandoInicial, dataPeriodoComandoFinal,
						"Período do Comando Inicial", "Período do Comando Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período do Comando
		if((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial.equals(""))
						&& (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.COMANDO, periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// validar Período de Realização do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoRealizacaoComandoInicial, dataPeriodoRealizacaoComandoFinal,
						"Período de Realização do Comando Inicial", "Período de Realização do Comando Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if((dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial.equals(""))
						&& (dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoRealizacaoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoRealizacaoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoRealizacaoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoRealizacaoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoRealizacaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoRealizacaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 0);
			periodoInicial.set(Calendar.SECOND, 0);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO, periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// Intervalo de Valor dos Documentos
		if((intervaloValorDocumentosInicial != null && !intervaloValorDocumentosInicial.equals(""))
						&& (intervaloValorDocumentosFinal != null && !intervaloValorDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			BigDecimal valorDocumentosInicial = Util.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosInicial);

			BigDecimal valorDocumentosFinal = Util.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosFinal);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.VALOR_DOCUMENTOS, valorDocumentosInicial,
							valorDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade dos Documentos
		if((intervaloQuantidadeDocumentosInicial != null && !intervaloQuantidadeDocumentosInicial.equals(""))
						&& (intervaloQuantidadeDocumentosFinal != null && !intervaloQuantidadeDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.QUANTIDADE_DOCUMENTOS,
							intervaloQuantidadeDocumentosInicial, intervaloQuantidadeDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade Itens dos Documentos
		if((intervaloQuantidadeItensDocumentosInicial != null && !intervaloQuantidadeItensDocumentosInicial.equals(""))
						&& (intervaloQuantidadeItensDocumentosFinal != null && !intervaloQuantidadeItensDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeCronograma.QUANTIDADE_ITENS_COBRADOS,
							intervaloQuantidadeItensDocumentosInicial, intervaloQuantidadeItensDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Situação do Cronograma
		// [SB003] - Seleciona Comandos do Crongrama por Situação do Cronograma
		if(situacaoCronograma != null && !situacaoCronograma.equals("")){
			if(situacaoCronograma.equals("Comandados")){
				filtroCobrancaAcaoAtividadeCronograma
								.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.COMANDO));
			}else if(situacaoCronograma.equals("NaoComandados")){
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeCronograma.COMANDO));
			}
		}

		// Situação do Comando
		// [SB0004] - Seleciona Comandos do Cronograma por Situação do Comando
		if(situacaoComando != null && !situacaoComando.equals("")){
			peloMenosUmParametroInformado = true;
			if(situacaoComando.equals("Realizados")){
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroNaoNulo(
								FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}else if(situacaoComando.equals("NaoRealizados")){
				filtroCobrancaAcaoAtividadeCronograma
								.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}

		}

		// [FS0006] - Verificar situação do crongrama e período do comando
		if((situacaoCronograma != null && !situacaoCronograma.equals("") && situacaoCronograma.equals("NaoComandados"))
						&& ((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial.equals("")) && (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal
										.equals("")))){
			throw new ControladorException("atencao.periodo_comando.informado.situacao_comando");
		}

		// [FS0007] - Verificar situação do comando e período de realização do
		// comando
		if((situacaoComando != null && !situacaoComando.equals("") && situacaoComando.equals("NaoRealizados"))
						&& ((dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals("")) && (dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
										.equals("")))){
			throw new ControladorException("atencao.periodo_realizacao.informado.situacao_comando");
		}

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if(!peloMenosUmParametroInformado){
			throw new ControladorException("atencao.filtro.nenhum_parametro_informado");

		}
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO);
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.PROGRAMA_COBRANCA);

		return filtroCobrancaAcaoAtividadeCronograma;
	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * [UC0325] - Consultar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(
					FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma) throws ControladorException{

		Collection colecaoCobrancaAcaoAtividadeCronograma;

		colecaoCobrancaAcaoAtividadeCronograma = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		if(colecaoCobrancaAcaoAtividadeCronograma == null || colecaoCobrancaAcaoAtividadeCronograma.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhumresultado", null, "Comando Ação de Cobrança - Cronograma");
		}

		return colecaoCobrancaAcaoAtividadeCronograma;

	}

	/**
	 * Consultar Comando de Ação de Cobrança - Cronograma
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @return Collection<CobrancaAcaoAtividadeCronograma>
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(Integer idCobrancaGrupo,
					Integer idCobrancaAcao, Integer idComando, Date dataInicial, Date dataFinal) throws ControladorException{

		Collection<CobrancaAcaoAtividadeCronograma> colecaoCobrancaAcaoAtividadeCronograma;

		try{
			colecaoCobrancaAcaoAtividadeCronograma = this.repositorioCobranca.pesquisarCobrancaAcaoAtividadeCronograma(idCobrancaGrupo,
							idCobrancaAcao, idComando, dataInicial, dataFinal);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		if(colecaoCobrancaAcaoAtividadeCronograma == null || colecaoCobrancaAcaoAtividadeCronograma.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhumresultado", null, "Comando Ação de Cobrança - Cronograma");
		}

		return colecaoCobrancaAcaoAtividadeCronograma;
	}

	/**
	 * Consultar Comando de Ação de Cobrança - Comando
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @param idLocalidade
	 * @param codigoSetorComercial
	 * @return Collection<CobrancaAcaoAtividadeComando>
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando(Integer idCobrancaGrupo, Integer idCobrancaAcao,
					Integer idComando, Date dataInicial, Date dataFinal, Integer idLocalidade, Integer codigoSetorComercial)
					throws ControladorException{

		Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando;

		try{
			colecaoCobrancaAcaoAtividadeComando = this.repositorioCobranca.pesquisarCobrancaAcaoAtividadeComando(idCobrancaGrupo,
							idCobrancaAcao, idComando, dataInicial, dataFinal, idLocalidade, codigoSetorComercial);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		if(colecaoCobrancaAcaoAtividadeComando == null || colecaoCobrancaAcaoAtividadeComando.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhumresultado", null, "Comando Ação de Cobrança - Cronograma");
		}

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * Consultar Comando Cobranca Ação Atividade Cobranca
	 * [SB0002] - Apresenta Comandos de Ação de cobrança Eventuais
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * @author Virgínia Melo
	 * @date 01/09/2008
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeCronograma obterCobrancaAcaoAtividadeCronograma(String idCobrancaAcaoAtividadeCronograma)
					throws ControladorException{

		Collection colecaoAtividadeCronogramaAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID,
						idCobrancaAcaoAtividadeCronograma));
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.PROGRAMA_COBRANCA);

		colecaoAtividadeCronogramaAcaoCobrancaComandadas = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());
		if(colecaoAtividadeCronogramaAcaoCobrancaComandadas == null || colecaoAtividadeCronogramaAcaoCobrancaComandadas.isEmpty()){
			throw new ControladorException("atencao.nao.atividade.cobranca.comandadas");
		}

		return (CobrancaAcaoAtividadeCronograma) colecaoAtividadeCronogramaAcaoCobrancaComandadas.iterator().next();
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 12/05/2006
	 *       Customização ADA
	 * @author Virgínia Melo
	 * @data 02/09/2008
	 * @author Virgínia Melo
	 * @date 11/11/2008
	 *       Alterações no [UC0326] para a v0.06
	 * @return filtroCobrancaAcaoAtividadeComando
	 * @throws ControladorException
	 */

	public FiltroCobrancaAcaoAtividadeComando construirFiltroCobrancaAcaoAtividadeEventual(String[] grupoCobranca, String[] acaoCobranca,
					String[] atividadeCobranca, String anoMesPeriodoReferenciaContasInicial, String anoMesPeriodoReferenciaContasFinal,
					String dataPeriodoComandoInicial, String dataPeriodoComandoFinal, String dataPeriodoRealizacaoComandoInicial,
					String dataPeriodoRealizacaoComandoFinal, String dataPeriodoVencimentoContasInicial,
					String dataPeriodoVencimentoContasFinal, String intervaloValorDocumentosInicial, String intervaloValorDocumentosFinal,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String intervaloQuantidadeItensDocumentosInicial, String intervaloQuantidadeItensDocumentosFinal,
					String situacaoComando, String indicadorCriterio, String idGerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String codigoSetorComercialInicial, String codigoSetorComercialFinal, String nuQuadraInicial,
					String nuQuadraFinal, String idRotaInicial, String idRotaFinal, String idCliente, String idClienteRelacaoTipo,
					String criterioCobranca, String unidadeNegocio) throws ControladorException{

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		filtroCobrancaAcaoAtividadeComando.setCampoOrderBy(FiltroCobrancaAcaoAtividadeComando.COMANDO + " DESC");

		boolean peloMenosUmParametroInformado = false;

		// Intervalo de Valor dos Documentos
		if((intervaloValorDocumentosInicial != null && !intervaloValorDocumentosInicial.equals(""))
						&& (intervaloValorDocumentosFinal != null && !intervaloValorDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			BigDecimal valorDocumentosInicial = Util.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosInicial);

			BigDecimal valorDocumentosFinal = Util.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosFinal);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeComando.VALOR_DOCUMENTOS, valorDocumentosInicial,
							valorDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade dos Documentos
		if((intervaloQuantidadeDocumentosInicial != null && !intervaloQuantidadeDocumentosInicial.equals(""))
						&& (intervaloQuantidadeDocumentosFinal != null && !intervaloQuantidadeDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeComando.QUANTIDADE_DOCUMENTOS,
							intervaloQuantidadeDocumentosInicial, intervaloQuantidadeDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade Itens dos Documentos
		if((intervaloQuantidadeItensDocumentosInicial != null && !intervaloQuantidadeItensDocumentosInicial.equals(""))
						&& (intervaloQuantidadeItensDocumentosFinal != null && !intervaloQuantidadeItensDocumentosFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeComando.QUANTIDADE_ITENS_COBRADOS,
							intervaloQuantidadeItensDocumentosInicial, intervaloQuantidadeItensDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// grupo cobrança
		if(grupoCobranca != null && grupoCobranca.length > 0){
			peloMenosUmParametroInformado = true;

			int i = 0;
			if(grupoCobranca != null){

				while(i < grupoCobranca.length){

					if(!grupoCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < grupoCobranca.length){
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO, grupoCobranca[i], ConectorOr.CONECTOR_OR,
											(grupoCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO, grupoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// açao cobrança
		if(acaoCobranca != null && acaoCobranca.length > 0){
			peloMenosUmParametroInformado = true;
			int i = 0;
			if(acaoCobranca != null){

				while(i < acaoCobranca.length){

					if(!acaoCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < acaoCobranca.length){
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO, acaoCobranca[i], ConectorOr.CONECTOR_OR,
											(acaoCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO, acaoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// atividade cobrança
		if(atividadeCobranca != null && atividadeCobranca.length > 0){
			peloMenosUmParametroInformado = true;

			int i = 0;
			if(atividadeCobranca != null){

				while(i < atividadeCobranca.length){

					if(!atividadeCobranca[i].equals("")){
						peloMenosUmParametroInformado = true;
						if(i + 1 < atividadeCobranca.length){
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE, atividadeCobranca[i],
											ConectorOr.CONECTOR_OR, (atividadeCobranca.length)));
						}else{
							filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE, atividadeCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// validar Período do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoComandoInicial, dataPeriodoComandoFinal,
						"Período do Comando Inicial", "Período do Comando Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período do Comando
		if((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial.equals(""))
						&& (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeComando.COMANDO, periodoInicial.getTime(),
							periodoFinal.getTime());

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);
		}

		// validar Período de Realização do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoRealizacaoComandoInicial, dataPeriodoRealizacaoComandoFinal,
						"Período de Realização do Comando Inicial", "Período de Realização do Comando Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if((dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial.equals(""))
						&& (dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoRealizacaoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoRealizacaoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoRealizacaoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoRealizacaoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoRealizacaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoRealizacaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(FiltroCobrancaAcaoAtividadeComando.REALIZACAO, periodoInicial.getTime(),
							periodoFinal.getTime());

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);
		}

		// validar Período de Vencimentos das Contas
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(dataPeriodoVencimentoContasInicial, dataPeriodoVencimentoContasFinal,
						"Período de Vencimentos das Contas Inicial", "Período de Vencimentos das Contas Final",
						"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if((dataPeriodoVencimentoContasInicial != null && !dataPeriodoVencimentoContasInicial.equals(""))
						&& (dataPeriodoVencimentoContasFinal != null && !dataPeriodoVencimentoContasFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoVencimentoContasInicial.substring(6, 10);
			String mesInicial = dataPeriodoVencimentoContasInicial.substring(3, 5);
			String diaInicial = dataPeriodoVencimentoContasInicial.substring(0, 2);

			String anoFinal = dataPeriodoVencimentoContasFinal.substring(6, 10);
			String mesFinal = dataPeriodoVencimentoContasFinal.substring(3, 5);
			String diaFinal = dataPeriodoVencimentoContasFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, Integer.valueOf(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (Integer.valueOf(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, Integer.valueOf(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, Integer.valueOf(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH, (Integer.valueOf(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, Integer.valueOf(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL, periodoInicial.getTime()));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL, periodoFinal.getTime()));
		}

		// validar Período de Referência das Contas
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(anoMesPeriodoReferenciaContasInicial,
						anoMesPeriodoReferenciaContasFinal, "Período de Referência das Contas Inicial",
						"Período de Referência das Contas Final", "atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if((anoMesPeriodoReferenciaContasInicial != null && !anoMesPeriodoReferenciaContasInicial.equals(""))
						&& (anoMesPeriodoReferenciaContasFinal != null && !anoMesPeriodoReferenciaContasFinal.equals(""))){

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaContasInicial.substring(3, 7);
			String mesInicial = anoMesPeriodoReferenciaContasInicial.substring(0, 2);

			String anoFinal = anoMesPeriodoReferenciaContasFinal.substring(3, 7);
			String mesFinal = anoMesPeriodoReferenciaContasFinal.substring(0, 2);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL, anoInicial + mesInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL, anoFinal + mesFinal));
		}

		// Situação do Comando
		// [SB0006] - Seleciona Comandos Eventuais por Situação do Comando
		if(situacaoComando != null && !situacaoComando.equals("")){
			peloMenosUmParametroInformado = true;
			if(situacaoComando.equals("Realizados")){
				filtroCobrancaAcaoAtividadeComando
								.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}else if(situacaoComando.equals("NaoRealizados")){
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}

		}

		// [FS0007] - Verificar situação do comando e período de realização do
		// comando
		if((situacaoComando != null && !situacaoComando.equals("") && situacaoComando.equals("NaoRealizados"))
						&& ((dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals("")) && (dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
										.equals("")))){
			throw new ControladorException("atencao.periodo_realizacao.informado.situacao_comando");
		}

		// gerencia regional
		if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
						&& !idGerenciaRegional.equals(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL, idGerenciaRegional));
		}

		// unidade negocio
		if(unidadeNegocio != null && !unidadeNegocio.equals("")
						&& !unidadeNegocio.equals(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO, unidadeNegocio));
		}

		// localidade inicial e final
		if((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
						&& (idLocalidadeInicial != null && !idLocalidadeFinal.equals(""))){

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL, idLocalidadeInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL, idLocalidadeFinal));

		}

		// setor comercial inicial e final
		if((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals(""))
						&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))){

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL, codigoSetorComercialInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL, codigoSetorComercialFinal));
		}

		// rota inicial e final
		if((nuQuadraInicial != null && !nuQuadraInicial.equals("")) && (nuQuadraFinal != null && !nuQuadraFinal.equals(""))){

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL, nuQuadraInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL, nuQuadraFinal));
		}

		// rota inicial e final
		if((idRotaInicial != null && !idRotaInicial.equals("")) && (idRotaFinal != null && !idRotaFinal.equals(""))){

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_INICIAL, idRotaInicial));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_FINAL, idRotaFinal));
		}

		// cliente e cliente relação tipo
		if(idCliente != null && !idCliente.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
		}

		if(idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO, idClienteRelacaoTipo));
		}

		// Critério de Cobrança
		// [SB0005] - Seleciona Comandos por Critérios
		if(indicadorCriterio != null && !indicadorCriterio.equals("")){
			peloMenosUmParametroInformado = true;
			if(indicadorCriterio.equals("Rota")){
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO, 1));
			}else if(indicadorCriterio.equals("Comando")){
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO, 2));
			}

		}

		// criterio de cobranca
		if(criterioCobranca != null && !criterioCobranca.equals("")){
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO, criterioCobranca));
		}

		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
		// filtroCobrancaAcaoAtividadeComando
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.SETOR_COMERCIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
		filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if(!peloMenosUmParametroInformado){
			throw new ControladorException("atencao.filtro.nenhum_parametro_informado");
		}

		return filtroCobrancaAcaoAtividadeComando;
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param localidadeID
	 * @param setorComercialCD
	 * @return
	 * @throws ControladorException
	 */
	public SetorComercial obterSetorComercialLocalidade(String localidadeID, String setorComercialCD) throws ControladorException{

		SetorComercial setorComercial = null;

		FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();

		// Adiciona o id da localidade que está no formulário para
		// compor a pesquisa.
		filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID_LOCALIDADE, localidadeID));

		// Adiciona o código do setor comercial que esta no formulário
		// para compor a pesquisa.
		filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, setorComercialCD));

		filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.INDICADORUSO,
						ConstantesSistema.INDICADOR_USO_ATIVO));

		// Retorna setorComercial
		Collection colecaoPesquisa = getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());

		if(colecaoPesquisa != null && !colecaoPesquisa.isEmpty()){
			setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return setorComercial;
	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param codigoSetorComercial
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRotaSetorComercialLocalidade(String codigoSetorComercial, String idLocalidade)
					throws ControladorException{

		FiltroRota filtroRota = new FiltroRota();

		filtroRota.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");
		filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.LOCALIDADE_ID, idLocalidade));

		filtroRota.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
		filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.SETOR_COMERCIAL_CODIGO, codigoSetorComercial));

		Collection colecaoRota = getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

		return colecaoRota;

	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param localidadeID
	 * @return
	 */
	public Localidade obterLocalidadeGerenciaRegional(String localidadeID) throws ControladorException{

		Localidade localidade = null;

		FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

		filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, localidadeID));

		// filtroLocalidade.adicionarParametro(new ParametroSimples(
		// FiltroLocalidade.ID_GERENCIA, gerenciaRegionalID));

		filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

		// Retorna localidade
		Collection colecaoPesquisa = getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

		if(colecaoPesquisa != null && !colecaoPesquisa.isEmpty()){
			localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return localidade;

	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * @param idCliente
	 * @return
	 */
	public Cliente obterCliente(String idCliente) throws ControladorException{

		Cliente cliente = null;

		FiltroCliente filtroCliente = new FiltroCliente();

		filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.ID, Integer.valueOf(idCliente)));

		Collection colecaoPesquisa = getControladorUtil().pesquisar(filtroCliente, Cliente.class.getName());

		if(colecaoPesquisa != null && !colecaoPesquisa.isEmpty()){
			cliente = (Cliente) Util.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return cliente;

	}

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Administrador
	 * @date 19/05/2006
	 * @param idCobrancaCriterio
	 * @return
	 */
	public CobrancaCriterio obterCobrancaCriterio(String idCobrancaCriterio) throws ControladorException{

		CobrancaCriterio cobrancaCriterio = null;

		FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();

		filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID, idCobrancaCriterio));

		Collection colecaoPesquisa = getControladorUtil().pesquisar(filtroCobrancaCriterio, CobrancaCriterio.class.getName());

		if(colecaoPesquisa != null && !colecaoPesquisa.isEmpty()){
			cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return cobrancaCriterio;

	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * [UC0325] - Consultar Comandos de Ação de Cobrança - Tipo Eventual
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeEventual(
					FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando) throws ControladorException{

		Collection colecaoCobrancaAcaoAtividadeComando;

		colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		if(colecaoCobrancaAcaoAtividadeComando == null || colecaoCobrancaAcaoAtividadeComando.isEmpty()){
			throw new ControladorException("atencao.pesquisa.nenhumresultado", null, "Comando Ação de Cobrança - Eventual");
		}

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * Consultar Comando Cobranca Ação Atividade Cobranca - Verificar pelo ID
	 * [SB0004] - Consultar Dados do Comando de Ação de cobrança Eventual
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando obterCobrancaAcaoAtividadeComando(String idCobrancaAcaoAtividadeComando)
					throws ControladorException{

		Collection colecaoAtividadeEventualAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
						idCobrancaAcaoAtividadeComando));
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_FINAL);
		// filtroCobrancaAcaoAtividadeComando
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.SETOR_COMERCIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
		filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.NEGOCIO_UNIDADE);
		filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.PROGRAMA_COBRANCA);

		colecaoAtividadeEventualAcaoCobrancaComandadas = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());
		if(colecaoAtividadeEventualAcaoCobrancaComandadas == null || colecaoAtividadeEventualAcaoCobrancaComandadas.isEmpty()){
			throw new ControladorException("atencao.nao.atividade.cobranca.comandadas");
		}

		return (CobrancaAcaoAtividadeComando) colecaoAtividadeEventualAcaoCobrancaComandadas.iterator().next();
	}

	/**
	 * Gerar Relção de Debitos
	 * [UC0227] - Gerar Relação de Débitos
	 * 
	 * @author Rafael Santos
	 * @date 15/06/2006
	 * @param idImovelCondominio
	 * @param idImovelPrincipal
	 * @param idNomeConta
	 * @param idSituacaoLigacaoAgua
	 * @param consumoMinimoInicialAgua
	 * @param consumoMinimoFinalAgua
	 * @param idSituacaoLigacaoEsgoto
	 * @param consumoMinimoInicialEsgoto
	 * @param consumoMinimoFinalEsgoto
	 * @param intervaloValorPercentualEsgotoInicial
	 * @param intervaloValorPercentualEsgotoFinal
	 * @param intervaloMediaMinimaImovelInicial
	 * @param intervaloMediaMinimaImovelFinal
	 * @param intervaloMediaMinimaHidrometroInicial
	 * @param intervaloMediaMinimaHidrometroFinal
	 * @param idImovelPerfil
	 * @param idPocoTipo
	 * @param idFaturamentoSituacaoTipo
	 * @param idCobrancaSituacaoTipo
	 * @param idSituacaoEspecialCobranca
	 * @param idEloAnormalidade
	 * @param areaConstruidaInicial
	 * @param areaConstruidaFinal
	 * @param idCadastroOcorrencia
	 * @param idConsumoTarifa
	 * @param idGerenciaRegional
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param setorComercialInicial
	 * @param setorComercialFinal
	 * @param quadraInicial
	 * @param quadraFinal
	 * @param loteOrigem
	 * @param loteDestno
	 * @param cep
	 * @param logradouro
	 * @param bairro
	 * @param municipio
	 * @param idTipoMedicao
	 * @param indicadorMedicao
	 * @param idSubCategoria
	 * @param idCategoria
	 * @param quantidadeEconomiasInicial
	 * @param quantidadeEconomiasFinal
	 * @param diaVencimento
	 * @param idCliente
	 * @param idClienteTipo
	 * @param idClienteRelacaoTipo
	 * @param numeroPontosInicial
	 * @param numeroPontosFinal
	 * @param numeroMoradoresInicial
	 * @param numeroMoradoresFinal
	 * @param idAreaConstruidaFaixa
	 * @return
	 * @throws ControladorException
	 */
	public Collection gerarRelacaoDebitos(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String[] tipoDebito, String valorDebitoInicial,
					String valorDebitoFinal, String qtdContasInicial, String qtdContasFinal, String referenciaFaturaInicial,
					String referenciaFaturaFinal, String vencimentoInicial, String vencimentoFinal, String qtdImoveis, String qtdMaiores,
					String indicadorOrdenacao, String idUnidadeNegocio) throws ControladorException{

		List colecaoImoveis = null;
		boolean flagFimPesquisa = false;
		final int quantidadeImovel = 500;
		int quantidadeImovelInicio = 0;

		// colecao com os dados para o relatorio
		List<GerarRelacaoDebitosHelper> colecaoGerarRelacaoDebitos = new ArrayList<GerarRelacaoDebitosHelper>();

		imovelColecao: while(!flagFimPesquisa){
			try{
				// remove primeiro as linhas do critério cobrança
				colecaoImoveis = (List) repositorioCobranca.gerarRelacaoDebitos(idImovelCondominio, idImovelPrincipal, idNomeConta,
								idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
								consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
								intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
								intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
								idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
								areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
								idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial,
								quadraFinal, loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao,
								idSubCategoria, idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento,
								idCliente, idClienteTipo, idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal,
								numeroMoradoresInicial, numeroMoradoresFinal, idAreaConstruidaFaixa, quantidadeImovelInicio,
								indicadorOrdenacao, idUnidadeNegocio);
			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			Integer numeroImovel = 0;

			// para cada imovel pega as conta, debitos, creditos e guias
			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){

				if(colecaoImoveis.size() < quantidadeImovel){
					flagFimPesquisa = true;
				}else{
					quantidadeImovelInicio = quantidadeImovelInicio + 500;
				}

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

				GerarRelacaoDebitosImovelHelper gerarRelacaoDebitosImovelHelper = null;
				GerarRelacaoDebitosHelper gerarRelacaoDebitosHelper = null;
				// imovel :
				while(iteratorColecaoImoveis.hasNext()){

					Object[] contasDadosRelatorio = (Object[]) iteratorColecaoImoveis.next();

					gerarRelacaoDebitosImovelHelper = new GerarRelacaoDebitosImovelHelper();

					gerarRelacaoDebitosHelper = new GerarRelacaoDebitosHelper();

					// id gerencia regional
					if(contasDadosRelatorio[0] != null){ // 0
						gerarRelacaoDebitosImovelHelper.setIdGerenciaRegional(((Integer) contasDadosRelatorio[0]).toString());
					}
					// nome abreviado gerencia regional
					if(contasDadosRelatorio[1] != null){ // 1
						gerarRelacaoDebitosImovelHelper.setNomeGerenciaRegional((String) contasDadosRelatorio[1]);
					}
					// id localidade
					if(contasDadosRelatorio[2] != null){ // 2
						gerarRelacaoDebitosImovelHelper.setIdLocalidade(((Integer) contasDadosRelatorio[2]).toString());
					}
					// descricao localidade
					if(contasDadosRelatorio[3] != null){ // 3
						gerarRelacaoDebitosImovelHelper.setDescricaoLocalidade((String) contasDadosRelatorio[3]);
					}
					// id imovel
					if(contasDadosRelatorio[4] != null){ // 4
						gerarRelacaoDebitosImovelHelper.setIdImovel(((Integer) contasDadosRelatorio[4]).toString());
					}
					// quantidade de economias
					if(contasDadosRelatorio[5] != null){ // 5
						gerarRelacaoDebitosImovelHelper.setQuantidadeEconomias(((Short) contasDadosRelatorio[5]).toString());
					}
					// codigo setor comercial
					if(contasDadosRelatorio[6] != null){ // 6
						gerarRelacaoDebitosImovelHelper.setCodigoSetorComercial(((Integer) contasDadosRelatorio[6]).toString());
					}
					// numero quadra
					if(contasDadosRelatorio[7] != null){ // 7
						gerarRelacaoDebitosImovelHelper.setNumeroQuadra(((Integer) contasDadosRelatorio[7]).toString());
					}
					// lote
					if(contasDadosRelatorio[8] != null){ // 8
						gerarRelacaoDebitosImovelHelper.setLote(((Short) contasDadosRelatorio[8]).toString());
					}
					// sub lote
					if(contasDadosRelatorio[9] != null){ // 9
						gerarRelacaoDebitosImovelHelper.setSubLote(((Short) contasDadosRelatorio[9]).toString());
					}
					// descricao ligacao agua situacao
					if(contasDadosRelatorio[10] != null){ // 10
						gerarRelacaoDebitosImovelHelper.setSituacaoAgua((String) contasDadosRelatorio[10]);
					}
					// descricao ligacao esgoto situacao
					if(contasDadosRelatorio[11] != null){ // 11
						gerarRelacaoDebitosImovelHelper.setSituacaoEsgoto((String) contasDadosRelatorio[11]);
					}
					// percentual
					if(contasDadosRelatorio[12] != null){ // 12
						gerarRelacaoDebitosImovelHelper.setPercentualEsgoto(Util.formatarMoedaReal((BigDecimal) contasDadosRelatorio[12]));
					}
					// data corte
					if(contasDadosRelatorio[13] != null){ // 13
						gerarRelacaoDebitosImovelHelper.setDataCorte(Util.formatarData((Date) contasDadosRelatorio[13]));
					}
					// gerencia regional - nome
					if(contasDadosRelatorio[14] != null){ // 14
						gerarRelacaoDebitosImovelHelper.setGerenciaRegional((String) contasDadosRelatorio[14]);
					}
					// nome cliente usuario
					if(contasDadosRelatorio[15] != null){ // 15
						gerarRelacaoDebitosImovelHelper.setNomeClienteUsuario((String) contasDadosRelatorio[15]);
					}
					// nome cliente resposanvel
					if(contasDadosRelatorio[16] != null){ // 16
						gerarRelacaoDebitosImovelHelper.setNomeClienteResponsavel((String) contasDadosRelatorio[16]);
					}

					// consumo Medio
					Integer consumoMedio = this.pesquisarConsumoMedioConsumoHistoricoImovel(Integer.valueOf(gerarRelacaoDebitosImovelHelper
									.getIdImovel()));
					if(consumoMedio != null){
						gerarRelacaoDebitosImovelHelper.setConsumoMediaImovel(consumoMedio.toString());
					}

					Imovel imovel = new Imovel();

					Localidade localidadeImovel = new Localidade();
					localidadeImovel.setId(Integer.valueOf(gerarRelacaoDebitosImovelHelper.getIdLocalidade()));
					SetorComercial setorComercialImovel = new SetorComercial();
					setorComercialImovel.setCodigo(Integer.valueOf(gerarRelacaoDebitosImovelHelper.getCodigoSetorComercial()).intValue());
					Quadra quadraImovel = new Quadra();
					quadraImovel.setNumeroQuadra(Integer.valueOf(gerarRelacaoDebitosImovelHelper.getNumeroQuadra()).intValue());

					imovel.setLocalidade(localidadeImovel);
					imovel.setSetorComercial(setorComercialImovel);
					imovel.setQuadra(quadraImovel);
					imovel.setLote(Short.valueOf(gerarRelacaoDebitosImovelHelper.getLote()).shortValue());
					imovel.setSubLote(Short.valueOf(gerarRelacaoDebitosImovelHelper.getSubLote()).shortValue());

					// inscricao formatada do imovel
					gerarRelacaoDebitosImovelHelper.setInscricaoImovel(imovel.getInscricaoFormatada());

					Calendar dataInicio = new GregorianCalendar();
					dataInicio.set(Calendar.YEAR, 1980);
					dataInicio.set(Calendar.MONTH, 0);
					dataInicio.set(Calendar.DAY_OF_MONTH, 1);

					/*
					 * Calendar dataFim = new GregorianCalendar(); dataFim.add(Calendar.DATE, -45);
					 */

					Calendar dataFim = new GregorianCalendar();
					dataFim.set(Calendar.YEAR, 9999);
					dataFim.set(Calendar.MONTH, 11);
					dataFim.set(Calendar.DAY_OF_MONTH, 31);

					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = obterDebitoImovelOuCliente(1,
									gerarRelacaoDebitosImovelHelper.getIdImovel(), null, null, "198001", "999912", dataInicio.getTime(),
									dataFim.getTime(), 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, ConstantesSistema.SIM,
									ConstantesSistema.SIM, ConstantesSistema.SIM);

					if(qtdImoveis != null && !qtdImoveis.equals("")){
						Integer qtdImoveisInformada = Integer.valueOf(qtdImoveis) - 1;
						if(numeroImovel.compareTo(qtdImoveisInformada) == 1){
							// flagFimPesquisa = true;
							break imovelColecao;
						}
					}

					if(qtdMaiores != null && !qtdMaiores.equals("")){
						Integer qtdMaioresInformada = Integer.valueOf(qtdMaiores) - 1;
						if(numeroImovel.compareTo(qtdMaioresInformada) == 1){
							// flagFimPesquisa = true;
							break imovelColecao;
						}
					}

					if((obterDebitoImovelOuClienteHelper.getColecaoContasValores() != null && !obterDebitoImovelOuClienteHelper
									.getColecaoContasValores().isEmpty())
									| (obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar() != null && !obterDebitoImovelOuClienteHelper
													.getColecaoCreditoARealizar().isEmpty())
									| (obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar() != null && !obterDebitoImovelOuClienteHelper
													.getColecaoDebitoACobrar().isEmpty())
									| (obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores() != null && !obterDebitoImovelOuClienteHelper
													.getColecaoGuiasPagamentoValores().isEmpty())){

						// obter endereco
						gerarRelacaoDebitosImovelHelper.setEndereco(getControladorEndereco().pesquisarEndereco(
										Integer.valueOf(gerarRelacaoDebitosImovelHelper.getIdImovel())));

						// obter categoria do imovel
						gerarRelacaoDebitosImovelHelper.setCategoriaPrincipal(getControladorImovel().obterPrincipalCategoriaImovel(
										Integer.valueOf(gerarRelacaoDebitosImovelHelper.getIdImovel())).getDescricaoAbreviada());

						// /////////////////////////////////////////////////////////////

						// total de conta
						BigDecimal totalContas = BigDecimal.ZERO;
						// total conta atualizado
						BigDecimal totalContasAtualizado = BigDecimal.ZERO;

						// valor total juros
						BigDecimal totalJuros = BigDecimal.ZERO;
						// valor total multa
						BigDecimal totalMulta = BigDecimal.ZERO;
						// valor total atualizacao monetaria
						BigDecimal totalAtualizacaoMonetaria = BigDecimal.ZERO;
						// valor totoal geral atualizado
						BigDecimal totalDebito = BigDecimal.ZERO;
						// valor total acrescimo por impontualidade
						BigDecimal totalAcrescimoImpontualidade = BigDecimal.ZERO;

						boolean verificarQtdConta = true;
						boolean verificarValorDebito = true;
						boolean verificarReferencia = true;
						boolean verificarVencimento = true;

						if((qtdContasInicial != null && !qtdContasInicial.equals(""))
										&& (qtdContasFinal != null && !qtdContasFinal.equals(""))){
							Integer qtdContaInicial = Integer.valueOf(qtdContasInicial);
							Integer qtdContaFinal = Integer.valueOf(qtdContasFinal);
							if(obterDebitoImovelOuClienteHelper.getColecaoContasValores() != null
											&& !obterDebitoImovelOuClienteHelper.getColecaoContasValores().isEmpty()){
								Integer tamanhoColecaoConta = obterDebitoImovelOuClienteHelper.getColecaoContasValores().size();
								if(tamanhoColecaoConta.compareTo(qtdContaInicial) != ConstantesSistema.INVALIDO_ID
												&& tamanhoColecaoConta.compareTo(qtdContaFinal) != 1){
									verificarQtdConta = true;
								}else{
									verificarQtdConta = false;
								}
							}else if(!qtdContaInicial.equals(0)){
								verificarQtdConta = false;
							}
						}else{
							verificarQtdConta = true;
						}

						Collection<ContaValoresHelper> colecaoContasHelper = new ArrayList();
						if(obterDebitoImovelOuClienteHelper.getColecaoContasValores() != null
										&& !obterDebitoImovelOuClienteHelper.getColecaoContasValores().isEmpty()){
							Iterator iteratorColecaoContasValores = obterDebitoImovelOuClienteHelper.getColecaoContasValores().iterator();
							while(iteratorColecaoContasValores.hasNext()){
								ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorColecaoContasValores.next();

								if(referenciaFaturaInicial != null && !referenciaFaturaInicial.equals("") && referenciaFaturaFinal != null
												&& !referenciaFaturaFinal.equals("")){

									Integer referencia = contaValoresHelper.getConta().getReferencia();
									Integer referenciaInicial = Util.formatarMesAnoComBarraParaAnoMes(referenciaFaturaInicial);
									Integer referenciaFinal = Util.formatarMesAnoComBarraParaAnoMes(referenciaFaturaFinal);
									if(referencia.compareTo(referenciaInicial) != ConstantesSistema.INVALIDO_ID
													&& referencia.compareTo(referenciaFinal) != 1){
										verificarReferencia = true;
									}else{
										verificarReferencia = false;
									}
								}else{
									verificarReferencia = true;
								}

								if(vencimentoInicial != null && !vencimentoInicial.equals("") && vencimentoFinal != null
												&& !vencimentoFinal.equals("")){

									Date vencimento = contaValoresHelper.getConta().getDataVencimentoConta();
									Date venInicial = Util.converteStringParaDate(vencimentoInicial);
									Date venFinal = Util.converteStringParaDate(vencimentoFinal);
									if(vencimento.compareTo(venInicial) != ConstantesSistema.INVALIDO_ID
													&& vencimento.compareTo(venFinal) != 1){
										verificarVencimento = true;
									}else{
										verificarVencimento = false;
									}
								}else{
									verificarVencimento = true;
								}

								if(verificarReferencia && verificarVencimento){

									if(tipoDebito != null && tipoDebito.length > 0){
										achou: for(int i = 0; i < tipoDebito.length; i++){
											if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
															&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.CONTA)){
												totalContas = totalContas.add(contaValoresHelper.getConta().getValorTotal());
												totalContasAtualizado = totalContasAtualizado.add(contaValoresHelper.getConta()
																.getValorTotal());
												totalContasAtualizado = totalContasAtualizado.add(contaValoresHelper
																.getValorTotalContaValores());
												break achou;
											}
										}
									}else{
										totalContas = totalContas.add(contaValoresHelper.getConta().getValorTotal());
										totalContasAtualizado = totalContasAtualizado.add(contaValoresHelper.getConta().getValorTotal());
										totalContasAtualizado = totalContasAtualizado.add(contaValoresHelper.getValorTotalContaValores());
									}

									if(tipoDebito != null && tipoDebito.length > 0){
										achou: for(int i = 0; i < tipoDebito.length; i++){
											if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
															&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.ACRESCIMO)){
												totalJuros = totalJuros.add(contaValoresHelper.getValorJurosMora());
												totalMulta = totalMulta.add(contaValoresHelper.getValorMulta());
												totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(contaValoresHelper
																.getValorAtualizacaoMonetaria());
												break achou;
											}
										}
									}else{
										totalJuros = totalJuros.add(contaValoresHelper.getValorJurosMora());
										totalMulta = totalMulta.add(contaValoresHelper.getValorMulta());
										totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(contaValoresHelper
														.getValorAtualizacaoMonetaria());
									}

									colecaoContasHelper.add(contaValoresHelper);
								}

							}
						}

						if(tipoDebito != null && tipoDebito.length > 0){
							achou: for(int i = 0; i < tipoDebito.length; i++){
								if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
												&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.CONTA)){
									// colecao de contas
									gerarRelacaoDebitosHelper.setColecaoContas(colecaoContasHelper);
									break achou;
								}
							}
						}else{
							// colecao de contas
							gerarRelacaoDebitosHelper.setColecaoContas(colecaoContasHelper);
						}

						// somando com o total de contas
						totalDebito = totalDebito.add(totalContas);

						BigDecimal totalDebitoACobrar = BigDecimal.ZERO;

						Collection colecao = new ArrayList();

						if(tipoDebito != null && tipoDebito.length > 0){
							achou: for(int i = 0; i < tipoDebito.length; i++){
								if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
												&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.DEBITO_A_COBRAR)){
									// debitos a cobrar
									if(obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar() != null
													&& !obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar().isEmpty()){

										Iterator iteratorColecaoDebitoACobrar = obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar()
														.iterator();
										while(iteratorColecaoDebitoACobrar.hasNext()){
											DebitoACobrar debitoACobrar = (DebitoACobrar) iteratorColecaoDebitoACobrar.next();

											totalDebitoACobrar = totalDebitoACobrar.add(debitoACobrar.getValorTotal());

											colecao.add(debitoACobrar);
										}

									}
									break achou;
								}
							}
						}else{
							// debitos a cobrar
							if(obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar() != null
											&& !obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar().isEmpty()){

								Iterator iteratorColecaoDebitoACobrar = obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar()
												.iterator();
								while(iteratorColecaoDebitoACobrar.hasNext()){
									DebitoACobrar debitoACobrar = (DebitoACobrar) iteratorColecaoDebitoACobrar.next();

									totalDebitoACobrar = totalDebitoACobrar.add(debitoACobrar.getValorTotal());

									colecao.add(debitoACobrar);
								}

							}
						}

						// colecao.addAll(obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar());

						// somando com o total de debitos a cobrar
						totalDebito = totalDebito.add(totalDebitoACobrar);

						BigDecimal totalCreditoARealizar = BigDecimal.ZERO;

						if(tipoDebito != null && tipoDebito.length > 0){
							achou: for(int i = 0; i < tipoDebito.length; i++){
								if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
												&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.CREDITO_A_REALIZAR)){
									// creditos a realizar
									if(obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar() != null
													&& !obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar().isEmpty()){

										Iterator iteratorColecaoCreditoARealizar = obterDebitoImovelOuClienteHelper
														.getColecaoCreditoARealizar().iterator();
										while(iteratorColecaoCreditoARealizar.hasNext()){
											CreditoARealizar creditoARealizar = (CreditoARealizar) iteratorColecaoCreditoARealizar.next();

											totalCreditoARealizar = totalCreditoARealizar.add(creditoARealizar.getValorTotal());

											colecao.add(creditoARealizar);
										}

									}
									break achou;
								}
							}
						}else{
							// creditos a realizar
							if(obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar() != null
											&& !obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar().isEmpty()){

								Iterator iteratorColecaoCreditoARealizar = obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar()
												.iterator();
								while(iteratorColecaoCreditoARealizar.hasNext()){
									CreditoARealizar creditoARealizar = (CreditoARealizar) iteratorColecaoCreditoARealizar.next();

									totalCreditoARealizar = totalCreditoARealizar.add(creditoARealizar.getValorTotal());

									colecao.add(creditoARealizar);
								}

							}
						}

						// colecao de debitos a cobrar e creditos a realizar
						gerarRelacaoDebitosHelper.setColecaoDebitosACobrarCreditoARealizar(colecao);

						if(tipoDebito != null && tipoDebito.length > 0){
							achou: for(int i = 0; i < tipoDebito.length; i++){
								if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
												&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.CONTA)){
									// colecao guias de pagamento
									gerarRelacaoDebitosHelper.setColecaoGuiasPagamento(obterDebitoImovelOuClienteHelper
													.getColecaoGuiasPagamentoValores());
									break achou;
								}
							}
						}else{
							// colecao guias de pagamento
							gerarRelacaoDebitosHelper.setColecaoGuiasPagamento(obterDebitoImovelOuClienteHelper
											.getColecaoGuiasPagamentoValores());
						}

						BigDecimal totalGuiasPagamentos = BigDecimal.ZERO;
						// guias de pagamentos
						if(tipoDebito != null && tipoDebito.length > 0){
							achou: for(int i = 0; i < tipoDebito.length; i++){
								if(Integer.valueOf(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
												&& Integer.valueOf(tipoDebito[i]).equals(ConstantesSistema.GUIA_PAGAMENTO)){
									if(obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores() != null
													&& !obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores().isEmpty()){

										Iterator iteratorColecaoGuiasPagamentos = obterDebitoImovelOuClienteHelper
														.getColecaoGuiasPagamentoValores().iterator();
										while(iteratorColecaoGuiasPagamentos.hasNext()){
											GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) iteratorColecaoGuiasPagamentos
															.next();

											totalGuiasPagamentos = totalGuiasPagamentos.add(guiaPagamentoValoresHelper
															.getValorTotalPrestacao().setScale(Parcelamento.CASAS_DECIMAIS,
																			Parcelamento.TIPO_ARREDONDAMENTO));
											totalJuros = totalJuros.add(guiaPagamentoValoresHelper.getValorJurosMora());
											totalMulta = totalMulta.add(guiaPagamentoValoresHelper.getValorMulta());
											totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
															.getValorAtualizacaoMonetaria());
										}
									}
									break achou;
								}
							}
						}else{
							if(obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores() != null
											&& !obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores().isEmpty()){

								Iterator iteratorColecaoGuiasPagamentos = obterDebitoImovelOuClienteHelper
												.getColecaoGuiasPagamentoValores().iterator();
								while(iteratorColecaoGuiasPagamentos.hasNext()){
									GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) iteratorColecaoGuiasPagamentos
													.next();

									if(guiaPagamentoValoresHelper.getGuiaPagamentoPrestacoes() != null){
										totalGuiasPagamentos = totalGuiasPagamentos
														.add(guiaPagamentoValoresHelper.getValorTotalPrestacao());
									}

									if(guiaPagamentoValoresHelper.getValorJurosMora() != null){
										totalJuros = totalJuros.add(guiaPagamentoValoresHelper.getValorJurosMora());
									}

									if(guiaPagamentoValoresHelper.getValorMulta() != null){
										totalMulta = totalMulta.add(guiaPagamentoValoresHelper.getValorMulta());
									}

									if(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null){
										totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
														.getValorAtualizacaoMonetaria());
									}
								}
							}
						}

						// somando com o totoal de guias
						totalDebito = totalDebito.add(totalGuiasPagamentos);
						// somas todas as multas, juros, acrescimos
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade.add(totalJuros);
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade.add(totalMulta);
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade.add(totalAtualizacaoMonetaria);

						totalDebito = totalDebito.add(totalCreditoARealizar);
						BigDecimal totalGeralAtualizado = BigDecimal.ZERO;
						totalGeralAtualizado = totalGeralAtualizado.add(totalDebito);
						totalGeralAtualizado = totalGeralAtualizado.add(totalAcrescimoImpontualidade);
						totalGeralAtualizado = totalGeralAtualizado.setScale(2, BigDecimal.ROUND_HALF_DOWN);

						// adicionou os dados do imovel
						gerarRelacaoDebitosHelper.setGerarRelacaoDebitosImovelHelper(gerarRelacaoDebitosImovelHelper);
						// conta
						gerarRelacaoDebitosHelper.setTotalContas(totalContas);
						gerarRelacaoDebitosHelper.setTotalContaAtualizado(totalContasAtualizado);
						// credito
						gerarRelacaoDebitosHelper.setTotalCreditoARealizar(totalCreditoARealizar);
						// debito
						gerarRelacaoDebitosHelper.setTotalDebitosACobrar(totalDebitoACobrar);
						// guia
						gerarRelacaoDebitosHelper.setTotalGuiasPagamento(totalGuiasPagamentos);
						// acrescimo
						gerarRelacaoDebitosHelper.setTotalMulta(totalMulta);
						gerarRelacaoDebitosHelper.setTotalJuros(totalJuros);
						gerarRelacaoDebitosHelper.setTotalAtualizacaoMonetaria(totalAtualizacaoMonetaria);
						// total
						gerarRelacaoDebitosHelper.setTotalGeralAtualizado(totalGeralAtualizado);

						if((valorDebitoInicial != null && !valorDebitoInicial.equals(""))
										&& (valorDebitoFinal != null && !valorDebitoFinal.equals(""))){
							BigDecimal debitoInicial = Util.formatarMoedaRealparaBigDecimal(valorDebitoInicial);
							BigDecimal debitoFinal = Util.formatarMoedaRealparaBigDecimal(valorDebitoFinal);
							if(totalGeralAtualizado.compareTo(debitoInicial) != ConstantesSistema.INVALIDO_ID
											&& totalGeralAtualizado.compareTo(debitoFinal) != 1){
								verificarValorDebito = true;
							}else{
								verificarValorDebito = false;
							}
						}else{
							verificarValorDebito = true;
						}

						if(verificarValorDebito && verificarQtdConta){
							numeroImovel = numeroImovel + 1;
							// adiciona o helper
							colecaoGerarRelacaoDebitos.add(gerarRelacaoDebitosHelper);
						}else{
							gerarRelacaoDebitosHelper = null;
						}

					}// fim do if de pesquisasr debitos
				}// fim while
			}else{// fim if
				flagFimPesquisa = true;
			}

		}

		// Ordernação

		// Ordenar por mais de um campo
		if(indicadorOrdenacao.equals("4")){
			List camposOrdenados = new ArrayList();
			camposOrdenados.add(new BeanComparator("totalGeralAtualizado"));

			ComparatorChain esquemaOrdenacao = new ComparatorChain(camposOrdenados);
			Collections.sort((List) colecaoGerarRelacaoDebitos, esquemaOrdenacao);
			Collections.reverse(colecaoGerarRelacaoDebitos);
		}

		
		return colecaoGerarRelacaoDebitos;
	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	protected ControladorEnderecoLocal getControladorEndereco(){

		ControladorEnderecoLocalHome localHome = null;
		ControladorEnderecoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorEnderecoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ENDERECO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * [UC0349] Emitir Documento de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @data 26/05/2006
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobranca(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		while(!flagFimPesquisa){
			// map que armazena o sequencial e o numero da conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try{

				colecaoCobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca, quantidadeCobrancaDocumentoInicio);
				LOGGER.info("************ QTD DE COBRANCA DOCUMENTO: " + colecaoCobrancaDocumento.size());

			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){

				if(colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if(colecaoCobrancaDocumento.size() % 2 == 0){
					metadeColecao = colecaoCobrancaDocumento.size() / 2;
				}else{
					metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoCobrancaDocumento);

				if(mapCobrancaDocumentoOrdenada != null){
					int countOrdem = 0;

					while(countOrdem < mapCobrancaDocumentoOrdenada.size()){
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada.get(countOrdem);

						Iterator iteratorCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();

						while(iteratorCobrancaDocumento.hasNext()){

							CobrancaDocumento cobrancaDocumento = null;

							int situacao = 0;

							cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;
							Iterator iteratorColecaoCobrancaDocumento = colecaoCobrancaDocumento.iterator();

							/*
							 * Estes objetos auxiliarão na formatação da inscrição que será composta
							 * por informações do documento de cobrança e do
							 * imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;

							/*
							 * Objeto que será utilizado para armazenar as informações do documento
							 * de cobrança de acordo com o layout definido no
							 * caso de uso
							 */

							sequencialImpressao++;

							while(situacao < 2){
								if(situacao == 0){
									situacao = 1;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);

								}else{
									cobrancaDocumento = (CobrancaDocumento) mapCobrancaoDocumentoDivididas.get(cobrancaDocumento);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);
								}

								if(cobrancaDocumento != null){

									try{

										nomeCliente = repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel()
														.getId());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
														.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									}catch(ErroRepositorioException ex){
										ex.printStackTrace();
										throw new ControladorException("erro.sistema", ex);
									}

									if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){

										// Início do processo de geração do arquivo txt

										// LINHA 01 ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 57));

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getLocalidade().getDescricao(),
														30));

										cobrancaDocumentoTxt.append(Util.completaString("", 63));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 02 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(cobrancaDocumento.getNumeroQuadra());
										setorComercialInscricao.setCodigo(cobrancaDocumento.getCodigoSetorComercial());
										inscricao.setLocalidade(cobrancaDocumento.getLocalidade());
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(cobrancaDocumento.getImovel().getLote());
										inscricao.setSubLote(cobrancaDocumento.getImovel().getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util.completaString("", 65));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 03 ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 69));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util.retornaMatriculaImovelFormatada(cobrancaDocumento
														.getImovel().getId());

										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(matriculaImovelFormatada, 10));
										cobrancaDocumentoTxt.append(Util.completaString("", 71));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 04 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getImovel()
														.getEnderecoFormatadoAbreviado(), 72));
										cobrancaDocumentoTxt.append(Util.completaString("", 77));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 05 ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 66));

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento.getQuadra()
														.getRota().getCobrancaGrupo().getId().toString(), 2));

										cobrancaDocumentoTxt.append(" ");

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														"" + cobrancaDocumento.getNumeroSequenciaDocumento(), 9));
										cobrancaDocumentoTxt.append(Util.completaString("", 72));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 06 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Código da situação da ligação de água
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento.getImovel()
														.getLigacaoAguaSituacao().getId().toString(), 1));

										cobrancaDocumentoTxt.append(Util.completaString("", 2));

										// Código da situação da ligação de esgoto
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento.getImovel()
														.getLigacaoEsgotoSituacao().getId().toString(), 1));

										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										/*
										 * Quantidades de economias por categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Collection colecaoCategorias = this.getControladorImovel().obterQuantidadeEconomiasCategoria(
														cobrancaDocumento.getImovel());
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if(colecaoCategorias != null && !colecaoCategorias.isEmpty()){
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;

											while(iteratorColecaoCategorias.hasNext()){
												categoria = (Categoria) iteratorColecaoCategorias.next();

												if(categoria.getId().equals(Categoria.RESIDENCIAL)){
													qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.COMERCIAL)){
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.PUBLICO)){
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if(!qtdResidencial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Comercial
										if(!qtdComercial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 8));

										// Industrial
										if(!qtdIndustrial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Público
										if(!qtdPublico.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 11));

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getImovelPerfil().getDescricao(),
														8));

										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										// Data de Emissão
										if(cobrancaDocumento.getEmissao() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getEmissao()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 4));

										// Data de Validade
										if(cobrancaDocumento.getDataValidade() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getDataValidade()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 60));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 07 ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										// Selecionar os itens do documento de cobrança
										// correspondentes a conta e ordenar por ano/mês de
										// referência da conta
										if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){

											int countImpressao = colecaoCobrancaDocumentoItem.size() - 26;

											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											int contRegistros = 0;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											cobrancaDocumentoTxt.append(Util.completaString("", 3));

											/*
											 * Caso a quantidade de itens selecionados seja superior
											 * a 28 [SB0001 - Calcular Valor e Data de Vencimento
											 * Anterior]
											 * Caso contrário: Dados do primeiro e segundo itens
											 * selecionados
											 */
											if(colecaoCobrancaDocumentoItem.size() > 28){

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
																.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 28);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt.append("DEBTO.ATE");

												cobrancaDocumentoTxt.append(Util.completaString("", 5));

												// Data de Vencimento anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
																.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt.append(" ");

												// Valor anterior retornado pelo [SB0001]
												cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util
																.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																				.getValorAnterior()), 16));

												cobrancaDocumentoTxt.append(Util.completaString("", 5));

												/*
												 * Dados do primeiro ítem que não foi considerado
												 * anterior:
												 */

												// Mês/Ano de referência da conta
												cobrancaDocumentoTxt.append(Util.completaString(
																Util.formatarAnoMesParaMesAno(calcularValorDataVencimentoAnteriorHelper
																				.getCobrancaDocumentoItemNaoAnterior().getContaGeral()
																				.getConta().getReferencia()), 9));

												cobrancaDocumentoTxt.append(Util.completaString("", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
																.getCobrancaDocumentoItemNaoAnterior().getContaGeral().getConta()
																.getDataVencimentoConta()));

												cobrancaDocumentoTxt.append(" ");

												// Valor do item
												cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util
																.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																				.getCobrancaDocumentoItemNaoAnterior()
																				.getValorItemCobrado()), 16));

												cobrancaDocumentoTxt.append(Util.completaString("", 60));

											}else{

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												contRegistros = 0;
												cobrancaDocumentoItem = null;

												while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
																	.next();

													if(contRegistros == 2){
														break;
													}

													// Mês/Ano de referência da conta
													cobrancaDocumentoTxt.append(Util.completaString(
																	Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																					.getConta().getReferencia()), 9));

													cobrancaDocumentoTxt.append(Util.completaString("", 5));

													// Data de vencimento da conta
													cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																	.getConta().getDataVencimentoConta()));

													cobrancaDocumentoTxt.append(" ");

													// Valor do item
													cobrancaDocumentoTxt
																	.append(Util.completaStringComEspacoAEsquerda(Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																									.getValorItemCobrado()), 16));

													cobrancaDocumentoTxt.append(Util.completaString("", 5));

													contRegistros++;
												}

												if(contRegistros < 2){
													cobrancaDocumentoTxt.append(Util.completaString("", 101));
												}else{
													cobrancaDocumentoTxt.append(Util.completaString("", 55));
												}

											}

											cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

											// LINHA 08 ==================================

											/*
											 * Canal ("") Fonte ("1")
											 */
											if(countImpressao <= 0){
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												contRegistros = 0;
												cobrancaDocumentoItem = null;

												while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
																	.next();

													if(contRegistros >= 2){

														if(contRegistros % 2 == 0){
															cobrancaDocumentoTxt.append(" ");
															cobrancaDocumentoTxt.append("1");
															cobrancaDocumentoTxt.append(Util.completaString("", 3));
														}

														// Mês/Ano de referência da conta
														cobrancaDocumentoTxt.append(Util.completaString(
																		Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																						.getConta().getReferencia()), 9));

														cobrancaDocumentoTxt.append(Util.completaString("", 5));

														// Data de vencimento da conta
														cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																		.getConta().getDataVencimentoConta()));

														cobrancaDocumentoTxt.append(" ");

														// Valor do item
														cobrancaDocumentoTxt
																		.append(Util.completaStringComEspacoAEsquerda(Util
																						.formatarMoedaReal(cobrancaDocumentoItem
																										.getValorItemCobrado()), 16));

														cobrancaDocumentoTxt.append(Util.completaString("", 5));

														if(contRegistros % 2 != 0){
															cobrancaDocumentoTxt.append(Util.completaString("", 55));
															cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
														}
													}

													contRegistros++;
												}
											}else{
												while(countImpressao < colecaoCobrancaDocumentoItem.size()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
																	.get(countImpressao);

													if(contRegistros % 2 == 0){
														cobrancaDocumentoTxt.append(" ");
														cobrancaDocumentoTxt.append("1");
														cobrancaDocumentoTxt.append(Util.completaString("", 3));
													}

													// Mês/Ano de referência da conta
													cobrancaDocumentoTxt.append(Util.completaString(
																	Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																					.getConta().getReferencia()), 9));

													cobrancaDocumentoTxt.append(Util.completaString("", 5));

													// Data de vencimento da conta
													cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																	.getConta().getDataVencimentoConta()));

													cobrancaDocumentoTxt.append(" ");

													// Valor do item
													cobrancaDocumentoTxt
																	.append(Util.completaStringComEspacoAEsquerda(Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																									.getValorItemCobrado()), 16));

													cobrancaDocumentoTxt.append(Util.completaString("", 5));

													if(contRegistros % 2 != 0){
														cobrancaDocumentoTxt.append(Util.completaString("", 55));
														cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
													}

													countImpressao++;
													contRegistros++;
												}
											}

											if(contRegistros > 2){
												if(contRegistros % 2 != 0){
													cobrancaDocumentoTxt.append(Util.completaString("", 101));
													cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
												}
											}
										}

										// LINHA 09 ==================================

										/*
										 * Canal ("1") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 150));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 10 ==================================

										/*
										 * Canal ("0") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 61));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(cobrancaDocumento.getValorDocumento()), 16));
										cobrancaDocumentoTxt.append(Util.completaString("", 73));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 11 ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR- ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento.getQuadra()
														.getRota().getCobrancaGrupo().getId().toString(), 2));

										cobrancaDocumentoTxt.append(Util.completaString("", 2));

										// Código e descrição da empresa
										if(cobrancaDocumento.getEmpresa() != null){
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
															.getEmpresa().getId().toString(), 2));
											cobrancaDocumentoTxt.append("- ");
											cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getEmpresa()
															.getDescricaoAbreviada(), 10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 14));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 11));

										// Sigla e descriçao da gerência regional
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getLocalidade()
														.getGerenciaRegional().getNomeAbreviado(), 3));
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getLocalidade()
														.getGerenciaRegional().getNome(), 8));

										cobrancaDocumentoTxt.append(Util.completaString("", 25));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 9));
										cobrancaDocumentoTxt.append(Util.completaString("", 70));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 12 ==================================

										/*
										 * Canal ("") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 150));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 13 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 18));
										String representacaoNumericaCodBarra = "";

										// Obtém a representação numérica do códigode barra
										representacaoNumericaCodBarra = this.getControladorArrecadacao()
														.obterRepresentacaoNumericaCodigoBarra(5, cobrancaDocumento.getValorDocumento(),
																		cobrancaDocumento.getLocalidade().getId(),
																		cobrancaDocumento.getImovel().getId(), null, null, null, null,
																		String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
																		cobrancaDocumento.getDocumentoTipo().getId(), null, null, null,
																		null, null, null);

										// Formata a representação númerica do código de barras
										String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11)
														+ " " + representacaoNumericaCodBarra.substring(11, 12) + " "
														+ representacaoNumericaCodBarra.substring(12, 23) + " "
														+ representacaoNumericaCodBarra.substring(23, 24) + " "
														+ representacaoNumericaCodBarra.substring(24, 35) + " "
														+ representacaoNumericaCodBarra.substring(35, 36) + " "
														+ representacaoNumericaCodBarra.substring(36, 47) + " "
														+ representacaoNumericaCodBarra.substring(47, 48);

										cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);
										cobrancaDocumentoTxt.append(Util.completaString("", 77));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 14 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 150));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 15 ==================================

										/*
										 * Canal ("") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 150));
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 16 ==================================

										/*
										 * Canal ("-") Fonte ("3")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("3");

										// Cria o objeto para gerar o código de barras no padrão
										// intercalado 2 de 5
										Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

										// Recupera a representação númerica do código de barras sem
										// os dígitos verificadores
										String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra.substring(0,
														11)
														+ representacaoNumericaCodBarra.substring(12, 23)
														+ representacaoNumericaCodBarra.substring(24, 35)
														+ representacaoNumericaCodBarra.substring(36, 47);

										cobrancaDocumentoTxt.append(Util.completaString("", 21));

										cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5
														.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

										cobrancaDocumentoTxt.append(Util.completaString("", 17));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 17 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 14));

										// Data de Validade
										if(cobrancaDocumento.getDataValidade() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getDataValidade()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 105));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 18 ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util.completaString("", 50));

										// Matrícula do imóvel
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(matriculaImovelFormatada, 10));

										cobrancaDocumentoTxt.append(Util.completaString("", 7));

										// Sequencial do documento de cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														"" + cobrancaDocumento.getNumeroSequenciaDocumento(), 9));

										cobrancaDocumentoTxt.append(Util.completaString("", 74));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 19 ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 150));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 20 ==================================

										/*
										 * Canal ("0") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util.completaString("", 61));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(cobrancaDocumento.getValorDocumento()), 16));

										cobrancaDocumentoTxt.append(Util.completaString("", 73));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 21 ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 150));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 22==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(" ");

										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR- ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento.getQuadra()
														.getRota().getCobrancaGrupo().getId().toString(), 2));

										cobrancaDocumentoTxt.append(Util.completaString("", 64));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 9));

										cobrancaDocumentoTxt.append(Util.completaString("", 70));

										if(iteratorColecaoCobrancaDocumento.hasNext()){
											cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
										}

									}

									// adiciona o id da conta e o sequencial no para serem
									// atualizados
									mapAtualizaSequencial.put(cobrancaDocumento.getId(), sequencialImpressao);

									colecaoCobrancaDocumentoItem = null;
								}

							}// fim do laço que verifica as 2 contas

						}// fim laço while do iterator do objeto helper
						countOrdem++;
						mapCobrancaoDocumentoDivididas = null;
					}
				}
			}else{
				flagFimPesquisa = true;
			}
			try{
				repositorioCobranca.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();
		String nomeZip = null;
		if(idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "AVISO_CORTE_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");

			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");

			}
		}else if(idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE_A_REVELIA)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "AVISO_CORTE_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");

			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");

			}
		}

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try{

			LOGGER.info("************ INICO DA CRIACAO DO ARQUIVO ************");

			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				cobrancaDocumentoTxt.append("\u0004");

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			// LOGGER.info("************ FIM DA CRIACAO DO ARQUIVO ************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0349] Emitir Documento de Cobrança
	 * Calcular valor e Data de vencimento anterior
	 * [SB0001] - Calcular Valor e Data de Vencimento Anterior
	 * 
	 * @author Raphael Rossiter, Vivianne Sousa
	 * @data 30/05/2006, 14/09/2006
	 * @param Collection
	 *            <CobrancaDocumentoItem>
	 * @return CalcularValorDataVencimentoAnteriorHelper
	 */
	public CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnterior(
					Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem, int qtdMaxItens) throws ControladorException{

		CalcularValorDataVencimentoAnteriorHelper retorno = new CalcularValorDataVencimentoAnteriorHelper();

		/*
		 * Calcular a quantidade de itens anteriores = (quantidade de itens selecionados -
		 * qtdMaxItens) + 1
		 */
		int qtdItensAnteriores = (colecaoCobrancaDocumentoItem.size() - qtdMaxItens) + 1;

		/*
		 * Calcular o valor anterior que é o somatório do valor dos itens selecionados
		 * (CDIT_VLITEMCOBRADO) do primeiro item até o item com sequencial
		 * igual a quantidade itens anteriores
		 */
		BigDecimal vlAnterior = BigDecimal.ZERO;
		BigDecimal vlAnteriorAcrescimos = BigDecimal.ZERO;
		Date dataVencimentoAnterior = null;
		int sequencia = 0;
		Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
		CobrancaDocumentoItem cobrancaDocumentoItem = null;
		CobrancaDocumentoItem cobrancaDocumentoItemNaoAnterior = null;

		while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
			cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

			if(cobrancaDocumentoItem.getValorItemCobrado() != null){
				vlAnterior = vlAnterior.add(cobrancaDocumentoItem.getValorItemCobrado());
			}
			if(cobrancaDocumentoItem.getValorAcrescimos() != null){
				vlAnteriorAcrescimos = vlAnteriorAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());
			}
			sequencia++;

			if(sequencia == qtdItensAnteriores){

				/*
				 * Atribuir à date de vencimento anterior o vencimento da conta referente ao item
				 * coma sequência igual a quantidade de itens
				 * anteriores
				 */
				dataVencimentoAnterior = cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta();
				cobrancaDocumentoItemNaoAnterior = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();
				break;
			}

		}

		retorno.setValorAnterior(vlAnterior);
		retorno.setDataVencimentoAnterior(dataVencimentoAnterior);
		retorno.setCobrancaDocumentoItemNaoAnterior(cobrancaDocumentoItemNaoAnterior);
		retorno.setValorAcrescimosAnterior(vlAnteriorAcrescimos);

		return retorno;
	}

	/**
	 * Retorna o count do resultado da pesquisa de Cobrança Cronograma
	 * 
	 * @author Flávio Leonardo
	 * @date 14/06/2006
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarCobrancaCronogramaCount(Filtro filtro) throws ControladorException{

		Integer totalRegistros = null;
		try{
			totalRegistros = repositorioCobranca.pesquisarCobrancaCronogramaCount(filtro);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return totalRegistros;
	}

	/**
	 * Consultar Relação de Debitos do Imovel Consulta o Consumo Medio do Imovel
	 * [UC0227] - Gerar Relção de Débitos
	 * 
	 * @author Rafael Santos
	 * @date 15/06/2006
	 * @param imovelId
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarConsumoMedioConsumoHistoricoImovel(Integer imovelId) throws ControladorException{

		Integer consumoMedio = null;
		try{
			consumoMedio = repositorioCobranca.pesquisarConsumoMedioConsumoHistoricoImovel(imovelId);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return consumoMedio;

	}

	/**
	 * Gerar Relatório de Critério de Cobrança
	 * Pesquisa as linhas de critério de cobrança através do id do critério de cobrança
	 * 
	 * @author Rafael Corrêa
	 * @data 09/08/2006
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection pesquisarCobrancaCriterioLinha(Integer idCriterioCobranca) throws ControladorException{

		Collection retorno = new ArrayList();
		try{
			Collection colecaoCobrancaCriterioLinha = repositorioCobranca.pesquisarCobrancaCriterioLinha(idCriterioCobranca);

			if(colecaoCobrancaCriterioLinha != null && !colecaoCobrancaCriterioLinha.isEmpty()){
				Iterator colecaoCobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha.iterator();

				Object[] objetoCriterioCobrancaLinha = null;

				while(colecaoCobrancaCriterioLinhaIterator.hasNext()){
					objetoCriterioCobrancaLinha = (Object[]) colecaoCobrancaCriterioLinhaIterator.next();

					CobrancaCriterioLinha cobrancaCriterioLinha = new CobrancaCriterioLinha();

					// Imóvel Perfil
					if(objetoCriterioCobrancaLinha[0] != null){
						ImovelPerfil imovelPerfil = new ImovelPerfil();
						imovelPerfil.setDescricao((String) objetoCriterioCobrancaLinha[0]);
						cobrancaCriterioLinha.setImovelPerfil(imovelPerfil);
					}

					// Categoria
					if(objetoCriterioCobrancaLinha[1] != null){
						Categoria categoria = new Categoria();
						categoria.setDescricao((String) objetoCriterioCobrancaLinha[1]);
						cobrancaCriterioLinha.setCategoria(categoria);
					}

					// Valor Mínimo Débito
					if(objetoCriterioCobrancaLinha[2] != null){
						cobrancaCriterioLinha.setValorMinimoDebito((BigDecimal) objetoCriterioCobrancaLinha[2]);
					}

					// Valor Máximo Débito
					if(objetoCriterioCobrancaLinha[3] != null){
						cobrancaCriterioLinha.setValorMaximoDebito((BigDecimal) objetoCriterioCobrancaLinha[3]);
					}

					// Quantidade Mínima Contas
					if(objetoCriterioCobrancaLinha[4] != null){
						cobrancaCriterioLinha.setQuantidadeMinimaContas((Short) objetoCriterioCobrancaLinha[4]);
					}

					// Quantidade Máxima Contas
					if(objetoCriterioCobrancaLinha[5] != null){
						cobrancaCriterioLinha.setQuantidadeMaximaContas((Integer) objetoCriterioCobrancaLinha[5]);
					}

					// Valor Mínimo da Conta do Mês
					if(objetoCriterioCobrancaLinha[6] != null){
						cobrancaCriterioLinha.setValorMinimoContaMes((BigDecimal) objetoCriterioCobrancaLinha[6]);
					}

					// Valor Mínimo do Débito para Cliente com Débito Automático
					if(objetoCriterioCobrancaLinha[7] != null){
						cobrancaCriterioLinha.setValorMinimoDebitoDebitoAutomatico((BigDecimal) objetoCriterioCobrancaLinha[7]);
					}

					// Quantidade Mínima de Contas para Cliente com Débito
					// Automático
					if(objetoCriterioCobrancaLinha[8] != null){
						cobrancaCriterioLinha.setQuantidadeMinimaContasDebitoAutomatico((Short) objetoCriterioCobrancaLinha[8]);
					}

					retorno.add(cobrancaCriterioLinha);

				}
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Antiguidade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoAntiguidade(Integer idParcelamentoPerfil) throws ControladorException{

		Collection retorno = new ArrayList();
		try{
			Collection colecaoParcelamentoDescontoAntiguidade = repositorioCobranca
							.pesquisarParcelamentoDescontoAntiguidade(idParcelamentoPerfil);

			if(colecaoParcelamentoDescontoAntiguidade != null && !colecaoParcelamentoDescontoAntiguidade.isEmpty()){
				Iterator colecaoParcelamentoDescontoAntiguidadeIterator = colecaoParcelamentoDescontoAntiguidade.iterator();

				Object[] objetoParcelamentoDescontoAntiguidade = null;

				while(colecaoParcelamentoDescontoAntiguidadeIterator.hasNext()){
					objetoParcelamentoDescontoAntiguidade = (Object[]) colecaoParcelamentoDescontoAntiguidadeIterator.next();

					ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = new ParcelamentoDescontoAntiguidade();

					// Id
					if(objetoParcelamentoDescontoAntiguidade[0] != null){
						parcelamentoDescontoAntiguidade.setId((Integer) objetoParcelamentoDescontoAntiguidade[0]);
					}

					// Quantidade Mínima Meses Débito
					if(objetoParcelamentoDescontoAntiguidade[1] != null){
						parcelamentoDescontoAntiguidade.setQuantidadeMinimaMesesDebito((Integer) objetoParcelamentoDescontoAntiguidade[1]);
					}

					// Percentual de Desconto Sem Restabelecimento
					if(objetoParcelamentoDescontoAntiguidade[2] != null){
						parcelamentoDescontoAntiguidade
										.setPercentualDescontoSemRestabelecimento((BigDecimal) objetoParcelamentoDescontoAntiguidade[2]);
					}

					// Percentual de Desconto Com Restabelecimento
					if(objetoParcelamentoDescontoAntiguidade[3] != null){
						parcelamentoDescontoAntiguidade
										.setPercentualDescontoComRestabelecimento((BigDecimal) objetoParcelamentoDescontoAntiguidade[3]);
					}

					// Percentual de Desconto Ativo
					if(objetoParcelamentoDescontoAntiguidade[4] != null){
						parcelamentoDescontoAntiguidade.setPercentualDescontoAtivo((BigDecimal) objetoParcelamentoDescontoAntiguidade[4]);
					}

					retorno.add(parcelamentoDescontoAntiguidade);

				}
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Inatividade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoInatividade(Integer idParcelamentoPerfil) throws ControladorException{

		Collection retorno = new ArrayList();
		try{
			Collection colecaoParcelamentoDescontoInatividade = repositorioCobranca
							.pesquisarParcelamentoDescontoInatividade(idParcelamentoPerfil);

			if(colecaoParcelamentoDescontoInatividade != null && !colecaoParcelamentoDescontoInatividade.isEmpty()){
				Iterator colecaoParcelamentoDescontoInatividadeIterator = colecaoParcelamentoDescontoInatividade.iterator();

				Object[] objetoParcelamentoDescontoInatividade = null;

				while(colecaoParcelamentoDescontoInatividadeIterator.hasNext()){
					objetoParcelamentoDescontoInatividade = (Object[]) colecaoParcelamentoDescontoInatividadeIterator.next();

					ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = new ParcelamentoDescontoInatividade();

					// Id
					if(objetoParcelamentoDescontoInatividade[0] != null){
						parcelamentoDescontoInatividade.setId((Integer) objetoParcelamentoDescontoInatividade[0]);
					}

					// Quantidade Máxima Meses de Inatividade
					if(objetoParcelamentoDescontoInatividade[1] != null){
						parcelamentoDescontoInatividade
										.setQuantidadeMaximaMesesInatividade((Integer) objetoParcelamentoDescontoInatividade[1]);
					}

					// Percentual de Desconto Sem Restabelecimento
					if(objetoParcelamentoDescontoInatividade[2] != null){
						parcelamentoDescontoInatividade
										.setPercentualDescontoSemRestabelecimento((BigDecimal) objetoParcelamentoDescontoInatividade[2]);
					}

					// Valor Máximo Débito
					if(objetoParcelamentoDescontoInatividade[3] != null){
						parcelamentoDescontoInatividade
										.setPercentualDescontoComRestabelecimento((BigDecimal) objetoParcelamentoDescontoInatividade[3]);
					}

					retorno.add(parcelamentoDescontoInatividade);

				}
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * Pesquisa os Reparcelamentos Consecutivos através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarReparcelamentoConsecutivo(Integer idParcelamentoPerfil) throws ControladorException{

		Collection retorno = new ArrayList();
		try{
			Collection colecaoReparcelamentoConsecutivo = repositorioCobranca.pesquisarReparcelamentoConsecutivo(idParcelamentoPerfil);

			if(colecaoReparcelamentoConsecutivo != null && !colecaoReparcelamentoConsecutivo.isEmpty()){
				Iterator colecaoReparcelamentoConsecutivoIterator = colecaoReparcelamentoConsecutivo.iterator();

				Object[] objetoReparcelamentoConsecutivo = null;

				while(colecaoReparcelamentoConsecutivoIterator.hasNext()){
					objetoReparcelamentoConsecutivo = (Object[]) colecaoReparcelamentoConsecutivoIterator.next();

					ParcelamentoQuantidadeReparcelamentoRelatorioHelper parcelamentoQuantidadeReparcelamentoRelatorioHelper = new ParcelamentoQuantidadeReparcelamentoRelatorioHelper();

					// Id Reparcelamento
					if(objetoReparcelamentoConsecutivo[0] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
										.setIdReparcelamento((Integer) objetoReparcelamentoConsecutivo[0]);
					}

					// Quantidade Máxima de Reparcelamentos Consecutivos
					if(objetoReparcelamentoConsecutivo[1] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
										.setQuantidadeMaximaReparcelamento((Short) objetoReparcelamentoConsecutivo[1]);
					}

					// Id Prestação
					if(objetoReparcelamentoConsecutivo[2] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper.setIdPrestacao((Integer) objetoReparcelamentoConsecutivo[2]);
					}

					// Quantidade Máxima de Prestações do Parcelamento
					if(objetoReparcelamentoConsecutivo[3] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
										.setQuantidadeMaximaPrestacoes((Short) objetoReparcelamentoConsecutivo[3]);
					}

					// Taxa de Juros
					if(objetoReparcelamentoConsecutivo[4] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper.setTaxaJuros((BigDecimal) objetoReparcelamentoConsecutivo[4]);
					}

					// Percentual Mínimo de Entrada
					if(objetoReparcelamentoConsecutivo[5] != null){
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
										.setPercentualMinimoEntrada((BigDecimal) objetoReparcelamentoConsecutivo[5]);
					}

					retorno.add(parcelamentoQuantidadeReparcelamentoRelatorioHelper);

				}
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Pesquisa os débitos do imóvel a partir das informações do formulário pesquisarDebitosImovel
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Roberta Costa
	 * @date 23/08/2006
	 * @author Saulo Lima
	 * @date 08/07/2009
	 *       Inclusão do parametro chavesPrestacoes
	 * @param codigoImovel
	 * @param codigoImovelAntes
	 * @param dataParcelamento
	 * @param resolucaoDiretoria
	 * @param fimIntervaloParcelamento
	 * @param inicioIntervaloParcelamento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param indicadorContas
	 * @param chavesPrestacoes
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarDebitosImovel(String codigoImovel, String codigoImovelAntes, String dataParcelamento,
					String resolucaoDiretoria, String fimIntervaloParcelamento, String inicioIntervaloParcelamento,
					String indicadorContasRevisao, String indicadorGuiasPagamento, String indicadorAcrescimosImpotualidade,
					String indicadorDebitosACobrar, String indicadorCreditoARealizar, Boolean indicadorContas, String chavesPrestacoes)
					throws ControladorException{

		Object[] debitosImovel = new Object[25];

		// Definição dos indices do array debitosImovel
		final Integer COLECAO_CONTAS = Integer.valueOf(0);
		final Integer VALOR_TOTAL_CONTAS = Integer.valueOf(1);
		final Integer COLECAO_GUIA_PAGAMENTO = Integer.valueOf(2);
		final Integer VALOR_TOTAL_GUIA_PAGAMENTO = Integer.valueOf(3);
		final Integer VALOR_ACRESCIMOS_IMPONTUALIDADE = Integer.valueOf(4);
		final Integer COLECAO_DEBITO_A_COBRAR = Integer.valueOf(5);
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO = Integer.valueOf(6);
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO_LONGO_PRAZO = Integer.valueOf(7);
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO_CURTO_PRAZO = Integer.valueOf(8);
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO = Integer.valueOf(9);
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO_LONGO_PRAZO = Integer.valueOf(10);
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO_CURTO_PRAZO = Integer.valueOf(11);
		final Integer COLECAO_CREDITO_A_REALIZAR = Integer.valueOf(12);
		final Integer VALOR_CREDITO_A_REALIZAR = Integer.valueOf(13);
		final Integer VALOR_DEBITO_TOTAL_ATUALIZADO_IMOVEL = Integer.valueOf(14);
		// final Integer CODIGO_IMOVEL_ANTES = new Integer("15");
		final Integer DATA_PARCELAMENTO = Integer.valueOf(16);
		final Integer RESOLUCAO_DIRETORIA = Integer.valueOf(17);
		final Integer INICIO_INTERVALO_PARCELAMENTO = Integer.valueOf(18);
		final Integer FIM_INTERVALO_PARCELAMENTO = Integer.valueOf(19);
		final Integer INDICADOR_CONTAS_REVISAO = Integer.valueOf(20);
		final Integer INDICADOR_GUIAS_PAGAMENTO = Integer.valueOf(21);
		final Integer INDICADOR_ACRESCIMOS_IMPONTUALIDADE = Integer.valueOf(22);
		final Integer INDICADOR_DEBITO_A_COBRAR = Integer.valueOf(23);
		final Integer INDICADOR_CREDITO_A_REALIZAR = Integer.valueOf(24);

		final Integer VALOR_DEBITO_TOTAL_ATUALIZADO_IMOVEL_SEM_JUROS_PARCELAMENTO = Integer.valueOf(25);

		// [FS0012] Verificar existência de parcelamento no mês
		Collection<Parcelamento> colecaoParcelamento = this.verificarParcelamentoMesImovel(Integer.valueOf(codigoImovel));

		if(colecaoParcelamento != null && !colecaoParcelamento.isEmpty()){
			throw new ControladorException("atencao.debito.ja.parcelado.mes.faturamento.corrente");
		}

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = this.obterDebitoImovelOuCliente(1, // Indicador
						// de
						// débito
						// do
						// imóvel
						codigoImovel, // Matrícula do imóvel
						null, // Código do cliente
						null, // Tipo de relação cliente imóvel
						Util.formatarMesAnoParaAnoMesSemBarra(inicioIntervaloParcelamento), // Referência
						// inicial
						// do
						// débito
						Util.formatarMesAnoParaAnoMesSemBarra(fimIntervaloParcelamento), // Fim do
						// débito
						Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
						Util.converteStringParaDate("31/12/9999"), // Fim vencimento
						1, // Indicador de pagamento
						Integer.valueOf(indicadorContasRevisao), // conta em revisão
						Integer.valueOf(indicadorDebitosACobrar), // Débito a cobrar
						Integer.valueOf(indicadorCreditoARealizar), // crédito a realizar
						1, // Indicador de notas promissórias
						Integer.valueOf(indicadorGuiasPagamento), // guias pagamento
						Integer.valueOf(indicadorAcrescimosImpotualidade),// acréscimos
						// impontualidade
						indicadorContas, null, null, null, null, ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

		// [FS0014] Verificar existência de débitos para o imóvel Caso não exista débito
		if((colecaoDebitoImovel.getColecaoContasValoresImovel() == null || colecaoDebitoImovel.getColecaoContasValoresImovel().size() == 0)
						&& (colecaoDebitoImovel.getColecaoGuiasPagamentoValores() == null || colecaoDebitoImovel
										.getColecaoGuiasPagamentoValores().size() == 0)
						&& (colecaoDebitoImovel.getColecaoDebitoACobrar() == null || colecaoDebitoImovel.getColecaoDebitoACobrar().size() == 0)){
			throw new ControladorException("atencao.imovel.sem.debitos", null, codigoImovel);
		}

		// Para o cálculo do Débito Total Atualizado
		BigDecimal valorTotalContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidade = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;
		BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
		BigDecimal valorRestanteACobrar = BigDecimal.ZERO;
		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorMulta = BigDecimal.ZERO;

		// Dados do Débito do Imóvel - Contas
		Collection<ContaValoresHelper> colecaoContasImovel = colecaoDebitoImovel.getColecaoContasValoresImovel();

		if(colecaoContasImovel != null && !colecaoContasImovel.isEmpty()){
			Iterator contaValores = colecaoContasImovel.iterator();
			while(contaValores.hasNext()){
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
				valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());

				if(contaValoresHelper.getValorAtualizacaoMonetaria() != null
								&& !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")){

					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria());
					valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				}
				if(contaValoresHelper.getValorJurosMora() != null && !contaValoresHelper.getValorJurosMora().equals("")){
					valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora());

				}
				if(contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")){
					valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorMulta = valorMulta.add(contaValoresHelper.getValorMulta());
				}

				// Para cálculo do Acrescimo de Impontualidade
				valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper
								.getValorTotalContaValoresParcelamento());

			}
			debitosImovel[COLECAO_CONTAS] = colecaoContasImovel;

			debitosImovel[VALOR_TOTAL_CONTAS] = valorTotalContas;
		}else{
			debitosImovel[VALOR_TOTAL_CONTAS] = BigDecimal.ZERO;
		}

		// Guias de Pagamento
		Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresImovel = colecaoDebitoImovel.getColecaoGuiasPagamentoValores();

		if(colecaoGuiaPagamentoValoresImovel != null && !colecaoGuiaPagamentoValoresImovel.isEmpty()){

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresSelecionadas = this.retornarGuiaPagamentoValoresSelecionadas(
							chavesPrestacoes, colecaoGuiaPagamentoValoresImovel);

			valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(this.calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_TOTAL));
			valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(this.calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ATUALIZACAO_MONETARIA));
			valorJurosMora = valorJurosMora.add(this.calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_JUROS_MORA));
			valorMulta = valorMulta.add(this.calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_MULTA));
			valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(this.calcularValoresGuia(
							colecaoGuiaPagamentoValoresSelecionadas, ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ACRESCIMO_IMPONTUALIDADE));

			debitosImovel[COLECAO_GUIA_PAGAMENTO] = colecaoGuiaPagamentoValoresSelecionadas;
			debitosImovel[VALOR_TOTAL_GUIA_PAGAMENTO] = valorTotalGuiasPagamento;
		}else{
			debitosImovel[VALOR_TOTAL_GUIA_PAGAMENTO] = BigDecimal.ZERO;
		}

		// Acrescimos por Impotualidade
		BigDecimal retornoSoma = BigDecimal.ZERO;
		retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);
		debitosImovel[VALOR_ACRESCIMOS_IMPONTUALIDADE] = retornoSoma;

		// Para o cálculo do Débito Total Atualizado
		valorTotalAcrescimoImpontualidade = retornoSoma;

		// Debitos A Cobrar
		Collection<DebitoACobrar> colecaoDebitoACobrar = colecaoDebitoImovel.getColecaoDebitoACobrar();
		if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
			Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

			final int indiceCurtoPrazo = 0;
			final int indiceLongoPrazo = 1;

			while(debitoACobrarValores.hasNext()){
				DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

				// Debitos A Cobrar - Serviço
				if(debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.SERVICO_NORMAL)){

					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotal();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
									valorRestanteACobrar);

					valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}

				// Debitos A Cobrar - Parcelamento

				Collection<Integer> tiposParcelamento = Util
								.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO.executar());

				if(tiposParcelamento != null && tiposParcelamento.contains(debitoACobrar.getFinanciamentoTipo().getId())){

					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotal();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
									valorRestanteACobrar);

					valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}
			}

			debitosImovel[COLECAO_DEBITO_A_COBRAR] = colecaoDebitoACobrar;

			// Serviços
			valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo
							.add(valorTotalRestanteServicosACobrarLongoPrazo);

			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO_LONGO_PRAZO] = valorTotalRestanteServicosACobrarLongoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO_CURTO_PRAZO] = valorTotalRestanteServicosACobrarCurtoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO] = valorTotalRestanteServicosACobrar;

			// Parcelamentos
			valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
							.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO_LONGO_PRAZO] = valorTotalRestanteParcelamentosACobrarLongoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO_CURTO_PRAZO] = valorTotalRestanteParcelamentosACobrarCurtoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO] = valorTotalRestanteParcelamentosACobrar;
		}else{
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO] = BigDecimal.ZERO;
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO] = BigDecimal.ZERO;
		}

		// Caso não exista débito de serviço nem contas
		if(colecaoDebitoImovel.getColecaoContasValoresImovel() == null && valorTotalRestanteServicosACobrar.compareTo(BigDecimal.ZERO) == 0){
			throw new ControladorException("atencao.imovel.sem.debitos", null, codigoImovel);
		}

		// Crédito A Realizar
		Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel.getColecaoCreditoARealizar();
		if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
			Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();
			while(creditoARealizarValores.hasNext()){
				CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();
				valorCreditoARealizar = valorCreditoARealizar.add(creditoARealizar.getValorTotal());
			}

			debitosImovel[COLECAO_CREDITO_A_REALIZAR] = colecaoCreditoARealizar;
			debitosImovel[VALOR_CREDITO_A_REALIZAR] = valorCreditoARealizar;
		}else{
			debitosImovel[VALOR_CREDITO_A_REALIZAR] = BigDecimal.ZERO;
		}

		// Débito Total Atualizado
		BigDecimal debitoTotalAtualizado = BigDecimal.ZERO;

		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalContas);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalGuiasPagamento);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalAcrescimoImpontualidade);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteServicosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteParcelamentosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado.subtract(valorCreditoARealizar);

		debitosImovel[VALOR_DEBITO_TOTAL_ATUALIZADO_IMOVEL] = debitoTotalAtualizado;

		// Quando mudar de imóvel iniciar a data do parcelamento com a data atual, limpar a
		// resolução de diretoria
		if(!codigoImovelAntes.equals(codigoImovel)){

			// Reinicia a Data do Parcelamento
			SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
			Calendar dataCorrente = new GregorianCalendar();

			debitosImovel[DATA_PARCELAMENTO] = formatoData.format(dataCorrente.getTime());

			// Limpa Resolução de Diretoria
			debitosImovel[RESOLUCAO_DIRETORIA] = "";

			// Limpa fim do Intervalo do Parcelamento
			debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "";

			// Limpa as perguntas
			debitosImovel[INDICADOR_CONTAS_REVISAO] = "";
			debitosImovel[INDICADOR_GUIAS_PAGAMENTO] = "";
			debitosImovel[INDICADOR_ACRESCIMOS_IMPONTUALIDADE] = "";
			debitosImovel[INDICADOR_DEBITO_A_COBRAR] = "";
			debitosImovel[INDICADOR_CREDITO_A_REALIZAR] = "";
		}

		// Intervalo do Parcelamento
		if(colecaoContasImovel != null){
			Iterator contaValores = colecaoContasImovel.iterator();
			int anoMesReferenciaColecao = 0;
			int menorAnoMesReferencia = 999999;
			int maiorAnoMesReferencia = 0;

			while(contaValores.hasNext()){
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
				anoMesReferenciaColecao = contaValoresHelper.getConta().getReferencia();
				if(anoMesReferenciaColecao < menorAnoMesReferencia){
					menorAnoMesReferencia = anoMesReferenciaColecao;
				}
				if(anoMesReferenciaColecao > maiorAnoMesReferencia){
					maiorAnoMesReferencia = anoMesReferenciaColecao;
				}
			}

			// Quando não houver intervalo de parcelamento inicial e final
			debitosImovel[INICIO_INTERVALO_PARCELAMENTO] = Util.formatarAnoMesParaMesAno(menorAnoMesReferencia);
			if(maiorAnoMesReferencia != 0){
				if((fimIntervaloParcelamento == null || fimIntervaloParcelamento.equals(""))){
					debitosImovel[FIM_INTERVALO_PARCELAMENTO] = Util.formatarAnoMesParaMesAno(maiorAnoMesReferencia);
				}
			}else{
				debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "00/0000";
			}
		}else{
			// [FS0015] Verificar existência de contas
			// Caso mão existam contas para o imóvel deixar indisponível o campo mês/ano de
			// referência inicial e mês/ano de referência final
			debitosImovel[INICIO_INTERVALO_PARCELAMENTO] = "";
			debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "";
		}

		return debitosImovel;
	}

	/**
	 * Este caso de uso permite gerar e emitir o extrato dos débitos de um imóvel
	 * [UC0444] Gerar e Emitir Extrato de Débitos
	 * Este caso de uso permite gerar atividade de ação de cobrança com base nos parâmetros
	 * recebidos
	 * [UC0251] Gerar Atividade de Ação de Cobranca
	 * Gera o documento de cobrança
	 * 
	 * @author COMPESA
	 * @date 08/09/2006
	 * @author André Nishimura
	 *         Modificação para guardar valores de desconto individualmente nos itens do documento
	 *         de cobrança
	 * @author Saulo Lima
	 * @date 24/07/2009
	 *       Alteração devido modificações do objeto GuiaPagamentoValoresHelper
	 * @author Saulo Lima
	 * @date 04/09/2009
	 *       Alteração para requisito "Antecipação do Parcelamento"
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @param anoMesReferenciaDebito
	 * @param documentoEmissaoForma
	 * @param documentoTipo
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param empresa
	 * @param cobrancaCriterio
	 * @param cobrancaAcao
	 * @param valorDocumento
	 * @throws ControladorException
	 */
	// Vai ser um caso de uso a parte, depois colocar o número nos casos de usos e no comentário
	public ExtratoDebitoRelatorioHelper gerarDocumentoCobrancaExtratoDebito(Imovel imovel, Short indicadorGeracaoTaxaCobranca,
					Collection<ContaValoresHelper> colecaoContas, Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento,
					Collection<DebitoACobrar> colecaoDebitosACobrar, BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto,
					Integer anoMesReferenciaDebito, DocumentoEmissaoForma documentoEmissaoForma, DocumentoTipo documentoTipo,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, Empresa empresa, CobrancaCriterio cobrancaCriterio,
					CobrancaAcao cobrancaAcao, BigDecimal valorDocumento, Date dataAtual,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Cliente cliente,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, SistemaParametro sistemaParametro, Integer idResolucaoDiretoria)
					throws ControladorException{

		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = new ExtratoDebitoRelatorioHelper(
						new ArrayList<CobrancaDocumentoItem>(), new ArrayList<CobrancaDocumentoItem>(),
						new ArrayList<CobrancaDocumentoItem>(), new ArrayList<CobrancaDocumentoItem>());

		if(sistemaParametro == null){
			// Pesquisando Sistemas Parâmetros
			sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		}

		if(indicadorGeracaoTaxaCobranca == 1 && imovel != null){
			this.gerarTaxaCobranca(imovel, indicadorGeracaoTaxaCobranca, sistemaParametro, anoMesReferenciaDebito);
		}

		// Item 2
		CobrancaDocumento documentoCobranca = this.inserirCobrancaDocumento(imovel, documentoTipo, cobrancaAcaoAtividadeComando,
						cobrancaAcaoAtividadeCronograma, empresa, valorDocumento, dataAtual, valorAcrescimosImpontualidade, valorDesconto,
						cobrancaCriterio, cobrancaAcao, cliente, documentoEmissaoForma, false, null, idResolucaoDiretoria);

		// Fim item 2

		// Item 3
		// Para cada ocorrência das listas recebidas ( conts, guias de pagamento, débito a cobrar),
		// o sistema gera os
		// items do documento de cobrança na tabela COBRANCA_DOCUMENTO_ITEM

		if(colecaoContas != null && !colecaoContas.isEmpty()){

			String idsContasValidarConcessionaria = "";

			for(Iterator iteratorContas = colecaoContas.iterator(); iteratorContas.hasNext();){

				ContaValoresHelper conta = (ContaValoresHelper) iteratorContas.next();

				idsContasValidarConcessionaria += conta.getConta().getId().toString() + ",";
			}

			getControladorFaturamento().verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(
							idsContasValidarConcessionaria.substring(0, idsContasValidarConcessionaria.length() - 1), null, null, null);

			extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemContas(this.criarCobrancaDocumentoItemConta(documentoCobranca,
							colecaoContas, opcoesParcelamento, valorAcrescimosImpontualidade));
		}
		if(colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()){

			String idsDebitosValidarConcessionaria = "";

			for(Iterator iteratorDebitos = colecaoDebitosACobrar.iterator(); iteratorDebitos.hasNext();){

				DebitoACobrar debito = (DebitoACobrar) iteratorDebitos.next();

				idsDebitosValidarConcessionaria += debito.getId().toString() + ",";
			}

			getControladorFaturamento().verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(null, null,
							idsDebitosValidarConcessionaria.substring(0, idsDebitosValidarConcessionaria.length() - 1), null);

			extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemDebitosACobrar(this.criarCobrancaDocumentoItemDebitoACobrar(
							documentoCobranca, colecaoDebitosACobrar, opcoesParcelamento, valorAcrescimosImpontualidade, documentoTipo));
		}

		if(colecaoGuiasPagamento != null && !colecaoGuiasPagamento.isEmpty()){

			String idsGuiasValidarConcessionaria = "";

			for(Iterator iteratorGuia = colecaoGuiasPagamento.iterator(); iteratorGuia.hasNext();){

				GuiaPagamentoValoresHelper guiaPagamento = (GuiaPagamentoValoresHelper) iteratorGuia.next();
				idsGuiasValidarConcessionaria += guiaPagamento.getIdGuiaPagamento().toString() + ",";
			}

			getControladorFaturamento().verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(null,
							idsGuiasValidarConcessionaria.substring(0, idsGuiasValidarConcessionaria.length() - 1), null, null);

			extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemGuiasPagamento(this.criarCobrancaDocumentoItemGuiaPagamento(
							documentoCobranca, colecaoGuiasPagamento, opcoesParcelamento, valorAcrescimosImpontualidade));
		}

		if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
			extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemCreditoARealizar(this.criarCobrancaDocumentoItemCreditoARealizar(
							documentoCobranca, colecaoCreditoARealizar));

			String idsCreditosValidarConcessionaria = "";
			for(CreditoARealizar creditoARealizar : colecaoCreditoARealizar){

				idsCreditosValidarConcessionaria += creditoARealizar.getId().toString() + ",";

			}

			getControladorFaturamento().verificaExistenciaLocalidadesAssociadaConcessionariasDiversas(null, null, null,
							idsCreditosValidarConcessionaria.substring(0, idsCreditosValidarConcessionaria.length() - 1));

		}

		// Fim item 3

		// atualiza o valor dos acrescimos e do nuumero do sequencial do documento de cobrança
		// Atualiza o número do sequencial do documento com o código do documento de cobrança gerado
		documentoCobranca.setNumeroSequenciaDocumento(documentoCobranca.getId());
		getControladorUtil().atualizar(documentoCobranca);
		extratoDebitoRelatorioHelper.setDocumentoCobranca(documentoCobranca);

		return extratoDebitoRelatorioHelper;
	}

	private void gerarTaxaCobranca(Imovel imovel, Short indicadorGeracaoTaxaCobranca, SistemaParametro sistemaParametro,
					Integer anoMesReferenciaDebito){

		// Inserindo o DEBITO_A_COBRAR_CATEGORIA no banco de dados
		try{
			// Item 1
			// Caso tenha sido passado o parâmetro imovel, bem como esteja indicado que é para gerar
			// a taxa de cobrança
			// Variável que vai armazenar o valor da taxa para o cálculo do valor do débito
			BigDecimal valorTaxa = this.obterValorTaxaDocumentoCobranca(imovel, sistemaParametro);
			DebitoTipo debitoTipo = repositorioCobranca.pesquisarDebitoTipo(DebitoTipo.TAXA_COBRANCA);

			// Cria a variável que vai armazenar a situação de crédito/débito
			DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);

			// Cria a variável que vai armazenar a forma de cobrança
			CobrancaForma cobrancaForma = new CobrancaForma();
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);

			/** Cria o débito a cobrar geral */
			DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
			debitoACobrarGeral.setIndicadorHistorico(Short.valueOf((short) 2));
			debitoACobrarGeral.setUltimaAlteracao(new Date());
			Integer idDebitoACobrarGeral = (Integer) this.getControladorUtil().inserir(debitoACobrarGeral);

			// Cria o débito a cobrar - Seta as informações necessárias para criar o débito a cobrar
			DebitoACobrar debitoACobrar = new DebitoACobrar();
			debitoACobrar.setImovel(imovel);
			debitoACobrar.setDebitoTipo(debitoTipo);
			debitoACobrar.setGeracaoDebito(new Date());
			debitoACobrar.setAnoMesReferenciaDebito(anoMesReferenciaDebito);
			debitoACobrar.setAnoMesCobrancaDebito(sistemaParametro.getAnoMesArrecadacao());
			debitoACobrar.setAnoMesReferenciaContabil(sistemaParametro.getAnoMesFaturamento());
			debitoACobrar.setValorDebito(valorTaxa);
			debitoACobrar.setNumeroPrestacaoDebito((Short.valueOf((short) 1)).shortValue());
			debitoACobrar.setNumeroPrestacaoCobradas((Short.valueOf((short) 0)).shortValue());
			debitoACobrar.setLocalidade(imovel.getLocalidade());
			debitoACobrar.setQuadra(imovel.getQuadra());
			debitoACobrar.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
			debitoACobrar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			debitoACobrar.setNumeroLote(imovel.getLote());
			debitoACobrar.setNumeroSubLote(imovel.getSubLote());
			debitoACobrar.setPercentualTaxaJurosFinanciamento(BigDecimal.ZERO);
			debitoACobrar.setRegistroAtendimento(null);
			debitoACobrar.setOrdemServico(null);
			debitoACobrar.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());
			debitoACobrar.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());
			debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
			debitoACobrar.setDebitoCreditoSituacaoAnterior(null);
			debitoACobrar.setParcelamentoGrupo(null);
			debitoACobrar.setCobrancaForma(cobrancaForma);
			debitoACobrar.setUltimaAlteracao(new Date());
			debitoACobrar.setId(idDebitoACobrarGeral);
			debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);

			this.getControladorUtil().inserir(debitoACobrar);

			// [UC0108] Obter Quantidade de Economias por Categoria
			Collection<Categoria> colecaoCategoriasImovel = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

			// [UC0185] Obter Valor por Categoria, passando o valor da taxa
			Collection<BigDecimal> colecaoValorePorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoriasImovel,
							valorTaxa);

			// Cria as iterações de categoria e valor
			Iterator iteratorCategoria = colecaoCategoriasImovel.iterator();
			Iterator iteratorValorPorCategoria = colecaoValorePorCategoria.iterator();

			// Inclui na tabela DEBITO_A_COBRAR_CATEGORIA a(s) categoria(s) e sua(s) respectiva(s)
			// quantidade(s)
			// de economia retornados pels [UC0108] e os valores retornados pelo [UC0185] para cada
			// categoria
			while(iteratorCategoria.hasNext()){

				// Recupera a categoria
				Categoria categoria = (Categoria) iteratorCategoria.next();

				// Recupera o valor da categoria
				BigDecimal valorPorCategoria = (BigDecimal) iteratorValorPorCategoria.next();

				// Cria o débito a cobrar categoria
				DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();

				DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(debitoACobrar, categoria);
				debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
				debitoACobrarCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
				debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
				debitoACobrarCategoria.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(debitoACobrarCategoria);

			}

			Integer idDebitoACobrar = debitoACobrar.getId();

			Collection<Integer> idsDebitoACobrar = new ArrayList<Integer>();
			idsDebitoACobrar.add(idDebitoACobrar);

			this.getControladorFaturamento().registrarLancamentoContabilDebitoACobrar(idsDebitoACobrar);

		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Fim item 1
	}

	// /**
	// * Método responsável por criar um objeto Cobranca Documento Item do tipo Guia.
	// */
	// private void criarCobrancaDocumentoItemGuia(GuiaPagamentoValoresHelper
	// guiaPagamentoValorHelper,
	// ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper, CobrancaDocumento
	// documentoCobranca, Short numPrestacao,
	// BigDecimal valorItemCobrado, NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, Integer
	// qtdeDocumentoItens)
	// throws ControladorException {
	//
	// DocumentoTipo documentoTipoGuia = new DocumentoTipo();
	// documentoTipoGuia.setId(DocumentoTipo.GUIA_PAGAMENTO);
	//
	// CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();
	// BigDecimal valorAcrescimos = BigDecimal.ZERO;
	//
	// // cria o item de documento de cobrança
	// cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
	// cobrancaDocumentoItem.setDocumentoTipo(documentoTipoGuia);
	// cobrancaDocumentoItem.setContaGeral(null);
	// cobrancaDocumentoItem.setDebitoACobrarGeral(null);
	// cobrancaDocumentoItem.setCreditoARealizarGeral(null);
	//
	// GuiaPagamento guiaPagamento = new GuiaPagamento();
	// guiaPagamento.setId(guiaPagamentoValorHelper.getIdGuiaPagamento());
	// GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
	// guiaPagamentoGeral.setGuiaPagamento(guiaPagamento);
	// guiaPagamentoGeral.setId(guiaPagamentoValorHelper.getIdGuiaPagamento());
	// cobrancaDocumentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
	// cobrancaDocumentoItem.setNumeroDaPrestacao(guiaPagamentoValorHelper.getNumeroPrestacao());
	//
	// if (guiaPagamentoValorHelper.getValorMulta() != null) {
	// valorAcrescimos = valorAcrescimos.add(guiaPagamentoValorHelper.getValorMulta());
	// }
	//
	// if (guiaPagamentoValorHelper.getValorJurosMora() != null) {
	// valorAcrescimos = valorAcrescimos.add(guiaPagamentoValorHelper.getValorJurosMora());
	// }
	//
	// if (guiaPagamentoValorHelper.getValorAtualizacaoMonetaria() != null) {
	// valorAcrescimos =
	// valorAcrescimos.add(guiaPagamentoValorHelper.getValorAtualizacaoMonetaria());
	// }
	//
	// cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);
	// cobrancaDocumentoItem.setNumeroDaPrestacao(numPrestacao);
	// cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
	// cobrancaDocumentoItem.setUltimaAlteracao(new Date());
	//
	// if (opcoesParcelamento != null) {
	// cobrancaDocumentoItem.setValorDescontoMora(opcoesParcelamento.getValorDescontoMoraGuiaIndividual(guiaPagamento));
	// cobrancaDocumentoItem.setValorDescontoMulta(opcoesParcelamento.getValorDescontoMultaGuiaIndividual(guiaPagamento));
	// cobrancaDocumentoItem.setValorDescontoCorrecaoMonetaria(opcoesParcelamento.getValorDescontoCorrecaoGuiaIndividual(guiaPagamento));
	// cobrancaDocumentoItem.setValorDescontoValor(opcoesParcelamento.getValorDescontoValorGuiaIndividual(guiaPagamento));
	// }
	// if (opcoesParcelamento != null && opcoesParcelamento.getValorDescontoInatividade() != null
	// && !opcoesParcelamento.getValorDescontoInatividade().equals("")) {
	// cobrancaDocumentoItem.setValorDescontoDocumento(opcoesParcelamento.getValorDescontoInatividade().setScale(Parcelamento.CASAS_DECIMAIS,
	// Parcelamento.TIPO_ARREDONDAMENTO).divide(
	// new BigDecimal(qtdeDocumentoItens).setScale(Parcelamento.CASAS_DECIMAIS,
	// Parcelamento.TIPO_ARREDONDAMENTO)));
	// } else {
	// cobrancaDocumentoItem.setValorDescontoDocumento(BigDecimal.ZERO);
	// }
	// cobrancaDocumentoItem.setValorMulta(guiaPagamentoValorHelper.getValorMulta());
	// cobrancaDocumentoItem.setValorMora(guiaPagamentoValorHelper.getValorJurosMora());
	// cobrancaDocumentoItem.setValorCorrecaoMonetaria(guiaPagamentoValorHelper.getValorAtualizacaoMonetaria());
	//
	// // insere o item de documento de cobrança
	// this.getControladorUtil().inserir(cobrancaDocumentoItem);
	// extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemGuiasPagamento().add(cobrancaDocumentoItem);
	//
	// }

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobrança previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de cobrança do sistema
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados()
					throws ControladorException{

		Collection<CobrancaAcaoAtividadeCronograma> retorno = null;
		try{
			retorno = repositorioCobranca.pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados();
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobrança previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de cobrança do sistema
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados()
					throws ControladorException{

		Collection<CobrancaAcaoAtividadeComando> retorno = null;
		try{
			retorno = repositorioCobranca.pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados();
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Este caso de uso permite gerar e emitir extrato dos débitos de um imóvel
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * 
	 * @author Roberta Costa, Vivianne Sousa
	 * @date 06/09/2006, 11/09/2006
	 * @author Saulo Lima
	 * @date 04/09/2009
	 *       Adicionado o try/catch
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @return
	 * @throws ControladorException
	 */
	// Quando implementar Notas Promissórias acrescentar nos parâmetros
	public ExtratoDebitoRelatorioHelper gerarEmitirExtratoDebito(Imovel imovel, Short indicadorGeracaoTaxaCobranca,
					Collection colecaoContas, Collection colecaoGuiasPagamento, Collection colecaoDebitosACobrar,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto, BigDecimal valorDocumento,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Cliente cliente,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, Integer idResolucaoDiretoria) throws ControladorException{

		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = null;
		try{

			// [SB0001] - Gerar Documento de Cobrança
			DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
			documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

			DocumentoTipo documentoTipo = new DocumentoTipo();
			if(opcoesParcelamento == null){
				documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO);
			}else{
				// Se o indicador de pagamento com cartão tiver marcado (valor 1), seta para o
				// documento correspondente.
				if(opcoesParcelamento.getInPagamentoCartaoCredito() != null && !opcoesParcelamento.getInPagamentoCartaoCredito().equals("")
								&& opcoesParcelamento.getInPagamentoCartaoCredito().equals("1")){
					documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO_CARTAO);
				}else{
					documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO);
				}
			}

			extratoDebitoRelatorioHelper = this.gerarDocumentoCobrancaExtratoDebito(imovel, indicadorGeracaoTaxaCobranca, colecaoContas,
							colecaoGuiasPagamento, colecaoDebitosACobrar, valorAcrescimosImpontualidade, valorDesconto, null, // anoMesReferenciaDebito
							// é
							// nulo
							// para
							// o
							// parcelamento
							documentoEmissaoForma, documentoTipo, null, // cobrancaAcaoAtividadeComando
							// é nulo para o
							// parcelamento
							null, // cobrancaAcaoAtividadeCronograma é nulo para o parcelamento
							null, // Empresa é nulo para o parcelamento
							null, // CobrancaCriterio é nulo para o parcelamento
							null, // CobrancaAcao é nulo para o parcelamento
							valorDocumento, new Date(), colecaoCreditoARealizar, cliente, opcoesParcelamento, null, idResolucaoDiretoria);

		}catch(ControladorException ce){
			sessionContext.setRollbackOnly();
			throw ce;
		}

		return extratoDebitoRelatorioHelper;
	}

	/**
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * [UC0476] Emitir Documento de Cobrança - Ordem de Corte
	 * 
	 * @author Ana Maria
	 * @data 07/09/2006
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemCorte(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		// LOGGER.info("************** ENTROU NO CORTE ADMINISTRATIVO OU FISICO **************");

		Collection colecaoEmitirDocumentoCobranca = null;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}
		while(!flagFimPesquisa){

			// map que armazena o sequencial e o numero da conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try{
				colecaoEmitirDocumentoCobranca = repositorioCobranca.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoEmitirDocumentoCobranca != null && !colecaoEmitirDocumentoCobranca.isEmpty()){

				LOGGER.info("************** QUANTIDADE DE COBRANÇA: " + colecaoEmitirDocumentoCobranca.size() + "**************");

				String nomeCliente = null;
				Collection colecaoCobrancaDocumentoItem = null;

				if(colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if(colecaoEmitirDocumentoCobranca.size() % 2 == 0){
					metadeColecao = colecaoEmitirDocumentoCobranca.size() / 2;
				}else{
					metadeColecao = (colecaoEmitirDocumentoCobranca.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoEmitirDocumentoCobranca);

				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				if(mapCobrancaDocumentoOrdenada != null){
					int countOrdem = 0;

					while(countOrdem < mapCobrancaDocumentoOrdenada.size()){
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada.get(countOrdem);

						Iterator iteratorColecaoCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();

						while(iteratorColecaoCobrancaDocumento.hasNext()){

							emitirDocumentoCobrancaHelper = null;

							int situacao = 0;
							emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento.next();

							/*
							 * Estes objetos auxiliarão na formatação da inscrição que será composta
							 * por informações do documento de cobrança e do
							 * imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;
							Localidade localidade = null;

							sequencialImpressao++;

							while(situacao < 2){
								if(situacao == 0){
									situacao = 1;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);

								}else{
									emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) mapCobrancaoDocumentoDivididas
													.get(emitirDocumentoCobrancaHelper);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);
								}

								if(emitirDocumentoCobrancaHelper != null){

									/*
									 * Objeto que será utilizado para armazenar as informações do
									 * documento de cobrança de acordo com o layout
									 * definido no caso de uso
									 */

									try{

										nomeCliente = this.repositorioClienteImovel
														.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper.getIdImovel());

										CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
										cobrancaDocumento.setId(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
														.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									}catch(ErroRepositorioException ex){
										ex.printStackTrace();
										throw new ControladorException("erro.sistema", ex);
									}

									if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
										// Início do processo de geração do arquivo txt

										// LINHA 01
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 57));

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoLocalidade(), 30));

										cobrancaDocumentoTxt.append(Util.completaString("", 63));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 02
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										localidade = new Localidade();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(emitirDocumentoCobrancaHelper.getNumeroQuadra());
										setorComercialInscricao.setCodigo(emitirDocumentoCobrancaHelper.getCodigoSetorComercial());
										localidade.setId(emitirDocumentoCobrancaHelper.getIdLocalidade());
										inscricao.setLocalidade(localidade);
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(emitirDocumentoCobrancaHelper.getLote());
										inscricao.setSubLote(emitirDocumentoCobrancaHelper.getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util.completaString("", 65));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 03
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 66));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util
														.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper.getIdImovel());

										cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

										cobrancaDocumentoTxt.append(Util.completaString("", 74));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 04
										// ==================================

										String enderecoFormatado = getControladorEndereco().pesquisarEnderecoFormatado(
														emitirDocumentoCobrancaHelper.getIdImovel());
										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 61));
										cobrancaDocumentoTxt.append("  ");

										// Data de Validade
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											if(emitirDocumentoCobrancaHelper.getNumeroDiasValidade() != null){
												cobrancaDocumentoTxt.append(Util.formatarData(Util.adicionarNumeroDiasDeUmaData(
																emitirDocumentoCobrancaHelper.getEmissao(), emitirDocumentoCobrancaHelper
																				.getNumeroDiasValidade().intValue())));
											}else{
												cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
											}
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 75));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 05
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 67));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));

										cobrancaDocumentoTxt.append(Util.completaString("", 74));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 06
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Quantidades de economias por categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Imovel imovel = new Imovel();
										imovel.setId(emitirDocumentoCobrancaHelper.getIdImovel());
										Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if(colecaoCategorias != null && !colecaoCategorias.isEmpty()){
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;

											while(iteratorColecaoCategorias.hasNext()){
												categoria = (Categoria) iteratorColecaoCategorias.next();

												if(categoria.getId().equals(Categoria.RESIDENCIAL)){
													qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.COMERCIAL)){
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.PUBLICO)){
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}

										colecaoCategorias = null;

										// Residêncial
										if(!qtdResidencial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										// Comercial
										if(!qtdComercial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										// Industrial
										if(!qtdIndustrial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										// Público
										if(!qtdPublico.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 4));

										// Data de Emissão
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 4));

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 8));

										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										String numeroHidrometro = getControladorAtendimentoPublico().pesquisarNumeroHidrometroLigacaoAgua(
														emitirDocumentoCobrancaHelper.getIdImovel());

										// Número Hidrômetro
										if(numeroHidrometro != null){
											cobrancaDocumentoTxt.append(Util.completaString(numeroHidrometro, 10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 7));

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaString(
														"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 6));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 9));

										cobrancaDocumentoTxt.append(Util.completaString("", 61));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 07
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										/*
										 * Selecionar os itens do documento de cobrança
										 * correspondentes a conta e ordenar por ano/mês de
										 * referência da
										 * conta
										 */
										if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											int countImpressao = colecaoCobrancaDocumentoItem.size() - 13;

											cobrancaDocumentoTxt.append(Util.completaString("", 1));
											/*
											 * Caso a quantidade de itens selecionados seja superior
											 * a 15 [SB0001 - Calcular Valor e Data de
											 * Vencimento Anterior]
											 * Caso contrário: Dados do primeiro e segundo itens
											 * selecionados
											 */
											if(colecaoCobrancaDocumentoItem.size() > 15){

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
																.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 15);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt.append("DEBTO.ATE");

												cobrancaDocumentoTxt.append(Util.completaString("", 3));

												// Data de Vencimento anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
																.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt.append(Util.completaString("", 127));

											}else{

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

												// Mês/Ano de referência da conta
												cobrancaDocumentoTxt.append(Util.completaString(
																Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																				.getConta().getReferencia()), 7));

												cobrancaDocumentoTxt.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt.append(Util.completaString("", 3));

												// Data de vencimento da conta
												cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																.getConta().getDataVencimentoConta()));

												cobrancaDocumentoTxt.append(Util.completaString("", 127));
											}

											cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

											// LINHA 08
											// ==================================

											/*
											 * Canal ("") Fonte ("1")
											 */
											if(countImpressao <= 0){
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												cobrancaDocumentoItem = null;

												int countRegistros = 0;

												while(iteratorColecaoCobrancaDocumentoItem.hasNext()){

													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
																	.next();

													if(countRegistros > 0){
														cobrancaDocumentoTxt.append(" ");
														cobrancaDocumentoTxt.append("1");
														cobrancaDocumentoTxt.append(" ");

														// Mês/Ano de referência da conta
														cobrancaDocumentoTxt.append(Util.completaString(
																		Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																						.getConta().getReferencia()), 7));

														cobrancaDocumentoTxt.append(".");

														// Dígito verificador da conta
														cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt.append(Util.completaString("", 3));

														// Data de vencimento da conta
														cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																		.getConta().getDataVencimentoConta()));

														cobrancaDocumentoTxt.append(Util.completaString("", 127));
														cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
													}
													countRegistros++;
												}
											}else{
												while(countImpressao < colecaoCobrancaDocumentoItem.size()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
																	.get(countImpressao);
													cobrancaDocumentoTxt.append(" ");
													cobrancaDocumentoTxt.append("1");
													cobrancaDocumentoTxt.append(" ");

													// Mês/Ano de referência da conta
													cobrancaDocumentoTxt.append(Util.completaString(
																	Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																					.getConta().getReferencia()), 7));

													cobrancaDocumentoTxt.append(".");

													// Dígito verificador da conta
													cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt.append(Util.completaString("", 3));

													// Data de vencimento da conta
													cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																	.getConta().getDataVencimentoConta()));

													cobrancaDocumentoTxt.append(Util.completaString("", 127));
													cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

													countImpressao++;
												}
											}
										}

										// LINHA 09
										// ==================================

										/*
										 * Canal ("1") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 16));

										cobrancaDocumentoTxt.append(Util.completaString("", 128));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 10
										// ==================================

										/*
										 * Canal ("1") Fonte ("4")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("4");

										cobrancaDocumentoTxt.append(Util.completaString("", 1));

										float valorDocumento = emitirDocumentoCobrancaHelper.getValorDocumento().floatValue();

										if(valorDocumento > 500){
											cobrancaDocumentoTxt.append("PRIORIDADE - DÉBITO ACIMA DE R$ 500,00");
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 38));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 111));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 11
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util.completaString("", 150));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 12
										// ==================================

										/*
										 * Canal (" ") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(" ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(emitirDocumentoCobrancaHelper
														.getIdCobrancaGrupo().toString(), 2));

										cobrancaDocumentoTxt.append("-");

										// Sigla e descriçao da gerência
										// regional
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getNomeAbreviadoGerencia(), 3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
														.append(Util.completaString(emitirDocumentoCobrancaHelper.getNomeGerencia(), 25));

										cobrancaDocumentoTxt.append(Util.completaString("", 25));

										// Código e descrição da empresa
										if(emitirDocumentoCobrancaHelper.getIdEmpresa() != null){
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(emitirDocumentoCobrancaHelper
															.getIdEmpresa().toString(), 4));

											cobrancaDocumentoTxt.append("- ");

											cobrancaDocumentoTxt.append(Util.completaString(
															emitirDocumentoCobrancaHelper.getDescricaoEmpresa(), 10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 16));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 76));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 13
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util.completaString("", 65));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 14
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 66));

										cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

										cobrancaDocumentoTxt.append(Util.completaString("", 74));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 15
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util.completaString("", 87));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 16
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util.completaString("", 67));

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));

										cobrancaDocumentoTxt.append(Util.completaString("", 74));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 17
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Residêncial
										if(!qtdResidencial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										// Comercial
										if(!qtdComercial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										// Industrial
										if(!qtdIndustrial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Público
										if(!qtdPublico.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 1));

										// Data de Emissão
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 4));

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 8));

										cobrancaDocumentoTxt.append(Util.completaString("", 10));

										// Código da situação da ligação de água
										cobrancaDocumentoTxt.append(Util.completaString(
														"" + emitirDocumentoCobrancaHelper.getIdLigacaoAguaSituacao(), 3));

										// Código da situação da ligação do
										// esgoto
										cobrancaDocumentoTxt.append(Util.completaString(
														"" + emitirDocumentoCobrancaHelper.getIdLigacaoEsgotoSituacao(), 3));

										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaString(
														"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 6));
										cobrancaDocumentoTxt.append(Util.completaString("", 9));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 7));

										cobrancaDocumentoTxt.append(Util.completaString("", 62));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

									}

									// adiciona o id da conta e o sequencial no para serem
									// atualizados
									mapAtualizaSequencial.put(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca(), sequencialImpressao);
									colecaoCobrancaDocumentoItem = null;
								}
							}
						}
						mapCobrancaoDocumentoDivididas = null;
						countOrdem++;
					}
					mapCobrancaDocumentoOrdenada = null;
				}

			}else{
				flagFimPesquisa = true;
			}
			try{
				repositorioCobranca.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoEmitirDocumentoCobranca = null;
		}

		// LOGGER.info("************** FIM DO CORTE ADMINISTRATIVO OU FISICO **************");

		Date dataAtual = new Date();
		String nomeZip = null;

		if(idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}
		}else if(idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_CORTE_FISICO_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}
		}else if(idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_LIGADO_A_REVELIA)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_CORTE_FISICO_LIGADO_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}
		}else if(idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}
		}

		try{
			// LOGGER.info("************** INICIO CRIAR ARQUIVO **************");

			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				cobrancaDocumentoTxt.append("\u0004");

				File leitura = new File(nomeZip + ".txt");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			// LOGGER.info("************** FIM CRIAR ARQUIVO **************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta os documentos de cobrança do
	 * imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> consultarImovelDocumentosCobranca(Integer idImovel, Integer numeroPagina)
					throws ControladorException{

		Collection colecaoDocumentosCobranca = null;
		Collection<CobrancaDocumento> imoveisDocumentosCobranca = null;

		try{

			colecaoDocumentosCobranca = this.repositorioCobranca.consultarImovelDocumentosCobranca(idImovel, numeroPagina);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoDocumentosCobranca != null && !colecaoDocumentosCobranca.isEmpty()){

			imoveisDocumentosCobranca = new ArrayList();

			Iterator iteratorColecaoDocumentosCobranca = colecaoDocumentosCobranca.iterator();

			while(iteratorColecaoDocumentosCobranca.hasNext()){

				Object[] array = (Object[]) iteratorColecaoDocumentosCobranca.next();

				CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);
				// imovel do documento de cobranca
				cobrancaDocumento.setImovel(imovel);

				// 0 - descricao Ação de Cobranca
				CobrancaAcao cobrancaAcao = null;
				if(array[0] != null){
					cobrancaAcao = new CobrancaAcao();
					cobrancaAcao.setDescricaoCobrancaAcao((String) array[0]);
					cobrancaDocumento.setCobrancaAcao(cobrancaAcao);
				}

				// 1 - Data e Hora de Emissão
				if(array[1] != null){
					cobrancaDocumento.setEmissao((Date) array[1]);
				}

				// 2 - descricao Forma de Emissão
				DocumentoEmissaoForma documentoEmissaoForma = null;
				if(array[6] != null){
					documentoEmissaoForma = new DocumentoEmissaoForma();
					documentoEmissaoForma.setId((Integer) array[6]);
					documentoEmissaoForma.setDescricaoDocumentoEmissaoForma((String) array[2]);
					cobrancaDocumento.setDocumentoEmissaoForma(documentoEmissaoForma);
				}

				// 3 - descricao Tipo Documento
				DocumentoTipo documentoTipo = null;
				if(array[3] != null){
					documentoTipo = new DocumentoTipo();
					documentoTipo.setDescricaoDocumentoTipo((String) array[3]);
					cobrancaDocumento.setDocumentoTipo(documentoTipo);
				}

				// 4 - VAlor do Documento
				if(array[4] != null){
					cobrancaDocumento.setValorDocumento((BigDecimal) array[4]);
				}

				// 5 - id Cobranca Documento
				if(array[5] != null){
					cobrancaDocumento.setId((Integer) array[5]);
				}

				CobrancaAcao cobrancaAcaoAtividade = new CobrancaAcao();

				if(array[7] != null && !"".equals(array[7].toString())){
					CobrancaAcaoAtividadeCronograma atividadeCronograma = new CobrancaAcaoAtividadeCronograma();
					CobrancaAcaoCronograma acaoCronograma = new CobrancaAcaoCronograma();
					cobrancaAcaoAtividade.setDescricaoCobrancaAcao(array[7].toString());
					acaoCronograma.setCobrancaAcao(cobrancaAcaoAtividade);
					atividadeCronograma.setCobrancaAcaoCronograma(acaoCronograma);
					cobrancaDocumento.setCobrancaAcaoAtividadeCronograma(atividadeCronograma);
				}

				if(array[8] != null && !"".equals(array[8].toString())){
					CobrancaAcaoAtividadeComando atividadeComando = new CobrancaAcaoAtividadeComando();
					cobrancaAcaoAtividade.setDescricaoCobrancaAcao(array[8].toString());
					atividadeComando.setCobrancaAcao(cobrancaAcaoAtividade);
					cobrancaDocumento.setCobrancaAcaoAtividadeComando(atividadeComando);
				}

				// Sequencial Cobranca Documento
				if(array[9] != null){
					cobrancaDocumento.setNumeroSequenciaDocumento((Integer) array[9]);
				}

				if(array[10] != null){
					CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
					cobrancaAcaoSituacao.setId((Integer) array[10]);
					cobrancaAcaoSituacao.setDescricao((String) array[11]);

					cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
				}

				imoveisDocumentosCobranca.add(cobrancaDocumento);

			}// fim do while
		}
		return imoveisDocumentosCobranca;

	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a quantidade de documentos de
	 * cobrança do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosCobranca(Integer idImovel) throws ControladorException{

		Integer quantidadeDocumentosCobranca = null;
		try{

			quantidadeDocumentosCobranca = this.repositorioCobranca.consultarQuantidadeImovelDocumentosCobranca(idImovel);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return quantidadeDocumentosCobranca;
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a quantidade de documentos de
	 * itens de cobrança do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosItemCobranca(Integer idImovel) throws ControladorException{

		Integer quantidadeDocumentosCobrancaItem = null;
		try{

			quantidadeDocumentosCobrancaItem = this.repositorioCobranca.consultarQuantidadeImovelDocumentosItemCobranca(idImovel);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return quantidadeDocumentosCobrancaItem;
	}

	/**
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * [UC0477] Emitir Documento de Cobrança - Ordem de Supressão
	 * 
	 * @author Ana Maria
	 * @data 15/09/2006
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemSupressao(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo cobrancaGrupo, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		// LOGGER.info("********************");
		// LOGGER.info("INICIO SUPRESSÃO");
		// LOGGER.info("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		Collection colecaoEmitirDocumentoCobranca = null;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}
		while(!flagFimPesquisa){
			// map que armazena o sequencial e o numero da conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try{
				colecaoEmitirDocumentoCobranca = repositorioCobranca.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoEmitirDocumentoCobranca != null && !colecaoEmitirDocumentoCobranca.equals("")){

				// LOGGER.info("********************");
				LOGGER.info("QUANTIDADE COBRANÇA:" + colecaoEmitirDocumentoCobranca.size());
				// LOGGER.info("********************");

				if(colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if(colecaoEmitirDocumentoCobranca.size() % 2 == 0){
					metadeColecao = colecaoEmitirDocumentoCobranca.size() / 2;
				}else{
					metadeColecao = (colecaoEmitirDocumentoCobranca.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoEmitirDocumentoCobranca);

				if(mapCobrancaDocumentoOrdenada != null){
					int countOrdem = 0;
					EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
					while(countOrdem < mapCobrancaDocumentoOrdenada.size()){
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada.get(countOrdem);

						Iterator iteratorColecaoCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();
						while(iteratorColecaoCobrancaDocumento.hasNext()){

							int situacao = 0;
							emitirDocumentoCobrancaHelper = null;
							emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;

							/*
							 * Estes objetos auxiliarão na formatação da inscrição que será composta
							 * por informações do documento de cobrança e do
							 * imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;
							Localidade localidade = null;

							sequencialImpressao++;

							while(situacao < 2){
								if(situacao == 0){
									situacao = 1;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);

								}else{
									emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) mapCobrancaoDocumentoDivididas
													.get(emitirDocumentoCobrancaHelper);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(sequencialImpressao, situacao, metadeColecao);
								}

								if(emitirDocumentoCobrancaHelper != null){

									/*
									 * Objeto que será utilizado para armazenar as informações do
									 * documento de cobrança de acordo com o layout
									 * definido no caso de uso
									 */

									try{

										nomeCliente = this.repositorioClienteImovel
														.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper.getIdImovel());

										CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
										cobrancaDocumento.setId(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
														.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
										cobrancaDocumento = null;

									}catch(ErroRepositorioException ex){
										ex.printStackTrace();
										throw new ControladorException("erro.sistema", ex);
									}

									if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
										// Início do processo de geração do arquivo txt

										// LINHA 01
										// ==================================

										/*
										 * Canal ("1") Fonte ("3")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("3");

										cobrancaDocumentoTxt.append(Util.completaString("", 140));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 02
										// ==================================

										/*
										 * Canal (" ") Fonte ("4")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("4");

										cobrancaDocumentoTxt.append(Util.completaString("", 140));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 03
										// ==================================
										/*
										 * Canal (" ") Fonte (" ")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append(" ");

										cobrancaDocumentoTxt.append(Util.completaString("", 140));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 03
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 34));

										// Data de Validade
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											if(emitirDocumentoCobrancaHelper.getNumeroDiasValidade() != null){
												cobrancaDocumentoTxt.append(Util.formatarData(Util.adicionarNumeroDiasDeUmaData(
																emitirDocumentoCobrancaHelper.getEmissao(), emitirDocumentoCobrancaHelper
																				.getNumeroDiasValidade().intValue())));
											}else{
												cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
											}
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 13));

										cobrancaDocumentoTxt.append(Util.completaString("", 43));

										// Data de Validade
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											if(emitirDocumentoCobrancaHelper.getNumeroDiasValidade() != null){
												cobrancaDocumentoTxt.append(Util.formatarData(Util.adicionarNumeroDiasDeUmaData(
																emitirDocumentoCobrancaHelper.getEmissao(), emitirDocumentoCobrancaHelper
																				.getNumeroDiasValidade().intValue())));
											}else{
												cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
											}
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 13));

										cobrancaDocumentoTxt.append(Util.completaString("", 17));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 04
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										localidade = new Localidade();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(emitirDocumentoCobrancaHelper.getNumeroQuadra());
										setorComercialInscricao.setCodigo(emitirDocumentoCobrancaHelper.getCodigoSetorComercial());
										localidade.setId(emitirDocumentoCobrancaHelper.getIdLocalidade());
										inscricao.setLocalidade(localidade);
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(emitirDocumentoCobrancaHelper.getLote());
										inscricao.setSubLote(emitirDocumentoCobrancaHelper.getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 39));

										// Inscrição
										cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 39));

										cobrancaDocumentoTxt.append(Util.completaString("", 12));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 05
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										String enderecoFormatado = getControladorEndereco().pesquisarEnderecoFormatado(
														emitirDocumentoCobrancaHelper.getIdImovel());

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util.completaString("", 2));

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util.completaString("", 14));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 06
										// ==================================

										/*
										 * Canal (" ") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 11));

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoLocalidade(), 62));

										cobrancaDocumentoTxt.append(Util.completaString("", 2));

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoLocalidade(), 62));

										cobrancaDocumentoTxt.append(Util.completaString("", 3));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 07
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Quantidades de economias por categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Imovel imovel = new Imovel();
										imovel.setId(emitirDocumentoCobrancaHelper.getIdImovel());
										Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if(colecaoCategorias != null && !colecaoCategorias.isEmpty()){
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;

											while(iteratorColecaoCategorias.hasNext()){
												categoria = (Categoria) iteratorColecaoCategorias.next();

												if(categoria.getId().equals(Categoria.RESIDENCIAL)){
													qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.COMERCIAL)){
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
												}else if(categoria.getId().equals(Categoria.PUBLICO)){
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if(!qtdResidencial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Comercial
										if(!qtdComercial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Industrial
										if(!qtdIndustrial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Público
										if(!qtdPublico.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 6));

										// Data de Emissão
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 11));

										cobrancaDocumentoTxt.append(Util.completaString("", 11));

										// Residêncial
										if(!qtdResidencial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Comercial
										if(!qtdComercial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Industrial
										if(!qtdIndustrial.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Público
										if(!qtdPublico.equals("")){
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util.completaString("", 7));

										// Data de Emissão
										if(emitirDocumentoCobrancaHelper.getEmissao() != null){
											cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
														+ emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 5));

										cobrancaDocumentoTxt.append(Util.completaString("", 1));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 7));

										cobrancaDocumentoTxt.append(Util.completaString("", 16));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 08
										// ==================================
										/*
										 * Canal ("+") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("1");

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util
														.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper.getIdImovel());

										cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

										cobrancaDocumentoTxt.append(Util.completaString("", 66));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 09
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Selecionar os itens do documento de cobrança
										 * correspondentes a conta e ordenar por ano/mês de
										 * referência da
										 * conta
										 */
										if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											int countImpressao1 = colecaoCobrancaDocumentoItem.size() - 6;

											cobrancaDocumentoTxt.append(Util.completaString("", 1));
											/*
											 * Caso a quantidade de itens selecionados seja superior
											 * a 07 [SB0001 - Calcular Valor e Data de
											 * Vencimento Anterior]
											 * Caso contrário: Dados do primeiro item selecionado
											 */
											if(colecaoCobrancaDocumentoItem.size() > 7){

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
																.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 7);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt.append("DEB.ATE");

												cobrancaDocumentoTxt.append(Util.completaString("", 7));

												// Data de Vencimento anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
																.getDataVencimentoAnterior()));

												// Valor anterior retornado pelo [SB0001]
												cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util
																.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																				.getValorAnterior()), 16));

											}else{

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

												// Mês/Ano de referência da conta
												cobrancaDocumentoTxt.append(Util.completaString(
																Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																				.getConta().getReferencia()), 7));

												cobrancaDocumentoTxt.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt.append(Util.completaString("", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																.getConta().getDataVencimentoConta()));

												// Valor do item
												cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
																Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 16));

											}

											// Código da situação da ligação de água
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
															+ emitirDocumentoCobrancaHelper.getIdLigacaoAguaSituacao(), 9));

											// Código da situação da ligação do esgoto
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(""
															+ emitirDocumentoCobrancaHelper.getIdLigacaoEsgotoSituacao(), 5));

											cobrancaDocumentoTxt.append(Util.completaString("", 3));

											// Sequencial de impressão
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
															Util.retornaSequencialFormatado(sequencialImpressao), 11));

											cobrancaDocumentoTxt.append(Util.completaString("", 11));

											if(colecaoCobrancaDocumentoItem.size() > 7){

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
																.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 7);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt.append("DEB.ATE");

												cobrancaDocumentoTxt.append(Util.completaString("", 4));

												// Data de Vencimento anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
																.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt.append(Util.completaString("", 3));

											}else{

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

												// Mês/Ano de referência da conta
												cobrancaDocumentoTxt.append(Util.completaString(
																Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																				.getConta().getReferencia()), 7));

												cobrancaDocumentoTxt.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt.append(Util.completaString("", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																.getConta().getDataVencimentoConta()));
											}

											cobrancaDocumentoTxt.append(Util.completaString("", 35));

											cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

											// LINHA 10
											// ==================================

											/*
											 * Canal (" ") Fonte ("2")
											 */

											if(countImpressao1 <= 0){
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
												cobrancaDocumentoItem = null;

												int countRegistros = 0;

												while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
																	.next();

													if(countRegistros > 0){

														cobrancaDocumentoTxt.append(" ");
														cobrancaDocumentoTxt.append("2");

														// Mês/Ano de referência da conta
														cobrancaDocumentoTxt.append(Util.completaString(
																		Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																						.getConta().getReferencia()), 7));

														cobrancaDocumentoTxt.append(".");

														// Dígito verificador da conta
														cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt.append(Util.completaString("", 7));

														// Data de vencimento da conta
														cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																		.getConta().getDataVencimentoConta()));

														cobrancaDocumentoTxt.append(Util.completaString("", 1));

														// Valor do item
														cobrancaDocumentoTxt
																		.append(Util.completaStringComEspacoAEsquerda(Util
																						.formatarMoedaReal(cobrancaDocumentoItem
																										.getValorItemCobrado()), 13));

														cobrancaDocumentoTxt.append(Util.completaString("", 38));

														// Mês/Ano de referência da conta
														cobrancaDocumentoTxt.append(Util.completaString(
																		Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																						.getConta().getReferencia()), 7));

														cobrancaDocumentoTxt.append(".");

														// Dígito verificador da conta
														cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt.append(Util.completaString("", 4));

														// Data de vencimento da conta
														cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																		.getConta().getDataVencimentoConta()));

														cobrancaDocumentoTxt.append(Util.completaString("", 39));

														cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
													}
													countRegistros++;
												}

											}else{
												while(countImpressao1 < colecaoCobrancaDocumentoItem.size()){
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
																	.get(countImpressao1);
													cobrancaDocumentoTxt.append(" ");
													cobrancaDocumentoTxt.append("2");

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt.append(Util.completaString(
																	Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																					.getConta().getReferencia()), 7));

													cobrancaDocumentoTxt.append(".");

													// Dígito verificador da
													// conta
													cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt.append(Util.completaString("", 7));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																	.getConta().getDataVencimentoConta()));

													cobrancaDocumentoTxt.append(Util.completaString("", 1));

													// Valor do item
													cobrancaDocumentoTxt
																	.append(Util.completaStringComEspacoAEsquerda(Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																									.getValorItemCobrado()), 13));

													cobrancaDocumentoTxt.append(Util.completaString("", 38));

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt.append(Util.completaString(
																	Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral()
																					.getConta().getReferencia()), 7));

													cobrancaDocumentoTxt.append(".");

													// Dígito verificador da
													// conta
													cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt.append(Util.completaString("", 4));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																	.getConta().getDataVencimentoConta()));

													cobrancaDocumentoTxt.append(Util.completaString("", 39));

													cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

													countImpressao1++;
												}
											}
										}

										// LINHA 11
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util.completaString("", 22));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 18));

										cobrancaDocumentoTxt.append(Util.completaString("", 100));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 12
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 64));

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 20));

										cobrancaDocumentoTxt.append(Util.completaString("", 56));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 13
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 140));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 14
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 89));

										String numeroHidrometro = getControladorAtendimentoPublico().pesquisarNumeroHidrometroLigacaoAgua(
														emitirDocumentoCobrancaHelper.getIdImovel());

										// Número Hidrômetro
										if(numeroHidrometro != null){
											cobrancaDocumentoTxt.append(Util.completaString(numeroHidrometro, 10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util.completaString("", 7));

										Object[] dadosLigacaoAgua = null;

										// Dados da Ligação de Água(a partir da tabela LIGACAO_AGUA
										// lagu_id=imov_id da tabela IMOVEL)
										dadosLigacaoAgua = getControladorAtendimentoPublico().pesquisarDadosLigacaoAgua(
														emitirDocumentoCobrancaHelper.getIdImovel());

										if(dadosLigacaoAgua != null){
											if(dadosLigacaoAgua[1] != null){
												// Data do Corte(lagu_dtcorte)
												cobrancaDocumentoTxt.append(Util.completaString((String) dadosLigacaoAgua[1], 10));
											}else{
												cobrancaDocumentoTxt.append(Util.completaString("", 10));
											}
											cobrancaDocumentoTxt.append(Util.completaString("", 2));

											if(dadosLigacaoAgua[0] != null){
												// Tipo da ligação de água(cotp_id)
												cobrancaDocumentoTxt.append(Util.completaString(("" + (Integer) dadosLigacaoAgua[0]), 8));
											}else{
												cobrancaDocumentoTxt.append(Util.completaString("", 8));
											}
											cobrancaDocumentoTxt.append(Util.completaString("", 14));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 34));
										}

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

										// LINHA 15
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util.completaString("", 5));

										// Código, Sigla e Descrição da Gerência Regional
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(emitirDocumentoCobrancaHelper
														.getIdGerencia().toString(), 4));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt.append(Util.completaString(
														emitirDocumentoCobrancaHelper.getNomeAbreviadoGerencia(), 3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
														.append(Util.completaString(emitirDocumentoCobrancaHelper.getNomeGerencia(), 28));

										// Constante
										cobrancaDocumentoTxt.append("EXECUTOR");

										// Descrição da empresa
										if(emitirDocumentoCobrancaHelper.getIdEmpresa() != null){
											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt.append(Util.completaString(
															emitirDocumentoCobrancaHelper.getDescricaoEmpresa(), 47));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 48));
										}

										cobrancaDocumentoTxt.append("SEQ.");

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.retornaSequencialFormatado(sequencialImpressao), 9));

										// Descrição da empresa
										if(emitirDocumentoCobrancaHelper.getIdEmpresa() != null){
											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt.append(Util.completaString(
															emitirDocumentoCobrancaHelper.getDescricaoEmpresa(), 28));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 29));
										}

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

									}
									// adiciona o id da conta e o sequencial no para serem
									// atualizados
									mapAtualizaSequencial.put(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca(), sequencialImpressao);
									colecaoCobrancaDocumentoItem = null;
								}
							}
						}
						mapCobrancaoDocumentoDivididas = null;
						countOrdem++;
					}
					mapCobrancaDocumentoOrdenada = null;
				}
			}else{
				flagFimPesquisa = true;
			}
			try{
				repositorioCobranca.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;

			colecaoEmitirDocumentoCobranca = null;
		}
		// LOGGER.info("********************");
		// LOGGER.info("FIM SUPRESSÃO");
		// LOGGER.info("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
		if(idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_PARCIAL)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_SUPRESSAO_PARCIAL_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}

		}else{
			if(idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_TOTAL)){
				if(idCronogramaAtividadeAcaoCobranca != null){
					nomeZip = "ORDEM_SUPRESSAO_TOTAL_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
				}else{
					String descricaoAbrevDocumentoTipo = "";
					if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
						descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}
			}
		}

		try{

			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				cobrancaDocumentoTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			// LOGGER.info("********************");
			// LOGGER.info("FIM GERAÇÃO ARQUIVO");
			// LOGGER.info("********************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Pesquisa os dados do parcelamento necessários para o relatório através do
	 * id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * @author Saulo Lima
	 * @date 23/07/2009
	 *       Identação + quantidade de contas + guias
	 * @return ParcelamentoRelatorioHelper
	 * @throws ControladorException
	 */
	public ParcelamentoRelatorioHelper pesquisarParcelamentoRelatorio(Integer idParcelamento) throws ControladorException{

		Collection colecaoParcelamentos = null;
		ParcelamentoRelatorioHelper parcelamentoRelatorioHelper = null;
		Collection colecaoConta = null;

		FiltroParcelamentoItem filtroParcelamentoItem = new FiltroParcelamentoItem();
		filtroParcelamentoItem.adicionarParametro(new ParametroSimples(FiltroParcelamentoItem.PARCELAMENTO_ID, idParcelamento));
		filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral");

		Collection<ParcelamentoItem> colecaoParcelamentoItem = this.getControladorUtil().pesquisar(filtroParcelamentoItem,
						ParcelamentoItem.class.getName());

		Collection<ContaHistorico> colecaoAnoMesReferenciasContaHistorico = new ArrayList<ContaHistorico>();
		Collection<ParcelamentoItem> colecaoParcelamentoItemGuiaPagamento = new ArrayList<ParcelamentoItem>();

		for(Iterator<ParcelamentoItem> iterator = colecaoParcelamentoItem.iterator(); iterator.hasNext();){

			ParcelamentoItem parcItem = iterator.next();

			// Se item por Conta
			if(parcItem.getContaGeral() != null && parcItem.getContaGeral().getContaHistorico() != null){
				colecaoAnoMesReferenciasContaHistorico.add(parcItem.getContaGeral().getContaHistorico());

				// Se item for Guia
			}else if(parcItem.getGuiaPagamentoGeral() != null && parcItem.getGuiaPagamentoGeral().getId() != null
							&& parcItem.getNumeroPrestacao() != null){
				colecaoParcelamentoItemGuiaPagamento.add(parcItem);
			}
		}

		String colecaoAnoMesReferencia = "";
		String colecaoAnoMesReferenciaSobra = "";
		String inicioPeriodoFornecimento = "";
		String fimPeriodoFornecimento = "";
		int contadorConta = 0;
		int primeiroConta = 0;
		int contadorContaSobra = 0;

		// Para todas as contas parceladas
		if(!colecaoAnoMesReferenciasContaHistorico.isEmpty()){

			// ordenar colecao de forma decrescente
			List sortFields = new ArrayList();
			sortFields.add(new BeanComparator(FiltroContaHistorico.ANO_MES_REFERENCIA));
			ComparatorChain multiSort = new ComparatorChain(sortFields);
			multiSort.setReverseSort(0);
			Collections.sort((List) colecaoAnoMesReferenciasContaHistorico, multiSort);

			for(ContaHistorico contaHistorico : colecaoAnoMesReferenciasContaHistorico){
				contadorConta++;
				primeiroConta++;
				Integer anoMes = contaHistorico.getAnoMesReferenciaConta();

				// AnoMes Inicial do Fornecimento
				inicioPeriodoFornecimento = Util.formatarAnoMesParaMesAno(anoMes);

				// Caso tenha mais de 60 ano mes reg, adiciona nessa lista auxiliar se tiver menos,
				// adiciona na lista principal.
				if(contadorConta <= 60){

					// Se tem mais elementos, adiciona a virgula
					if(primeiroConta == 1){
						colecaoAnoMesReferencia = Util.formatarAnoMesParaMesAno(anoMes);
						// AnoMes final do Fornecimento
						fimPeriodoFornecimento = Util.formatarAnoMesParaMesAno(anoMes);
					}else{
						colecaoAnoMesReferencia += ", " + Util.formatarAnoMesParaMesAno(anoMes);
					}
				}else{
					contadorContaSobra++;
				}
			}

			// Se houver mais de 60 ano mes ref, adicionar esse comentário no final do relatório com
			// o somatório da sobra.
			if(contadorConta > 60){
				colecaoAnoMesReferenciaSobra = "e mais " + contadorContaSobra + " débitos.";
			}
		}

		String detalhamentoGuiasPrestacoes = "";
		String detalhamentoGuiasPrestacoesSobra = "";
		int contadorGuia = 0;
		int contadorGuiaSobra = 0;

		// Para todas as Guias parceladas
		if(!colecaoParcelamentoItemGuiaPagamento.isEmpty()){

			// ordenar colecao de forma decrescente
			List sortFields = new ArrayList();
			sortFields.add(new BeanComparator(FiltroParcelamentoItem.GUIA_PAGAMENTO_GERAL_ID));
			sortFields.add(new BeanComparator(FiltroParcelamentoItem.NUMERO_PRESTACAO));
			ComparatorChain multiSort = new ComparatorChain(sortFields);

			Collections.sort((List) colecaoParcelamentoItemGuiaPagamento, Collections.reverseOrder(multiSort));

			for(ParcelamentoItem parcelamentoItem : colecaoParcelamentoItemGuiaPagamento){

				contadorGuia++;
				String identificadorPrestacao = parcelamentoItem.getGuiaPagamentoGeral().getId().toString() + "/"
								+ parcelamentoItem.getNumeroPrestacao().toString();

				// Caso tenha mais de 60 prestações, não exibir
				if(contadorGuia <= 60){

					// Se tem mais elementos, adiciona a virgula
					if(contadorGuia == 1){
						detalhamentoGuiasPrestacoes = identificadorPrestacao;
					}else{
						detalhamentoGuiasPrestacoes += ", " + identificadorPrestacao;
					}
				}else{
					contadorGuiaSobra++;
				}
			}

			// Se houver mais de 60 prestações de guia
			if(contadorGuia > 60){
				detalhamentoGuiasPrestacoesSobra = " e mais " + contadorGuiaSobra + "prestações de guias de pagamento.";
			}
		}

		try{

			colecaoParcelamentos = repositorioCobranca.pesquisarParcelamentoRelatorio(idParcelamento);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoParcelamentos != null && !colecaoParcelamentos.isEmpty()){
			Iterator colecaoParcelamentosIterator = colecaoParcelamentos.iterator();

			// dados da conta
			while(colecaoParcelamentosIterator.hasNext()){
				parcelamentoRelatorioHelper = new ParcelamentoRelatorioHelper();

				Object[] dadosParcelamento = (Object[]) colecaoParcelamentosIterator.next();

				// Cria as variáveis do total de débitos e do total de descontos
				// para ser acrescido de cada débito e desconto existente
				BigDecimal totalDebitos = BigDecimal.ZERO;

				BigDecimal totalDescontos = BigDecimal.ZERO;

				if(dadosParcelamento[0] != null){// 0
					// Imóvel
					parcelamentoRelatorioHelper.setIdImovel(new Integer(dadosParcelamento[0].toString()));

				}

				if(dadosParcelamento[1] != null){// 1
					// Nome do Município
					parcelamentoRelatorioHelper.setNomeMunicipio(dadosParcelamento[1].toString());
				}else if(dadosParcelamento[36] != null){// 36
					parcelamentoRelatorioHelper.setNomeMunicipio(dadosParcelamento[36].toString());
				}

				if(dadosParcelamento[2] != null){// 2
					// Data do Parcelamento
					parcelamentoRelatorioHelper.setDataParcelamento((Date) dadosParcelamento[2]);
				}

				// Débitos
				if(dadosParcelamento[3] != null){// 3
					// Valor das Faturas em Aberto
					parcelamentoRelatorioHelper.setValorFaturasEmAberto((BigDecimal) dadosParcelamento[3]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorFaturasEmAberto());
				}else{
					parcelamentoRelatorioHelper.setValorFaturasEmAberto(BigDecimal.ZERO);
				}

				if(dadosParcelamento[4] != null){// 4
					// Valor dos Serviços A Cobrar
					parcelamentoRelatorioHelper.setValorServicosACobrar((BigDecimal) dadosParcelamento[4]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorServicosACobrar());
				}else{
					parcelamentoRelatorioHelper.setValorServicosACobrar(BigDecimal.ZERO);
				}

				if(dadosParcelamento[5] != null){// 5
					// Valor das Atualizações Monetárias
					parcelamentoRelatorioHelper.setValorAtualizacaoMonetaria((BigDecimal) dadosParcelamento[5]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorAtualizacaoMonetaria());
				}else{
					parcelamentoRelatorioHelper.setValorAtualizacaoMonetaria(BigDecimal.ZERO);
				}

				if(dadosParcelamento[6] != null){// 6
					// Valor dos Juros/Mora
					parcelamentoRelatorioHelper.setValorJurosMora((BigDecimal) dadosParcelamento[6]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorJurosMora());
				}else{
					parcelamentoRelatorioHelper.setValorJurosMora(BigDecimal.ZERO);
				}

				if(dadosParcelamento[7] != null){// 7
					// Valor das Multas
					parcelamentoRelatorioHelper.setValorMultas((BigDecimal) dadosParcelamento[7]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorMultas());
				}else{
					parcelamentoRelatorioHelper.setValorMultas(BigDecimal.ZERO);
				}

				if(dadosParcelamento[8] != null){// 8
					// Valor das Guais de Pagamento
					parcelamentoRelatorioHelper.setValorGuiaPagamento((BigDecimal) dadosParcelamento[8]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorGuiaPagamento());
				}else{
					parcelamentoRelatorioHelper.setValorGuiaPagamento(BigDecimal.ZERO);
				}

				if(dadosParcelamento[9] != null){// 9
					// Valor do Parcelamento a Cobrar
					parcelamentoRelatorioHelper.setValorParcelamentoACobrar((BigDecimal) dadosParcelamento[9]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper.getValorParcelamentoACobrar());
				}else{
					parcelamentoRelatorioHelper.setValorParcelamentoACobrar(BigDecimal.ZERO);
				}

				// Seta o valor do total dos débitos, pois todos os dados de débito já foram
				// passados
				parcelamentoRelatorioHelper.setValorTotalDebitos(totalDebitos);

				// Descontos/Créditos
				if(dadosParcelamento[10] != null){// 10
					// Valor dos Descontos de Acréscimo
					parcelamentoRelatorioHelper.setValorDescontoAcrescimo((BigDecimal) dadosParcelamento[10]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoAcrescimo());
				}else{
					parcelamentoRelatorioHelper.setValorDescontoAcrescimo(BigDecimal.ZERO);
				}

				if(dadosParcelamento[11] != null){// 11
					// Valor dos Descontos de Antiguidade
					parcelamentoRelatorioHelper.setValorDescontoAntiguidade((BigDecimal) dadosParcelamento[11]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoAntiguidade());
				}else{
					parcelamentoRelatorioHelper.setValorDescontoAntiguidade(BigDecimal.ZERO);
				}

				if(dadosParcelamento[12] != null){// 12
					// Valor dos Descontos de Inatividade
					parcelamentoRelatorioHelper.setValorDescontoInatividade((BigDecimal) dadosParcelamento[12]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoInatividade());
				}else{
					parcelamentoRelatorioHelper.setValorDescontoInatividade(BigDecimal.ZERO);
				}

				if(dadosParcelamento[13] != null){// 13
					// Valor dos Créditos a Realizar
					parcelamentoRelatorioHelper.setValorCreditosRealizar((BigDecimal) dadosParcelamento[13]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorCreditosRealizar());
				}else{
					parcelamentoRelatorioHelper.setValorCreditosRealizar(BigDecimal.ZERO);
				}

				if(dadosParcelamento[24] != null){// 24
					// Valor Desconto de Sanções Regulamentares
					parcelamentoRelatorioHelper.setValorDescontoSancoesRegulamentares((BigDecimal) dadosParcelamento[24]);

					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoSancoesRegulamentares());

				}else{
					parcelamentoRelatorioHelper.setValorDescontoSancoesRegulamentares(BigDecimal.ZERO);
				}

				if(dadosParcelamento[25] != null){// 25
					// Valor Desconto de Sanções Regulamentares
					parcelamentoRelatorioHelper.setValorDescontoTarifaSocial((BigDecimal) dadosParcelamento[25]);

					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoTarifaSocial());

				}else{
					parcelamentoRelatorioHelper.setValorDescontoTarifaSocial(BigDecimal.ZERO);
				}

				// Seta o valor do total dos descontos/créditos, pois todos os dados de
				// desconto/crédito já foram passados
				parcelamentoRelatorioHelper.setValorTotalDescontos(totalDescontos);

				if(dadosParcelamento[14] != null){// 14
					// Valor a Ser Negociado
					parcelamentoRelatorioHelper.setValorASerNegociado((BigDecimal) dadosParcelamento[14]);
				}else{
					parcelamentoRelatorioHelper.setValorASerNegociado(BigDecimal.ZERO);
				}

				if(dadosParcelamento[15] != null){// 15
					// Valor da Entrada
					parcelamentoRelatorioHelper.setValorEntrada((BigDecimal) dadosParcelamento[15]);
				}else{
					parcelamentoRelatorioHelper.setValorEntrada(BigDecimal.ZERO);
				}

				if(dadosParcelamento[16] != null){// 16
					// Número de Parcelas
					parcelamentoRelatorioHelper.setNumeroParcelas(new Integer(dadosParcelamento[16].toString()));
				}

				if(dadosParcelamento[17] != null){// 17
					// Valor da Parcela
					parcelamentoRelatorioHelper.setValorParcela((BigDecimal) dadosParcelamento[17]);
					// Valor a Ser Parcelado
					BigDecimal valorASerParcelado = parcelamentoRelatorioHelper.getValorParcela();
					valorASerParcelado = valorASerParcelado.multiply(new BigDecimal(parcelamentoRelatorioHelper.getNumeroParcelas()
									.toString()));
					parcelamentoRelatorioHelper.setValorASerParcelado(valorASerParcelado);
				}else{
					parcelamentoRelatorioHelper.setValorParcela(BigDecimal.ZERO);
					parcelamentoRelatorioHelper.setValorASerParcelado(BigDecimal.ZERO);
				}

				// Valor Negociado (Utilizado no Layout 2)
				if(parcelamentoRelatorioHelper.getValorEntrada() != null && parcelamentoRelatorioHelper.getNumeroParcelas() != null
								&& parcelamentoRelatorioHelper.getValorParcela() != null){

					// Total Negociado = vlParcela * nuParcelas + vlEntrada
					BigDecimal totalNegociado = parcelamentoRelatorioHelper.getValorParcela()
									.multiply(BigDecimal.valueOf(parcelamentoRelatorioHelper.getNumeroParcelas()))
									.add(parcelamentoRelatorioHelper.getValorEntrada());

					parcelamentoRelatorioHelper.setTotalNegociado(totalNegociado);

				}

				if(dadosParcelamento[18] != null){// 18
					// Indicador Restabelecimento
					if((new Integer(dadosParcelamento[18].toString())).equals(ConstantesSistema.SIM)){
						parcelamentoRelatorioHelper.setSolicitacaoRestabelecimento("SIM");
					}else{
						parcelamentoRelatorioHelper.setSolicitacaoRestabelecimento("NÃO");
					}
				}else{
					parcelamentoRelatorioHelper.setSolicitacaoRestabelecimento("");
				}

				if(dadosParcelamento[19] != null){// 19
					// Id do Funcionário
					parcelamentoRelatorioHelper.setIdFuncionario(new Integer(dadosParcelamento[19].toString()));
				}else if(dadosParcelamento[26] != null){// 26
					// Id do Funcionário
					parcelamentoRelatorioHelper.setIdFuncionario(new Integer(dadosParcelamento[26].toString()));
				}

				// Localidade
				if(dadosParcelamento[27] != null){// 27
					parcelamentoRelatorioHelper.setDescricaoLocalidade((String) dadosParcelamento[27]);
				}

				// Localidade
				if(dadosParcelamento[28] != null){// 28
					parcelamentoRelatorioHelper.setImovelDiaVencimento(new Short(dadosParcelamento[28].toString()));
				}else if(dadosParcelamento[31] != null){
					parcelamentoRelatorioHelper.setImovelDiaVencimento(new Short(dadosParcelamento[31].toString()));
				}

				// Cliente id
				if(dadosParcelamento[29] != null){// 29
					parcelamentoRelatorioHelper.setIdCliente(new Integer(dadosParcelamento[29].toString()));
				}

				// Data entrada do parcelamento
				if(dadosParcelamento[30] != null){// 30
					parcelamentoRelatorioHelper.setDataEntradaParcelamento((Date) dadosParcelamento[30]);
				}

				// ANO/MES REFERENCIA DEBITO INICIAL PARCELAMENTO
				if(dadosParcelamento[33] != null){// 33
					parcelamentoRelatorioHelper.setAnoMesReferenciaDebitoInicial(new Integer(dadosParcelamento[33].toString()));
				}

				// ANO/MES REFERENCIA DEBITO FINAL PARCELAMENTO
				if(dadosParcelamento[34] != null){// 34
					parcelamentoRelatorioHelper.setAnoMesReferenciaDebitoFinal(new Integer(dadosParcelamento[34].toString()));
				}

				// Indicador de Pessoa Física ou Jurídica
				if(dadosParcelamento[35] != null){// 35
					parcelamentoRelatorioHelper.setIndicadorPessoaFisicaJuridica(Short.valueOf(dadosParcelamento[35].toString()));
				}

				// AnoMesReferencia
				parcelamentoRelatorioHelper.setColecaoAnoMesReferencia(colecaoAnoMesReferencia);

				// AnoMesReferenciaSobra
				parcelamentoRelatorioHelper.setColecaoAnoMesReferenciaSobra(colecaoAnoMesReferenciaSobra);

				// Número de Contas
				parcelamentoRelatorioHelper.setNumeroContas(contadorConta + contadorContaSobra);

				// AnoMes Inicio Fornecimento
				parcelamentoRelatorioHelper.setInicioPeriodoFornecimento(inicioPeriodoFornecimento);

				// AnoMes Final Fornecimento
				parcelamentoRelatorioHelper.setFimPeriodoFornecimento(fimPeriodoFornecimento);

				// DetalhamentoGuiasPrestacoes
				parcelamentoRelatorioHelper.setDetalhamentoGuiasPrestacoes(detalhamentoGuiasPrestacoes);

				// DetalhamentoGuiasPrestacoesSobra
				parcelamentoRelatorioHelper.setDetalhamentoGuiasPrestacoesSobra(detalhamentoGuiasPrestacoesSobra);

				if(dadosParcelamento[20] != null){// 20
					// Nome do Cliente do Parcelamento
					parcelamentoRelatorioHelper.setNomeClienteParcelamento((String) dadosParcelamento[20]);
				}else{
					parcelamentoRelatorioHelper.setNomeClienteParcelamento("");
				}

				if(dadosParcelamento[21] != null && !((String) dadosParcelamento[21]).equals("")){// 21
					// CPF do Cliente do Parcelamento
					String cpfFormatado = (String) dadosParcelamento[21];

					if(cpfFormatado.length() < 11){
						throw new ControladorException("atencao.campo.invalido", null, "CPF");
					}

					cpfFormatado = cpfFormatado.substring(0, 3) + "." + cpfFormatado.substring(3, 6) + "." + cpfFormatado.substring(6, 9)
									+ "-" + cpfFormatado.substring(9, 11);

					parcelamentoRelatorioHelper.setCpfClienteParcelamento(cpfFormatado);

				}else if(dadosParcelamento[22] != null && !((String) dadosParcelamento[22]).equals("")){// 21

					// CNPJ do Cliente do Parcelamento
					String cnpjFormatado = (String) dadosParcelamento[22];
					String zeros = "";

					for(int a = 0; a < (14 - cnpjFormatado.length()); a++){
						zeros = zeros.concat("0");
					}

					// concatena os zeros ao numero caso o numero seja diferente de nulo
					cnpjFormatado = zeros.concat(cnpjFormatado);

					cnpjFormatado = cnpjFormatado.substring(0, 2) + "." + cnpjFormatado.substring(2, 5) + "."
									+ cnpjFormatado.substring(5, 8) + "/" + cnpjFormatado.substring(8, 12) + "-"
									+ cnpjFormatado.substring(12, 14);

					parcelamentoRelatorioHelper.setCpfClienteParcelamento(cnpjFormatado);
				}else{
					parcelamentoRelatorioHelper.setCpfClienteParcelamento("");
				}

				if(dadosParcelamento[32] != null){
					// ValorJurosParcelamento
					parcelamentoRelatorioHelper.setValorJurosParcelamento((BigDecimal) dadosParcelamento[32]);
				}else{
					parcelamentoRelatorioHelper.setValorJurosParcelamento(BigDecimal.ZERO);
				}

				if(dadosParcelamento[23] != null){
					// taxaJuros
					parcelamentoRelatorioHelper.setTaxaJuros(Util.formatarMoedaReal((BigDecimal) dadosParcelamento[23]));
				}else{
					parcelamentoRelatorioHelper.setTaxaJuros("0,00");
				}

				String rgClienteParcelamento = "";
				Cliente clienteParcelamento = getControladorCliente().pesquisarDadosClienteDoParcelamentoRelatorioParcelamento(
								idParcelamento);

				if(clienteParcelamento != null){

					if(clienteParcelamento.getRg() != null){
						if(clienteParcelamento.getOrgaoExpedidorRg() != null && clienteParcelamento.getUnidadeFederacao() != null){
							rgClienteParcelamento = clienteParcelamento.getRg().trim() + "-"
											+ clienteParcelamento.getOrgaoExpedidorRg().getDescricaoAbreviada().trim() + "/"
											+ clienteParcelamento.getUnidadeFederacao().getSigla();
						}else{
							rgClienteParcelamento = clienteParcelamento.getRg().trim();
						}
					}
					parcelamentoRelatorioHelper.setRgClienteParcelamento(rgClienteParcelamento);
				}

				// Endereço
				String endereco = getControladorEndereco().pesquisarEndereco(parcelamentoRelatorioHelper.getIdImovel());
				parcelamentoRelatorioHelper.setEndereco(endereco);

				// Dados do Cliente
				Cliente cliente = getControladorCliente().pesquisarDadosClienteRelatorioParcelamentoPorImovel(
								parcelamentoRelatorioHelper.getIdImovel());

				// Endereço abreviado
				String enderecoAbreviado = getControladorEndereco().pesquisarEnderecoClienteAbreviado(cliente.getId(), true);
				if(enderecoAbreviado != null && !enderecoAbreviado.equals("")){
					enderecoAbreviado = enderecoAbreviado.replace("-", "");
				}
				parcelamentoRelatorioHelper.setEnderecoAbreviado(enderecoAbreviado);

				// CEP
				FiltroImovel filtroImovel = new FiltroImovel();
				filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CEP);
				filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, parcelamentoRelatorioHelper.getIdImovel()));
				Collection colecaoImovelAux = getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());
				Imovel imovelAux = (Imovel) Util.retonarObjetoDeColecao(colecaoImovelAux);
				String cep = imovelAux.getLogradouroCep().getCep().getCepFormatado();
				parcelamentoRelatorioHelper.setCep(cep);

				// NomeRepositorio
				parcelamentoRelatorioHelper.setNomeCliente(cliente.getNome());

				// RG
				parcelamentoRelatorioHelper.setRgCliente(cliente.getRg());

				// CPF/CNPJ
				if(cliente.getCpf() != null){
					parcelamentoRelatorioHelper.setCpfCnpj(cliente.getCpfFormatado());
				}else if(cliente.getCnpj() != null){
					parcelamentoRelatorioHelper.setCpfCnpj(cliente.getCnpjFormatado());
				}else{
					parcelamentoRelatorioHelper.setCpfCnpj("");
				}

				if(cliente.getOrgaoExpedidorRg() != null && cliente.getOrgaoExpedidorRg().getDescricao() != null){
					parcelamentoRelatorioHelper.setDescOrgaoExpRgCliente(cliente.getOrgaoExpedidorRg().getDescricao());
				}

				if(cliente.getUnidadeFederacao() != null && cliente.getUnidadeFederacao().getSigla() != null){
					parcelamentoRelatorioHelper.setSiglaUnidadeFederacaoRgCliente(cliente.getUnidadeFederacao().getSigla());
				}

				// Telefone
				Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFone(cliente.getId());

				ClienteFone clienteFone = null;

				if(colecaoClienteFone != null && !colecaoClienteFone.isEmpty()){

					Iterator colecaoClienteFoneIterator = colecaoClienteFone.iterator();

					while(colecaoClienteFoneIterator.hasNext()){
						clienteFone = (ClienteFone) colecaoClienteFoneIterator.next();

						if(clienteFone.getIndicadorTelefonePadrao() != null
										&& clienteFone.getIndicadorTelefonePadrao().equals(ClienteFone.INDICADOR_FONE_PADRAO)){
							break;
						}
					}

					parcelamentoRelatorioHelper.setTelefone(clienteFone.getDddTelefone());

				}else{
					parcelamentoRelatorioHelper.setTelefone("");
				}

				Integer anoMesReferenciaFaturamentoGrupo = getControladorFaturamento().pesquisarAnoMesReferenciaFaturamentoGrupo(
								(Integer) parcelamentoRelatorioHelper.getIdImovel());

				int numeroParcelasMenosUm = parcelamentoRelatorioHelper.getNumeroParcelas().intValue() - 1;

				parcelamentoRelatorioHelper.setMesAnoInicioParcelamento(Util.formatarAnoMesParaMesAno(anoMesReferenciaFaturamentoGrupo));
				parcelamentoRelatorioHelper.setMesAnoFinalParcelamento(Util.formatarAnoMesParaMesAno(Util.somaMesAnoMesReferencia(
								anoMesReferenciaFaturamentoGrupo, numeroParcelasMenosUm)));

				if(parcelamentoRelatorioHelper.getIdImovel() != null){

					ClienteImovel clienteImovel = this.getControladorImovel().pesquisarClienteProprietarioImovel(
									parcelamentoRelatorioHelper.getIdImovel());

					parcelamentoRelatorioHelper.setNomeProprietarioImovel(clienteImovel.getCliente().getNome());
					parcelamentoRelatorioHelper.setCpfProprietarioImovel(Util.formatarCpf(clienteImovel.getCliente().getCpf()));

				}

			}
		}

		return parcelamentoRelatorioHelper;
	}

	/**
	 * Pesquisa os itens do parcelamento necessários para o relatório através do id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarParcelamentoItemPorIdParcelamentoRelatorio(Integer idParcelamento) throws ControladorException{

		Collection colecaoParcelamentosItens = null;
		Collection colecaoParcelamentosItensRelatorio = null;

		try{

			colecaoParcelamentosItens = this.repositorioCobranca.pesquisarParcelamentoItemPorIdParcelamentoRelatorio(idParcelamento);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoParcelamentosItens != null && !colecaoParcelamentosItens.isEmpty()){

			colecaoParcelamentosItensRelatorio = new ArrayList();

			Iterator colecaoParcelamentosItensIterator = colecaoParcelamentosItens.iterator();

			while(colecaoParcelamentosItensIterator.hasNext()){

				Object[] dadosParcelamentoItem = (Object[]) colecaoParcelamentosItensIterator.next();

				ParcelamentoItem parcelamentoItem = new ParcelamentoItem();

				// Dados das Contas
				ContaGeral contaGeral = new ContaGeral();
				Conta conta = new Conta();

				// Referência da Conta
				if(dadosParcelamentoItem[0] != null){ // 0
					conta.setReferencia(((Integer) dadosParcelamentoItem[0]).intValue());
				}

				// Valor de Água da Conta
				if(dadosParcelamentoItem[1] != null){ // 1
					conta.setValorAgua((BigDecimal) dadosParcelamentoItem[1]);
				}

				// Valor de Esgoto da Conta
				if(dadosParcelamentoItem[2] != null){ // 2
					conta.setValorEsgoto((BigDecimal) dadosParcelamentoItem[2]);
				}

				// Valor dos Débitos da Conta
				if(dadosParcelamentoItem[3] != null){ // 3
					conta.setDebitos((BigDecimal) dadosParcelamentoItem[3]);
				}

				// Valor dos Créditos da Conta
				if(dadosParcelamentoItem[4] != null){ // 4
					conta.setValorCreditos((BigDecimal) dadosParcelamentoItem[4]);
				}

				contaGeral.setConta(conta);
				parcelamentoItem.setContaGeral(contaGeral);

				// Dados das Guias de Pagamento
				GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
				GuiaPagamento guiaPagamento = new GuiaPagamento();
				DebitoTipo debitoTipoGuiaPagamento = new DebitoTipo();

				// Id da Guia de Pagamento
				if(dadosParcelamentoItem[5] != null){ // 5
					guiaPagamento.setId((Integer) dadosParcelamentoItem[5]);
				}

				// Descrição do Tipo de Débito das Guias Pagamento
				if(dadosParcelamentoItem[6] != null){ // 6
					debitoTipoGuiaPagamento.setDescricao((String) dadosParcelamentoItem[6]);

				}

				// guiaPagamento.setDebitoTipo(debitoTipoGuiaPagamento);

				// Valor das Guias de Pagamento
				if(dadosParcelamentoItem[7] != null){ // 7
					guiaPagamento.setValorDebito((BigDecimal) dadosParcelamentoItem[7]);
				}

				guiaPagamentoGeral.setGuiaPagamento(guiaPagamento);
				parcelamentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);

				// Dados do Débito a Cobrar
				DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
				DebitoACobrar debitoACobrar = new DebitoACobrar();
				DebitoTipo debitoTipoDebitoACobrar = new DebitoTipo();

				// Id do Tipo de Débito dos Débitos a Cobrar
				if(dadosParcelamentoItem[8] != null){ // 8
					debitoTipoDebitoACobrar.setId((Integer) dadosParcelamentoItem[8]);
				}

				// Descrição do Tipo de Débito dos Débitos a Cobrar
				if(dadosParcelamentoItem[9] != null){ // 9
					debitoTipoDebitoACobrar.setDescricao((String) dadosParcelamentoItem[9]);
				}

				debitoACobrar.setDebitoTipo(debitoTipoDebitoACobrar);

				// Número de Prestações do Débito a Cobrar
				if(dadosParcelamentoItem[10] != null){ // 10
					debitoACobrar.setNumeroPrestacaoDebito(((Short) dadosParcelamentoItem[10]).shortValue());
				}

				// Número de Prestações Cobradas do Débito a Cobrar
				if(dadosParcelamentoItem[11] != null){ // 11
					debitoACobrar.setNumeroPrestacaoCobradas(((Short) dadosParcelamentoItem[11]).shortValue());
				}

				// Valor do Débito a Cobrar
				if(dadosParcelamentoItem[12] != null){ // 12
					debitoACobrar.setValorDebito(((BigDecimal) dadosParcelamentoItem[12]));
				}

				debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
				parcelamentoItem.setDebitoACobrarGeral(debitoACobrarGeral);

				// Dados do Crédito a Realizar
				CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
				CreditoARealizar creditoARealizar = new CreditoARealizar();
				CreditoTipo creditoTipoCreditoARealizar = new CreditoTipo();

				// Id do Tipo de Crédito dos Débitos a Cobrar
				if(dadosParcelamentoItem[13] != null){ // 13
					creditoTipoCreditoARealizar.setId((Integer) dadosParcelamentoItem[13]);
				}

				// Descrição do Tipo de Crédito dos Débitos a Cobrar
				if(dadosParcelamentoItem[14] != null){ // 14
					creditoTipoCreditoARealizar.setDescricao((String) dadosParcelamentoItem[14]);
				}

				creditoARealizar.setCreditoTipo(creditoTipoCreditoARealizar);

				// Número de Prestações do Crédito a Realizar
				if(dadosParcelamentoItem[15] != null){ // 15
					creditoARealizar.setNumeroPrestacaoCredito(((Short) dadosParcelamentoItem[15]).shortValue());
				}

				// Número de Prestações Realizadas do Crédito a Realizar
				if(dadosParcelamentoItem[16] != null){ // 16
					creditoARealizar.setNumeroPrestacaoRealizada(((Short) dadosParcelamentoItem[16]).shortValue());
				}

				// Valor do Crédito a Realizar
				if(dadosParcelamentoItem[17] != null){ // 17
					creditoARealizar.setValorCredito(((BigDecimal) dadosParcelamentoItem[17]));
				}

				creditoARealizarGeral.setCreditoARealizar(creditoARealizar);
				parcelamentoItem.setCreditoARealizarGeral(creditoARealizarGeral);

				colecaoParcelamentosItensRelatorio.add(parcelamentoItem);

			}// fim do while
		}
		return colecaoParcelamentosItensRelatorio;

	}

	/**
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * [UC0349] Emitir Documento de Cobrança - Ordem de Fiscalização
	 * 
	 * @author Ana Maria
	 * @data 11/10/2006
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemFiscalizacao(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo cobrancaGrupo, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

		// LOGGER.info("********************");
		// LOGGER.info("INICIO FISCALIZAÇÃO");
		// LOGGER.info("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		while(!flagFimPesquisa){
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();
			Collection colecaoEmitirDocumentoCobranca = null;
			try{
				colecaoEmitirDocumentoCobranca = repositorioCobranca.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoEmitirDocumentoCobranca != null && !colecaoEmitirDocumentoCobranca.equals("")){
				// LOGGER.info("********************");
				LOGGER.info("QUANTIDADE COBRANÇA:" + colecaoEmitirDocumentoCobranca.size());
				// LOGGER.info("********************");

				if(colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				Iterator iteratorColecaoCobrancaDocumento = colecaoEmitirDocumentoCobranca.iterator();
				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				while(iteratorColecaoCobrancaDocumento.hasNext()){

					emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento.next();

					String nomeCliente = null;
					Collection colecaoCobrancaDocumentoItem = null;

					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */
					Imovel inscricao = null;
					SetorComercial setorComercialInscricao = null;
					Quadra quadraInscricao = null;
					Localidade localidade = null;

					sequencialImpressao++;

					if(emitirDocumentoCobrancaHelper != null){

						try{

							nomeCliente = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper
											.getIdImovel());

							CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
							cobrancaDocumento.setId(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());

							colecaoCobrancaDocumentoItem = this.repositorioCobranca
											.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
							cobrancaDocumento = null;

						}catch(ErroRepositorioException ex){
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						// if (colecaoCobrancaDocumentoItem != null
						// && !colecaoCobrancaDocumentoItem.isEmpty()) {
						// Início do processo de geração do
						// arquivo txt

						// LINHA 01
						// ==================================

						/*
						 * Canal ("1") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append("1");

						cobrancaDocumentoTxt.append(Util.completaString("", 187));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 02
						// ==================================

						/*
						 * Canal ("1") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append("1");

						cobrancaDocumentoTxt.append(Util.completaString("", 26));

						cobrancaDocumentoTxt.append("EXECUTOR");

						cobrancaDocumentoTxt.append("-");

						// Código e descrição da empresa
						if(emitirDocumentoCobrancaHelper.getIdEmpresa() != null){
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(emitirDocumentoCobrancaHelper.getIdEmpresa()
											.toString(), 4));

							cobrancaDocumentoTxt.append("-");

							cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getDescricaoEmpresa(), 10));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 15));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Sigla e descriçao da gerência
						// regional
						cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getNomeAbreviadoGerencia(), 3));

						cobrancaDocumentoTxt.append("-");

						cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getNomeGerencia(), 20));
						cobrancaDocumentoTxt.append(Util.completaString("", 5));

						// Nome da Localidade
						cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getDescricaoLocalidade(), 10));

						cobrancaDocumentoTxt.append(Util.completaString("", 96));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 03
						// ==================================

						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Inscrição
						quadraInscricao = new Quadra();
						setorComercialInscricao = new SetorComercial();
						localidade = new Localidade();
						inscricao = new Imovel();

						quadraInscricao.setNumeroQuadra(emitirDocumentoCobrancaHelper.getNumeroQuadra());
						setorComercialInscricao.setCodigo(emitirDocumentoCobrancaHelper.getCodigoSetorComercial());
						localidade.setId(emitirDocumentoCobrancaHelper.getIdLocalidade());
						inscricao.setLocalidade(localidade);
						inscricao.setSetorComercial(setorComercialInscricao);
						inscricao.setQuadra(quadraInscricao);
						inscricao.setLote(emitirDocumentoCobrancaHelper.getLote());
						inscricao.setSubLote(emitirDocumentoCobrancaHelper.getSubLote());

						cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

						cobrancaDocumentoTxt.append(Util.completaString("", 12));

						// Nome do Cliente
						cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

						cobrancaDocumentoTxt.append(Util.completaString("", 103));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 04
						// ==================================

						/*
						 * Canal ("+") Fonte ("2")
						 */

						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");
						cobrancaDocumentoTxt.append(Util.completaString("", 68));

						// Matrícula do imóvel
						String matriculaImovelFormatada = Util.adicionarZerosEsquedaNumero(9,
										"" + emitirDocumentoCobrancaHelper.getIdImovel());
						matriculaImovelFormatada = matriculaImovelFormatada.substring(0, 8) + "."
										+ matriculaImovelFormatada.substring(8, 9);
						cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

						cobrancaDocumentoTxt.append(Util.completaString("", 109));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 05
						// ==================================

						/*
						 * Canal ("+") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 98));

						cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

						cobrancaDocumentoTxt.append(Util.completaString("", 15));

						// Nome do Cliente
						cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

						cobrancaDocumentoTxt.append(Util.completaString("", 4));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 06
						// ==================================

						/*
						 * Canal ("+") Fonte ("2")
						 */

						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");
						cobrancaDocumentoTxt.append(Util.completaString("", 153));

						// Matrícula do imóvel
						cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

						cobrancaDocumentoTxt.append(Util.completaString("", 24));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 07
						// ==================================

						String enderecoFormatado = getControladorEndereco().pesquisarEnderecoFormatado(
										emitirDocumentoCobrancaHelper.getIdImovel());
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Endereço Formatado
						cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 52));

						cobrancaDocumentoTxt.append(Util.completaString("", 44));

						// Endereço Formatado
						cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 52));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 08
						// ==================================

						/*
						 * Canal ("+") Fonte ("2")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");
						cobrancaDocumentoTxt.append(Util.completaString("", 69));

						// Sequencial do Documento de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));

						cobrancaDocumentoTxt.append(Util.completaString("", 109));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 09
						// ==================================

						/*
						 * Canal ("+") Fonte ("2")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");
						cobrancaDocumentoTxt.append(Util.completaString("", 152));

						// Sequencial do Documento de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));

						cobrancaDocumentoTxt.append(Util.completaString("", 26));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 10
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 4));

						/*
						 * Quantidades de economias por categoria: 1º
						 * RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
						 */
						Imovel imovel = new Imovel();
						imovel.setId(emitirDocumentoCobrancaHelper.getIdImovel());
						Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
						imovel = null;
						String qtdResidencial = "";
						String qtdComercial = "";
						String qtdIndustrial = "";
						String qtdPublico = "";

						Integer totalCategoria = 0;

						if(colecaoCategorias != null && !colecaoCategorias.isEmpty()){
							Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
							Categoria categoria = null;

							while(iteratorColecaoCategorias.hasNext()){
								categoria = (Categoria) iteratorColecaoCategorias.next();

								if(categoria.getId().equals(Categoria.RESIDENCIAL)){
									qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();
								}else if(categoria.getId().equals(Categoria.COMERCIAL)){
									qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();
								}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){
									qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();
								}else if(categoria.getId().equals(Categoria.PUBLICO)){
									qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();
								}
							}
						}
						colecaoCategorias = null;

						// Residêncial
						if(!qtdResidencial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Comercial
						if(!qtdComercial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Industrial
						if(!qtdIndustrial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Público
						if(!qtdPublico.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						if(totalCategoria != null && !totalCategoria.equals("")){
							// Soma Total das economias
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(4, "" + totalCategoria));
						}else{
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 4));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 3));

						// Data de Emissão
						if(emitirDocumentoCobrancaHelper.getEmissao() != null){
							cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 4));

						// Perfil do Imóvel
						cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 15));

						cobrancaDocumentoTxt.append(" ");

						// Data da última alteração
						if(emitirDocumentoCobrancaHelper.getDtImovelUltimaAlteracao() != null){
							cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getDtImovelUltimaAlteracao()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						// Grupo de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 9));

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Sequencial de impressão
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										Util.retornaSequencialFormatado(sequencialImpressao), 8));

						cobrancaDocumentoTxt.append(Util.completaString("", 11));

						// Residêncial
						if(!qtdResidencial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Comercial
						if(!qtdComercial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Industrial
						if(!qtdIndustrial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Público
						if(!qtdPublico.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 8));

						// Data de Emissão
						if(emitirDocumentoCobrancaHelper.getEmissao() != null){
							cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(" ");

						// Valor total do documento de cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 12));

						cobrancaDocumentoTxt.append(Util.completaString("", 5));

						// Data da Posição do Débito

						String anoMesValidade = sistemaParametro.getAnoMesArrecadacao().toString();
						Calendar calendario = new GregorianCalendar();

						if(anoMesValidade != null && !anoMesValidade.equals("")){
							calendario.set(Calendar.YEAR, Integer.valueOf(anoMesValidade.substring(0, 4)).intValue());
							calendario.set(Calendar.MONTH, Integer.valueOf(anoMesValidade.substring(4, 6)).intValue() - 1);
							calendario.set(Calendar.DAY_OF_MONTH, calendario.getActualMaximum(Calendar.DAY_OF_MONTH));

							cobrancaDocumentoTxt.append(Util.formatarData(calendario.getTime()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 5));

						// ////////////////////////////////////////////////////////////////////
						// Grupo de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 5));

						cobrancaDocumentoTxt.append(Util.completaString("", 4));

						// Sequencial de impressão
						cobrancaDocumentoTxt.append(Util.retornaSequencialFormatado(sequencialImpressao));

						cobrancaDocumentoTxt.append(Util.completaString("", 1));
						// ///////////////////////////////////////////////////////////////////
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 11
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Situação da Ligação de Água
						cobrancaDocumentoTxt.append(Util.completaString(
										"" + emitirDocumentoCobrancaHelper.getDescricaoSituacaoLigacaoAgua(), 20));

						// Consumo Médio
						Integer consumoMedio = getControladorMicromedicao().pesquisarConsumoMedioImovel(
										emitirDocumentoCobrancaHelper.getIdImovel());

						if(consumoMedio != null){
							cobrancaDocumentoTxt.append(Util.completaString("" + consumoMedio, 28));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 28));
						}

						// Situação da Ligação de Esgoto
						cobrancaDocumentoTxt.append(Util.completaString(
										"" + emitirDocumentoCobrancaHelper.getDescricaoSituacaoLigacaoEsgoto(), 20));

						// Consumo Fixo de Esgoto
						Integer consumoMinimoEsgoto = getControladorLigacaoEsgoto().recuperarConsumoMinimoEsgoto(
										emitirDocumentoCobrancaHelper.getIdImovel());

						if(consumoMinimoEsgoto != null){
							cobrancaDocumentoTxt.append(Util.completaString("" + consumoMinimoEsgoto, 10));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 107));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 12
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 3));
						Object[] dadosLigacaoAgua = null;

						// Dados da Ligação de Água(a partir da
						// tabela
						// LIGACAO_AGUA
						// lagu_id=imov_id da tabela IMOVEL)
						dadosLigacaoAgua = getControladorAtendimentoPublico().pesquisarDadosLigacaoAgua(
										emitirDocumentoCobrancaHelper.getIdImovel());

						if(dadosLigacaoAgua != null){
							if(dadosLigacaoAgua[1] != null){
								// Data do Corte(lagu_dtcorte)
								cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData((Date) dadosLigacaoAgua[1]), 10));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}
							cobrancaDocumentoTxt.append(Util.completaString("", 6));

							if(dadosLigacaoAgua[2] != null){
								// Data Supressão
								cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData((Date) dadosLigacaoAgua[2]), 10));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}
							cobrancaDocumentoTxt.append(Util.completaString("", 13));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 40));
						}

						// Origem
						Integer anormalidadeLeitura = emitirDocumentoCobrancaHelper.getIdLeituraAnormalidade();
						if(anormalidadeLeitura == null){
							cobrancaDocumentoTxt.append("AUTOMÁTICO");
							cobrancaDocumentoTxt.append(Util.completaString("", 5));
						}else if(anormalidadeLeitura == LeituraAnormalidade.LIGADO_CLANDESTINO_AGUA
										|| anormalidadeLeitura == LeituraAnormalidade.LIGADO_CLANDESTINO_ESGOTO
										|| anormalidadeLeitura == LeituraAnormalidade.LIGADO_CLANDESTINO_AGUA_ESGOTO){
							cobrancaDocumentoTxt.append("RECADASTRAMENTO");
						}else{
							cobrancaDocumentoTxt.append("LEITURA");
							cobrancaDocumentoTxt.append(Util.completaString("", 8));
						}

						// Ocorrência
						cobrancaDocumentoTxt.append(Util.completaString(emitirDocumentoCobrancaHelper.getDescricaoLeitAnormalidade(), 34));

						cobrancaDocumentoTxt.append(Util.completaString("", 95));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 13
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append(Util.completaString("", 188));
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 14
						// ==================================

						/*
						 * Canal ("0") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("0");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(" ");

						/*
						 * Selecionar os itens do documento de cobrança
						 * correspondentes a conta e ordenar por ano/mês de
						 * referência da conta
						 */
						if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
							Iterator iteratorColecaoCobrancaDocumentoItem = null;
							CobrancaDocumentoItem cobrancaDocumentoItem = null;

							int countImpressao = colecaoCobrancaDocumentoItem.size() - 12;

							cobrancaDocumentoTxt.append(Util.completaString("", 10));
							/*
							 * Caso a quantidade de itens selecionados seja
							 * superior a 13 [SB0001 - Calcular Valor e Data
							 * de Vencimento Anterior]
							 * Caso contrário: Dados do primeiro item
							 * selecionado
							 */
							if(colecaoCobrancaDocumentoItem.size() > 13){

								CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
												.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 13);

								// Constante "DEBTO.ATE"
								cobrancaDocumentoTxt.append("DEBTO.ATE");

								cobrancaDocumentoTxt.append(Util.completaString("", 17));

								// Data de Vencimento anterior
								// retornado
								// pelo
								// [SB0001]
								cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper
												.getDataVencimentoAnterior()));

								// Valor anterior retornado pelo
								// [SB0001]
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												Util.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper.getValorAnterior()), 29));

							}else{

								iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
								cobrancaDocumentoItem = null;

								cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

								// Mês/Ano de referência da
								// conta
								cobrancaDocumentoTxt.append(Util.completaString(
												Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta()
																.getReferencia()), 7));

								cobrancaDocumentoTxt.append(".");

								// Dígito verificador da conta
								cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta().getDigitoVerificadorConta());

								cobrancaDocumentoTxt.append(Util.completaString("", 17));

								// Data de vencimento da conta
								cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
												.getDataVencimentoConta()));

								// Valor do item
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 29));
							}

							cobrancaDocumentoTxt.append(Util.completaString("", 111));

							cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

							// LINHA 15
							// ==================================

							/*
							 * Canal (" ") Fonte ("1")
							 */

							if(countImpressao <= 0){
								iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
								cobrancaDocumentoItem = null;

								int countRegistros = 0;

								while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
									cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

									if(countRegistros > 0){

										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util.completaString("", 11));

										// Mês/Ano de referência da
										// conta
										cobrancaDocumentoTxt.append(Util.completaString(
														Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta()
																		.getReferencia()), 7));

										cobrancaDocumentoTxt.append(".");

										// Dígito verificador da conta
										cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
														.getDigitoVerificadorConta());

										cobrancaDocumentoTxt.append(Util.completaString("", 17));

										// Data de vencimento da conta
										cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
														.getDataVencimentoConta()));

										cobrancaDocumentoTxt.append(Util.completaString("", 1));

										// Valor do item
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 28));

										cobrancaDocumentoTxt.append(Util.completaString("", 111));

										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
									}

									countRegistros++;
								}
							}else{
								while(countImpressao < colecaoCobrancaDocumentoItem.size()){
									cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
													.get(countImpressao);

									cobrancaDocumentoTxt.append(" ");
									cobrancaDocumentoTxt.append("1");

									cobrancaDocumentoTxt.append(Util.completaString("", 11));

									// Mês/Ano de referência da
									// conta
									cobrancaDocumentoTxt.append(Util.completaString(
													Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta()
																	.getReferencia()), 7));

									cobrancaDocumentoTxt.append(".");

									// Dígito verificador da conta
									cobrancaDocumentoTxt.append(cobrancaDocumentoItem.getContaGeral().getConta()
													.getDigitoVerificadorConta());

									cobrancaDocumentoTxt.append(Util.completaString("", 17));

									// Data de vencimento da conta
									cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
													.getDataVencimentoConta()));

									cobrancaDocumentoTxt.append(Util.completaString("", 1));

									// Valor do item
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
													Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 28));

									cobrancaDocumentoTxt.append(Util.completaString("", 111));

									cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

									countImpressao++;
								}
							}
						}else{

							for(int i = 0; i < 12; i++){
								cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
							}

						}
						// LINHA 16
						// ==================================
						/*
						 * Canal ("1") Fonte ("2")
						 */
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append("2");

						cobrancaDocumentoTxt.append(Util.completaString("", 60));
						try{

							BigDecimal servicoAtualizacao = repositorioCobranca.pesquisarServioAtualizacao(emitirDocumentoCobrancaHelper
											.getIdDocumentoCobranca());

							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarMoedaReal(servicoAtualizacao),
											15));
						}catch(ErroRepositorioException ex){
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 112));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 17
						// ==================================
						/*
						 * Canal ("+") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append(Util.completaString("", 187));
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 18
						// ==================================
						/*
						 * Canal ("0") Fonte ("2")
						 */
						cobrancaDocumentoTxt.append("0");
						cobrancaDocumentoTxt.append("2");
						cobrancaDocumentoTxt.append(Util.completaString("", 24));

						// Data da Posição do Débito
						if(anoMesValidade != null && !anoMesValidade.equals("")){
							cobrancaDocumentoTxt.append(Util.formatarData(calendario.getTime()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 26));

						// Valor total do documento de cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 15));

						cobrancaDocumentoTxt.append(Util.completaString("", 112));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 19
						// ==================================
						/*
						 * Canal ("+") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("1");

						cobrancaDocumentoTxt.append(Util.completaString("", 97));

						cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));

						cobrancaDocumentoTxt.append(Util.completaString("", 16));

						// Nome do Cliente
						cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

						cobrancaDocumentoTxt.append(Util.completaString("", 4));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 20
						// ==================================
						/*
						 * Canal ("+") Fonte ("2")
						 */

						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");

						cobrancaDocumentoTxt.append(Util.completaString("", 152));

						// Matrícula do imóvel
						cobrancaDocumentoTxt.append(Util.completaString(matriculaImovelFormatada, 10));

						cobrancaDocumentoTxt.append(Util.completaString("", 25));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 21
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");

						cobrancaDocumentoTxt.append(Util.completaString("", 97));

						// Endereço Formatado
						cobrancaDocumentoTxt.append(Util.completaString(enderecoFormatado, 62));

						cobrancaDocumentoTxt.append(Util.completaString("", 28));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 22
						// ==================================
						/*
						 * Canal ("+") Fonte ("2")
						 */
						cobrancaDocumentoTxt.append("+");
						cobrancaDocumentoTxt.append("2");

						cobrancaDocumentoTxt.append(Util.completaString("", 151));

						// Sequencial do Documento de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));

						cobrancaDocumentoTxt.append(Util.completaString("", 27));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// LINHA 23
						// ==================================
						/*
						 * Canal ("-") Fonte ("1")
						 */
						cobrancaDocumentoTxt.append("-");
						cobrancaDocumentoTxt.append("1");

						cobrancaDocumentoTxt.append(Util.completaString("", 101));

						/*
						 * Quantidades de economias por categoria: 1º
						 * RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
						 */

						// Residêncial
						if(!qtdResidencial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Comercial
						if(!qtdComercial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Industrial
						if(!qtdIndustrial.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}
						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Público
						if(!qtdPublico.equals("")){
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 8));

						// Data de Emissão
						if(emitirDocumentoCobrancaHelper.getEmissao() != null){
							cobrancaDocumentoTxt.append(Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(" ");

						// Valor total do documento de cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 12));

						cobrancaDocumentoTxt.append(Util.completaString("", 5));

						// Data da Posição do Débito

						if(anoMesValidade != null && !anoMesValidade.equals("")){
							cobrancaDocumentoTxt.append(Util.formatarData(calendario.getTime()));
						}else{
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}

						cobrancaDocumentoTxt.append(Util.completaString("", 5));

						// ////////////////////////////////////////////////////////////////////
						// Grupo de Cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 5));

						cobrancaDocumentoTxt.append(Util.completaString("", 2));

						// Sequencial de impressão
						cobrancaDocumentoTxt.append(Util.retornaSequencialFormatado(sequencialImpressao));

						cobrancaDocumentoTxt.append(Util.completaString("", 3));

						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						// LINHA 24
						// ==================================
						/*
						 * Canal ("1") Fonte ("4")
						 */
						cobrancaDocumentoTxt.append("1");
						cobrancaDocumentoTxt.append("4");
						cobrancaDocumentoTxt.append(Util.completaString("", 10));
						cobrancaDocumentoTxt.append("PRIORIDADE PARA EXECUÇÃO");
						cobrancaDocumentoTxt.append(Util.completaString("", 153));
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						// }
						// adiciona o id da
						// conta e o sequencial
						// no para serem
						// atualizados
						mapAtualizaSequencial.put(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca(), sequencialImpressao);
						colecaoCobrancaDocumentoItem = null;
					}

					emitirDocumentoCobrancaHelper = null;
				}
			}else{
				flagFimPesquisa = true;
			}
			try{
				repositorioCobranca.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;

			colecaoEmitirDocumentoCobranca = null;
		}

		// LOGGER.info("********************");
		// LOGGER.info("FIM FISCALIZAÇÃO");
		// LOGGER.info("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
		if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_CORTADO)){
			if(idCronogramaAtividadeAcaoCobranca != null){
				nomeZip = "ORDEM_FISCALIZACAO_CORTADO_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
			}else{
				String descricaoAbrevDocumentoTipo = "";
				if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}

		}else{
			if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_SUPRIMIDO)){
				if(idCronogramaAtividadeAcaoCobranca != null){
					nomeZip = "ORDEM_FISCALIZACAO_SUPRIMIDO_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
				}else{
					String descricaoAbrevDocumentoTipo = "";
					if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
						descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}

			}else{
				if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_FACTIVEL)){
					if(idCronogramaAtividadeAcaoCobranca != null){
						nomeZip = "ORDEM_FISCALIZACAO_FACTIVEL_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
					}else{
						String descricaoAbrevDocumentoTipo = "";
						if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
							descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
						}
						String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

						nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
						nomeZip = nomeZip.replace("/", "_");
						nomeZip = nomeZip.replace(" ", "_");
					}
				}else{
					if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_POTENCIAL)){
						if(idCronogramaAtividadeAcaoCobranca != null){
							nomeZip = "ORDEM_FISCALIZACAO_POTENCIAL_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
						}else{
							String descricaoAbrevDocumentoTipo = "";
							if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
								descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
							}
							String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

							nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
							nomeZip = nomeZip.replace("/", "_");
							nomeZip = nomeZip.replace(" ", "_");
						}
					}else{
						if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_LIGADO)){
							if(idCronogramaAtividadeAcaoCobranca != null){
								nomeZip = "ORDEM_FISCALIZACAO_LIGADO_GRUPO_" + cobrancaGrupo.getId() + "_" + Util.formatarData(dataAtual);
							}else{
								String descricaoAbrevDocumentoTipo = "";
								if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
									descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
								}
								String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

								nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
								nomeZip = nomeZip.replace("/", "_");
								nomeZip = nomeZip.replace(" ", "_");
							}
						}else{
							if(idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_TOTAL)){
								if(idCronogramaAtividadeAcaoCobranca != null){
									nomeZip = "ORDEM_FISCALIZACAO_TOTAL_GRUPO_" + cobrancaGrupo.getId() + "_"
													+ Util.formatarData(dataAtual);
								}else{
									String descricaoAbrevDocumentoTipo = "";
									if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
										descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
									}
									String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

									nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " "
													+ Util.formatarData(dataAtual);
									nomeZip = nomeZip.replace("/", "_");
									nomeZip = nomeZip.replace(" ", "_");
								}
							}

						}

					}

				}
			}
		}
		nomeZip = nomeZip.replace("/", "_");

		try{
			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				cobrancaDocumentoTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}

			// LOGGER.info("********************");
			// LOGGER.info("FIM GERAÇÃO ARQUIVO");
			// LOGGER.info("********************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz
	 * @date 16/10/2006, 18/01/2007,01/02/2007
	 */
	public void gerarResumoAcoesCobrancaCronograma(Object[] dadosCobrancaAcaoAtividadeCronograma, int idFuncionalidadeIniciada)
					throws ControladorException{

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR = 0;
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR = 1;
		final int POSICAO_DATA_COM_ATIV_ENCERRAR = 2;
		final int POSICAO_DATA_PREV_ATIV_ENCERRAR = 3;
		final int POSICAO_DATA_PREV_ATIV_EMITIR = 4;
		final int POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES = 5;
		final int POSICAO_ID_COB_ACAO_CRONOG = 6;
		final int POSICAO_ID_COB_GRUPO = 7;
		final int POSICAO_ID_COB_ACAO = 8;
		final int POSICAO_DATA_REA_ATIV_EMITIR = 9;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		// LOGGER.info("########## INICIADO EM  = " + new Date());

		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try{

			// coleção de ações de cobrança do cronograma
			// Collection colecaoCobrancaAcaoCronograma = null;
			//
			// para cada cronograma de grupo e mês de referencia, selecionar
			// as
			// ações de cobrança do cronograma
			// if (colecaoCobrancaGrupoCronogramaMes != null
			// && !colecaoCobrancaGrupoCronogramaMes.isEmpty()) {
			//
			// Iterator iteratorColecaoCobrancaGrupoCronogramaMes =
			// colecaoCobrancaGrupoCronogramaMes
			// .iterator();
			//
			// id do cobranca grupo conograma mes
			// int idCobrancaGrupoCronogramaMes = -1;
			//
			// ano mes referencia do cobranca grupo cronograma mes
			// int anoMesReferenciaCobrancaGrupoCronogramaMes = -1;
			//
			// id do cobranca grupo
			// int idCobrancaGrupo = -1;
			//
			// Object[] dadosCobrancaGrupoCronogramaMes = null;
			//
			// para cada cobrança grupo conograma mes
			// while (iteratorColecaoCobrancaGrupoCronogramaMes.hasNext()) {
			//
			// dadosCobrancaGrupoCronogramaMes = (Object[])
			// iteratorColecaoCobrancaGrupoCronogramaMes
			// .next();
			//
			// id co cobranca grupo cronograma mes
			// if (dadosCobrancaGrupoCronogramaMes[0] != null) {
			// idCobrancaGrupoCronogramaMes = ((Integer)
			// dadosCobrancaGrupoCronogramaMes[0])
			// .intValue();
			// }
			//
			// ano mes referencia
			// if (dadosCobrancaGrupoCronogramaMes[1] != null) {
			// anoMesReferenciaCobrancaGrupoCronogramaMes = ((Integer)
			// dadosCobrancaGrupoCronogramaMes[1])
			// .intValue();
			// }
			//
			// id do cobranca grupo
			// if (dadosCobrancaGrupoCronogramaMes[2] != null) {
			// idCobrancaGrupo = ((Integer) dadosCobrancaGrupoCronogramaMes[2])
			// .intValue();
			// }
			//
			// Item 2
			// a partir da tabela COBRANCA_ACAO_CRONOGRAMA com CBCM_ID
			// da tabela COBRANCA_GRUPO_CRONOGRAMA_MES
			// colecaoCobrancaAcaoCronograma = this.repositorioCobranca
			// .pesquisarCobrancaAcaoCronograma(idCobrancaGrupoCronogramaMes);
			//
			// para cada ação de cobrança do conograma verifica:
			// if (colecaoCobrancaAcaoCronograma != null
			// && !colecaoCobrancaAcaoCronograma.isEmpty()) {
			//
			// Iterator iteratorColecaoCobrancaAcaoCronograma =
			// colecaoCobrancaAcaoCronograma
			// .iterator();
			//
			// id do cobranca acao cronograma
			// int idCobrancaAcaoCronograma = -1;
			// id de cobranca acao do cobranca Acao cronograma(será
			// usada para pesquisar o cobranca acao pela
			// Predecessora)
			// int idCobrancaAcao = -1;
			//
			// Object[] dadosCobrancaAcaoCronograma = null;
			//
			// while (iteratorColecaoCobrancaAcaoCronograma.hasNext()) {
			// dadosCobrancaAcaoCronograma = (Object[])
			// iteratorColecaoCobrancaAcaoCronograma
			// .next();
			//
			// id do cobranca acao cronograma
			// if (dadosCobrancaAcaoCronograma[0] != null) {
			// idCobrancaAcaoCronograma = ((Integer)
			// dadosCobrancaAcaoCronograma[0])
			// .intValue();
			// }
			//
			// LOGGER.info("COBRANCA ACAO CRONOGRAMA = "
			// + idCobrancaAcaoCronograma);
			// id de Cobranca Acao do Cobranca Acao
			// Cronograma(será
			// usada para pesquisar o cobranca acao)
			// if (dadosCobrancaAcaoCronograma[1] != null) {
			// idCobrancaAcao = ((Integer) dadosCobrancaAcaoCronograma[1])
			// .intValue();
			// }
			//
			// boolean primeiraCondicao = true;
			// boolean segundaCondicao = true;
			//
			// Collection colecaoCobrancaAtividadeAcaoCronogramaEmitir = null;
			// Collection colecaoCobrancaAtividadeAcaoCronogramaEncerrar = null;
			//
			// Emitir
			// Date dataRealizacaoAtividadeEmitir = null;
			// Date dataPrevistaAtividadeEmitir = null;
			// int idCobrancaAtividadeAcaoCronogramaEmitir = -1;
			// Encerrar
			// Date dataPrevistaAtividadeEncerrar = null;
			// Date dataComandoAtividadeEncerrar = null;
			// Date dataRealizacaoAtividadeEncerrar = null;
			// int idCobrancaAtividadeAcaoCronogramaEncerrar = -1;
			//
			// Item 3.1
			// O sistema seleciona a atividade da ação de
			// cobrança correspondete a EMITIR( apatir da tabela
			// COBRANCA_ATIVIDADE_ACAO_CONOGRAMA
			// com CBCR_ID da tabela COBRANCA_ACAO_CRONOGRAMA e
			// CBAT_ID com o valor correspondente a EMITIR da
			// tabela
			// COBRANCA_ATIVIDADE
			// colecaoCobrancaAtividadeAcaoCronogramaEmitir =
			// this.repositorioCobranca
			// .pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
			// idCobrancaAcaoCronograma,
			// CobrancaAtividade.EMITIR);
			//
			// se existir cobranca atividade acao cronograma,
			// EMITIR
			// if (colecaoCobrancaAtividadeAcaoCronogramaEmitir != null
			// && !colecaoCobrancaAtividadeAcaoCronogramaEmitir
			// .isEmpty()) {
			//
			// Object[] dadosCobrancaAtividade = (Object[])
			// colecaoCobrancaAtividadeAcaoCronogramaEmitir
			// .iterator().next();
			//
			// id cobranca atividade acao cronograma
			// if (dadosCobrancaAtividade[0] != null) {
			// idCobrancaAtividadeAcaoCronogramaEmitir = ((Integer)
			// dadosCobrancaAtividade[0])
			// .intValue();
			// }
			//
			// data realizacao
			// [FS0004] - Verificar Realização da Atividade
			// Emitir da Ação de Cobrança
			// if (dadosCobrancaAtividade[1] == null) {
			// primeiraCondicao = false;
			// } else {
			// dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAtividade[1];
			// }
			//
			// data prevista
			// if (dadosCobrancaAtividade[2] != null) {
			// dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAtividade[2];
			// }
			//
			// } else {
			// [FS0003] - Verificar Existência da Atividade
			// Emitir da Ação de Cobrança
			// primeiraCondicao = false;
			// }
			//
			// Item 3.2
			// o sistema seleciona a atividade da ação de
			// cobrana correspondente a ENCERRAR( a partir da
			// tabela
			// COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
			// com CBCR_ID da tabela COBRANCA_ACAO_CONOGRAMA e
			// CBAT_ID com o valor correspondente a ENCERRAR da
			// tebal COBRANA_ATIVIDADE
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar =
			// this.repositorioCobranca
			// .pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
			// idCobrancaAcaoCronograma,
			// CobrancaAtividade.ENCERRAR);
			//
			// se existir acobranca atividade acao cronograma,
			// ENCERRAR
			// if (colecaoCobrancaAtividadeAcaoCronogramaEncerrar != null
			// && !colecaoCobrancaAtividadeAcaoCronogramaEncerrar
			// .isEmpty()) {
			//
			// Object[] dadosCobrancaAtividade = (Object[])
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar
			// .iterator().next();
			//
			// id cobranca atividade acao cronograma
			// if (dadosCobrancaAtividade[0] != null) {
			// idCobrancaAtividadeAcaoCronogramaEncerrar = ((Integer)
			// dadosCobrancaAtividade[0])
			// .intValue();
			// }
			//
			// data realizacao
			// [FS0006] - Verificar Realização da Atividade
			// Encerrar da Ação de Cobrança
			// if (dadosCobrancaAtividade[1] != null) {
			// segundaCondicao = false;
			// }
			//
			// data prevista
			// if (dadosCobrancaAtividade[2] != null) {
			// dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAtividade[2];
			// }
			//
			// data comando
			// if (dadosCobrancaAtividade[3] != null) {
			// dataComandoAtividadeEncerrar = (Date) dadosCobrancaAtividade[3];
			// }
			//
			// seta null para o GC liberar
			// dadosCobrancaAtividade = null;
			//
			// } else {
			// [FS0005] - Verificar Existência da Atividade
			// Encerrar da Ação de Cobrança
			// segundaCondicao = false;
			// }
			//
			// seta null para o GC liberar
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar = null;
			if(dadosCobrancaAcaoAtividadeCronograma != null){
				Integer idCobrancaAcao = null;
				Date dataComandoAtividadeEncerrar = null;
				Date dataPrevistaAtividadeEncerrar = null;
				Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;
				Integer idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				Integer anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				Integer idCobrancaAcaoCronograma = null;
				Date dataRealizacaoAtividadeEmitir = null;
				Date dataRealizacaoAtividadeEncerrar = null;
				Integer idCobrancaGrupo = null;
				Date dataPrevistaAtividadeEmitir = null;
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO] != null){
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR] != null){
					dataComandoAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR] != null){
					dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR] != null){
					idCobrancaAtividadeAcaoCronogramaEmitir = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR] != null){
					idCobrancaAtividadeAcaoCronogramaEncerrar = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES] != null){
					anoMesReferenciaCobrancaGrupoCronogramaMes = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG] != null){
					idCobrancaAcaoCronograma = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR] != null){
					dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO] != null){
					idCobrancaGrupo = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR] != null){
					dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR];
				}

				Collection colecaoCobrancaAcao = null;
				colecaoCobrancaAcao = this.repositorioCobranca.pesquisarCobrancaAcao(idCobrancaAcao);

				if(colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()){

					Object[] dadosCobrancaAcao = (Object[]) colecaoCobrancaAcao.iterator().next();

					// Item 3.4
					// verfica se o valor do documento tipo é
					// diferente de nulo
					if(dadosCobrancaAcao[0] != null){
						Integer idServicoTipoAcaoCobranca = null;
						// servico tipo
						if(dadosCobrancaAcao[1] != null){
							idServicoTipoAcaoCobranca = (Integer) dadosCobrancaAcao[1];
						}

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if(dataComandoAtividadeEncerrar != null
										&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar.compareTo(new Date()) <= 0))){
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// [SB0001] - Processar Ação com
						// Documentos de Cobrança
						this.processarDocumentoCobranca(idCobrancaAtividadeAcaoCronogramaEmitir, dataPrevistaAtividadeEncerrar,
										dataComandoAtividadeEncerrar, usuarioLogado, idCobrancaAtividadeAcaoCronogramaEncerrar,
										anoMesReferenciaCobrancaGrupoCronogramaMes, idCobrancaAcaoCronograma, idCobrancaGrupo,
										idCobrancaAcao, dataRealizacaoAtividadeEmitir, dataRealizacaoAtividadeEncerrar,
										idServicoTipoAcaoCobranca);
					}else{

						Integer idServicoTipo = null;

						// servico tipo
						if(dadosCobrancaAcao[1] != null){
							idServicoTipo = (Integer) dadosCobrancaAcao[1];
						}

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if(dataComandoAtividadeEncerrar != null
										&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar.compareTo(new Date()) <= 0))){
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// Item 3.5
						// [SB0006] - Processar Ação com Ordens
						// de
						// Serviço
						this.processarAcaoOrdemServico(idServicoTipo, dataPrevistaAtividadeEncerrar, dataPrevistaAtividadeEmitir,
										dataComandoAtividadeEncerrar, dataRealizacaoAtividadeEmitir, usuarioLogado,
										anoMesReferenciaCobrancaGrupoCronogramaMes, idCobrancaAcaoCronograma, idCobrancaGrupo,
										idCobrancaAcao, dataRealizacaoAtividadeEncerrar);
					}

					// seta para null para o GC liberar
					dadosCobrancaAcao = null;
				}

				// seta para null para o GC liberar
				colecaoCobrancaAcao = null;
				idCobrancaAcao = null;
				dataComandoAtividadeEncerrar = null;
				dataPrevistaAtividadeEncerrar = null;
				idCobrancaAtividadeAcaoCronogramaEmitir = null;
				idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				idCobrancaAcaoCronograma = null;
				dataRealizacaoAtividadeEmitir = null;
				dataRealizacaoAtividadeEncerrar = null;
				idCobrancaGrupo = null;
				dataPrevistaAtividadeEmitir = null;

			}

			// se atender as duas condições anteriores 3.1 e 3.2
			// if (primeiraCondicao && segundaCondicao) {

			// Item 3.3
			// o sistema exclui o resumo das ações de
			// cobrança correspondente ao cronograma de
			// ação
			// de
			// cobrança
			// que esta sendo processado
			// this.repositorioCobranca
			// .deletarResumoCobrancaAcao(idCobrancaAcaoCronograma);

			// caso a ação de cobrança gere documento de
			// cobrança(DOTP_ID da tabela COBRANCA_ACAO com
			// CBAC_ID da
			// tabela COBRANCA_ACAO_CRONOGRAMA com o valor
			// diferente de nulo

			// seta para null para o GC liberar
			// dadosCobrancaAcaoCronograma = null;
			// }// fim do while interno
			// }

			// seta null para o GC liberar
			// colecaoCobrancaAcaoCronograma = null;

			// seta para null para o GC liberar
			// dadosCobrancaGrupoCronogramaMes = null;
			// }// fim do while externo
			// } else {
			// [FS0001] - Verificar Existência de Cronograma
			// sessionContext.setRollbackOnly();
			// throw new ControladorException(
			// "atencao.nao.existe.dados.tabela.cronograma");
			// }
			//
			// seta null para GC liberar
			// colecaoCobrancaGrupoCronogramaMes = null;
			//
			// --------------------------------------------------------
			// //
			// Registrar o fim da execução da Unidade de Processamento
			// //
			// --------------------------------------------------------
			//
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			// LOGGER.info("########## FINALIZADO EM  = " + new Date());

		}catch(Exception e){
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Sávio Luiz
	 * @date 11/05/2007
	 */
	public void inserirResumoAcoesCobrancaCronograma(Object[] dadosCobrancaAcaoAtividadeCronograma, int idFuncionalidadeIniciada)
					throws ControladorException{

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR = 0;
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR = 1;
		final int POSICAO_DATA_COM_ATIV_ENCERRAR = 2;
		final int POSICAO_DATA_PREV_ATIV_ENCERRAR = 3;
		final int POSICAO_DATA_PREV_ATIV_EMITIR = 4;
		final int POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES = 5;
		final int POSICAO_ID_COB_ACAO_CRONOG = 6;
		final int POSICAO_ID_COB_GRUPO = 7;
		final int POSICAO_ID_COB_ACAO = 8;
		final int POSICAO_DATA_REA_ATIV_EMITIR = 9;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		// LOGGER.info("########## INICIADO EM  = " + new Date());

		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try{

			// coleção de ações de cobrança do cronograma
			// Collection colecaoCobrancaAcaoCronograma = null;
			//
			// para cada cronograma de grupo e mês de referencia, selecionar
			// as
			// ações de cobrança do cronograma
			// if (colecaoCobrancaGrupoCronogramaMes != null
			// && !colecaoCobrancaGrupoCronogramaMes.isEmpty()) {
			//
			// Iterator iteratorColecaoCobrancaGrupoCronogramaMes =
			// colecaoCobrancaGrupoCronogramaMes
			// .iterator();
			//
			// id do cobranca grupo conograma mes
			// int idCobrancaGrupoCronogramaMes = -1;
			//
			// ano mes referencia do cobranca grupo cronograma mes
			// int anoMesReferenciaCobrancaGrupoCronogramaMes = -1;
			//
			// id do cobranca grupo
			// int idCobrancaGrupo = -1;
			//
			// Object[] dadosCobrancaGrupoCronogramaMes = null;
			//
			// para cada cobrança grupo conograma mes
			// while (iteratorColecaoCobrancaGrupoCronogramaMes.hasNext()) {
			//
			// dadosCobrancaGrupoCronogramaMes = (Object[])
			// iteratorColecaoCobrancaGrupoCronogramaMes
			// .next();
			//
			// id co cobranca grupo cronograma mes
			// if (dadosCobrancaGrupoCronogramaMes[0] != null) {
			// idCobrancaGrupoCronogramaMes = ((Integer)
			// dadosCobrancaGrupoCronogramaMes[0])
			// .intValue();
			// }
			//
			// ano mes referencia
			// if (dadosCobrancaGrupoCronogramaMes[1] != null) {
			// anoMesReferenciaCobrancaGrupoCronogramaMes = ((Integer)
			// dadosCobrancaGrupoCronogramaMes[1])
			// .intValue();
			// }
			//
			// id do cobranca grupo
			// if (dadosCobrancaGrupoCronogramaMes[2] != null) {
			// idCobrancaGrupo = ((Integer) dadosCobrancaGrupoCronogramaMes[2])
			// .intValue();
			// }
			//
			// Item 2
			// a partir da tabela COBRANCA_ACAO_CRONOGRAMA com CBCM_ID
			// da tabela COBRANCA_GRUPO_CRONOGRAMA_MES
			// colecaoCobrancaAcaoCronograma = this.repositorioCobranca
			// .pesquisarCobrancaAcaoCronograma(idCobrancaGrupoCronogramaMes);
			//
			// para cada ação de cobrança do conograma verifica:
			// if (colecaoCobrancaAcaoCronograma != null
			// && !colecaoCobrancaAcaoCronograma.isEmpty()) {
			//
			// Iterator iteratorColecaoCobrancaAcaoCronograma =
			// colecaoCobrancaAcaoCronograma
			// .iterator();
			//
			// id do cobranca acao cronograma
			// int idCobrancaAcaoCronograma = -1;
			// id de cobranca acao do cobranca Acao cronograma(será
			// usada para pesquisar o cobranca acao pela
			// Predecessora)
			// int idCobrancaAcao = -1;
			//
			// Object[] dadosCobrancaAcaoCronograma = null;
			//
			// while (iteratorColecaoCobrancaAcaoCronograma.hasNext()) {
			// dadosCobrancaAcaoCronograma = (Object[])
			// iteratorColecaoCobrancaAcaoCronograma
			// .next();
			//
			// id do cobranca acao cronograma
			// if (dadosCobrancaAcaoCronograma[0] != null) {
			// idCobrancaAcaoCronograma = ((Integer)
			// dadosCobrancaAcaoCronograma[0])
			// .intValue();
			// }
			//
			// LOGGER.info("COBRANCA ACAO CRONOGRAMA = "
			// + idCobrancaAcaoCronograma);
			// id de Cobranca Acao do Cobranca Acao
			// Cronograma(será
			// usada para pesquisar o cobranca acao)
			// if (dadosCobrancaAcaoCronograma[1] != null) {
			// idCobrancaAcao = ((Integer) dadosCobrancaAcaoCronograma[1])
			// .intValue();
			// }
			//
			// boolean primeiraCondicao = true;
			// boolean segundaCondicao = true;
			//
			// Collection colecaoCobrancaAtividadeAcaoCronogramaEmitir = null;
			// Collection colecaoCobrancaAtividadeAcaoCronogramaEncerrar = null;
			//
			// Emitir
			// Date dataRealizacaoAtividadeEmitir = null;
			// Date dataPrevistaAtividadeEmitir = null;
			// int idCobrancaAtividadeAcaoCronogramaEmitir = -1;
			// Encerrar
			// Date dataPrevistaAtividadeEncerrar = null;
			// Date dataComandoAtividadeEncerrar = null;
			// Date dataRealizacaoAtividadeEncerrar = null;
			// int idCobrancaAtividadeAcaoCronogramaEncerrar = -1;
			//
			// Item 3.1
			// O sistema seleciona a atividade da ação de
			// cobrança correspondete a EMITIR( apatir da tabela
			// COBRANCA_ATIVIDADE_ACAO_CONOGRAMA
			// com CBCR_ID da tabela COBRANCA_ACAO_CRONOGRAMA e
			// CBAT_ID com o valor correspondente a EMITIR da
			// tabela
			// COBRANCA_ATIVIDADE
			// colecaoCobrancaAtividadeAcaoCronogramaEmitir =
			// this.repositorioCobranca
			// .pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
			// idCobrancaAcaoCronograma,
			// CobrancaAtividade.EMITIR);
			//
			// se existir cobranca atividade acao cronograma,
			// EMITIR
			// if (colecaoCobrancaAtividadeAcaoCronogramaEmitir != null
			// && !colecaoCobrancaAtividadeAcaoCronogramaEmitir
			// .isEmpty()) {
			//
			// Object[] dadosCobrancaAtividade = (Object[])
			// colecaoCobrancaAtividadeAcaoCronogramaEmitir
			// .iterator().next();
			//
			// id cobranca atividade acao cronograma
			// if (dadosCobrancaAtividade[0] != null) {
			// idCobrancaAtividadeAcaoCronogramaEmitir = ((Integer)
			// dadosCobrancaAtividade[0])
			// .intValue();
			// }
			//
			// data realizacao
			// [FS0004] - Verificar Realização da Atividade
			// Emitir da Ação de Cobrança
			// if (dadosCobrancaAtividade[1] == null) {
			// primeiraCondicao = false;
			// } else {
			// dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAtividade[1];
			// }
			//
			// data prevista
			// if (dadosCobrancaAtividade[2] != null) {
			// dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAtividade[2];
			// }
			//
			// } else {
			// [FS0003] - Verificar Existência da Atividade
			// Emitir da Ação de Cobrança
			// primeiraCondicao = false;
			// }
			//
			// Item 3.2
			// o sistema seleciona a atividade da ação de
			// cobrana correspondente a ENCERRAR( a partir da
			// tabela
			// COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
			// com CBCR_ID da tabela COBRANCA_ACAO_CONOGRAMA e
			// CBAT_ID com o valor correspondente a ENCERRAR da
			// tebal COBRANA_ATIVIDADE
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar =
			// this.repositorioCobranca
			// .pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
			// idCobrancaAcaoCronograma,
			// CobrancaAtividade.ENCERRAR);
			//
			// se existir acobranca atividade acao cronograma,
			// ENCERRAR
			// if (colecaoCobrancaAtividadeAcaoCronogramaEncerrar != null
			// && !colecaoCobrancaAtividadeAcaoCronogramaEncerrar
			// .isEmpty()) {
			//
			// Object[] dadosCobrancaAtividade = (Object[])
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar
			// .iterator().next();
			//
			// id cobranca atividade acao cronograma
			// if (dadosCobrancaAtividade[0] != null) {
			// idCobrancaAtividadeAcaoCronogramaEncerrar = ((Integer)
			// dadosCobrancaAtividade[0])
			// .intValue();
			// }
			//
			// data realizacao
			// [FS0006] - Verificar Realização da Atividade
			// Encerrar da Ação de Cobrança
			// if (dadosCobrancaAtividade[1] != null) {
			// segundaCondicao = false;
			// }
			//
			// data prevista
			// if (dadosCobrancaAtividade[2] != null) {
			// dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAtividade[2];
			// }
			//
			// data comando
			// if (dadosCobrancaAtividade[3] != null) {
			// dataComandoAtividadeEncerrar = (Date) dadosCobrancaAtividade[3];
			// }
			//
			// seta null para o GC liberar
			// dadosCobrancaAtividade = null;
			//
			// } else {
			// [FS0005] - Verificar Existência da Atividade
			// Encerrar da Ação de Cobrança
			// segundaCondicao = false;
			// }
			//
			// seta null para o GC liberar
			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar = null;
			//
			// se atender as duas condições anteriores 3.1 e 3.2
			// if (primeiraCondicao && segundaCondicao) {
			//
			// Item 3.3
			// o sistema exclui o resumo das ações de
			// cobrança correspondente ao cronograma de ação
			// de
			// cobrança
			// que esta sendo processado
			// this.repositorioCobranca
			// .deletarResumoCobrancaAcao(idCobrancaAcaoCronograma);
			//
			// caso a ação de cobrança gere documento de
			// cobrança(DOTP_ID da tabela COBRANCA_ACAO com
			// CBAC_ID da
			// tabela COBRANCA_ACAO_CRONOGRAMA com o valor
			// diferente de nulo
			// Collection colecaoCobrancaAcao = null;
			// colecaoCobrancaAcao = this.repositorioCobranca
			// .pesquisarCobrancaAcao(idCobrancaAcao);
			//
			// if (colecaoCobrancaAcao != null
			// && !colecaoCobrancaAcao.isEmpty()) {
			//
			// Object[] dadosCobrancaAcao = (Object[]) colecaoCobrancaAcao
			// .iterator().next();
			//
			// Item 3.4
			// verfica se o valor do documento tipo é
			// diferente de nulo
			// if (dadosCobrancaAcao[0] != null) {
			// Integer idServicoTipoAcaoCobranca =
			// null;
			// servico tipo
			// if (dadosCobrancaAcao[1] != null) {
			// idServicoTipoAcaoCobranca = (Integer)
			// dadosCobrancaAcao[1];
			// }
			//
			// caso a atividade da ação de cobrança
			// correspondente a
			// encerrar esteja comandada e a data
			// prescita para o
			// encerramento seja igual ou menor do
			// que a data
			// corrente
			// if (dataComandoAtividadeEncerrar != null
			// && (dataPrevistaAtividadeEncerrar != null &&
			// (dataPrevistaAtividadeEncerrar
			// .compareTo(new Date()) <= 0))) {
			// dataRealizacaoAtividadeEncerrar = new Date();
			// }
			//
			// [SB0001] - Processar Ação com
			// Documentos de Cobrança
			// this
			// .pesquisarDocumentosCobrancaParaGeracaoResumo(
			// idCobrancaAtividadeAcaoCronogramaEmitir,
			// dataPrevistaAtividadeEncerrar,
			// idCobrancaAtividadeAcaoCronogramaEncerrar,
			// anoMesReferenciaCobrancaGrupoCronogramaMes,
			// idCobrancaAcaoCronograma,
			// idCobrancaGrupo,
			// idCobrancaAcao,
			// dataRealizacaoAtividadeEmitir,
			// dataRealizacaoAtividadeEncerrar);
			// } else {
			//
			// Integer idServicoTipo = null;
			//
			// servico tipo
			// if (dadosCobrancaAcao[1] != null) {
			// idServicoTipo = (Integer) dadosCobrancaAcao[1];
			// }
			//
			// caso a atividade da ação de cobrança
			// correspondente a
			// encerrar esteja comandada e a data
			// prescita para o
			// encerramento seja igual ou menor do
			// que a data
			// corrente
			// if (dataComandoAtividadeEncerrar != null
			// && (dataPrevistaAtividadeEncerrar != null &&
			// (dataPrevistaAtividadeEncerrar
			// .compareTo(new Date()) <= 0))) {
			// dataRealizacaoAtividadeEncerrar = new Date();
			// }
			//
			// Item 3.5
			// [SB0006] - Processar Ação com Ordens
			// de
			// Serviço
			// this
			// .processarAcaoOrdemServico(
			// idServicoTipo,
			// dataPrevistaAtividadeEncerrar,
			// dataPrevistaAtividadeEmitir,
			// dataComandoAtividadeEncerrar,
			// dataRealizacaoAtividadeEmitir,
			// usuarioLogado,
			// anoMesReferenciaCobrancaGrupoCronogramaMes,
			// idCobrancaAcaoCronograma,
			// idCobrancaGrupo,
			// idCobrancaAcao,
			// dataRealizacaoAtividadeEncerrar);
			// }
			//
			// seta para null para o GC liberar
			// dadosCobrancaAcao = null;
			// }
			//
			// seta para null para o GC liberar
			// colecaoCobrancaAcao = null;
			// }
			//
			// seta para null para o GC liberar
			// dadosCobrancaAcaoCronograma = null;
			// }// fim do while interno
			// }
			//
			// seta null para o GC liberar
			// colecaoCobrancaAcaoCronograma = null;
			//
			// seta para null para o GC liberar
			// dadosCobrancaGrupoCronogramaMes = null;
			// }// fim do while externo
			// } else {
			// [FS0001] - Verificar Existência de Cronograma
			// sessionContext.setRollbackOnly();
			// throw new ControladorException(
			// "atencao.nao.existe.dados.tabela.cronograma");
			// }
			//
			// seta null para GC liberar
			// colecaoCobrancaGrupoCronogramaMes = null;

			// --------------------------------------------------------
			//
			// Registrar o fim da execução da Unidade de Processamento
			//
			// --------------------------------------------------------

			if(dadosCobrancaAcaoAtividadeCronograma != null){
				Integer idCobrancaAcao = null;
				Date dataComandoAtividadeEncerrar = null;
				Date dataPrevistaAtividadeEncerrar = null;
				Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;
				Integer idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				Integer anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				Integer idCobrancaAcaoCronograma = null;
				Date dataRealizacaoAtividadeEmitir = null;
				Date dataRealizacaoAtividadeEncerrar = null;
				Integer idCobrancaGrupo = null;
				Date dataPrevistaAtividadeEmitir = null;
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO] != null){
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR] != null){
					dataComandoAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR];
				}

				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR] != null){
					dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR];

				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR] != null){
					idCobrancaAtividadeAcaoCronogramaEmitir = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR] != null){
					idCobrancaAtividadeAcaoCronogramaEncerrar = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES] != null){
					anoMesReferenciaCobrancaGrupoCronogramaMes = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG] != null){
					idCobrancaAcaoCronograma = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR] != null){
					dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO] != null){
					idCobrancaGrupo = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO];
				}
				if(dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR] != null){
					dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR];
				}

				Collection colecaoCobrancaAcao = null;
				colecaoCobrancaAcao = this.repositorioCobranca.pesquisarCobrancaAcao(idCobrancaAcao);

				if(colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()){

					Object[] dadosCobrancaAcao = (Object[]) colecaoCobrancaAcao.iterator().next();

					this.repositorioCobranca.deletarResumoCobrancaAcao(idCobrancaAcaoCronograma);

					// Item 3.4
					// verfica se o valor do documento tipo é
					// diferente de nulo
					if(dadosCobrancaAcao[0] != null){

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if(dataComandoAtividadeEncerrar != null
										&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar.compareTo(new Date()) <= 0))){
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// [SB0001] - Processar Ação com
						// Documentos de Cobrança
						this.pesquisarDocumentosCobrancaParaGeracaoResumo(idCobrancaAtividadeAcaoCronogramaEmitir,
										dataPrevistaAtividadeEncerrar, idCobrancaAtividadeAcaoCronogramaEncerrar,
										anoMesReferenciaCobrancaGrupoCronogramaMes, idCobrancaAcaoCronograma, idCobrancaGrupo,
										idCobrancaAcao, dataRealizacaoAtividadeEmitir, dataRealizacaoAtividadeEncerrar);
					}else{

						Integer idServicoTipo = null;

						// servico tipo
						if(dadosCobrancaAcao[1] != null){
							idServicoTipo = (Integer) dadosCobrancaAcao[1];
						}

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if(dataComandoAtividadeEncerrar != null
										&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar.compareTo(new Date()) <= 0))){
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// Item 3.5
						// [SB0006] - Processar Ação com Ordens
						// de
						// Serviço
						this.processarAcaoOrdemServico(idServicoTipo, dataPrevistaAtividadeEncerrar, dataPrevistaAtividadeEmitir,
										dataComandoAtividadeEncerrar, dataRealizacaoAtividadeEmitir, usuarioLogado,
										anoMesReferenciaCobrancaGrupoCronogramaMes, idCobrancaAcaoCronograma, idCobrancaGrupo,
										idCobrancaAcao, dataRealizacaoAtividadeEncerrar);
					}

					// seta para null para o GC liberar
					dadosCobrancaAcao = null;
				}

				// seta para null para o GC liberar
				colecaoCobrancaAcao = null;
				idCobrancaAcao = null;
				dataComandoAtividadeEncerrar = null;
				dataPrevistaAtividadeEncerrar = null;
				idCobrancaAtividadeAcaoCronogramaEmitir = null;
				idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				idCobrancaAcaoCronograma = null;
				dataRealizacaoAtividadeEmitir = null;
				dataRealizacaoAtividadeEncerrar = null;
				idCobrancaGrupo = null;
				dataPrevistaAtividadeEmitir = null;

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			// LOGGER.info("########## FINALIZADO EM  = " + new Date());

		}catch(Exception e){
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0001] - Processar Documento de Cobrança
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz
	 * @date 16/10/2006, 19/01/2007, 25/05/2007
	 */
	public void processarDocumentoCobranca(int idCobrancaAtividadeAcaoCronogramaEmitir, Date dataPrevistaAtividadeEncerrar,
					Date dataComandoAtividadeEncerrar, Usuario usuarioLogado, int idCobrancaAtividadeAcaoCronogramaEncerrar,
					int anoMesReferenciaCobrancaGrupoCronogramaMes, int idCobrancaAcaoCronograma, int idCobrancaGrupo, int idCobrancaAcao,
					Date dataRealizacaoAtividadeEmitir, Date dataRealizacaoAtividadeEncerrar, Integer idServicoTipoAcaoCobranca)
					throws ControladorException{

		// colecao com os documentos de cobrança gerados na atividade EMITIR da
		// ação de cobrança
		Collection<DadosPesquisaCobrancaDocumentoHelper> colecaoDadosPesquisaCobrancaDocumentoHelper = null;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COBRANCA_DOCUMENTO = 0;
		final int POSICAO_ID_SITUACAO_ACAO = 1;
		final int POSICAO_DATA_SITUACAO_ACAO = 2;
		final byte POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA = 3;
		final int POSICAO_ID_CATEGORIA = 5;
		final int POSICAO_ID_ESFERA_PODER = 6;
		final int POSICAO_INDICADOR_ACIMA_LIMITE = 9;
		final int POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA = 10;
		final int POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA = 11;

		// parte da paginação
		// int indice = 0;
		// boolean flagTerminou = false;
		try{

			// while (!flagTerminou) {
			// Item 1
			// COBRANCA_DOCUMENTO com CAAC_ID igual a
			// idCobrancaAtividadeAcaoCronogramaEmitir
			colecaoDadosPesquisaCobrancaDocumentoHelper = this.repositorioCobranca
							.pesquisarCobrancaDocumento(idCobrancaAtividadeAcaoCronogramaEmitir);

			// para cada documento de cobrança
			if(colecaoDadosPesquisaCobrancaDocumentoHelper != null && !colecaoDadosPesquisaCobrancaDocumentoHelper.isEmpty()){

				// if (colecaoDadosPesquisaCobrancaDocumentoHelper.size() <
				// 1000) {
				// flagTerminou = true;
				// } else {
				// indice = indice + 1000;
				// }

				Iterator iteratorCobrancaDocumantoParaAtualizarOUHelper = null;
				Collection colecaoCobrancaDocumantoParaAtualizar = null;
				// caso o id do serviço tipo seja diferente de nulo então
				// pode ter OS e é verificado as os dos documentos de
				// cobrança
				if(idServicoTipoAcaoCobranca != null){
					colecaoCobrancaDocumantoParaAtualizar = this.gerarColecaoDocumentoCobrancaOrdemServico(idServicoTipoAcaoCobranca,
									dataRealizacaoAtividadeEncerrar, usuarioLogado, idCobrancaAtividadeAcaoCronogramaEmitir);
					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoCobrancaDocumantoParaAtualizar.iterator();
				}else{
					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoDadosPesquisaCobrancaDocumentoHelper.iterator();
					colecaoCobrancaDocumantoParaAtualizar = new ArrayList();
				}

				while(iteratorCobrancaDocumantoParaAtualizarOUHelper.hasNext()){

					Object[] cobrancaDocumentoParaAtualizar = null;
					Integer idCobrancaDocumento = null;
					BigDecimal valorMinimoPagoParceladoCancelado = null;
					BigDecimal quantidadeMinimoaPagoParceladoCancelado = null;
					if(idServicoTipoAcaoCobranca != null){
						cobrancaDocumentoParaAtualizar = (Object[]) iteratorCobrancaDocumantoParaAtualizarOUHelper.next();
						idCobrancaDocumento = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO];
						valorMinimoPagoParceladoCancelado = (BigDecimal) cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA];
						quantidadeMinimoaPagoParceladoCancelado = (BigDecimal) cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA];
					}else{
						// dados para atualizar o cobranca documento
						cobrancaDocumentoParaAtualizar = new Object[12];

						DadosPesquisaCobrancaDocumentoHelper dadosPesquisaCobrancaDocumentoHelper = (DadosPesquisaCobrancaDocumentoHelper) iteratorCobrancaDocumantoParaAtualizarOUHelper
										.next();

						// indicador acima do limite
						Short indicadorAcimaLimite = null;
						if(dadosPesquisaCobrancaDocumentoHelper.getValorDocumento() != null
										&& dadosPesquisaCobrancaDocumentoHelper.getValorDocumento().compareTo(
														dadosPesquisaCobrancaDocumentoHelper.getValorLimitePrioridadeCobrancaCriterio()) > 0){
							indicadorAcimaLimite = Short.valueOf((short) 1);
						}else{
							indicadorAcimaLimite = Short.valueOf((short) 2);
						}

						cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE] = indicadorAcimaLimite;

						// [UC0306] - Obter Principal CAtegoria do Imovel

						Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel(
										dadosPesquisaCobrancaDocumentoHelper.getIdImovel());

						cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] = categoria.getId();

						// pesquisa os imovel para ser usado para gravar o
						// Resumo
						// Cobrança Ação

						Imovel imovel = this.pesquisarDadosImovel(dadosPesquisaCobrancaDocumentoHelper.getIdImovel());

						// pega a esfera do poder do imovel
						EsferaPoder esferaPoder = null;
						if(imovel.getClienteImoveis() != null && !imovel.getClienteImoveis().isEmpty()){
							ClienteImovel clienteImovel = imovel.getClienteImoveis().iterator().next();

							if(clienteImovel.getCliente() != null && clienteImovel.getCliente().getClienteTipo() != null){
								esferaPoder = clienteImovel.getCliente().getClienteTipo().getEsferaPoder();
							}
						}
						if(esferaPoder != null && !esferaPoder.equals("")){
							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = esferaPoder.getId();
						}else{
							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = null;
						}

						// atualiza os campos para serem utilizados para
						// atualização
						// e consulta de dados da cobrança documento
						// Atribuir o valor AÇÃO ENVIADOS à situação de
						// Cobrança
						cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.ENVIADOS;
						cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dadosPesquisaCobrancaDocumentoHelper.getDataEmissao();
						idCobrancaDocumento = dadosPesquisaCobrancaDocumentoHelper.getIdDocumento();
						cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
						valorMinimoPagoParceladoCancelado = dadosPesquisaCobrancaDocumentoHelper.getPercentualValorMinimoCobrancaCriterio();
						quantidadeMinimoaPagoParceladoCancelado = dadosPesquisaCobrancaDocumentoHelper
										.getPercentualQuantidadeMinimaCobrancaCriterio();

					}

					// 2.2 Seleciona os itens do documento de cobrança
					Collection colecaoCobrancaDocumentoItem = null;
					// COBRANCA_DOCUMENTO_ITEM por CBDO_ID igual a
					// idCobrancaDocmento

					colecaoCobrancaDocumentoItem = this.repositorioCobranca.pesquisarDadosCobrancaDocumentoItem(idCobrancaDocumento);

					// colecaoCobrancaDocumentoItem =
					// this.repositorioCobranca
					// .pesquisarCobrancaDocumentoItem(idCobrancaDocumento);

					// [SB0003] - Determinar Situação de Débtio do Item de
					// Cobrança
					if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){

						cobrancaDocumentoParaAtualizar = processarCobrancaDocumentoItem(colecaoCobrancaDocumentoItem,
										cobrancaDocumentoParaAtualizar, valorMinimoPagoParceladoCancelado,
										quantidadeMinimoaPagoParceladoCancelado);

					}else{
						cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.SEM_DEBITOS;
					}

					if(idServicoTipoAcaoCobranca == null){
						colecaoCobrancaDocumantoParaAtualizar.add(cobrancaDocumentoParaAtualizar);
					}

				}// fim do while da Colecao Cobranca Documentos

				if(!colecaoCobrancaDocumantoParaAtualizar.isEmpty()){
					// grava no banco as COBRANCA_DOCUMENTO
					repositorioCobranca.atualizarCobrancaDocumento(colecaoCobrancaDocumantoParaAtualizar);
				}

				// seta null para o GC liberar
				colecaoCobrancaDocumantoParaAtualizar.clear();
				colecaoCobrancaDocumantoParaAtualizar = null;
			}

			// } else {
			// flagTerminou = true;
			// }

			colecaoDadosPesquisaCobrancaDocumentoHelper.clear();
			colecaoDadosPesquisaCobrancaDocumentoHelper = null;
			// }

		}catch(Exception ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0003] - Determinar Situação de Débtio do Item de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 16/06/2007
	 */
	protected Object[] processarCobrancaDocumentoItem(Collection colecaoCobrancaDocumentoItem, Object[] cobrancaDocumentoParaAtualizar,
					BigDecimal valorMinimoPagoParceladoCancelado, BigDecimal quantidadeMinimoaPagoParceladoCancelado)
					throws ControladorException{

		try{

			// posições do array com os dados que serão atualizados
			final int POSICAO_ID_COBRANCA_DOCUMENTO = 0;
			final int POSICAO_DATA_SITUACAO_ACAO = 2;
			final int POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA = 3;
			final int POSICAO_DATA_SITUACAO_DEBITO = 4;
			final int POSICAO_INDICADOR_ACIMA_ABIAXO = 8;

			// posições do array com os dados que serão
			// atualizados
			// na
			// cobrança documento item
			// final byte POSICAO_ID_COBRANCA_DOCUMENTO = 0;
			final int POSICAO_ID_COBRANCA_DOCUMENTO_ITEM = 1;
			final int POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM = 2;
			final int POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM = 3;

			Integer idCobrancaDocumento = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO];

			// coleção com as situação de debitos acumuladas
			Collection<GerarResumoAcoesCobrancaCronogramaHelper> colecaoGerarResumoAcoesCobrancaCronogramaHelper = new ArrayList();

			if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
				Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();

				Collection colecaoCobrancaDocumentoItemParaAtualizar = new ArrayList();

				Object[] dadosCobrancaDocumentoItem = null;
				while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
					dadosCobrancaDocumentoItem = (Object[]) iteratorColecaoCobrancaDocumentoItem.next();

					// objeto para guardar os valores que serão
					// atualizado
					// do cobrança documento item
					Object[] cobrancaDocumentoItemParaAtualizar = new Object[4];

					int idSituacaoAtual = -1;
					Date dataCancelamento = null;
					Date dataParcelamento = null;
					Short indicadorHistoricoConta = null;
					Short indicadorHistoricoGuia = null;
					Short indicadorHistoricoDebito = null;
					Integer idContaGeral = null;
					Integer idGuiaGeral = null;
					Integer idDebitoGeral = null;
					BigDecimal valorItemCobrado = null;
					Integer idCobrancaDocumentoItem = null;
					// se o indicador historico da conta for
					// diferente de nula
					if(dadosCobrancaDocumentoItem[0] != null){
						indicadorHistoricoConta = (Short) dadosCobrancaDocumentoItem[0];

						idContaGeral = (Integer) dadosCobrancaDocumentoItem[5];
						// se o indicador historico da conta for
						// igual a 1 recupera da conta histórico
						if(indicadorHistoricoConta.shortValue() == ContaGeral.INDICADOR_HISTORICO){
							Object[] dadosContaHistorico = this.repositorioCobranca.pesquisarContaHistorico(idContaGeral);
							// id do debito Credito Situacao
							// Atual
							if(dadosContaHistorico != null){
								if(dadosContaHistorico[0] != null){
									idSituacaoAtual = ((Integer) dadosContaHistorico[0]).intValue();
								}

								// data de cancelamento
								if(dadosContaHistorico[1] != null){
									dataCancelamento = (Date) dadosContaHistorico[1];
								}
								dadosContaHistorico = null;
							}

							// senão recupera da conta
						}else{
							Object[] dadosConta = this.repositorioCobranca.pesquisarConta(idContaGeral);

							// debito credito situação atual for
							// diferente de nulo em conta
							if(dadosConta != null){
								if(dadosConta[0] != null){
									idSituacaoAtual = (Integer) dadosConta[0];
								}
								// data parcelamento for
								// diferente de nulo em conta
								if(dadosConta[1] != null){
									dataCancelamento = (Date) dadosConta[1];
								}
								dadosConta = null;
							}

						}
						// se id situacao atual for igula a
						// parcelada pesquisa a data de parcelamento
						// passando o id da conta geral
						if(idSituacaoAtual == DebitoCreditoSituacao.PARCELADA.intValue()){
							Date dataParcelamentoConta = this.repositorioCobranca.pesquisarParcelamentoConta(idContaGeral,
											ParcelamentoSituacao.NORMAL);
							dataParcelamento = dataParcelamentoConta;
							dataParcelamentoConta = null;
						}
					}

					// se o indicador historico da guia for
					// diferente de nula
					if(dadosCobrancaDocumentoItem[1] != null){
						indicadorHistoricoGuia = (Short) dadosCobrancaDocumentoItem[1];
						idGuiaGeral = (Integer) dadosCobrancaDocumentoItem[6];
						// se o indicador historico da guia for
						// igual a 1 recupera da guia histórico
						if(indicadorHistoricoGuia.shortValue() == GuiaPagamentoGeral.INDICADOR_HISTORICO){

							Object[] dadosGuiaHistorico = this.repositorioCobranca.pesquisarGuiaPagamentoHistorico(idGuiaGeral);
							// debito credito situação atual for
							// diferente de nulo em guia histórico
							if(dadosGuiaHistorico != null){
								if(dadosGuiaHistorico[0] != null){
									idSituacaoAtual = (Integer) dadosGuiaHistorico[0];
								}
								// data parcelamento for
								// diferente de nulo em guia
								// histórico
								if(dadosGuiaHistorico[1] != null){
									dataCancelamento = (Date) dadosGuiaHistorico[1];
								}
								dadosGuiaHistorico = null;
							}
							// senão recupera da conta
						}else{

							Object[] dadosGuia = this.repositorioCobranca.pesquisarGuiaPagamento(idGuiaGeral);
							// debito credito situação atual for
							// diferente de nulo em guia
							if(dadosGuia != null){
								if(dadosGuia[0] != null){
									idSituacaoAtual = (Integer) dadosGuia[0];
								}
								// data parcelamento for
								// diferente de nulo em guia
								if(dadosGuia[1] != null){
									dataCancelamento = (Date) dadosGuia[1];
								}
								dadosGuia = null;
							}
						}

						// se id situacao atual for igula a
						// parcelada pesquisa a data de parcelamento
						// passando o id da guia geral
						if(idSituacaoAtual == DebitoCreditoSituacao.PARCELADA.intValue()){
							Date dataParcelamentoGuia = this.repositorioCobranca.pesquisarParcelamentoGuiaPagamento(idGuiaGeral,
											ParcelamentoSituacao.NORMAL);
							dataParcelamento = dataParcelamentoGuia;
							dataParcelamentoGuia = null;
						}

					}

					// se o indicador historico da debito for
					// diferente de nula
					if(dadosCobrancaDocumentoItem[2] != null){
						indicadorHistoricoDebito = (Short) dadosCobrancaDocumentoItem[2];
						idDebitoGeral = (Integer) dadosCobrancaDocumentoItem[7];
						// se o indicador historico do debito for
						// igual a 1 recupera do debito histórico
						if(indicadorHistoricoDebito.shortValue() == DebitoACobrarGeral.INDICADOR_POSSUI_HISTORICO.shortValue()){

							Object[] dadosDebitoHistorico = this.repositorioCobranca.pesquisarDebitoACobrarHistorico(idDebitoGeral);
							// debito credito situação atual for
							// diferente de nulo em debito histórico
							if(dadosDebitoHistorico != null){
								if(dadosDebitoHistorico[0] != null){
									idSituacaoAtual = (Integer) dadosDebitoHistorico[0];
								}
								// data parcelamento for
								// diferente de nulo em debito
								// histórico
								if(dadosDebitoHistorico[1] != null){
									dataCancelamento = (Date) dadosDebitoHistorico[1];
								}
								dadosDebitoHistorico = null;
							}
							// senão recupera do debito
						}else{
							Object[] dadosDebito = this.repositorioCobranca.pesquisarDebitoACobrarHistorico(idDebitoGeral);
							// debito credito situação atual for
							// diferente de nulo em debito
							if(dadosDebito != null){
								if(dadosDebito[0] != null){
									idSituacaoAtual = (Integer) dadosDebito[0];
								}
								// data parcelamento for
								// diferente de nulo em debito
								if(dadosDebito[1] != null){
									dataCancelamento = (Date) dadosDebito[1];
								}
								dadosDebito = null;
							}
						}
						// se id situacao atual for igula a
						// parcelada pesquisa a data de parcelamento
						// passando o id do debito geral
						if(idSituacaoAtual == DebitoCreditoSituacao.PARCELADA.intValue()){
							Date dataParcelamentoDebito = this.repositorioCobranca.pesquisarParcelamentoDebitoACobrar(idDebitoGeral,
											ParcelamentoSituacao.NORMAL);
							dataParcelamento = dataParcelamentoDebito;
							dataParcelamentoDebito = null;
						}
					}
					// id da cobranca documento item
					if(dadosCobrancaDocumentoItem[3] != null){
						idCobrancaDocumentoItem = (Integer) dadosCobrancaDocumentoItem[3];
					}
					// id da cobranca documento item
					if(dadosCobrancaDocumentoItem[4] != null){
						valorItemCobrado = (BigDecimal) dadosCobrancaDocumentoItem[4];
					}

					// 2. caso a situação atual do item corresponda
					// a
					// PARCELADA
					if(idSituacaoAtual == DebitoCreditoSituacao.PARCELADA.intValue()){

						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO_ITEM] = idCobrancaDocumentoItem;
						// atribir o valor correspondente a DEBITO
						// PARCELADO
						// COBRANCA_DEBITO_SITUACAO
						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = CobrancaDebitoSituacao.PARCELADO;
						cobrancaDocumentoItemParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = dataParcelamento;

						// [SB0004] - Atualizar Item do Documento de
						// Cobrança
						this.atualizarItemDocumentoCobranca(CobrancaDebitoSituacao.PARCELADO, valorItemCobrado, dataParcelamento,
										colecaoGerarResumoAcoesCobrancaCronogramaHelper);

						// 3. caso corresponde a CANCELADA
					}else if(idSituacaoAtual == DebitoCreditoSituacao.CANCELADA.intValue()){

						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO_ITEM] = idCobrancaDocumentoItem;
						// atribir o valor correspondente a DEBITO
						// CANCELADO
						// COBRANCA_DEBITO_SITUACAO
						cobrancaDocumentoItemParaAtualizar[POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = CobrancaDebitoSituacao.CANCELADO;
						cobrancaDocumentoItemParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = dataCancelamento;

						// [SB0004] - Atualizar Item do Documento de
						// Cobrança
						this.atualizarItemDocumentoCobranca(CobrancaDebitoSituacao.CANCELADO, valorItemCobrado, dataCancelamento,
										colecaoGerarResumoAcoesCobrancaCronogramaHelper);

					}else{
						// 4. seleciona os pagamento do item
						Date dataPagamento = null;

						// item é uma CONTA
						if(idContaGeral != null){

							// verifica se a conta esta no
							// CONTA_HISTORICO
							if(indicadorHistoricoConta.intValue() == ContaGeral.INDICADOR_HISTORICO){
								// PAGAMENTO_HISTORICO com CNTA_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosContaHistorico(idContaGeral);

								// verifica se a conta em CONTA
							}else{
								// PAGAMENTO com CNTA_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosConta(idContaGeral);
							}
						}

						// item é uma GUIA DE PAGAMENTO
						if(idGuiaGeral != null){
							// verifica se a guia de pagamento em
							// GUIA_PAGAMENTO_HISTORICO
							if(indicadorHistoricoGuia.shortValue() == GuiaPagamentoGeral.INDICADOR_HISTORICO){
								// PAGAMENTO_HISTORICO com GPAG_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosGuiaPagamentoHistorico(idGuiaGeral);

								// verifica se a guia de pagamento
								// em
								// GUIA_PAGAMENTO
							}else{
								// PAGAMENTO com GPAG_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosGuiaPagamento(idGuiaGeral);
							}

						}
						// item é um DEBITO A COBRAR
						if(idDebitoGeral != null){

							// verifica se a debito a cobrar em
							// DEBITO_A_COBRAR_HISTORICO
							if(indicadorHistoricoDebito.shortValue() == DebitoACobrarGeral.INDICADOR_POSSUI_HISTORICO.shortValue()){
								// PAGAMENTO_HISTORICO com DBAC_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosDebitoACobrarHistorico(idDebitoGeral);

								// verifica se a debito a cobrar em
								// DEBITO_A_COBRAR
							}else{
								// PAGAMENTO com GPAG_ID
								dataPagamento = this.repositorioCobranca.pesquisarMenorDataPagamentosDebitoACobrar(idDebitoGeral);
							}
						}

						// 5. caso exita um ou mais pagamento para o
						// item
						// na verdade, caso encontre alguma data de
						// pagamento é por que existe pagamento
						if(dataPagamento != null){
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO_ITEM] = idCobrancaDocumentoItem;
							// atribir o valor correspondente a
							// DEBITO
							// PAGO
							// COBRANCA_DEBITO_SITUACAO
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = CobrancaDebitoSituacao.PAGO;
							cobrancaDocumentoItemParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = dataPagamento;

							// [SB0004] - Atualizar Item do
							// Documento de
							// Cobrança
							this.atualizarItemDocumentoCobranca(CobrancaDebitoSituacao.PAGO, valorItemCobrado, dataPagamento,
											colecaoGerarResumoAcoesCobrancaCronogramaHelper);

						}else{
							// 6. atribuir o valor ITEM PENDENTE
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO_ITEM] = idCobrancaDocumentoItem;
							// atribir o valor correspondente a ITEM
							// PENDENTE
							// COBRANCA_DEBITO_SITUACAO
							cobrancaDocumentoItemParaAtualizar[POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = CobrancaDebitoSituacao.PENDENTE;
							cobrancaDocumentoItemParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM] = null;

							// [SB0004] - Atualizar Item do
							// Documento de
							// Cobrança
							// acumula a quantidade e o valor do
							// item(CDIT_VLITEMCOBRADO) na situação
							// de
							// débito correspondente
							this.atualizarItemDocumentoCobranca(CobrancaDebitoSituacao.PENDENTE, valorItemCobrado, null,
											colecaoGerarResumoAcoesCobrancaCronogramaHelper);
						}
					}

					// armazena na coleção para no final atualizar
					// os
					// dados
					// que estão dentro dela
					colecaoCobrancaDocumentoItemParaAtualizar.add(cobrancaDocumentoItemParaAtualizar);

					// seta para null para o GC liberar
					dadosCobrancaDocumentoItem = null;
					dataCancelamento = null;
					dataParcelamento = null;
					indicadorHistoricoConta = null;
					indicadorHistoricoGuia = null;
					indicadorHistoricoDebito = null;
					idContaGeral = null;
					idGuiaGeral = null;
					idDebitoGeral = null;
					valorItemCobrado = null;
					idCobrancaDocumentoItem = null;

				}// fim do while de cobranca documento item
					// [SB0004] - Atualizar Item do Documento de
					// Cobrança
					// gravar as cobranca documento item,
					// COBRANCA_DOCUMENTO_ITEM
				if(colecaoCobrancaDocumentoItemParaAtualizar != null && !colecaoCobrancaDocumentoItemParaAtualizar.isEmpty()){

					repositorioCobranca.atualizarCobrancaDocumentoItem(colecaoCobrancaDocumentoItemParaAtualizar);

				}

			}else{
				// caso não tenha cobrança documento item então
				// atribuir a situção SEM DEBITOS
				cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.SEM_DEBITOS;
				cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = null;
			}

			// seta nulo para a coleção ser limpa pelo Garbage
			// Collector
			colecaoCobrancaDocumentoItem = null;

			// 2.3 Determinar a Situação

			if(colecaoGerarResumoAcoesCobrancaCronogramaHelper != null && !colecaoGerarResumoAcoesCobrancaCronogramaHelper.isEmpty()){
				// [SB0005] - Determinar Situação Predominante do
				// Débito
				// do
				// Documento de Cobrança

				Iterator iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper = colecaoGerarResumoAcoesCobrancaCronogramaHelper
								.iterator();
				// quantidade total de todas as ocorrencias
				int quantidadeTotalOcorrencia = 0;
				// Valor total acumulado de todas situações de
				// debito
				BigDecimal valorTotalAcumulado = BigDecimal.ZERO;

				// Situação PAGO
				BigDecimal valorSituacoPago = null;
				BigDecimal quantidadeSituacaoPago = null;
				Date dataSituacaoPago = null;

				// Situação PARCELADO
				BigDecimal valorSituacoParcelado = null;
				BigDecimal quantidadeSituacaoParcelado = null;
				Date dataSituacaoParcelado = null;

				// Situação CANCELADO
				BigDecimal valorSituacoCancelado = null;
				BigDecimal quantidadeSituacaoCancelado = null;
				Date dataSituacaoCancelado = null;

				// flag para saber se so existe situação pendente
				boolean existeApenasSituacaoPendente = false;
				int totalDebitosPendentes = 0;

				while(iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper.hasNext()){
					GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = (GerarResumoAcoesCobrancaCronogramaHelper) iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper
									.next();

					// se a situação for DEBITO PAGO
					if(gerarResumoAcoesCobrancaCronogramaHelper.getIdSituacaoDebito() == CobrancaDebitoSituacao.PAGO.intValue()){
						valorSituacoPago = gerarResumoAcoesCobrancaCronogramaHelper.getValorItemCobrado();
						quantidadeSituacaoPago = new BigDecimal(
										gerarResumoAcoesCobrancaCronogramaHelper.getQuantidadeOcorrenciaSituacaoDebito());
						dataSituacaoPago = gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito();

						// se a situação for DEBITO PARCELADO
					}else if(gerarResumoAcoesCobrancaCronogramaHelper.getIdSituacaoDebito() == CobrancaDebitoSituacao.PARCELADO.intValue()){
						valorSituacoParcelado = gerarResumoAcoesCobrancaCronogramaHelper.getValorItemCobrado();
						quantidadeSituacaoParcelado = new BigDecimal(
										gerarResumoAcoesCobrancaCronogramaHelper.getQuantidadeOcorrenciaSituacaoDebito());
						dataSituacaoParcelado = gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito();

						// se a situação for DEBITO CANCELADO
					}else if(gerarResumoAcoesCobrancaCronogramaHelper.getIdSituacaoDebito() == CobrancaDebitoSituacao.CANCELADO.intValue()){
						valorSituacoCancelado = gerarResumoAcoesCobrancaCronogramaHelper.getValorItemCobrado();
						quantidadeSituacaoCancelado = new BigDecimal(
										gerarResumoAcoesCobrancaCronogramaHelper.getQuantidadeOcorrenciaSituacaoDebito());
						dataSituacaoCancelado = gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito();
					}else{
						// caso não seja nenhuma situação então
						totalDebitosPendentes++;
					}
					// acumula o total das quantidade de ocorrencia
					quantidadeTotalOcorrencia = quantidadeTotalOcorrencia
									+ gerarResumoAcoesCobrancaCronogramaHelper.getQuantidadeOcorrenciaSituacaoDebito();

					// acumula o total acumulado das situações de
					// debito
					valorTotalAcumulado = valorTotalAcumulado.add(gerarResumoAcoesCobrancaCronogramaHelper.getValorItemCobrado());
				}

				/**
				 * caso o total de débitos pendentes seja igual ao nº de objetos
				 * na coleção significa q só existe débitos pendentes
				 */
				if(totalDebitosPendentes == colecaoGerarResumoAcoesCobrancaCronogramaHelper.size()){
					existeApenasSituacaoPendente = true;
				}

				// 1. se so existir situações de DÉBITO PENDENTE
				if(existeApenasSituacaoPendente){
					// atribuir o valor DÉBITO PENDENTE
					cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.PENDENTE;
					cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = null;
				}else{

					// Caso o valor seja diferente de nulo então a
					// quantidade tambem é diferente de nulo
					if(valorMinimoPagoParceladoCancelado != null && !valorMinimoPagoParceladoCancelado.equals("")){

						// 2. Calcula o valor minimo para considerar
						// o
						// documento pago/parcelado/cancelado

						// valor minimo pago parcelado canccelado,
						// CBCT_PCVLMINIMOPGPARCCANC

						BigDecimal resultadoValorMinimo = valorMinimoPagoParceladoCancelado.divide(new BigDecimal("100.00"), 7,
										BigDecimal.ROUND_HALF_UP);
						resultadoValorMinimo = resultadoValorMinimo.multiply(valorTotalAcumulado);

						// arredonda o valor
						BigDecimal valorMinimo = resultadoValorMinimo.setScale(2, BigDecimal.ROUND_HALF_UP);

						// 3. Calcula a quantidade minima de itens
						// para
						// considerar o documento
						// pago/parcelado/cancelado

						// quantidade minimo pago parcelado
						// cancelado,
						// CBCT_PCQTMINIMOPGPARCCANC

						BigDecimal resultadoQuantidadeMinima = quantidadeMinimoaPagoParceladoCancelado.divide(new BigDecimal("100.00"), 7,
										BigDecimal.ROUND_HALF_UP);
						resultadoQuantidadeMinima = resultadoQuantidadeMinima.multiply(new BigDecimal(quantidadeTotalOcorrencia));

						// arredonda o valor
						BigDecimal quantidadeMinima = resultadoQuantidadeMinima.setScale(2, BigDecimal.ROUND_HALF_UP);

						// flag para saber se antender a alguma das
						// situçãoes de PAGO/PARCELADO/CANCELADO
						boolean atenderAlgumaSituacao = false;
						// caso tenha situação DÉBITO PAGO
						if(valorSituacoPago != null){

							// se o valor do pago ou a quantidade
							// mario
							// mario ou igual oas seus respectivos
							// minimos
							if((valorSituacoPago.compareTo(valorMinimo) >= 0) || (quantidadeSituacaoPago.compareTo(quantidadeMinima) >= 0)){
								// atribuir a situção DÉBITO PAGO
								cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.PAGO;
								cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = dataSituacaoPago;
								atenderAlgumaSituacao = true;
							}

							// caso tenha situação DÉBITO PARCELADO
						}else if(valorSituacoParcelado != null){

							// se o valor do pago ou a quantidade
							// mario
							// mario ou igual oas seus respectivos
							// minimos
							if((valorSituacoParcelado.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacaoParcelado.compareTo(quantidadeMinima) >= 0)){
								// atribuir a situção DÉBITO
								// PARCELADO
								cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.PARCELADO;
								cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = dataSituacaoParcelado;
								atenderAlgumaSituacao = true;
							}

							// caso tenha situação DÉBITO CANCELADO
						}else if(valorSituacoCancelado != null){

							// se o valor do pago ou a quantidade
							// mario
							// mario ou igual oas seus respectivos
							// minimos
							if((valorSituacoCancelado.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacaoCancelado.compareTo(quantidadeMinima) >= 0)){
								// atribuir a situção DÉBITO
								// CANCELADO
								cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.CANCELADO;
								cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = dataSituacaoCancelado;
								atenderAlgumaSituacao = true;
							}

						}

						// se não antender as condições acima de
						// PAGO/PARCELADO/CANCELADO, sera DÉBITO
						// PENDENTE
						if(!(atenderAlgumaSituacao)){
							// atribuir a situção DÉBITO PENDENTE
							cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.PENDENTE;
							cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO] = null;
						}
					}
				}
			}// fim do 2.3 Determinar a Situação
			Date dataSituacaoAcao = (Date) cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO];
			Date dataSituacaoDebito = (Date) cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO];

			// retira a hora das datas
			if(dataSituacaoAcao != null && dataSituacaoDebito != null){
				dataSituacaoAcao = Util.formatarDataSemHora(dataSituacaoAcao);
				dataSituacaoDebito = Util.formatarDataSemHora(dataSituacaoDebito);
			}

			// verifica o valor do indicador antes apos
			Short indicadorAntesApos = null;
			if(dataSituacaoAcao != null && dataSituacaoDebito != null){
				// data da situação da ação de cobrança seja
				// anterior a
				// data da situação do débito
				if(dataSituacaoAcao.after(dataSituacaoDebito)){
					indicadorAntesApos = Short.valueOf((short) 1);
				}else{
					indicadorAntesApos = Short.valueOf((short) 2);
				}
			}

			cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_ABIAXO] = indicadorAntesApos;

			// seta null para o GC liberar
			colecaoGerarResumoAcoesCobrancaCronogramaHelper.clear();
			colecaoGerarResumoAcoesCobrancaCronogramaHelper = null;
			idCobrancaDocumento = null;
			valorMinimoPagoParceladoCancelado = null;
			quantidadeMinimoaPagoParceladoCancelado = null;
		}catch(Exception ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return cobrancaDocumentoParaAtualizar;

	}

	public Collection gerarColecaoDocumentoCobrancaOrdemServico(Integer idServicoTipoAcaoCobranca, Date dataRealizacaoAtividadeEncerrar,
					Usuario usuarioLogado, int idCobrancaAtividadeAcaoCronogramaEmitir) throws ControladorException{

		// usado para salvar as COBRANCA_DOCUMENTO a cada 100 itens
		// na
		// coleção
		Collection colecaoCobrancaDocumentoParaAtualizar = new ArrayList();

		try{

			Collection<Object[]> colecaoOrdemServico = null;

			// posições do array com os dados que serão atualizados
			final byte POSICAO_ID_COBRANCA_DOCUMENTO = 0;
			final byte POSICAO_ID_SITUACAO_ACAO = 1;
			final byte POSICAO_DATA_SITUACAO_ACAO = 2;
			final byte POSICAO_ID_CATEGORIA = 5;
			final byte POSICAO_ID_ESFERA_PODER = 6;
			final byte POSICAO_ID_FISCALIZACAO = 7;
			final byte POSICAO_INDICADOR_ACIMA_LIMITE = 9;
			final byte POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA = 10;
			final byte POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA = 11;

			// caso o serviço tipo da ação de cobrança esteja
			// diferente de nulo,neste caso existe ordem de serviço
			// para a cobrança documento
			if(idServicoTipoAcaoCobranca != null){

				// 2.1 Determinar a situação da ação de cobrança, de
				// acordo
				// com
				// a tabela COBRANCA_ACAO_SITUACAO
				// COBRANCA_DOCUMENTO com CBDO_ID igual a
				// idCobrancaDocumento
				colecaoOrdemServico = this.repositorioCobranca.pesquisarOrdemServico(idCobrancaAtividadeAcaoCronogramaEmitir);
				Collection colecaoIdsOrdemServico = new ArrayList();

				Collection colecaoOSUnidade = new ArrayList();

				OrdemServicoUnidade ordemServicoUnidade = null;
				OrdemServico os = null;
				AtendimentoRelacaoTipo atendimentoRelacaoTipo = null;

				// DadosPesquisaCobrancaDocumentoHelper
				// dadosPesquisaCobrancaDocumentoHelperRemocao = null;

				// [SB0002] - Determinar Situação da Ação de
				// Cobrança
				// caso exista ordem serviço para a cobranca
				// documento
				if(colecaoOrdemServico != null && !colecaoOrdemServico.isEmpty()){
					// [SB0007] - Determinar Situação da Ordem de
					// Serviço
					Integer idOrdemServico = null;
					Integer idDocumento = null;
					short situacaoOrdemServico = -1;
					Date dataFiscalizacaoSituacao = null;
					Integer idFiscalizacao = null;
					Date dataEncerramento = null;
					Short indicadorExecucaoMotivoEncerramento = null;
					BigDecimal valorDocumento = null;
					BigDecimal percentualValorMinimoCobrancaCriterio = null;
					BigDecimal percentualQuantidadeMinimaCobrancaCriterio = null;
					BigDecimal valorLimitePrioridadeCobrancaCriterio = null;
					Integer idImovel = null;
					Integer idLocalidade = null;
					Integer idMotivoEncerramento = null;

					Iterator iteColecaoOrdemServico = colecaoOrdemServico.iterator();
					while(iteColecaoOrdemServico.hasNext()){
						Object[] dadosOS = (Object[]) iteColecaoOrdemServico.next();
						if(dadosOS != null){
							if(dadosOS[0] != null){
								idOrdemServico = (Integer) dadosOS[0];
							}
							if(dadosOS[1] != null){
								situacaoOrdemServico = (Short) dadosOS[1];
							}
							if(dadosOS[2] != null){
								dataFiscalizacaoSituacao = (Date) dadosOS[2];
							}
							if(dadosOS[3] != null){
								dataEncerramento = (Date) dadosOS[3];
							}
							if(dadosOS[4] != null){
								idDocumento = (Integer) dadosOS[4];
							}
							if(dadosOS[5] != null){
								valorDocumento = (BigDecimal) dadosOS[5];
							}
							if(dadosOS[6] != null){
								percentualValorMinimoCobrancaCriterio = (BigDecimal) dadosOS[6];
							}
							if(dadosOS[7] != null){
								percentualQuantidadeMinimaCobrancaCriterio = (BigDecimal) dadosOS[7];
							}
							if(dadosOS[8] != null){
								valorLimitePrioridadeCobrancaCriterio = (BigDecimal) dadosOS[8];
							}
							if(dadosOS[9] != null){
								idFiscalizacao = (Integer) dadosOS[9];
							}
							if(dadosOS[10] != null){
								indicadorExecucaoMotivoEncerramento = (Short) dadosOS[10];
							}
							if(dadosOS[11] != null){
								idImovel = (Integer) dadosOS[11];
							}
							if(dadosOS[12] != null){
								idLocalidade = (Integer) dadosOS[12];
							}
							if(dadosOS[13] != null){
								idMotivoEncerramento = (Integer) dadosOS[13];
							}
							// dados para atualizar o cobranca documento
							Object[] cobrancaDocumentoParaAtualizar = new Object[12];
							if(idFiscalizacao != null && !idFiscalizacao.equals("")){
								cobrancaDocumentoParaAtualizar[POSICAO_ID_FISCALIZACAO] = idFiscalizacao;
							}
							// a ordem se serviço não esteja encerrada
							if(situacaoOrdemServico != OrdemServico.SITUACAO_ENCERRADO.shortValue()){
								// caso a atividade da ação de cobrança
								// correspondente a
								// encerrar esteja comanda e a data
								// presvista
								// para o
								// encerramento seja igual ou menor do que
								// a data corrente
								if(dataRealizacaoAtividadeEncerrar != null){

									if(idFiscalizacao == null || idFiscalizacao.equals("")){

										// Atibuir o valor AÇÃO CANCELADA POR
										// DECURSO DE
										// PRAZO
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA_PRAZO;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = new Date();
									}else{
										// atribuir o valor AÇÃO FISCALIZADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.FISCALIZADA;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataFiscalizacaoSituacao;
									}

									UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
													.pesquisarUnidadeOrganizacionalLocalidade(idLocalidade);
									// seta os dados na osUnidade para ser
									// inserido
									// na coleção
									ordemServicoUnidade = new OrdemServicoUnidade();
									os = new OrdemServico();
									atendimentoRelacaoTipo = new AtendimentoRelacaoTipo();

									ordemServicoUnidade.setUnidadeOrganizacional(unidadeOrganizacional);
									os.setId(idOrdemServico);
									ordemServicoUnidade.setOrdemServico(os);
									// seta o usuário na ordem serviço unidade
									ordemServicoUnidade.setUsuario(usuarioLogado);
									// seta o id do atendimento relação tipo
									atendimentoRelacaoTipo.setId(AtendimentoRelacaoTipo.ENCERRAR);
									ordemServicoUnidade.setAtendimentoRelacaoTipo(atendimentoRelacaoTipo);

									// seta a ultima alteração com a data atual
									ordemServicoUnidade.setUltimaAlteracao(new Date());
									colecaoOSUnidade.add(ordemServicoUnidade);

									// seta para null os dados para serem
									// coletados
									// pelo GC
									ordemServicoUnidade = null;
									os = null;
									atendimentoRelacaoTipo = null;

									colecaoIdsOrdemServico.add(idOrdemServico);
								}else{
									// caso a situação da fiscalização da
									// ordem
									// de
									// serviço esteja preenchida
									if(idFiscalizacao != null && !idFiscalizacao.equals("")){
										// atribuir o valor AÇÃO FISCALIZADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.FISCALIZADA;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataFiscalizacaoSituacao;
									}else{
										// atribuir o valor AÇÃO PENDENTE
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.PENDENTE;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = null;
									}
								}

							}else{
								// recebe a data de encerramento da ordem de
								// serivo(ORSE_TMENCERRAMENTO)
								cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataEncerramento;
								// indicador de Execução
								// caso o motivo de encerramento
								// corresponda
								// à
								// execução
								if(indicadorExecucaoMotivoEncerramento != null && indicadorExecucaoMotivoEncerramento.intValue() == 1){
									// atribuir o valor AÇÃO EXECUTADA
									cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.EXECUTADA;

								}else{
									if(idMotivoEncerramento != null
													&& Short.valueOf(idMotivoEncerramento.toString()).equals(
																	AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO)){
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA_PRAZO;

									}else{
										// atribuir o valor AÇÃO CANCELADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA;
									}

								}
							}

							// indicador acima do limite
							Short indicadorAcimaLimite = null;
							if(valorDocumento != null && valorDocumento.compareTo(valorLimitePrioridadeCobrancaCriterio) > 0){
								indicadorAcimaLimite = Short.valueOf((short) 1);
							}else{
								indicadorAcimaLimite = Short.valueOf((short) 2);
							}

							cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE] = indicadorAcimaLimite;

							// [UC0306] - Obter Principal CAtegoria do Imovel
							Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel(idImovel);
							cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] = categoria.getId();

							// pesquisa os imovel para ser usado para gravar o
							// Resumo
							// Cobrança Ação
							Imovel imovel = this.pesquisarDadosImovel(idImovel);

							// pega a esfera do poder do imovel
							EsferaPoder esferaPoder = null;
							if(imovel.getClienteImoveis() != null && !imovel.getClienteImoveis().isEmpty()){
								ClienteImovel clienteImovel = imovel.getClienteImoveis().iterator().next();

								if(clienteImovel.getCliente() != null && clienteImovel.getCliente().getClienteTipo() != null){
									esferaPoder = clienteImovel.getCliente().getClienteTipo().getEsferaPoder();
								}
							}
							if(esferaPoder != null && !esferaPoder.equals("")){
								cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = esferaPoder.getId();
							}else{
								cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = null;
							}
							// atualiza os campos para serem utilizados para
							// atualização
							// e consulta de dados da cobrança documento
							cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idDocumento;
							cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA] = percentualValorMinimoCobrancaCriterio;
							cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA] = percentualQuantidadeMinimaCobrancaCriterio;
							colecaoCobrancaDocumentoParaAtualizar.add(cobrancaDocumentoParaAtualizar);
							cobrancaDocumentoParaAtualizar = null;

							// limpa os campos
							cobrancaDocumentoParaAtualizar = null;
							idOrdemServico = null;
							idDocumento = null;
							situacaoOrdemServico = -1;
							dataFiscalizacaoSituacao = null;
							idFiscalizacao = null;
							dataEncerramento = null;
							indicadorExecucaoMotivoEncerramento = null;

							valorDocumento = null;
							percentualValorMinimoCobrancaCriterio = null;
							percentualQuantidadeMinimaCobrancaCriterio = null;
							valorLimitePrioridadeCobrancaCriterio = null;
							idImovel = null;
							idLocalidade = null;
							// remove o documento cobrança do helper para que
							// ele
							// não entre no while de documentos de cobrança que
							// não
							// tenham OS
							// dadosPesquisaCobrancaDocumentoHelperRemocao = new
							// DadosPesquisaCobrancaDocumentoHelper(
							// dadosPesquisaOSCobrancaDocumentoHelper
							// .getIdDocumento());
							// colecaoDadosCobrancaDocumentoHelper
							// .remove(dadosPesquisaCobrancaDocumentoHelperRemocao);
							// dadosPesquisaCobrancaDocumentoHelperRemocao =
							// null;

						}

					}

				}
				// atualiza as ordem de serviços
				if(colecaoIdsOrdemServico != null && !colecaoIdsOrdemServico.isEmpty()){
					repositorioCobranca.atualizarParmsOS(colecaoIdsOrdemServico,
									AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO.intValue());
					getControladorBatch().inserirColecaoObjetoParaBatch(colecaoOSUnidade);

					// limpa a coleção para ser coletado pelo GC
					colecaoIdsOrdemServico.clear();
					colecaoOSUnidade.clear();
					colecaoIdsOrdemServico = null;
					colecaoOSUnidade = null;
				}

				// if (colecaoDadosCobrancaDocumentoHelper != null
				// && !colecaoDadosCobrancaDocumentoHelper.isEmpty()) {
				// Iterator iteColecaoDadosCobrancaDocumentoHelper =
				// colecaoDadosCobrancaDocumentoHelper
				// .iterator();
				// while (iteColecaoDadosCobrancaDocumentoHelper.hasNext()) {
				// DadosPesquisaCobrancaDocumentoHelper
				// dadosPesquisaCobrancaDocumentoHelper =
				// (DadosPesquisaCobrancaDocumentoHelper)
				// iteColecaoDadosCobrancaDocumentoHelper
				// .next();
				// dados para atualizar o cobranca documento
				// Object[] cobrancaDocumentoParaAtualizar = new Object[12];
				//
				// indicador acima do limite
				// Short indicadorAcimaLimite = null;
				// if (dadosPesquisaCobrancaDocumentoHelper
				// .getValorDocumento() != null
				// && dadosPesquisaCobrancaDocumentoHelper
				// .getValorDocumento()
				// .compareTo(
				// dadosPesquisaCobrancaDocumentoHelper
				// .getValorLimitePrioridadeCobrancaCriterio()) > 0) {
				// indicadorAcimaLimite = new Short("1");
				// } else {
				// indicadorAcimaLimite = new Short("2");
				// }
				//
				// cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE]
				// = indicadorAcimaLimite;
				//
				// [UC0306] - Obter Principal CAtegoria do Imovel
				// Categoria categoria = getControladorImovel()
				// .obterPrincipalCategoriaImovel(
				// dadosPesquisaCobrancaDocumentoHelper
				// .getIdImovel());
				// cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] =
				// categoria
				// .getId();
				//
				// pesquisa os imovel para ser usado para gravar o
				// Resumo
				// Cobrança Ação
				// Imovel imovel = this
				// .pesquisarDadosImovel(dadosPesquisaCobrancaDocumentoHelper
				// .getIdImovel());
				//
				// pega a esfera do poder do imovel
				// EsferaPoder esferaPoder = null;
				// if (imovel.getClienteImoveis() != null
				// && !imovel.getClienteImoveis().isEmpty()) {
				// Cliente cliente = (Cliente) imovel
				// .getClienteImoveis().iterator().next();
				// esferaPoder = cliente.getClienteTipo()
				// .getEsferaPoder();
				// }
				// if (esferaPoder != null && !esferaPoder.equals("")) {
				// cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] =
				// esferaPoder
				// .getId();
				// } else {
				// cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] =
				// null;
				// }
				//
				// atualiza os campos para serem utilizados para
				// atualização
				// e consulta de dados da cobrança documento
				// Atribuir o valor AÇÃO ENVIADOS à situação de
				// Cobrança
				// cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] =
				// CobrancaAcaoSituacao.ENVIADOS;
				// cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] =
				// dadosPesquisaCobrancaDocumentoHelper
				// .getDataEmissao();
				// cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]
				// = dadosPesquisaCobrancaDocumentoHelper
				// .getIdDocumento();
				// cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA]
				// = dadosPesquisaCobrancaDocumentoHelper
				// .getPercentualValorMinimoCobrancaCriterio();
				// cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA]
				// = dadosPesquisaCobrancaDocumentoHelper
				// .getPercentualQuantidadeMinimaCobrancaCriterio();
				// colecaoCobrancaDocumentoParaAtualizar
				// .add(cobrancaDocumentoParaAtualizar);
				// cobrancaDocumentoParaAtualizar = null;
				// }
				// }
			}

		}catch(Exception ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoCobrancaDocumentoParaAtualizar;
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0001] - Processar Documento de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 11/05/2007
	 */
	public void pesquisarDocumentosCobrancaParaGeracaoResumo(int idCobrancaAtividadeAcaoCronogramaEmitir,
					Date dataPrevistaAtividadeEncerrar, int idCobrancaAtividadeAcaoCronogramaEncerrar,
					int anoMesReferenciaCobrancaGrupoCronogramaMes, int idCobrancaAcaoCronograma, int idCobrancaGrupo, int idCobrancaAcao,
					Date dataRealizacaoAtividadeEmitir, Date dataRealizacaoAtividadeEncerrar) throws ControladorException{

		// parte da paginação
		// int indice = 0;
		// boolean flagTerminou = false;

		// colecao com os documentos de cobrança gerados na atividade EMITIR da
		// ação de cobrança
		Collection colecaoDadosCobrancaDocumentos = null;

		Collection colecaoResumoCobrancaAcao = new ArrayList();

		int indicadorDefinitivo = 0;

		try{

			if(dataRealizacaoAtividadeEncerrar != null){
				// Item 1
				// COBRANCA_DOCUMENTO com CAAC_ID igual a
				// idCobrancaAtividadeAcaoCronogramaEmitir
				colecaoDadosCobrancaDocumentos = this.repositorioCobranca
								.pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando(idCobrancaAtividadeAcaoCronogramaEmitir);
				indicadorDefinitivo = 1;
			}else{
				colecaoDadosCobrancaDocumentos = this.repositorioCobranca
								.pesquisarDadosCobrancaDocumentoAgrupadoPorDataPrevista(idCobrancaAtividadeAcaoCronogramaEmitir);
				indicadorDefinitivo = 2;
			}

			// para cada documento de cobrança
			if(colecaoDadosCobrancaDocumentos != null && !colecaoDadosCobrancaDocumentos.isEmpty()){

				// if (colecaoDadosCobrancaDocumentos.size() < 500) {
				// flagTerminou = true;
				// } else {
				// indice = indice + 500;
				// }

				Iterator iteratorColecaoCobrancaDocumentos = colecaoDadosCobrancaDocumentos.iterator();
				while(iteratorColecaoCobrancaDocumentos.hasNext()){

					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper = (DadosCobrancaDocumentoHelper) iteratorColecaoCobrancaDocumentos
									.next();

					// verifica se exista a data de realização da atividade
					// de encerrar se
					// existir então recupera ela para ser comparada,senão
					// recupera a data
					// prevista da atividade de encerrar
					Date dataAtividadeEncerrar = null;
					if(dataRealizacaoAtividadeEncerrar != null){
						dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
					}else{
						dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
					}

					// id do Cobranca Documento
					Integer idCobrancaCriterio = null;
					if(dadosCobrancaDocumentoHelper.getIdCobrancaCriterio() != null){
						idCobrancaCriterio = dadosCobrancaDocumentoHelper.getIdCobrancaCriterio();
					}

					Integer idFiscalizacao = null;
					if(dadosCobrancaDocumentoHelper.getIdFiscalizacao() != null){
						idFiscalizacao = dadosCobrancaDocumentoHelper.getIdFiscalizacao();
					}
					Categoria categoria = null;
					if(dadosCobrancaDocumentoHelper.getIdCategoria() != null){
						categoria = new Categoria();
						categoria.setId(dadosCobrancaDocumentoHelper.getIdCategoria());

					}
					Empresa empresa = null;
					if(dadosCobrancaDocumentoHelper.getIdEmpresa() != null){
						empresa = new Empresa();
						empresa.setId(dadosCobrancaDocumentoHelper.getIdEmpresa());

					}

					// cria o ResumoCobrancaAcao
					ResumoCobrancaAcao resumoCobrancaAcao = this.criarResumoCobrancaAcao(anoMesReferenciaCobrancaGrupoCronogramaMes,
									idCobrancaAcaoCronograma, dataRealizacaoAtividadeEmitir, dataAtividadeEncerrar, idCobrancaGrupo,
									categoria, idCobrancaAcao, dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao(),
									dadosCobrancaDocumentoHelper.getIdSituacaoDebito(), idFiscalizacao, 1,
									dadosCobrancaDocumentoHelper.getIndicadorAcimaAbaixo(),
									dadosCobrancaDocumentoHelper.getIndicadorAcimaLimite(),
									dadosCobrancaDocumentoHelper.getValorDocumentos(), idCobrancaCriterio,
									dadosCobrancaDocumentoHelper.getIdGerenciaRegional(), dadosCobrancaDocumentoHelper.getIdLocalidade(),
									dadosCobrancaDocumentoHelper.getIdSetorComercial(), dadosCobrancaDocumentoHelper.getIdRota(),
									dadosCobrancaDocumentoHelper.getCodigoSetorComercial(), dadosCobrancaDocumentoHelper.getIdQuadra(),
									dadosCobrancaDocumentoHelper.getNumeroQuadra(), dadosCobrancaDocumentoHelper.getIdImovelPerfil(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoAgua(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoEsgoto(),
									dadosCobrancaDocumentoHelper.getIdEsferaPoder(),
									dadosCobrancaDocumentoHelper.getQuantidadeDocumentos(), empresa, indicadorDefinitivo,
									dadosCobrancaDocumentoHelper.getIdUnidadeNegocio());

					// adciona na coleção
					colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
				}
			}

			// } else {
			// flagTerminou = true;
			// }
			// seta nulo para o Garbage Collector limpar
			colecaoDadosCobrancaDocumentos.clear();
			colecaoDadosCobrancaDocumentos = null;

			// 2.5 gravar os dados na tabela RESUMO_COBRANCA_ACAO
			if(!colecaoResumoCobrancaAcao.isEmpty()){
				getControladorBatch().inserirColecaoObjetoParaBatch(colecaoResumoCobrancaAcao);
			}

			// 2.6
			// caso a atividade da ação de cobrança correspondente a
			// encerrar esteja comandada e a data prescita para o
			// encerramento seja igual ou menor do que a data
			// corrente
			if(dataRealizacaoAtividadeEncerrar != null){
				// atualiza a data e hora da realização da atividade
				// encerrar ação de cobrança
				// grava no banco as
				// COBRANCA_ACAO_ATIVADADE_CRONOGRAMA
				repositorioCobranca.atualizarCobrancaAcaoAtividadeCronograma(idCobrancaAtividadeAcaoCronogramaEncerrar);
			}
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0004] - Atualizar Item do Documento de Cobrança
	 * Acumula a quantidade e o valor do item, na situiaão de débito
	 * correspondente Armazena a data da situação do débito do imte do documento
	 * de cobrança refrente a situação do débito do item do documento de
	 * cobrança
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 */
	public void atualizarItemDocumentoCobranca(int idSituacaoDebito, BigDecimal valorItemCobrado, Date dataSituacaoDebito,
					Collection<GerarResumoAcoesCobrancaCronogramaHelper> colecaoGerarResumoAcoesCobrancaCronogramaHelper){

		if(colecaoGerarResumoAcoesCobrancaCronogramaHelper != null && !colecaoGerarResumoAcoesCobrancaCronogramaHelper.isEmpty()){
			// se a coleção não estiver vazia, procura por uma ocorrencia o id
			// da Situação do Débito para acumular, se não existir adiciona

			Iterator iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper = colecaoGerarResumoAcoesCobrancaCronogramaHelper.iterator();
			// guarda a informação para saber se existe ou não o debito na
			// coleção
			boolean naoExisteSituacaoDebito = true;
			// variavel para parar o loop da coleção
			boolean achou = true;
			// posição para aculumar situação do debito
			// int indicePosicaoParaAcumular = -1;
			// indice corrente do item na coleção
			// int indice = 0;
			// objeto que ira receber o resumo para ser substituido

			GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = null;
			while(iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper.hasNext() && achou){
				gerarResumoAcoesCobrancaCronogramaHelper = (GerarResumoAcoesCobrancaCronogramaHelper) iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper
								.next();

				// verifica se existe na coleção
				if(gerarResumoAcoesCobrancaCronogramaHelper.getIdSituacaoDebito() == idSituacaoDebito){
					achou = false;// para a loop da coleção
					// indicePosicaoParaAcumular = indice;//guarda o indice da
					// coleção a qual esta o registro para ser substituido
					naoExisteSituacaoDebito = false;// guarda a informação de
					// que existe a situação de
					// debito na coleção
				}
			}

			// se não existi a situação de debito na coleção adiciona
			if(naoExisteSituacaoDebito){
				gerarResumoAcoesCobrancaCronogramaHelper = new GerarResumoAcoesCobrancaCronogramaHelper();

				// cria o objeto
				gerarResumoAcoesCobrancaCronogramaHelper.setIdSituacaoDebito(idSituacaoDebito);
				gerarResumoAcoesCobrancaCronogramaHelper.setQuantidadeOcorrenciaSituacaoDebito(1);
				gerarResumoAcoesCobrancaCronogramaHelper.setValorItemCobrado(valorItemCobrado);
				gerarResumoAcoesCobrancaCronogramaHelper.setDataSituacaoDebito(dataSituacaoDebito);

				// adciona na coleção
				colecaoGerarResumoAcoesCobrancaCronogramaHelper.add(gerarResumoAcoesCobrancaCronogramaHelper);
			}else{
				// existe situação de debito na coleção

				// acumula a quantidade de ocorrencia da situação de debito
				gerarResumoAcoesCobrancaCronogramaHelper.setQuantidadeOcorrenciaSituacaoDebito(gerarResumoAcoesCobrancaCronogramaHelper
								.getQuantidadeOcorrenciaSituacaoDebito() + 1);
				// acumula o valor do item cobrado
				gerarResumoAcoesCobrancaCronogramaHelper.setValorItemCobrado(gerarResumoAcoesCobrancaCronogramaHelper.getValorItemCobrado()
								.add(valorItemCobrado));
				// armazena a data da situação de debito
				// caso ela for nula, armazena a data
				if(gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito() == null){
					gerarResumoAcoesCobrancaCronogramaHelper.setDataSituacaoDebito(dataSituacaoDebito);
				}else{
					Date datagerarResumoAcoesCobrancaCronogramaHelper = null;
					if(gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito() != null){
						datagerarResumoAcoesCobrancaCronogramaHelper = gerarResumoAcoesCobrancaCronogramaHelper.getDataSituacaoDebito();

						// se a data que esta, for maior que a data recebido, a nova
						// data ser a dataSituacaoDebito
						if(dataSituacaoDebito != null){
							if(datagerarResumoAcoesCobrancaCronogramaHelper.compareTo(dataSituacaoDebito) > 0){
								gerarResumoAcoesCobrancaCronogramaHelper.setDataSituacaoDebito(dataSituacaoDebito);
							}
						}
					}
				}
			}
		}else{

			GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = new GerarResumoAcoesCobrancaCronogramaHelper();

			// cria o objeto
			gerarResumoAcoesCobrancaCronogramaHelper.setIdSituacaoDebito(idSituacaoDebito);
			gerarResumoAcoesCobrancaCronogramaHelper.setQuantidadeOcorrenciaSituacaoDebito(1);
			gerarResumoAcoesCobrancaCronogramaHelper.setValorItemCobrado(valorItemCobrado);
			gerarResumoAcoesCobrancaCronogramaHelper.setDataSituacaoDebito(dataSituacaoDebito);

			// adciona na coleção
			colecaoGerarResumoAcoesCobrancaCronogramaHelper.add(gerarResumoAcoesCobrancaCronogramaHelper);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0001] - Processar Documentos de Cobrança
	 * Pesquisa o Imovel para ser usado para acumular valores no
	 * RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 23/10/2006
	 */
	public Imovel pesquisarDadosImovel(int idImovel) throws ControladorException{

		Imovel imovel = new Imovel();

		Collection imoveis;

		// Pesquisa imovel
		try{
			// IMOV_ID de IMOVEL igual a idImovel
			imoveis = repositorioCobranca.pesquisarDadosImovel(idImovel);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// Verifica se imovel
		if(imoveis != null && !imoveis.isEmpty()){

			Iterator iteratorImoveis = imoveis.iterator();

			while(iteratorImoveis.hasNext()){

				Object[] arrayImovel = (Object[]) iteratorImoveis.next();

				// id do imovel
				imovel.setId(idImovel);

				// ligacaoAguaSituacao.id
				if(arrayImovel[0] != null){
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId((Integer) arrayImovel[0]);
					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);

					ligacaoAguaSituacao = null;
				}

				// ligacaoEsgotoSituacao.id
				if(arrayImovel[1] != null){
					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao.setId((Integer) arrayImovel[1]);
					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

					ligacaoEsgotoSituacao = null;
				}

				// localidade.id
				Localidade localidade = null;
				if(arrayImovel[2] != null){
					localidade = new Localidade();
					localidade.setId((Integer) arrayImovel[2]);
					imovel.setLocalidade(localidade);

				}

				Quadra quadra = null;
				// quadra.id
				if(arrayImovel[3] != null){
					quadra = new Quadra();
					quadra.setId((Integer) arrayImovel[3]);
					imovel.setQuadra(quadra);
				}

				// quadra.numeroQuadra
				if(arrayImovel[4] != null){
					if(quadra == null){
						quadra = new Quadra();
					}
					quadra.setNumeroQuadra(((Integer) arrayImovel[4]).intValue());
					imovel.setQuadra(quadra);
				}

				SetorComercial setorComercial = null;
				// setorComercial.id
				if(arrayImovel[5] != null){
					setorComercial = new SetorComercial();
					setorComercial.setId(((Integer) arrayImovel[5]).intValue());
					imovel.setSetorComercial(setorComercial);
				}

				// setorComercial.codigo
				if(arrayImovel[6] != null){
					if(setorComercial == null){
						setorComercial = new SetorComercial();
					}
					setorComercial.setCodigo(((Integer) arrayImovel[6]).intValue());
					imovel.setSetorComercial(setorComercial);
				}

				setorComercial = null;

				// localidade.gerenciaRegional.iid
				if(arrayImovel[7] != null){
					if(localidade == null){
						localidade = new Localidade();
					}
					GerenciaRegional gerenciaRegional = new GerenciaRegional();
					gerenciaRegional.setId((Integer) arrayImovel[7]);
					localidade.setGerenciaRegional(gerenciaRegional);
					imovel.setLocalidade(localidade);
				}

				localidade = null;

				// rota.id
				if(arrayImovel[8] != null){
					Rota rota = new Rota();
					rota.setId((Integer) arrayImovel[8]);
					imovel.setRota(rota);
				}

				// imovelPerfil.id
				if(arrayImovel[9] != null){
					ImovelPerfil imovelPerfil = new ImovelPerfil();
					imovelPerfil.setId((Integer) arrayImovel[9]);
					imovel.setImovelPerfil(imovelPerfil);

					imovelPerfil = null;
				}

				// esfera do poder
				if(arrayImovel[10] != null){
					HashSet clientes = new HashSet();
					EsferaPoder esferaPoder = new EsferaPoder();
					esferaPoder.setId((Integer) arrayImovel[10]);

					ClienteTipo clienteTipo = new ClienteTipo();
					clienteTipo.setEsferaPoder(esferaPoder);

					Cliente cliente = new Cliente();
					if(arrayImovel[11] != null){
						cliente.setId((Integer) arrayImovel[11]);
					}
					cliente.setClienteTipo(clienteTipo);

					ClienteImovel clienteImovel = new ClienteImovel();
					clienteImovel.setImovel(imovel);
					clienteImovel.setCliente(cliente);
					clientes.add(clienteImovel);
					imovel.setClienteImoveis(clientes);

					clientes = null;
					esferaPoder = null;
					clienteTipo = null;
					clienteTipo = null;
				}
			}
		}

		return imovel;
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0001] - Processar Documentos de Cobrança
	 * Acumular ou insere na coelção de RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 24/10/2006
	 */
	// public Collection<ResumoCobrancaAcao> acumularResumoCobrancaAcao(
	// Collection colecaoResumoCobrancaAcao,
	// int anoMesReferenciaCobrancaGrupoCronogramaMes,
	// int idCobrancaAcaoCronograma, Date dataRealizacaoAtividadeEmitir,
	// Date dataPrevistaAtividadeEncerrar, int idCobrancaGrupo,
	// Imovel imovel, Categoria categoria, int idCobrancaAcao,
	// Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito,
	// Integer idFiscalizacao, int indicadorCronogramaComando,
	// Date dataSituacaoAcao, Date dataSituacaoDebito,
	// BigDecimal valorDocumento, BigDecimal valorLimitePrioridade,
	// Integer idCobrancaCriterio, Date dataRealizacaoAtividadeEncerrar) {
	//
	// retira a hora das datas
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// dataSituacaoAcao = Util.formatarDataSemHora(dataSituacaoAcao);
	// dataSituacaoDebito = Util.formatarDataSemHora(dataSituacaoDebito);
	// }
	//
	// verifica se exista a data de realização da atividade de encerrar se
	// existir então recupera ela para ser comparada,senão recupera a data
	// prevista da atividade de encerrar
	// Date dataAtividadeEncerrar = null;
	// if (dataRealizacaoAtividadeEncerrar != null) {
	// dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
	// } else {
	// dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
	// }
	//
	// ALterado por Sávio Luiz data:27/03/2007
	// SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
	// //
	// try {
	// dataSituacaoAcao = formato.parse("" + dataSituacaoAcao);
	// } catch (java.text.ParseException e) {
	// dataSituacaoAcao = null;
	// }
	//
	// if (colecaoResumoCobrancaAcao != null
	// && !colecaoResumoCobrancaAcao.isEmpty()) {
	// se a coleção não estiver vazia, procura por uma ocorrencia do
	// resumo cobrança ação para acumular, se não existir adiciona
	//
	// Iterator iteratorColecaoResumoCobrancaAcao = colecaoResumoCobrancaAcao
	// .iterator();
	// guarda a informação para saber se existe ou não o resumo cobrança
	// ação
	// boolean naoExisteResumoCobrancaAcao = true;
	// variavel para parar o loop da coleção
	// boolean achou = true;
	//
	// ResumoCobrancaAcao resumoCobrancaAcao = null;
	//
	// while (iteratorColecaoResumoCobrancaAcao.hasNext() && achou) {
	// resumoCobrancaAcao = (ResumoCobrancaAcao)
	// iteratorColecaoResumoCobrancaAcao
	// .next();
	//
	// verifica se existe na coleção
	// if (resumoCobrancaAcao.getAnoMesReferencia() ==
	// anoMesReferenciaCobrancaGrupoCronogramaMes
	// && resumoCobrancaAcao.getCobrancaAcaoCronograma()
	// .getId().equals(idCobrancaAcaoCronograma)
	// && resumoCobrancaAcao.getRealizacaoEmitir().compareTo(
	// dataRealizacaoAtividadeEmitir) == 0
	// && resumoCobrancaAcao.getRealizacaoEncerrar()
	// .compareTo(dataAtividadeEncerrar) == 0
	// && resumoCobrancaAcao.getCobrancaGrupo().getId()
	// .equals(idCobrancaGrupo)
	// && resumoCobrancaAcao.getGerenciaRegional().getId()
	// .equals(
	// imovel.getLocalidade()
	// .getGerenciaRegional().getId())
	// && resumoCobrancaAcao.getLocalidade().getId().equals(
	// imovel.getLocalidade().getId())
	// && resumoCobrancaAcao.getSetorComercial().getId()
	// .equals(imovel.getSetorComercial().getId())
	// && resumoCobrancaAcao.getRota().getId().equals(
	// imovel.getQuadra().getRota().getId())
	// && resumoCobrancaAcao.getCodigoSetorComercial() == imovel
	// .getSetorComercial().getCodigo()
	// && resumoCobrancaAcao.getQuadra().getId().equals(
	// imovel.getQuadra().getId())
	// && resumoCobrancaAcao.getNumeroQuadra() == imovel
	// .getQuadra().getNumeroQuadra()
	// && resumoCobrancaAcao.getImovelPerfil().getId().equals(
	// imovel.getImovelPerfil().getId())
	// && resumoCobrancaAcao
	// .getLigacaoAguaSituacao()
	// .getId()
	// .equals(imovel.getLigacaoAguaSituacao().getId())
	// && resumoCobrancaAcao.getLigacaoEsgotoSituacao()
	// .getId().equals(
	// imovel.getLigacaoEsgotoSituacao()
	// .getId())
	// && resumoCobrancaAcao.getCategoria().getId().equals(
	// categoria.getId())
	// && resumoCobrancaAcao.getCobrancaAcao().getId().equals(
	// idCobrancaAcao)
	// && resumoCobrancaAcao.getCobrancaAcaoSituacao().getId()
	// .equals(idSituacaoAcao)
	// &&
	// //
	// resumoCobrancaAcao.getCobrancaDebitoSituacao().getId().equals(idSituacaoPredominanteDebito)
	// && resumoCobrancaAcao.getCobrancaCriterio().getId()
	// .equals(idCobrancaCriterio)) {
	//
	// /** verifica se a situação do debito é a mesma do resumo */
	// boolean igualdadeCobrancaDebitoSituacao = false;
	//
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao() != null
	// && idSituacaoPredominanteDebito != null) {
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao()
	// .getId().equals(idSituacaoPredominanteDebito)) {
	// igualdadeCobrancaDebitoSituacao = true;
	// }
	// }
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao() == null
	// && idSituacaoPredominanteDebito == null) {
	// igualdadeCobrancaDebitoSituacao = true;
	// }
	//
	// boolean igualdadeFiscalizacao = false;
	//
	// id fiscalização
	// verifica se a fiscalização na coleção esta diferente de
	// nula e se a que irei comparar também é nula
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao() != null
	// && idFiscalizacao != null) {
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao()
	// .getId().equals(idFiscalizacao)) {
	// igualdadeFiscalizacao = true;
	// }
	// }
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao() == null
	// && idFiscalizacao == null) {
	// se as duas fiscalização forem nulas, elas são iguais
	// como critéios diferença
	// igualdadeFiscalizacao = true;
	// }
	//
	// pega a esfera do poder do imovel
	// EsferaPoder esferaPoder = null;
	// if (imovel.getClienteImoveis() != null
	// && !imovel.getClienteImoveis().isEmpty()) {
	// Cliente cliente = (Cliente) imovel.getClienteImoveis()
	// .iterator().next();
	// esferaPoder = cliente.getClienteTipo().getEsferaPoder();
	// }
	// boolean igualdadeEsferaPoder = false;
	//
	// verifica se a esfera do poder na coleção esta diferente
	// de nula e se a que irei comparar também é nula
	// if (resumoCobrancaAcao.getEsferaPoder() != null
	// && esferaPoder != null) {
	// if (resumoCobrancaAcao.getEsferaPoder().getId().equals(
	// esferaPoder.getId())) {
	// igualdadeEsferaPoder = true;
	// }
	// }
	// if (resumoCobrancaAcao.getEsferaPoder() == null
	// && esferaPoder == null) {
	// se as duas esferar do poder forem nulas, elas são
	// iguais como critéios diferença
	// igualdadeEsferaPoder = true;
	// }
	//
	// verifica o valor do indicador antes apos
	// Short indicadorAntesApos = null;
	// if (dataSituacaoAcao == null && dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// }
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// data da situação da ação de cobrança seja anterior a
	// data da situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Short("1");
	// } else {
	// indicadorAntesApos = new Short("2");
	// }
	// }
	//
	// boolean igualdadeIndicadorAntesApos = false;
	//
	// verifica se o indicador de antes e apos na coleção são
	// iguais
	// if (resumoCobrancaAcao.getIndicadorAntesApos() == null
	// && indicadorAntesApos == null) {
	// igualdadeIndicadorAntesApos = true;
	// } else {
	// if (resumoCobrancaAcao.getIndicadorAntesApos() != null
	// && indicadorAntesApos != null) {
	// if (resumoCobrancaAcao.getIndicadorAntesApos()
	// .shortValue() == indicadorAntesApos
	// .shortValue()) {
	// igualdadeIndicadorAntesApos = true;
	// }
	// }
	// }
	//
	// boolean igualdadeIndicadorAcimaLimite = false;
	//
	// indicador acima do limite
	// Short indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Short("1");
	// } else {
	// indicadorAcimaLimite = new Short("2");
	// }
	//
	// verifica se o indicador de acima do limite na coleção são
	// iguais
	// if (resumoCobrancaAcao.getIndicadorLimite() == indicadorAcimaLimite
	// .shortValue()) {
	// igualdadeIndicadorAcimaLimite = true;
	// }
	//
	// verifica se são igual na esfera do poder, no indicador
	// antes e apos e no indicador acima do limite
	// if (igualdadeFiscalizacao && igualdadeEsferaPoder
	// && igualdadeIndicadorAntesApos
	// && igualdadeIndicadorAcimaLimite
	// && igualdadeCobrancaDebitoSituacao) {
	// achou = false;// para a loop da coleção
	// naoExisteResumoCobrancaAcao = false;// guarda a
	// informação de que
	// existe o resumo
	// cobranca ação na
	// coleção
	// }
	// }
	// }
	//
	// se não existi o resumo cobrança ação na coleção adiciona
	// if (naoExisteResumoCobrancaAcao) {
	//
	// indicador antes apos
	// Integer indicadorAntesApos = null;
	// if (dataSituacaoAcao == null && dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// }
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// data da situação da ação de cobrança seja anterior a data
	// da situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Integer("1");
	// } else {
	// indicadorAntesApos = new Integer("2");
	// }
	// }
	//
	// indicador acima do limite
	// Integer indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Integer("1");
	// } else {
	// indicadorAcimaLimite = new Integer("2");
	// }
	//
	// cria o ResumoCobrancaAcao
	// resumoCobrancaAcao = this.criarResumoCobrancaAcao(
	// anoMesReferenciaCobrancaGrupoCronogramaMes,
	// idCobrancaAcaoCronograma,
	// dataRealizacaoAtividadeEmitir, dataAtividadeEncerrar,
	// idCobrancaGrupo, imovel, categoria, idCobrancaAcao,
	// idSituacaoAcao, idSituacaoPredominanteDebito,
	// idFiscalizacao, indicadorCronogramaComando,
	// indicadorAntesApos, indicadorAcimaLimite,
	// valorDocumento, idCobrancaCriterio);
	//
	// adciona na coleção
	// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
	//
	// seta null para o GC liberar
	// resumoCobrancaAcao = null;
	// } else {
	// existe o resumo cobrança ação na coleção
	//
	// acumula a quantidade de documentos
	// resumoCobrancaAcao.setQuantidadeDocumentos(resumoCobrancaAcao
	// .getQuantidadeDocumentos() + 1);
	//
	// acumula o valor do documento
	// resumoCobrancaAcao.setValorDocumentos(resumoCobrancaAcao
	// .getValorDocumentos().add(valorDocumento));
	// }
	// } else {
	// se a coleção estiver vazia, adiciona o item
	//
	// indicador antes apos
	// Integer indicadorAntesApos = null;
	// if (dataSituacaoAcao == null || dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// } else {
	// data da situação da ação de cobrança seja anterior a data da
	// situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Integer("1");
	// } else {
	// indicadorAntesApos = new Integer("2");
	// }
	// }
	//
	// indicador acima do limite
	// Short indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Short("1");
	// } else {
	// indicadorAcimaLimite = new Short("2");
	// }
	//
	// cria o ResumoCobrancaAcao
	// ResumoCobrancaAcao resumoCobrancaAcao = this
	// .criarResumoCobrancaAcao(
	// anoMesReferenciaCobrancaGrupoCronogramaMes,
	// idCobrancaAcaoCronograma,
	// dataRealizacaoAtividadeEmitir,
	// dataAtividadeEncerrar, idCobrancaGrupo, imovel,
	// categoria, idCobrancaAcao, idSituacaoAcao,
	// idSituacaoPredominanteDebito, idFiscalizacao,
	// indicadorCronogramaComando, indicadorAntesApos,
	// new Integer(indicadorAcimaLimite.shortValue()),
	// valorDocumento, idCobrancaCriterio);
	//
	// adciona na coleção
	// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
	// }
	// return colecaoResumoCobrancaAcao;
	// }
	/**
	 * Retorna o valor do ControladorOrdemServico
	 * 
	 * @author Leonardo Regis
	 * @date 23/09/2006
	 * @return O valor de ControladorOrdemServico
	 */
	protected ControladorOrdemServicoLocal getControladorOrdemServico(){

		ControladorOrdemServicoLocalHome localHome = null;
		ControladorOrdemServicoLocal local = null;
		// pega a instância do ServiceLocator.
		ServiceLocator locator = null;
		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorOrdemServicoLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_ORDEM_SERVICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();
			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor do ControladorBatch
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 * @return O valor de ControladorBatch
	 */
	protected ControladorBatchLocal getControladorBatch(){

		ControladorBatchLocalHome localHome = null;
		ControladorBatchLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorBatchLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_BATCH_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Cria um Objto ResumoCobrancaAcao com os valores informados
	 * 
	 * @author Rafael Santos
	 * @date 24/10/2006
	 */
	public ResumoCobrancaAcao criarResumoCobrancaAcao(int anoMesReferenciaCobrancaGrupoCronogramaMes, int idCobrancaAcaoCronograma,
					Date dataRealizacaoAtividadeEmitir, Date dataAtividadeEncerrar, int idCobrancaGrupo, Categoria categoria,
					int idCobrancaAcao, Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito, Integer idFiscalizacao,
					int indicadorCronogramaComando, Short indicadorAntesApos, Short indicadorAcimaLimite, BigDecimal valorDocumento,
					Integer idCobrancaCriterio, Integer idGerenciaRegional, Integer idLocalidade, Integer idSetorComercial, Integer idRota,
					int codigoSetorComercial, Integer idQuadra, int numeroQuadra, Integer idPerfilImovel, Integer idSituacaoLigacaoAgua,
					Integer idSituacaoLigacaoEsgoto, Integer idEsferaPoder, Integer quantidadeDocumentos, Empresa empresa,
					int indicadorDefinitivo, Integer idUnidadeNegocio){

		ResumoCobrancaAcao resumoCobrancaAcao = new ResumoCobrancaAcao();

		// ano/mes de referência do ciclor de cobrança
		resumoCobrancaAcao.setAnoMesReferencia(anoMesReferenciaCobrancaGrupoCronogramaMes);

		// id do cronograma da ação de cobranca
		CobrancaAcaoCronograma cobrancaAcaoCronograma = new CobrancaAcaoCronograma();
		cobrancaAcaoCronograma.setId(Integer.valueOf(idCobrancaAcaoCronograma));
		resumoCobrancaAcao.setCobrancaAcaoCronograma(cobrancaAcaoCronograma);

		// data e hora da realização da atividade "emitir"
		resumoCobrancaAcao.setRealizacaoEmitir(dataRealizacaoAtividadeEmitir);

		// data e hora presvista da atividade "encerrar"
		resumoCobrancaAcao.setRealizacaoEncerrar(dataAtividadeEncerrar);

		// id do grupo de cobrança
		CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
		cobrancaGrupo.setId(idCobrancaGrupo);
		resumoCobrancaAcao.setCobrancaGrupo(cobrancaGrupo);

		if(idGerenciaRegional != null){
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(idGerenciaRegional);
			// gerência regional
			resumoCobrancaAcao.setGerenciaRegional(gerenciaRegional);
		}
		if(idLocalidade != null){
			Localidade localidade = new Localidade();
			localidade.setId(idLocalidade);
			// localidade
			resumoCobrancaAcao.setLocalidade(localidade);
		}

		if(idUnidadeNegocio != null){
			UnidadeNegocio unidadeNeogico = new UnidadeNegocio();
			unidadeNeogico.setId(idUnidadeNegocio);
			resumoCobrancaAcao.setUnidadeNegocio(unidadeNeogico);
		}

		if(idSetorComercial != null){
			SetorComercial setorComercial = new SetorComercial();
			setorComercial.setId(idSetorComercial);
			// Setor Comercial
			resumoCobrancaAcao.setSetorComercial(setorComercial);
		}
		if(idRota != null){
			Rota rota = new Rota();
			rota.setId(idRota);
			// Rota
			resumoCobrancaAcao.setRota(rota);
		}
		if(idQuadra != null){
			Quadra quadra = new Quadra();
			quadra.setId(idQuadra);
			// Quadra
			resumoCobrancaAcao.setQuadra(quadra);
		}

		// Código do Setor Comercial
		resumoCobrancaAcao.setCodigoSetorComercial(codigoSetorComercial);

		// Numero da Quadra
		resumoCobrancaAcao.setNumeroQuadra(numeroQuadra);

		if(idPerfilImovel != null){
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(idPerfilImovel);
			// Perfil do Imovel
			resumoCobrancaAcao.setImovelPerfil(imovelPerfil);
		}

		if(idSituacaoLigacaoAgua != null){
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(idSituacaoLigacaoAgua);
			// Situação da Ligação de Água
			resumoCobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		if(idSituacaoLigacaoEsgoto != null){
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(idSituacaoLigacaoEsgoto);
			// Situação da Ligação de Esgoto
			resumoCobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// categoria
		resumoCobrancaAcao.setCategoria(categoria);

		// Esfera do Poder
		if(idEsferaPoder != null){
			EsferaPoder esferaPoder = new EsferaPoder();
			esferaPoder.setId(idEsferaPoder);
			resumoCobrancaAcao.setEsferaPoder(esferaPoder);
		}

		// id da ação de cobrança
		CobrancaAcao cobrancaAcao = new CobrancaAcao();
		cobrancaAcao.setId(Integer.valueOf(idCobrancaAcao));
		resumoCobrancaAcao.setCobrancaAcao(cobrancaAcao);

		// id da situação da ação de cobrança
		CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		cobrancaAcaoSituacao.setId(idSituacaoAcao);
		resumoCobrancaAcao.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);

		// id da situação predominante de débito
		if(idSituacaoPredominanteDebito != null){
			CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(idSituacaoPredominanteDebito);
			resumoCobrancaAcao.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
		}else{
			resumoCobrancaAcao.setCobrancaDebitoSituacao(null);
		}

		// id da situação da fiscalização
		if(idFiscalizacao != null){
			FiscalizacaoSituacao fiscalizacaoSituacao = new FiscalizacaoSituacao();
			fiscalizacaoSituacao.setId(idFiscalizacao);
			resumoCobrancaAcao.setFiscalizacaoSituacao(fiscalizacaoSituacao);
		}

		// indicador cronograma comando
		resumoCobrancaAcao.setIndicadorCronogramaComando((short) indicadorCronogramaComando);

		// indicador antes apos
		if(indicadorAntesApos != null){
			resumoCobrancaAcao.setIndicadorAntesApos(Short.valueOf(indicadorAntesApos.shortValue()));
		}else{
			resumoCobrancaAcao.setIndicadorAntesApos(null);
		}

		// indicador acima do limite
		if(indicadorAcimaLimite != null){
			resumoCobrancaAcao.setIndicadorLimite(Short.valueOf(indicadorAcimaLimite.shortValue()));
		}else{
			resumoCobrancaAcao.setIndicadorLimite(null);
		}

		// quantidade de documentos de cobrança
		resumoCobrancaAcao.setQuantidadeDocumentos(quantidadeDocumentos);

		// valor dos documentos de cobrança
		resumoCobrancaAcao.setValorDocumentos(valorDocumento);

		// data ultima alteração
		resumoCobrancaAcao.setUltimaAlteracao(new Date());

		CobrancaCriterio cobrancaCriterio = null;
		if(idCobrancaCriterio != null){
			cobrancaCriterio = new CobrancaCriterio();
			cobrancaCriterio.setId(idCobrancaCriterio);
		}

		resumoCobrancaAcao.setCobrancaCriterio(cobrancaCriterio);

		resumoCobrancaAcao.setEmpresa(empresa);
		resumoCobrancaAcao.setIndicadorDefinitivo(indicadorDefinitivo);

		return resumoCobrancaAcao;

	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0006] Processar Ação com Ordens de Serviço
	 * 
	 * @author Rafael Santos, Pedro Alexandre
	 * @date 25/10/2006, 19/01/2007
	 * @param idServicoTipo
	 * @param dataPrevistaAtividadeEncerrar
	 * @param dataPrevistaAtividadeEmitir
	 * @param dataComandoAtividadeEncerrar
	 * @param dataRealizacaoAtividadeEmitir
	 * @param usuarioLogado
	 * @param anoMesReferenciaCobrancaGrupoCronogramaMes
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @throws ControladorException
	 */
	public void processarAcaoOrdemServico(int idServicoTipo, Date dataPrevistaAtividadeEncerrar, Date dataPrevistaAtividadeEmitir,
					Date dataComandoAtividadeEncerrar, Date dataRealizacaoAtividadeEmitir, Usuario usuarioLogado,
					int anoMesReferenciaCobrancaGrupoCronogramaMes, int idCobrancaAcaoCronograma, int idCobrancaGrupo, int idCobrancaAcao,
					Date dataRealizacaoAtividadeEncerrar) throws ControladorException{

		// seleciona as ordens de serviço para ação de cobrança com a data de
		// entre as datas previstas das atividades
		// emitir e encerrar da ação de cobrança

		// colecao de ordem de serviço
		Collection colecaoOrdemServicos = null;

		int indice = 0;
		boolean flagTerminou = false;

		try{

			while(!flagTerminou){
				// ORDERM_SERVICO com SVTP_ID da tabela COBRANCA_ACAO e
				// ORSE_TMGERACAO entre CAAC_DTPREVISTA do Emitir e do Encerrar
				colecaoOrdemServicos = repositorioCobranca.pesquisarOrdemServicos(idServicoTipo, dataPrevistaAtividadeEncerrar,
								dataPrevistaAtividadeEmitir, indice);

				if(colecaoOrdemServicos != null && !colecaoOrdemServicos.isEmpty()){

					if(colecaoOrdemServicos.size() > 500){
						flagTerminou = true;
					}else{
						indice = indice + 500;
					}

					Iterator iteratorColecaoOrdemServicos = colecaoOrdemServicos.iterator();

					// coleção de RESUMO_COBRANCA_ACAO
					Collection colecaoResumoCobrancaAcao = new ArrayList();

					Object[] dadosOrdemServico = null;

					while(iteratorColecaoOrdemServicos.hasNext()){
						// id da fiscalização da ordem de serviço
						Integer idFiscalizacao = null;
						short codigoSituacao = -1;
						Integer idOrdemServico = null;
						Integer idAtendimentoMotivoEncerramento = null;
						Integer idImovel = null;
						Integer idLocalidade = null;

						dadosOrdemServico = (Object[]) colecaoOrdemServicos.iterator().next();

						// ir da ordem de serviço
						if(dadosOrdemServico[0] != null){
							idOrdemServico = (Integer) dadosOrdemServico[0];
						}

						// codigo da situacao
						if(dadosOrdemServico[1] != null){
							codigoSituacao = ((Short) dadosOrdemServico[1]).shortValue();
						}

						// id fiscalização da ordem de serviço
						if(dadosOrdemServico[2] != null){
							idFiscalizacao = (Integer) dadosOrdemServico[2];
						}

						Integer idSituacaoAcao = null;

						// id atendimento motivo encerramento
						if(dadosOrdemServico[5] != null){
							idAtendimentoMotivoEncerramento = (Integer) dadosOrdemServico[5];
						}

						// id imovel
						if(dadosOrdemServico[6] != null){
							idImovel = (Integer) dadosOrdemServico[6];
						}
						// id localidade
						if(dadosOrdemServico[7] != null){
							idLocalidade = (Integer) dadosOrdemServico[7];
						}

						// 2.1 Determina a situação da ação de cobrança de
						// acordo
						// com
						// a situação da ordem de serviço
						// a ordem se serviço não esteja encerrada
						if(codigoSituacao != OrdemServico.SITUACAO_ENCERRADO.shortValue()){
							// caso a atividade da ação de cobrança
							// correspondente a
							// encerrar esteja comanda e a data presvista para o
							// encerramento seja igual ou menor do que
							// a data corrente
							if(dataComandoAtividadeEncerrar != null
											&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
															.compareTo(new Date()) <= 0))){

								// Atibuir o valor AÇÃO CANCELADA POR DECURSO DE
								// PRAZO
								idSituacaoAcao = CobrancaAcaoSituacao.CANCELADA_PRAZO;

								UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
												.pesquisarUnidadeOrganizacionalLocalidade(idLocalidade);
								usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);

								// encerrar a ordem de serviço, com o motivo
								// correspodente a decurso de prazo
								// [UC0457] - Encerrar Ordem de Serviço
								OSEncerramentoHelper osEncerramentoHelper = new OSEncerramentoHelper();
								osEncerramentoHelper.setNumeroOS(idOrdemServico);
								osEncerramentoHelper.setDataExecucao(new Date());
								osEncerramentoHelper.setUsuarioLogado(usuarioLogado);
								osEncerramentoHelper.setIdMotivoEncerramento(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO
												.toString());
								osEncerramentoHelper.setUltimaAlteracao(null);
								osEncerramentoHelper.setParecerEncerramento(null);
								osEncerramentoHelper.setOsFiscalizacao(null);
								osEncerramentoHelper.setIndicadorVistoriaServicoTipo(null);
								osEncerramentoHelper.setCodigoRetornoVistoriaOs(null);

								this.getControladorOrdemServico().encerrarOSSemExecucao(osEncerramentoHelper, null,
												OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);

							}else{
								// caso a situação da fiscalização da ordem de
								// serviço
								// esteja preenchida
								if(idFiscalizacao != null){
									// atribuir o valor AÇÃO FISCALIZADA
									idSituacaoAcao = CobrancaAcaoSituacao.FISCALIZADA;
								}else{
									// atribuir o valor AÇÃO PENDENTE
									idSituacaoAcao = CobrancaAcaoSituacao.PENDENTE;
								}
							}
						}else{

							Collection colecaoAtendimentoMotivoEncerramento = null;

							// AMEN_ID igual a idAtendimentoMotivoEncerramento
							// da
							// Ordem de Servico
							colecaoAtendimentoMotivoEncerramento = this.repositorioCobranca
											.pesquisarAtendimentoMotivoEncerramento(idAtendimentoMotivoEncerramento);

							// pega os dados do atendimento motivo encerramento
							// pesquisado
							if(colecaoAtendimentoMotivoEncerramento != null && !colecaoAtendimentoMotivoEncerramento.isEmpty()){

								Object[] dadosAtendimentoMotivoEncerramento = (Object[]) colecaoAtendimentoMotivoEncerramento.iterator()
												.next();

								Integer indicadorExecucao = null;

								// indicador de Execução
								if(dadosAtendimentoMotivoEncerramento[0] != null){
									indicadorExecucao = (Integer) dadosAtendimentoMotivoEncerramento[0];
								}

								// caso o motivo de encerramento corresponda à
								// execução
								if(indicadorExecucao.intValue() == 1){
									// atribuir o valor AÇÃO EXECUTADA
									idSituacaoAcao = CobrancaAcaoSituacao.EXECUTADA;

								}else{
									// atribuir o valor AÇÃO CANCELADA
									idSituacaoAcao = CobrancaAcaoSituacao.CANCELADA;
								}

								// seta null para o GC liberar
								dadosAtendimentoMotivoEncerramento = null;
							}// fim da colecao atendimento motivo
								// encerramento

							// seta null para o GC liberar
							colecaoAtendimentoMotivoEncerramento = null;
						}

						// pesquisa os imovel para ser usado para gravar o
						// Resumo
						// Cobrança Ação
						Imovel imovel = this.pesquisarDadosImovel(idImovel);

						// [UC0306] - Obter Principal Categoria do Imovel
						Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel(idImovel);

						// 2.2 acumula na tabela RESUMO_COBRANCA_ACAO os valores
						// da
						// rodem de serviço
						this.acumularResumoCobrancaAcaoOrdemServico(colecaoResumoCobrancaAcao, anoMesReferenciaCobrancaGrupoCronogramaMes,
										idCobrancaAcaoCronograma, dataRealizacaoAtividadeEmitir, dataPrevistaAtividadeEncerrar,
										idCobrancaGrupo, imovel, categoria, idCobrancaAcao, idSituacaoAcao, null, idFiscalizacao, 1,
										BigDecimal.ZERO, null, null, dataRealizacaoAtividadeEncerrar);

						// seta null para o GC liberar
						dadosOrdemServico = null;
					}// fim do while

					// armazenar os RESUMO_COBRANCA_ACAO
					if(!colecaoResumoCobrancaAcao.isEmpty()){
						getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoResumoCobrancaAcao);
					}
					colecaoResumoCobrancaAcao = null;
				}else{
					flagTerminou = true;
				}

				// seta null para GC liberar
				colecaoOrdemServicos = null;

			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * [SB0006] - Processar Ação com Ordens de Serviço
	 * Acumular ou insere na coelção de RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 */
	public void acumularResumoCobrancaAcaoOrdemServico(Collection<ResumoCobrancaAcao> colecaoResumoCobrancaAcao,
					int anoMesReferenciaCobrancaGrupoCronogramaMes, int idCobrancaAcaoCronograma, Date dataRealizacaoAtividadeEmitir,
					Date dataPrevistaAtividadeEncerrar, int idCobrancaGrupo, Imovel imovel, Categoria categoria, int idCobrancaAcao,
					Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito, int idFiscalizacao, int indicadorCronogramaComando,
					BigDecimal valorDocumento, Integer indicadorAntesApos, Integer indicadorAcimaLimite,
					Date dataRealizacaoAtividadeEncerrar){

		// verifica se exista a data de realização da atividade de encerrar se
		// existir então recupera ela para ser comparada,senão recupera a data
		// prevista da atividade de encerrar
		Date dataAtividadeEncerrar = null;
		if(dataRealizacaoAtividadeEncerrar != null){
			dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
		}else{
			dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
		}

		if(colecaoResumoCobrancaAcao != null && !colecaoResumoCobrancaAcao.isEmpty()){
			// se a coleção não estiver vazia, procura por uma ocorrencia do
			// resumo cobrança ação para acumular, se não existir adiciona

			Iterator iteratorColecaoResumoCobrancaAcao = colecaoResumoCobrancaAcao.iterator();

			// guarda a informação para saber se existe ou não o resumo cobrança
			// ação
			boolean naoExisteResumoCobrancaAcao = true;
			// variavel para parar o loop da coleção
			boolean achou = true;
			// posição para aculumar o resumo cobrança ação
			// int indicePosicaoParaAcumular = -1;
			// indice corrente do item na coleção
			// int indice = 0;
			// objeto que ira receber o resumo para ser substituido
			// ResumoCobrancaAcao resumoCobrancaAcaoParaSubstituir = null;
			ResumoCobrancaAcao resumoCobrancaAcao = null;

			while(iteratorColecaoResumoCobrancaAcao.hasNext() && achou){
				resumoCobrancaAcao = (ResumoCobrancaAcao) iteratorColecaoResumoCobrancaAcao.next();

				// verifica se existe na coleção
				if(resumoCobrancaAcao.getAnoMesReferencia() == anoMesReferenciaCobrancaGrupoCronogramaMes
								&& resumoCobrancaAcao.getCobrancaAcaoCronograma().getId().intValue() == idCobrancaAcaoCronograma
								&& resumoCobrancaAcao.getRealizacaoEmitir().compareTo(dataRealizacaoAtividadeEmitir) == 0
								&& resumoCobrancaAcao.getRealizacaoEncerrar().compareTo(dataAtividadeEncerrar) == 0
								&& resumoCobrancaAcao.getCobrancaGrupo().getId().intValue() == idCobrancaGrupo
								&& resumoCobrancaAcao.getGerenciaRegional().getId().intValue() == imovel.getLocalidade()
												.getGerenciaRegional().getId().intValue()
								&& resumoCobrancaAcao.getLocalidade().getId().intValue() == imovel.getLocalidade().getId().intValue()
								&& resumoCobrancaAcao.getSetorComercial().getId().intValue() == imovel.getSetorComercial().getId()
												.intValue()
								&& resumoCobrancaAcao.getRota().getId().intValue() == imovel.getRota().getId().intValue()
								&& resumoCobrancaAcao.getCodigoSetorComercial() == imovel.getSetorComercial().getCodigo()
								&& resumoCobrancaAcao.getNumeroQuadra() == imovel.getQuadra().getNumeroQuadra()
								&& resumoCobrancaAcao.getImovelPerfil().getId().intValue() == imovel.getImovelPerfil().getId().intValue()
								&& resumoCobrancaAcao.getLigacaoAguaSituacao().getId().intValue() == imovel.getLigacaoAguaSituacao()
												.getId().intValue()
								&& resumoCobrancaAcao.getLigacaoEsgotoSituacao().getId().intValue() == imovel.getLigacaoEsgotoSituacao()
												.getId().intValue()
								&& resumoCobrancaAcao.getCategoria().getId().intValue() == categoria.getId().intValue()
								&& resumoCobrancaAcao.getCobrancaAcao().getId().intValue() == idCobrancaAcao
								&& resumoCobrancaAcao.getCobrancaAcaoSituacao().getId().intValue() == idSituacaoAcao
								&& resumoCobrancaAcao.getFiscalizacaoSituacao().getId().intValue() == idFiscalizacao){
					// pega a esfera do poder do imovel
					EsferaPoder esferaPoder = null;
					if(imovel.getClienteImoveis() != null && !imovel.getClienteImoveis().isEmpty()){
						ClienteImovel clienteImovel = imovel.getClienteImoveis().iterator().next();

						if(clienteImovel.getCliente() != null && clienteImovel.getCliente().getClienteTipo() != null){
							esferaPoder = clienteImovel.getCliente().getClienteTipo().getEsferaPoder();
						}
					}
					boolean igualdadeEsferaPoder = false;

					// verifica se a esfera do poder na coleção esta diferente
					// de nula e se a que irei comparar também é nula
					if(resumoCobrancaAcao.getEsferaPoder() != null && esferaPoder != null){
						if(resumoCobrancaAcao.getEsferaPoder().getId().intValue() == esferaPoder.getId().intValue()){
							igualdadeEsferaPoder = true;
						}
					}else if(resumoCobrancaAcao.getEsferaPoder() == null && esferaPoder == null){
						// se as duas esferar do poder forem nulas, elas são
						// iguais como critéios diferença
						igualdadeEsferaPoder = true;
					}

					// verifica se é igual na esfera do poder
					if(igualdadeEsferaPoder){
						achou = false;// para a loop da coleção
						// indicePosicaoParaAcumular = indice;//guarda o indice
						// da coleção a qual esta o registro para ser
						// substituido
						naoExisteResumoCobrancaAcao = false;// guarda a
						// informação de que
						// existe o resumo
						// cobranca ação na
						// coleção
						// resumoCobrancaAcaoParaSubstituir =
						// resumoCobrancaAcao;
					}
				}
			}

			// se não existi o resumo cobrança ação na coleção adiciona
			if(naoExisteResumoCobrancaAcao){

				// cria o ResumoCobrancaAcao
				// resumoCobrancaAcao = this.criarResumoCobrancaAcao(
				// anoMesReferenciaCobrancaGrupoCronogramaMes,
				// idCobrancaAcaoCronograma,
				// dataRealizacaoAtividadeEmitir, dataAtividadeEncerrar,
				// idCobrancaGrupo, imovel, categoria, idCobrancaAcao,
				// idSituacaoAcao, idSituacaoPredominanteDebito,
				// idFiscalizacao, indicadorCronogramaComando,
				// indicadorAntesApos, indicadorAcimaLimite,
				// valorDocumento, null);

				// adciona na coleção
				colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
			}else{
				// existe o resumo cobrança ação na coleção

				// acumula a quantidade de documentos
				resumoCobrancaAcao.setQuantidadeDocumentos(resumoCobrancaAcao.getQuantidadeDocumentos() + 1);

			}
		}else{
			// se a coleção estiver vazia, adiciona o item
			// colecaoResumoCobrancaAcao = new ArrayList<ResumoCobrancaAcao>();

			// cria o ResumoCobrancaAcao
			// ResumoCobrancaAcao resumoCobrancaAcao = this
			// .criarResumoCobrancaAcao(
			// anoMesReferenciaCobrancaGrupoCronogramaMes,
			// idCobrancaAcaoCronograma,
			// dataRealizacaoAtividadeEmitir,
			// dataAtividadeEncerrar, idCobrancaGrupo, imovel,
			// categoria, idCobrancaAcao, idSituacaoAcao,
			// idSituacaoPredominanteDebito, idFiscalizacao,
			// indicadorCronogramaComando, indicadorAntesApos,
			// indicadorAcimaLimite, valorDocumento, null);

			// adciona na coleção
			// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
		}
		// return colecaoResumoCobrancaAcao;
	}

	/**
	 * retorna o objeto ResolucaoDiretoria com a maior data Vigência inicial
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(Collection<Integer> idsGrupoUsuario)
					throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(idsGrupoUsuario);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * retorna o objeto ResolucaoDiretoria com a maior data Vigência inicial
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 24/03/2011
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioComEntrada() throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioComEntrada();

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * retorna o valor da entrada do Parcelamento
	 * [UC0214] - Efetuar Parcelamento de Débitos [SB0002] - Obter opções de
	 * Parcelamento (5.4.1.4)
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal obterValorEntradaParcelamento(BigDecimal valorEntradaInformado, BigDecimal valorEntradaMinima,
					BigDecimal valorEntradaReparcelamento, Usuario usuario, BigDecimal valorEntradaSugerida) throws ControladorException{

		BigDecimal valorEntrada = BigDecimal.ZERO;

		boolean temPermissaoValMinimoEntrada = getControladorPermissaoEspecial().verificarPermissaoEspecial(
						PermissaoEspecial.TESTAR_VAL_MINIMO_ENTRADA, usuario);

		if(valorEntradaInformado == null && valorEntradaSugerida != null){

			valorEntrada = valorEntradaSugerida;

		}else if(temPermissaoValMinimoEntrada && valorEntradaInformado != null){

			valorEntrada = valorEntradaInformado;

		}else{
			// valor entrada = maior valor entre valorEntradaInformado,
			// valorEntradaMinima e valorEntradaReparcelamento
			if(valorEntradaInformado != null && valorEntradaInformado.compareTo(valorEntradaMinima) == 1){
				valorEntrada = valorEntradaInformado;
			}else{
				valorEntrada = valorEntradaMinima;
			}

			if(valorEntradaReparcelamento.compareTo(valorEntrada) == 1){
				valorEntrada = valorEntradaReparcelamento;
			}
		}

		return valorEntrada;
	}

	/**
	 * Pesquisa o imóvel para parcelamento com controle de abrangência.
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 27/11/2006
	 * @param filtroImovel
	 * @param usuarioLogado
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Imovel> pesquisarImovelEfetuarParcelamento(FiltroImovel filtroImovel, Usuario usuarioLogado)
					throws ControladorException{

		Collection<Imovel> retorno = null;
		Imovel imovel = null;

		retorno = this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

		if(retorno != null && !retorno.isEmpty()){
			imovel = (Imovel) Util.retonarObjetoDeColecao(retorno);

			// ------------ CONTROLE DE ABRANGENCIA ----------------
			Abrangencia abrangencia = new Abrangencia(usuarioLogado, imovel);

			if(!getControladorAcesso().verificarAcessoAbrangencia(abrangencia)){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.acesso.negado.abrangencia");
			}

			// ------------ FIM CONTROLE DE ABRANGENCIA ------------
		}else{
			return retorno;
		}
		return retorno;
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Boolean verificarQtdeReparcelamentoPerfil(Integer idPerfilParc, Short numeroReparcelamentoConsecutivos)
					throws ControladorException{

		Boolean retorno = false;

		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = null;
		try{
			parcelamentoQuantidadeReparcelamento = repositorioCobranca.obterQtdeReparcelamentoPerfil(idPerfilParc,
							numeroReparcelamentoConsecutivos);
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(parcelamentoQuantidadeReparcelamento != null){
			retorno = true;
		}

		return retorno;
	}

	public CobrancaAcaoAtividadeCronograma pesquisarCobrancaAcaoAtividadeCronogramaId(Integer idCobrancaAcaoAtividadeCronograma)
					throws ControladorException{

		CobrancaAcaoAtividadeCronograma retorno = null;

		try{
			// chama o metódo de pesquisar do repositório
			retorno = repositorioCobranca.pesquisarCobrancaAcaoAtividadeCronogramaId(idCobrancaAcaoAtividadeCronograma);

			// erro no hibernate
		}catch(ErroRepositorioException ex){

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;

	}

	/**
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Item 1 O sistema seleciona os cronogramas de cobrança dos grupos de
	 * cobrança e meses de referência.
	 * 
	 * @author Pedro Alexandre
	 * @date 19/01/2007
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarCobrancaGrupoCronogramaMes() throws ControladorException{

		Collection colecaoCobrancaGrupoCronogramaMes = null;
		try{
			colecaoCobrancaGrupoCronogramaMes = this.repositorioCobranca.pesquisarCobrancaGrupoCronogramaMes();
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoCobrancaGrupoCronogramaMes;
	}

	/**
	 * Divide a coleção em duas partes e cria um map onde vai ter as 2 partes.É
	 * criado outro map que guarda a ordem de como será chamada a o map das 2
	 * partes. Ex.:Map<1,Map<objeto1,objeto2>>, onde 1 é a ordem que será
	 * chamado o segundo map<objeto1,objeto2> e o objeto1 é primeiro objeto da
	 * coleção da primeira parte e o objeto2 é o primeiro objeto da segunda
	 * parte da coleção
	 * 
	 * @author Sávio Luiz
	 * @date 22/01/2007
	 * @return
	 * @throws ControladorException
	 */
	protected Map<Integer, Map<Object, Object>> dividirColecao(Collection colecao){

		Map<Integer, Map<Object, Object>> mapOrdenada = new HashMap();
		List listColecao = new ArrayList();
		listColecao.addAll(colecao);
		int quantidadeContas = 0;
		int quantidadeContasColecao = listColecao.size();
		int metadeColecao = 0;
		// caso a coleção tenha um numero impar a metade será ela + 1
		// Ex.:coleção tamanho = 21; metade = 10+1 = 11.
		if(quantidadeContasColecao % 2 == 0){
			metadeColecao = quantidadeContasColecao / 2;
		}else{
			metadeColecao = (quantidadeContasColecao / 2) + 1;
		}
		while(quantidadeContas < metadeColecao){
			Map<Object, Object> map = new HashMap();
			Object object1 = listColecao.get(quantidadeContas);
			Object object2 = null;
			if(metadeColecao + quantidadeContas < quantidadeContasColecao){
				object2 = listColecao.get(metadeColecao + quantidadeContas);
			}
			map.put(object1, object2);
			mapOrdenada.put(quantidadeContas, map);
			map = null;

			quantidadeContas++;
		}
		quantidadeContasColecao = 0;

		return mapOrdenada;
	}

	/**
	 * Atualiza o sequencial de acordo com a metade da coleção e da situação.
	 * Ex.: se situação for igual a 1 e a metade da coleção for 500 e o
	 * sequencial for 503 então: sequencial será igual a 3.
	 * 
	 * @author Sávio Luiz
	 * @date 22/01/2007
	 * @return
	 * @throws ControladorException
	 */
	public int atualizaSequencial(int sequencial, int situacao, int metadeColecao){

		// recupera o sequencial
		int moduloSequencial = sequencial;
		// verifica se o sequencial é maior que 1000
		if(sequencial > 1000){
			moduloSequencial = sequencial % 1000;
			// e se o modulo não é igual a 0 ou seja no caso de ser 1000 ou 2000
			if(moduloSequencial == 0){
				moduloSequencial = sequencial;
			}
		}
		// caso a situação seja igual a 1(primeira parte da coleção) e o modulo
		// do sequencial seja maior que a metade da coleção então atualiza o
		// sequencial menos a metade da coleção
		if(situacao == 1 && moduloSequencial > metadeColecao){
			sequencial = sequencial - metadeColecao;
		}else{
			// caso a situação seja igual a 2(segunda parte da coleção) e o
			// modulo
			// do sequencial seja menor ou igual que a metade da coleção então
			// atualiza o
			// sequencial mais a metade da coleção
			if(situacao == 2 && moduloSequencial <= metadeColecao){
				sequencial = sequencial + metadeColecao;
			}
		}
		return sequencial;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void verificarUnicaFatura(Collection colecaoContas, ParcelamentoPerfil parcelamentoPerfil) throws ControladorException{

		Short indicadorSancoesUnicaConta = parcelamentoPerfil.getIndicadorSancoesUnicaConta();

		// 1.
		if(colecaoContas != null && !colecaoContas.isEmpty() && colecaoContas.size() == 1){
			// Caso o imóvel so tenha uma conta a parcelar
			Iterator iteratorConta = colecaoContas.iterator();
			ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorConta.next();
			Conta conta = contaValoresHelper.getConta();
			Integer consumoMinimo = parcelamentoPerfil.getNumeroConsumoMinimo();

			if(consumoMinimo != null || (indicadorSancoesUnicaConta != null && !indicadorSancoesUnicaConta.equals(ConstantesSistema.NAO))){
				// caso o perfil indique que existem restrições para
				// parcelamento de uma única conta
				// PCPF_NNCONSUMOMINIMO da tabela PARCELAMENTO_PERFIL com valor
				// diferente de nulo
				// ou PCPF_ICSANCOESPARCUNICA com valor diferente de NÃO
				// verificar se é possível parcelar

				Integer consumoAgua = conta.getConsumoAgua();

				Collection colecaoConsumoMedioImovel = null;
				try{
					colecaoConsumoMedioImovel = this.repositorioCobranca.obterConsumoMedioImovel(conta.getImovel().getId());
				}catch(ErroRepositorioException e){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}
				Integer consumoMedioImovel = null;
				if(colecaoConsumoMedioImovel != null && !colecaoConsumoMedioImovel.isEmpty()){
					consumoMedioImovel = (Integer) colecaoConsumoMedioImovel.iterator().next();
				}

				if(consumoMedioImovel == null || (consumoMedioImovel != null && consumoMedioImovel.equals(Integer.valueOf(0)))){
					Collection colecaoNumeroConsumoFaturadoMes = null;
					try{
						colecaoNumeroConsumoFaturadoMes = this.repositorioCobranca.obterNumeroConsumoFaturadoMes(conta.getImovel().getId());
					}catch(ErroRepositorioException e){
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}

					if(colecaoNumeroConsumoFaturadoMes != null && !colecaoNumeroConsumoFaturadoMes.isEmpty()){
						consumoMedioImovel = (Integer) colecaoNumeroConsumoFaturadoMes.iterator().next();
					}
				}

				Collection colecaoIdDebitoTipo = null;
				try{
					colecaoIdDebitoTipo = this.repositorioCobranca.obterIdDebitoTipoDeFiscalizacaoSituacaoServicoACobrar(conta.getId());
				}catch(ErroRepositorioException e){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}

				if(consumoMinimo != null && consumoAgua != null && consumoAgua.compareTo(consumoMinimo) < 0){
					// 1.1
					// caso consumo de água da única conta seja menor
					// que o valor determinado no perfil de parcelamento

					if(!indicadorSancoesUnicaConta.equals(ConstantesSistema.NAO)){
						// 1.2
						// caso perfil exija q existam sanções regulamentares
						// cobradas na conta
						// PCPF_ICSANCOESPARCUNICA com valor diferente de NÃO

						Conta contaDebitoCobrado = null;
						try{
							contaDebitoCobrado = this.repositorioCobranca.verificarContaDebitoCobrado(conta.getId());
						}catch(ErroRepositorioException e){
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}

						if(contaDebitoCobrado == null){
							// e conta n tenha débito cobrado(CNTA_ID não ocorre
							// na
							// tabela DEBITO_COBRADO)
							// ou não existam sanções regulamentares cobradas
							// (DBTP_ID da tabela DEBITO_COBRADO com CNTA_ID =
							// CNTA_ID
							// da conta a ser parcelada não ocorrendo na tabela
							// FISCALIZACAO_SITUACAO_SERVICO_A_COBRAR)

							if(consumoMedioImovel != null && consumoAgua != null && consumoAgua.compareTo(consumoMedioImovel) <= 0){
								// 1.3
								// consumo de água seja menor ou igual ao
								// consumo médio do
								// imóvel
								throw new ControladorException("atencao.conta.unica.nao.permite.parcelamento");

							}

						}

					}

				}

				Short qtdeEconomiasConta = getControladorFaturamento().obterQuantidadeEconomiasConta(conta.getId(), false);
				Integer consumoAguaPorEconomia = null;

				if(consumoAgua != null && qtdeEconomiasConta != null){

					consumoAguaPorEconomia = Util.dividirArredondarResultado(consumoAgua, qtdeEconomiasConta);

				}

				BigDecimal percentualVariacaoConsumoMedio = parcelamentoPerfil.getPercentualVariacaoConsumoMedio();
				Integer variacaoEmRelacaoConsumoMedio = null;
				BigDecimal variacaoEmRelacaoConsumoMedioBigDecimal = null;

				if(consumoMedioImovel != null && consumoMedioImovel != 0 && consumoAgua != null){
					variacaoEmRelacaoConsumoMedio = 100 * (consumoAgua - consumoMedioImovel);
					variacaoEmRelacaoConsumoMedioBigDecimal = Util.dividirArredondando(new BigDecimal(variacaoEmRelacaoConsumoMedio),
									new BigDecimal(consumoMedioImovel));
				}

				if(consumoMinimo != null
								&& consumoAguaPorEconomia != null
								&& consumoAguaPorEconomia.compareTo(consumoMinimo) < 0
								|| (variacaoEmRelacaoConsumoMedioBigDecimal != null && percentualVariacaoConsumoMedio != null && variacaoEmRelacaoConsumoMedioBigDecimal
												.compareTo(percentualVariacaoConsumoMedio) < 0)){
					// 1.4
					// consumo de água por economia seja menor que o valor
					// determinado no perfil
					// ou a variação em relação ao consumo médio for inferior ao
					// percentual definido no perfil

					if((colecaoIdDebitoTipo != null && !colecaoIdDebitoTipo.isEmpty())){
						// 1.5 E
						// caso existadébito cobrado na conta referente a
						// sanções
						// regulamentares
						// e o debito não tenha sido cobrado em uma única
						// parcela

						Collection colecaoNumeroPrestacoesDebitoCobrado = null;
						try{
							colecaoNumeroPrestacoesDebitoCobrado = this.repositorioCobranca.obterNumeroPrestacaoDebitoCobrado(conta
											.getImovel().getId());
						}catch(ErroRepositorioException e){
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}

						if(colecaoNumeroPrestacoesDebitoCobrado != null && !colecaoNumeroPrestacoesDebitoCobrado.isEmpty()){
							Iterator iterator = colecaoNumeroPrestacoesDebitoCobrado.iterator();

							while(iterator.hasNext()){
								Short numeroPrestacoesDebitoCobrado = (Short) iterator.next();
								if(numeroPrestacoesDebitoCobrado.compareTo(Short.valueOf((short) 1)) == 0){
									throw new ControladorException("atencao.conta.unica.nao.permite.parcelamento");
								}

							}

						}

					}

				}

			}
		}

	}

	/**
	 * Metodo criado para criar os debitos para os parcelamentos q tenham juros
	 * e nao tenha criado o debito dos juros DBTP_ID = 44
	 * 
	 * @author Flávio Cordeiro
	 * @date 23/02/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void gerarDebitoCobrarNaoCriados(){

		Collection colecaoParcelamentoImovel;
		try{
			colecaoParcelamentoImovel = repositorioCobranca.pesquisarParcelamentosSemDebitos();

			if(!colecaoParcelamentoImovel.isEmpty()){
				Object[] objeto = null;
				Parcelamento parcelamento = null;
				Imovel imovel = null;
				Localidade localidade = null;
				Quadra quadra = null;
				SetorComercial setorComercial = null;
				Collection colecaoObjetosCategorias = null;
				DebitoTipo debitoTipo = new DebitoTipo();

				FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
				filtroDebitoTipo.adicionarParametro(new ParametroSimples(FiltroDebitoTipo.ID, DebitoTipo.JUROS_SOBRE_PARCELAMENTO));

				Collection colecaoDebito = getControladorUtil().pesquisar(filtroDebitoTipo, DebitoTipo.class.getName());
				debitoTipo = (DebitoTipo) colecaoDebito.iterator().next();

				Iterator iterator = colecaoParcelamentoImovel.iterator();
				while(iterator.hasNext()){
					objeto = (Object[]) iterator.next();

					parcelamento = new Parcelamento();
					imovel = new Imovel();
					localidade = new Localidade();
					quadra = new Quadra();
					setorComercial = new SetorComercial();

					// idParcelamento
					if(objeto[0] != null){
						parcelamento.setId((Integer) objeto[0]);
					}
					// numeroPrestacao
					if(objeto[1] != null){
						parcelamento.setNumeroPrestacoes((Short) objeto[1]);
					}
					// taxaJuros
					if(objeto[2] != null){
						parcelamento.setTaxaJuros((BigDecimal) objeto[2]);
					}
					// idLocalidade
					if(objeto[3] != null){
						localidade.setId((Integer) objeto[3]);
					}
					imovel.setLocalidade(localidade);
					// idQuadra
					if(objeto[4] != null){
						quadra.setId((Integer) objeto[4]);
					}
					// numeroQuadra
					if(objeto[5] != null){
						quadra.setNumeroQuadra((Integer) objeto[5]);
					}
					imovel.setQuadra(quadra);
					// idSetor
					if(objeto[6] != null){
						setorComercial.setId((Integer) objeto[6]);
					}
					// codigoSetor
					if(objeto[7] != null){
						setorComercial.setCodigo((Integer) objeto[7]);
					}
					imovel.setSetorComercial(setorComercial);
					// lote
					if(objeto[8] != null){
						imovel.setLote((Short) objeto[8]);
					}
					// subLote
					if(objeto[9] != null){
						imovel.setSubLote((Short) objeto[9]);
					}
					// valorJurosParcelamento
					if(objeto[10] != null){
						parcelamento.setValorJurosParcelamento((BigDecimal) objeto[10]);
					}
					// valorJurosParcelamento
					if(objeto[11] != null){
						imovel.setId((Integer) objeto[11]);
					}

					colecaoObjetosCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel, parcelamento.getNumeroPrestacoes(),
									parcelamento.getValorJurosParcelamento(), parcelamento.getTaxaJuros(), parcelamento.getId(),
									colecaoObjetosCategorias, null, DebitoCreditoSituacao.NORMAL, false, null, null, null, null);

					repositorioImovel.pesquisarCategoriasImovel(imovel.getId());
				}
			}
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(NumberFormatException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public Collection<CobrancaDocumento> pesquisarTodosCobrancaDocumentoParaEmitir(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Date dataEmissao, Integer idCobrancaAcao) throws ControladorException{

		Collection<CobrancaDocumento> colecaoDocumentosCobranca = null;

		try{

			Collection<Object[]> documentosCobranca = repositorioCobranca.pesquisarTodosCobrancaDocumentoParaEmitir(
							idCobrancaAcaoCronograma, idCobrancaAcaoComando, dataEmissao, idCobrancaAcao);

			if(documentosCobranca != null){

				colecaoDocumentosCobranca = new ArrayList<CobrancaDocumento>(documentosCobranca.size());

				for(Object[] coluna : documentosCobranca){

					CobrancaDocumento cobrDoc = new CobrancaDocumento();
					cobrDoc.setDocumentoTipo(new DocumentoTipo());

					cobrDoc.setImovel(new Imovel());
					cobrDoc.getImovel().setLogradouroBairro(new LogradouroBairro());
					cobrDoc.getImovel().getLogradouroBairro().setBairro(new Bairro());

					cobrDoc.getImovel().setLogradouroCep(new LogradouroCep());
					cobrDoc.getImovel().getLogradouroCep().setLogradouro(new Logradouro());
					cobrDoc.getImovel().getLogradouroCep().setCep(new Cep());

					cobrDoc.getImovel().setQuadra(new Quadra());
					cobrDoc.getImovel().setRota(new Rota());

					cobrDoc.getImovel().setLocalidade(new Localidade());
					cobrDoc.getImovel().setSetorComercial(new SetorComercial());

					int i = 0;

					cobrDoc.setId((Integer) coluna[i++]); // 1
					cobrDoc.setNumeroSequenciaDocumento((Integer) coluna[i++]); // 2
					cobrDoc.getDocumentoTipo().setId((Integer) coluna[i++]); // 3

					cobrDoc.getImovel().setId((Integer) coluna[i++]); // 4
					cobrDoc.getImovel().setLote((Short) coluna[i++]); // 5
					cobrDoc.getImovel().setSubLote((Short) coluna[i++]); // 6
					cobrDoc.getImovel().setNumeroImovel((String) coluna[i++]); // 7
					cobrDoc.getImovel().setComplementoEndereco((String) coluna[i++]); // 8
					cobrDoc.getImovel().setNumeroSequencialRota((Integer) coluna[i++]); // 9

					cobrDoc.getImovel().getSetorComercial().setId((Integer) coluna[i++]); // 10
					cobrDoc.getImovel().getLocalidade().setId((Integer) coluna[i++]); // 11

					cobrDoc.getImovel().getLogradouroBairro().getBairro().setNome((String) coluna[i++]); // 12
					cobrDoc.getImovel().getLogradouroCep().getLogradouro().setId((Integer) coluna[i++]); // 13
					cobrDoc.getImovel().getLogradouroCep().getLogradouro().setNome((String) coluna[i++]); // 14

					cobrDoc.getImovel().getQuadra().setId((Integer) coluna[i++]); // 15
					cobrDoc.getImovel().getRota().setId((Integer) coluna[i++]); // 16
					cobrDoc.getImovel().getQuadra().setNumeroQuadra((Integer) coluna[i++]); // 17

					if(coluna[i++] != null){ // 18
						cobrDoc.getImovel().setEnderecoReferencia(new EnderecoReferencia());
						cobrDoc.getImovel().getEnderecoReferencia().setDescricao((String) coluna[i - 1]);
					}

					if(coluna[i++] != null){ // 19
						cobrDoc.getImovel().getLogradouroCep().getLogradouro().setLogradouroTipo(new LogradouroTipo());
						cobrDoc.getImovel().getLogradouroCep().getLogradouro().getLogradouroTipo().setDescricao((String) coluna[i - 1]);
					}

					if(coluna[i++] != null){ // 20
						cobrDoc.getImovel().getLogradouroCep().getLogradouro().setLogradouroTitulo(new LogradouroTitulo());
						cobrDoc.getImovel().getLogradouroCep().getLogradouro().getLogradouroTitulo().setDescricao((String) coluna[i - 1]);
					}

					if(coluna[i++] != null){ // 21
						cobrDoc.getImovel().setLigacaoAgua(new LigacaoAgua());
						cobrDoc.getImovel().getLigacaoAgua().setHidrometroInstalacaoHistorico(new HidrometroInstalacaoHistorico());
						cobrDoc.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().setNumeroHidrometro((String) coluna[i - 1]);
					}

					if(coluna[i++] != null){ // 22
						cobrDoc.getImovel().getSetorComercial().setCodigo((Integer) coluna[i - 1]); // 22
					}

					if(coluna[i++] != null){ // 23
						Integer idRota = (Integer) coluna[i - 1]; // 23

						Rota rota = new Rota();
						rota.setId(idRota);

						cobrDoc.getImovel().setRota(rota);
					}

					if(coluna[i++] != null){ // 24
						cobrDoc.getImovel().setNumeroSegmento((Short) coluna[i - 1]); // 24
					}

					if(coluna[i++] != null){ // 25
						Cep cep = new Cep();
						cep.setCodigo((Integer) coluna[i - 1]);// 25

						cobrDoc.getImovel().getLogradouroCep().setCep(cep);
					}

					colecaoDocumentosCobranca.add(cobrDoc);
				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoDocumentosCobranca;
	}

	/**
	 * Este caso de uso gera os avisos de corte
	 * Emitir Aviso de Corte
	 * 
	 * @return void
	 */
	public void emitirAvisoCorte(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario) throws ControladorException{

		List<Object> colecaoEmitirAvisoCobrancaHelper = new ArrayList<Object>();
		Collection colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		// long ini = 0, dif = 0;

		// ini = System.currentTimeMillis();

		colecaoCobrancaDocumento = pesquisarTodosCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
						idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca);

		// try {
		// } catch (ErroRepositorioException ex) {
		// ex.printStackTrace();
		// throw new ControladorException("erro.sistema", ex);
		// }

		// dif = System.currentTimeMillis() - ini;
		// LOGGER.info("0 - ############################## -> " + dif);
		// ini = System.currentTimeMillis();

		if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){

			LOGGER.info("QUANTIDADE DOC COBRANCA PRA EMITIR = " + colecaoCobrancaDocumento.size());

			int metadeColecao = 0;
			int sequencialImpressao = 0;

			if(colecaoCobrancaDocumento.size() % 2 == 0){
				metadeColecao = colecaoCobrancaDocumento.size() / 2;
			}else{
				metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
			}

			Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento.iterator();

			try{

				while(iteratorCobrancaDocumento.hasNext()){

					CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

					EmitirAvisoCobrancaHelper emitirAvisoCobrancaHelper = new EmitirAvisoCobrancaHelper();

					// gera o numero sequencial da impressao
					int situacao = 0;
					sequencialImpressao++;

					while(situacao < 2){
						if(situacao == 0){
							situacao = 1;
							cobrancaDocumento.setSequencialImpressao(this.atualizaSequencial(sequencialImpressao, situacao, metadeColecao));
						}else{
							situacao = 2;
							cobrancaDocumento.setSequencialImpressao(this.atualizaSequencial(sequencialImpressao, situacao, metadeColecao));
						}
					}

					Collection colecaoCobrancaDocumentoItemConta = null;
					Collection colecaoCobrancaDocumentoItemGuiaPagamento = null;
					Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoDebitoACobrar = null;

					BigDecimal debitosAnteriores = BigDecimal.ZERO;
					BigDecimal valorTotal = BigDecimal.ZERO;

					if(cobrancaDocumento != null){

						// ini = System.currentTimeMillis();

						// pesquisa todas as contas, debitos e guias
						colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
										.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						// dif = System.currentTimeMillis() - ini;
						// LOGGER.info("1 - ############################## -> " + dif);
						// ini = System.currentTimeMillis();

						if(colecaoCobrancaDocumentoItemConta == null){

							// ini = System.currentTimeMillis();

							colecaoCobrancaDocumentoItemGuiaPagamento = this.repositorioCobranca
											.selecionarDadosCobrancaDocumentoItemReferenteGuiaPagamento(cobrancaDocumento);

							// dif = System.currentTimeMillis() - ini;
							// LOGGER.info("2 - ############################## -> " + dif);
							// ini = System.currentTimeMillis();
						}
						if(colecaoCobrancaDocumentoItemConta == null && colecaoCobrancaDocumentoItemGuiaPagamento == null){

							// ini = System.currentTimeMillis();

							colecaoCobrancaDocumentoDebitoACobrar = this.repositorioCobranca
											.selecionarCobrancaDocumentoItemReferenteDebitoACobrar(cobrancaDocumento);

							// dif = System.currentTimeMillis() - ini;
							// LOGGER.info("3 - ############################## -> " + dif);
							// ini = System.currentTimeMillis();
						}
						// try {
						//
						// } catch (ErroRepositorioException ex) {
						// ex.printStackTrace();
						// throw new ControladorException("erro.sistema", ex);
						// }

						// ini = System.currentTimeMillis();

						Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());

						// dif = System.currentTimeMillis() - ini;
						// LOGGER.info("4 - ############################## -> " + dif);
						// ini = System.currentTimeMillis();

						if(cliente != null){
							emitirAvisoCobrancaHelper.setNomeCliente(cliente.getNome());
						}else{
							emitirAvisoCobrancaHelper.setNomeCliente("");
						}

						// carregando os dados no helper do relatorio de aviso
						// de
						// debito
						emitirAvisoCobrancaHelper.setMatricula(cobrancaDocumento.getImovel().getIdParametrizado());
						emitirAvisoCobrancaHelper.setEndereco(cobrancaDocumento.getImovel().getEnderecoFormatadoAbreviadoSemBairro());
						emitirAvisoCobrancaHelper.setBairro(cobrancaDocumento.getImovel().getLogradouroBairro().getBairro().getNome());
						if(cobrancaDocumento.getImovel().getLigacaoAgua() != null
										&& cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
							emitirAvisoCobrancaHelper.setHidrometro(cobrancaDocumento.getImovel().getLigacaoAgua()
											.getHidrometroInstalacaoHistorico().getNumeroHidrometro());
						}else{
							emitirAvisoCobrancaHelper.setHidrometro("");
						}

						emitirAvisoCobrancaHelper.setAcaoCobranca(acaoCobranca.getId().toString());

						String roteiro = cobrancaDocumento.getImovel().getSetorComercial().getId() + "-"
										+ cobrancaDocumento.getImovel().getRota().getId();

						if(cobrancaDocumento.getImovel().getNumeroSequencialRota() != null){
							roteiro = roteiro + "-" + cobrancaDocumento.getImovel().getNumeroSequencialRota();
						}

						emitirAvisoCobrancaHelper.setRoteiro(roteiro);

						emitirAvisoCobrancaHelper.setInscricao(cobrancaDocumento.getImovel().getInscricaoFormatada());

						Calendar dataAtual = Calendar.getInstance();
						Integer horas = dataAtual.get(Calendar.HOUR_OF_DAY);
						Integer minutos = dataAtual.get(Calendar.MINUTE);
						Integer segundos = dataAtual.get(Calendar.SECOND);
						emitirAvisoCobrancaHelper.setHoraImpressao("" + horas + ":" + minutos + ":" + segundos);
						emitirAvisoCobrancaHelper.setDataImpressao(Util.formatarData(dataAtual.getTime()));

						Util.adicionarNumeroDiasDeUmaData(dataAtual.getTime(), Integer.valueOf(acaoCobranca.getNumeroDiasValidade())
										.intValue());
						emitirAvisoCobrancaHelper.setDataComparecimento(Util.formatarData(dataAtual.getTime()));

						if(colecaoCobrancaDocumentoItemConta != null){
							// contas
							int limitador15Itens = 1;
							Collection<String> mesAno = new ArrayList<String>();
							Collection<String> vencimento = new ArrayList<String>();
							Collection<BigDecimal> valor = new ArrayList<BigDecimal>();

							Iterator<CobrancaDocumentoItem> itContas = colecaoCobrancaDocumentoItemConta.iterator();
							Integer mesAnoMaisAnterior = 300012;
							boolean teveConta = false;

							while(itContas.hasNext()){

								teveConta = true;
								CobrancaDocumentoItem cobrancaDocumentoItem = itContas.next();

								if(limitador15Itens <= 15){
									mesAno.add(Util.formatarAnoMesSemBarraParaMesAnoComBarra(cobrancaDocumentoItem.getContaGeral()
													.getConta().getReferencia()));
									vencimento.add(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
													.getDataVencimentoConta()));
									valor.add(cobrancaDocumentoItem.getContaGeral().getConta().getValorTotal());
								}else{
									debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getContaGeral().getConta()
													.getValorTotal());
								}
								if(Util.compararAnoMesReferencia(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(),
												mesAnoMaisAnterior, "<")){
									mesAnoMaisAnterior = cobrancaDocumentoItem.getContaGeral().getConta().getReferencia();
								}
								valorTotal = valorTotal.add(cobrancaDocumentoItem.getContaGeral().getConta().getValorTotal());
								limitador15Itens++;
							}
							colecaoCobrancaDocumentoItemConta.clear();
							colecaoCobrancaDocumentoItemConta = null;

							if(teveConta){
								emitirAvisoCobrancaHelper.setDataDebitoAnterior(Util
												.formatarAnoMesSemBarraParaMesAnoComBarra(mesAnoMaisAnterior));
							}
							emitirAvisoCobrancaHelper.setMesAno(mesAno);
							emitirAvisoCobrancaHelper.setVencimento(vencimento);
							emitirAvisoCobrancaHelper.setValor(valor);

						}else if(colecaoCobrancaDocumentoItemGuiaPagamento != null){
							// guias
							Iterator<CobrancaDocumentoItem> itGuias = colecaoCobrancaDocumentoItemGuiaPagamento.iterator();
							while(itGuias.hasNext()){
								CobrancaDocumentoItem cobrancaDocumentoItem = itGuias.next();
								valorTotal = valorTotal.add(cobrancaDocumentoItem.getValorItemCobrado());
								debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getValorItemCobrado());
							}
							colecaoCobrancaDocumentoItemGuiaPagamento.clear();
							colecaoCobrancaDocumentoItemGuiaPagamento = null;

						}else if(colecaoCobrancaDocumentoDebitoACobrar != null){
							// debitos a cobrar
							Iterator<CobrancaDocumentoItem> itDebACob = colecaoCobrancaDocumentoDebitoACobrar.iterator();
							while(itDebACob.hasNext()){
								CobrancaDocumentoItem cobrancaDocumentoItem = itDebACob.next();
								valorTotal = valorTotal.add(cobrancaDocumentoItem.getDebitoACobrarGeral().getDebitoACobrar()
												.getValorTotal());
								debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getDebitoACobrarGeral().getDebitoACobrar()
												.getValorTotal());
							}
							colecaoCobrancaDocumentoDebitoACobrar.clear();
							colecaoCobrancaDocumentoDebitoACobrar = null;
						}
					}

					emitirAvisoCobrancaHelper.setValorDebitosAnteriores(debitosAnteriores);
					emitirAvisoCobrancaHelper.setValorTotal(valorTotal);

					// ini = System.currentTimeMillis();

					// obtendo o codigo de barras
					String representacaoNumericaCodBarra = getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
									Integer.valueOf(PagamentoTipo.PAGAMENTO_TIPO_COBANCA_MATRICULA_IMOVEL), valorTotal,
									cobrancaDocumento.getImovel().getLocalidade().getId(), cobrancaDocumento.getImovel().getId(), null,
									null, null, null, cobrancaDocumento.getNumeroSequenciaDocumento() + "",
									cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, null, null, null);

					// dif = System.currentTimeMillis() - ini;
					// LOGGER.info("5 - ############################## -> " + dif);
					// ini = System.currentTimeMillis();

					String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + "-"
									+ representacaoNumericaCodBarra.substring(11, 12) + " "
									+ representacaoNumericaCodBarra.substring(12, 23) + "-"
									+ representacaoNumericaCodBarra.substring(23, 24) + " "
									+ representacaoNumericaCodBarra.substring(24, 35) + "-"
									+ representacaoNumericaCodBarra.substring(35, 36) + " "
									+ representacaoNumericaCodBarra.substring(36, 47) + "-"
									+ representacaoNumericaCodBarra.substring(47, 48);
					emitirAvisoCobrancaHelper.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);

					String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
									+ representacaoNumericaCodBarra.substring(12, 23) + representacaoNumericaCodBarra.substring(24, 35)
									+ representacaoNumericaCodBarra.substring(36, 47);

					emitirAvisoCobrancaHelper.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);

					colecaoEmitirAvisoCobrancaHelper.add(emitirAvisoCobrancaHelper);
				}

			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			// Monta os relatorios em blocos de 1000
			if(colecaoEmitirAvisoCobrancaHelper != null && (colecaoEmitirAvisoCobrancaHelper.size() > 0)){

				LOGGER.info("QUANTIDADE TOTAL = " + colecaoEmitirAvisoCobrancaHelper.size());

				Collection<Collection<Object>> colecaoParcialEmitirAvisoCobrancaHelper = this.dividirColecaoEmBlocos(
								colecaoEmitirAvisoCobrancaHelper, ConstantesSistema.QUANTIDADE_LIMITE_RELATORIOS_POR_ARQUIVO);

				int totalBlocosContasAEmitir = (Util.dividirArredondarResultado(colecaoEmitirAvisoCobrancaHelper.size(),
								ConstantesSistema.QUANTIDADE_BLOCO_IMPRESSOES_EMISSAO_CONTA_FATURAMENTO, BigDecimal.ROUND_CEILING));

				if(totalBlocosContasAEmitir == 0){
					totalBlocosContasAEmitir = 1;
				}
				colecaoEmitirAvisoCobrancaHelper.clear();
				colecaoEmitirAvisoCobrancaHelper = null;

				int contadorBlocoContasAEmitir = 1;

				LOGGER.info("QUANTIDADE BLOCOS = " + colecaoParcialEmitirAvisoCobrancaHelper.size());

				for(Collection bloco : colecaoParcialEmitirAvisoCobrancaHelper){

					Collection<EmitirAvisoCobrancaHelper> tmp = bloco;

					String mensagemArquivo = "PARTE: " + contadorBlocoContasAEmitir + "/" + totalBlocosContasAEmitir;
					RelatorioAvisoCorte relatorioAvisoCorte = new RelatorioAvisoCorte(usuario);
					relatorioAvisoCorte.addParametro("colecaoEmitirAvisoCobrancaHelper", tmp);
					relatorioAvisoCorte.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
					relatorioAvisoCorte.addParametro("descricaoArquivo", mensagemArquivo);

					this.getControladorBatch().iniciarProcessoRelatorio(relatorioAvisoCorte);
					contadorBlocoContasAEmitir++;
				}
				colecaoParcialEmitirAvisoCobrancaHelper.clear();
				colecaoParcialEmitirAvisoCobrancaHelper = null;
			}
		}
		if(colecaoCobrancaDocumento != null){
			colecaoCobrancaDocumento.clear();
			colecaoCobrancaDocumento = null;
		}
	}

	/**
	 * Este caso de uso gera os avisos de corte
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
	 * 
	 * @author Carlos Chrystian
	 * @date 20/12/2011
	 * @param parametroSistema
	 * @param colecaoCobrancaDocumento
	 * @param sistemaParametro
	 * @param idComandoCobranca
	 * @param usuario
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 * @throws IOException
	 * @throws CreateException
	 */
	public void emitirAvisoCorteArquivoTXT(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Usuario usuario) throws ControladorException{

		Collection<CobrancaDocumento> colecaoSetorComercialCobrancaDocumento = null;
		Collection<CobrancaDocumento> colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		StringBuilder cobrancaDocumentoAvisoCorteTxt = new StringBuilder();
		Integer numeracaoArquivo = 0;
		int quantidadePaginas = 0;
		int quantidadeDocumentos = 0;
		int sequencialImpressao = 0;
		int indiceDocumento = 0;
		int tamString = 0;
		int offset = 0;
		String nomeArquivo = "";
		String auxFormatacao = "";
		String mensagemContaEmRevisao = "";

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}

		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}

		try{
			// [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
			// 1. Consultar todos os setores comerciais da lista de documentos de cobrança ordenados
			// pelo código do setor comercial.
			colecaoSetorComercialCobrancaDocumento = this.pesquisarSetorComercialCobrancaDocumento(idCronogramaAtividadeAcaoCobranca,
							idComandoAtividadeAcaoCobranca);

			if(!Util.isVazioOrNulo(colecaoSetorComercialCobrancaDocumento)){
				// 2. Inicializar o campo numeração do arquivo com zero.
				numeracaoArquivo = 0;

				// 3. Para cada setor comercial:
				for(CobrancaDocumento cobrancaDocumentoSetorComercial : colecaoSetorComercialCobrancaDocumento){
					// Pesquisar o código da localidade
					SetorComercial setorComercial = null;
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();

					filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID, cobrancaDocumentoSetorComercial
									.getImovel().getSetorComercial().getId()));

					// Retorna Setor Comercial
					Collection colecaoConsultaSetorComercial = getControladorUtil().pesquisar(filtroSetorComercial,
									SetorComercial.class.getName());

					if(!Util.isVazioOrNulo(colecaoConsultaSetorComercial)){
						setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoConsultaSetorComercial);
					}

					// 3.1. Selecionar documentos de cobrança do setor comercial e ordenar por
					// quadra, lote e sublote.
					colecaoCobrancaDocumento = this
									.pesquisarCobrancaDocumentoArquivoTXT(idCronogramaAtividadeAcaoCobranca,
													idComandoAtividadeAcaoCobranca, cobrancaDocumentoSetorComercial.getImovel()
																	.getSetorComercial().getId());

					// Seleciona o ID da Localidade
					String idLocalidade = "";

					if(setorComercial != null){
						idLocalidade = setorComercial.getLocalidade().getId().toString();
					}

					// Seleciona o ID da Localidade
					String codigoSetorComercial = "";

					if(cobrancaDocumentoSetorComercial.getCodigoSetorComercial() != null){
						codigoSetorComercial = cobrancaDocumentoSetorComercial.getCodigoSetorComercial().toString();
					}

					// 3.2. Caso existam documentos de cobrança para este setor
					if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
						// 3.2.1. Criar o arquivo TXT
						nomeArquivo = "lasercorte." + Util.adicionarZerosEsquedaNumero(3, idLocalidade)
										+ Util.adicionarZerosEsquedaNumero(2, codigoSetorComercial) + "."
										+ Util.adicionarZerosEsquedaNumero(3, numeracaoArquivo.toString()) + "."
										+ Util.formatarDataComTracoAAAAMMDDHHMMSS(new Date());

						// 3.2.2. Inicializar a quantidade de páginas e o seqüencial de impressão
						// com 1 (um).
						quantidadePaginas = 1;
						sequencialImpressao = 1;

						// 3.2.3. Inicializar o índice do documento com zero.
						indiceDocumento = 0;

						// 3.2.4 Gerar a primeira linha de controle do arquivo TXT.
						cobrancaDocumentoAvisoCorteTxt.append("%!");

						cobrancaDocumentoAvisoCorteTxt.append(System.getProperty("line.separator"));

						// 3.2.5. Gerar a segunda linha de controle do arquivo TXT.
						cobrancaDocumentoAvisoCorteTxt.append("(crcavi03.jdt)  STARTLM");

						cobrancaDocumentoAvisoCorteTxt.append(System.getProperty("line.separator"));

						// 3.2.6. Atribuir à variável offset o valor da divisão da quantidade
						// de documentos de cobrança pela 'Quantidade de avisos de corte por
						// página arredondado para cima.
						quantidadeDocumentos = colecaoCobrancaDocumento.size();

						Short quantidadeAvisosCortePorPagina = Util
										.converterStringParaShort((String) ParametroCobranca.P_QUANTIDADE_AVISO_CORTE_PAGINA.executar());

						offset = Util.arredondarResultadoDivisaoParaMaior(quantidadeDocumentos, quantidadeAvisosCortePorPagina.intValue());

						// 3.2.7. Para cada documento de cobrança
						for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
							// 3.2.7.1. Gerar conteúdo da linha do aviso de corte [SB0004 - Gerar
							// Linha do Aviso de Corte - Modelo 2].

							// 1. Gerar uma linha do arquivo TXT
							// 1 - Nome da Localidade
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLocalidade()
											.getDescricao(), 15));

							// 2 - Matrícula formatada
							if(cobrancaDocumento.getImovel() != null){
								tamString = cobrancaDocumento.getImovel().getId().toString().length();
								// IMOV_ID, no formato 99999999.9
								auxFormatacao = cobrancaDocumento.getImovel().getId().toString().substring(0, tamString - 1) + "."
												+ cobrancaDocumento.getImovel().getId().toString().substring(tamString - 1, tamString);
								cobrancaDocumentoAvisoCorteTxt.append(Util.adicionarZerosEsquedaNumero(10, auxFormatacao));
							}else{
								cobrancaDocumentoAvisoCorteTxt.append(Util.adicionarZerosEsquedaNumero(10, "0"));
							}

							// 3 - Código da Localidade
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento.getImovel()
											.getLocalidade().getId().toString(), 3));

							// 4 - Setor Comercial
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento
											.getCodigoSetorComercial().toString(), 2));

							// 5 - Rota
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento.getImovel().getRota()
											.getCodigo().toString(), 2));

							// 6 - Segmento
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento.getImovel()
											.getNumeroSegmento().toString(), 2));

							// 7 - Lote
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(new Short(cobrancaDocumento.getImovel()
											.getLote()).toString(), 4));

							// 8 - SubLote
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(new Short(cobrancaDocumento.getImovel()
											.getSubLote()).toString(), 2));

							// 9 - Nome do cliente

							Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());

							if(cliente != null){
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(cliente.getNome(), 30));
							}else{
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 30));
							}

							// 10 - Endereço do imóvel
							// [UC0085]Obter Endereco
							String enderecoImovel = getControladorEndereco().pesquisarEndereco(cobrancaDocumento.getImovel().getId());

							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(enderecoImovel, 50));

							// 11 - Seqüencial de impressão
							cobrancaDocumentoAvisoCorteTxt.append(Util.adicionarZerosEsquedaNumero(6,
											new Integer(sequencialImpressao).toString()));

							// 12 - Data da Emissão
							cobrancaDocumentoAvisoCorteTxt
											.append(Util.completaString(Util.formatarData(cobrancaDocumento.getEmissao()), 10));

							// 13 - Mensagem de corte com consumo
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 9));

							// 14 - Número do documento de cobrança
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringZeroEsquerda(
											new Integer(cobrancaDocumento.getNumeroSequenciaDocumento()).toString(), 9));

							// 15 - Número do hidrômetro
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLigacaoAgua()
											.getHidrometroInstalacaoHistorico().getNumeroHidrometro(), 10));

							// 16 - Local de Instalação
							HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = repositorioCobranca
											.getHidrometroInstalacaoHistorico(cobrancaDocumento.getImovel().getLigacaoAgua()
															.getHidrometroInstalacaoHistorico().getNumeroHidrometro());

							if(hidrometroInstalacaoHistorico != null){
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(hidrometroInstalacaoHistorico
												.getHidrometroLocalInstalacao().getDescricaoAbreviada(), 3));
							}else{
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 3));
							}

							// 17 - Descrição do documento
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("OSP - ", 6));

							// 18 - Diâmetro
							Hidrometro hidrometro = repositorioCobranca.getHidrometro(cobrancaDocumento.getImovel().getLigacaoAgua()
											.getHidrometroInstalacaoHistorico().getNumeroHidrometro());

							if(hidrometro != null && hidrometro.getHidrometroDiametro() != null){
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(
												hidrometro.getHidrometroDiametro().getDescricao(), 6));
							}else{
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("*", 6));
							}

							// 19 - Valor Total do documento
							cobrancaDocumentoAvisoCorteTxt.append(Util.completarStringComValorEsquerda(
											Util.formataBigDecimal(cobrancaDocumento.getValorDocumento(), 2, true), "*", 11));

							// Obtém a mensagem para contas em revisão pesquisando pelo Id de
							// cobrança
							// documento.
							mensagemContaEmRevisao = this.obterMensagemContaEmRevisaoImovel(cobrancaDocumento.getId());

							// 20 - Mensagem de contas em revisão
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(mensagemContaEmRevisao, 73));

							// 21 - Data da Visita
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 12));

							// 22 - Representação numérica do código de barras
							// [FS002] - Obter representação numérica do código de barras com
							// formatação
							String representacaoNumericaCodBarra = "";

							// [UC0229] Obtém a representação numérica do código de barra
							representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
											new Integer(5), cobrancaDocumento.getValorDocumento(),
											cobrancaDocumento.getImovel().getLocalidade().getId(), cobrancaDocumento.getImovel().getId(),
											null, null, null, null, cobrancaDocumento.getNumeroSequenciaDocumento() + "",
											cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, null, null, null);

							// Formata a representação númerica do código de barras com o dígito
							// verificador
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 12) + " "
											+ representacaoNumericaCodBarra.substring(12, 24) + " "
											+ representacaoNumericaCodBarra.substring(24, 36) + " "
											+ representacaoNumericaCodBarra.substring(36, 48);

							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(representacaoNumericaCodBarraFormatada, 51));

							// 23 - Quantidade de contas
							// Quantidade de contas de itens associados ao documento de cobrança
							int quantidadeContas = (repositorioCobranca.pesquisarQuantidadeCobrancaDocumentoItem(cobrancaDocumento.getId()))
											.intValue();
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(
											"(" + Util.adicionarZerosEsquedaNumero(2, Integer.valueOf(quantidadeContas).toString())
															+ " CONTAS)", 11));

							// 24 / 37 - Item notificado 1 ao Item notificado 14
							// [FS003] - Formatar itens cobrados
							// 1. Selecionar itens cobrados associados ao documento de cobrança
							// ordenando pelo mês/ano referência
							Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = repositorioCobranca
											.obterCobrancaDocumentoItemComConta(cobrancaDocumento);

							int quantidadeContasCobrancaDocumentoItem = 0;

							if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
								// Guarda a quantidade de itens de cobrança documento
								quantidadeContasCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.size();
								// 2. Caso a quantidade de itens seja maior que 14 (catorze),
								if(quantidadeContasCobrancaDocumentoItem > 14){
									String msgRetornoAgrupados = "";
									String msgRetornoRecentes = "";
									String mesAnoReferencia = "";
									BigDecimal valorTotalItensAgrupados = BigDecimal.ZERO;
									int contadorRegistros = 0;
									int indicadorInicioAgrupar = 0;
									int contadorRegistrosRecentes = 0;
									// agrupar os N (quantidade total - 13) mais antigos (ordenados
									// pelo mês/ano de referência)
									indicadorInicioAgrupar = quantidadeContasCobrancaDocumentoItem - 13;

									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistros++;

										// Recupera o maior mês/ano de referência do itens agrupados
										if(contadorRegistros == indicadorInicioAgrupar){
											mesAnoReferencia = Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral()
															.getConta().getReferencia());
										}
										// e obter o valor total dos itens agrupados (soma de
										// CDIT_VLITEMCOBRADO)
										// Acumula o valor total de itens agrupados
										if(contadorRegistros <= indicadorInicioAgrupar){
											valorTotalItensAgrupados = valorTotalItensAgrupados.add(cobrancaDocumentoItem
															.getValorItemCobrado());
										}
									}

									// Mensagem da 1ª Linha
									msgRetornoAgrupados = " "
													+ "ANTES DE "
													+ Util.completaString("", 3)
													+ Util.completaString(mesAnoReferencia, 7)
													+ Util.completarStringComValorEsquerda(
																	Util.formataBigDecimal(valorTotalItensAgrupados, 2, true), " ", 11);

									cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(msgRetornoAgrupados, 31));

									// Atribuir os segmentos de Item cobrado de 2 a 14
									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistrosRecentes++;

										if(contadorRegistrosRecentes > indicadorInicioAgrupar){
											msgRetornoRecentes = " "
															+ Util.completaString(
																			Util.formatarMesAnoReferencia(cobrancaDocumentoItem
																							.getContaGeral().getConta().getReferencia()), 7)
															+ Util.completaString("", 2)
															+ Util.completaString(
																			Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																							.getConta().getDataVencimentoConta()), 10)
															+ Util.completarStringComValorEsquerda(Util.formataBigDecimal(
																			cobrancaDocumentoItem.getValorItemCobrado(), 2, true), " ", 11);

											cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(msgRetornoRecentes, 31));
										}

										msgRetornoRecentes = "";
									}
								}else{
									// 3. Caso contrário, ou seja, a quantidade de itens não seja
									// maior que 14, atribuir os segmentos de item cobrado de 1 a
									// 14, para os que existirem
									int contadorRegistrosInseridos = 0;
									String msgRetorno = "";

									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistrosInseridos++;

										msgRetorno = " "
														+ Util.completaString(
																		Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral()
																						.getConta().getReferencia()), 7)
														+ Util.completaString("", 2)
														+ Util.completaString(
																		Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
																						.getDataVencimentoConta()), 10)
														+ Util.completarStringComValorEsquerda(Util.formataBigDecimal(
																		cobrancaDocumentoItem.getValorItemCobrado(), 2, true), " ", 11);

										cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(msgRetorno, 31));

										msgRetorno = "";
									}

									// Caso não exista o item ou a quantidade seja menor que 14,
									// preencher com espaços em branco:
									while(contadorRegistrosInseridos < 14){
										cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 31));
										contadorRegistrosInseridos++;
									}
								}
							}

							// 38 - Item notificado para Corte
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 294));

							// 39 - Nome da empresa abreviado
							Empresa empresa = null;
							FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

							filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, cobrancaDocumento.getEmpresa().getId()));

							// Retorna Empresa
							Collection colecaoConsultaEmpresa = getControladorUtil().pesquisar(filtroEmpresa, Empresa.class.getName());

							if(!Util.isVazioOrNulo(colecaoConsultaEmpresa)){
								empresa = (Empresa) Util.retonarObjetoDeColecao(colecaoConsultaEmpresa);
							}

							if(empresa != null){
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(empresa.getDescricaoAbreviada(), 4));
							}else{
								cobrancaDocumentoAvisoCorteTxt.append(Util.completaString("", 4));
							}

							// 40 - Código de Barras
							// Recupera a representação númerica do código de barras sem
							// os dígitos verificadores
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra.substring(0, 11)
											+ representacaoNumericaCodBarra.substring(12, 23)
											+ representacaoNumericaCodBarra.substring(24, 35)
											+ representacaoNumericaCodBarra.substring(36, 47);

							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(representacaoCodigoBarrasSemDigitoVerificador, 44));

							// 41 - Matricula sem formatação
							cobrancaDocumentoAvisoCorteTxt.append(Util.adicionarZerosEsquedaNumero(9, cobrancaDocumento.getImovel().getId()
											.toString()));

							// 42 - Data de emissão sem barras
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(
											Util.formatarDataSemBarraDDMMAAAA(cobrancaDocumento.getEmissao()), 8));

							// 43 - Gerencia Regional
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLocalidade()
											.getGerenciaRegional().getNomeAbreviado(), 5));

							// 44 - Bairro
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLogradouroBairro()
											.getBairro().getNome(), 25));

							// 45 - CEP
							cobrancaDocumentoAvisoCorteTxt.append(Util.completaString(
											Util.formatarCEP(cobrancaDocumento.getImovel().getLogradouroCep().getCep().getCodigo()
															.toString()), 10));

							cobrancaDocumentoAvisoCorteTxt.append(System.getProperty("line.separator"));

							// 3.2.7.2. Incrementar o índice do documento.
							indiceDocumento++;

							// 3.2.7.3. Adicionar ao seqüencial de impressão o valor do offset.
							sequencialImpressao += offset;

							// 3.2.7.4. Caso o resto da divisão do indice do documento
							// pelo valor do parâmetro 'Quantidade de avisos de corte por página'
							// seja zero ou seqüencial de impressão seja maior que a quantidade de
							// documentos
							int restodivisao = 0;
							restodivisao = indiceDocumento % quantidadeAvisosCortePorPagina;

							if((restodivisao == 0) || (sequencialImpressao > quantidadeDocumentos)){
								// 3.2.7.4.1. Gerar quebra de página
								// [FS005 - Gerar Linha de Quebra de página].
								if(indiceDocumento < quantidadeDocumentos){
									cobrancaDocumentoAvisoCorteTxt.append("%%XGF PAGEBRK");

									cobrancaDocumentoAvisoCorteTxt.append(System.getProperty("line.separator"));
								}

								// 3.2.7.4.2. Incrementar a quantidade de páginas.
								quantidadePaginas++;

								// 3.2.7.4.3. Atribuir ao seqüencial de impressão o valor da
								// quantidade de páginas.
								sequencialImpressao = quantidadePaginas;
							}
						}
					}

					// 3.2.8. Gerar linha de fim de arquivo
					// [FS006 - Gerar Linha de Finalização do Arquivo]
					// e fechar o arquivo.
					cobrancaDocumentoAvisoCorteTxt.append("%%EOF");

					// 3.2.9. Incrementar o valor de numeração do arquivo.
					numeracaoArquivo++;

					// Gera o Arquivo.
					this.enviarArquivoTxtCobrancaDocumentoAvisoCorte(cobrancaDocumentoAvisoCorteTxt, nomeArquivo, usuario);

					cobrancaDocumentoAvisoCorteTxt = new StringBuilder();
				}
			}

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoCobrancaDocumento != null){
			colecaoCobrancaDocumento.clear();
			colecaoCobrancaDocumento = null;
		}

		if(colecaoSetorComercialCobrancaDocumento != null){
			colecaoSetorComercialCobrancaDocumento.clear();
			colecaoSetorComercialCobrancaDocumento = null;
		}
	}

	/**
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
	 * pesquisarSetorComercialCobrancaDocumento
	 * 
	 * @author Carlos Chrystian
	 * @date 28/12/2011
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaAcaoComando
	 * @throws ControladorException
	 */
	public Collection<CobrancaDocumento> pesquisarSetorComercialCobrancaDocumento(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando) throws ControladorException{

		Collection<CobrancaDocumento> colecaocobrancaDocumentoSetorComercial = null;

		try{

			Collection<Object[]> cobrancaDocumentoSetorComercial = repositorioCobranca.pesquisarSetorComercialCobrancaDocumento(
							idCobrancaAcaoCronograma, idCobrancaAcaoComando);

			if(!Util.isVazioOrNulo(cobrancaDocumentoSetorComercial)){

				colecaocobrancaDocumentoSetorComercial = new ArrayList<CobrancaDocumento>(cobrancaDocumentoSetorComercial.size());

				for(Object[] coluna : cobrancaDocumentoSetorComercial){

					CobrancaDocumento cobrDoc = new CobrancaDocumento();

					cobrDoc.setImovel(new Imovel());
					cobrDoc.getImovel().setSetorComercial(new SetorComercial());

					int i = 0;

					cobrDoc.getImovel().getSetorComercial().setId((Integer) coluna[i++]); // 1
					cobrDoc.setCodigoSetorComercial((Integer) coluna[i++]); // 2

					colecaocobrancaDocumentoSetorComercial.add(cobrDoc);
				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaocobrancaDocumentoSetorComercial;
	}

	/**
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
	 * [FS001] - Formatar conteúdo referente a contas em revisão
	 * Ordenação caso P_ORDENACAO_INSCRICAO = 1 ele ordena por
	 * LOCAL.SETOR.ROTA.SEGMENTO.LOTE.SUBLOTE
	 * 
	 * @author Carlos Chrystian
	 * @date 20/12/2011
	 * @param idComandoCobranca
	 * @throws ControladorException
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoArquivoTXT(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Integer idSetorComercial) throws ControladorException{

		Collection<CobrancaDocumento> colecaoDocumentosCobranca = null;

		try{

			Collection<Object[]> documentosCobranca = repositorioCobranca.pesquisarCobrancaDocumentoArquivoTXT(idCobrancaAcaoCronograma,
							idCobrancaAcaoComando, idSetorComercial);

			if(!Util.isVazioOrNulo(documentosCobranca)){

				colecaoDocumentosCobranca = new ArrayList<CobrancaDocumento>(documentosCobranca.size());

				for(Object[] coluna : documentosCobranca){

					CobrancaDocumento cobrDoc = new CobrancaDocumento();
					cobrDoc.setDocumentoTipo(new DocumentoTipo());

					cobrDoc.setImovel(new Imovel());

					cobrDoc.getImovel().setRota(new Rota());

					cobrDoc.getImovel().setLogradouroBairro(new LogradouroBairro());
					cobrDoc.getImovel().getLogradouroBairro().setBairro(new Bairro());

					cobrDoc.getImovel().setLogradouroCep(new LogradouroCep());
					cobrDoc.getImovel().getLogradouroCep().setCep(new Cep());

					cobrDoc.getImovel().setLocalidade(new Localidade());
					cobrDoc.getImovel().getLocalidade().setMunicipio(new Municipio());
					cobrDoc.getImovel().getLocalidade().setGerenciaRegional(new GerenciaRegional());

					cobrDoc.setEmpresa(new Empresa());

					cobrDoc.getImovel().setLigacaoAgua(new LigacaoAgua());
					cobrDoc.getImovel().getLigacaoAgua().setHidrometroInstalacaoHistorico(new HidrometroInstalacaoHistorico());

					int i = 0;

					cobrDoc.setId((Integer) coluna[i++]); // 1
					cobrDoc.setCodigoSetorComercial((Integer) coluna[i++]); // 2
					cobrDoc.getDocumentoTipo().setId((Integer) coluna[i++]); // 3
					cobrDoc.setNumeroSequenciaDocumento((Integer) coluna[i++]); // 4
					cobrDoc.setNumeroQuadra((Integer) coluna[i++]); // 5
					cobrDoc.setEmissao((Date) coluna[i++]); // 6
					cobrDoc.setValorDocumento((BigDecimal) coluna[i++]); // 7
					cobrDoc.getEmpresa().setId((Integer) coluna[i++]); // 8
					cobrDoc.getImovel().getLocalidade().setId((Integer) coluna[i++]); // 9
					cobrDoc.getImovel().getLocalidade().setDescricao((String) coluna[i++]); // 10
					cobrDoc.getImovel().setId((Integer) coluna[i++]); // 11
					cobrDoc.getImovel().setLote((Short) coluna[i++]); // 12
					cobrDoc.getImovel().setSubLote((Short) coluna[i++]); // 13
					cobrDoc.getImovel().setNumeroSegmento((Short) coluna[i++]); // 14
					cobrDoc.getImovel().getRota().setCodigo((Short) coluna[i++]); // 15
					cobrDoc.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().setNumeroHidrometro((String) coluna[i++]); // 16
					cobrDoc.getImovel().getLocalidade().getGerenciaRegional().setNomeAbreviado((String) coluna[i++]); // 17
					cobrDoc.getImovel().getLogradouroBairro().getBairro().setNome((String) coluna[i++]); // 18
					cobrDoc.getImovel().getLogradouroCep().getCep().setCodigo((Integer) coluna[i++]); // 19
					cobrDoc.getImovel().getLocalidade().getMunicipio().setId((Integer) coluna[i++]); // 20
					cobrDoc.getImovel().getLocalidade().getMunicipio().setNome((String) coluna[i++]); // 21

					colecaoDocumentosCobranca.add(cobrDoc);
				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoDocumentosCobranca;
	}

	/**
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
	 * [FS001] - Formatar conteúdo referente a contas em revisão
	 * 
	 * @author Carlos Chrystian
	 * @date 20/12/2011
	 * @param idComandoCobranca
	 * @throws ControladorException
	 */
	public String obterMensagemContaEmRevisaoImovel(Integer idCobrancaDocumento) throws ControladorException{

		// [FS001] - Formatar conteúdo referente a contas em revisão
		try{
			Collection<Conta> contas = repositorioCobranca.recuperarContasCobrancaDocumento(idCobrancaDocumento);

			Collection<Conta> colecaoContasEmRevisao = new ArrayList<Conta>();
			int quantidadeContasEmRevisao = 0;
			String retorno = "";
			BigDecimal valorSomarContasEmRevisao = BigDecimal.ZERO;
			BigDecimal valorSubtrairContasEmRevisao = BigDecimal.ZERO;
			BigDecimal valorTotalContasEmRevisao = BigDecimal.ZERO;

			// Caso o imóvel do documento de cobrança tenha contas em revisão,
			// o sistema consulta a quantidade e total das contas em revisão do imóvel do documento
			// de
			// cobrança
			if(!Util.isVazioOrNulo(contas)){
				for(Conta conta : contas){
					if(conta.getDebitoCreditoSituacaoAtual() != null
									&& (conta.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.NORMAL)
													|| conta.getDebitoCreditoSituacaoAtual().getId()
																	.equals(DebitoCreditoSituacao.RETIFICADA) || conta
													.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.INCLUIDA))
									&& conta.getContaMotivoRevisao() != null){
						colecaoContasEmRevisao.add(conta);
					}
				}

				if(!Util.isVazioOrNulo(colecaoContasEmRevisao)){
					// Quantidade de contas em revisão
					quantidadeContasEmRevisao = colecaoContasEmRevisao.size();

					// Total das contas em revisão do imóvel do documento de cobrança
					for(Conta contaEmRevisao : colecaoContasEmRevisao){
						if(contaEmRevisao.getValorAgua() != null && contaEmRevisao.getValorEsgoto() != null
										&& contaEmRevisao.getDebitos() != null && contaEmRevisao.getValorCreditos() != null
										&& contaEmRevisao.getValorImposto() != null){
							// CNTA_VLAGUA + CNTA_VLESGOTO + CNTA_VLDEBITOS
							valorSomarContasEmRevisao = valorSomarContasEmRevisao.add(contaEmRevisao.getValorAgua());
							valorSomarContasEmRevisao = valorSomarContasEmRevisao.add(contaEmRevisao.getValorEsgoto());
							valorSomarContasEmRevisao = valorSomarContasEmRevisao.add(contaEmRevisao.getDebitos());
							// CNTA_VLCREDITOS + CNTA_VLIMPOSTOS
							valorSubtrairContasEmRevisao = valorSubtrairContasEmRevisao.add(contaEmRevisao.getValorCreditos());
							valorSubtrairContasEmRevisao = valorSubtrairContasEmRevisao.add(contaEmRevisao.getValorImposto());
							// CNTA_VLAGUA + CNTA_VLESGOTO + CNTA_VLDEBITOS - CNTA_VLCREDITOS -
							// CNTA_VLIMPOSTOS
							valorTotalContasEmRevisao = valorTotalContasEmRevisao.add(Util.subtrairBigDecimal(valorSomarContasEmRevisao,
											valorSubtrairContasEmRevisao));
						}
					}

					// atribui a mensagem "Há [quantidade de contas em revisão]
					// conta(s) em revisão excluída(s) da cobrança no valor de
					// R$ [valor total das contas em revisão, no formato 9999,99]."
					retorno = "Há " + quantidadeContasEmRevisao + " conta(s) em revisão excluída(s) da cobrança no valor de R$ "
									+ Util.formataBigDecimal(valorTotalContasEmRevisao, 2, true);
				}
			}

			return retorno;
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte - Modelo 2
	 * 
	 * @author Carlos Chrystian
	 * @date 20/12/2011
	 * @param sb
	 * @param nomeArquivo
	 * @param usuario
	 * @throws ControladorException
	 */
	private void enviarArquivoTxtCobrancaDocumentoOrdemCorteModelo2(StringBuffer sb, String nomeArquivo, Usuario usuario)
					throws ControladorException{

		RelatorioOrdemCorteArquivoTxt relatorio = new RelatorioOrdemCorteArquivoTxt(usuario);

		relatorio.addParametro("arquivoTexto", sb);
		relatorio.addParametro("nomeArquivo", nomeArquivo);
		relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_ZIP);

		this.getControladorBatch().iniciarProcessoRelatorio(relatorio);

	}

	/**
	 * Este caso de uso gera os avisos de corte
	 * [UC0476] [SB0003] - Gerar Arquivo TXT Ordem de Corte - Modelo 2
	 * 
	 * @author Carlos Chrystian
	 * @date 30/12/2011
	 * @param parametroSistema
	 * @param colecaoCobrancaDocumento
	 * @param sistemaParametro
	 * @param idComandoCobranca
	 * @param usuario
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 * @throws IOException
	 * @throws CreateException
	 */
	public void emitirOrdemCorteArquivoTXT(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Usuario usuario) throws ControladorException{

		Collection<CobrancaDocumento> colecaoSetorComercialCobrancaDocumento = null;
		Collection<CobrancaDocumento> colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		StringBuffer cobrancaDocumentoOrdemCorteTxt = new StringBuffer();
		Integer numeracaoArquivo = 0;
		int quantidadePaginas = 0;
		int quantidadeDocumentos = 0;
		int sequencialImpressao = 0;
		int indiceDocumento = 0;
		int tamString = 0;
		int offset = 0;
		String nomeArquivo = "";
		String auxFormatacao = "";

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}

		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}

		Map<Integer, CobrancaDocumento> mapCobrancaDocumento = null;
		Integer sequencial = 0;
		CobrancaDocumento cobrancaDocumento = null;

		try{
			// [SB0003] - Gerar Arquivo TXT Ordem de Corte - Modelo 2
			// 1. Consultar todos os setores comerciais da lista de documentos de cobrança ordenados
			// pelo código do setor comercial.
			colecaoSetorComercialCobrancaDocumento = this.pesquisarSetorComercialCobrancaDocumento(idCronogramaAtividadeAcaoCobranca,
							idComandoAtividadeAcaoCobranca);

			if(!Util.isVazioOrNulo(colecaoSetorComercialCobrancaDocumento)){
				// 2. Inicializar o campo numeração do arquivo com zero.
				numeracaoArquivo = 0;

				// 3. Para cada setor comercial:
				for(CobrancaDocumento cobrancaDocumentoSetorComercial : colecaoSetorComercialCobrancaDocumento){
					// Pesquisar o código da localidade
					SetorComercial setorComercial = null;
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();

					filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID, cobrancaDocumentoSetorComercial
									.getImovel().getSetorComercial().getId()));

					// Retorna Setor Comercial
					Collection colecaoConsultaSetorComercial = getControladorUtil().pesquisar(filtroSetorComercial,
									SetorComercial.class.getName());

					if(!Util.isVazioOrNulo(colecaoConsultaSetorComercial)){
						setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoConsultaSetorComercial);
					}

					// 3.1. Selecionar documentos de cobrança do setor comercial e ordenar por
					// quadra, lote e sublote.
					colecaoCobrancaDocumento = this
									.pesquisarCobrancaDocumentoArquivoTXT(idCronogramaAtividadeAcaoCobranca,
													idComandoAtividadeAcaoCobranca, cobrancaDocumentoSetorComercial.getImovel()
																	.getSetorComercial().getId());

					// Seleciona o ID da Localidade
					String idLocalidade = "";

					if(setorComercial != null){
						idLocalidade = setorComercial.getLocalidade().getId().toString();
					}

					// Seleciona o ID da Localidade
					String codigoSetorComercial = "";

					if(cobrancaDocumentoSetorComercial.getCodigoSetorComercial() != null){
						codigoSetorComercial = cobrancaDocumentoSetorComercial.getCodigoSetorComercial().toString();
					}

					// 3.2. Caso existam documentos de cobrança para este setor
					if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
						mapCobrancaDocumento = new HashMap<Integer, CobrancaDocumento>();

						sequencial = 0;

						for(CobrancaDocumento cobrancaDocumentoAux : colecaoCobrancaDocumento){
							sequencial = sequencial + 1;
							mapCobrancaDocumento.put(sequencial, cobrancaDocumentoAux);
						}

						// 3.2.1. Criar o arquivo TXT
						nomeArquivo = "lasercompr." + Util.adicionarZerosEsquedaNumero(3, idLocalidade)
										+ Util.adicionarZerosEsquedaNumero(2, codigoSetorComercial) + "."
										+ Util.adicionarZerosEsquedaNumero(3, numeracaoArquivo.toString()) + "."
										+ Util.formatarDataComTracoAAAAMMDDHHMMSS(new Date());

						// 3.2.2. Inicializar a quantidade de páginas e o seqüencial de impressão
						// com 1 (um).
						quantidadePaginas = 1;
						sequencialImpressao = 1;

						// 3.2.3. Inicializar o índice do documento com zero.
						indiceDocumento = 0;

						// 3.2.4 Gerar a primeira linha de controle do arquivo TXT.
						cobrancaDocumentoOrdemCorteTxt.append("%!");

						cobrancaDocumentoOrdemCorteTxt.append(System.getProperty("line.separator"));

						// 3.2.5. Gerar a segunda linha de controle do arquivo TXT.
						cobrancaDocumentoOrdemCorteTxt.append("(suspfor02.jdt) STARTLM");

						cobrancaDocumentoOrdemCorteTxt.append(System.getProperty("line.separator"));

						// 3.2.6. Atribuir à variável offset o valor da divisão da quantidade
						// de documentos de cobrança pela 'Quantidade de avisos de corte por
						// página arredondado para cima.
						quantidadeDocumentos = colecaoCobrancaDocumento.size();

						Short quantidadeOrdensCortePorPagina = Util
										.converterStringParaShort((String) ParametroCobranca.P_QUANTIDADE_ORDEM_CORTE_PAGINA.executar());

						offset = Util.arredondarResultadoDivisaoParaMaior(quantidadeDocumentos, quantidadeOrdensCortePorPagina.intValue());

						// 3.2.7. Para cada documento de cobrança
						for(int i = 0; i < colecaoCobrancaDocumento.size(); i++){
							cobrancaDocumento = mapCobrancaDocumento.get(sequencialImpressao);

							// 3.2.7.1. Gerar conteúdo da linha de ordem de corte
							// [SB0004 - Gerar Linha de Ordem de Corte - Modelo 2].
							// 1. Gerar uma linha do arquivo TXT

							// 1 - Constante
							cobrancaDocumentoOrdemCorteTxt.append("1");

							// 2 - Seqüencial de impressão
							cobrancaDocumentoOrdemCorteTxt.append(Util.adicionarZerosEsquedaNumero(6,
											new Integer(sequencialImpressao).toString()));

							// // 3 - Número do documento de cobrança
							// cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(new
							// Integer(cobrancaDocumento
							// .getNumeroSequenciaDocumento()).toString(), 9));

							FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();

							filtroOrdemServico.adicionarParametro(new ParametroSimples(FiltroOrdemServico.COBRANCA_DOCUMENTO_ID,
											cobrancaDocumento.getId()));
							Collection colecaoOrdemServico = getControladorUtil().pesquisar(filtroOrdemServico,
											OrdemServico.class.getName());
							if(colecaoOrdemServico != null && !colecaoOrdemServico.isEmpty()){
								OrdemServico ordemServico = (OrdemServico) colecaoOrdemServico.iterator().next();

								// 3 - Número da Ordem de Serviço
								cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(ordemServico.getId().toString(), 9));
							}else{
								cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 9));
							}

							// 4 - Matrícula formatada
							if(cobrancaDocumento.getImovel() != null){
								tamString = cobrancaDocumento.getImovel().getId().toString().length();
								// IMOV_ID, no formato 99999999.9
								auxFormatacao = cobrancaDocumento.getImovel().getId().toString().substring(0, tamString - 1) + "."
												+ cobrancaDocumento.getImovel().getId().toString().substring(tamString - 1, tamString);
								cobrancaDocumentoOrdemCorteTxt.append(Util.adicionarZerosEsquedaNumero(10, auxFormatacao));
							}else{
								cobrancaDocumentoOrdemCorteTxt.append(Util.adicionarZerosEsquedaNumero(10, "0"));
							}

							// 5 - Setor Comercial
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento
											.getCodigoSetorComercial().toString(), 2));

							// 6 - Rota
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento.getImovel().getRota()
											.getCodigo().toString(), 2));

							// 7 - Segmento
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(cobrancaDocumento.getImovel()
											.getNumeroSegmento().toString(), 2));

							// 8 - Lote
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(new Short(cobrancaDocumento.getImovel()
											.getLote()).toString(), 4));

							// 9 - SubLote
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda(new Short(cobrancaDocumento.getImovel()
											.getSubLote()).toString(), 2));

							// 10 - Número do hidrômetro
							cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLigacaoAgua()
											.getHidrometroInstalacaoHistorico().getNumeroHidrometro(), 10));

							// 11 - Nome do cliente
							Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());

							if(cliente != null){
								cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(cliente.getNome(), 30));
							}else{
								cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 30));
							}

							// 12 - Endereço do imóvel
							// [UC0085]Obter Endereco
							// String enderecoImovel =
							// getControladorEndereco().pesquisarEndereco(cobrancaDocumento.getImovel().getId());

							Object[] endereco = getControladorEndereco().pesquisarEnderecoFormatadoLista(
											cobrancaDocumento.getImovel().getId());

							String enderecoImovel = (String) endereco[0];

							cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(enderecoImovel, 50));

							// 13 - Cidade
							cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLocalidade()
											.getMunicipio().getNome(), 15));

							// 14 - CEP
							cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(
											Util.formatarCEPSemPonto(cobrancaDocumento.getImovel().getLogradouroCep().getCep().getCodigo()
															.toString()), 9));

							// 15 - Data da Emissão
							cobrancaDocumentoOrdemCorteTxt
											.append(Util.completaString(Util.formatarData(cobrancaDocumento.getEmissao()), 10));

							// 16 - Quantidade de contas
							// Quantidade de contas de itens associados ao documento de cobrança
							int quantidadeContas = (repositorioCobranca.pesquisarQuantidadeCobrancaDocumentoItem(cobrancaDocumento.getId()))
											.intValue();
							cobrancaDocumentoOrdemCorteTxt.append(Util.adicionarZerosEsquedaNumero(3, Integer.valueOf(quantidadeContas)
											.toString()));

							// 17 - Valor Total do débito
							cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringComValorEsquerda(
											Util.formataBigDecimal(cobrancaDocumento.getValorDocumento(), 2, true), "*", 10));

							// 18 / 31 - Item notificado 1 ao Item notificado 14
							// [FS001] - Formatar itens cobrados
							// 1. Selecionar itens cobrados associados ao documento de cobrança
							// ordenando pelo mês/ano referência
							Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = repositorioCobranca
											.obterCobrancaDocumentoItemComConta(cobrancaDocumento);

							int quantidadeContasCobrancaDocumentoItem = 0;

							if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
								// Guarda a quantidade de itens de cobrança documento
								quantidadeContasCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.size();
								// 2. Caso a quantidade de itens seja maior que 14 (catorze),
								if(quantidadeContasCobrancaDocumentoItem > 14){
									String msgRetornoAgrupados = "";
									String msgRetornoRecentes = "";
									BigDecimal valorTotalItensAgrupados = BigDecimal.ZERO;
									int contadorRegistros = 0;
									int indicadorInicioAgrupar = 0;
									int contadorRegistrosRecentes = 0;
									// agrupar os N (quantidade total - 13) mais antigos (ordenados
									// pelo mês/ano de referência)
									indicadorInicioAgrupar = quantidadeContasCobrancaDocumentoItem - 13;

									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistros++;
										// Obter o valor total dos itens agrupados (soma de
										// CDIT_VLITEMCOBRADO)
										// Acumula o valor total de itens agrupados
										if(contadorRegistros <= indicadorInicioAgrupar){
											valorTotalItensAgrupados = valorTotalItensAgrupados.add(cobrancaDocumentoItem
															.getValorItemCobrado());
										}
									}

									// Mensagem da 1ª Linha
									msgRetornoAgrupados = "ANTES"
													+ Util.completaString("", 2)
													+ Util.completarStringComValorEsquerda(
																	Util.formataBigDecimal(valorTotalItensAgrupados, 2, true), " ", 10)
													+ Util.completaString("", 10);

									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(msgRetornoAgrupados, 27));

									// Atribuir os segmentos de Item cobrado de 2 a 14
									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistrosRecentes++;

										if(contadorRegistrosRecentes > indicadorInicioAgrupar){
											msgRetornoRecentes = Util.completaString(
															Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral().getConta()
																			.getReferencia()), 7)
															+ Util.completarStringComValorEsquerda(Util.formataBigDecimal(
																			cobrancaDocumentoItem.getValorItemCobrado(), 2, true), " ", 10)
															+ Util.completaString(
																			Util.formatarData(cobrancaDocumentoItem.getContaGeral()
																							.getConta().getDataVencimentoConta()), 10);

											cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(msgRetornoRecentes, 27));
										}

										msgRetornoRecentes = "";
									}
								}else{
									// 3. Caso contrário, ou seja, a quantidade de itens não seja
									// maior que 14, atribuir os segmentos de item cobrado de 1 a
									// 14, para os que existirem
									int contadorRegistrosInseridos = 0;
									String msgRetorno = "";

									for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
										contadorRegistrosInseridos++;

										msgRetorno = Util.completaString(
														Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral().getConta()
																		.getReferencia()), 7)
														+ Util.completarStringComValorEsquerda(Util.formataBigDecimal(
																		cobrancaDocumentoItem.getValorItemCobrado(), 2, true), " ", 10)
														+ Util.completaString(
																		Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta()
																						.getDataVencimentoConta()), 10);

										cobrancaDocumentoOrdemCorteTxt.append(Util.completaString(msgRetorno, 27));

										msgRetorno = "";
									}

									// Caso não exista o item ou a quantidade seja menor que 14,
									// preencher com espaços em branco:
									while(contadorRegistrosInseridos < 14){
										cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 27));
										contadorRegistrosInseridos++;
									}
								}
							}

							cobrancaDocumentoOrdemCorteTxt.append(System.getProperty("line.separator"));

							// 3.2.7.2. Incrementar o índice do documento.
							indiceDocumento++;

							// 3.2.7.3. Adicionar ao seqüencial de impressão o valor do offset.
							sequencialImpressao += offset;

							// Resto da divisão do índice do documento
							// pelo valor do parâmetro 'Quantidade de ordens de corte por página'
							int restodivisao = 0;
							restodivisao = indiceDocumento % quantidadeOrdensCortePorPagina;

							// 3.2.7.4. Caso seqüencial de impressão seja maior que a quantidade de
							// documentos
							if(sequencialImpressao > quantidadeDocumentos){
								// 3.2.7.4.1. Enquanto o resto da divisão do índice do documento
								// pelo valor do parâmetro 'Quantidade de ordens de corte por
								// página'
								// seja diferente de zero
								while(restodivisao != 0){
									// 3.2.7.4.1.1. Gerar conteúdo da linha de ordem de corte
									// [SB0005 - Gerar Linha de Ordem de Corte Zerada - Modelo 2].

									// 1 - Constante
									cobrancaDocumentoOrdemCorteTxt.append("1");

									// 2 - Seqüencial de impressão
									cobrancaDocumentoOrdemCorteTxt.append(Util.adicionarZerosEsquedaNumero(6, new Integer(
													sequencialImpressao).toString()));

									// 3 - Número do Documento de Cobrança
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 9));

									// 4 - Matrícula formatada
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 10));

									// 5 - Código do Setor Comercial
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 2));

									// 6 - Rota
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 2));

									// 7 - Segmento
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 2));

									// 8 - Lote
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 4));

									// 9 - Sublote
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 2));

									// 10 - Número do Hidrômetro
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 10));

									// 11 - Nome do cliente
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 30));

									// 12 - Endereço do Imóvel
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 50));

									// 13 - Cidade
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 15));

									// 14 - CEP
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 9));

									// 15 - Data de Emissão
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 10));

									// 16 - Quantidade de Contas
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringZeroEsquerda("0", 3));

									// 17 - Valor Total do Débito
									cobrancaDocumentoOrdemCorteTxt.append(Util.completarStringComValorEsquerda("*", "*", 10));

									// 18 - Itens notificados
									cobrancaDocumentoOrdemCorteTxt.append(Util.completaString("", 378));

									cobrancaDocumentoOrdemCorteTxt.append(System.getProperty("line.separator"));

									// 3.2.7.4.1.2. Incrementar o índice do documento.
									indiceDocumento++;
									// 3.2.7.4.1.3. Adicionar ao seqüencial de impressão o valor do
									// offset.
									sequencialImpressao += offset;

									// Refaz o calculo do resto da divisão
									restodivisao = indiceDocumento % quantidadeOrdensCortePorPagina;

								}
							}

							// 3.2.7.5. Caso o resto da divisão do indice do documento
							// pelo valor do parâmetro 'Quantidade de avisos de corte por página'
							// seja zero ou seqüencial de impressão seja maior que a quantidade de
							// documentos
							if(restodivisao == 0){
								// 3.2.7.5.1. Incrementar a quantidade de páginas.
								quantidadePaginas++;

								// 3.2.7.5.2. Atribuir ao seqüencial de impressão o valor da
								// quantidade de páginas.
								sequencialImpressao = quantidadePaginas;
							}
						}
					}

					// 3.2.8. Gerar linha de fim de arquivo
					// [FS006 - Gerar Linha de Finalização do Arquivo]
					// e fechar o arquivo.
					cobrancaDocumentoOrdemCorteTxt.append("%%EOF");

					// 3.2.9. Incrementar o valor de numeração do arquivo.
					numeracaoArquivo++;

					// Gera o Arquivo.
					this.enviarArquivoTxtCobrancaDocumentoOrdemCorteModelo2(cobrancaDocumentoOrdemCorteTxt, nomeArquivo, usuario);

					cobrancaDocumentoOrdemCorteTxt = new StringBuffer();
				}
			}

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoCobrancaDocumento != null){
			colecaoCobrancaDocumento.clear();
			colecaoCobrancaDocumento = null;
		}

		if(colecaoSetorComercialCobrancaDocumento != null){
			colecaoSetorComercialCobrancaDocumento.clear();
			colecaoSetorComercialCobrancaDocumento = null;
		}
	}

	/**
	 * [UC0349] [SB0003] - Gerar Arquivo TXT Aviso de Corte
	 * 
	 * @author Carlos Chrystian
	 * @date 20/12/2011
	 * @param sb
	 * @param nomeArquivo
	 * @param usuario
	 * @throws ControladorException
	 */
	public void enviarArquivoTxtCobrancaDocumentoAvisoCorte(StringBuilder sb, String nomeArquivo, Usuario usuario)
					throws ControladorException{

		RelatorioAvisoCorteArquivoTxt relatorio = new RelatorioAvisoCorteArquivoTxt(usuario);

		relatorio.addParametro("arquivoTexto", sb);
		relatorio.addParametro("nomeArquivo", nomeArquivo);
		relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_ZIP);

		this.getControladorBatch().iniciarProcessoRelatorio(relatorio);

	}

	/**
	 * Este caso de uso gera os avisos de corte
	 * [UC0476] [SB0006] - Gerar Arquivo TXT Ordem de Corte - Modelo 3
	 * 
	 * @author Hugo Lima
	 * @date 07/06/2012
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param cobrancaAcaoAtividadeComando
	 * @param usuario
	 * @throws ControladorException
	 */
	public void emitirOrdemCorteArquivoTXTModelo3(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Usuario usuario, Integer idFuncionalidadeIniciada)
					throws ControladorException{

		Collection<CobrancaDocumento> colecaoCobrancaDocumento = null;
		Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoEmitirDocumentoOrdemCorteModelo3Helper = null;
		Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoHelperOrdenada = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;

		StringBuilder documentoOrdemCorte = null;
		String nomeArquivo = "";

		int idUnidadeIniciada = 0;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}

		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}

		try{
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.RELATORIO, idUnidadeIniciada);

			// [SB0006] - Gerar Arquivo TXT de Ordem de Corte - Modelo 3

			// 1. O sistema ordena a lista de documentos de cobrança recebida pela gerência
			// regional, localidade, perfil do imóvel, tipo do registro do corte, setor comercial,
			// quadra, lote, sublote e endereço do imóvel com os dados do endereço da tabela IMOVEL.
			colecaoCobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumentoArquivoTXTModelo3(idCronogramaAtividadeAcaoCobranca,
							idComandoAtividadeAcaoCobranca);

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
				// Monta a coleção de helpers
				colecaoEmitirDocumentoOrdemCorteModelo3Helper = this
								.formatarEmitirDocumentoOrdemCorteModelo3Helper(colecaoCobrancaDocumento);

				// Completa os campos dos helpers que não foram retornados na pesquisa realizada
				// pelo método de formatacao
				this.completarEmitirDocumentoOrdemCorteModelo3Helper(colecaoEmitirDocumentoOrdemCorteModelo3Helper);

				// Ordena as linhas de acordo com a regra - 2.2. O sistema percorre a lista de
				// documentos até a posição correspondente ao limite de impressão, gerando o
				// documento da posição corrente e o documento da posição corrente mais o limite de
				// impressão, quando existir
				colecaoHelperOrdenada = this
								.ordenarColecaoHelpersEmitirDocumentoOrdemCorteModelo3(colecaoEmitirDocumentoOrdemCorteModelo3Helper);

				// Gera a String com o documento devidamente formatado e ordenado
				documentoOrdemCorte = this.gerarDocumentoOrdemCorteArquivoTXTModelo3(colecaoHelperOrdenada);

				// 3.2.1. Criar o arquivo TXT
				nomeArquivo = "CORTE." + Util.formatarDataComTracoAAAAMMDDHHMMSS(new Date());

				// Envia todos os dados necessários para o processamento e geração do arquivo
				this.enviarArquivoTxtCobrancaDocumentoAvisoCorte(documentoOrdemCorte, nomeArquivo, usuario);
			}

			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		if(colecaoCobrancaDocumento != null){
			colecaoCobrancaDocumento.clear();
			colecaoCobrancaDocumento = null;
		}

		if(colecaoEmitirDocumentoOrdemCorteModelo3Helper != null){
			colecaoEmitirDocumentoOrdemCorteModelo3Helper.clear();
			colecaoEmitirDocumentoOrdemCorteModelo3Helper = null;
		}
	}

	private StringBuilder gerarDocumentoOrdemCorteArquivoTXTModelo3(
					Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoEmitirDocumentoOrdemCorteModelo3Helper)
					throws ControladorException{

		StringBuilder documentoOrdemCorte = new StringBuilder();

		try{

			// 2.2.1. Gerar a primeira linha de controle do arquivo TXT, conforme layout abaixo:
			documentoOrdemCorte.append(Util.completarStringZeroEsquerda("", 8));
			documentoOrdemCorte.append(Util.completaString("", 36));
			documentoOrdemCorte.append(Util.completaString("INICIO ARQUIVO - CIAFEOC", 24));
			documentoOrdemCorte.append(Util.completaString("", 874));
			documentoOrdemCorte.append(Util.completaString("00000", 5));
			documentoOrdemCorte.append(Util.completaString("", 30));
			documentoOrdemCorte.append(Util.completaString("*", 1));

			documentoOrdemCorte.append(System.getProperty("line.separator"));

			// 2.2.2. Para cada documento de cobrança:
			for(EmitirDocumentoOrdemCorteModelo3Helper helper : colecaoEmitirDocumentoOrdemCorteModelo3Helper){

				// 2.2.2.1. Gerar a linha do arquivo texto com os dados do documento, conforme
				// layout abaixo

				// 1 Matrícula do Imóvel
				if(helper.getIdImovel() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getIdImovel().toString(), 8));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 8));
				}

				// 2 Data de Apresentação do Corte
				if(helper.getDataApresentacaoCorte() != null){
					documentoOrdemCorte.append(Util.formatarData(helper.getDataApresentacaoCorte()));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 3 Número do documento de cobrança
				if(helper.getIdOrdemServico() != null){
					documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(helper.getIdOrdemServico().toString(), 8));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 8));
				}

				// 4 Data de Apresentação do Corte Replicado
				if(helper.getDataApresentacaoCorte() != null){
					documentoOrdemCorte.append(Util.formatarData(helper.getDataApresentacaoCorte()));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 5 Número do documento de cobrança Replicado
				if(helper.getIdOrdemServico() != null){
					documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(helper.getIdOrdemServico().toString(), 8));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 8));
				}

				// 6 Nome do Imóvel ou Nome do Cliente Usuário
				if(helper.getNomeImovelOuClienteUsuario() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getNomeImovelOuClienteUsuario(), 40));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 40));
				}

				// 7 Matrícula do Imóvel
				if(helper.getIdImovel() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(Util.retornaMatriculaImovelFormatada(helper.getIdImovel()),
									9));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 9));
				}

				// 8 Nome do Imóvel ou Nome do Cliente Usuário Replicado
				if(helper.getNomeImovelOuClienteUsuario() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getNomeImovelOuClienteUsuario(), 40));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 40));
				}

				// 9 Matrícula do Imóvel Replicado
				if(helper.getIdImovel() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(Util.retornaMatriculaImovelFormatada(helper.getIdImovel()),
									9));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 9));
				}

				// 10 Endereço do Imóvel - Parte 1
				if(helper.getEnderecoParte1() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getEnderecoParte1(), 53));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 53));
				}

				// 11 Endereço do Imóvel - Parte 1 Replicado
				if(helper.getEnderecoParte1() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getEnderecoParte1(), 53));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 53));
				}

				// 12 Endereço do Imóvel - Parte 2
				if(helper.getEnderecoParte2() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getEnderecoParte2(), 53));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 53));
				}

				// 13 Endereço do Imóvel - Parte 2 Replicado
				if(helper.getEnderecoParte2() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getEnderecoParte2(), 53));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 53));
				}

				// 14 Local
				if(helper.getNomeLocalidade() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getNomeLocalidade(), 35));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 35));
				}

				// 15 Setor
				if(helper.getSetor() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getSetor().toString(), 2));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 2));
				}

				// 16 Quadra
				if(helper.getQuadra() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getQuadra().toString(), 4));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 4));
				}

				// 17 lote
				if(helper.getLote() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getLote().toString(), 4));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 4));
				}

				// 18 Local Replicado
				if(helper.getNomeLocalidade() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getNomeLocalidade(), 35));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 35));
				}

				// 19 Setor Replicado
				if(helper.getSetor() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getSetor().toString(), 2));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 2));
				}

				// 20 Quadra Replicado
				if(helper.getQuadra() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getQuadra().toString(), 4));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 4));
				}

				// 21 lote Replicado
				if(helper.getLote() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getLote().toString(), 4));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 4));
				}

				// 22 Número de Economias Imóvel
				if(helper.getNumeroEconomiasImovel() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getNumeroEconomiasImovel().toString(), 3));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 3));
				}

				// 23 Categoria do Imóvel
				if(helper.getCategoriaImovel() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getCategoriaImovel(), 5));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 5));
				}

				// 24 espaços em branco
				documentoOrdemCorte.append(Util.completaString("", 6));

				// 25 Número de Economias Imóvel Replicado
				if(helper.getNumeroEconomiasImovel() != null){
					documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getNumeroEconomiasImovel().toString(), 3));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 3));
				}

				// 26 Categoria do Imóvel Replicado
				if(helper.getCategoriaImovel() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getCategoriaImovel(), 5));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 5));
				}

				// 27 espaços em branco
				documentoOrdemCorte.append(Util.completaString("", 6));

				// Emitir os dados dos itens de conta, iniciando na posição 473 e terminando na
				// posição 868 da linha, num total de 396 caracteres. Caso a quantidade de itens de
				// conta selecionados seja inferior a 6 (seis), preencher com espaços em branco as
				// posições restantes
				StringBuffer itensConta = new StringBuffer();
				BigDecimal valorTotalItensContaDesconsiderados = new BigDecimal(0);

				int contadorItens = 0;
				int limiteItens = 6;
				if(!Util.isVazioOrNulo(helper.getColecaoItemConta())){
					for(CobrancaDocumentoItem cobrancaDocumentoItem : helper.getColecaoItemConta()){

						// CDIT_VLITEMCOBRADO mais CDIT_VLACRESCIMOS (preencher os zeros à esquerda
						// com espaços em branco)
						BigDecimal valorItemConta = cobrancaDocumentoItem.getValorItemCobrado().add(
										cobrancaDocumentoItem.getValorAcrescimos());

						if(contadorItens < limiteItens){
							// [UC0261 - Obter Dígito Verificador Módulo 11] passando o número
							// formado
							// pelo seguinte agrupamento: 1. Matrícula do Imóvel (IMOV_ID), 8
							// dígitos;2.
							// Mês de Referência da Conta (extrair o mês de CNTA_AMREFERENCIACONTA
							// (AAAA/MM)), 2 dígitos;3. Ano de Referência da Conta (extrair o ano de
							// CNTA_AMREFERENCIACONTA (AAAA/MM)), 4 dígitos.
							String digitoVerificador = Util.obterDigitoVerificadorModulo11(
											helper.getIdImovel().toString()
															+ Util.obterMes(cobrancaDocumentoItem.getContaGeral().getConta()
																			.getReferencia())
															+ Util.obterAno(cobrancaDocumentoItem.getContaGeral().getConta()
																			.getReferencia())).toString();

							// Valor Formatado do item de conta
							String valorItemContaFormatado = Util.formatarMoedaReal(valorItemConta);

							// Referência do Item de Conta
							itensConta.append(Util.completaString(
											Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()),
											7));

							// traço
							itensConta.append(Util.completaString("-", 1));

							// Dígito Verificador da Conta
							itensConta.append(Util.completaString(digitoVerificador, 1));

							// Vencimento do Item de Conta
							itensConta.append(Util.completaString(
											Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()),
											10));

							// Valor do Item de Conta
							itensConta.append(Util.completaStringComEspacoAEsquerda(valorItemContaFormatado, 14));

							// Referência do Item de Conta Replicado
							itensConta.append(Util.completaString(
											Util.formatarMesAnoReferencia(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()),
											7));

							// traço Replicado
							itensConta.append(Util.completaString("-", 1));

							// Dígito Verificador da Conta Replicado
							itensConta.append(Util.completaString(digitoVerificador, 1));

							// Vencimento do Item de Conta Replicado
							itensConta.append(Util.completaString(
											Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()),
											10));

							// Valor do Item de Conta Replicado
							itensConta.append(Util.completaStringComEspacoAEsquerda(valorItemContaFormatado, 14));

							contadorItens++;
						}else{
							valorTotalItensContaDesconsiderados = valorTotalItensContaDesconsiderados.add(valorItemConta);
						}
					}
				}

				// Caso a quantidade de itens de conta selecionados seja inferior a 6 (seis),
				// preencher com espaços em branco as posições restantes.
				documentoOrdemCorte.append(Util.completaString(itensConta.toString(), 396));

				itensConta = null;

				// Valor Formatado do item de conta
				String valorTotalItensContaDesconsideradosFormatado = Util.formatarMoedaReal(valorTotalItensContaDesconsiderados);

				// 88 Valor dos Itens de Conta que excedeu o limite de 6 (seis) contas
				documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(valorTotalItensContaDesconsideradosFormatado, 14));

				// 89 Valor dos Itens de Conta que excedeu o limite de 6 (seis) contas Replicado
				documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(valorTotalItensContaDesconsideradosFormatado, 14));

				// 90 Valor do Documento de Cobrança
				if(helper.getValorDocumentoCobranca() != null){
					// Valor Formatado do
					String valorDocumentoCobrancaFormatado = Util.formatarMoedaReal(helper.getValorDocumentoCobranca());

					documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(valorDocumentoCobrancaFormatado, 14));

					// 91 Valor do Documento de Cobrança Replicado
					documentoOrdemCorte.append(Util.completaStringComEspacoAEsquerda(valorDocumentoCobrancaFormatado, 14));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 28));
				}

				// 92 Número do Hidrômetro
				if(helper.getNumeroHidrometro() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getNumeroHidrometro(), 10));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 93 Perfil do Imóvel
				if(helper.getPerfilImovel() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getPerfilImovel(), 8));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 8));
				}

				// 94 Sequência de Impressão
				documentoOrdemCorte.append(Util.completarStringZeroEsquerda(helper.getSequencialImpressao() + "", 5));

				// 95 Fone do Cliente Usuário do Imóvel
				if(helper.getFoneCliente() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getFoneCliente().replace('.', '-'), 10));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 96 Tipo do Registro do Corte
				if(helper.getDescricaoCorteRegistroTipo() != null){
					documentoOrdemCorte.append(Util.completaString(helper.getDescricaoCorteRegistroTipo(), 10));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 97 Data de Apresentação do Aviso de Corte emitido previamente ao Corte
				if(helper.getDataApresentacaoAviso() != null){
					documentoOrdemCorte.append(Util.formatarData(helper.getDataApresentacaoAviso()));
				}else{
					documentoOrdemCorte.append(Util.completaString("", 10));
				}

				// 98 *
				documentoOrdemCorte.append("*");

				documentoOrdemCorte.append(System.getProperty("line.separator"));

				// 2.2.2.2. Atualizar o seqüencial de impressão do documento de cobrança - atualizar
				// a tabela COBRANCA_DOCUMENTO com os seguintes valores
				// CBDO_NNSEQUENCIALIMPRESSAO Sequência de Impressão (item 94)
				// CBDO_TMULTIMAALTERACAO Data/Hora corrente

				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento
								.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.ID, helper.getIdCobrancaDocumento()));

				Collection<CobrancaDocumento> colecaoCobrancaDocumento = Fachada.getInstancia().pesquisar(filtroCobrancaDocumento,
								CobrancaDocumento.class.getName());

				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento);

				cobrancaDocumento.setSequencialImpressao(Integer.valueOf(helper.getSequencialImpressao()));
				cobrancaDocumento.setUltimaAlteracao(new Date());

				Fachada.getInstancia().atualizar(cobrancaDocumento);

			}

			// 2.2.3. Gerar a última linha de controle do arquivo TXT, conforme layout abaixo:
			documentoOrdemCorte.append(Util.completarStringZeroEsquerda("", 8));
			documentoOrdemCorte.append(Util.completaString("", 36));
			documentoOrdemCorte.append(Util.completaString("FINAL  ARQUIVO - CAUFEOC", 24));
			documentoOrdemCorte.append(Util.completaString("", 874));
			documentoOrdemCorte.append(Util.completaString("99999", 5));
			documentoOrdemCorte.append(Util.completaString("", 30));
			documentoOrdemCorte.append(Util.completaString("*", 1));

		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}

		return documentoOrdemCorte;

	}

	/**
	 * @param colecaoEmitirDocumentoOrdemCorteModelo3Helper
	 * @return
	 * @throws ControladorException
	 */
	private Collection<EmitirDocumentoOrdemCorteModelo3Helper> ordenarColecaoHelpersEmitirDocumentoOrdemCorteModelo3(
					Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoEmitirDocumentoOrdemCorteModelo3Helper)
					throws ControladorException{

		Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoRetorno = new ArrayList<EmitirDocumentoOrdemCorteModelo3Helper>();
		Map<Integer, EmitirDocumentoOrdemCorteModelo3Helper> colecaoHashMap = new HashMap<Integer, EmitirDocumentoOrdemCorteModelo3Helper>();

		try{
			// Ordenar por mais de um campo
			List camposOrdenados = new ArrayList();
			camposOrdenados.add(new BeanComparator("idGerenciaRegional"));
			camposOrdenados.add(new BeanComparator("idLocalidade"));
			camposOrdenados.add(new BeanComparator("idPerfilImovel"));
			camposOrdenados.add(new BeanComparator("idCorteRegistroTipo"));
			camposOrdenados.add(new BeanComparator("setor"));
			camposOrdenados.add(new BeanComparator("quadra"));
			camposOrdenados.add(new BeanComparator("lote"));
			camposOrdenados.add(new BeanComparator("subLote"));
			camposOrdenados.add(new BeanComparator("enderecoFormatado"));
			// camposOrdenados.add(new BeanComparator("enderecoTipoLogradouro"));
			// camposOrdenados.add(new BeanComparator("enderecoNomeLogradouro"));
			// camposOrdenados.add(new BeanComparator("enderecoTituloLogradouro"));
			// camposOrdenados.add(new BeanComparator("enderecoReferencia"));
			// camposOrdenados.add(new BeanComparator("enderecoNumeroImovel"));
			// camposOrdenados.add(new BeanComparator("enderecoComplemento"));
			// camposOrdenados.add(new BeanComparator("enderecoBairro"));
			// camposOrdenados.add(new BeanComparator("enderecoCodigoCEP"));

			ComparatorChain esquemaOrdenacao = new ComparatorChain(camposOrdenados);
			Collections.sort((List) colecaoEmitirDocumentoOrdemCorteModelo3Helper, esquemaOrdenacao);

			// Gerar sequencial das contas antes da ordenação
			int totalContas = colecaoEmitirDocumentoOrdemCorteModelo3Helper.size();
			int sequencialAtual = 1;

			for(EmitirDocumentoOrdemCorteModelo3Helper helper : colecaoEmitirDocumentoOrdemCorteModelo3Helper){

				helper.setSequencialImpressao(sequencialAtual);
				helper.setTotalContasImpressao(totalContas);
				sequencialAtual++;
			}
			// Fim Gerar Sequencial

			Integer contador = Integer.valueOf(1);
			for(EmitirDocumentoOrdemCorteModelo3Helper helper : colecaoEmitirDocumentoOrdemCorteModelo3Helper){
				colecaoHashMap.put(contador, helper);
				contador++;
			}

			Integer metade = null;
			int resto = colecaoEmitirDocumentoOrdemCorteModelo3Helper.size() % 2;
			if(resto == 1){
				metade = (colecaoEmitirDocumentoOrdemCorteModelo3Helper.size() / 2) + 1;
			}else{
				metade = colecaoEmitirDocumentoOrdemCorteModelo3Helper.size() / 2;
			}

			for(int i = 1; i <= metade; i++){
				colecaoRetorno.add(colecaoHashMap.get(Integer.valueOf(i)));
				if(colecaoHashMap.get(Integer.valueOf(i) + metade) != null){
					colecaoRetorno.add(colecaoHashMap.get(Integer.valueOf(i) + metade));
				}
			}

		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoRetorno;

	}

	/**
	 * @param colecaoEmitirDocumentoOrdemCorteModelo3Helper
	 * @throws ControladorException
	 */
	private void completarEmitirDocumentoOrdemCorteModelo3Helper(
					Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoEmitirDocumentoOrdemCorteModelo3Helper)
					throws ControladorException{

		try{

			// SistemaParametro sistemaParametro =
			// getControladorUtil().pesquisarParametrosDoSistema();

			for(EmitirDocumentoOrdemCorteModelo3Helper helper : colecaoEmitirDocumentoOrdemCorteModelo3Helper){

				// OC994674 apenas o valor de CBDO_TMEMISSAO
				// Prepara a data de apresentacao do CORTE - DATE(CBDO_TMEMISSAO) mais
				// CACM_QTDIASREALIZACAO, caso CACM_ID da tabela COBRANCA_DOCUMENTO esteja com o
				// valor diferente de nulo; caso contrário, DATE(CBDO_TMEMISSAO) mais
				// CBAC_QTDIASREALIZACAO da tabela COBRANCA_ACAO com CBAC_ID=CBAC_ID da tabela
				// COBRANCA_DOCUMENTO
				// if(helper.getIdCobrancaAcaoAtividadeComando() != null){
				// helper.setDataApresentacaoCorte(Util.adicionarNumeroDiasDeUmaData(helper.getDataApresentacaoCorte(),
				// helper
				// .getQuantidadeDiasRealizacaoAtividadeComando().intValue()));
				// }else if(helper.getQuantidadeDiasRealizacaoCobrancaAcao() != null){
				// helper.setDataApresentacaoCorte(Util.adicionarNumeroDiasDeUmaData(helper.getDataApresentacaoCorte(),
				// helper
				// .getQuantidadeDiasRealizacaoCobrancaAcao().intValue()));
				// }

				// Prepara o nome do cliente caso o imovel nao tenha nome - IMOV_NMIMOVEL da tabela
				// IMOVEL com IMOV_ID=IMOV_ID da tabela COBRANCA_DOCUMENTO, caso seja diferente de
				// nulo; Caso contrário, CLIE_NMCLIENTE da tabela CLIENTE com CLIE_ID=(CLIE_ID da
				// tabela CLIENTE_IMOVEL com IMOV_ID=(IMOV_ID da tabela IMOVEL com IMOV_ID=IMOV_ID
				// da tabela COBRANCA_DOCUMENTO) e CRTP_ID com o valor correspondente a "usuário" e
				// CLIM_DTRELACAOFIM com o valor nulo)
				if(Util.isVazioOuBranco(helper.getNomeImovelOuClienteUsuario())){
					FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel(FiltroClienteImovel.CLIENTE_NOME);
					filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, helper.getIdImovel()));
					filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
									ClienteRelacaoTipo.USUARIO));
					filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
					filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");

					Collection<ClienteImovel> colecaoClienteImovel = Fachada.getInstancia().pesquisar(filtroClienteImovel,
									ClienteImovel.class.getName());

					if(!Util.isVazioOrNulo(colecaoClienteImovel)){
						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(colecaoClienteImovel);

						if(clienteImovel.getCliente() != null && !Util.isVazioOuBranco(clienteImovel.getCliente().getNome())){
							helper.setNomeImovelOuClienteUsuario(clienteImovel.getCliente().getNome());

							// CFON_NNFONE da tabela CLIENTE_FONE com CFON_ICFONEPADRAO=1 (um) e
							// CLIE_ID=(CLIE_ID da tabela CLIENTE_IMOVEL com IMOV_ID=(IMOV_ID da
							// tabela COBRANCA_DOCUMENTO) e CLIM_DTRELACAOFIM=nulo e
							// CRTP_ID=(CRTP_ID da tabela CLIENTE_RELACAO_TIPO com
							// CRTP_DSCLIENTERELACAOTIPO com o valor correspondente a "usuário"))
							FiltroClienteFone filtroClienteFone = new FiltroClienteFone(FiltroClienteFone.INDICADOR_TELEFONE_PADRAO);
							filtroClienteFone.adicionarParametro(new ParametroSimples(FiltroClienteFone.CLIENTE_ID, clienteImovel
											.getCliente().getId()));

							Collection<ClienteFone> colecaoClienteFone = Fachada.getInstancia().pesquisar(filtroClienteFone,
											ClienteFone.class.getName());

							if(!Util.isVazioOrNulo(colecaoClienteFone)){
								helper.setFoneCliente(Util.formatarFone(((ClienteFone) Util.retonarObjetoDeColecao(colecaoClienteFone))
												.getTelefone()));
							}
						}
					}
				}

				// Pesquisa o endereco e seta no atributo enderecoParte1 (logo após esse será divido
				// entre a parte2 caso o ultrapasse o tamanho permitido)
				// Endereço do imóvel
				Object[] arrayDadosEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoLista(helper.getIdImovel());

				String enderecoFormatado = (String) arrayDadosEnderecoImovel[0];
				Imovel imovel = (Imovel) arrayDadosEnderecoImovel[4];

				if(enderecoFormatado != null){
					helper.setEnderecoFormatado(enderecoFormatado);
				}else{
					helper.setEnderecoFormatado("");
				}

				if(imovel.getLogradouroBairro() != null && imovel.getLogradouroBairro().getBairro() != null
								&& !Util.isVazioOuBranco(imovel.getLogradouroBairro().getBairro().getNome())){
					helper.setEnderecoBairro(imovel.getLogradouroBairro().getBairro().getNome());
				}else{
					helper.setEnderecoBairro("");
				}

				if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getCep() != null
								&& imovel.getLogradouroCep().getCep().getCodigo() != null){
					helper.setEnderecoCodigoCEP(Util.formatarCEP(imovel.getLogradouroCep().getCep().getCodigo().toString()));
				}else{
					helper.setEnderecoCodigoCEP("");
				}

				if(!Util.isVazioOuBranco(imovel.getComplementoEndereco())){
					helper.setEnderecoComplemento(imovel.getComplementoEndereco());
				}else{
					helper.setEnderecoComplemento("");
				}

				if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getLogradouro() != null
								&& !Util.isVazioOuBranco(imovel.getLogradouroCep().getLogradouro().getNome())){
					helper.setEnderecoNomeLogradouro(imovel.getLogradouroCep().getLogradouro().getNome());
				}else{
					helper.setEnderecoNomeLogradouro("");
				}

				if(!Util.isVazioOuBranco(imovel.getNumeroImovel())){
					helper.setEnderecoNumeroImovel(imovel.getNumeroImovel());
				}else{
					helper.setEnderecoNumeroImovel("");
				}

				if(imovel.getEnderecoReferencia() != null && !Util.isVazioOuBranco(imovel.getEnderecoReferencia().getDescricao())){
					helper.setEnderecoReferencia(imovel.getEnderecoReferencia().getDescricao());
				}else{
					helper.setEnderecoReferencia("");
				}

				if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getLogradouro() != null
								&& imovel.getLogradouroCep().getLogradouro().getLogradouroTipo() != null
								&& !Util.isVazioOuBranco(imovel.getLogradouroCep().getLogradouro().getLogradouroTipo().getDescricao())){
					helper.setEnderecoTipoLogradouro(imovel.getLogradouroCep().getLogradouro().getLogradouroTipo().getDescricao());
				}else{
					helper.setEnderecoTipoLogradouro("");
				}

				if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getLogradouro() != null
								&& imovel.getLogradouroCep().getLogradouro().getLogradouroTitulo() != null
								&& !Util.isVazioOuBranco(imovel.getLogradouroCep().getLogradouro().getLogradouroTitulo().getDescricao())){
					helper.setEnderecoTituloLogradouro(imovel.getLogradouroCep().getLogradouro().getLogradouroTitulo().getDescricao());
				}else{
					helper.setEnderecoTituloLogradouro("");
				}

				helper.organizarCamposEndereco();

				// Categoria do Imóvel - Caso o imóvel possua mais de uma categoria, atribuir o
				// valor "MISTA"; caso contrário, atribuir a descrição da categoria
				// (CATG_DSCATEGORIA da tabela CATEGORIA com CATG_ID=Id da categoria retornada
				// [UC0108] Obter Quantidade de Economias por Categoria
				Collection<Categoria> colecaoCategoriasImovel = this.getControladorImovel().obterQuantidadeEconomiasCategoria(
								new Imovel(helper.getIdImovel()));

				if(!Util.isVazioOrNulo(colecaoCategoriasImovel)){
					if(colecaoCategoriasImovel.size() == 1){
						Categoria categoria = (Categoria) Util.retonarObjetoDeColecao(colecaoCategoriasImovel);
						helper.setCategoriaImovel(categoria.getDescricao());
					}else{
						helper.setCategoriaImovel(ConstantesSistema.CATEGORIA_MISTA);
					}
				}

				// Dados dos primeiros 6 (seis) itens de conta associados ao documento de cobrança
				// (selecionar a partir da tabela COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da
				// tabela COBRANCA_DOCUMENTO) e CNTA_ID=CNTA_ID da tabela CONTA, ordenando pela
				// referência da conta (CNTA_AMREFERENCIACONTA) em ordem crescente).
				CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
				cobrancaDocumento.setId(helper.getIdCobrancaDocumento());
				Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = this.repositorioCobranca
								.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
					helper.setColecaoItemConta(colecaoCobrancaDocumentoItem);
				}

				// Obtem a Data de Apresentação do Aviso de Corte emitido previamente ao Corte
				// CBDO_DTSITUACAOACAO da tabela COBRANCA_DOCUMENTO com IMOV_ID=Matrícula do Imóvel
				// (item 1) e CBAC_ID=(CBAC_ID da tabela COBRANCA_ACAO com CBAC_DSCOBRANCAACAO com o
				// valor correspondente a "Aviso de Corte") e CAST_ID=(CAST_ID da tabela
				// COBRANCA_ACAO_SITUACAO com CAST_DSSITUACAOACAO com o valor correspondente a
				// "ENTREGUE") e DATE(CBDO_TMEMISSAO) maior que data corrente menos
				// (CBAC_NNDIASMINIMOACAOPRECEDENTE da tabela COBRANCA_ACAO com CBAC_ID=CBAC_ID da
				// tabela COBRANCA_ACAO com CBAC_DSCOBRANCAACAO com o valor correspondente a
				// "Corte") e DATE(CBDO_TMEMISSAO) maior ou igual à data corrente menos
				// (CBAC_NNDIASVALIDADE da tabela COBRANCA_ACAO com CBAC_ID=CBAC_ID da tabela
				// COBRANCA_ACAO com CBAC_DSCOBRANCAACAO com o valor correspondente a "Aviso de
				// Corte")
				Date dataApresentacaoAviso = this.repositorioCobranca.obterDataApresentacaoAvisoCorte(helper.getIdImovel());
				helper.setDataApresentacaoAviso(dataApresentacaoAviso);

			}

		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * @param colecaoCobrancaDocumento
	 * @return
	 */
	private Collection<EmitirDocumentoOrdemCorteModelo3Helper> formatarEmitirDocumentoOrdemCorteModelo3Helper(
					Collection colecaoCobrancaDocumento){

		Collection<EmitirDocumentoOrdemCorteModelo3Helper> colecaoDocumentoOrdemCorteModelo3Helper = new ArrayList();

		if(colecaoCobrancaDocumento != null){

			Iterator dadosColecaoDocumentoCobranca = colecaoCobrancaDocumento.iterator();
			while(dadosColecaoDocumentoCobranca.hasNext()){
				Object[] parametros = (Object[]) dadosColecaoDocumentoCobranca.next();

				EmitirDocumentoOrdemCorteModelo3Helper helper = new EmitirDocumentoOrdemCorteModelo3Helper();

				// Id do documento de cobranca
				if(parametros[0] != null){
					helper.setIdCobrancaDocumento((Integer) parametros[0]);
				}

				// Id do imovel
				if(parametros[1] != null){
					helper.setIdImovel((Integer) parametros[1]);
				}

				// Data apresentacao corte
				if(parametros[2] != null){
					helper.setDataApresentacaoCorte((Date) parametros[2]);
				}

				// Quantidade dias realizacao atividade comando
				if(parametros[3] != null){
					helper.setQuantidadeDiasRealizacaoAtividadeComando((Short) parametros[3]);
				}

				// Quantidade dias realizacao atividade comando
				if(parametros[4] != null){
					helper.setQuantidadeDiasRealizacaoCobrancaAcao((Short) parametros[4]);
				}

				// numero Sequencial Documento
				if(parametros[5] != null){
					helper.setNumeroDocumentoCobranca((Integer) parametros[5]);
				}

				// nome imovel
				if(parametros[6] != null){
					helper.setNomeImovelOuClienteUsuario((String) parametros[6]);
				}

				// id localidade
				if(parametros[7] != null){
					helper.setIdLocalidade((Integer) parametros[7]);
				}

				// nome localidade
				if(parametros[8] != null){
					helper.setNomeLocalidade((String) parametros[8]);
				}

				// codigo setor comercial
				if(parametros[9] != null){
					helper.setSetor((Integer) parametros[9]);
				}

				// numero quadra
				if(parametros[10] != null){
					helper.setQuadra((Integer) parametros[10]);
				}

				// numero quadra
				if(parametros[11] != null){
					helper.setLote((Short) parametros[11]);
				}

				// numero economias imovel
				if(parametros[12] != null){
					helper.setNumeroEconomiasImovel((Short) parametros[12]);
				}

				// valor documento cobranca
				if(parametros[13] != null){
					helper.setValorDocumentoCobranca((BigDecimal) parametros[13]);
				}

				// numero hidrometro
				if(parametros[14] != null){
					helper.setNumeroHidrometro((String) parametros[14]);
				}

				// data retirada hidrometro
				if(parametros[15] != null){
					helper.setDataRetiradaHidrometro((Date) parametros[15]);
				}

				// perfil imovel
				if(parametros[16] != null){
					helper.setPerfilImovel((String) parametros[16]);
				}

				// tipo de registro corte
				if(parametros[17] != null){
					helper.setDescricaoCorteRegistroTipo((String) parametros[17]);
				}

				// id gerencia regional
				if(parametros[18] != null){
					helper.setIdGerenciaRegional((Integer) parametros[18]);
				}

				// id perfil imovel
				if(parametros[19] != null){
					helper.setIdPerfilImovel((Integer) parametros[19]);
				}

				// id tipo de registro corte
				if(parametros[20] != null){
					helper.setIdCorteRegistroTipo(((Integer) parametros[20]).toString());
				}else{
					helper.setIdCorteRegistroTipo("");
				}

				// id tipo de registro corte
				if(parametros[21] != null){
					helper.setSubLote((Short) parametros[21]);
				}

				// id tipo de registro corte
				if(parametros[22] != null){
					helper.setIdCobrancaAcaoAtividadeComando((Integer) parametros[22]);
				}

				// ID Ordem Servico
				if(parametros[23] != null){
					helper.setIdOrdemServico((Integer) parametros[23]);
				}

				colecaoDocumentoOrdemCorteModelo3Helper.add(helper);
				helper = null;

			}
		}

		return colecaoDocumentoOrdemCorteModelo3Helper;

	}

	/**
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @data 02/04/2007
	 * @param
	 * @return void
	 */
	public void emitirAvisoDebito(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario) throws ControladorException{

		List<Object> colecaoEmitirAvisoCobrancaHelper = new ArrayList<Object>();
		Collection colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		// long ini = 0, dif = 0;

		// ini = System.currentTimeMillis();

		colecaoCobrancaDocumento = pesquisarTodosCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
						idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca);

		// try {
		//
		// } catch (ErroRepositorioException ex) {
		// ex.printStackTrace();
		// throw new ControladorException("erro.sistema", ex);
		// }

		// dif = System.currentTimeMillis() - ini;
		// LOGGER.info("0 - ############################## -> " + dif);
		// ini = System.currentTimeMillis();

		if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){

			LOGGER.info("QUANTIDADE DOC COBRANCA PRA EMITIR = " + colecaoCobrancaDocumento.size());

			int sequencialImpressao = 0;

			Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento.iterator();
			while(iteratorCobrancaDocumento.hasNext()){

				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

				EmitirAvisoCobrancaHelper emitirAvisoCobrancaHelper = new EmitirAvisoCobrancaHelper();
				Collection colecaoCobrancaDocumentoItemConta = null;
				Collection colecaoCobrancaDocumentoItemGuiaPagamento = null;
				Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoDebitoACobrar = null;

				BigDecimal valorTotal = BigDecimal.ZERO;
				BigDecimal debitosAnteriores = BigDecimal.ZERO;

				// ------------------------------------------------------------------------------------
				// gera o numero sequencial da impressao
				int situacao = 0;
				sequencialImpressao++;
				int metadeColecao = 0;
				if(colecaoCobrancaDocumento.size() % 2 == 0){
					metadeColecao = colecaoCobrancaDocumento.size() / 2;
				}else{
					metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				}
				while(situacao < 2){
					if(situacao == 0){
						situacao = 1;
						cobrancaDocumento.setSequencialImpressao(this.atualizaSequencial(sequencialImpressao, situacao, metadeColecao));
					}else{
						situacao = 2;
						cobrancaDocumento.setSequencialImpressao(this.atualizaSequencial(sequencialImpressao, situacao, metadeColecao));
					}
				}
				// ------------------------------------------------------------------------------------

				if(cobrancaDocumento != null){
					try{

						// ini = System.currentTimeMillis();

						// pesquisa todas as contas, debitos e guias
						colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
										.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						// dif = System.currentTimeMillis() - ini;
						// LOGGER.info("1 - ############################## -> " + dif);
						// ini = System.currentTimeMillis();

						if(colecaoCobrancaDocumentoItemConta == null){

							// ini = System.currentTimeMillis();

							colecaoCobrancaDocumentoItemGuiaPagamento = this.repositorioCobranca
											.selecionarDadosCobrancaDocumentoItemReferenteGuiaPagamento(cobrancaDocumento);

							// dif = System.currentTimeMillis() - ini;
							// LOGGER.info("2 - ############################## -> " + dif);
							// ini = System.currentTimeMillis();
						}

						if(colecaoCobrancaDocumentoItemConta == null && colecaoCobrancaDocumentoItemGuiaPagamento == null){

							// ini = System.currentTimeMillis();

							colecaoCobrancaDocumentoDebitoACobrar = this.repositorioCobranca
											.selecionarCobrancaDocumentoItemReferenteDebitoACobrar(cobrancaDocumento);

							// dif = System.currentTimeMillis() - ini;
							// LOGGER.info("3 - ############################## -> " + dif);
							// ini = System.currentTimeMillis();
						}

					}catch(ErroRepositorioException ex){
						ex.printStackTrace();
						throw new ControladorException("erro.sistema", ex);
					}

					// carregando os dados no helper do relatorio de aviso de debito
					emitirAvisoCobrancaHelper.setMatricula(cobrancaDocumento.getImovel().getIdParametrizado());

					// // ini = System.currentTimeMillis();

					// nomeCliente =
					// repositorioClienteImovel.retornaNomeCliente(cobrancaDocumento.getImovel().getId(),
					// ClienteRelacaoTipo.USUARIO);
					Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());

					// dif = System.currentTimeMillis() - ini;
					// LOGGER.info("4 - ############################## -> " + dif);
					// ini = System.currentTimeMillis();

					if(cliente != null){
						emitirAvisoCobrancaHelper.setNomeCliente(cliente.getNome());
					}else{
						emitirAvisoCobrancaHelper.setNomeCliente("");
					}

					emitirAvisoCobrancaHelper.setEndereco(cobrancaDocumento.getImovel().getEnderecoFormatadoAbreviadoSemBairro());
					emitirAvisoCobrancaHelper.setBairro(cobrancaDocumento.getImovel().getLogradouroBairro().getBairro().getNome());
					if(cobrancaDocumento.getImovel().getLigacaoAgua() != null
									&& cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
						emitirAvisoCobrancaHelper.setHidrometro(cobrancaDocumento.getImovel().getLigacaoAgua()
										.getHidrometroInstalacaoHistorico().getNumeroHidrometro());
					}else{
						emitirAvisoCobrancaHelper.setHidrometro("");
					}

					emitirAvisoCobrancaHelper.setAcaoCobranca(acaoCobranca.getId().toString());

					String roteiro = cobrancaDocumento.getImovel().getSetorComercial().getId() + "-"
									+ cobrancaDocumento.getImovel().getRota().getId();

					if(cobrancaDocumento.getImovel().getNumeroSequencialRota() != null){
						roteiro = roteiro + "-" + cobrancaDocumento.getImovel().getNumeroSequencialRota();
					}

					emitirAvisoCobrancaHelper.setRoteiro(roteiro);

					emitirAvisoCobrancaHelper.setInscricao(cobrancaDocumento.getImovel().getInscricaoFormatada());

					Calendar dataAtual = Calendar.getInstance();
					Integer horas = dataAtual.get(Calendar.HOUR_OF_DAY);
					Integer minutos = dataAtual.get(Calendar.MINUTE);
					Integer segundos = dataAtual.get(Calendar.SECOND);
					emitirAvisoCobrancaHelper.setHoraImpressao("" + horas + ":" + minutos + ":" + segundos);
					emitirAvisoCobrancaHelper.setDataImpressao(Util.formatarData(dataAtual.getTime()));

					Util.adicionarNumeroDiasDeUmaData(dataAtual.getTime(), Integer.valueOf(acaoCobranca.getNumeroDiasValidade()).intValue());
					emitirAvisoCobrancaHelper.setDataComparecimento(Util.formatarData(dataAtual.getTime()));

					if(colecaoCobrancaDocumentoItemConta != null){
						// contas
						int limitador15Itens = 1;
						Collection<String> mesAno = new ArrayList<String>();
						Collection<String> vencimento = new ArrayList<String>();
						Collection<BigDecimal> valor = new ArrayList<BigDecimal>();

						Iterator<CobrancaDocumentoItem> itContas = colecaoCobrancaDocumentoItemConta.iterator();
						Integer mesAnoMaisAnterior = 300012;
						boolean teveConta = false;
						while(itContas.hasNext()){
							CobrancaDocumentoItem cobrancaDocumentoItem = itContas.next();
							teveConta = true;
							if(limitador15Itens <= 15){
								mesAno.add(Util.formatarAnoMesSemBarraParaMesAnoComBarra(cobrancaDocumentoItem.getContaGeral().getConta()
												.getReferencia()));
								vencimento.add(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
								valor.add(cobrancaDocumentoItem.getContaGeral().getConta().getValorTotal());
							}else{
								debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getContaGeral().getConta().getValorTotal());
							}
							if(Util.compararAnoMesReferencia(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(),
											mesAnoMaisAnterior, "<")){
								mesAnoMaisAnterior = cobrancaDocumentoItem.getContaGeral().getConta().getReferencia();
							}
							valorTotal = valorTotal.add(cobrancaDocumentoItem.getContaGeral().getConta().getValorTotal());
							limitador15Itens++;
						}

						if(teveConta){
							emitirAvisoCobrancaHelper.setDataDebitoAnterior(Util
											.formatarAnoMesSemBarraParaMesAnoComBarra(mesAnoMaisAnterior));
						}
						emitirAvisoCobrancaHelper.setMesAno(mesAno);
						emitirAvisoCobrancaHelper.setVencimento(vencimento);
						emitirAvisoCobrancaHelper.setValor(valor);

					}else if(colecaoCobrancaDocumentoItemGuiaPagamento != null){
						// guias
						Iterator<CobrancaDocumentoItem> itGuias = colecaoCobrancaDocumentoItemGuiaPagamento.iterator();
						while(itGuias.hasNext()){
							CobrancaDocumentoItem cobrancaDocumentoItem = itGuias.next();
							valorTotal = valorTotal.add(cobrancaDocumentoItem.getValorItemCobrado());
							debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getValorItemCobrado());
						}
					}else if(colecaoCobrancaDocumentoDebitoACobrar != null){
						// debitos a cobrar
						Iterator<CobrancaDocumentoItem> itDebACob = colecaoCobrancaDocumentoDebitoACobrar.iterator();
						while(itDebACob.hasNext()){
							CobrancaDocumentoItem cobrancaDocumentoItem = itDebACob.next();
							valorTotal = valorTotal.add(cobrancaDocumentoItem.getDebitoACobrarGeral().getDebitoACobrar().getValorTotal());
							debitosAnteriores = debitosAnteriores.add(cobrancaDocumentoItem.getDebitoACobrarGeral().getDebitoACobrar()
											.getValorTotal());
						}
					}

				}

				emitirAvisoCobrancaHelper.setValorDebitosAnteriores(debitosAnteriores);
				emitirAvisoCobrancaHelper.setValorTotal(valorTotal);

				// ini = System.currentTimeMillis();

				// ------------------------------------------------------------------------------------------------------------
				// obtendo o codigo de barras
				String representacaoNumericaCodBarra = getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
								Integer.valueOf(PagamentoTipo.PAGAMENTO_TIPO_COBANCA_MATRICULA_IMOVEL), valorTotal,
								cobrancaDocumento.getImovel().getLocalidade().getId(), cobrancaDocumento.getImovel().getId(), null, null,
								null, null, cobrancaDocumento.getNumeroSequenciaDocumento() + "",
								cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, null, null, null);

				// dif = System.currentTimeMillis() - ini;
				// LOGGER.info("5 - ############################## -> " + dif);
				// ini = System.currentTimeMillis();

				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + "-"
								+ representacaoNumericaCodBarra.substring(11, 12) + " " + representacaoNumericaCodBarra.substring(12, 23)
								+ "-" + representacaoNumericaCodBarra.substring(23, 24) + " "
								+ representacaoNumericaCodBarra.substring(24, 35) + "-" + representacaoNumericaCodBarra.substring(35, 36)
								+ " " + representacaoNumericaCodBarra.substring(36, 47) + "-"
								+ representacaoNumericaCodBarra.substring(47, 48);
				emitirAvisoCobrancaHelper.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);

				String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
								+ representacaoNumericaCodBarra.substring(12, 23) + representacaoNumericaCodBarra.substring(24, 35)
								+ representacaoNumericaCodBarra.substring(36, 47);
				emitirAvisoCobrancaHelper.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);

				colecaoEmitirAvisoCobrancaHelper.add(emitirAvisoCobrancaHelper);
				emitirAvisoCobrancaHelper = null;
			}

			// ------------------------------------------------------------------------------------------------------------------------------

			// Monta os relatorios em blocos de 1000
			if(colecaoEmitirAvisoCobrancaHelper != null && !colecaoEmitirAvisoCobrancaHelper.isEmpty()){

				LOGGER.info("QUANTIDADE TOTAL = " + colecaoEmitirAvisoCobrancaHelper.size());

				Collection<Collection<Object>> colecaoParcialEmitirAvisoCobrancaHelper = this.dividirColecaoEmBlocos(
								colecaoEmitirAvisoCobrancaHelper, ConstantesSistema.QUANTIDADE_LIMITE_RELATORIOS_POR_ARQUIVO);

				int contadorBlocoContasAEmitir = 1;
				int totalBlocosContasAEmitir = (Util.dividirArredondarResultado(colecaoEmitirAvisoCobrancaHelper.size(),
								ConstantesSistema.QUANTIDADE_BLOCO_IMPRESSOES_EMISSAO_CONTA_FATURAMENTO, BigDecimal.ROUND_CEILING));

				if(totalBlocosContasAEmitir == 0){
					totalBlocosContasAEmitir = 1;
				}

				LOGGER.info("QUANTIDADE BLOCOS = " + colecaoParcialEmitirAvisoCobrancaHelper.size());

				for(Collection bloco : colecaoParcialEmitirAvisoCobrancaHelper){

					Collection<EmitirAvisoCobrancaHelper> tmp = bloco;

					String mensagemArquivo = "PARTE: " + contadorBlocoContasAEmitir + "/" + totalBlocosContasAEmitir;
					RelatorioAvisoDebito relatorioAvisoDebito = new RelatorioAvisoDebito(usuario);
					relatorioAvisoDebito.addParametro("colecaoEmitirAvisoCobrancaHelper", tmp);
					relatorioAvisoDebito.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
					relatorioAvisoDebito.addParametro("descricaoArquivo", mensagemArquivo);

					this.getControladorBatch().iniciarProcessoRelatorio(relatorioAvisoDebito);
					contadorBlocoContasAEmitir++;
				}
			}
		}
	}

	/**
	 * Divide uma coleçao de object de tamanho de acordo com o parametro,
	 * utilizado para limitar a geraçao de relatorios de pdf em xxx itens por arquivo.
	 * 
	 * @param colecao
	 * @param int dlimitando o tamanho da divisao
	 * @return Collection<Collection<Object>>
	 */
	public Collection<Collection<Object>> dividirColecaoEmBlocos(List<Object> colecao, int quantidadeLimitePorArquivo){

		Collection<Collection<Object>> retorno = new ArrayList<Collection<Object>>();
		if(colecao != null && !colecao.isEmpty()){
			while(!colecao.isEmpty()){
				List<Object> colecaoGeracaoParcial = new ArrayList<Object>();
				if(colecao.size() <= quantidadeLimitePorArquivo){
					colecaoGeracaoParcial.addAll(colecao);
				}else{
					colecaoGeracaoParcial.addAll(colecao.subList(0, (quantidadeLimitePorArquivo)));
				}
				retorno.add(colecaoGeracaoParcial);
				colecao.removeAll(colecaoGeracaoParcial);
			}
		}
		return retorno;
	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItemParaConta(StringBuilder cobrancaDocumentoTxt, Collection colecaoCobrancaDocumentoItemConta,
					int quantidadeContas, Integer idAcaoCobranca) throws ControladorException{

		int indicadorEstouro = 0;
		int complementoEspecosBranco = 0;
		// em caso de ser carta de tarifa social não
		// formatar o txt
		if(idAcaoCobranca != null
						&& (!idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
										.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))){
			complementoEspecosBranco = quantidadeContas * 36;
		}else{
			complementoEspecosBranco = quantidadeContas * 25;
		}

		int countImpressao = colecaoCobrancaDocumentoItemConta.size() - (quantidadeContas - 1);

		if(colecaoCobrancaDocumentoItemConta.size() > quantidadeContas){
			indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);

			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append(Util.completaString(""
							+ calcularValorDataVencimentoAnteriorHelper.getCobrancaDocumentoItemNaoAnterior().getContaGeral().getConta()
											.getReferencia(), 6));
			complementoEspecosBranco = complementoEspecosBranco - 6;
			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util.completaString(
							Util.formatarDataSemBarra(calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()), 8));
			complementoEspecosBranco = complementoEspecosBranco - 8;

			String valorItemAnterior = "" + calcularValorDataVencimentoAnteriorHelper.getValorAnterior();
			valorItemAnterior = valorItemAnterior.replace(".", "");
			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItemAnterior));
			complementoEspecosBranco = complementoEspecosBranco - 11;
			// em caso de ser carta de tarifa social não
			// formatar o txt
			if(idAcaoCobranca != null
							&& (!idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
											.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))){
				String valorAcrescimosAnterior = "" + calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior();
				valorAcrescimosAnterior = valorAcrescimosAnterior.replace(".", "");
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorAcrescimosAnterior));
				complementoEspecosBranco = complementoEspecosBranco - 11;
			}

		}

		if(countImpressao <= 1){
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(), 6));
				complementoEspecosBranco = complementoEspecosBranco - 6;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(
								Util.formatarDataSemBarra(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 8));
				complementoEspecosBranco = complementoEspecosBranco - 8;

				String valorItem = "" + cobrancaDocumentoItem.getValorItemCobrado();
				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItem));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// em caso de ser carta de tarifa social não
				// formatar o txt
				if(idAcaoCobranca != null
								&& (!idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
												.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))){
					String valorAcrescimos = "" + cobrancaDocumentoItem.getValorAcrescimos();
					valorAcrescimos = valorAcrescimos.replace(".", "");
					// Valor dos encargos
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorAcrescimos));
					complementoEspecosBranco = complementoEspecosBranco - 11;
				}

			}

		}else{
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while(countImpressao < colecaoCobrancaDocumentoItemConta.size()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta).get(countImpressao);

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(), 6));
				complementoEspecosBranco = complementoEspecosBranco - 6;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(
								Util.formatarDataSemBarra(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 8));
				complementoEspecosBranco = complementoEspecosBranco - 8;

				String valorItem = "" + cobrancaDocumentoItem.getValorItemCobrado();
				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItem));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// em caso de ser carta de tarifa social não
				// formatar o txt
				if(idAcaoCobranca != null
								&& (!idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
												.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))){
					String valorAcrescimos = "" + cobrancaDocumentoItem.getValorAcrescimos();
					valorAcrescimos = valorAcrescimos.replace(".", "");
					// Valor dos encargos
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorAcrescimos));
					complementoEspecosBranco = complementoEspecosBranco - 11;
				}

				countImpressao++;

			}
		}
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(complementoEspecosBranco, ""));
		return indicadorEstouro;
	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItemParaContaComParcelamento(StringBuilder cobrancaDocumentoTxt,
					Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas) throws ControladorException{

		int indicadorEstouro = 0;
		int complementoEspecosBranco = quantidadeContas * 36;

		int countImpressao = colecaoCobrancaDocumentoItemConta.size() - (quantidadeContas - 1);

		if(colecaoCobrancaDocumentoItemConta.size() > quantidadeContas){
			indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);

			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append(Util.completaString(""
							+ calcularValorDataVencimentoAnteriorHelper.getCobrancaDocumentoItemNaoAnterior().getContaGeral().getConta()
											.getReferencia(), 6));
			complementoEspecosBranco = complementoEspecosBranco - 6;
			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util.completaString(
							Util.formatarDataSemBarra(calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()), 8));
			complementoEspecosBranco = complementoEspecosBranco - 8;

			String valorItemAnterior = "" + calcularValorDataVencimentoAnteriorHelper.getValorAnterior();
			valorItemAnterior = valorItemAnterior.replace(".", "");
			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItemAnterior));
			complementoEspecosBranco = complementoEspecosBranco - 11;

			// pesquisa o valor do parcelamento
			BigDecimal valorParcelamento = getControladorFaturamento().pesquisarValorMultasCobradasPorFinanciamnetoTipo(
							calcularValorDataVencimentoAnteriorHelper.getCobrancaDocumentoItemNaoAnterior().getContaGeral().getConta()
											.getId());

			if(valorParcelamento != null){

				String valorParcelamentoAnterior = "" + valorParcelamento;
				valorParcelamentoAnterior = valorParcelamentoAnterior.replace(".", "");
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorParcelamentoAnterior));
			}else{
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
			}
			complementoEspecosBranco = complementoEspecosBranco - 11;

		}

		if(countImpressao <= 1){
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(), 6));
				complementoEspecosBranco = complementoEspecosBranco - 6;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(
								Util.formatarDataSemBarra(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 8));
				complementoEspecosBranco = complementoEspecosBranco - 8;

				String valorItem = "" + cobrancaDocumentoItem.getValorItemCobrado();
				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItem));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// pesquisa o valor do parcelamento
				BigDecimal valorParcelamento = getControladorFaturamento().pesquisarValorMultasCobradasPorFinanciamnetoTipo(
								cobrancaDocumentoItem.getContaGeral().getConta().getId());

				if(valorParcelamento != null){

					String valorParcelamentoAnterior = "" + valorParcelamento;
					valorParcelamentoAnterior = valorParcelamentoAnterior.replace(".", "");
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorParcelamentoAnterior));
				}else{
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
				}
				complementoEspecosBranco = complementoEspecosBranco - 11;

			}

		}else{
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while(countImpressao < colecaoCobrancaDocumentoItemConta.size()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta).get(countImpressao);

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumentoItem.getContaGeral().getConta().getReferencia(), 6));
				complementoEspecosBranco = complementoEspecosBranco - 6;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(
								Util.formatarDataSemBarra(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 8));
				complementoEspecosBranco = complementoEspecosBranco - 8;

				String valorItem = "" + cobrancaDocumentoItem.getValorItemCobrado();
				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorItem));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// pesquisa o valor do parcelamento
				BigDecimal valorParcelamento = getControladorFaturamento().pesquisarValorMultasCobradasPorFinanciamnetoTipo(
								cobrancaDocumentoItem.getContaGeral().getConta().getId());

				if(valorParcelamento != null){
					String valorParcelamentoAnterior = "" + valorParcelamento;
					valorParcelamentoAnterior = valorParcelamentoAnterior.replace(".", "");
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, valorParcelamentoAnterior));
				}else{
					cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
				}
				complementoEspecosBranco = complementoEspecosBranco - 11;

				countImpressao++;

			}
		}
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(complementoEspecosBranco, ""));
		return indicadorEstouro;
	}

	/**
	 * Somatário dos valores do item e dos acrescimos das guias de pagamento dos
	 * documentos itens recuperado da cobrança de documento
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	protected int somatorioValoresAcrescimosDocumentoItem(StringBuilder cobrancaDocumentoTxt,
					Collection colecaoCobrancaDocumentoItemGuiaPagamento){

		int quantidadeGuiasPagamentoDebito = 0;
		// if (colecaoCobrancaDocumentoItemGuiaPagamento != null
		// && !colecaoCobrancaDocumentoItemGuiaPagamento.isEmpty()) {
		// quantidadeGuiasPagamentoDebito =
		// colecaoCobrancaDocumentoItemGuiaPagamento
		// .size();
		// Iterator iteratorColecaoCobrancaDocumentoItemGuiaPagamento =
		// colecaoCobrancaDocumentoItemGuiaPagamento
		// .iterator();
		// BigDecimal somatorioValorItemGuia = new BigDecimal("0.00");
		// BigDecimal somatorioValorAcrescimosGuia = new BigDecimal("0.00");
		// while (iteratorColecaoCobrancaDocumentoItemGuiaPagamento.hasNext()) {
		// Object[] dadosCobrancaoDocumentoItem = (Object[])
		// iteratorColecaoCobrancaDocumentoItemGuiaPagamento
		// .next();
		// if (dadosCobrancaoDocumentoItem != null) {
		// if (dadosCobrancaoDocumentoItem[0] != null) {
		// somatorioValorItemGuia
		// .add((BigDecimal) dadosCobrancaoDocumentoItem[0]);
		// }
		// if (dadosCobrancaoDocumentoItem[1] != null) {
		// somatorioValorAcrescimosGuia
		// .add((BigDecimal) dadosCobrancaoDocumentoItem[1]);
		// }
		// }
		// }
		// String somatorioValorItemGuiaString = "" + somatorioValorItemGuia;
		// String somatorioValorAcrescimosGuiaString = ""
		// + somatorioValorAcrescimosGuia;
		// somatorioValorItemGuiaString = somatorioValorItemGuiaString
		// .replace(".", "");
		// somatorioValorAcrescimosGuiaString =
		// somatorioValorAcrescimosGuiaString
		// .replace(".", "");
		//
		// valor da guia de pagamento
		// cobrancaDocumentoTxt.append(Util.completaString(
		// somatorioValorItemGuiaString, 11));
		//
		// valor de encargos guia de pagamento
		// cobrancaDocumentoTxt.append(Util.completaString(
		// somatorioValorAcrescimosGuiaString, 11));
		//
		// } else {
		// valor da guia de pagamento
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));

		// valor de encargos guia de pagamento
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
		// }

		return quantidadeGuiasPagamentoDebito;
	}

	/**
	 * Verificar se os itens do parcelamento(Conta, Debito a cobrar e Credit a
	 * realizar, guia de pagamento) já estão no historico
	 * [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarItensParcelamentoNoHistorico(Integer idImovel, Integer idParcelamento) throws ControladorException{

		boolean retorno = false;

		try{

			Collection colecaoContaHistorico = null;
			Collection colecaoDebitoACobrarHistorico = null;
			Collection colecaoCreditoARealizarHistorico = null;
			Collection colecaoGuiaPagamentoHistorico = null;

			colecaoContaHistorico = repositorioCobranca.verificarContaHistoricoParcelamento(idImovel, idParcelamento);

			if(colecaoContaHistorico != null && !colecaoContaHistorico.isEmpty()){

				retorno = true;

			}else{

				colecaoDebitoACobrarHistorico = repositorioCobranca.verificarDebitoACobrarHistoricoParcelamento(idImovel, idParcelamento);

				if(colecaoDebitoACobrarHistorico != null && !colecaoDebitoACobrarHistorico.isEmpty()){

					retorno = true;

				}else{
					colecaoCreditoARealizarHistorico = repositorioCobranca.verificarCreditoARealizarHistoricoParcelamento(idImovel,
									idParcelamento);

					if(colecaoCreditoARealizarHistorico != null && !colecaoCreditoARealizarHistorico.isEmpty()){

						retorno = true;

					}else{
						colecaoGuiaPagamentoHistorico = repositorioCobranca.verificarGuiaPagamentoHistoricoParcelamento(idImovel,
										idParcelamento);

						if(colecaoGuiaPagamentoHistorico != null && !colecaoGuiaPagamentoHistorico.isEmpty()){

							retorno = true;

						}
					}
				}
			}

		}catch(Exception e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * [UC0575] Emitir Parcelamento em Atraso
	 * 
	 * @author Sávio Luiz
	 * @data 12/04/2007
	 * @param
	 * @return void
	 */
	public void emitirParcelamentoEmAtraso(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		while(!flagFimPesquisa){

			try{

				// LOGGER.info("***************************************");
				// LOGGER.info("ENTROU NO PARCELAMENTO EM ATRASO");
				// LOGGER.info("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca, quantidadeCobrancaDocumentoInicio);
				// LOGGER.info("***************************************");
				LOGGER.info("QTD DE COBRANCA DOCUMENTO:" + colecaoCobrancaDocumento.size());
				// LOGGER.info("***************************************");
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){

				// LOGGER.info("***************************************");
				LOGGER.info("QUANTIDADE COBRANÇA:" + colecaoCobrancaDocumento.size());
				// LOGGER.info("***************************************");

				if(colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;

				}
				// ***********************************************************************
				// ****PARTE COMENTADA DA DIVISÃO PARA IMPRESSÃO DE DOCUMENTO
				// COBRANÇA****
				// ***********************************************************************

				// int metadeColecao = 0;
				// if (colecaoCobrancaDocumento.size() % 2 == 0) {
				// metadeColecao = colecaoCobrancaDocumento.size() / 2;
				// } else {
				// metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				// }

				// Map<Integer, Map<Object, Object>>
				// mapCobrancaDocumentoOrdenada =
				// dividirColecao(colecaoCobrancaDocumento);

				/*
				 * if (mapCobrancaDocumentoOrdenada != null) { int countOrdem =
				 * 0;
				 * while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
				 * Map<Object, Object> mapCobrancaoDocumentoDivididas =
				 * mapCobrancaDocumentoOrdenada .get(countOrdem);
				 */

				/*
				 * Iterator iteratorCobrancaDocumento =
				 * mapCobrancaoDocumentoDivididas .keySet().iterator();
				 */
				Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento.iterator();
				while(iteratorCobrancaDocumento.hasNext()){

					CobrancaDocumento cobrancaDocumento = null;
					/*
					 * if(quantidadeContas == 48){ LOGGER.info(""); }
					 */

					// int situacao = 0;
					cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;
					Parcelamento parcelamento = null;
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */

					/*
					 * Objeto que será utilizado para armazenar as informações
					 * do documento de cobrança de acordo com o layout definido
					 * no caso de uso
					 */

					/*
					 * while (situacao < 2) { if (situacao == 0) { situacao = 1;
					 * sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); } else {
					 * cobrancaDocumento = (CobrancaDocumento)
					 * mapCobrancaoDocumentoDivididas .get(cobrancaDocumento);
					 * situacao = 2; sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); }
					 */

					if(cobrancaDocumento != null){
						sequencialImpressao++;

						try{

							nomeClienteUsuario = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel()
											.getId());
							idClienteResponsavel = this.repositorioClienteImovel.retornaIdClienteResponsavel(cobrancaDocumento.getImovel()
											.getId());

							colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
											.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

							parcelamento = pesquisarDadosParcelamentoComMaiorTimestemp(cobrancaDocumento.getImovel().getId());

						}catch(ErroRepositorioException ex){
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						if(colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()){

							// id do grupo
							if(grupoCobranca != null){
								cobrancaDocumentoTxt.append(Util.completaString("" + grupoCobranca.getId(), 2));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 2));
							}

							// código da firma
							if(cobrancaDocumento.getEmpresa() != null){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2, cobrancaDocumento.getEmpresa().getId()
												.toString()));
							}
							// Inscrição
							String idLocalidade = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getLocalidade().getId());
							String codigoSetorComercial = Util.adicionarZerosEsquedaNumero(3,
											"" + cobrancaDocumento.getCodigoSetorComercial());
							String numeroQuadra = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4, "" + cobrancaDocumento.getImovel().getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getImovel().getSubLote());

							cobrancaDocumentoTxt.append(Util.completaString(idLocalidade + codigoSetorComercial + numeroQuadra + lote
											+ subLote, 16));

							// sequencial do documento de cobranca
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9,
											"" + cobrancaDocumento.getNumeroSequenciaDocumento()));
							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(
											cobrancaDocumento.getImovel().getId());
							if(parmsEnderecoImovel != null){
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0], 50));
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// endereço do cliente com opção de recebimento via
							// correio
							if(idClienteResponsavel != null){
								String[] parmsEndereco = getControladorEndereco().pesquisarEnderecoClienteAbreviadoDividido(
												idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(parmsEndereco[0], 50));
								// nome do bairro
								nomeBairro = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEndereco[2];
								cepFormatado = parmsEndereco[4];

							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 50));

							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 25));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 24));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));

							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));

							// Matrícula do imóvel
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(8, "" + cobrancaDocumento.getImovel().getId()));
							// Código da situação da ligação de água
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(1, cobrancaDocumento.getImovel()
											.getLigacaoAguaSituacao().getId().toString()));

							// Código da situação da ligação de
							// esgoto
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(1, cobrancaDocumento.getImovel()
											.getLigacaoEsgotoSituacao().getId().toString()));
							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							int indicadorEstouro = formatarCobrancaDocumentoItemParaContaComParcelamento(cobrancaDocumentoTxt,
											colecaoCobrancaDocumentoItemConta, 15);

							// id do responsável
							if(idClienteResponsavel != null){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9, "" + idClienteResponsavel));
							}else{
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9, ""));
							}

							// CEP
							cobrancaDocumentoTxt.append(Util.completaString(cepFormatado, 8));

							// Indicador Estouro
							cobrancaDocumentoTxt.append(Util.completaString("" + indicadorEstouro, 1));

							// data de vencimento AAAAMMDD
							Object[] dadosFaturamentoGrupo = getControladorFaturamento().pesquisarAnoMesEDiaVencimentoFaturamentoGrupo(
											cobrancaDocumento.getImovel().getId());
							Integer anoMesFaturamento = null;
							Integer diaVencimento = null;
							if(dadosFaturamentoGrupo != null){
								if(dadosFaturamentoGrupo[0] != null){
									anoMesFaturamento = (Integer) dadosFaturamentoGrupo[0];
								}
								if(dadosFaturamentoGrupo[1] != null){
									diaVencimento = ((Short) dadosFaturamentoGrupo[1]).intValue();
								}
							}
							String dataVencimento = "";
							if(anoMesFaturamento != null && anoMesFaturamento > sistemaParametro.getAnoMesFaturamento()){
								diaVencimento += 5;
								String anoMesFaturamentoString = "" + anoMesFaturamento;
								dataVencimento = anoMesFaturamentoString.substring(0, 4) + anoMesFaturamentoString.substring(4, 6)
												+ diaVencimento;

							}else{
								dataVencimento = Util.formatarDataSemBarra(Util.adicionarNumeroDiasDeUmaData(new Date(), 20));
							}

							cobrancaDocumentoTxt.append(Util.completaString(dataVencimento, 8));

							if(parcelamento != null){

								// obter dados do faturamento
								if(parcelamento.getParcelamento() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(8,
													Util.formatarDataSemBarra(parcelamento.getParcelamento())));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(8, ""));
								}
								if(parcelamento.getValorConta() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorConta(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorServicosACobrar() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorServicosACobrar(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorAtualizacaoMonetaria() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorAtualizacaoMonetaria(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorJurosMora() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorJurosMora(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorMulta() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorMulta(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								BigDecimal valorDescontos = parcelamento.getValorDesconto();
								if(valorDescontos != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(valorDescontos, 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorEntrada() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorEntrada(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getNumeroPrestacoes() != null){
									cobrancaDocumentoTxt
													.append(Util.adicionarZerosEsquedaNumero(2, "" + parcelamento.getNumeroPrestacoes()));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2, ""));
								}
								if(parcelamento.getValorPrestacao() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorPrestacao(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
								if(parcelamento.getValorJurosParcelamento() != null){
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11,
													Util.formatarBigDecimalParaString(parcelamento.getValorJurosParcelamento(), 2)));
								}else{
									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
								}
							}else{
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(109, ""));
							}

							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do
							// códigode
							// barra
							representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(5,
											cobrancaDocumento.getValorDocumento(), cobrancaDocumento.getLocalidade().getId(),
											cobrancaDocumento.getImovel().getId(), null, null, null, null,
											String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
											cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, null, null, null);

							// Formata a representação númerica do
							// código de
							// barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + " "
											+ representacaoNumericaCodBarra.substring(11, 12) + " "
											+ representacaoNumericaCodBarra.substring(12, 23) + " "
											+ representacaoNumericaCodBarra.substring(23, 24) + " "
											+ representacaoNumericaCodBarra.substring(24, 35) + " "
											+ representacaoNumericaCodBarra.substring(35, 36) + " "
											+ representacaoNumericaCodBarra.substring(36, 47) + " "
											+ representacaoNumericaCodBarra.substring(47, 48);

							cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de
							// barras
							// no
							// padrão
							// intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

							// Recupera a representação númerica do
							// código
							// de
							// barras
							// sem
							// os dígitos verificadores
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra.substring(0, 11)
											+ representacaoNumericaCodBarra.substring(12, 23)
											+ representacaoNumericaCodBarra.substring(24, 35)
											+ representacaoNumericaCodBarra.substring(36, 47);

							cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5
											.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

							cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						}

						colecaoCobrancaDocumentoItemConta = null;
					}

					// }// fim do laço que verifica
					// as 2
					// contas

				}// fim laço while do iterator do
					// objeto
					// helper
					// countOrdem++;
					// mapCobrancaoDocumentoDivididas = null;
					// }
			}else{
				flagFimPesquisa = true;
			}
			// } else {
			// flagFimPesquisa = true;
			// }
			// colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();

		String nomeZip = null;

		// em caso de ser carta de tarifa social não
		// formatar o txt
		if(idCronogramaAtividadeAcaoCobranca != null){
			nomeZip = "EMITIR_CARTA_PARCELAMENTO_EM_ATRASO" + grupoCobranca.getId() + "_" + Util.formatarData(dataAtual);
		}else{
			String descricaoAbrevDocumentoTipo = "";
			if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
				descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

			nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
			nomeZip = nomeZip.replace("/", "_");
			nomeZip = nomeZip.replace(" ", "_");
		}

		nomeZip = nomeZip.replace("/", "_");

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try{

			// LOGGER.info("***************************************");
			// LOGGER.info("INICO DA CRIACAO DO ARQUIVO");
			// LOGGER.info("***************************************");

			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			// LOGGER.info("***************************************");
			// LOGGER.info("FIM DA CRIACAO DO ARQUIVO");
			// LOGGER.info("***************************************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();

			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * retorna o objeto ParcelamentoFaixaValor com o valor do debito(valorFaixa)
	 * com desconto maior q o da faixa e menor que próxima faixa
	 * [UC0575] - Emitir Parcelamento em Atraso
	 * 
	 * @author Sávio Luiz
	 * @date 14/04/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Parcelamento pesquisarDadosParcelamentoComMaiorTimestemp(Integer idImovel) throws ControladorException{

		Parcelamento parcelamento = null;
		Object[] dadosParcelamento = null;
		try{
			dadosParcelamento = repositorioCobranca.pesquisarDadosParcelamentoComMaiorTimestemp(idImovel);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if(dadosParcelamento != null){
			parcelamento = new Parcelamento();
			if(dadosParcelamento[0] != null){
				parcelamento.setParcelamento((Date) dadosParcelamento[0]);
			}
			if(dadosParcelamento[1] != null){
				parcelamento.setValorConta((BigDecimal) dadosParcelamento[1]);
			}
			if(dadosParcelamento[2] != null){
				parcelamento.setValorServicosACobrar((BigDecimal) dadosParcelamento[2]);
			}
			if(dadosParcelamento[3] != null){
				parcelamento.setValorAtualizacaoMonetaria((BigDecimal) dadosParcelamento[3]);
			}
			if(dadosParcelamento[4] != null){
				parcelamento.setValorJurosMora((BigDecimal) dadosParcelamento[4]);
			}
			if(dadosParcelamento[5] != null){
				parcelamento.setValorMulta((BigDecimal) dadosParcelamento[5]);
			}
			if(dadosParcelamento[6] != null){
				parcelamento.setValorDescontoAcrescimos((BigDecimal) dadosParcelamento[6]);
			}
			if(dadosParcelamento[7] != null){
				parcelamento.setValorDescontoAntiguidade((BigDecimal) dadosParcelamento[7]);
			}
			if(dadosParcelamento[8] != null){
				parcelamento.setValorDescontoInatividade((BigDecimal) dadosParcelamento[8]);
			}
			if(dadosParcelamento[9] != null){
				parcelamento.setValorEntrada((BigDecimal) dadosParcelamento[9]);
			}
			if(dadosParcelamento[10] != null){
				parcelamento.setNumeroPrestacoes((Short) dadosParcelamento[10]);
			}
			if(dadosParcelamento[11] != null){
				parcelamento.setValorPrestacao((BigDecimal) dadosParcelamento[11]);
			}
			if(dadosParcelamento[12] != null){
				parcelamento.setValorJurosParcelamento((BigDecimal) dadosParcelamento[12]);
			}
		}
		return parcelamento;
	}

	/**
	 * Consulta o id e a situação da ordem de serviço associada ao documento de
	 * cobrança passado como parâmetro
	 * 
	 * @author Sávio Luiz
	 * @created 13/04/2007
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Object[] pesquisarDadosOrdemServicoDocumentoCobranca(Integer idDocumentoCobranca) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarDadosOrdemServicoDocumentoCobranca(idDocumentoCobranca);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0394] - Gerar Débitos a Cobrar de Doações
	 * 
	 * @author Sávio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            ,
	 *            Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void atualizarParcelamentoItensDebitoACobrar(Collection colecaoIdsDebitoACobrar) throws ControladorException{

		try{
			Collection colecaoIdsParcelamentosItens = repositorioCobranca
							.pesquisarIdsParcelamentosItemDebitoACobrar(colecaoIdsDebitoACobrar);
			if(colecaoIdsParcelamentosItens != null && !colecaoIdsParcelamentosItens.isEmpty()){
				repositorioCobranca.atualizarParcelamentosItemDebitoACobrar(colecaoIdsParcelamentosItens);
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0394] - Gerar Débitos a Cobrar de Doações
	 * 
	 * @author Sávio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            ,
	 *            Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void removerDocumentosItensDebitoACobrar(Collection colecaoIdsDebitoACobrar) throws ControladorException{

		try{
			Collection colecaoIdsDocumentosItens = repositorioCobranca
							.pesquisarIdsCobrancaDocumentoItemDebitoACobrar(colecaoIdsDebitoACobrar);
			if(colecaoIdsDocumentosItens != null && !colecaoIdsDocumentosItens.isEmpty()){
				repositorioCobranca.deletarCobrancaDocumentoItemDebitoACobrar(colecaoIdsDocumentosItens);
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * [UC0304] - Informar Dados para Geração de Relatório ou Consulta
	 * 
	 * @author Sávio Luiz
	 * @date 22/05/2007
	 */
	public InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsulta(String mesAnoFaturamento,
					String[] idsCobrancaGrupo, String[] idsGerenciaRegional, Integer idEloPolo, Integer idLocalidade,
					Integer idSetorComercial, Integer nmQuadra, String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
					String[] idsLigacaoEsgotoSituacao, String[] idsCategoria, String[] idsEsferaPoder, String[] idsEmpresas,
					Integer idUnidadeNegocio) throws ControladorException{

		InformarDadosGeracaoResumoAcaoConsultaHelper retorno = new InformarDadosGeracaoResumoAcaoConsultaHelper();

		if(!Util.validarMesAno(mesAnoFaturamento)){
			throw new ControladorException("atencao.ano_mes.invalido");
		}

		Integer anoMesReferencia = Integer.valueOf(Util.formatarMesAnoParaAnoMesSemBarra(mesAnoFaturamento));
		// SistemaParametro sistemaParametro =
		// this.getControladorUtil().pesquisarParametrosDoSistema();

		// if
		// (anoMesReferencia.compareTo(sistemaParametro.getAnoMesFaturamento())
		// == 1){
		// throw new
		// ControladorException("atencao.ano.mes.referencia.posterior.ano.mes.faturamento",
		// null,
		// String.valueOf(sistemaParametro.getAnoMesFaturamento()));
		// }

		retorno.setAnoMesReferencia(anoMesReferencia);
		// retorno.setDescricaoOpcaoTotalizacao(this.obterDescricaoOpcaoTotalizacao(opcaoTotalizacao));

		Collection colecaoPesquisa = null;
		if(idEloPolo != null){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, idEloPolo));

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Elo Pólo");
			}
			Localidade eloPolo = (Localidade) Util.retonarObjetoDeColecao(colecaoPesquisa);

			if(eloPolo.getLocalidade() == null){
				throw new ControladorException("atencao.localidade.nao.elo");
			}else if(!eloPolo.getLocalidade().getId().equals(Integer.valueOf(eloPolo.getId()))){

				throw new ControladorException("atencao.localidade.nao.elo");

			}

			retorno.setEloPolo(eloPolo);

		}
		if(idLocalidade != null){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, idLocalidade));

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Localidade");
			}

			Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(localidade);
		}
		if(idUnidadeNegocio != null){

			FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

			filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(FiltroUnidadeNegocio.ID, idUnidadeNegocio));

			filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(FiltroUnidadeNegocio.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroUnidadeNegocio, UnidadeNegocio.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Unidade de Negócio");
			}

			UnidadeNegocio unidadeNegocio = (UnidadeNegocio) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setUnidadeNegocio(unidadeNegocio);
		}

		if(idSetorComercial != null){

			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID, idSetorComercial));

			filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.INDICADORUSO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Setor Comercial");
			}

			SetorComercial setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(setorComercial.getLocalidade());
			retorno.setSetorComercial(setorComercial);

		}
		if(idSetorComercial != null && nmQuadra != null){

			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.ID_SETORCOMERCIAL, idSetorComercial));

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.NUMERO_QUADRA, nmQuadra));

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Quadra");
			}

			Quadra quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(quadra.getSetorComercial().getLocalidade());
			retorno.setSetorComercial(quadra.getSetorComercial());
			retorno.setQuadra(quadra);

		}

		if(idsGerenciaRegional != null && idsGerenciaRegional.length > 0){

			Collection colecaoGerenciaRegional = new ArrayList();
			FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

			GerenciaRegional gerenciaRegional = null;

			for(int index = 0; idsGerenciaRegional.length > index; index++){

				if(idsGerenciaRegional[index] != null && idsGerenciaRegional[index].length() > 0){

					filtroGerenciaRegional.adicionarParametro(new ParametroSimples(FiltroGerenciaRegional.ID, idsGerenciaRegional[index]));

					filtroGerenciaRegional.adicionarParametro(new ParametroSimples(FiltroGerenciaRegional.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroGerenciaRegional, GerenciaRegional.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Gerencia Regional");
					}

					gerenciaRegional = (GerenciaRegional) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroGerenciaRegional.limparListaParametros();

					colecaoGerenciaRegional.add(gerenciaRegional);
				}
			}

			if(!colecaoGerenciaRegional.isEmpty()){
				retorno.setColecaoGerenciaRegional(colecaoGerenciaRegional);
			}

		}

		if(idsCobrancaGrupo != null && idsCobrancaGrupo.length > 0){

			Collection colecaoCobrancaGrupo = new ArrayList();
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

			CobrancaGrupo cobrancaGrupo = null;

			for(int index = 0; idsCobrancaGrupo.length > index; index++){

				if(idsCobrancaGrupo[index] != null && idsCobrancaGrupo[index].length() > 0){

					filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, idsCobrancaGrupo[index]));

					filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Cobrança Grupo");
					}

					cobrancaGrupo = (CobrancaGrupo) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaGrupo.limparListaParametros();

					colecaoCobrancaGrupo.add(cobrancaGrupo);
				}
			}

			if(!colecaoCobrancaGrupo.isEmpty()){
				retorno.setColecaoCobrancaGrupo(colecaoCobrancaGrupo);
			}

		}

		if(idsImovelPerfil != null && idsImovelPerfil.length > 0){

			Collection colecaoImovelPerfil = new ArrayList();
			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();

			ImovelPerfil imovelPerfil = null;

			for(int index = 0; idsImovelPerfil.length > index; index++){

				if(idsImovelPerfil[index] != null && idsImovelPerfil[index].length() > 0){

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(FiltroImovelPerfil.ID, idsImovelPerfil[index]));

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(FiltroImovelPerfil.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroImovelPerfil, ImovelPerfil.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Perfil do Imóvel");
					}

					imovelPerfil = (ImovelPerfil) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroImovelPerfil.limparListaParametros();

					colecaoImovelPerfil.add(imovelPerfil);
				}
			}

			if(!colecaoImovelPerfil.isEmpty()){
				retorno.setColecaoImovelPerfil(colecaoImovelPerfil);
			}

		}

		if(idsLigacaoAguaSituacao != null && idsLigacaoAguaSituacao.length > 0){

			Collection colecaoLigacaoAguaSituacao = new ArrayList();
			FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao();

			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			for(int index = 0; idsLigacaoAguaSituacao.length > index; index++){

				if(idsLigacaoAguaSituacao[index] != null && idsLigacaoAguaSituacao[index].length() > 0){
					filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoAguaSituacao.ID,
									idsLigacaoAguaSituacao[index]));

					filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoAguaSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLigacaoAguaSituacao, LigacaoAguaSituacao.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Ligação de Água");
					}

					ligacaoAguaSituacao = (LigacaoAguaSituacao) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoAguaSituacao.limparListaParametros();

					colecaoLigacaoAguaSituacao.add(ligacaoAguaSituacao);
				}
			}

			if(!colecaoLigacaoAguaSituacao.isEmpty()){
				retorno.setColecaoLigacaoAguaSituacao(colecaoLigacaoAguaSituacao);
			}

		}

		if(idsLigacaoEsgotoSituacao != null && idsLigacaoEsgotoSituacao.length > 0){

			Collection colecaoLigacaoEsgotoSituacao = new ArrayList();
			FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao();

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			for(int index = 0; idsLigacaoEsgotoSituacao.length > index; index++){

				if(idsLigacaoEsgotoSituacao[index] != null && idsLigacaoEsgotoSituacao[index].length() > 0){

					filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoEsgotoSituacao.ID,
									idsLigacaoEsgotoSituacao[index]));

					filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLigacaoEsgotoSituacao,
									LigacaoEsgotoSituacao.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Ligação de Esgoto");
					}

					ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoEsgotoSituacao.limparListaParametros();

					colecaoLigacaoEsgotoSituacao.add(ligacaoEsgotoSituacao);
				}
			}

			if(!colecaoLigacaoEsgotoSituacao.isEmpty()){
				retorno.setColecaoLigacaoEsgotoSituacao(colecaoLigacaoEsgotoSituacao);
			}

		}

		if(idsCategoria != null && idsCategoria.length > 0){

			Collection colecaoCategoria = new ArrayList();
			FiltroCategoria filtroCategoria = new FiltroCategoria();

			Categoria categoria = null;

			for(int index = 0; idsCategoria.length > index; index++){

				if(idsCategoria[index] != null && idsCategoria[index].length() > 0){

					filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.CODIGO, idsCategoria[index]));

					filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroCategoria, Categoria.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Categoria");
					}

					categoria = (Categoria) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCategoria.limparListaParametros();

					colecaoCategoria.add(categoria);
				}
			}

			if(!colecaoCategoria.isEmpty()){
				retorno.setColecaoCategoria(colecaoCategoria);
			}
		}

		if(idsEsferaPoder != null && idsEsferaPoder.length > 0){

			Collection colecaoEsferaPoder = new ArrayList();
			FiltroEsferaPoder filtroEsferaPoder = new FiltroEsferaPoder();

			EsferaPoder esferaPoder = null;

			for(int index = 0; idsEsferaPoder.length > index; index++){

				if(idsEsferaPoder[index] != null && idsEsferaPoder[index].length() > 0){

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(FiltroEsferaPoder.ID, idsEsferaPoder[index]));

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(FiltroEsferaPoder.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroEsferaPoder, EsferaPoder.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Esfera de Poder");
					}

					esferaPoder = (EsferaPoder) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEsferaPoder.limparListaParametros();

					colecaoEsferaPoder.add(esferaPoder);
				}
			}

			if(!colecaoEsferaPoder.isEmpty()){
				retorno.setColecaoEsferaPoder(colecaoEsferaPoder);
			}

		}

		if(idsEmpresas != null && idsEmpresas.length > 0){

			Collection colecaoEmpresa = new ArrayList();
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

			Empresa empresa = null;

			for(int index = 0; idsEmpresas.length > index; index++){

				if(idsEmpresas[index] != null && idsEmpresas[index].length() > 0){

					filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, idsEmpresas[index]));

					filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroEmpresa, Empresa.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Empresa");
					}

					empresa = (Empresa) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEmpresa.limparListaParametros();

					colecaoEmpresa.add(empresa);
				}
			}

			if(!colecaoEmpresa.isEmpty()){
				retorno.setColecaoEmpresa(colecaoEmpresa);
			}

		}

		return retorno;
	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do cronograma
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaCronograma(Integer idCobrancaAcaoAtividadeCronograma) throws ControladorException{

		Collection protocoloDocumentoCobranca = new ArrayList();
		try{
			protocoloDocumentoCobranca = repositorioCobranca
							.pesquisarProtocoloDocumentoCobrancaCronograma(idCobrancaAcaoAtividadeCronograma);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return protocoloDocumentoCobranca;
	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do eventual
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaEventual(Integer idCobrancaAcaoAtividadeComand) throws ControladorException{

		Collection protocoloDocumentoCobranca = new ArrayList();
		try{
			protocoloDocumentoCobranca = repositorioCobranca.pesquisarProtocoloDocumentoCobrancaEventual(idCobrancaAcaoAtividadeComand);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return protocoloDocumentoCobranca;
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Retorna os CBCR_ID da tabela COBRANCA_ACAO_CRONOGRAMA com CBCM_ID da
	 * tabela COBRANCA_GRUPO_CRONOGRAMA_MES
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @date 16/10/2006,04/06/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaAcaoCronograma(int idCobrancaGrupoCronogramaMes) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarCobrancaAcaoCronograma(idCobrancaGrupoCronogramaMes);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * Retorna CAAC_TMREALIZACAO do COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @date 16/10/2006,04/06/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(int idCobrancaAcaoCronograma, int idCobrancaAtividade)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(idCobrancaAcaoCronograma, idCobrancaAtividade);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [FS0004] Validar Registro Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @created 05/06/2007
	 * @param idSolicitacaoTipoEspecificacao
	 * @exception ControladorException
	 */
	public Object[] validarRegistroAtendimentoTransferenciaDebitoCredito(Integer idRA, boolean levantarExcecao) throws ControladorException{

		Object[] retorno = new Object[3];

		try{

			boolean continuarValidacao = true;

			Object[] dadosRegistroAtendimento = repositorioCobranca.pesquisarRegistroAtendimentoTransferenciaDebitoCredito(idRA);

			// Verificando existência do RA
			if(dadosRegistroAtendimento == null){

				if(levantarExcecao){
					throw new ControladorException("atencao.pesquisa_inexistente", null, "RA - Registro de Atendimento");
				}
				continuarValidacao = false;
				retorno[0] = "RA - REGISTRO DE ATENDIMENTO INEXISTENTE";
				retorno[1] = Short.valueOf((short) 1);

			}

			if(continuarValidacao){

				Integer idSolicitacaoTipoEspecificacao = (Integer) dadosRegistroAtendimento[1];
				Integer idImovel = (Integer) dadosRegistroAtendimento[3];
				Short codigoSituacaoRA = (Short) dadosRegistroAtendimento[4];

				// Verificando se o RA está associado a um imóvel
				if(idImovel == null){
					throw new ControladorException("atencao.registro_atendimento_sem_imovel");
				}

				// Verificando se o RA está encerrado
				if(codigoSituacaoRA != null && codigoSituacaoRA.equals(RegistroAtendimento.SITUACAO_ENCERRADO)){
					throw new ControladorException("atencao.registro_atendimento_encerrado");
				}

				// Verificando se a Especificação do RA permite transferência de
				// débito
				EspecificacaoTipoValidacao especificacaoTipoValidacao = repositorioCobranca
								.pesquisarEspecificacaoTipoValidacaoTransferenciaDebitoCredito(idSolicitacaoTipoEspecificacao);

				if(especificacaoTipoValidacao == null){
					throw new ControladorException("atencao.solicitacao_tipo_especificacao_nao_permite_transferencia");
				}

				retorno[0] = (String) dadosRegistroAtendimento[2];
				retorno[1] = Short.valueOf((short) 2);
				retorno[2] = idImovel;

			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * @param idRA
	 *            ,
	 *            idImovelDestino
	 * @exception ControladorException
	 */
	public Integer validarTransferenciaDebitoCreditoDadosImoveis(Integer idRA, Integer idImovelDestino) throws ControladorException{

		Integer idImovelRA = null;

		// [FS0004] Validar Registro Atendimento
		Object[] dadosRA = this.validarRegistroAtendimentoTransferenciaDebitoCredito(idRA, true);
		idImovelRA = (Integer) dadosRA[2];

		// [FS0001] Verificar existência da matrícula do imóvel
		String inscricaoImovel = this.getControladorImovel().pesquisarInscricaoImovel(idImovelDestino, true);

		if(inscricaoImovel == null){
			throw new ControladorException("atencao.pesquisa_inexistente", null, "Imóvel");
		}

		if(idImovelRA.equals(idImovelDestino)){
			throw new ControladorException("atencao.imovel_ra_igual_imovel_destino");
		}

		return idImovelRA;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [SB0001] - Apresentar Débitos/Créditos do Imóvel de Origem
	 * [FS0002] - Verificar existência de débitos/créditos no imóvel de origem
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * @param idImovelOrigem
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelOrigem(Integer idImovelOrigem) throws ControladorException{

		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = this.obterDebitoImovelOuCliente(1, idImovelOrigem.toString(), null, null,
						"000101", "999912", dataVencimentoInicial, dataVencimentoFinal, 1, 1, 1, 1, 1, 1, 1, true, null, null, null, null,
						ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

		boolean existeDebitoCredito = false;

		// CONTA
		if(imovelDebitoCredito.getColecaoContasValoresImovel() != null && !imovelDebitoCredito.getColecaoContasValoresImovel().isEmpty()){
			existeDebitoCredito = true;
		}

		// DEBITO_A_COBRAR
		if(imovelDebitoCredito.getColecaoDebitoACobrar() != null && !imovelDebitoCredito.getColecaoDebitoACobrar().isEmpty()){
			existeDebitoCredito = true;

			Collection<DebitoACobrar> colecaoDebitoACobrarNaoParcelamento = new ArrayList();

			/*
			 * Alterado por Raphael Rossiter em 25/10/2007
			 * Selecionar apenas os débitos que não sejam de parcelamento onde o
			 * tipo de financiamento associado a ele seja DIFERENTE de 2 -
			 * PARCELAMENTO_AGUA ,3 - PARCELAMENTO_ESGOTO ,4 -
			 * PARCELAMENTO_SERVICO, 8 - JUROS_PARCELAMENTO
			 */
			Iterator itColecaoDebitoACobrar = imovelDebitoCredito.getColecaoDebitoACobrar().iterator();

			Collection colecaoDebitoTipo = null;
			FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();

			filtroDebitoTipo.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");

			DebitoTipo debitoTipo = null;

			Collection<Integer> tiposParcelamento = Util
							.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO.executar());

			while(itColecaoDebitoACobrar.hasNext()){

				DebitoACobrar debitoACobrar = (DebitoACobrar) itColecaoDebitoACobrar.next();

				filtroDebitoTipo.adicionarParametro(new ParametroSimples(FiltroDebitoTipo.ID, debitoACobrar.getDebitoTipo().getId()));

				colecaoDebitoTipo = this.getControladorUtil().pesquisar(filtroDebitoTipo, DebitoTipo.class.getName());

				debitoTipo = (DebitoTipo) Util.retonarObjetoDeColecao(colecaoDebitoTipo);

				if(tiposParcelamento == null || !tiposParcelamento.contains(debitoACobrar.getFinanciamentoTipo().getId())){

					colecaoDebitoACobrarNaoParcelamento.add(debitoACobrar);
				}

				filtroDebitoTipo.limparListaParametros();
			}

			imovelDebitoCredito.setColecaoDebitoACobrar(colecaoDebitoACobrarNaoParcelamento);
		}

		// CREDITO_A_REALIZAR
		if(imovelDebitoCredito.getColecaoCreditoARealizar() != null && !imovelDebitoCredito.getColecaoCreditoARealizar().isEmpty()){
			existeDebitoCredito = true;

			Collection<CreditoARealizar> colecaoCreditoARealizarNaoParcelamento = new ArrayList();

			// Selecionar apenas os créditos que não sejam de parcelamento
			Iterator itColecaoCreditoARealizar = imovelDebitoCredito.getColecaoCreditoARealizar().iterator();

			while(itColecaoCreditoARealizar.hasNext()){

				CreditoARealizar creditoARealizar = (CreditoARealizar) itColecaoCreditoARealizar.next();

				if(!creditoARealizar.getCreditoTipo().getId().equals(CreditoTipo.DESCONTO_INATIVIDADE_LIGACAO_AGUA)
								&& !creditoARealizar.getCreditoTipo().getId().equals(CreditoTipo.DESCONTO_ANTIGUIDADE_DEBITO)){

					colecaoCreditoARealizarNaoParcelamento.add(creditoARealizar);
				}
			}

			imovelDebitoCredito.setColecaoCreditoARealizar(colecaoCreditoARealizarNaoParcelamento);
		}

		// GUIA_PAGAMENTO
		if(imovelDebitoCredito.getColecaoGuiasPagamentoValores() != null
						&& !imovelDebitoCredito.getColecaoGuiasPagamentoValores().isEmpty()){
			existeDebitoCredito = true;

			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresNaoParcelamento = new ArrayList();

			// Selecionar apenas as guias que não sejam de entrada de
			// parcelamento
			Iterator itColecaoGuiasPagamentoValoresNaoParcelamento = imovelDebitoCredito.getColecaoGuiasPagamentoValores().iterator();

			while(itColecaoGuiasPagamentoValoresNaoParcelamento.hasNext()){

				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) itColecaoGuiasPagamentoValoresNaoParcelamento
								.next();

				// if (!guiaPagamentoValoresHelper.getGuiaPagamento()
				// .getDebitoTipo().getId().equals(
				// DebitoTipo.ENTRADA_PARCELAMENTO)) {

				colecaoGuiasPagamentoValoresNaoParcelamento.add(guiaPagamentoValoresHelper);
				// }
			}

			imovelDebitoCredito.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValoresNaoParcelamento);
		}

		// [FS0002] - Verificar existência de débitos/créditos no imóvel de
		// origem
		if(!existeDebitoCredito){
			throw new ControladorException("atencao.imovel_origem_sem_debito_credito");
		}

		return imovelDebitoCredito;
	}

	/**
	 * [UC0609] Transferência de Débitos/Créditos
	 * [SB00002] Transferência dos Débitos/Créditos selecionados para o imóvel
	 * destino
	 * 
	 * @author Vivianne Sousa
	 * @date 09/06/2007
	 * @param idImovelDestino
	 * @param colecaoConta
	 * @param colecaoDebitosACobrar
	 * @param colecaoCreditosARealizar
	 * @param colecaoGuiasPagamento
	 * @throws ControladorException
	 */
	public void transferirDebitosCreditos(Integer idImovelDestino, Collection colecaoContas, Collection colecaoDebitosACobrar,
					Collection colecaoCreditosARealizar, Collection colecaoGuiasPagamento, Usuario usuarioLogado,
					Integer idRegistroAtendimento, String identificadoresConta) throws ControladorException{

		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, idImovelDestino));

		Imovel imovelDestino = (Imovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName()));

		// RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		// registroAtendimento.setId(idRegistroAtendimento);

		// Imovel imovelDestino =
		// this.getControladorImovel().pesquisarImovelRegistroAtendimento(idImovelDestino);

		// Boolean retorno = Boolean.FALSE;
		//
		// FiltroImovel filtroImovel = new FiltroImovel();
		// filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
		// filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, idImovelOrigem));
		//
		// Imovel imovelOrigem = (Imovel)
		// Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel,
		// Imovel.class.getName()));

		// 1.Caso exista conta selecionada na Coleção de Contas
		if(colecaoContas != null && !colecaoContas.isEmpty()){

			// ContaMotivoCancelamento contaMotivoCancelamento = new ContaMotivoCancelamento();
			// contaMotivoCancelamento.setId(ContaMotivoCancelamento.TRASFERENCIA_DE_COBRANCA);

			Iterator iterContas = colecaoContas.iterator();

			while(iterContas.hasNext()){

				Conta contaHelper = (Conta) iterContas.next();

				filtroImovel = new FiltroImovel();
				filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
				filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, contaHelper.getImovel().getId()));

				Imovel imovelOrigem = (Imovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel,
								Imovel.class.getName()));

				if(imovelDestino.getLocalidade() != null && imovelOrigem.getLocalidade() != null
								&& imovelDestino.getLocalidade().getId().equals(imovelOrigem.getLocalidade().getId())){

					FiltroConta filtroConta = new FiltroConta();
					filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.DEBITO_CREDITO_SITUACAO_ATUAL);
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, imovelDestino.getId()));
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.REFERENCIA, contaHelper.getReferencia()));

					Conta contaImovelDestino = (Conta) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroConta,
									Conta.class.getName()));

					if(contaImovelDestino != null){

						if(contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA)
										|| contaImovelDestino.getDebitoCreditoSituacaoAtual().getId()
														.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)){

							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.conta_ja_existente_cancelada", null,
											Util.formatarAnoMesParaMesAno(contaHelper.getReferencia()));

						}else{

							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia", null,
											imovelDestino.getId() + " já possui a conta com a referência "
															+ Util.formatarAnoMesParaMesAno(contaHelper.getReferencia()) + ".");

						}

					}

					FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
					filtroContaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroContaHistorico.DEBITO_CREDITO_SITUACAO_ATUAL);
					filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.IMOVEL_ID, imovelDestino.getId()));
					filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ANO_MES_REFERENCIA, contaHelper
									.getReferencia()));

					ContaHistorico contaHistoricoImovelDestino = (ContaHistorico) Util.retonarObjetoDeColecao(getControladorUtil()
									.pesquisar(filtroContaHistorico, ContaHistorico.class.getName()));

					if(contaHistoricoImovelDestino != null){

						if(!contaHistoricoImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA)
										&& !contaHistoricoImovelDestino.getDebitoCreditoSituacaoAtual().getId()
														.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)){

							sessionContext.setRollbackOnly();
							throw new ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia", null,
											imovelDestino.getId()
															+ " já possui a conta com a referência "
															+ Util.formatarAnoMesParaMesAno(contaHistoricoImovelDestino
																			.getAnoMesReferenciaConta()) + " que já está baixada" + ".");

						}

					}

					filtroConta = new FiltroConta();
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaHelper.getId()));

					Conta conta = (Conta) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroConta, Conta.class.getName()));
					conta.setImovel(imovelDestino);
					conta.setUltimaAlteracao(new Date());

					this.getControladorUtil().atualizar(conta);

				}else{

					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.cobranca.imoveis_localidades_distintas");

				}

				// // 1.1.2.
				// // o sistema passa a conta cancelada do imóvel origem para
				// // inclusão
				// this.inserirContaTransferencia(conta, imovelDestino, usuarioLogado);
				//
				// Collection colecaoContaRemover = new ArrayList();
				// colecaoContaRemover.add(conta);
				//
				// // 1.1.1.
				// // o sistema passa a conta a ser transferida para cancelamento
				// // com o motivo de "TRANSFERÊNCIA CONTA"
				// this.getControladorFaturamento().cancelarConta(colecaoContaRemover,
				// identificadoresConta, contaMotivoCancelamento,
				// usuarioLogado);
			}

		}

		// sessionContext.setRollbackOnly();
		// throw new ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia",
		// null, imovelDestino.getId()
		// + " já possui a conta com a referência "
		// + Util.formatarMesAnoReferencia(contaImovelDestino.getReferencia()) + ".");

		// 2.Caso exista débito a cobrar selecionada na Coleção de débitos a
		// cobrar
		// if(colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()){
		//
		// Iterator iterDebitosACobrar = colecaoDebitosACobrar.iterator();
		// while(iterDebitosACobrar.hasNext()){
		//
		// DebitoACobrar debitosACobrar = (DebitoACobrar) iterDebitosACobrar.next();
		//
		// // 2.1.2.
		// // o sistema passa o débito a cobrar do imóvel origem para
		// // inclusão
		// this.inserirDebitoACobrarTransferencia(debitosACobrar, imovelDestino, usuarioLogado,
		// registroAtendimento);
		//
		// // 2.1.1.
		// // o sistema passa o débito a cobrar a ser transferido para
		// // cancelamento
		// this.cancelarDebitoACobrarTransferencia(debitosACobrar.getId(), usuarioLogado);
		// }
		// }

		// 3.Caso exista crédito a realizar selecionada na Coleção de créditos a
		// realizar
		// if(colecaoCreditosARealizar != null && !colecaoCreditosARealizar.isEmpty()){
		//
		// Iterator iterCreditosARealizar = colecaoCreditosARealizar.iterator();
		// while(iterCreditosARealizar.hasNext()){
		//
		// CreditoARealizar creditoARealizar = (CreditoARealizar) iterCreditosARealizar.next();
		//
		// // 3.1.2.
		// // o sistema passa o crédito a realizar do imóvel origem para
		// // inclusão
		// this.inserirCreditoARealizarTransferencia(imovelDestino, creditoARealizar, usuarioLogado,
		// registroAtendimento);
		//
		// // 3.1.1.
		// // o sistema passa o crédito a realizar a ser transferido para
		// // cancelamento
		// this.cancelarCreditoARealizarTransferencia(creditoARealizar.getId(),
		// creditoARealizar.getImovel(), usuarioLogado);
		// }
		//
		// }

		// 4.Caso exista guia de pagamento selecionada na Coleção de guias de
		// pagamento
		// if(colecaoGuiasPagamento != null && !colecaoGuiasPagamento.isEmpty()){
		//
		// Iterator iterGuiasPagamento = colecaoGuiasPagamento.iterator();
		// while(iterGuiasPagamento.hasNext()){
		//
		// GuiaPagamento guiaPagamento = (GuiaPagamento) iterGuiasPagamento.next();
		//
		// // 3.1.2.
		// // o sistema passa a guia de pagamento do imóvel origem para
		// // inclusão
		// this.inserirGuiaPagamentoTransferencia(guiaPagamento, usuarioLogado, imovelDestino,
		// registroAtendimento);
		//
		// // 3.1.1.
		// // o sistema passa a guia de pagamento a ser transferido para
		// // cancelamento
		// this.manterGuiaPagamentoTransferencia(guiaPagamento, usuarioLogado);
		//
		// }
		// }

	}

	/**
	 * [US0184] Manter Débito A Cobrar Author: Vivianne Sousa Data: 11/06/2007
	 * 
	 * @author eduardo henrique
	 * @date 03/11/2008
	 *       Alteração no método para contabilização do Débito a Cobrar Cancelado.
	 * @param idDebitoAcobrar
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void cancelarDebitoACobrarTransferencia(Integer idDebitoAcobrar, Usuario usuarioLogado) throws ControladorException{

		Collection<ObjetoTransacao> colecaoDebitoACobrarContabilizacao = new ArrayList<ObjetoTransacao>();

		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();

		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.DEBITO_CREDITO_SITUACAO);
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.COLECAO_DEBITOS_A_COBRAR_CATEGORIA);
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.LOCALIDADE);
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.IMOVEL);

		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, idDebitoAcobrar));

		Collection colecaoDebitosACobrar = getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

		DebitoACobrar debitoACobrar = (DebitoACobrar) colecaoDebitosACobrar.iterator().next();

		debitoACobrar.setDebitoCreditoSituacaoAnterior(debitoACobrar.getDebitoCreditoSituacaoAtual());
		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
		debitoCreditoSituacao.setId(DebitoCreditoSituacao.CANCELADA);
		debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = null;

		if(debitoACobrar.getImovel() != null){
			registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_DEBITO_A_COBRAR_CANCELAR, debitoACobrar.getImovel().getId(),
							debitoACobrar.getImovel().getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		}else{
			registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_DEBITO_A_COBRAR_CANCELAR, new UsuarioAcaoUsuarioHelper(
							usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		}

		registradorOperacao.registrarOperacao(debitoACobrar);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(debitoACobrar);
		colecaoDebitoACobrarContabilizacao.add(debitoACobrar);

		// getControladorFinanceiro().contabilizarEventoFaturamento(colecaoDebitoACobrarContabilizacao,
		// EventoContabil.CANCELAMENTO_DEBITO_A_COBRAR);

	}

	/**
	 * [UC0183] - Inserir Débito A Cobrar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * @author eduardo henrique
	 * @date 03/11/2008
	 *       Alteração no método para contabilização do(s) Débito a Cobrar transferido(s).
	 * @param debitoACobrar
	 * @param imovelDestino
	 * @param usuarioLogado
	 * @param colecaoDebitoACobrarCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public void inserirDebitoACobrarTransferencia(DebitoACobrar debitoACobrarOrigem, Imovel imovelDestino, Usuario usuarioLogado,
					RegistroAtendimento registroAtendimento) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_DEBITO_A_COBRAR_INSERIR, imovelDestino.getId(),
						imovelDestino.getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_DEBITO_A_COBRAR_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// CARREGANDO O DEBITO DESTINO
		// ========================================================
		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();

		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("parcelamentoGrupo");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("cobrancaForma");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");

		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, debitoACobrarOrigem.getId()));

		Collection colecaoDebitoACobrar = this.getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

		DebitoACobrar debitoACobrar = (DebitoACobrar) colecaoDebitoACobrar.iterator().next();

		debitoACobrar.setDebitoACobrarCategorias(new HashSet<DebitoACobrarCategoria>());
		// ===================================================================================
		Collection<ObjetoTransacao> colecaoDebitosACobrarContabilizacao = new ArrayList<ObjetoTransacao>();

		// DADOS CADASTRAIS
		// =================================================================
		int numeroPrestacoesDebito = debitoACobrarOrigem.getNumeroPrestacaoDebito() - debitoACobrarOrigem.getNumeroPrestacaoCobradas();

		debitoACobrar.setNumeroPrestacaoDebito((short) numeroPrestacoesDebito);
		debitoACobrar.setNumeroPrestacaoCobradas((short) 0);
		debitoACobrar.setCodigoSetorComercial(imovelDestino.getSetorComercial().getCodigo());
		debitoACobrar.setImovel(imovelDestino);
		debitoACobrar.setLocalidade(imovelDestino.getLocalidade());
		debitoACobrar.setNumeroLote(imovelDestino.getLote());
		debitoACobrar.setNumeroQuadra(imovelDestino.getQuadra().getNumeroQuadra());
		debitoACobrar.setNumeroSubLote(imovelDestino.getSubLote());
		debitoACobrar.setQuadra(imovelDestino.getQuadra());

		debitoACobrar.setRegistroAtendimento(registroAtendimento);

		DebitoACobrarGeral debitoACobrarGeralOrigem = new DebitoACobrarGeral();
		debitoACobrarGeralOrigem.setId(debitoACobrar.getId());
		debitoACobrar.setDebitoACobrarGeralOrigem(debitoACobrarGeralOrigem);
		debitoACobrar.setId(null);

		// Insere o DebitoACobrarGeral na tabela debito_a_cobrar_geral
		DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
		Short indicadorHistorico = 2;
		debitoACobrarGeral.setIndicadorHistorico(indicadorHistorico);
		debitoACobrarGeral.setUltimaAlteracao(new Date());
		// ================================================================================

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		debitoACobrarGeral.setOperacaoEfetuada(operacaoEfetuada);
		debitoACobrarGeral.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(debitoACobrarGeral);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		Integer idDebitoGerado = (Integer) this.getControladorUtil().inserir(debitoACobrarGeral);
		debitoACobrarGeral.setId(idDebitoGerado);

		debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);
		debitoACobrar.setId(idDebitoGerado);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		debitoACobrar.setOperacaoEfetuada(operacaoEfetuada);
		debitoACobrar.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(debitoACobrar);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().inserir(debitoACobrar);

		// DEBITO_A_COBRAR_CATEGORIA
		// ========================================================
		FiltroDebitoACobrarCategoria filtroDebitoACobrarCategoria = new FiltroDebitoACobrarCategoria();

		filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade("comp_id.debitoACobrar");
		filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade("comp_id.categoria");
		filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade("categoria");
		filtroDebitoACobrarCategoria.adicionarCaminhoParaCarregamentoEntidade("debitoACobrar");

		filtroDebitoACobrarCategoria.adicionarParametro(new ParametroSimples(FiltroDebitoACobrarCategoria.ID_DEBITO_A_COBRAR,
						debitoACobrarOrigem.getId()));

		Collection colecaoDebitoACobrarCategoria = this.getControladorUtil().pesquisar(filtroDebitoACobrarCategoria,
						DebitoACobrarCategoria.class.getName());

		// Inserir DebitoACobrarCategoria
		Iterator icolecaoDebitoACobrarCategoria = colecaoDebitoACobrarCategoria.iterator();

		while(icolecaoDebitoACobrarCategoria.hasNext() && icolecaoDebitoACobrarCategoria.hasNext()){

			DebitoACobrarCategoria debitoACobrarCategoria = (DebitoACobrarCategoria) icolecaoDebitoACobrarCategoria.next();

			debitoACobrarCategoria.getComp_id().setDebitoACobrar(debitoACobrar);
			debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
			debitoACobrarCategoria.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * debitoACobrarCategoria.setOperacaoEfetuada(operacaoEfetuada);
			 * debitoACobrarCategoria.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(debitoACobrarCategoria);
			 */
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			getControladorUtil().inserir(debitoACobrarCategoria);
			debitoACobrar.getDebitoACobrarCategorias().add(debitoACobrarCategoria);
		}
		colecaoDebitosACobrarContabilizacao.add(debitoACobrar);

		// getControladorFinanceiro().contabilizarEventoFaturamento(colecaoDebitosACobrarContabilizacao,
		// EventoContabil.INCLUSAO_DEBITO_A_COBRAR);
		// ==============================================================================
	}

	/**
	 * [UC0195] - Manter Crédito a Realizar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * @author eduardo henrique
	 * @date 03/11/2008
	 *       Alteração no método para Contabilização do Cancelamento do Credito A Realizar.
	 * @param idCreditoARealizar
	 * @param imovel
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void cancelarCreditoARealizarTransferencia(Integer idCreditoARealizar, Imovel imovelDestino, Usuario usuarioLogado)
					throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_CREDITO_A_REALIZAR_CANCELAR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_CREDITO_A_REALIZAR_CANCELAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		Collection<ObjetoTransacao> colecaoCreditoARealizaCancelamento = new ArrayList<ObjetoTransacao>();

		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();

		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade(FiltroCreditoARealizar.DEBITO_CREDITO_SITUACAO_ATUAL);
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade(FiltroCreditoARealizar.CREDITO_A_REALIZAR_CATEGORIA);

		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.ID, idCreditoARealizar));

		Collection colecaoCreditoARealizar = getControladorUtil().pesquisar(filtroCreditoARealizar, CreditoARealizar.class.getName());

		CreditoARealizar creditoARealizar = (CreditoARealizar) colecaoCreditoARealizar.iterator().next();

		// [FS0003] - Verifica usuário com débito em cobrança
		// administrativa
		FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();

		filtroImovelCobrancaSituacao.adicionarCaminhoParaCarregamentoEntidade("cobrancaSituacao");

		filtroImovelCobrancaSituacao
						.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaSituacao.IMOVEL_ID, imovelDestino.getId()));

		Collection imovelCobrancaSituacaoEncontrada = getControladorUtil().pesquisar(filtroImovelCobrancaSituacao,
						ImovelCobrancaSituacao.class.getName());

		if(imovelCobrancaSituacaoEncontrada != null && !imovelCobrancaSituacaoEncontrada.isEmpty()){

			if(((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0)).getCobrancaSituacao() != null){

				if(((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0)).getCobrancaSituacao().getId()
								.equals(CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
								&& ((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0)).getDataRetiradaCobranca() == null){

					// Código comentado para a customização da cobrança administrativa CASAL
					// sessionContext.setRollbackOnly();
					// throw new
					// ControladorException("atencao.pesquisa.imovel.cobranca_administrativa");
				}
			}
		}

		// Debito Credito Situacao Anterior
		DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAnterior.setId(creditoARealizar.getDebitoCreditoSituacaoAtual().getId());

		creditoARealizar.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);

		// Debito Credito Situacao Atual
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.CANCELADA);

		creditoARealizar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		creditoARealizar.setOperacaoEfetuada(operacaoEfetuada);
		creditoARealizar.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(creditoARealizar);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(creditoARealizar);
		colecaoCreditoARealizaCancelamento.add(creditoARealizar);

		// getControladorFinanceiro().contabilizarEventoFaturamento(colecaoCreditoARealizaCancelamento,
		// EventoContabil.CANCELAMENTO_CREDITO_A_REALIZAR);
	}

	/**
	 * [UC0194] - Inserir Crédito a Realizar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * @author eduardo henrique
	 * @date 03/11/2008
	 *       Alteração no método para contabilização do(s) Credito a Realizar transferido(s).
	 * @param imovelDestino
	 * @param creditoARealizar
	 * @param usuarioLogado
	 * @param colecaoCreditoARealizarCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public void inserirCreditoARealizarTransferencia(Imovel imovelDestino, CreditoARealizar creditoARealizarOrigem, Usuario usuarioLogado,
					RegistroAtendimento registroAtendimento) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_CREDITO_A_REALIZAR_INSERIR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_CREDITO_A_REALIZAR_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// CARREGANDO O CREDITO DESTINO
		// ========================================================
		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();

		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("creditoTipo");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("origem");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("creditoOrigem");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral");

		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.ID, creditoARealizarOrigem.getId()));

		Collection colecaoCreditoARealizar = this.getControladorUtil().pesquisar(filtroCreditoARealizar, CreditoARealizar.class.getName());

		CreditoARealizar creditoARealizar = (CreditoARealizar) colecaoCreditoARealizar.iterator().next();

		creditoARealizar.setCreditoARealizarCategoria(new HashSet());
		// ===================================================================================
		Collection<ObjetoTransacao> colecaoCreditosARealizarContabilizacao = new ArrayList<ObjetoTransacao>();

		// DADOS CADASTRAIS
		// =================================================================
		int numeroPrestacoesRealizada = creditoARealizarOrigem.getNumeroPrestacaoCredito()
						- creditoARealizarOrigem.getNumeroPrestacaoRealizada();

		creditoARealizar.setNumeroPrestacaoRealizada((short) numeroPrestacoesRealizada);
		creditoARealizar.setNumeroPrestacaoRealizada((short) 0);

		// Imovel
		creditoARealizar.setImovel(imovelDestino);
		creditoARealizar.setLocalidade(imovelDestino.getLocalidade());
		creditoARealizar.setCodigoSetorComercial(imovelDestino.getSetorComercial().getCodigo());
		creditoARealizar.setNumeroLote(imovelDestino.getLote());
		creditoARealizar.setNumeroSubLote(imovelDestino.getSubLote());
		creditoARealizar.setQuadra(imovelDestino.getQuadra());
		creditoARealizar.setNumeroQuadra(Integer.valueOf(imovelDestino.getQuadra().getNumeroQuadra()));

		CreditoARealizarGeral creditoARealizarGeralOrigem = new CreditoARealizarGeral();
		creditoARealizarGeralOrigem.setId(creditoARealizar.getId());
		creditoARealizar.setOrigem(creditoARealizarGeralOrigem);
		creditoARealizar.setId(null);

		creditoARealizar.setRegistroAtendimento(registroAtendimento);
		creditoARealizar.setUltimaAlteracao(new Date());

		CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
		Short indicadorHistorico = 2;
		creditoARealizarGeral.setIndicadorHistorico(indicadorHistorico);
		creditoARealizarGeral.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		creditoARealizarGeral.setOperacaoEfetuada(operacaoEfetuada);
		creditoARealizarGeral.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(creditoARealizarGeral);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		Integer idGerado = (Integer) this.getControladorUtil().inserir(creditoARealizarGeral);

		// seta o id da Conta Geral gerada no objeto contaGeral
		creditoARealizarGeral.setId(idGerado);

		creditoARealizar.setCreditoARealizarGeral(creditoARealizarGeral);

		creditoARealizar.setId(idGerado);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		creditoARealizar.setOperacaoEfetuada(operacaoEfetuada);
		creditoARealizar.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(creditoARealizar);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// Inserido o objeto Crédito a Realizar
		getControladorUtil().inserir(creditoARealizar);

		// CREDITO_A_REALIZAR_CATEGORIA
		// ========================================================
		FiltroCreditoARealizarCategoria filtroCreditoARealizarCategoria = new FiltroCreditoARealizarCategoria();

		filtroCreditoARealizarCategoria.adicionarCaminhoParaCarregamentoEntidade("creditoARealizar");
		filtroCreditoARealizarCategoria.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroCreditoARealizarCategoria.adicionarParametro(new ParametroSimples(FiltroCreditoARealizarCategoria.ID_CREDITO_A_REALIZAR,
						creditoARealizarOrigem.getId()));

		Collection colecaoCreditoARealizarCategoria = this.getControladorUtil().pesquisar(filtroCreditoARealizarCategoria,
						CreditoARealizarCategoria.class.getName());

		// Inserir CreditoARealizarCategoria
		Iterator icolecaoCreditoARealizarCategoria = colecaoCreditoARealizarCategoria.iterator();

		while(icolecaoCreditoARealizarCategoria.hasNext()){

			CreditoARealizarCategoria creditoARealizarCategoria = (CreditoARealizarCategoria) icolecaoCreditoARealizarCategoria.next();
			Categoria categoria = creditoARealizarCategoria.getCategoria();

			creditoARealizarCategoria.setComp_id(new CreditoARealizarCategoriaPK(creditoARealizar, categoria));
			creditoARealizarCategoria.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			creditoARealizarCategoria.setOperacaoEfetuada(operacaoEfetuada);
			creditoARealizarCategoria.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(creditoARealizarCategoria);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			getControladorUtil().inserir(creditoARealizarCategoria);
			creditoARealizar.getCreditoARealizarCategoria().add(creditoARealizarCategoria);
		}
		colecaoCreditosARealizarContabilizacao.add(creditoARealizar);

		// ======================================================================================
		// getControladorFinanceiro().contabilizarEventoFaturamento(colecaoCreditosARealizarContabilizacao,
		// EventoContabil.INCLUSAO_CREDITO_A_REALIZAR);
	}

	/**
	 * [UC0188] - Manter Guia de Pagamento
	 * 
	 * @author Vivianne Sousa
	 * @since 11/06/2007
	 * @param guiaPagamento
	 * @param usuarioLogado
	 * @throws ControladorException
	 */

	public void manterGuiaPagamentoTransferencia(GuiaPagamento guiaPagamentoOrigem, Usuario usuarioLogado) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_GUIA_PAGAMENTO_CANCELAR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_GUIA_PAGAMENTO_CANCELAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// CARREGANDO A GUIA
		// ================================================================
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();

		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");

		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.ID, guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());

		GuiaPagamento guiaPagamento = (GuiaPagamento) colecaoGuiaPagamento.iterator().next();
		// ===================================================================================

		// String idCliente = guiaPagamento.getCliente().getId() == null ? "" :
		// guiaPagamento.getCliente().getId().toString();
		String idImovel = guiaPagamento.getImovel().getId() == null ? "" : guiaPagamento.getImovel().getId().toString();

		if(idImovel != null && !idImovel.equals("")){

			if(!idImovel.equalsIgnoreCase(guiaPagamento.getImovel().getId().toString())){

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.imovel.alterado");
			}

			FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();

			filtroImovelCobrancaSituacao.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaSituacao.IMOVEL_ID, idImovel));

			Collection imovelCobrancaSituacaoEncontrada = getControladorUtil().pesquisar(filtroImovelCobrancaSituacao,
							ImovelCobrancaSituacao.class.getName());

			if(imovelCobrancaSituacaoEncontrada != null && !imovelCobrancaSituacaoEncontrada.isEmpty()){

				if(((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0)).getCobrancaSituacao() != null){

					if(((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0)).getCobrancaSituacao().getId()
									.equals(CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
									&& ((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada).get(0))
													.getDataRetiradaCobranca() == null){

						// Código comentado para a customização da cobrança administrativa CASAL
						// sessionContext.setRollbackOnly();
						// throw new
						// ControladorException("atencao.pesquisa.imovel.cobranca_administrativa");

					}
				}
			}

		}

		/*
		 * if (idCliente != null && !idCliente.equals("")) { // Fazer o teste de
		 * cliente com cobranca administrativa.
		 * if
		 * (!idCliente.equalsIgnoreCase(guiaPagamento.getCliente().getId().toString())) {
		 * throw new ControladorException("atencao.cliente.alterado"); } }
		 */

		// guiaPagamento.setDebitoCreditoSituacaoAnterior(guiaPagamento
		// .getDebitoCreditoSituacaoAtual());
		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
		debitoCreditoSituacao.setId(DebitoCreditoSituacao.CANCELADA);
		guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

		guiaPagamento.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		guiaPagamento.setOperacaoEfetuada(operacaoEfetuada);
		guiaPagamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(guiaPagamento);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(guiaPagamento);

	}

	/**
	 * [UC0187] - Inserir Guia de Pagamento
	 * 
	 * @author Vivianne Sousa
	 * @since 11/06/2007
	 * @param guiaPagamento
	 * @param usuarioLogado
	 * @param imovelDestino
	 * @param colecaoGuiaPagamentoCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public Integer inserirGuiaPagamentoTransferencia(GuiaPagamento guiaPagamentoOrigem, Usuario usuarioLogado, Imovel imovelDestino,
					RegistroAtendimento registroAtendimento) throws ControladorException{

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_GUIA_PAGAMENTO_INSERIR,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_GUIA_PAGAMENTO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// CARREGANDO A GUIA
		// ================================================================
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();

		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");

		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.ID, guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());

		GuiaPagamento guiaPagamento = (GuiaPagamento) colecaoGuiaPagamento.iterator().next();

		guiaPagamento.setClientesGuiaPagamento(null);
		// ===================================================================================

		// DADOS CADASTRAIS
		// =================================================================
		// String idImovel = guiaPagamentoInserir.getImovel().getId() == null ?
		// "" : guiaPagamentoInserir.getImovel().getId().toString();
		// String codigoCliente = guiaPagamentoInserir.getCliente().getId() ==
		// null ? "" : guiaPagamentoInserir.getCliente().getId().toString();

		GuiaPagamentoGeral guiaPagamentoGeralOrigem = new GuiaPagamentoGeral();
		guiaPagamentoGeralOrigem.setId(guiaPagamento.getId());
		guiaPagamento.setOrigem(guiaPagamentoGeralOrigem);
		guiaPagamento.setId(null);

		GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
		Short indicadorHistorico = 2;
		guiaPagamentoGeral.setIndicadorHistorico(indicadorHistorico);
		guiaPagamentoGeral.setUltimaAlteracao(new Date());

		Integer idGuiaPagamentoGerado = (Integer) getControladorUtil().inserir(guiaPagamentoGeral);

		guiaPagamentoGeral.setId(idGuiaPagamentoGerado);
		guiaPagamento.setGuiaPagamentoGeral(guiaPagamentoGeral);
		guiaPagamento.setId(idGuiaPagamentoGerado);

		guiaPagamento.setImovel(imovelDestino);
		guiaPagamento.setLocalidade(imovelDestino.getLocalidade());

		guiaPagamento.setRegistroAtendimento(registroAtendimento);
		guiaPagamento.setDataInclusao(new Date());
		guiaPagamento.setUltimaAlteracao(new Date());
		// ====================================================================================

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		guiaPagamento.setOperacaoEfetuada(operacaoEfetuada);
		guiaPagamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(guiaPagamento);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().inserir(guiaPagamento);

		// CREDITO_A_REALIZAR_CATEGORIA
		// ========================================================
		FiltroGuiaPagamentoCategoria filtroGuiaPagamentoCategoria = new FiltroGuiaPagamentoCategoria();

		filtroGuiaPagamentoCategoria.adicionarCaminhoParaCarregamentoEntidade("guiaPagamento");
		filtroGuiaPagamentoCategoria.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.GUIA_PAGAMENTO_ID,
						guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamentoCategoria = this.getControladorUtil().pesquisar(filtroGuiaPagamentoCategoria,
						GuiaPagamentoCategoria.class.getName());

		Iterator icolecaoGuiaPagamentoCategoria = colecaoGuiaPagamentoCategoria.iterator();

		while(icolecaoGuiaPagamentoCategoria.hasNext()){

			GuiaPagamentoCategoria guiaPagamentoCategoria = (GuiaPagamentoCategoria) icolecaoGuiaPagamentoCategoria.next();
			Categoria categoria = guiaPagamentoCategoria.getCategoria();
			// TODO verificar como obter o Lancamento Item Contábil - eduardo henrique
			guiaPagamentoCategoria.setComp_id(new GuiaPagamentoCategoriaPK(categoria.getId(), guiaPagamento.getId(), null, null));
			guiaPagamentoCategoria.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			guiaPagamentoCategoria.setOperacaoEfetuada(operacaoEfetuada);
			guiaPagamentoCategoria.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(guiaPagamentoCategoria);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			getControladorUtil().inserir(guiaPagamentoCategoria);
		}

		if(imovelDestino != null){

			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovelDestino.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));

			Collection clientesImovel = getControladorUtil().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());

			if(clientesImovel != null && !clientesImovel.isEmpty()){

				Iterator clienteImovelIterator = clientesImovel.iterator();

				while(clienteImovelIterator.hasNext()){

					ClienteImovel clienteImovel = (ClienteImovel) clienteImovelIterator.next();

					ClienteGuiaPagamento clienteGuiaPagamento = new ClienteGuiaPagamento();
					clienteGuiaPagamento.setGuiaPagamento(guiaPagamento);
					clienteGuiaPagamento.setCliente(clienteImovel.getCliente());
					clienteGuiaPagamento.setClienteRelacaoTipo(clienteImovel.getClienteRelacaoTipo());
					clienteGuiaPagamento.setUltimaAlteracao(new Date());

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					clienteGuiaPagamento.setOperacaoEfetuada(operacaoEfetuada);
					clienteGuiaPagamento.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao.registrarOperacao(clienteGuiaPagamento);
					// ------------ REGISTRAR TRANSAÇÃO ----------------

					getControladorUtil().inserir(clienteGuiaPagamento);
				}

			}
		}

		return idGuiaPagamentoGerado;
	}

	/**
	 * [UC0145] - Inserir Conta
	 * 
	 * @author Vivianne Sousa
	 * @since 12/06/2007
	 * @param mesAnoConta
	 * @param imovel
	 * @param colecaoDebitoCobrado
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param colecaoCategoria
	 * @param consumoAgua
	 * @param consumoEsgoto
	 * @param percentualEsgoto
	 * @param dataVencimentoConta
	 * @param calcularValoresConta
	 * @param motivoInclusaoConta
	 * @throws ControladorException
	 */
	public Integer inserirContaTransferencia(Conta conta, Imovel imovelDestino, Usuario usuarioLogado) throws ControladorException{

		Integer retorno = Integer.valueOf(0);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_INSERIR_CONTA, imovelDestino.getId(),
						imovelDestino.getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_INSERIR_CONTA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// [FS0003] Verificar existência da conta
		// =========================================
		FiltroConta filtroConta = new FiltroConta();

		filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, imovelDestino.getId()));
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.REFERENCIA, conta.getReferencia()));

		Collection colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
		Conta contaInserir = null;

		if(colecaoConta != null && !colecaoConta.isEmpty()){

			Conta contaImovelDestino = (Conta) colecaoConta.iterator().next();

			/*
			 * Comentado por Raphael Rossiter em 25/06/2007 - Analistas(Aryed e
			 * Rosana)
			 */
			/*
			 * if
			 * (contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao
			 * .CANCELADA) ||
			 * contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao
			 * .CANCELADA_POR_RETIFICACAO)) {
			 * sessionContext.setRollbackOnly(); throw new ControladorException(
			 * "atencao.conta_ja_existente_cancelada", null, Util
			 * .formatarMesAnoReferencia(contaImovelDestino .getReferencia())); }
			 * else {
			 * sessionContext.setRollbackOnly();
			 * throw new
			 * ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia",
			 * null, imovelDestino.getId() + " já possui a conta com a
			 * referência " +
			 * Util.formatarMesAnoReferencia(contaImovelDestino.getReferencia()) +
			 * "."); }
			 */

			/*
			 * Colocado por Raphael Rossiter em 25/06/2007 - Analistas(Aryed e
			 * Rosana)
			 */
			if(!contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA)
							&& !contaImovelDestino.getDebitoCreditoSituacaoAtual().getId()
											.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)){

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia", null, imovelDestino.getId()
								+ " já possui a conta com a referência "
								+ Util.formatarMesAnoReferencia(contaImovelDestino.getReferencia()) + ".");
			}

		}

		filtroConta.limparListaParametros();

		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaMotivoCancelamento");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaMotivoInclusao");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaBancaria");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("faturamentoTipo");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("registroAtendimento");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("consumoTarifa");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("motivoNaoEntregaDocumento");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("funcionarioEntrega");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaMotivoRevisao");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaMotivoRetificacao");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("funcionarioLeitura");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoAutomaticoMovimento");

		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, conta.getId()));

		colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

		contaInserir = (Conta) colecaoConta.iterator().next();

		/*
		 * Colocado por Raphael Rossiter em 18/10/2007 OBJ: Carregar o anoMes
		 * Contabil na conta que será cancelada
		 */
		conta.setReferenciaContabil(contaInserir.getReferenciaContabil());

		/*
		 * [SF002] - Gerar dados da conta
		 * ======================================================================
		 */

		// Inseri a conta na tabela Conta_Geral
		// =======================================================================

		ContaGeral contaGeralInserir = new ContaGeral();

		contaGeralInserir.setDebitoAutomaticoMovimentos(contaInserir.getDebitoAutomaticoMovimento());

		// valor fixo
		Short indicadorHistorico = 2;
		contaGeralInserir.setIndicadorHistorico(indicadorHistorico);
		// Ultima Alteração
		contaGeralInserir.setUltimaAlteracao(new Date());
		Integer idGerado = null;
		idGerado = (Integer) this.getControladorUtil().inserir(contaGeralInserir);

		// seta o id da Conta Geral gerada no objeto contaGeral
		// contaGeralInserir.setId(idGerado);

		// =======================================================================

		// =======================================================================
		// Adiciona o idGerado da tabela Conta Geral
		contaInserir.setId(idGerado);
		// setando a conta geral na conta

		// Adiciona o id do imóvel selecionado
		contaInserir.setImovel(imovelDestino);

		// Localidade do imóvel
		contaInserir.setLocalidade(imovelDestino.getLocalidade());
		// Quadra do imóvel
		contaInserir.setQuadraConta(imovelDestino.getQuadra());
		// Lote do imóvel
		contaInserir.setLote(imovelDestino.getLote());
		// Sublote do imóvel
		contaInserir.setSubLote(imovelDestino.getSubLote());
		// Código do setor comercial do imóvel
		contaInserir.setCodigoSetorComercial(imovelDestino.getSetorComercial().getCodigo());
		// Número da quadra do imóvel
		contaInserir.setQuadra(Integer.valueOf(imovelDestino.getQuadra().getNumeroQuadra()));

		// LIGACAO_AGUA_SITUACAO
		contaInserir.setLigacaoAguaSituacao(imovelDestino.getLigacaoAguaSituacao());

		// LIGACAO_ESGOTO_SITUACAO
		contaInserir.setLigacaoEsgotoSituacao(imovelDestino.getLigacaoEsgotoSituacao());

		// IMOVEL_PERFIL
		contaInserir.setImovelPerfil(imovelDestino.getImovelPerfil());

		// CONTA_ORIGEM
		ContaGeral contaOrigem = new ContaGeral();
		contaOrigem.setId(conta.getId());
		contaInserir.setOrigem(contaOrigem);

		// Ultima Alteração
		contaInserir.setUltimaAlteracao(new Date());
		// =======================================================================

		// [UC0609] Transferência de Débitos/Créditos
		// [FS0005] Conta em revisão
		if(contaInserir.getDataRevisao() != null){
			contaInserir.setDataRevisao(null);
			contaInserir.setContaMotivoRevisao(null);
		}

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		contaInserir.setOperacaoEfetuada(operacaoEfetuada);
		contaInserir.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(contaInserir);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		contaInserir.setContaCategorias(null);
		contaInserir.setDebitoCobrados(null);
		contaInserir.setCreditoRealizados(null);
		contaInserir.setClienteContas(null);
		contaInserir.setContaImpostosDeduzidos(null);

		// Inserindo no BD
		Integer idContaGerado = (Integer) this.getControladorUtil().inserir(contaInserir);

		retorno = idContaGerado;

		/*
		 * Inserir na tabela CONTA_CATEGORIA e CONTA_CATEGORIA_CONSUMO_FAIXA
		 * ====================================================================
		 */
		this.inserirContaCategoriaTransferencia(conta, contaInserir);

		/*
		 * Inserir na tabela CLIENTE_CONTA
		 * ======================================================================
		 */
		this.getControladorFaturamento().inserirClienteConta(contaInserir, imovelDestino, null);

		/*
		 * Gerar os débitos cobrados - DEBITO_COBRADO e DEBITO_COBRADO_CATEGORIA
		 * ======================================================================
		 */
		this.inserirDebitoCobradoTransferencia(conta, contaInserir);

		/*
		 * Gerar os créditos realizados - CREDITO_REALIZADO e
		 * CREDITO_REALIZADO_CATEGORIA
		 * ======================================================================
		 */
		this.inserirCreditoRealizadoTransferencia(conta, contaInserir);

		/*
		 * Gerar os impostos - CONTA_IMPOSTOS_DEDUZIDOS
		 * ======================================================================
		 */
		this.inserirContaImpostosDeduzidosTransferencia(conta, contaInserir);

		return retorno;
	}

	/**
	 * [UC0145] - Inserir Conta Author: Raphael Rossiter Data: 13/06/2007
	 * Inclui, na tabela CONTA_CATEGORIA, a(s) categoria(s) e sua(s)
	 * respectiva(s) quantidade(s) de economia da lista do passo 5.8 do fluxo
	 * principal e os atributos retornados pelo [UC0120] para cada categoria,
	 * caso o [UC0120] não tenha sido chamado, os valores correspondentes devem
	 * ser nulos.
	 * Caso o [UC0120] não tenha sido chamado não gravar a tabela
	 * CONTA_CATEGORIA_CONSUMO_FAIXA
	 * 
	 * @throws ControladorException
	 */
	protected void inserirContaCategoriaTransferencia(Conta contaOrigem, Conta contaDestino) throws ControladorException{

		FiltroContaCategoria filtroContaCategoria = new FiltroContaCategoria();

		filtroContaCategoria.adicionarCaminhoParaCarregamentoEntidade("comp_id.categoria");
		filtroContaCategoria.adicionarCaminhoParaCarregamentoEntidade("comp_id.subcategoria");

		filtroContaCategoria.adicionarParametro(new ParametroSimples(FiltroContaCategoria.CONTA_ID, contaOrigem.getId()));

		Collection colecaoContaCategoria = this.getControladorUtil().pesquisar(filtroContaCategoria, ContaCategoria.class.getName());

		if(colecaoContaCategoria != null && !colecaoContaCategoria.isEmpty()){

			ContaCategoria contaCategoriaInserir = null;
			Iterator itColecaoContaCategoria = colecaoContaCategoria.iterator();

			while(itColecaoContaCategoria.hasNext()){

				contaCategoriaInserir = (ContaCategoria) itColecaoContaCategoria.next();

				contaCategoriaInserir.getComp_id().setConta(contaDestino);
				contaCategoriaInserir.setUltimaAlteracao(new Date());
				contaCategoriaInserir.setContaCategoriaConsumoFaixas(null);

				// CONTA_CATEGORIA
				this.getControladorUtil().inserir(contaCategoriaInserir);

				// CONTA_CATEGORIA_CONSUMO_FAIXA
				this.inserirContaCategoriaConsumoFaixaTransferencia(contaOrigem, contaCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0145] - Inserir Conta Author: Raphael Rossiter Data: 13/06/2007
	 * Inclui a(s) faixa(s) de consumo por categoria na tabela
	 * CONTA_CATEGORIA_CONSUMO_FAIXA com os atributos retornados pelo [UC0120]
	 * por categoria e para cada faixa da categoria, caso o [UC0120] não tenha
	 * sido chamado não gravar a tabela.
	 * 
	 * @throws ControladorException
	 */
	protected void inserirContaCategoriaConsumoFaixaTransferencia(Conta contaOrigem, ContaCategoria contaCategoriaDestino)
					throws ControladorException{

		FiltroContaCategoriaConsumoFaixa filtroContaCategoriaConsumoFaixa = new FiltroContaCategoriaConsumoFaixa();

		filtroContaCategoriaConsumoFaixa.adicionarCaminhoParaCarregamentoEntidade("contaCategoria");
		filtroContaCategoriaConsumoFaixa.adicionarCaminhoParaCarregamentoEntidade("categoria");
		filtroContaCategoriaConsumoFaixa.adicionarCaminhoParaCarregamentoEntidade("subcategoria");

		filtroContaCategoriaConsumoFaixa.adicionarParametro(new ParametroSimples(FiltroContaCategoriaConsumoFaixa.CONTA_ID, contaOrigem
						.getId()));

		filtroContaCategoriaConsumoFaixa.adicionarParametro(new ParametroSimples(FiltroContaCategoriaConsumoFaixa.CATEGORIA_ID,
						contaCategoriaDestino.getComp_id().getCategoria().getId()));

		filtroContaCategoriaConsumoFaixa.adicionarParametro(new ParametroSimples(FiltroContaCategoriaConsumoFaixa.SUBCATEGORIA_ID,
						contaCategoriaDestino.getComp_id().getSubcategoria().getId()));

		Collection colecaoContaCategoriaConsumoFaixa = this.getControladorUtil().pesquisar(filtroContaCategoriaConsumoFaixa,
						ContaCategoriaConsumoFaixa.class.getName());

		if(colecaoContaCategoriaConsumoFaixa != null && !colecaoContaCategoriaConsumoFaixa.isEmpty()){

			ContaCategoriaConsumoFaixa contaCategoriaConsumoFaixaInserir = null;
			Iterator itColecaoContaCategoriaConsumoFaixa = colecaoContaCategoriaConsumoFaixa.iterator();

			while(itColecaoContaCategoriaConsumoFaixa.hasNext()){

				contaCategoriaConsumoFaixaInserir = (ContaCategoriaConsumoFaixa) itColecaoContaCategoriaConsumoFaixa.next();

				contaCategoriaConsumoFaixaInserir.setContaCategoria(contaCategoriaDestino);
				contaCategoriaConsumoFaixaInserir.setUltimaAlteracao(new Date());

				// CONTA_CATEGORIA_CONSUMO_FAIXA
				this.getControladorUtil().inserir(contaCategoriaConsumoFaixaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * @throws ControladorException
	 */
	protected void inserirDebitoCobradoTransferencia(Conta contaOrigem, Conta contaDestino) throws ControladorException{

		FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();

		filtroDebitoCobrado.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroDebitoCobrado.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroDebitoCobrado.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroDebitoCobrado.adicionarCaminhoParaCarregamentoEntidade("parcelamentoGrupo");

		filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_ID, contaOrigem.getId()));

		Collection colecaoDebitoCobrado = this.getControladorUtil().pesquisar(filtroDebitoCobrado, DebitoCobrado.class.getName());

		if(colecaoDebitoCobrado != null && !colecaoDebitoCobrado.isEmpty()){

			DebitoCobrado debitoCobradoOrigem = null;
			DebitoCobrado debitoCobradoInserir = null;
			Iterator itColecaoDebitoCobrado = colecaoDebitoCobrado.iterator();

			while(itColecaoDebitoCobrado.hasNext()){

				debitoCobradoOrigem = (DebitoCobrado) itColecaoDebitoCobrado.next();

				debitoCobradoInserir = debitoCobradoOrigem;

				debitoCobradoInserir.setId(null);
				debitoCobradoInserir.setDebitoCobradoCategorias(null);

				debitoCobradoInserir.setConta(contaDestino);

				debitoCobradoInserir.setLocalidade(contaDestino.getLocalidade());

				debitoCobradoInserir.setCodigoSetorComercial(contaDestino.getCodigoSetorComercial());

				debitoCobradoInserir.setQuadra(contaDestino.getQuadraConta());
				debitoCobradoInserir.setNumeroQuadra(contaDestino.getQuadra());

				debitoCobradoInserir.setNumeroLote(contaDestino.getLote());
				debitoCobradoInserir.setNumeroSubLote(contaDestino.getSubLote());

				debitoCobradoInserir.setUltimaAlteracao(new Date());

				// DEBITO_COBRADO
				Integer idGerado = (Integer) this.getControladorUtil().inserir(debitoCobradoInserir);
				debitoCobradoInserir.setId(idGerado);

				// DEBITO_COBRADO_CATEGORIA
				this.inserirDebitoCobradoCategoriaTransferencia(debitoCobradoOrigem, debitoCobradoInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * @throws ControladorException
	 */
	protected void inserirDebitoCobradoCategoriaTransferencia(DebitoCobrado debitoCobradoOrigem, DebitoCobrado debitoCobradoDestino)
					throws ControladorException{

		FiltroDebitoCobradoCategoria filtroDebitoCobradoCategoria = new FiltroDebitoCobradoCategoria();

		filtroDebitoCobradoCategoria.adicionarCaminhoParaCarregamentoEntidade("debitoCobrado");
		filtroDebitoCobradoCategoria.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroDebitoCobradoCategoria.adicionarParametro(new ParametroSimples(FiltroDebitoCobradoCategoria.DEBITO_COBRADO_ID,
						debitoCobradoOrigem.getId()));

		Collection colecaoDebitoCobradoCategoria = this.getControladorUtil().pesquisar(filtroDebitoCobradoCategoria,
						DebitoCobradoCategoria.class.getName());

		if(colecaoDebitoCobradoCategoria != null && !colecaoDebitoCobradoCategoria.isEmpty()){

			DebitoCobradoCategoria debitoCobradoCategoriaInserir = null;
			Iterator itColecaoDebitoCobradoCategoria = colecaoDebitoCobradoCategoria.iterator();

			while(itColecaoDebitoCobradoCategoria.hasNext()){

				debitoCobradoCategoriaInserir = (DebitoCobradoCategoria) itColecaoDebitoCobradoCategoria.next();

				debitoCobradoCategoriaInserir.setDebitoCobrado(debitoCobradoDestino);

				debitoCobradoCategoriaInserir.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(debitoCobradoCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * @throws ControladorException
	 */
	protected void inserirCreditoRealizadoTransferencia(Conta contaOrigem, Conta contaDestino) throws ControladorException{

		FiltroCreditoRealizado filtroCreditoRealizado = new FiltroCreditoRealizado();

		filtroCreditoRealizado.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroCreditoRealizado.adicionarCaminhoParaCarregamentoEntidade("creditoTipo");
		filtroCreditoRealizado.adicionarCaminhoParaCarregamentoEntidade("creditoOrigem");

		filtroCreditoRealizado.adicionarParametro(new ParametroSimples(FiltroCreditoRealizado.CONTA_ID, contaOrigem.getId()));

		Collection colecaoCreditoRealizado = this.getControladorUtil().pesquisar(filtroCreditoRealizado, CreditoRealizado.class.getName());

		if(colecaoCreditoRealizado != null && !colecaoCreditoRealizado.isEmpty()){

			CreditoRealizado creditoRealizadoOrigem = null;
			CreditoRealizado creditoRealizadoInserir = null;
			Iterator itColecaoCreditoRealizado = colecaoCreditoRealizado.iterator();

			while(itColecaoCreditoRealizado.hasNext()){

				creditoRealizadoOrigem = (CreditoRealizado) itColecaoCreditoRealizado.next();

				creditoRealizadoInserir = creditoRealizadoOrigem;

				creditoRealizadoInserir.setId(null);
				creditoRealizadoInserir.setCreditoRealizadoCategorias(null);

				creditoRealizadoInserir.setConta(contaDestino);

				creditoRealizadoInserir.setLocalidade(contaDestino.getLocalidade());

				creditoRealizadoInserir.setCodigoSetorComercial(contaDestino.getCodigoSetorComercial());

				creditoRealizadoInserir.setQuadra(contaDestino.getQuadraConta());
				creditoRealizadoInserir.setNumeroQuadra(contaDestino.getQuadra());

				creditoRealizadoInserir.setNumeroLote(contaDestino.getLote());
				creditoRealizadoInserir.setNumeroSubLote(contaDestino.getSubLote());

				creditoRealizadoInserir.setUltimaAlteracao(new Date());

				// CREDITO_REALIZADO
				Integer idGerado = (Integer) this.getControladorUtil().inserir(creditoRealizadoInserir);
				creditoRealizadoInserir.setId(idGerado);

				// CREDITO_REALIZADO_CATEGORIA
				this.inserirCreditoRealizadoCategoriaTransferencia(creditoRealizadoOrigem, creditoRealizadoInserir);
			}
		}

	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * @throws ControladorException
	 */
	protected void inserirCreditoRealizadoCategoriaTransferencia(CreditoRealizado creditoRealizadoOrigem,
					CreditoRealizado creditoRealizadoDestino) throws ControladorException{

		FiltroCreditoRealizadoCategoria filtroCreditoRealizadoCategoria = new FiltroCreditoRealizadoCategoria();

		filtroCreditoRealizadoCategoria.adicionarCaminhoParaCarregamentoEntidade("creditoRealizado");
		filtroCreditoRealizadoCategoria.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroCreditoRealizadoCategoria.adicionarParametro(new ParametroSimples(FiltroCreditoRealizadoCategoria.CREDITO_REALIZADO_ID,
						creditoRealizadoOrigem.getId()));

		Collection colecaoCreditoRealizadoCategoria = this.getControladorUtil().pesquisar(filtroCreditoRealizadoCategoria,
						CreditoRealizadoCategoria.class.getName());

		if(colecaoCreditoRealizadoCategoria != null && !colecaoCreditoRealizadoCategoria.isEmpty()){

			CreditoRealizadoCategoria creditoRealizadoCategoriaInserir = null;
			Iterator itColecaoCreditoRealizadoCategoria = colecaoCreditoRealizadoCategoria.iterator();

			while(itColecaoCreditoRealizadoCategoria.hasNext()){

				creditoRealizadoCategoriaInserir = (CreditoRealizadoCategoria) itColecaoCreditoRealizadoCategoria.next();

				creditoRealizadoCategoriaInserir.setCreditoRealizado(creditoRealizadoDestino);

				creditoRealizadoCategoriaInserir.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(creditoRealizadoCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * @throws ControladorException
	 */
	protected void inserirContaImpostosDeduzidosTransferencia(Conta contaOrigem, Conta contaDestino) throws ControladorException{

		FiltroContaImpostosDeduzidos filtroContaImpostosDeduzidos = new FiltroContaImpostosDeduzidos();

		filtroContaImpostosDeduzidos.adicionarCaminhoParaCarregamentoEntidade("impostoTipo");

		filtroContaImpostosDeduzidos.adicionarParametro(new ParametroSimples(FiltroContaImpostosDeduzidos.CONTA_ID, contaOrigem.getId()));

		Collection colecaoContaImpostosDeduzidos = this.getControladorUtil().pesquisar(filtroContaImpostosDeduzidos,
						ContaImpostosDeduzidos.class.getName());

		if(colecaoContaImpostosDeduzidos != null && !colecaoContaImpostosDeduzidos.isEmpty()){

			ContaImpostosDeduzidos contaImpostosDeduzidosInserir = null;
			Iterator itColecaoContaImpostosDeduzidos = colecaoContaImpostosDeduzidos.iterator();

			while(itColecaoContaImpostosDeduzidos.hasNext()){

				contaImpostosDeduzidosInserir = (ContaImpostosDeduzidos) itColecaoContaImpostosDeduzidos.next();
				contaImpostosDeduzidosInserir.setId(null);

				contaImpostosDeduzidosInserir.setConta(contaDestino);

				contaImpostosDeduzidosInserir.setUltimaAlteracao(new Date());

				// CONTA_IMPOSTOS_DEDUZIDOS
				this.getControladorUtil().inserir(contaImpostosDeduzidosInserir);
			}
		}

	}

	/**
	 * [UC0594] Gerar Relação de Parcelamento
	 * 
	 * @author Ana Maria
	 * @date 30/05/2007
	 */
	public Collection<RelacaoParcelamentoRelatorioHelper> filtrarRelacaoParcelamento(
					FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento) throws ControladorException{

		Collection<RelacaoParcelamentoRelatorioHelper> colecaoRelacaoParcelamento = new ArrayList();

		try{

			colecaoRelacaoParcelamento = repositorioCobranca.pesquisarRelacaoParcelamento(filtrarRelacaoParcelamento);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return colecaoRelacaoParcelamento;
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * @author Sávio Luiz
	 * @created 15/06/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoAtividadeComandoSemRealizacao(String idsAcoesSemPrazoValidade)
					throws ControladorException{

		try{

			FiltroProcessoIniciado filtroProcessoIniciado = new FiltroProcessoIniciado(FiltroProcessoIniciado.DATA_HORA_TERMINO);
			filtroProcessoIniciado.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.ID_PROCESSO, Integer
							.valueOf(Processo.GERAR_RESUMO_ACOES_COBRANCA_EVENTUAL)));
			filtroProcessoIniciado.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.PROCESSO_SITUACAO_ID,
							ProcessoSituacao.CONCLUIDO));
			filtroProcessoIniciado.adicionarParametro(new ParametroNaoNulo(FiltroProcessoIniciado.DATA_HORA_TERMINO));

			Collection<ProcessoIniciado> colecaoProcessosIniciados = getControladorUtil().pesquisar(filtroProcessoIniciado,
							ProcessoIniciado.class.getName());

			// data último processamento do resumo (maior PROI_TMTERMINO da tabela PROCESSO_INICIADO
			// com PROC_ID=80 e PRST_ID=2 (concluído))
			Date dataUltimoProcessamentoResumo = null;
			if(!Util.isVazioOrNulo(colecaoProcessosIniciados)){
				ProcessoIniciado processoIniciado = (ProcessoIniciado) colecaoProcessosIniciados.toArray()[colecaoProcessosIniciados.size() - 1];
				if(processoIniciado != null && processoIniciado.getDataHoraTermino() != null){
					dataUltimoProcessamentoResumo = processoIniciado.getDataHoraTermino();
				}
			}

			return repositorioCobranca.pesquisarCobrancaAcaoAtividadeComandoSemRealizacao(idsAcoesSemPrazoValidade,
							dataUltimoProcessamentoResumo);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * [UC0616] - Informar Dados para Consulta do Resumo das Ações de Cobrança
	 * Eventual
	 * 
	 * @author Sávio Luiz
	 * @date 25/06/2007
	 */
	public InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventual(String dataEmissaoInicial,
					String dataEmissaoFinal, String idCobrancaAcaoAtividadeComando, String tituloCobrancaAcaoAtividadeComando,
					String[] idsCobrancaGrupo, String[] idsGerenciaRegional, Integer idEloPolo, Integer idLocalidade,
					Integer idSetorComercial, Integer nmQuadra, String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
					String[] idsLigacaoEsgotoSituacao, String[] idsCategoria, String[] idsEsferaPoder, String[] idsEmpresas,
					Integer idUnidadeNegocio, String[] idsCobrancaAcao) throws ControladorException{

		InformarDadosGeracaoResumoAcaoConsultaEventualHelper retorno = new InformarDadosGeracaoResumoAcaoConsultaEventualHelper();

		if(dataEmissaoInicial != null && !dataEmissaoInicial.equals("")){
			Date dataEmissaoInicialDate = Util.converteStringParaDate(dataEmissaoInicial);
			retorno.setDataInicialEmissao(dataEmissaoInicialDate);
		}

		if(dataEmissaoFinal != null && !dataEmissaoFinal.equals("")){
			Date dataEmissaoFinalDate = Util.converteStringParaDate(dataEmissaoFinal);
			dataEmissaoFinalDate = Util.formatarDataFinal(dataEmissaoFinalDate);
			retorno.setDataFinalEmissao(dataEmissaoFinalDate);
		}

		if(idCobrancaAcaoAtividadeComando != null){
			Integer idCobrancaAcaoAtividadeComandoInteger = Util.converterStringParaInteger(idCobrancaAcaoAtividadeComando);
			retorno.setIdCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComandoInteger);
		}

		if(tituloCobrancaAcaoAtividadeComando != null){
			retorno.setTituloCobrancaAcaoAtividadeComando(tituloCobrancaAcaoAtividadeComando);
		}

		Collection colecaoPesquisa = null;
		if(idEloPolo != null){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, idEloPolo));

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Elo Pólo");
			}
			Localidade eloPolo = (Localidade) Util.retonarObjetoDeColecao(colecaoPesquisa);

			if(eloPolo.getLocalidade() == null){
				throw new ControladorException("atencao.localidade.nao.elo");
			}else if(!eloPolo.getLocalidade().getId().equals(Integer.valueOf(eloPolo.getId()))){

				throw new ControladorException("atencao.localidade.nao.elo");

			}

			retorno.setEloPolo(eloPolo);

		}
		if(idUnidadeNegocio != null){

			FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

			filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(FiltroUnidadeNegocio.ID, idUnidadeNegocio));

			filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(FiltroUnidadeNegocio.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroUnidadeNegocio, UnidadeNegocio.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "UnidadeNegocio");
			}

			UnidadeNegocio unidadeNegocio = (UnidadeNegocio) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setUnidadeNegocio(unidadeNegocio);
		}
		if(idLocalidade != null){

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, idLocalidade));

			filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Localidade");
			}

			Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(localidade);
		}
		if(idSetorComercial != null){

			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.ID, idSetorComercial));

			filtroSetorComercial.adicionarParametro(new ParametroSimples(FiltroSetorComercial.INDICADORUSO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Setor Comercial");
			}

			SetorComercial setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(setorComercial.getLocalidade());
			retorno.setSetorComercial(setorComercial);

		}
		if(idSetorComercial != null && nmQuadra != null){

			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.ID_SETORCOMERCIAL, idSetorComercial));

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.NUMERO_QUADRA, nmQuadra));

			filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());

			if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Quadra");
			}

			Quadra quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(quadra.getSetorComercial().getLocalidade());
			retorno.setSetorComercial(quadra.getSetorComercial());
			retorno.setQuadra(quadra);

		}

		if(idsGerenciaRegional != null && idsGerenciaRegional.length > 0){

			Collection colecaoGerenciaRegional = new ArrayList();
			FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

			GerenciaRegional gerenciaRegional = null;

			for(int index = 0; idsGerenciaRegional.length > index; index++){

				if(idsGerenciaRegional[index] != null && idsGerenciaRegional[index].length() > 0){

					filtroGerenciaRegional.adicionarParametro(new ParametroSimples(FiltroGerenciaRegional.ID, idsGerenciaRegional[index]));

					filtroGerenciaRegional.adicionarParametro(new ParametroSimples(FiltroGerenciaRegional.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroGerenciaRegional, GerenciaRegional.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Gerencia Regional");
					}

					gerenciaRegional = (GerenciaRegional) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroGerenciaRegional.limparListaParametros();

					colecaoGerenciaRegional.add(gerenciaRegional);
				}
			}

			if(!colecaoGerenciaRegional.isEmpty()){
				retorno.setColecaoGerenciaRegional(colecaoGerenciaRegional);
			}

		}

		if(idsCobrancaAcao != null && idsCobrancaAcao.length > 0){

			Collection colecaoCobrancaAcao = new ArrayList();
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();

			CobrancaAcao cobrancaAcao = null;

			for(int index = 0; idsCobrancaAcao.length > index; index++){

				if(idsCobrancaAcao[index] != null && idsCobrancaAcao[index].length() > 0){

					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idsCobrancaAcao[index]));

					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Ação Cobrança");
					}

					cobrancaAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaAcao.limparListaParametros();

					colecaoCobrancaAcao.add(cobrancaAcao);
				}
			}

			if(!colecaoCobrancaAcao.isEmpty()){
				retorno.setColecaoCobrancaAcao(colecaoCobrancaAcao);
			}

		}

		if(idsCobrancaGrupo != null && idsCobrancaGrupo.length > 0){

			Collection colecaoCobrancaGrupo = new ArrayList();
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

			CobrancaGrupo cobrancaGrupo = null;

			for(int index = 0; idsCobrancaGrupo.length > index; index++){

				if(idsCobrancaGrupo[index] != null && idsCobrancaGrupo[index].length() > 0){

					filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.ID, idsCobrancaGrupo[index]));

					filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(FiltroCobrancaGrupo.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroCobrancaGrupo, CobrancaGrupo.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Cobrança Grupo");
					}

					cobrancaGrupo = (CobrancaGrupo) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaGrupo.limparListaParametros();

					colecaoCobrancaGrupo.add(cobrancaGrupo);
				}
			}

			if(!colecaoCobrancaGrupo.isEmpty()){
				retorno.setColecaoCobrancaGrupo(colecaoCobrancaGrupo);
			}

		}

		if(idsImovelPerfil != null && idsImovelPerfil.length > 0){

			Collection colecaoImovelPerfil = new ArrayList();
			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();

			ImovelPerfil imovelPerfil = null;

			for(int index = 0; idsImovelPerfil.length > index; index++){

				if(idsImovelPerfil[index] != null && idsImovelPerfil[index].length() > 0){

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(FiltroImovelPerfil.ID, idsImovelPerfil[index]));

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(FiltroImovelPerfil.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroImovelPerfil, ImovelPerfil.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Perfil do Imóvel");
					}

					imovelPerfil = (ImovelPerfil) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroImovelPerfil.limparListaParametros();

					colecaoImovelPerfil.add(imovelPerfil);
				}
			}

			if(!colecaoImovelPerfil.isEmpty()){
				retorno.setColecaoImovelPerfil(colecaoImovelPerfil);
			}

		}

		if(idsLigacaoAguaSituacao != null && idsLigacaoAguaSituacao.length > 0){

			Collection colecaoLigacaoAguaSituacao = new ArrayList();
			FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao();

			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			for(int index = 0; idsLigacaoAguaSituacao.length > index; index++){

				if(idsLigacaoAguaSituacao[index] != null && idsLigacaoAguaSituacao[index].length() > 0){
					filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoAguaSituacao.ID,
									idsLigacaoAguaSituacao[index]));

					filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoAguaSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLigacaoAguaSituacao, LigacaoAguaSituacao.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Ligação de Água");
					}

					ligacaoAguaSituacao = (LigacaoAguaSituacao) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoAguaSituacao.limparListaParametros();

					colecaoLigacaoAguaSituacao.add(ligacaoAguaSituacao);
				}
			}

			if(!colecaoLigacaoAguaSituacao.isEmpty()){
				retorno.setColecaoLigacaoAguaSituacao(colecaoLigacaoAguaSituacao);
			}

		}

		if(idsLigacaoEsgotoSituacao != null && idsLigacaoEsgotoSituacao.length > 0){

			Collection colecaoLigacaoEsgotoSituacao = new ArrayList();
			FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao();

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			for(int index = 0; idsLigacaoEsgotoSituacao.length > index; index++){

				if(idsLigacaoEsgotoSituacao[index] != null && idsLigacaoEsgotoSituacao[index].length() > 0){

					filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoEsgotoSituacao.ID,
									idsLigacaoEsgotoSituacao[index]));

					filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroLigacaoEsgotoSituacao,
									LigacaoEsgotoSituacao.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Ligação de Esgoto");
					}

					ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoEsgotoSituacao.limparListaParametros();

					colecaoLigacaoEsgotoSituacao.add(ligacaoEsgotoSituacao);
				}
			}

			if(!colecaoLigacaoEsgotoSituacao.isEmpty()){
				retorno.setColecaoLigacaoEsgotoSituacao(colecaoLigacaoEsgotoSituacao);
			}

		}

		if(idsCategoria != null && idsCategoria.length > 0){

			Collection colecaoCategoria = new ArrayList();
			FiltroCategoria filtroCategoria = new FiltroCategoria();

			Categoria categoria = null;

			for(int index = 0; idsCategoria.length > index; index++){

				if(idsCategoria[index] != null && idsCategoria[index].length() > 0){

					filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.CODIGO, idsCategoria[index]));

					filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroCategoria, Categoria.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Categoria");
					}

					categoria = (Categoria) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCategoria.limparListaParametros();

					colecaoCategoria.add(categoria);
				}
			}

			if(!colecaoCategoria.isEmpty()){
				retorno.setColecaoCategoria(colecaoCategoria);
			}
		}

		if(idsEsferaPoder != null && idsEsferaPoder.length > 0){

			Collection colecaoEsferaPoder = new ArrayList();
			FiltroEsferaPoder filtroEsferaPoder = new FiltroEsferaPoder();

			EsferaPoder esferaPoder = null;

			for(int index = 0; idsEsferaPoder.length > index; index++){

				if(idsEsferaPoder[index] != null && idsEsferaPoder[index].length() > 0){

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(FiltroEsferaPoder.ID, idsEsferaPoder[index]));

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(FiltroEsferaPoder.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroEsferaPoder, EsferaPoder.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Esfera de Poder");
					}

					esferaPoder = (EsferaPoder) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEsferaPoder.limparListaParametros();

					colecaoEsferaPoder.add(esferaPoder);
				}
			}

			if(!colecaoEsferaPoder.isEmpty()){
				retorno.setColecaoEsferaPoder(colecaoEsferaPoder);
			}

		}

		if(idsEmpresas != null && idsEmpresas.length > 0){

			Collection colecaoEmpresa = new ArrayList();
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

			Empresa empresa = null;

			for(int index = 0; idsEmpresas.length > index; index++){

				if(idsEmpresas[index] != null && idsEmpresas[index].length() > 0){

					filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, idsEmpresas[index]));

					filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(filtroEmpresa, Empresa.class.getName());

					if(colecaoPesquisa == null || colecaoPesquisa.isEmpty()){
						throw new ControladorException("atencao.pesquisa_inexistente", null, "Empresa");
					}

					empresa = (Empresa) Util.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEmpresa.limparListaParametros();

					colecaoEmpresa.add(empresa);
				}
			}

			if(!colecaoEmpresa.isEmpty()){
				retorno.setColecaoEmpresa(colecaoEmpresa);
			}

		}

		return retorno;
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * [UC0312] - Inserir Cronograma de Cobrança
	 * [FS0006] - Verificar ação predecessora
	 * 
	 * @author Sávio Luiz
	 * @date 04/07/2007
	 */
	public Map<CobrancaAcaoAtividadeHelper, Date> validarAtividadeAcaoPredecessora(CobrancaAcao cobrancaAcao,
					CobrancaAcao cobrancaAcaoPredecessora, CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista) throws ControladorException{

		CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelper = new CobrancaAcaoAtividadeHelper();
		if(cobrancaAcaoAtividadeCronograma.getCobrancaAtividade() != null
						&& !cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().equals("")){
			cobrancaAcaoAtividadeHelper.setCobrancaAtividade(cobrancaAcaoAtividadeCronograma.getCobrancaAtividade());
			cobrancaAcaoAtividadeHelper.setCobrancaAcao(cobrancaAcao);
			mapAcaoAtividadeDataPrevista.put(cobrancaAcaoAtividadeHelper, cobrancaAcaoAtividadeCronograma.getDataPrevista());

			int idCobrancaAtividade = cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId() - 1;

			if(idCobrancaAtividade > 0){
				CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelperProcura = new CobrancaAcaoAtividadeHelper();
				CobrancaAtividade cobrancaAtividade = new CobrancaAtividade();
				cobrancaAtividade.setId(idCobrancaAtividade);
				cobrancaAcaoAtividadeHelperProcura.setCobrancaAtividade(cobrancaAtividade);
				cobrancaAcaoAtividadeHelperProcura.setCobrancaAcao(cobrancaAcao);

				Date dataPrevistaAtividade = mapAcaoAtividadeDataPrevista.get(cobrancaAcaoAtividadeHelperProcura);
				if(dataPrevistaAtividade != null){
					if(cobrancaAcaoAtividadeCronograma.getDataPrevista().before(dataPrevistaAtividade)){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.cobranca.atividade.data.inferior.atividade.predecessora", null,
										cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
										cobrancaAcao.getDescricaoCobrancaAcao());
					}
				}else{
					FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
					filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(FiltroCobrancaAtividade.ID, idCobrancaAtividade));
					Collection colecaoCobrancaAtividade = getControladorUtil().pesquisar(filtroCobrancaAtividade,
									CobrancaAtividade.class.getName());
					CobrancaAtividade cobrancaAtividadePredecessora = (CobrancaAtividade) Util
									.retonarObjetoDeColecao(colecaoCobrancaAtividade);
					// caso o indicador de obrigatoriedade esteja ativo então a data prevista não
					// pode ser nula
					if(cobrancaAtividadePredecessora != null
									&& cobrancaAtividadePredecessora.getIndicadorObrigatoriedade().equals(
													ConstantesSistema.INDICADOR_USO_ATIVO)){
						sessionContext.setRollbackOnly();
						throw new ControladorException("atencao.cobranca.atividade.predecessora.atividade", null,
										cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
										cobrancaAcao.getDescricaoCobrancaAcao());
					}
				}
			}

			if(cobrancaAcaoPredecessora != null && !cobrancaAcaoPredecessora.equals("")){
				CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelperProcura = new CobrancaAcaoAtividadeHelper();
				cobrancaAcaoAtividadeHelperProcura.setCobrancaAtividade(cobrancaAcaoAtividadeCronograma.getCobrancaAtividade());
				cobrancaAcaoAtividadeHelperProcura.setCobrancaAcao(cobrancaAcaoPredecessora);

				Date dataPrevistaPredecessora = mapAcaoAtividadeDataPrevista.get(cobrancaAcaoAtividadeHelperProcura);

				if(dataPrevistaPredecessora == null || dataPrevistaPredecessora.equals("")){
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.cobranca.atividade.data.predecessora.deve.ser.informado", null,
									cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
									cobrancaAcaoPredecessora.getDescricaoCobrancaAcao());

				}
				if(cobrancaAcaoAtividadeCronograma.getDataPrevista().before(dataPrevistaPredecessora)){
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.cobranca.atividade.data.inferior.acao.predecessora", null,
									cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
									cobrancaAcao.getDescricaoCobrancaAcao(), cobrancaAcaoAtividadeCronograma.getCobrancaAtividade()
													.getDescricaoCobrancaAtividade());
				}

			}

		}

		return mapAcaoAtividadeDataPrevista;
	}

	/**
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz, Raphael Rossiter
	 * @data 02/04/2007, 03/01/2007
	 * @param
	 * @return void
	 */
	public void emitirAvisoCobrancaFormatado(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio) throws ControladorException{

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		while(!flagFimPesquisa){

			try{

				// LOGGER.info("***************************************");
				// LOGGER.info("ENTROU NO AVISO DE CORTE");
				// LOGGER.info("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumentoParaEmitirCAER(idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca, quantidadeCobrancaDocumentoInicio);
				// LOGGER.info("***************************************");
				LOGGER.info("QTD DE COBRANCA DOCUMENTO:" + colecaoCobrancaDocumento.size());
				// LOGGER.info("***************************************");
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){

				// LOGGER.info("***************************************");
				LOGGER.info("QUANTIDADE COBRANÇA:" + colecaoCobrancaDocumento.size());
				// LOGGER.info("***************************************");

				if(colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento){
					flagFimPesquisa = true;
				}else{
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}
				// ***********************************************************************
				// ****PARTE COMENTADA DA DIVISÃO PARA IMPRESSÃO DE DOCUMENTO
				// COBRANÇA****
				// ***********************************************************************

				// int metadeColecao = 0;
				// if (colecaoCobrancaDocumento.size() % 2 == 0) {
				// metadeColecao = colecaoCobrancaDocumento.size() / 2;
				// } else {
				// metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				// }

				// Map<Integer, Map<Object, Object>>
				// mapCobrancaDocumentoOrdenada =
				// dividirColecao(colecaoCobrancaDocumento);

				/*
				 * if (mapCobrancaDocumentoOrdenada != null) { int countOrdem =
				 * 0;
				 * while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
				 * Map<Object, Object> mapCobrancaoDocumentoDivididas =
				 * mapCobrancaDocumentoOrdenada .get(countOrdem);
				 */

				/*
				 * Iterator iteratorCobrancaDocumento =
				 * mapCobrancaoDocumentoDivididas .keySet().iterator();
				 */
				Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento.iterator();
				while(iteratorCobrancaDocumento.hasNext()){

					CobrancaDocumento cobrancaDocumento = null;
					/*
					 * if(quantidadeContas == 48){ LOGGER.info(""); }
					 */

					// int situacao = 0;
					cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;
					// Collection colecaoCobrancaDocumentoItemGuiaPagamento =
					// null;
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */

					/*
					 * Objeto que será utilizado para armazenar as informações
					 * do documento de cobrança de acordo com o layout definido
					 * no caso de uso
					 */

					/*
					 * while (situacao < 2) { if (situacao == 0) { situacao = 1;
					 * sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); } else {
					 * cobrancaDocumento = (CobrancaDocumento)
					 * mapCobrancaoDocumentoDivididas .get(cobrancaDocumento);
					 * situacao = 2; sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); }
					 */

					if(cobrancaDocumento != null){
						sequencialImpressao++;

						try{

							nomeClienteUsuario = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel()
											.getId());
							idClienteResponsavel = this.repositorioClienteImovel
											.retornaIdClienteResponsavelIndicadorEnvioConta(cobrancaDocumento.getImovel().getId());

							colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
											.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						}catch(ErroRepositorioException ex){
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						if(colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()){

							// ITEM 1
							// sequencial do documento de cobranca
							cobrancaDocumentoTxt.append(Util.retornaSequencialFormatado(cobrancaDocumento.getNumeroSequenciaDocumento()));
							// ITEM 2
							// Formatar sequencial de documento gerado
							cobrancaDocumentoTxt.append(Util.retornaSequencialFormatado(sequencialImpressao));
							// ITEM 3
							// id do grupo
							if(idCronogramaAtividadeAcaoCobranca != null){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2, "" + grupoCobranca.getId()));
							}else{
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2, ""
												+ cobrancaDocumento.getImovel().getRota().getCobrancaGrupo().getId()));
							}
							// Codigo Rota
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(6, ""
											+ cobrancaDocumento.getImovel().getRota().getCodigo()));

							// ITEM 4
							// Codigo Rota
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(4, ""
											+ cobrancaDocumento.getImovel().getNumeroSequencialRota()));

							// ITEM 5
							// código da firma
							if(cobrancaDocumento.getEmpresa() != null){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2, cobrancaDocumento.getEmpresa().getId()
												.toString()));
							}

							// ITEM 6
							if(cobrancaDocumento.getEmpresa() != null){
								cobrancaDocumentoTxt
												.append(Util.completaString(cobrancaDocumento.getEmpresa().getDescricaoAbreviada(), 10));
							}

							// ITEM 7
							// Matrícula do imóvel
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9,
											Util.retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel().getId())));
							// ITEM 8
							// Inscrição
							String idLocalidade = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getLocalidade().getId());
							String codigoSetorComercial = Util.adicionarZerosEsquedaNumero(3,
											"" + cobrancaDocumento.getCodigoSetorComercial());
							String numeroQuadra = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4, "" + cobrancaDocumento.getImovel().getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getImovel().getSubLote());

							cobrancaDocumentoTxt.append(Util.completaString(idLocalidade + "." + codigoSetorComercial + "." + numeroQuadra
											+ "." + lote + "." + subLote, 20));

							// ITEM 9,10
							String enderecoImovel = "";
							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(
											cobrancaDocumento.getImovel().getId());
							if(parmsEnderecoImovel != null){
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0], 100));
								enderecoImovel = parmsEnderecoImovel[0];
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 30));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 30));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));

							if(cepFormatado != null){
								cepFormatado = Util.adicionarZerosEsquedaNumero(8, cepFormatado);

								cobrancaDocumentoTxt.append(cepFormatado.substring(0, 5) + "-" + cepFormatado.substring(5, 8));
							}

							// ITEM 11,12
							// endereço do cliente com opção de recebimento via
							// correio
							// ITEM 9,10
							String nomeBairroResponsavel = "";
							String nomeMunicipioResponsavel = "";
							String siglaUnidadeFederecaoResponsavel = "";
							String cepFormatadoResponsavel = "";
							if(idClienteResponsavel != null){
								String[] parmsEndereco = getControladorEndereco().pesquisarEnderecoClienteAbreviadoDividido(
												idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(parmsEndereco[0], 100));
								// nome do bairro
								nomeBairroResponsavel = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipioResponsavel = "" + parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecaoResponsavel = parmsEndereco[2];
								cepFormatadoResponsavel = parmsEndereco[4];

								// nome Bairro
								cobrancaDocumentoTxt.append(Util.completaString(nomeBairroResponsavel, 30));
								// nome municipio
								cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipioResponsavel, 30));
								// sigla unidade federacao
								cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecaoResponsavel, 2));

								if(cepFormatadoResponsavel != null){
									cepFormatadoResponsavel = Util.adicionarZerosEsquedaNumero(8, cepFormatadoResponsavel);

									cobrancaDocumentoTxt.append(cepFormatadoResponsavel.substring(0, 5) + "-"
													+ cepFormatado.substring(5, 8));
								}

							}else{
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(enderecoImovel, 100));

								// nome Bairro
								cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 30));
								// nome municipio
								cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 30));
								// sigla unidade federacao
								cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));

								if(cepFormatado != null){
									cepFormatado = Util.adicionarZerosEsquedaNumero(8, cepFormatado);

									cobrancaDocumentoTxt.append(cepFormatado.substring(0, 5) + "-" + cepFormatado.substring(5, 8));
								}

							}

							// ITEM 13
							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));

							// ITEM 14
							// Quant. contas em debito
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, "" + colecaoCobrancaDocumentoItemConta.size()));

							// ITEM 15,18
							// Indicador Estouro
							// cobrancaDocumentoTxt.append(Util.completaString(""
							// + indicadorEstouro, 1));
							// em caso de ser carta de tarifa social não
							// formatar o txt

							int quantidadesContas = 12;

							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							Object[] dadosValores = formatarCobrancaDocumentoItemParaContaComFormatacao(cobrancaDocumentoTxt,
											colecaoCobrancaDocumentoItemConta, quantidadesContas, idAcaoCobranca);

							BigDecimal valorItemCobrado = (BigDecimal) dadosValores[0];
							BigDecimal valorAcrescimos = (BigDecimal) dadosValores[1];
							BigDecimal valorItemAcrescimos = (BigDecimal) dadosValores[2];

							// somatorio do valor do item da conta
							cobrancaDocumentoTxt.append(Util.completaString(Util.formataBigDecimal(valorItemCobrado, 2, true), 14));
							// somatorio do valor dos encargos
							cobrancaDocumentoTxt.append(Util.completaString(Util.formataBigDecimal(valorAcrescimos, 2, true), 14));
							// somatorio do valor total das contas
							cobrancaDocumentoTxt.append(Util.completaString(Util.formataBigDecimal(valorItemAcrescimos, 2, true), 14));

							// String
							// quantidadeItensDocumentoGuiaPagamentoString =
							// null;
							// em caso de ser carta de tarifa social não
							// formatar o txt
							// if (idAcaoCobranca != null
							// && (!idAcaoCobranca
							// .equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO)
							// && !idAcaoCobranca
							// .equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO)))
							// {
							// retorna o quantidade de documento item com
							// guia
							// pagamento e formata o cobrançaDocumentoTxt
							// com os
							// dados
							// int quantidadeItensDocumentoGuiaPagamento =
							// somatorioValoresAcrescimosDocumentoItem(
							// cobrancaDocumentoTxt,
							// colecaoCobrancaDocumentoItemGuiaPagamento);
							// quantidadeItensDocumentoGuiaPagamentoString = ""
							// + quantidadeItensDocumentoGuiaPagamento;
							// }

							// ITEM 19
							// em caso de ser carta de tarifa social não
							// formatar o txt
							// Sigla da regional
							cobrancaDocumentoTxt.append(Util.completaString(""
											+ cobrancaDocumento.getImovel().getLocalidade().getGerenciaRegional().getNomeAbreviado(), 3));

							// ITEM 20
							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util.completaString(""
											+ cobrancaDocumento.getImovel().getLocalidade().getDescricao(), 25));
							// em caso de ser carta de tarifa social não
							// formatar o txt

							// ITEM 21
							cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getEmissao()));

							// data de vencimento AAAAMMDD
							// Object[] dadosFaturamentoGrupo =
							// getControladorFaturamento()
							// .pesquisarAnoMesEDiaVencimentoFaturamentoGrupo(
							// cobrancaDocumento.getImovel()
							// .getId());
							// Integer anoMesFaturamento = null;
							// Integer diaVencimento = null;
							// if (dadosFaturamentoGrupo != null) {
							// if (dadosFaturamentoGrupo[0] != null) {
							// anoMesFaturamento = (Integer)
							// dadosFaturamentoGrupo[0];
							// }
							// if (dadosFaturamentoGrupo[1] != null) {
							// diaVencimento = ((Short)
							// dadosFaturamentoGrupo[1])
							// .intValue();
							// }
							// }

							// ITEM 22
							String dataVencimento = "";
							if(cobrancaDocumento.getEmissao() != null && acaoCobranca.getNumeroDiasValidade() != null){
								dataVencimento = Util.formatarData(Util.adicionarNumeroDiasDeUmaData(cobrancaDocumento.getEmissao(),
												acaoCobranca.getNumeroDiasVencimento()));
							}

							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(dataVencimento, 10));

							// ITEM 23
							if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getLigacaoAgua() != null
											&& cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
								// numero do hidometro
								if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
									cobrancaDocumentoTxt.append(Util.completaString(""
													+ cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico()
																	.getHidrometro().getNumero(), 10));

									// Local de instalação descricao abreviada
									cobrancaDocumentoTxt.append(Util.completaString(""
													+ cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico()
																	.getHidrometroLocalInstalacao().getDescricaoAbreviada(), 5));
								}else{
									cobrancaDocumentoTxt.append(Util.completaString("", 10));
									cobrancaDocumentoTxt.append(Util.completaString("", 5));
								}

							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
								cobrancaDocumentoTxt.append(Util.completaString("", 5));
							}

							// ITEM 24,25,26
							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do
							// códigode
							// barra
							representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(5,
											cobrancaDocumento.getValorDocumento(), cobrancaDocumento.getLocalidade().getId(),
											cobrancaDocumento.getImovel().getId(), null, null, null, null,
											String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
											cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, null, null, null);

							// Formata a representação númerica do
							// código de
							// barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + " "
											+ representacaoNumericaCodBarra.substring(11, 12) + " "
											+ representacaoNumericaCodBarra.substring(12, 23) + " "
											+ representacaoNumericaCodBarra.substring(23, 24) + " "
											+ representacaoNumericaCodBarra.substring(24, 35) + " "
											+ representacaoNumericaCodBarra.substring(35, 36) + " "
											+ representacaoNumericaCodBarra.substring(36, 47) + " "
											+ representacaoNumericaCodBarra.substring(47, 48);

							cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de
							// barras
							// no
							// padrão
							// intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

							// Recupera a representação númerica do
							// código
							// de
							// barras
							// sem
							// os dígitos verificadores
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra.substring(0, 11)
											+ representacaoNumericaCodBarra.substring(12, 23)
											+ representacaoNumericaCodBarra.substring(24, 35)
											+ representacaoNumericaCodBarra.substring(36, 47);

							cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5
											.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

							Object[] dadosOS = pesquisarDadosOrdemServicoDocumentoCobranca(cobrancaDocumento.getId());
							if(dadosOS != null){
								cobrancaDocumentoTxt.append(Util.completaString("" + dadosOS[0], 9));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 9));
							}
							// situação ligação de agua
							if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getLigacaoAguaSituacao() != null){
								cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLigacaoAguaSituacao()
												.getDescricao(), 20));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}

							// situação ligação de esgoto
							if(cobrancaDocumento.getImovel() != null && cobrancaDocumento.getImovel().getLigacaoEsgotoSituacao() != null){
								cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getImovel().getLigacaoEsgotoSituacao()
												.getDescricao(), 20));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}

							Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel(
											cobrancaDocumento.getImovel().getId());
							if(categoria != null){
								cobrancaDocumentoTxt.append(Util.completaString(categoria.getDescricao(), 15));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 15));
							}

							/*
							 * COLOCADO POR RAPHAEL ROSSITER EM 03/01/2007
							 * =============================================
							 * ----------------------------------------------------------------------
							 * -------------------
							 */

							// ITEM 31 - Consumo Médio
							Integer consumoMedio = getControladorMicromedicao().pesquisarConsumoMedioImovel(
											cobrancaDocumento.getImovel().getId());

							if(consumoMedio != null){
								cobrancaDocumentoTxt.append(Util.completaString("" + consumoMedio, 10));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}

							// ITEM 32 - Consumo Fixo
							Integer consumoMinimoEsgoto = getControladorLigacaoEsgoto().recuperarConsumoMinimoEsgoto(
											cobrancaDocumento.getImovel().getId());

							if(consumoMinimoEsgoto != null){
								cobrancaDocumentoTxt.append(Util.completaString("" + consumoMinimoEsgoto, 10));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}

							// Categoria(s) e Economia(s)
							Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(
											cobrancaDocumento.getImovel());

							String qtdResidencial = "";
							String qtdComercial = "";
							String qtdIndustrial = "";
							String qtdPublico = "";

							Integer totalCategoria = 0;

							if(colecaoCategorias != null && !colecaoCategorias.isEmpty()){

								Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();

								while(iteratorColecaoCategorias.hasNext()){

									categoria = (Categoria) iteratorColecaoCategorias.next();

									if(categoria.getId().equals(Categoria.RESIDENCIAL)){

										qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();

										totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();

									}else if(categoria.getId().equals(Categoria.COMERCIAL)){

										qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();

										totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();

									}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){

										qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();

										totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();

									}else if(categoria.getId().equals(Categoria.PUBLICO)){

										qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();

										totalCategoria = totalCategoria + categoria.getQuantidadeEconomiasCategoria();
									}
								}
							}

							// ITEM 33 - Residêncial
							if(!qtdResidencial.equals("")){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}

							// ITEM 34 - Comercial
							if(!qtdComercial.equals("")){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}

							// ITEM 35 - Industrial
							if(!qtdIndustrial.equals("")){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}

							// ITEM 36 - Público
							if(!qtdPublico.equals("")){
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}

							// ITEM 37 - Soma Total das economias
							if(totalCategoria != null && !totalCategoria.equals("")){

								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(4, "" + totalCategoria));
							}else{
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 4));
							}

							// ITEM 38 - Data da Posição do Débito
							SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

							String anoMesValidade = sistemaParametro.getAnoMesArrecadacao().toString();

							Calendar calendario = new GregorianCalendar();

							if(anoMesValidade != null && !anoMesValidade.equals("")){

								calendario.set(Calendar.YEAR, Integer.valueOf(anoMesValidade.substring(0, 4)).intValue());

								calendario.set(Calendar.MONTH, Integer.valueOf(anoMesValidade.substring(4, 6)).intValue() - 1);

								calendario.set(Calendar.DAY_OF_MONTH, calendario.getActualMaximum(Calendar.DAY_OF_MONTH));

								cobrancaDocumentoTxt.append(Util.formatarData(calendario.getTime()));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}

							/*
							 * As datas de corte e supressão serão repassadas de acordo com
							 * a situação da ligação do imóvel.
							 * ITEM 39 - Data do Corte
							 * ITEM 40 - Data da Supressão
							 */
							if(cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.CORTADO)
											|| cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
															.equals(LigacaoAguaSituacao.SUPRIMIDO)){

								/*
								 * Dados da Ligação de Água(a partir da tabela LIGACAO_AGUA
								 * lagu_id=imov_id da tabela IMOVEL)
								 */
								Object[] dadosLigacaoAgua = getControladorAtendimentoPublico().pesquisarDadosLigacaoAgua(
												cobrancaDocumento.getImovel().getId());

								if(dadosLigacaoAgua != null){

									// Data do Corte
									if(cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.CORTADO)){

										if(dadosLigacaoAgua[3] != null){

											cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData((Date) dadosLigacaoAgua[3]),
															10));

											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 20));
										}
									}

									// Data da Supressão
									else if(cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
													.equals(LigacaoAguaSituacao.SUPRIMIDO)){

										if(dadosLigacaoAgua[4] != null){

											cobrancaDocumentoTxt.append(Util.completaString("", 10));

											cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData((Date) dadosLigacaoAgua[4]),
															10));

										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 20));
										}
									}else{

										cobrancaDocumentoTxt.append(Util.completaString("", 20));
									}

								}else{
									cobrancaDocumentoTxt.append(Util.completaString("", 20));
								}
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}

							// ITEM 41 - Origem
							LeituraAnormalidade leituraAnormalidade = cobrancaDocumento.getImovel().getLeituraAnormalidade();

							if(leituraAnormalidade == null){
								cobrancaDocumentoTxt.append("AUTOMÁTICO");
								cobrancaDocumentoTxt.append(Util.completaString("", 5));
							}else if(leituraAnormalidade.getId().equals(LeituraAnormalidade.LIGADO_CLANDESTINO_AGUA)
											|| leituraAnormalidade.getId().equals(LeituraAnormalidade.LIGADO_CLANDESTINO_ESGOTO)
											|| leituraAnormalidade.getId().equals(LeituraAnormalidade.LIGADO_CLANDESTINO_AGUA_ESGOTO)){

								cobrancaDocumentoTxt.append("RECADASTRAMENTO");
							}else{
								cobrancaDocumentoTxt.append("LEITURA");
								cobrancaDocumentoTxt.append(Util.completaString("", 8));
							}

							// ITEM 42 - Ocorrência
							if(leituraAnormalidade != null){

								cobrancaDocumentoTxt.append(Util.completaString(leituraAnormalidade.getDescricao(), 34));
							}else{

								cobrancaDocumentoTxt.append(Util.completaString("", 34));
							}

							// ITEM 43 - Data Última Alteração
							if(cobrancaDocumento.getImovel().getUltimaAlteracao() != null){

								cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getImovel().getUltimaAlteracao()));

							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}

							// ITEM 44 - Ordem de Serviço
							Integer idOrdemServico = this.getControladorOrdemServico().pesquisarOrdemServicoPorCobrancaDocumento(
											cobrancaDocumento.getId());

							if(idOrdemServico != null){

								cobrancaDocumentoTxt.append(Util.completaString(idOrdemServico.toString(), 15));
							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 15));
							}

							// ITEM 45 - Tipo de Consumidor (ImovelPerfil da tabela
							// CobrancaDocumento)
							if(cobrancaDocumento.getImovelPerfil() != null){

								cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento.getImovelPerfil().getDescricao(), 20));

							}else{
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}

							// ==========================================================================================

							cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						}

						colecaoCobrancaDocumentoItemConta = null;
					}

					// }// fim do laço que verifica
					// as 2
					// contas

				}// fim laço while do iterator do
					// objeto
					// helper
					// countOrdem++;
					// mapCobrancaoDocumentoDivididas = null;
					// }
			}else{
				flagFimPesquisa = true;
			}
			// } else {
			// flagFimPesquisa = true;
			// }
			// colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();

		String nomeZip = null;

		// LOGGER.info("ID AÇÃO COBRANÇA:" + idAcaoCobranca);

		if(idCronogramaAtividadeAcaoCobranca != null){
			nomeZip = "EMITIR_" + acaoCobranca.getDescricaoCobrancaAcao() + "_GRUPO_" + grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual);
		}else{
			String descricaoAbrevDocumentoTipo = "";
			if(acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null){
				descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();

			nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual + " " + Util.formatarData(dataAtual);
		}
		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try{

			// LOGGER.info("***************************************");
			// LOGGER.info("INICO DA CRIACAO DO ARQUIVO");
			// LOGGER.info("***************************************");

			if(cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0){

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			// LOGGER.info("***************************************");
			// LOGGER.info("FIM DA CRIACAO DO ARQUIVO");
			// LOGGER.info("***************************************");

		}catch(IOException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();

			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * @return
	 * @throws ControladorException
	 */
	protected Object[] formatarCobrancaDocumentoItemParaContaComFormatacao(StringBuilder cobrancaDocumentoTxt,
					Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas, Integer idAcaoCobranca) throws ControladorException{

		Object[] parsValores = new Object[3];

		BigDecimal valorTotalItemCobrado = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimos = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimosItemCobrados = BigDecimal.ZERO;

		int complementoEspecosBranco = 0;
		// em caso de ser carta de tarifa social não
		// formatar o txt
		complementoEspecosBranco = quantidadeContas * 61;

		int countImpressao = colecaoCobrancaDocumentoItemConta.size() - (quantidadeContas - 1);

		if(colecaoCobrancaDocumentoItemConta.size() > quantidadeContas){
			// indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);

			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append("DEB.ATÉ");

			complementoEspecosBranco = complementoEspecosBranco - 7;

			// origem
			cobrancaDocumentoTxt.append("  ");
			complementoEspecosBranco = complementoEspecosBranco - 2;

			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util.formatarData(calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()));
			complementoEspecosBranco = complementoEspecosBranco - 10;

			String valorItemAnterior = Util.formataBigDecimal(calcularValorDataVencimentoAnteriorHelper.getValorAnterior(), 2, true);

			// adiciona o valor de item cobrado para o total
			valorTotalItemCobrado = valorTotalItemCobrado.add(calcularValorDataVencimentoAnteriorHelper.getValorAnterior());

			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.completaString(valorItemAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;

			String valorAcrescimosAnterior = Util.formataBigDecimal(calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior(),
							2, true);
			// Valor dos encargos anterior
			cobrancaDocumentoTxt.append(Util.completaString(valorAcrescimosAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			valorTotalAcrescimos = valorTotalAcrescimos.add(calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior());

			BigDecimal valorItemCobradoAcrescimosAnteriorB = BigDecimal.ZERO;

			valorItemCobradoAcrescimosAnteriorB = valorItemCobradoAcrescimosAnteriorB.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior());

			valorItemCobradoAcrescimosAnteriorB = valorItemCobradoAcrescimosAnteriorB.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAcrescimosAnterior());

			String valorItemCobradoAcrescimosAnterior = Util.formataBigDecimal(valorItemCobradoAcrescimosAnteriorB, 2, true);
			// Valor dos encargos anterior + valor dos descontos
			cobrancaDocumentoTxt.append(Util.completaString(valorItemCobradoAcrescimosAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;

			valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados.add(valorItemCobradoAcrescimosAnteriorB);

		}

		if(countImpressao <= 1){
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while(iteratorColecaoCobrancaDocumentoItem.hasNext()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

				// Ano mes de referencia da conta anterior
				cobrancaDocumentoTxt
								.append(Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()));
				complementoEspecosBranco = complementoEspecosBranco - 7;

				// origem
				if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual() != null){
					if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
									.equals(DebitoCreditoSituacao.NORMAL)){
						cobrancaDocumentoTxt.append("19");
					}else{
						if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
										.equals(DebitoCreditoSituacao.RETIFICADA)){
							cobrancaDocumentoTxt.append("27");
						}else{
							if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
											.equals(DebitoCreditoSituacao.INCLUIDA)){
								cobrancaDocumentoTxt.append("35");
							}else{
								cobrancaDocumentoTxt.append("00");
							}
						}
					}

				}else{
					cobrancaDocumentoTxt.append("00");
				}
				complementoEspecosBranco = complementoEspecosBranco - 2;

				// data de vencimento anterior
				cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2, true);

				// adiciona o valor de item cobrado para o total
				valorTotalItemCobrado = valorTotalItemCobrado.add(cobrancaDocumentoItem.getValorItemCobrado());

				// Valor do item anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(), 2, true);
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				valorTotalAcrescimos = valorTotalAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());

				BigDecimal valorItemCobradoAcrescimosB = BigDecimal.ZERO;

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB.add(cobrancaDocumentoItem.getValorItemCobrado());

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB.add(cobrancaDocumentoItem.getValorAcrescimos());

				String valorItemCobradoAcrescimos = Util.formataBigDecimal(valorItemCobradoAcrescimosB, 2, true);
				// Valor dos encargos anterior + valor dos descontos
				cobrancaDocumentoTxt.append(Util.completaString(valorItemCobradoAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados.add(valorItemCobradoAcrescimosB);

			}

		}else{
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while(countImpressao < colecaoCobrancaDocumentoItemConta.size()){
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta).get(countImpressao);

				// Ano mes de referencia da conta anterior
				cobrancaDocumentoTxt
								.append(Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()));
				complementoEspecosBranco = complementoEspecosBranco - 7;

				// origem
				if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual() != null){
					if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
									.equals(DebitoCreditoSituacao.NORMAL)){
						cobrancaDocumentoTxt.append("19");
					}else{
						if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
										.equals(DebitoCreditoSituacao.RETIFICADA)){
							cobrancaDocumentoTxt.append("27");
						}else{
							if(cobrancaDocumentoItem.getContaGeral().getConta().getDebitoCreditoSituacaoAtual().getId()
											.equals(DebitoCreditoSituacao.INCLUIDA)){
								cobrancaDocumentoTxt.append("35");
							}else{
								cobrancaDocumentoTxt.append("00");
							}
						}
					}

				}else{
					cobrancaDocumentoTxt.append("00");
				}
				complementoEspecosBranco = complementoEspecosBranco - 2;

				// data de vencimento anterior
				cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2, true);

				// adiciona o valor de item cobrado para o total
				valorTotalItemCobrado = valorTotalItemCobrado.add(cobrancaDocumentoItem.getValorItemCobrado());

				// Valor do item anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(), 2, true);
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				valorTotalAcrescimos = valorTotalAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());

				BigDecimal valorItemCobradoAcrescimosB = BigDecimal.ZERO;

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB.add(cobrancaDocumentoItem.getValorItemCobrado());

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB.add(cobrancaDocumentoItem.getValorAcrescimos());

				String valorItemCobradoAcrescimos = Util.formataBigDecimal(valorItemCobradoAcrescimosB, 2, true);
				// Valor dos encargos anterior + valor dos descontos
				cobrancaDocumentoTxt.append(Util.completaString(valorItemCobradoAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados.add(valorItemCobradoAcrescimosB);
				countImpressao++;

			}
		}
		cobrancaDocumentoTxt.append(Util.completaString("", complementoEspecosBranco));

		parsValores[0] = valorTotalItemCobrado;
		parsValores[1] = valorTotalAcrescimos;
		parsValores[2] = valorTotalAcrescimosItemCobrados;
		return parsValores;
	}

	/**
	 * Gerar Curva ABC de Debitos
	 * [UC0621] Gerar Curva ABC de Debitos
	 * 
	 * @author Ivan Sérgio
	 * @date 01/08/2007
	 */
	public Collection gerarCurvaAbcDebitos(String classificacao, String referenciaCobrancaInicial, String referenciaCobrancaFinal,
					String indicadorImovelMedicaoIndividualizada, String indicadorImovelParalizacaoFaturamentoCobranca,
					String idGerenciaRegional, String idUnidadeNegocio, String idLocalidadeInicial, String idLocalidadeFinal,
					String idSetorComercialInicial, String idSetorComercialFinal, String[] situacaoLigacaoAgua,
					String[] situacaoLigacaoEsgoto, String intervaloMesesCortadoSuprimidoInicial,
					String intervaloMesesCortadoSuprimidoFinal, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria, String valorMinimoDebito,
					String intervaloQuantidadeDocumentosInicial, String intervaloQuantidadeDocumentosFinal,
					String indicadorPagamentosNaoClassificados) throws ControladorException{

		Collection colecaoImoveis = null;

		try{
			colecaoImoveis = repositorioCobranca.gerarCurvaAbcDebitos(classificacao, indicadorImovelMedicaoIndividualizada,
							indicadorImovelParalizacaoFaturamentoCobranca, idGerenciaRegional, idUnidadeNegocio, idLocalidadeInicial,
							idLocalidadeFinal, idSetorComercialInicial, idSetorComercialFinal, situacaoLigacaoAgua, situacaoLigacaoEsgoto,
							intervaloConsumoMinimoFixadoEsgotoInicial, intervaloConsumoMinimoFixadoEsgotoFinal, indicadorMedicao,
							idTipoMedicao, idPerfilImovel, idTipoCategoria, categoria, idSubCategoria);

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		// colecao com os dados para o relatorio
		Collection<Integer> colecaoImoveisGerarCurvaAbcDebitos = null;
		Collection colecaoGerarCurvaAbcDebitos = null;

		if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){

			Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();
			colecaoImoveisGerarCurvaAbcDebitos = new ArrayList();

			Integer idImovel = null;
			Integer idSituacaoLigacaoAgua = null;
			Integer dataCortado = null;
			Integer dataSuprimido = null;

			Integer intervaloInicial = null;
			Integer intervaloFinal = null;
			Date dataIntervaloInicial = null;
			Date dataIntervaloFinal = null;

			while(iteratorColecaoImoveis.hasNext()){
				Object[] dadosRelatorio = (Object[]) iteratorColecaoImoveis.next();

				idImovel = (Integer) dadosRelatorio[0];
				idSituacaoLigacaoAgua = (Integer) dadosRelatorio[1];

				// Calcula os intervalos de Meses para Cortado/Suprimido caso
				// a Situacao da Ligacao de Agua seja cortado e/ou suprimido e
				// retira da lista caso esteja fora do periodo
				if(intervaloMesesCortadoSuprimidoInicial != null && !intervaloMesesCortadoSuprimidoInicial.equals("")
								&& intervaloMesesCortadoSuprimidoFinal != null && !intervaloMesesCortadoSuprimidoFinal.equals("")){

					dataIntervaloInicial = Util.adcionarOuSubtrairMesesAData(new Date(),
									-(Util.converterStringParaInteger(intervaloMesesCortadoSuprimidoInicial).intValue()), 0);

					intervaloInicial = Integer.decode(Util.formatarDataSemBarra(dataIntervaloInicial));

					dataIntervaloFinal = Util.adcionarOuSubtrairMesesAData(new Date(),
									-(Util.converterStringParaInteger(intervaloMesesCortadoSuprimidoFinal).intValue()), 0);

					intervaloFinal = Integer.decode(Util.formatarDataSemBarra(dataIntervaloFinal));

					if(idSituacaoLigacaoAgua.equals(LigacaoAguaSituacao.CORTADO)){
						dataCortado = Integer.decode(dadosRelatorio[2].toString().replace("-", ""));

						if((dataCortado >= intervaloFinal) && (dataCortado <= intervaloInicial)){
							colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
						}

					}else if(idSituacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO)){
						dataSuprimido = Integer.decode(dadosRelatorio[3].toString().replace("-", ""));

						if((dataSuprimido >= intervaloFinal) && (dataSuprimido <= intervaloInicial)){
							colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
						}
					}

				}else{
					colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
				}
			}

			if(!colecaoImoveisGerarCurvaAbcDebitos.isEmpty()){

				colecaoGerarCurvaAbcDebitos = new ArrayList();

				referenciaCobrancaInicial = referenciaCobrancaInicial.replace("/", "");
				referenciaCobrancaInicial = referenciaCobrancaInicial.substring(2, 6) + referenciaCobrancaInicial.substring(0, 2);

				referenciaCobrancaFinal = referenciaCobrancaFinal.replace("/", "");
				referenciaCobrancaFinal = referenciaCobrancaFinal.substring(2, 6) + referenciaCobrancaFinal.substring(0, 2);

				String valorMinimoDebitoInformado = valorMinimoDebito.replace(".", "");
				valorMinimoDebitoInformado = valorMinimoDebitoInformado.replace(",", ".");

				List<Integer> listaImoveis = new ArrayList<Integer>();
				List<Integer> listaImoveisGerarCurvaAbcDebitos = new ArrayList<Integer>(colecaoImoveisGerarCurvaAbcDebitos);
				while(listaImoveisGerarCurvaAbcDebitos.size() != 0){

					if(listaImoveisGerarCurvaAbcDebitos.size() >= LIMEITE_IMOVEIS_CURVA_ABC_DEBITO){
						for(int i = 0; i < LIMEITE_IMOVEIS_CURVA_ABC_DEBITO; i++){

							listaImoveis.add(listaImoveisGerarCurvaAbcDebitos.get(0));
							listaImoveisGerarCurvaAbcDebitos.remove(0);

						}

					}else{
						for(int i = 0; i <= listaImoveisGerarCurvaAbcDebitos.size(); i++){

							listaImoveis.add(listaImoveisGerarCurvaAbcDebitos.get(0));
							listaImoveisGerarCurvaAbcDebitos.remove(0);
						}

					}

					colecaoGerarCurvaAbcDebitos.addAll(pesquisarDebitoImovelPorFaixaValores(listaImoveis, valorMinimoDebitoInformado,
									referenciaCobrancaInicial, referenciaCobrancaFinal, classificacao));

					// LOGGER.info("listaImoveis: " + listaImoveis);
					listaImoveis.clear();
				}

				// LOGGER.info("colecaoGerarCurvaAbcDebitos: " +
				// colecaoGerarCurvaAbcDebitos);
				// colecaoGerarCurvaAbcDebitos =
				// pesquisarDebitoImovelPorFaixaValores(colecaoImoveisGerarCurvaAbcDebitos,
				// valorMinimoDebitoInformado, referenciaCobrancaInicial, referenciaCobrancaFinal,
				// classificacao);

			}
		}

		return colecaoGerarCurvaAbcDebitos;
	}

	/**
	 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
	 * Débitos/Créditos do Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 21/08/2007
	 * @param idImovel
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelExtratoDebito(Integer idImovel, boolean indicadorParcelamento,
					Short multa, Short jurosMora, Short atualizacaoTarifaria) throws ControladorException{

		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = this.obterDebitoImovelOuCliente(1, // indicadorDebito
						idImovel.toString(), // idImovel
						null, // codigoCliente
						null, // clienteRelacaoTipo
						"000101", // anoMesInicialReferenciaDebito
						"999912", // anoMesFinalReferenciaDebito
						dataVencimentoInicial, // anoMesInicialVencimentoDebito
						dataVencimentoFinal, // anoMesFinalVencimentoDebito
						1, // indicadorPagamento
						1, // indicadorConta
						1, // indicadorDebitoACobrar
						1, // indicadorCreditoARealizar
						1, // indicadorNotasPromissorias
						1, // indicadorGuiasPagamento
						1, // indicadorCalcularAcrescimoImpontualidade
						true,// indicadorContas
						null, new Date(), ConstantesSistema.SIM, null,// sistema parametros
						multa, jurosMora, atualizacaoTarifaria);

		boolean existeDebitoCredito = false;

		// CONTA
		if(imovelDebitoCredito.getColecaoContasValoresImovel() != null && !imovelDebitoCredito.getColecaoContasValoresImovel().isEmpty()){

			existeDebitoCredito = true;

			if(!indicadorParcelamento){

				Collection<ContaValoresHelper> colecaoContaValoresNaoParcelamento = new ArrayList();

				// Selecionar apenas as contas que não estejam parceladas
				Iterator itColecaoConta = imovelDebitoCredito.getColecaoContasValoresImovel().iterator();

				while(itColecaoConta.hasNext()){

					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) itColecaoConta.next();

					if(!contaValoresHelper.getConta().getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.PARCELADA)){
						colecaoContaValoresNaoParcelamento.add(contaValoresHelper);
					}
				}
				imovelDebitoCredito.setColecaoContasValoresImovel(colecaoContaValoresNaoParcelamento);
			}
		}

		// DEBITO_A_COBRAR
		if(imovelDebitoCredito.getColecaoDebitoACobrar() != null && !imovelDebitoCredito.getColecaoDebitoACobrar().isEmpty()){

			existeDebitoCredito = true;

			if(!indicadorParcelamento){

				Collection<DebitoACobrar> colecaoDebitoACobrarNaoParcelamento = new ArrayList();

				// Selecionar apenas os débitos que não sejam de parcelamento
				Iterator itColecaoDebitoACobrar = imovelDebitoCredito.getColecaoDebitoACobrar().iterator();

				while(itColecaoDebitoACobrar.hasNext()){

					DebitoACobrar debitoACobrar = (DebitoACobrar) itColecaoDebitoACobrar.next();

					if(debitoACobrar.getParcelamento() == null
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.ENTRADA_PARCELAMENTO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_ACRESCIMOS_IMPONTUALIDADE)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_CONTAS)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_DEBITO_A_COBRAR_CURTO_PRAZO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_DEBITO_A_COBRAR_LONGO_PRAZO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_GUIAS_PAGAMENTO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.REPARCELAMENTOS_CURTO_PRAZO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.REPARCELAMENTOS_LONGO_PRAZO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO)
									&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.CORRECAO_PARCELAMENTO)){

						colecaoDebitoACobrarNaoParcelamento.add(debitoACobrar);
					}
				}
				imovelDebitoCredito.setColecaoDebitoACobrar(colecaoDebitoACobrarNaoParcelamento);
			}
		}

		// CREDITO_A_REALIZAR
		if(imovelDebitoCredito.getColecaoCreditoARealizar() != null && !imovelDebitoCredito.getColecaoCreditoARealizar().isEmpty()){

			existeDebitoCredito = true;

			if(!indicadorParcelamento){

				Collection<CreditoARealizar> colecaoCreditoARealizarNaoParcelamento = new ArrayList();

				// Selecionar apenas os créditos que não sejam de parcelamento
				Iterator itColecaoCreditoARealizar = imovelDebitoCredito.getColecaoCreditoARealizar().iterator();

				while(itColecaoCreditoARealizar.hasNext()){

					CreditoARealizar creditoARealizar = (CreditoARealizar) itColecaoCreditoARealizar.next();

					if(!creditoARealizar.getCreditoTipo().getId().equals(CreditoTipo.DESCONTO_INATIVIDADE_LIGACAO_AGUA)
									&& !creditoARealizar.getCreditoTipo().getId().equals(CreditoTipo.DESCONTO_ANTIGUIDADE_DEBITO)){

						colecaoCreditoARealizarNaoParcelamento.add(creditoARealizar);
					}
				}
				imovelDebitoCredito.setColecaoCreditoARealizar(colecaoCreditoARealizarNaoParcelamento);
			}
		}

		if(!indicadorParcelamento){
			Collection colecaoParcelamento = new ArrayList();
			Collection colecaoDebitoCreditoParcelamentoHelper = new ArrayList();
			DebitoCreditoParcelamentoHelper debitoCreditoParcelamentoHelper = null;

			try{
				colecaoParcelamento = repositorioCobranca.pesquisarParcelamentosSituacaoNormal(idImovel);
			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			Iterator iteratorParcelamento = colecaoParcelamento.iterator();
			while(iteratorParcelamento.hasNext()){
				Parcelamento parcelamento = (Parcelamento) iteratorParcelamento.next();
				// debitoCreditoParcelamentoHelper = new DebitoCreditoParcelamentoHelper();

				debitoCreditoParcelamentoHelper = this.apresentarDebitoCreditoImovelExtratoDebito(parcelamento);
				if(!Util.isVazioOrNulo(debitoCreditoParcelamentoHelper.getColecaoDebitoACobrarParcelamento())){
					colecaoDebitoCreditoParcelamentoHelper.add(debitoCreditoParcelamentoHelper);
				}
			}
			imovelDebitoCredito.setColecaoDebitoCreditoParcelamentoHelper(colecaoDebitoCreditoParcelamentoHelper);
		}

		// [FS0002] - Verificar existência de débitos/créditos no imóvel
		if(!existeDebitoCredito){
			throw new ControladorException("atencao.imovel_sem_debito_credito");
		}

		return imovelDebitoCredito;
	}

	/**
	 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
	 * Débitos/Créditos do Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 22/08/2007
	 * @param idImovel
	 * @exception ControladorException
	 */
	public DebitoCreditoParcelamentoHelper apresentarDebitoCreditoImovelExtratoDebito(Parcelamento parcelamento)
					throws ControladorException{

		DebitoCreditoParcelamentoHelper debitoCreditoParcelamentoHelper = new DebitoCreditoParcelamentoHelper();
		Collection colecaoDebitosACobrar = null;
		Collection colecaoCreditosARealizar = null;

		debitoCreditoParcelamentoHelper.setParcelamento(parcelamento);

		try{
			colecaoDebitosACobrar = repositorioCobranca.pesquisarDebitosACobrarImovelParcelamento(parcelamento.getId());
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if(colecaoDebitosACobrar != null){
			BigDecimal valorTotalDebito = BigDecimal.ZERO;

			debitoCreditoParcelamentoHelper.setColecaoDebitoACobrarParcelamento(colecaoDebitosACobrar);

			Iterator iteratorColecaoDebitosACobrar = colecaoDebitosACobrar.iterator();
			while(iteratorColecaoDebitosACobrar.hasNext()){
				DebitoACobrar debitoACobrar = (DebitoACobrar) iteratorColecaoDebitosACobrar.next();
				valorTotalDebito = valorTotalDebito.add(debitoACobrar.getValorTotal());
			}
			debitoCreditoParcelamentoHelper.setValorTotalDebito(valorTotalDebito);
		}

		try{
			colecaoCreditosARealizar = repositorioCobranca.pesquisarCreditosARealizarParcelamento(parcelamento.getId());
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if(colecaoCreditosARealizar != null){

			Collection colecaoCreditosARealizarNovos = new ArrayList();
			BigDecimal valorTotalCredito = BigDecimal.ZERO;

			if(colecaoCreditosARealizar != null && !colecaoCreditosARealizar.isEmpty()){
				Iterator iteratorcolecaoCreditosARealizar = colecaoCreditosARealizar.iterator();

				while(iteratorcolecaoCreditosARealizar.hasNext()){

					Object[] colecaoCreditosARealizarArray = (Object[]) iteratorcolecaoCreditosARealizar.next();

					CreditoARealizar creditoARealizar = null;

					if(colecaoCreditosARealizarArray[0] != null){
						creditoARealizar = (CreditoARealizar) colecaoCreditosARealizarArray[0];
					}

					if(colecaoCreditosARealizarArray[1] != null){
						CreditoTipo creditoTipo = new CreditoTipo();
						creditoTipo.setId((Integer) colecaoCreditosARealizarArray[2]);
						creditoTipo.setDescricao((String) colecaoCreditosARealizarArray[1]);
						creditoARealizar.setCreditoTipo(creditoTipo);

						if(creditoTipo.getId().equals(CreditoTipo.DESCONTO_ACRESCIMOS_IMPONTUALIDADE)){

							debitoCreditoParcelamentoHelper.setSelecaoPermitida(false);
						}
					}
					valorTotalCredito = valorTotalCredito.add(creditoARealizar.getValorTotal());
					colecaoCreditosARealizarNovos.add(creditoARealizar);
				}
			}
			debitoCreditoParcelamentoHelper.setColecaoCreditoARealizarParcelamento(colecaoCreditosARealizarNovos);
			debitoCreditoParcelamentoHelper.setValorTotalCredito(valorTotalCredito);
		}
		return debitoCreditoParcelamentoHelper;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débitos [UC0251] Gerar Atividade de Ação de Cobranca
	 * Recuparea o valor da taxa de cobrança para gerar o documento de cobrança
	 * gerarDocumentoCobranca
	 * 
	 * @author Vivianne Sousa
	 * @date 31/08/2007
	 * @author Saulo Lima
	 * @date 04/02/2010
	 *       Conversão de Integer para int antes de comparar
	 * @param imovel
	 * @param sistemaParametro
	 * @throws ControladorException
	 */
	public BigDecimal obterValorTaxaDocumentoCobranca(Imovel imovel, SistemaParametro sistemaParametro) throws ControladorException{

		BigDecimal valorTaxa = BigDecimal.ZERO;

		// Caso o perfil do imóvel corresponda a tarifa social
		if(imovel.getImovelPerfil().getId().intValue() == ImovelPerfil.TARIFA_SOCIAL.intValue()){
			// Atribuir 0,25% do valor do salário mínimo
			valorTaxa = sistemaParametro.getValorSalarioMinimo().multiply(new BigDecimal("0.0025"));
		}else{
			// Atribuir 0,5% do valor do salário mínimo
			valorTaxa = sistemaParametro.getValorSalarioMinimo().multiply(new BigDecimal("0.005"));
		}

		return valorTaxa;
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/09/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer verificarRDUtilizadaPeloImovel(Integer idRD, Integer idImovel) throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.verificarRDUtilizadaPeloImovel(idRD, idImovel);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 01/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal pesquisarValorDebitoACobrarSancoes(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ControladorException{

		try{
			if(anoMesFinalReferenciaDebito.compareTo(anoMesInicialReferenciaDebito) < 0){
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoACobrarSancoes(idImovel, anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 06/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal pesquisarValorDebitoACobrar(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ControladorException{

		try{
			if(anoMesFinalReferenciaDebito.compareTo(anoMesInicialReferenciaDebito) < 0){
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoACobrar(idImovel, anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 14/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal pesquisarValorDebitoCobradoContas(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoCobradoContas(idImovel, anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] (old)
	 * [UC0643] Inserir Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 14/09/2007
	 * @author eduardo henrique
	 * @date 26/08/2008
	 *       Alterações no [UC0643] para a v0.04
	 * @author Virgínia Melo
	 *         Desfazer alterações para a v0.06
	 * @param idImovel
	 * @return idCobrancaAcao
	 * @throws ControladorException
	 */
	public Integer inserirAcaoCobranca(CobrancaAcaoHelper cobrancaAcaoHelper) throws ControladorException{

		Integer idCobrancaAcao = null;

		CobrancaAcao cobrancaAcao = new CobrancaAcao();

		// verifica a existencia da descrição da ação de cobrança
		if(cobrancaAcaoHelper.getDescricaoCobrancaAcao() != null && !cobrancaAcaoHelper.getDescricaoCobrancaAcao().equals("")){
			cobrancaAcao.setDescricaoCobrancaAcao(cobrancaAcaoHelper.getDescricaoCobrancaAcao());
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Descrição da Ação de Cobrança");
		}

		// verifica a existencia do numero de dias de validade da ação
		if(cobrancaAcaoHelper.getNumeroDiasValidade() != null && !cobrancaAcaoHelper.getNumeroDiasValidade().equals("")){
			cobrancaAcao.setNumeroDiasValidade(Short.valueOf(cobrancaAcaoHelper.getNumeroDiasValidade()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Numero de Dias de Validade da Ação");
		}

		// verifica a existencia do numero de dias para realização da ação
		if(cobrancaAcaoHelper.getQtdDiasRealizacao() != null && !cobrancaAcaoHelper.getQtdDiasRealizacao().equals("")){
			cobrancaAcao.setQtdDiasRealizacao(Short.valueOf(cobrancaAcaoHelper.getQtdDiasRealizacao()));
		}

		// verifica a existencia da ordem do cronograma
		if(cobrancaAcaoHelper.getOrdemRealizacao() != null && !cobrancaAcaoHelper.getOrdemRealizacao().equals("")){

			// [FS0002] - Verificar existência de ação com mesma ordem
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ORDEM_REALIZACAO, cobrancaAcaoHelper
							.getOrdemRealizacao()));

			Collection colecaoCobarncaAcao = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if(colecaoCobarncaAcao != null && !colecaoCobarncaAcao.isEmpty()){
				CobrancaAcao cobAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobarncaAcao);
				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.acao_cobranca_mesma_ordem", null, "" + cobAcao.getDescricaoCobrancaAcao());
			}
			cobrancaAcao.setOrdemRealizacao(Short.valueOf(cobrancaAcaoHelper.getOrdemRealizacao()));
		}

		// verifica a existencia da ação predecessora
		if(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora() != null && !cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora().equals("")){

			// [FS0008] - Verificar se o numero da ordem é menor que o da predecessora
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, cobrancaAcaoHelper
							.getIdCobrancaAcaoPredecessora()));

			Collection colecaoCobarncaAcaoPredecessora = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if(colecaoCobarncaAcaoPredecessora != null && !colecaoCobarncaAcaoPredecessora.isEmpty()){
				CobrancaAcao cobrancaAcaoPredecessora = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobarncaAcaoPredecessora);
				if(cobrancaAcaoPredecessora.getOrdemRealizacao() != null && !cobrancaAcaoPredecessora.getOrdemRealizacao().equals("")
								&& cobrancaAcaoHelper.getOrdemRealizacao() != null && !cobrancaAcaoHelper.getOrdemRealizacao().equals("")
								&& cobrancaAcaoPredecessora.getOrdemRealizacao() >= Short.valueOf(cobrancaAcaoHelper.getOrdemRealizacao())){

					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.acao_cobranca_ordem_realizacao_predecessora");
				}
			}

			CobrancaAcao cobrancaAcaoPredecessora = new CobrancaAcao();
			cobrancaAcaoPredecessora.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));
			cobrancaAcao.setCobrancaAcaoPredecessora(cobrancaAcaoPredecessora);
		}

		if(cobrancaAcaoHelper.getNegativador() != null && !cobrancaAcaoHelper.getNegativador().equals("")
						&& !cobrancaAcaoHelper.getNegativador().equals("-1")){
			Negativador negativador = new Negativador();
			negativador.setId(Util.obterInteger(cobrancaAcaoHelper.getNegativador()));
			cobrancaAcao.setNegativador(negativador);
		}

		cobrancaAcao.setIndicadorCPFCNPJ(Util.obterShort(cobrancaAcaoHelper.getIndicadorCPFCNPJ()));
		cobrancaAcao.setIndicadorCEP(Util.obterShort(cobrancaAcaoHelper.getIndicadorCEP()));

		// verifica a existencia do numero de dias entre a ação e sua predecessora
		if(cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente() != null
						&& !cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente().equals("")){
			cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(Short.valueOf(cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente()));
		}

		// verifica a existencia do tipo do documento a ser gerado
		if(cobrancaAcaoHelper.getIdDocumentoTipo() != null && !cobrancaAcaoHelper.getIdDocumentoTipo().equals("")){
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(Integer.valueOf(cobrancaAcaoHelper.getIdDocumentoTipo()));
			cobrancaAcao.setDocumentoTipo(documentoTipo);
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Tipo de Documento a ser Gerado");
		}

		// verifica a existencia da situação da cobrança
		if(cobrancaAcaoHelper.getIdCobrancaSituacao() != null && !cobrancaAcaoHelper.getIdCobrancaSituacao().equals("")){
			CobrancaSituacao cobrancaSituacao = new CobrancaSituacao();
			cobrancaSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaSituacao()));
			cobrancaAcao.setCobrancaSituacao(cobrancaSituacao);
		}

		// verifica a existencia da situação da ligação de agua
		if(cobrancaAcaoHelper.getIdLigacaoAguaSituacao() != null && !cobrancaAcaoHelper.getIdLigacaoAguaSituacao().equals("")){
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdLigacaoAguaSituacao()));
			cobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		// verifica a existencia da situação da ligação de esgoto
		if(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao() != null && !cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao().equals("")){
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao()));
			cobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// pesquisa enter de critério de cobrança
		if(cobrancaAcaoHelper.getIdCobrancaCriterio() != null && !cobrancaAcaoHelper.getIdCobrancaCriterio().equals("")){
			if(cobrancaAcaoHelper.getDescricaoCobrancaCriterio() == null || cobrancaAcaoHelper.getDescricaoCobrancaCriterio().equals("")){

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID, Integer
								.valueOf(cobrancaAcaoHelper.getIdCobrancaCriterio())));
				filtroCobrancaCriterio.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil().pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if(colecaoCobrancaCriterio != null && !colecaoCobrancaCriterio.isEmpty()){
					CobrancaCriterio cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(colecaoCobrancaCriterio);
					cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
				}else{
					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Critério de Cobrança");
				}
			}else{
				CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaCriterio()));
				cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
			}

		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Critério de Cobrança");
		}

		// resoluções da diretoria obrigatórios,
		// caso Tipo de Documento referente a 37 "Carta com opções de
		// Parcelamento".
		if(cobrancaAcao.getDocumentoTipo().getId().intValue() == DocumentoTipo.CARTA_OPCAO_PARCELAMENTO.intValue()){

			if(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 1ª R.D. ");
			}else{
				ResolucaoDiretoria primeiraResolucaoDiretoria = new ResolucaoDiretoria();
				primeiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								primeiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				primeiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setPrimeiraResolucaoDiretoria(primeiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getPrimeiraResolucaoDiretoria().getId()));

				Collection<ParcelamentoPerfil> colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 1);

			}

			if(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 2ª R.D. ");
			}else{
				ResolucaoDiretoria segundaResolucaoDiretoria = new ResolucaoDiretoria();
				segundaResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO, segundaResolucaoDiretoria
								.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				segundaResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setSegundaResolucaoDiretoria(segundaResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getSegundaResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 2ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 2);

			}

			if(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 3ª R.D. ");
			}else{
				ResolucaoDiretoria terceiraResolucaoDiretoria = new ResolucaoDiretoria();
				terceiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								terceiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				terceiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setTerceiraResolucaoDiretoria(terceiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getTerceiraResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 3);

			}

			// Caso tenha informado alguma R.D. igual a outra
			if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getSegundaResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria()
							.getId().intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getSegundaResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}

			// Obrigatórios, caso Tipo de Documento referente a 37 - "Carta com opções de
			// Parcelamento"
			// verifica a existencia do indicador de credito a realizar
			if(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar().equals("")){

				cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Crédito a Realizar");
			}

			// verifica a existencia do indicador de guia de pagamento
			if(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento().equals("")){

				cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Guia de Pagamento");
			}

		}else{

			// Caso Tipo de Documento seja diferente de 37 - "Carta com opções de Parcelamento",
			// assumir o valor 2 Não
			cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf("2"));
			cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf("2"));
		}

		// pesquisa enter de critério de cobrança
		if(cobrancaAcaoHelper.getIdServicoTipo() != null && !cobrancaAcaoHelper.getIdServicoTipo().equals("")){
			if(cobrancaAcaoHelper.getDescricaoServicoTipo() == null || cobrancaAcaoHelper.getDescricaoServicoTipo().equals("")){

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(FiltroServicoTipo.ID, Integer.valueOf(cobrancaAcaoHelper
								.getIdServicoTipo())));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(filtroServicoTipo, ServicoTipo.class.getName());

				if(colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()){
					ServicoTipo servicoTipo = (ServicoTipo) Util.retonarObjetoDeColecao(colecaoServicoTipo);
					cobrancaAcao.setServicoTipo(servicoTipo);
				}else{
					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Tipo de serviço");
				}
			}else{
				ServicoTipo servicoTipo = new ServicoTipo();
				servicoTipo.setId(Integer.valueOf(cobrancaAcaoHelper.getIdServicoTipo()));
				cobrancaAcao.setServicoTipo(servicoTipo);
			}

		}

		// verifica a existencia do indicador de compõe o cronograma
		if(cobrancaAcaoHelper.getIndicadorCronograma() != null && !cobrancaAcaoHelper.getIndicadorCronograma().equals("")){
			cobrancaAcao.setIndicadorCronograma(Short.valueOf(cobrancaAcaoHelper.getIndicadorCronograma()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Compõe Cronograma");
		}

		// verifica a existencia do indicador de ação Obrigatória
		if(cobrancaAcaoHelper.getIndicadorObrigatoriedade() != null && !cobrancaAcaoHelper.getIndicadorObrigatoriedade().equals("")){
			if(Short.valueOf(cobrancaAcaoHelper.getIndicadorObrigatoriedade()).equals(CobrancaAcao.INDICADOR_SIM)
							&& Short.valueOf(cobrancaAcaoHelper.getIndicadorCronograma()).equals(CobrancaAcao.INDICADOR_NAO)){
				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.acao_cobranca_compor_cronograma");
			}
			cobrancaAcao.setIndicadorObrigatoriedade(Short.valueOf(cobrancaAcaoHelper.getIndicadorObrigatoriedade()));

		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Ação Obrigatória");
		}

		// verifica a existencia do indicador de repetição
		if(cobrancaAcaoHelper.getIndicadorRepeticao() != null && !cobrancaAcaoHelper.getIndicadorRepeticao().equals("")){
			cobrancaAcao.setIndicadorRepeticao(Short.valueOf(cobrancaAcaoHelper.getIndicadorRepeticao()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Pode ser Repetida no Ciclo");
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if(cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento() != null
						&& !cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento().equals("")){
			cobrancaAcao.setIndicadorSuspensaoAbastecimento(Short.valueOf(cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Provoca Suspensão no Abastecimento");
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if(cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar() != null && !cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar().equals("")){
			cobrancaAcao.setIndicadorCobrancaDebACobrar(Short.valueOf(cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Considera Débitos a Cobrar");
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if(cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade() != null
						&& !cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade().equals("")){
			cobrancaAcao.setIndicadorAcrescimoImpontualidade(Short.valueOf(cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Considera Acréscimos por Impontualidade");
		}

		// verifica a existencia do indicador de geração de taxa
		if(cobrancaAcaoHelper.getIndicadorGeracaoTaxa() != null && !cobrancaAcaoHelper.getIndicadorGeracaoTaxa().equals("")){
			cobrancaAcao.setIndicadorGeracaoTaxa(Short.valueOf(cobrancaAcaoHelper.getIndicadorGeracaoTaxa()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Gera Taxa");
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if(cobrancaAcaoHelper.getIndicadorBoletim() != null && !cobrancaAcaoHelper.getIndicadorBoletim().equals("")){
			cobrancaAcao.setIndicadorBoletim(Short.valueOf(cobrancaAcaoHelper.getIndicadorBoletim()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Pode Emitir Boletins de Cadastro");
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(cobrancaAcaoHelper.getIndicadorDebito() != null && !cobrancaAcaoHelper.getIndicadorDebito().equals("")){
			cobrancaAcao.setIndicadorDebito(Short.valueOf(cobrancaAcaoHelper.getIndicadorDebito()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Pode ser Executada para Imóveis sem Débito");
		}

		// verifica a existencia do indicador de empresa obrigatoria
		if(cobrancaAcaoHelper.getIndicadorEmpresaObrigatoria() != null && !cobrancaAcaoHelper.getIndicadorEmpresaObrigatoria().equals("")){
			cobrancaAcao.setIndicadorEmpresaObrigatoria(Short.valueOf(cobrancaAcaoHelper.getIndicadorEmpresaObrigatoria()));
		}else{
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null, "Pode ser Executada para Empresa Obrigatoria");
		}

		// verifica a existencia dnumero de dias de vencimento
		if(cobrancaAcaoHelper.getNumeroDiasVencimento() != null && !cobrancaAcaoHelper.getNumeroDiasVencimento().equals("")){
			cobrancaAcao.setNumeroDiasVencimento(Integer.valueOf(cobrancaAcaoHelper.getNumeroDiasVencimento()));
		}
		// } else {
		// // levanta a exceção para a próxima camada
		// throw new ControladorException("atencao.required", null,
		// "Pode ser Executada para Imóveis sem Débito");
		// }
		AcaoCobrancaEfeito acaoCobrancaEfeito = null;
		if(cobrancaAcaoHelper.getAcaoCobrancaEfeito() != null && !cobrancaAcaoHelper.getAcaoCobrancaEfeito().equals("")){
			try{
				acaoCobrancaEfeito = repositorioCobranca.pesquisarAcaoCobrancaEfeitoPorId(cobrancaAcaoHelper.getAcaoCobrancaEfeito());
			}catch(ErroRepositorioException e){
				throw new ControladorException("", e);
			}
		}else{
			throw new ControladorException("atencao.required", null, "Contra-Ação");
		}
		cobrancaAcao.setAcaoCobrancaEfeito(acaoCobrancaEfeito);

		cobrancaAcao.setUltimaAlteracao(new Date());

		cobrancaAcao.setIndicadorUso(Short.valueOf(cobrancaAcaoHelper.getIndicadorUso()));

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_COBRANCA_ACAO_INSERIR,
						new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(), UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_COBRANCA_ACAO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		cobrancaAcao.setOperacaoEfetuada(operacaoEfetuada);
		cobrancaAcao.adicionarUsuario(cobrancaAcaoHelper.getUsuarioLogado(), UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(cobrancaAcao);

		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		idCobrancaAcao = (Integer) getControladorUtil().inserir(cobrancaAcao);

		return idCobrancaAcao;
	}

	/**
	 * [UC0701] Informar Índices dos Acréscimos de Impontualidade
	 * 
	 * @author Sávio Luiz
	 * @created 26/09/2007
	 * @throws ControladorException
	 */
	public Integer pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade() throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade();

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 18/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal obterDescontoTarifaSocial(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito, ParcelamentoPerfil parcelamentoPerfil,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento) throws ControladorException{

		BigDecimal retorno = BigDecimal.ZERO;

		if(anoMesFinalReferenciaDebito.compareTo(anoMesInicialReferenciaDebito) < 0){
			anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
		}

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		Collection colecaoContas = getControladorFaturamento().pesquisarContasAtualizacaoTarifaria(idImovel, anoMesInicialReferenciaDebito,
						anoMesFinalReferenciaDebito, Util.converteStringParaDate("01/01/0001"), // Inicio
						// Vencimento
						Util.converteStringParaDate("31/12/9999") // Final
						// Vencimento
						);

		if(colecaoContas != null && !colecaoContas.isEmpty()){

			Iterator iter = colecaoContas.iterator();
			while(iter.hasNext()){
				Conta conta = (Conta) iter.next();
				BigDecimal valorAtualizacaoTarifaSocial = calcularValorAtualizacaoTarifaSocial(sistemaParametro, conta);
				retorno = retorno.add(valorAtualizacaoTarifaSocial);
				ContaValoresHelper contaHelper = new ContaValoresHelper();
				contaHelper.setConta(conta);
				opcoesParcelamento.incrementaDescontoValor(contaHelper, valorAtualizacaoTarifaSocial);
			}
		}

		return retorno;

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 18/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAtualizacaoTarifaSocial(SistemaParametro sistemaParametro, Conta conta) throws ControladorException{

		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;

		Imovel imovel = conta.getImovel();
		ConsumoTarifa consumoTarifa = new ConsumoTarifa();
		consumoTarifa.setId(ConsumoTarifa.CONSUMO_SOCIAL);
		imovel.setConsumoTarifa(consumoTarifa);

		// [UC0105] - Obter Consumo Mínimo da Ligação
		Integer consumoMinimoLigacao = getControladorMicromedicao().obterConsumoMinimoLigacao(imovel, null);

		// [UC0108] - Obter Quantidade de Economias por Categoria
		Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

		Integer anoMesReferencia = sistemaParametro.getAnoMesFaturamento();

		// Data de Leitura Anterior
		Integer anoMesReferenciaAnterior = Util.subtrairMesDoAnoMes(anoMesReferencia, 1);

		Date dataLeituraAnterior = null;
		try{

			dataLeituraAnterior = (Date) this.repositorioFaturamento.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(imovel.getRota()
							.getFaturamentoGrupo().getId(), FaturamentoAtividade.EFETUAR_LEITURA, anoMesReferenciaAnterior);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// Data de Leitura Atual
		Date dataLeituraAtual = null;
		try{

			dataLeituraAtual = (Date) this.repositorioFaturamento.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(imovel.getRota()
							.getFaturamentoGrupo().getId(), FaturamentoAtividade.EFETUAR_LEITURA, anoMesReferencia);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		/*
		 * Caso NÃO existe cronograma para o anoMes informado
		 */

		if(dataLeituraAnterior == null || dataLeituraAtual == null){

			int mesConta = Util.obterMes(anoMesReferencia);
			int anoConta = Util.obterAno(anoMesReferencia);

			int ultimoDiaMes = Integer.valueOf(Util.obterUltimoDiaMes(mesConta, anoConta));

			dataLeituraAtual = Util.criarData(ultimoDiaMes, mesConta, anoConta);

			dataLeituraAnterior = Util.criarData(1, mesConta, anoConta);
		}

		BigDecimal percentualEsgoto = BigDecimal.ZERO;
		if(conta.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO)){
			percentualEsgoto = conta.getPercentualEsgoto();
		}

		// Valores de água e esgoto que estão na conta (VALOR ANTIGO)
		BigDecimal valorAguaEsgotoAnterior = BigDecimal.ZERO;

		if(conta.getValorAgua() != null){
			valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorAgua());
		}

		if(conta.getValorEsgoto() != null){
			valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorEsgoto());
		}

		// Valores de água e esgoto (VALOR ATUAL)
		BigDecimal valorAguaEsgotoAtual = BigDecimal.ZERO;

		// [UC0120] - Calcular Valores de Água e/ou Esgoto
		Collection<CalcularValoresAguaEsgotoHelper> colecaoCalcularValoresAguaEsgotoHelper = this.getControladorFaturamento()
						.calcularValoresAguaEsgoto(anoMesReferencia, conta.getLigacaoAguaSituacao().getId(),
										conta.getLigacaoEsgotoSituacao().getId(), Short.valueOf((short) 1), Short.valueOf((short) 1),
										colecaoCategorias, conta.getConsumoAgua(), conta.getConsumoEsgoto(), consumoMinimoLigacao,
										dataLeituraAnterior, dataLeituraAtual, percentualEsgoto, ConsumoTarifa.CONSUMO_SOCIAL,
										imovel.getId());

		if(colecaoCalcularValoresAguaEsgotoHelper != null && !colecaoCalcularValoresAguaEsgotoHelper.isEmpty()){

			CalcularValoresAguaEsgotoHelper valoresAguaEsgoto = null;

			if(colecaoCalcularValoresAguaEsgotoHelper.size() > 1){

				Iterator itAguaEsgoto = colecaoCalcularValoresAguaEsgotoHelper.iterator();

				while(itAguaEsgoto.hasNext()){

					valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) itAguaEsgoto.next();

					if(valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null){
						valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
					}

					if(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null){
						valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
					}
				}
			}else{

				valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) Util.retonarObjetoDeColecao(colecaoCalcularValoresAguaEsgotoHelper);

				if(valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null){
					valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
				}

				if(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null){
					valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
				}
			}

			valorAtualizacaoMonetaria = valorAguaEsgotoAnterior.subtract(valorAguaEsgotoAtual);

			if(valorAtualizacaoMonetaria.compareTo(BigDecimal.ZERO) == -1){
				valorAtualizacaoMonetaria = BigDecimal.ZERO;
			}
		}

		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 20/09/2007
	 * @param idImovel
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal pesquisarValorDebitoCobradoSancoes(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ControladorException{

		try{

			if(anoMesFinalReferenciaDebito.compareTo(anoMesInicialReferenciaDebito) < 0){
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoCobradoSancoes(idImovel, anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito);

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 20/09/2007
	 * @param idImovel
	 * @param inicioIntervaloParcelamento
	 * @param fimIntervaloParcelamento
	 * @param indicadoresParcelamentoHelper
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal obterValorDescontoPagamentoAVista(Integer idImovel, Integer inicioIntervaloParcelamento,
					Integer fimIntervaloParcelamento, IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
					ParcelamentoPerfil parcelamentoPerfil, BigDecimal valorDescontos) throws ControladorException{

		BigDecimal valorDescontoPagamentoAVista = BigDecimal.ZERO;

		if(fimIntervaloParcelamento.compareTo(inicioIntervaloParcelamento) < 0){
			fimIntervaloParcelamento = inicioIntervaloParcelamento;
		}

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(1, // Indicador
						// de
						// débito
						// do
						// imóvel
						idImovel.toString(), // Matrícula do imóvel
						null, // Código do cliente
						null, // Tipo de relação cliente imóvel
						inicioIntervaloParcelamento.toString(), // Referência inicial do
						// débito
						fimIntervaloParcelamento.toString(), // Fim do débito
						Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
						Util.converteStringParaDate("31/12/9999"), // Fim vencimento
						1, // Indicador de pagamento
						indicadoresParcelamentoHelper.getIndicadorContasRevisao(), // conta
						// em
						// revisão
						indicadoresParcelamentoHelper.getIndicadorDebitosACobrar(), // Débito
						// a
						// cobrar
						indicadoresParcelamentoHelper.getIndicadorCreditoARealizar(), // crédito
						// a
						// realizar
						1, // Indicador de notas promissórias
						indicadoresParcelamentoHelper.getIndicadorGuiasPagamento(), // guias
						// pagamento
						indicadoresParcelamentoHelper.getIndicadorAcrescimosImpotualidade(), // acréscimos
						// impontualidade
						true, null, null, null, null,// SistemaParametros
						ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

		Collection<ContaValoresHelper> colecaoContaValores = obterDebitoImovelOuCliente.getColecaoContasValores();

		if(colecaoContaValores != null && !colecaoContaValores.isEmpty() && parcelamentoPerfil.getParcelaQuantidadeMinimaFatura() != null
						&& colecaoContaValores.size() >= parcelamentoPerfil.getParcelaQuantidadeMinimaFatura()){

			// Para o cálculo do Débito Total Atualizado
			BigDecimal valorTotalContas = BigDecimal.ZERO;

			BigDecimal valorTotalAcrescimoImpontualidade = BigDecimal.ZERO;
			BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
			BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;

			BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = BigDecimal.ZERO;

			BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = BigDecimal.ZERO;

			BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;

			BigDecimal valorRestanteACobrar = BigDecimal.ZERO;
			BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
			BigDecimal valorJurosMora = BigDecimal.ZERO;
			BigDecimal valorMulta = BigDecimal.ZERO;

			BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;

			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;

			if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
				Iterator contaValores = colecaoContaValores.iterator();
				while(contaValores.hasNext()){
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
					valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());

					if(contaValoresHelper.getValorAtualizacaoMonetaria() != null
									&& !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")){
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria()
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if(contaValoresHelper.getValorJurosMora() != null && !contaValoresHelper.getValorJurosMora().equals("")){
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if(contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")){
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}

					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper
									.getValorTotalContaValoresParcelamento());
				}
			}

			// Guias de Pagamento
			if(indicadoresParcelamentoHelper.getIndicadorGuiasPagamento().equals(ConstantesSistema.SIM.intValue())){
				Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = obterDebitoImovelOuCliente
								.getColecaoGuiasPagamentoValores();
				if(colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()){
					Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();
					while(guiaPagamentoValores.hasNext()){
						GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();
						valorTotalGuiasPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(guiaPagamentoValoresHelper.getValorTotalPrestacao());

						if(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
										&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")){
							valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
											.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,
															Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if(guiaPagamentoValoresHelper.getValorJurosMora() != null
										&& !guiaPagamentoValoresHelper.getValorJurosMora().equals("")){
							valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper.getValorJurosMora().setScale(
											Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if(guiaPagamentoValoresHelper.getValorMulta() != null && !guiaPagamentoValoresHelper.getValorMulta().equals("")){
							valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorMulta = valorMulta.add(guiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// Para cálculo do Acrescimo de Impontualidade
						valorTotalAcrescimoImpontualidadeGuias.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(guiaPagamentoValoresHelper
										.getValorAcrescimosImpontualidade());
					}
				}
			}

			// Acrescimos por Impotualidade
			BigDecimal retornoSoma = BigDecimal.ZERO;
			if(indicadoresParcelamentoHelper.getIndicadorAcrescimosImpotualidade().equals(ConstantesSistema.SIM.intValue())){
				retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
				retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);

			}

			// Para o cálculo do Débito Total Atualizado
			valorTotalAcrescimoImpontualidade = retornoSoma;

			// Debitos A Cobrar
			if(indicadoresParcelamentoHelper.getIndicadorDebitosACobrar().equals(ConstantesSistema.SIM.intValue())){
				// [FS0022]-Verificar existência de juros sobre imóvel
				Collection colecaoDebitoACobrar = obterDebitoImovelOuCliente.getColecaoDebitoACobrar();
				if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
					Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

					final int indiceCurtoPrazo = 0;
					final int indiceLongoPrazo = 1;

					Collection<Integer> tiposParcelamento = Util
									.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO.executar());

					while(debitoACobrarValores.hasNext()){
						DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

						// [FS0022]-Verificar existência de juros sobre imóvel
						if(debitoACobrar.getDebitoTipo().getId() != null
										&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){

							// Debitos A Cobrar - Serviço
							if(debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.SERVICO_NORMAL)){
								// [SB0001] Obter Valores de Curto e Longo Prazo
								valorRestanteACobrar = debitoACobrar.getValorTotal();

								BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
												debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
												valorRestanteACobrar);
								valorTotalRestanteServicosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
												.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

								valorTotalRestanteServicosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
												.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

							// Debitos A Cobrar - Parcelamento
							if(tiposParcelamento != null && tiposParcelamento.contains(debitoACobrar.getFinanciamentoTipo().getId())){

								// [SB0001] Obter Valores de Curto e Longo Prazo
								valorRestanteACobrar = debitoACobrar.getValorTotal();

								BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
												debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
												valorRestanteACobrar);

								valorTotalRestanteParcelamentosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
												.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

								valorTotalRestanteParcelamentosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
												.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

						}

					}

					// Serviços
					valorTotalRestanteServicosACobrar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo
									.add(valorTotalRestanteServicosACobrarLongoPrazo);
					// Parcelamentos
					valorTotalRestanteParcelamentosACobrar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
									.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
				}
			}

			// Crédito A Realizar
			if(indicadoresParcelamentoHelper.getIndicadorCreditoARealizar().equals(ConstantesSistema.SIM.intValue())){
				Collection<CreditoARealizar> colecaoCreditoARealizar = obterDebitoImovelOuCliente.getColecaoCreditoARealizar();
				if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
					Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();
					while(creditoARealizarValores.hasNext()){
						CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();
						valorCreditoARealizar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorCreditoARealizar = valorCreditoARealizar.add(creditoARealizar.getValorTotal());
					}
				}
			}

			// Débito Total Atualizado
			valorDebitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalContas);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalGuiasPagamento);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalAcrescimoImpontualidade);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalRestanteServicosACobrar);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalRestanteParcelamentosACobrar);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.subtract(valorCreditoARealizar);

			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.subtract(valorDescontos);

			BigDecimal descontoAVista = parcelamentoPerfil.getPercentualDescontoAVista();
			if(descontoAVista != null && !(descontoAVista.compareTo(BigDecimal.ZERO) == 0)){
				descontoAVista = descontoAVista.divide(new BigDecimal("100.00"));
				valorDescontoPagamentoAVista = valorDebitoTotalAtualizado.multiply(descontoAVista.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

			}

		}

		return valorDescontoPagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
	}

	/**
	 * Retorna uma colecao de Debitos por Faixa de Valores dos Imoveis
	 * 
	 * @author Ivan Sergio
	 * @created 20/09/2007
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarDebitoImovelPorFaixaValores(Collection colecaoIdImoveis, String valorMinimoDebito,
					String anoMesReferenciaInicial, String anoMesReferenciaFinal, String classificacao) throws ControladorException{

		Collection colecaoImoveisFaixaValores = null;
		String imovel = "";

		try{
			if(colecaoIdImoveis != null & !colecaoIdImoveis.isEmpty()){
				Iterator icolecaoImoveis = colecaoIdImoveis.iterator();

				while(icolecaoImoveis.hasNext()){
					imovel += ((Integer) icolecaoImoveis.next()).toString() + ",";
				}

				// Retira a ultima virgula da lista

				imovel = imovel.substring(0, (imovel.length() - 1));

				colecaoImoveisFaixaValores = repositorioCobranca.pesquisarDebitoImovelPorFaixaValores(imovel, valorMinimoDebito,
								anoMesReferenciaInicial, anoMesReferenciaFinal, classificacao);

			}

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoImoveisFaixaValores;
	}

	/**
	 * [UC0644] Filtrar Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 10/10/2007
	 * @author eduardo henrique
	 * @date 26/08/2008 Alterações no [UC0644] para a v0.04
	 * @author Virgínia Melo
	 * @date 31/10/2008 Desfazer alterações no [UC0644] para a v0.04
	 * @return FiltroCobrancaAcao
	 * @throws ControladorException
	 */
	public FiltroCobrancaAcao filtrarAcaoCobranca(String descricaoAcaoCobranca, String numeroDiasValidade, String qtdDiasRealizacao,
					String idAcaoPredecessora, String numeroDiasEntreAcoes, String idTipoDocumentoGerado, String idSituacaoLigacaoAgua,
					String idSituacaoLigacaoEsgoto, String idCobrancaCriterio, String descricaoCobrancaCriterio, String idServicoTipo,
					String descricaoServicoTipo, String ordemCronograma, String icCompoeCronograma, String icAcaoObrigatoria,
					String icRepetidaCiclo, String icSuspensaoAbastecimento, String icDebitosACobrar, String icAcrescimosImpontualidade,
					String icGeraTaxa, String icEmitirBoletimCadastro, String icImoveisSemDebitos, String icUso,
					String idPrimeiraResolucaoDiretoria, String idSegundaResolucaoDiretoria, String idTerceiraResolucaoDiretoria,
					String indicadorConsideraCreditoRealizar, String indicadorConsideraGuiaPagamento) throws ControladorException{

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();

		boolean peloMenosUmParametroInformado = false;

		// verifica a existencia da descrição da ação de cobrança
		if(descricaoAcaoCobranca != null && !descricaoAcaoCobranca.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ComparacaoTexto(FiltroCobrancaAcao.DESCRICAO, descricaoAcaoCobranca));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do numero de dias de validade da ação
		if(numeroDiasValidade != null && !numeroDiasValidade.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.NUMERO_DIAS_VALIDADE, numeroDiasValidade));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da quantidade de dias para a realização da ação
		if(qtdDiasRealizacao != null && !qtdDiasRealizacao.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.QTD_DIAS_REALIZACAO, qtdDiasRealizacao));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da ação predecessora
		if(idAcaoPredecessora != null && !idAcaoPredecessora.equals("")){

			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID, idAcaoPredecessora));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do numero de dias entre a ação e sua
		// predecessora
		if(numeroDiasEntreAcoes != null && !numeroDiasEntreAcoes.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.NUMERO_DIAS_MINIMO_ACAO_PRECEDENTE,
							numeroDiasEntreAcoes));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do tipo do documento a ser gerado
		if(idTipoDocumentoGerado != null && !idTipoDocumentoGerado.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.DOCUMENTO_TIPO_ID, idTipoDocumentoGerado));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da situação da ligação de agua
		if(idSituacaoLigacaoAgua != null && !idSituacaoLigacaoAgua.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.LIGACAO_AGUA_SITUACAO_ID, idSituacaoLigacaoAgua));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da situação da ligação de esgoto
		if(idSituacaoLigacaoEsgoto != null && !idSituacaoLigacaoEsgoto.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.LIGACAO_ESGOTO_SITUACAO_ID,
							idSituacaoLigacaoEsgoto));
			peloMenosUmParametroInformado = true;
		}

		// pesquisa enter de critério de cobrança
		if(idCobrancaCriterio != null && !idCobrancaCriterio.equals("")){
			if(descricaoCobrancaCriterio == null || descricaoCobrancaCriterio.equals("")){

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID, Integer
								.valueOf(idCobrancaCriterio)));
				filtroCobrancaCriterio.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil().pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if(colecaoCobrancaCriterio != null && !colecaoCobrancaCriterio.isEmpty()){
					filtroCobrancaAcao
									.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.COBRANCAO_CRITERIO_ID, idCobrancaCriterio));
					peloMenosUmParametroInformado = true;
				}else{
					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Critério de Cobrança");
				}
			}else{
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.COBRANCAO_CRITERIO_ID, idCobrancaCriterio));
				peloMenosUmParametroInformado = true;
			}

		}

		// pesquisa enter de critério de cobrança
		if(idServicoTipo != null && !idServicoTipo.equals("")){
			if(descricaoServicoTipo == null || descricaoServicoTipo.equals("")){

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(FiltroServicoTipo.ID, Integer.valueOf(idServicoTipo)));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(filtroServicoTipo, ServicoTipo.class.getName());

				if(colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()){
					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.SERVICO_TIPO_ID_ACAO_COBRANCA,
									idServicoTipo));
					peloMenosUmParametroInformado = true;
				}else{
					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Tipo de serviço");
				}
			}else{
				filtroCobrancaAcao
								.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.SERVICO_TIPO_ID_ACAO_COBRANCA, idServicoTipo));
				peloMenosUmParametroInformado = true;
			}

		}

		// verifica a existencia da ordem do cronograma
		if(ordemCronograma != null && !ordemCronograma.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ORDEM_REALIZACAO, ordemCronograma));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do Número da 1ª R.D.
		if(idPrimeiraResolucaoDiretoria != null && !idPrimeiraResolucaoDiretoria.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.PRIMEIRA_RESOLUCAO_DIRETORIA_ID,
							idPrimeiraResolucaoDiretoria));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do Número da 2ª R.D.
		if(idSegundaResolucaoDiretoria != null && !idSegundaResolucaoDiretoria.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.SEGUNDA_RESOLUCAO_DIRETORIA_ID,
							idSegundaResolucaoDiretoria));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do Número da 3ª R.D.
		if(idTerceiraResolucaoDiretoria != null && !idTerceiraResolucaoDiretoria.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.TERCEIRA_RESOLUCAO_DIRETORIA_ID,
							idTerceiraResolucaoDiretoria));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de Considera Crédito a Realizar:
		if(indicadorConsideraCreditoRealizar != null && !indicadorConsideraCreditoRealizar.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_CONSIDERA_CREDITO_REALIZAR,
							indicadorConsideraCreditoRealizar));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de Considera Guia de Pagamento:
		if(indicadorConsideraGuiaPagamento != null && !indicadorConsideraGuiaPagamento.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_CONSIDERA_GUIA_PAGAMENTO,
							indicadorConsideraGuiaPagamento));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(icCompoeCronograma != null && !icCompoeCronograma.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_CRONOGRAMA, icCompoeCronograma));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de ação Obrigatória
		if(icAcaoObrigatoria != null && !icAcaoObrigatoria.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_OBRIGATORIEDADE, icAcaoObrigatoria));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de repetição
		if(icRepetidaCiclo != null && !icRepetidaCiclo.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_REPETICAO, icRepetidaCiclo));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if(icSuspensaoAbastecimento != null && !icSuspensaoAbastecimento.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_SUSPENSAO_ABASTECIMENTO,
							icSuspensaoAbastecimento));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if(icDebitosACobrar != null && !icDebitosACobrar.equals("")){
			filtroCobrancaAcao
							.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_COBRANCA_DEB_A_COBRAR, icDebitosACobrar));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if(icAcrescimosImpontualidade != null && !icAcrescimosImpontualidade.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_ACRESCIMO_IMPONTUALIDADE,
							icAcrescimosImpontualidade));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de geração de taxa
		if(icGeraTaxa != null && !icGeraTaxa.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_GERACAO_TAXA, icGeraTaxa));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if(icEmitirBoletimCadastro != null && !icEmitirBoletimCadastro.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_BOLETIM, icEmitirBoletimCadastro));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(icImoveisSemDebitos != null && !icImoveisSemDebitos.equals("")){
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_DEBITO, icImoveisSemDebitos));
			peloMenosUmParametroInformado = true;
		}

		if((icUso != null && !icUso.equals("" + ConstantesSistema.NUMERO_NAO_INFORMADO)) && (!icUso.equals("3"))){

			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.INDICADOR_USO, icUso));
			peloMenosUmParametroInformado = true;
		}

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if(!peloMenosUmParametroInformado){
			throw new ControladorException("atencao.filtro.nenhum_parametro_informado");
		}

		return filtroCobrancaAcao;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal, String idCobrancaAcao)
					throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasIntervaloSetor(codigoSetorComercialInicial, codigoSetorComercialFinal,
							idLocalidade, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	// Flávio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotas(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotas(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasSemCriterioIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao)
					throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterioIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasSemCriterioIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterioIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasSemCriterioIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao)
					throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterioIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasIntervaloLocalidadeSemCriterio(String idLocalidadeInicial, String idLocalidadeFinal,
					String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterioIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal,
							idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasSemCriterioIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterioIntervaloSetor(codigoSetorComercialInicial, codigoSetorComercialFinal,
							idLocalidade, idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author Saulo Lima
	 *         caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	 */
	public Collection pesquisarRotasSemCriterio(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarRotasSemCriterio(codigoSetorComercial, rotaInicial, rotaFinal, idLocalidade,
							idCobrancaAcao);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * [UC0645] Manter Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 06/11/2007
	 * @author eduardo henrique
	 * @date 26/08/2008
	 *       Alterações no [UC0645] para a v0.04
	 * @author Virgínia Melo
	 * @date 31/10/2008
	 *       Desfazer alterações no [UC0645] para a v0.06
	 * @param cobrancaAcao
	 * @param cobrancaAcaoHelper
	 * @throws ControladorException
	 */
	public void atualizarAcaoCobranca(CobrancaAcao cobrancaAcao, CobrancaAcaoHelper cobrancaAcaoHelper) throws ControladorException{

		// verifica a existencia da descrição da ação de cobrança
		if(cobrancaAcaoHelper.getDescricaoCobrancaAcao() != null && !cobrancaAcaoHelper.getDescricaoCobrancaAcao().equals("")){
			cobrancaAcao.setDescricaoCobrancaAcao(cobrancaAcaoHelper.getDescricaoCobrancaAcao());
		}else{
			throw new ControladorException("atencao.required", null, "Descrição da Ação de Cobrança");
		}

		// verifica a existencia do numero de dias de validade da ação
		if(cobrancaAcaoHelper.getNumeroDiasValidade() != null && !cobrancaAcaoHelper.getNumeroDiasValidade().equals("")){
			cobrancaAcao.setNumeroDiasValidade(Short.valueOf(cobrancaAcaoHelper.getNumeroDiasValidade()));
		}else{
			throw new ControladorException("atencao.required", null, "Numero de Dias de Validade da Ação");
		}

		if(cobrancaAcaoHelper.getQtdDiasRealizacao() != null && !cobrancaAcaoHelper.getQtdDiasRealizacao().equals("")){
			cobrancaAcao.setQtdDiasRealizacao(Short.valueOf(cobrancaAcaoHelper.getQtdDiasRealizacao()));
		}else{
			cobrancaAcao.setQtdDiasRealizacao(null);
		}

		// verifica a existencia da ordem do cronograma
		if(cobrancaAcaoHelper.getOrdemRealizacao() != null && !cobrancaAcaoHelper.getOrdemRealizacao().equals("")){

			// [FS0002] - Verificar existência de ação com mesma ordem
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ORDEM_REALIZACAO, cobrancaAcaoHelper
							.getOrdemRealizacao()));
			filtroCobrancaAcao.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroCobrancaAcao.ID, cobrancaAcao.getId()));

			Collection colecaoCobarncaAcao = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if(colecaoCobarncaAcao != null && !colecaoCobarncaAcao.isEmpty()){
				CobrancaAcao cobAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobarncaAcao);
				throw new ControladorException("atencao.acao_cobranca_mesma_ordem", null, "" + cobAcao.getDescricaoCobrancaAcao());
			}
			cobrancaAcao.setOrdemRealizacao(Short.valueOf(cobrancaAcaoHelper.getOrdemRealizacao()));
		}else{
			cobrancaAcao.setOrdemRealizacao(null);
		}

		// verifica a existencia da ação predecessora
		if(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora() != null && !cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora().equals("")){

			// [FS0008] - Verificar se o numero da ordem é menor que o da predecessora
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, cobrancaAcaoHelper
							.getIdCobrancaAcaoPredecessora()));

			Collection colecaoCobarncaAcaoPredecessora = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if(colecaoCobarncaAcaoPredecessora != null && !colecaoCobarncaAcaoPredecessora.isEmpty()){
				CobrancaAcao cobrancaAcaoPredecessora = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobarncaAcaoPredecessora);

				Short ordemRealizacao = null;
				if(cobrancaAcaoHelper.getOrdemRealizacao() != null && !"".equals(cobrancaAcaoHelper.getOrdemRealizacao())){
					ordemRealizacao = Short.valueOf(cobrancaAcaoHelper.getOrdemRealizacao());

					if(cobrancaAcaoPredecessora.getOrdemRealizacao() != null
									&& cobrancaAcaoPredecessora.getOrdemRealizacao() >= ordemRealizacao){

						throw new ControladorException("atencao.acao_cobranca_ordem_realizacao_predecessora");

					}

				}

			}

			CobrancaAcao cobrancaAcaoPredecessora = new CobrancaAcao();
			cobrancaAcaoPredecessora.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));
			cobrancaAcao.setCobrancaAcaoPredecessora(cobrancaAcaoPredecessora);
			if(cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente() != null
							&& !cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente().equals("")){
				cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(Short.valueOf(cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente()));
			}
		}else{
			cobrancaAcao.setCobrancaAcaoPredecessora(null);
			cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(null);
		}

		// verifica a existencia do tipo do documento a ser gerado
		if(cobrancaAcaoHelper.getIdDocumentoTipo() != null && !cobrancaAcaoHelper.getIdDocumentoTipo().equals("")){
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(Integer.valueOf(cobrancaAcaoHelper.getIdDocumentoTipo()));
			cobrancaAcao.setDocumentoTipo(documentoTipo);
		}else{
			throw new ControladorException("atencao.required", null, "Tipo de Documento a ser Gerado");
		}

		// verifica a existencia da situação da cobrança
		if(cobrancaAcaoHelper.getIdCobrancaSituacao() != null && !cobrancaAcaoHelper.getIdCobrancaSituacao().equals("")){
			CobrancaSituacao cobrancaSituacao = new CobrancaSituacao();
			cobrancaSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaSituacao()));
			cobrancaAcao.setCobrancaSituacao(cobrancaSituacao);
		}else{
			cobrancaAcao.setCobrancaSituacao(null);
		}

		// verifica a existencia da situação da ligação de agua
		if(cobrancaAcaoHelper.getIdLigacaoAguaSituacao() != null && !cobrancaAcaoHelper.getIdLigacaoAguaSituacao().equals("")){
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdLigacaoAguaSituacao()));
			cobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}else{
			cobrancaAcao.setLigacaoAguaSituacao(null);
		}

		// verifica a existencia da situação da ligação de esgoto
		if(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao() != null && !cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao().equals("")){
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(Integer.valueOf(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao()));
			cobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}else{
			cobrancaAcao.setLigacaoEsgotoSituacao(null);
		}

		// pesquisa enter de critério de cobrança
		if(cobrancaAcaoHelper.getIdCobrancaCriterio() != null && !cobrancaAcaoHelper.getIdCobrancaCriterio().equals("")){

			if(cobrancaAcaoHelper.getDescricaoCobrancaCriterio() == null || cobrancaAcaoHelper.getDescricaoCobrancaCriterio().equals("")){

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID, Integer
								.valueOf(cobrancaAcaoHelper.getIdCobrancaCriterio())));
				filtroCobrancaCriterio.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil().pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if(colecaoCobrancaCriterio != null && !colecaoCobrancaCriterio.isEmpty()){
					CobrancaCriterio cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(colecaoCobrancaCriterio);
					cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
				}else{
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Critério de Cobrança");
				}
			}else{
				CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(Integer.valueOf(cobrancaAcaoHelper.getIdCobrancaCriterio()));
				cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
			}

		}else{
			throw new ControladorException("atencao.required", null, "Critério de Cobrança");
		}

		// pesquisa enter de critério de cobrança
		if(cobrancaAcaoHelper.getIdServicoTipo() != null && !cobrancaAcaoHelper.getIdServicoTipo().equals("")){
			if(cobrancaAcaoHelper.getDescricaoServicoTipo() == null || cobrancaAcaoHelper.getDescricaoServicoTipo().equals("")){

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(FiltroServicoTipo.ID, Integer.valueOf(cobrancaAcaoHelper
								.getIdServicoTipo())));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(filtroServicoTipo, ServicoTipo.class.getName());

				if(colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()){
					ServicoTipo servicoTipo = (ServicoTipo) Util.retonarObjetoDeColecao(colecaoServicoTipo);
					cobrancaAcao.setServicoTipo(servicoTipo);
				}else{
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Tipo de serviço");
				}
			}else{
				ServicoTipo servicoTipo = new ServicoTipo();
				servicoTipo.setId(Integer.valueOf(cobrancaAcaoHelper.getIdServicoTipo()));
				cobrancaAcao.setServicoTipo(servicoTipo);
			}

		}else{
			cobrancaAcao.setServicoTipo(null);
		}

		// resoluções da diretoria obrigatórios,
		// caso Tipo de Documento referente a 37 "Carta com opções de
		// Parcelamento".
		if(cobrancaAcao.getDocumentoTipo().getId().intValue() == DocumentoTipo.CARTA_OPCAO_PARCELAMENTO.intValue()){

			if(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 1ª R.D. ");
			}else{
				ResolucaoDiretoria primeiraResolucaoDiretoria = new ResolucaoDiretoria();
				primeiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								primeiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				primeiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setPrimeiraResolucaoDiretoria(primeiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getPrimeiraResolucaoDiretoria().getId()));

				Collection<ParcelamentoPerfil> colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 1);

			}

			if(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 2ª R.D. ");
			}else{
				ResolucaoDiretoria segundaResolucaoDiretoria = new ResolucaoDiretoria();
				segundaResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO, segundaResolucaoDiretoria
								.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				segundaResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setSegundaResolucaoDiretoria(segundaResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getSegundaResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 2ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 2);

			}

			if(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 3ª R.D. ");
			}else{
				ResolucaoDiretoria terceiraResolucaoDiretoria = new ResolucaoDiretoria();
				terceiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								terceiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				terceiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setTerceiraResolucaoDiretoria(terceiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getTerceiraResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 3);

			}

			// Caso tenha informado alguma R.D. igual a outra
			if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getSegundaResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria()
							.getId().intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getSegundaResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}

			// Obrigatórios, caso Tipo de Documento referente a 37 - "Carta com opções de
			// Parcelamento"
			// verifica a existencia do indicador de credito a realizar
			if(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar().equals("")){

				cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Crédito a Realizar");
			}

			// verifica a existencia do indicador de guia de pagamento
			if(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento().equals("")){

				cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Guia de Pagamento");
			}

		}else{

			// Caso Tipo de Documento seja diferente de 37 - "Carta com opções de Parcelamento",
			// assumir o valor 2 Não
			cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf("2"));
			cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf("2"));
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(cobrancaAcaoHelper.getIndicadorCronograma() != null && !cobrancaAcaoHelper.getIndicadorCronograma().equals("")){
			cobrancaAcao.setIndicadorCronograma(Short.valueOf(cobrancaAcaoHelper.getIndicadorCronograma()));
		}else{
			cobrancaAcao.setServicoTipo(null);
		}

		// resoluções da diretoria obrigatórios,
		// caso Tipo de Documento referente a 37 "Carta com opções de
		// Parcelamento".
		if(cobrancaAcao.getDocumentoTipo().getId().intValue() == DocumentoTipo.CARTA_OPCAO_PARCELAMENTO.intValue()){

			if(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 1ª R.D. ");
			}else{
				ResolucaoDiretoria primeiraResolucaoDiretoria = new ResolucaoDiretoria();
				primeiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdPrimeiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								primeiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				primeiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setPrimeiraResolucaoDiretoria(primeiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getPrimeiraResolucaoDiretoria().getId()));

				Collection<ParcelamentoPerfil> colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 1);

			}

			if(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.required", null, "Número da 2ª R.D. ");
			}else{
				ResolucaoDiretoria segundaResolucaoDiretoria = new ResolucaoDiretoria();
				segundaResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdSegundaResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO, segundaResolucaoDiretoria
								.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				segundaResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setSegundaResolucaoDiretoria(segundaResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getSegundaResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 2ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 2);

			}

			if(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria() == null
							|| cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria().equals("")){
				throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 3ª R.D. ");
			}else{
				ResolucaoDiretoria terceiraResolucaoDiretoria = new ResolucaoDiretoria();
				terceiraResolucaoDiretoria.setId(new Integer(cobrancaAcaoHelper.getIdTerceiraResolucaoDiretoria()));

				FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
				filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.CODIGO,
								terceiraResolucaoDiretoria.getId()));

				Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = this.getControladorUtil().pesquisar(filtroResolucaoDiretoria,
								ResolucaoDiretoria.class.getName());

				terceiraResolucaoDiretoria = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);

				cobrancaAcao.setTerceiraResolucaoDiretoria(terceiraResolucaoDiretoria);

				// [FS0010] - Verificar existência do perfil do parcelamento
				FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
				filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
								cobrancaAcao.getTerceiraResolucaoDiretoria().getId()));

				Collection colecaoPerfilParcelamento = this.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
								ParcelamentoPerfil.class.getName());

				if(colecaoPerfilParcelamento == null || colecaoPerfilParcelamento.isEmpty()){
					throw new ControladorException("atencao.nao_existe_perfil_parcelamento_resolucao", null, "Número da 1ª R.D");
				}

				// [FS0011] - Verificar existência do perfil do imóvel dos
				// critérios de cobrança
				// nas Resoluções da Diretoria
				this.verificarPerfilImovelCriterioResolucao(cobrancaAcao, colecaoPerfilParcelamento, 3);

			}

			// Caso tenha informado alguma R.D. igual a outra
			if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getSegundaResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getPrimeiraResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria()
							.getId().intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}else if(cobrancaAcao.getSegundaResolucaoDiretoria().getId().intValue() == cobrancaAcao.getTerceiraResolucaoDiretoria().getId()
							.intValue()){

				throw new ControladorException("atencao.resolucao_informada_igual");
			}

			// Obrigatórios, caso Tipo de Documento referente a 37 - "Carta com opções de
			// Parcelamento"
			// verifica a existencia do indicador de credito a realizar
			if(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar().equals("")){

				cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraCreditoRealizar()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Crédito a Realizar");
			}

			// verifica a existencia do indicador de guia de pagamento
			if(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento() != null
							&& !cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento().equals("")){

				cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf(cobrancaAcaoHelper.getIndicadorConsideraGuiaPagamento()));
			}else{

				// levanta a exceção para a próxima camada
				throw new ControladorException("atencao.required", null, "Considera Guia de Pagamento");
			}

		}else{

			// Caso Tipo de Documento seja diferente de 37 - "Carta com opções de Parcelamento",
			// assumir o valor 2 Não
			cobrancaAcao.setIndicadorConsideraCreditoRealizar(Short.valueOf("2"));
			cobrancaAcao.setIndicadorConsideraGuiaPagamento(Short.valueOf("2"));
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(cobrancaAcaoHelper.getIndicadorCronograma() != null && !cobrancaAcaoHelper.getIndicadorCronograma().equals("")){
			cobrancaAcao.setIndicadorCronograma(Short.valueOf(cobrancaAcaoHelper.getIndicadorCronograma()));
		}else{
			throw new ControladorException("atencao.required", null, "Compõe Cronograma");
		}

		// verifica a existencia do indicador de ação Obrigatória
		if(cobrancaAcaoHelper.getIndicadorObrigatoriedade() != null && !cobrancaAcaoHelper.getIndicadorObrigatoriedade().equals("")){
			if(Short.valueOf(cobrancaAcaoHelper.getIndicadorObrigatoriedade()).equals(CobrancaAcao.INDICADOR_SIM)
							&& Short.valueOf(cobrancaAcaoHelper.getIndicadorCronograma()).equals(CobrancaAcao.INDICADOR_NAO)){
				throw new ControladorException("atencao.acao_cobranca_compor_cronograma");
			}
			cobrancaAcao.setIndicadorObrigatoriedade(Short.valueOf(cobrancaAcaoHelper.getIndicadorObrigatoriedade()));
		}else{
			throw new ControladorException("atencao.required", null, "Ação Obrigatória");
		}

		// verifica a existencia do indicador de repetição
		if(cobrancaAcaoHelper.getIndicadorRepeticao() != null && !cobrancaAcaoHelper.getIndicadorRepeticao().equals("")){
			cobrancaAcao.setIndicadorRepeticao(Short.valueOf(cobrancaAcaoHelper.getIndicadorRepeticao()));
		}else{
			throw new ControladorException("atencao.required", null, "Pode ser Repetida no Ciclo");
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if(cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento() != null
						&& !cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento().equals("")){
			cobrancaAcao.setIndicadorSuspensaoAbastecimento(Short.valueOf(cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento()));
		}else{
			throw new ControladorException("atencao.required", null, "Provoca Suspensão no Abastecimento");
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if(cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar() != null && !cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar().equals("")){
			cobrancaAcao.setIndicadorCobrancaDebACobrar(Short.valueOf(cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar()));
		}else{
			throw new ControladorException("atencao.required", null, "Considera Débitos a Cobrar");
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if(cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade() != null
						&& !cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade().equals("")){
			cobrancaAcao.setIndicadorAcrescimoImpontualidade(Short.valueOf(cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade()));
		}else{
			throw new ControladorException("atencao.required", null, "Considera Acréscimos por Impontualidade");
		}

		// verifica a existencia do indicador de geração de taxa
		if(cobrancaAcaoHelper.getIndicadorGeracaoTaxa() != null && !cobrancaAcaoHelper.getIndicadorGeracaoTaxa().equals("")){
			cobrancaAcao.setIndicadorGeracaoTaxa(Short.valueOf(cobrancaAcaoHelper.getIndicadorGeracaoTaxa()));
		}else{
			throw new ControladorException("atencao.required", null, "Gera Taxa");
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if(cobrancaAcaoHelper.getIndicadorBoletim() != null && !cobrancaAcaoHelper.getIndicadorBoletim().equals("")){
			cobrancaAcao.setIndicadorBoletim(Short.valueOf(cobrancaAcaoHelper.getIndicadorBoletim()));
		}else{
			throw new ControladorException("atencao.required", null, "Pode Emitir Boletins de Cadastro");
		}

		// verifica a existencia do indicador de compõe o cronograma
		if(cobrancaAcaoHelper.getIndicadorDebito() != null && !cobrancaAcaoHelper.getIndicadorDebito().equals("")){
			cobrancaAcao.setIndicadorDebito(Short.valueOf(cobrancaAcaoHelper.getIndicadorDebito()));
		}else{
			throw new ControladorException("atencao.required", null, "Pode ser Executada para Imóveis sem Débito");
		}

		// verifica a existencia dnumero de dias de vencimento
		if(cobrancaAcaoHelper.getNumeroDiasVencimento() != null && !cobrancaAcaoHelper.getNumeroDiasVencimento().equals("")){
			cobrancaAcao.setNumeroDiasVencimento(Integer.valueOf(cobrancaAcaoHelper.getNumeroDiasVencimento()));
		}

		// verifica a existencia dnumero de dias de vencimento
		if(cobrancaAcaoHelper.getIndicadorUso() != null && !cobrancaAcaoHelper.getIndicadorUso().equals("")){
			cobrancaAcao.setIndicadorUso(Short.valueOf(cobrancaAcaoHelper.getIndicadorUso()));
		}
		cobrancaAcao.setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);

		AcaoCobrancaEfeito acaoCobrancaEfeito = null;
		if(cobrancaAcaoHelper.getAcaoCobrancaEfeito() != null && !cobrancaAcaoHelper.getAcaoCobrancaEfeito().equals("")){
			try{
				acaoCobrancaEfeito = repositorioCobranca.pesquisarAcaoCobrancaEfeitoPorId(cobrancaAcaoHelper.getAcaoCobrancaEfeito());
			}catch(ErroRepositorioException e){
				throw new ControladorException("", e);
			}
		}else{
			throw new ControladorException("atencao.required", null, "Contra-Ação");
		}

		cobrancaAcao.setAcaoCobrancaEfeito(acaoCobrancaEfeito);

		if(cobrancaAcaoHelper.getNegativador() != null && !cobrancaAcaoHelper.getNegativador().equals("")
						&& !cobrancaAcaoHelper.getNegativador().equals("-1")){
			Negativador negativador = new Negativador();
			negativador.setId(Util.obterInteger(cobrancaAcaoHelper.getNegativador()));
			cobrancaAcao.setNegativador(negativador);
		}

		cobrancaAcao.setIndicadorCPFCNPJ(Util.obterShort(cobrancaAcaoHelper.getIndicadorCPFCNPJ()));
		cobrancaAcao.setIndicadorCEP(Util.obterShort(cobrancaAcaoHelper.getIndicadorCEP()));

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorSistemaAbastecimento = new RegistradorOperacao(Operacao.OPERACAO_COBRANCA_ACAO_ATUALIZAR,
						cobrancaAcao.getId(), cobrancaAcao.getId(), new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(),
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacaoSistemaAbastecimento = new Operacao();
		operacaoSistemaAbastecimento.setId(Operacao.OPERACAO_COBRANCA_ACAO_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuadaUnidade = new OperacaoEfetuada();
		operacaoEfetuadaUnidade.setOperacao(operacaoSistemaAbastecimento);

		cobrancaAcao.setOperacaoEfetuada(operacaoEfetuadaUnidade);
		cobrancaAcao.adicionarUsuario(cobrancaAcaoHelper.getUsuarioLogado(), UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorSistemaAbastecimento.registrarOperacao(cobrancaAcao);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		CobrancaAcao cobrancaAcaoNaBase = null;
		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, cobrancaAcao.getId()));

		Collection collectionCobrancaAcao = getControladorUtil().pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

		// Caso a pesquisa tenha retornado o critério de cobrança
		if(collectionCobrancaAcao != null && !collectionCobrancaAcao.isEmpty()){

			// Recupera da coleção a rota que vai ser atualizada
			cobrancaAcaoNaBase = (CobrancaAcao) Util.retonarObjetoDeColecao(collectionCobrancaAcao);
		}

		// Verificar se o logradouro já foi atualizado por outro usuário durante esta atualização
		if(cobrancaAcaoNaBase == null || cobrancaAcaoNaBase.getUltimaAlteracao().after(cobrancaAcao.getUltimaAlteracao())){

			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");

		}

		cobrancaAcao.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(cobrancaAcao);
	}

	/**
	 * [UC0067] Inserir Comando Negaivação
	 * 
	 * @autor: Ana Maria
	 *         [FS0019] Verificar existência de Parcelamento
	 * @param idImovel
	 * @return Cliente
	 * @throws ControladorException
	 */
	public Cliente pesquisarClienteResponsavelParcelamento(Integer idImovel) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarClienteResponsavelParcelamento(idImovel);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método responsável por inserir um Contrato de Cobrança
	 * 
	 * @author Virgínia Melo
	 * @date 24/11/2008
	 * @param cobrancaContrato
	 * @param colecaoCobrancaContratoRemuneracao
	 * @param colecaoCobrancaContratoRemuneracaoVencimento
	 * @param usuarioLogado
	 * @throws ControladorException
	 *             Alteracao para contemplar remuneraçao por Produtividade
	 * @author Andre Nishimura, William Mathias.
	 * @date 15/04/2010
	 */
	// entidade CobrancaContratoRemuneracao dropada
	public void inserirCobrancaContrato(CobrancaContrato cobrancaContrato,
					Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaContratoRemuneracaoPorSucesso,
					Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaContratoRemuneracaoPorProdutividade,
					Usuario usuarioLogado) throws ControladorException{

		if(cobrancaContrato.getDataInicial() != null && cobrancaContrato.getDataFinal() != null){
			Date dataInicial = cobrancaContrato.getDataInicial();
			Date dataFinal = cobrancaContrato.getDataFinal();

			if(dataFinal.getTime() < dataInicial.getTime() || dataFinal.getTime() == dataInicial.getTime()){
				throw new ControladorException("atencao.data.intervalo.invalido");
			}
		}

		// Verificando se contrato com mesma chave já existe
		FiltroCobrancaContrato filtroContrato = new FiltroCobrancaContrato();
		filtroContrato.adicionarParametro(new ParametroSimples(FiltroCobrancaContrato.NUMERO_CONTRATO, cobrancaContrato.getNumeroContrato()));
		filtroContrato.adicionarParametro(new ParametroSimples(FiltroCobrancaContrato.EMPRESA, cobrancaContrato.getEmpresa().getId()));

		Collection contratos = getControladorUtil().pesquisar(filtroContrato, CobrancaContrato.class.getName());

		if(contratos != null && !contratos.isEmpty()){
			throw new ControladorException("atencao.codigo_contrato_empresa_ja_existe");
		}

		// Verificando se existe um contrato ativo p/ essa empresa (só pode ter 1 ativo, ou seja
		// data encerramento null)
		FiltroCobrancaContrato filtroContratoAtivo = new FiltroCobrancaContrato();
		filtroContratoAtivo.adicionarParametro(new ParametroSimples(FiltroCobrancaContrato.EMPRESA, cobrancaContrato.getEmpresa().getId()));
		filtroContratoAtivo.adicionarParametro(new ParametroNulo(FiltroCobrancaContrato.DATA_ENCERRAMENTO));

		Collection contratosAtivos = getControladorUtil().pesquisar(filtroContratoAtivo, CobrancaContrato.class.getName());

		// Se tem algum com a data de encerramento nula, não pode inserir outro.
		if(contratosAtivos != null && !contratosAtivos.isEmpty()){
			throw new ControladorException("atencao.empresa_possui_contrato_ativo");
		}

		try{

			this.getControladorUtil().inserir(cobrancaContrato);

			this.inserirContratoRemuneracao(cobrancaContrato, colecaoCobrancaContratoRemuneracaoPorSucesso,
							colecaoCobrancaContratoRemuneracaoPorProdutividade);

		}catch(Exception ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	private void inserirContratoRemuneracao(CobrancaContrato cobrancaContrato,
					Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaContratoRemuneracaoPorSucesso,
					Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaContratoRemuneracaoPorProdutividade)
					throws ControladorException{

		if(cobrancaContrato.getContratoTipoRemuneracao().getId() == ContratoTipoRemuneracao.TIPO_SUCESSO){
			if(colecaoCobrancaContratoRemuneracaoPorSucesso != null && !colecaoCobrancaContratoRemuneracaoPorSucesso.isEmpty()){
				for(CobrancaContratoRemuneracaoPorSucesso cobrancaContratoRemuneracaoPorSucesso : colecaoCobrancaContratoRemuneracaoPorSucesso){
					cobrancaContratoRemuneracaoPorSucesso.setCobrancaContrato(cobrancaContrato);
					cobrancaContratoRemuneracaoPorSucesso.setUltimaAlteracao(new Date());
					this.getControladorUtil().inserir(cobrancaContratoRemuneracaoPorSucesso);
				}
			}
		}

		if(cobrancaContrato.getContratoTipoRemuneracao().getId() == ContratoTipoRemuneracao.TIPO_PRODUTIVIDADE){
			if(colecaoCobrancaContratoRemuneracaoPorProdutividade != null && !colecaoCobrancaContratoRemuneracaoPorProdutividade.isEmpty()){
				for(CobrancaContratoRemuneracaoPorProdutividade cobrancaContratoRemuneracaoPorProdutividade : colecaoCobrancaContratoRemuneracaoPorProdutividade){
					cobrancaContratoRemuneracaoPorProdutividade.setCobrancaContrato(cobrancaContrato);
					cobrancaContratoRemuneracaoPorProdutividade.setUltimaAlteracao(new Date());
					this.getControladorUtil().inserir(cobrancaContratoRemuneracaoPorProdutividade);
				}
			}
		}
	}

	/**
	 * Método responsável por atualizar um Contrato de Cobrança
	 * 
	 * @author Virgínia Melo
	 * @date 01/12/2008
	 * @param cobrancaContrato
	 * @param colecaoCobrancaContratoRemuneracao
	 * @param colecaoCobrancaContratoRemuneracaoVencimento
	 * @param usuarioLogado
	 * @throws ControladorException
	 *             Alteraçao para contemplar remuneraçao por Tipo Serviço (Produtividade)
	 * @author Andre Nishimura, William Mathias
	 * @date 15/04/2010
	 */
	// entidade CobrancaContratoRemuneracao dropada
	public void atualizarCobrancaContrato(CobrancaContrato cobrancaContrato,
					Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaContratoRemuneracaoPorSucesso,
					Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaContratoRemuneracaoPorProdutividade,
					Usuario usuarioLogado) throws ControladorException{

		// Integer cobrancaContratoId = null;
		// Integer cobrancaContratoRemuneracaoId = null;

		if(cobrancaContrato.getDataInicial() != null && cobrancaContrato.getDataFinal() != null){
			Date dataInicial = cobrancaContrato.getDataInicial();
			Date dataFinal = cobrancaContrato.getDataFinal();

			if(dataFinal.getTime() < dataInicial.getTime() || dataFinal.getTime() == dataInicial.getTime()){
				throw new ControladorException("atencao.data.intervalo.invalido");
			}
		}

		try{

			getControladorUtil().atualizar(cobrancaContrato);

			// Remover as Remunerações (caso existam).
			removerRemuneracoes(cobrancaContrato);

			// Depois que apagou, agora inserir com valores novos.
			this.inserirContratoRemuneracao(cobrancaContrato, colecaoCobrancaContratoRemuneracaoPorSucesso,
							colecaoCobrancaContratoRemuneracaoPorProdutividade);

		}catch(Exception ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Remover Contrato Cobranca
	 * 
	 * @author Virgínia Melo
	 * @date 04/12/2008
	 */
	public void removerContratoCobranca(Integer[] idsContratoCobranca, Usuario usuarioLogado) throws ControladorException{

		try{

			FiltroCobrancaContrato filtroCobrancaContrato = new FiltroCobrancaContrato();
			for(Integer idContrato : idsContratoCobranca){

				filtroCobrancaContrato.adicionarParametro(new ParametroSimples(FiltroCobrancaContrato.ID, idContrato));

				Collection<CobrancaContrato> colecaoCobrancaContrato = getControladorUtil().pesquisar(filtroCobrancaContrato,
								CobrancaContrato.class.getName());

				filtroCobrancaContrato.limparListaParametros();

				// Remove as remunerações (caso existam).
				removerRemuneracoes((CobrancaContrato) colecaoCobrancaContrato.iterator().next());
			}

			// Depois que apagou as dependências(Remuneracoes e Vencimentos), remover os contratos
			// de cobrança
			repositorioCobranca.removerContratoCobranca(idsContratoCobranca);

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método que remove 'Cobranca COntrato Remunerações' e suas dependências.
	 * 
	 * @author Virgínia Melo
	 * @date 04/12/2008
	 * @param remuneracoes
	 * @throws ControladorException
	 *             Alteracao para remover as dependencias quando a remuneraçao for PRODUTIVIDADE
	 * @author Andre Nishimura, William Mathias
	 * @date 15/04/2010
	 */
	private void removerRemuneracoes(CobrancaContrato cobrancaContrato) throws ControladorException{

		if(cobrancaContrato != null){
			Collection<CobrancaContratoRemuneracaoPorSucesso> colecaoCobrancaSucesso = null;
			Collection<CobrancaContratoRemuneracaoPorProdutividade> colecaoCobrancaProdutividade = null;

			// Consultar COBRANCA_CONTRATO_REMUN_SUCESS e apagar caso existam
			FiltroCobrancaSucesso filtroCobrancaSucesso = new FiltroCobrancaSucesso();

			filtroCobrancaSucesso
							.adicionarParametro(new ParametroSimples(FiltroCobrancaSucesso.COBRANCA_CONTRATO, cobrancaContrato.getId()));

			colecaoCobrancaSucesso = getControladorUtil().pesquisar(filtroCobrancaSucesso,
							CobrancaContratoRemuneracaoPorSucesso.class.getName());

			if(!colecaoCobrancaSucesso.isEmpty()){
				for(CobrancaContratoRemuneracaoPorSucesso cobrancaContratoSucesso : colecaoCobrancaSucesso){
					this.getControladorUtil().remover(cobrancaContratoSucesso);
				}
			}

			// Consultar COBRANCA_CONTRATO_REMUN_PRODUT e apagar caso existam
			FiltroCobrancaProdutividade filtroCobrancaProdutividade = new FiltroCobrancaProdutividade();

			filtroCobrancaProdutividade.adicionarParametro(new ParametroSimples(FiltroCobrancaProdutividade.COBRANCA_CONTRATO,
							cobrancaContrato.getId()));

			colecaoCobrancaProdutividade = getControladorUtil().pesquisar(filtroCobrancaProdutividade,
							CobrancaContratoRemuneracaoPorProdutividade.class.getName());

			if(!colecaoCobrancaProdutividade.isEmpty()){
				for(CobrancaContratoRemuneracaoPorProdutividade cobrancaContratoProdutividade : colecaoCobrancaProdutividade){
					this.getControladorUtil().remover(cobrancaContratoProdutividade);
				}
			}
		}

	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @date 18/03/2011
	 * @param cobrancaDocumento
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<CobrancaDocumentoItem> obterCobrancaDocumentoItemPrePacelamento(CobrancaDocumento cobrancaDocumento)
					throws ControladorException{

		Collection<CobrancaDocumentoItem> colecao = new ArrayList<CobrancaDocumentoItem>();

		try{
			colecao = this.repositorioCobranca.obterCobrancaDocumentoItemPrePacelamento(cobrancaDocumento);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return colecao;
	}

	/**
	 * Pesquisa o Documento de Cobrança pelo ID
	 * 
	 * @author Saulo Lima
	 * @date 20/05/2009
	 * @param idCobrancaDocumento
	 * @return CobrancaDocumento
	 * @throws ControladorException
	 */
	public CobrancaDocumento pesquisarCobrancaDocumento(Integer idCobrancaDocumento) throws ControladorException{

		CobrancaDocumento cobrancaDocumento = null;

		if(idCobrancaDocumento != null){
			try{
				cobrancaDocumento = this.repositorioCobranca.pesquisarCobrancaDocumento(idCobrancaDocumento);
			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
		}
		return cobrancaDocumento;
	}

	/**
	 * Método que realiza validações nas colecoes de entidades de débitos recebidas pela view, para
	 * garantir que sejam do imóvel
	 * e que alguma entidade escolhida em tela não seja considerada, caso em histórico. Além disso,
	 * compara se o valor de contas,
	 * debitos, creditos estão coerentes com a soma das entidades passadas.
	 * 
	 * @author Eduardo Henrique
	 * @date 18/07/2009
	 * @author Saulo Lima
	 * @date 28/07/2009
	 *       Validação nos valores das Guias.
	 * @param Parcelamento
	 *            [obrigatorio, com imovel e valores populados]
	 * @param Collection
	 *            <ContaValoresHelper>
	 * @param Collection
	 *            <GuiaPagamentoValoresHelper>
	 * @param Collection
	 *            <DebitoACobrar>
	 * @param Collection
	 *            <CreditoARealizar>
	 * @throws ControladorException
	 */
	private void validarEntidadesDebitoParcelamentoImovel(Parcelamento parcelamento, Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, Collection<DebitoACobrar> colecaoDebitoACobrar,
					Collection<CreditoARealizar> colecaoCreditoARealizar) throws ControladorException{

		if(parcelamento == null || parcelamento.getImovel() == null || parcelamento.getImovel().getId() == null){
			throw new IllegalStateException("erro.imovel_instancia_nula");
		}
		BigDecimal valorContas = BigDecimal.ZERO;
		if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
			for(ContaValoresHelper contaValoresHelper : colecaoContaValores){
				if(contaValoresHelper.getConta() != null){
					Conta contaParcelamento = getControladorFaturamento().consultarConta(contaValoresHelper.getConta().getId());
					if(contaParcelamento == null){
						throw new ControladorException("atencao.conta_nao_encontrada_em_debito", null, contaValoresHelper.getConta()
										.getId().toString());
					}

					if(!contaParcelamento.getImovel().getId().equals(parcelamento.getImovel().getId())){
						throw new ControladorException("atencao.colecao_conta_sessao_imovel_diferente");
					}

					// Caso não seja marcarda como NB , considera. Ou Ainda, se estiver com um valor
					// diferente destes
					if(contaValoresHelper.getIndicadorContasDebito() != null){

						if(!contaValoresHelper.getIndicadorContasDebito().equals(Integer.valueOf(2))){
							// Atualiza Contas na Base de Dados
							valorContas = valorContas.add(contaParcelamento.getValorTotalContaSemImposto());
						}
					}else{
						valorContas = valorContas.add(contaParcelamento.getValorTotalContaSemImposto());
					}

				}
			}
		}

		Short permiteParcelamentoSemConta = Util.converterStringParaShort((String) ParametroCobranca.P_PERMITE_PARCEL_SEM_CONTA.executar());

		if(permiteParcelamentoSemConta != null){
			// Não permite Efetuar Parcelamento sem uma Conta - Regra de ADA.
			if(permiteParcelamentoSemConta.equals(ConstantesSistema.NAO)){
				if(parcelamento.getValorConta() != null && valorContas.compareTo(parcelamento.getValorConta()) != 0){
					throw new ControladorException("atencao.valores_calculados_contas_divergente");
				}
			}else{
				if(parcelamento.getValorConta() != null && !parcelamento.getValorConta().equals(BigDecimal.ZERO)
								&& !parcelamento.getValorConta().equals(new BigDecimal("0.00"))
								&& valorContas.compareTo(parcelamento.getValorConta()) != 0){
					throw new ControladorException("atencao.valores_calculados_contas_divergente");
				}
			}
		}else{
			if(parcelamento.getValorConta() != null && valorContas.compareTo(parcelamento.getValorConta()) != 0){
				throw new ControladorException("atencao.valores_calculados_contas_divergente");
			}
		}

		BigDecimal valorGuias = BigDecimal.ZERO;
		if(colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()){
			FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
			for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiaPagamentoValores){
				if(guiaPagamentoValoresHelper.getIdGuiaPagamento() != null){

					filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
									guiaPagamentoValoresHelper.getIdGuiaPagamento()));
					filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO,
									guiaPagamentoValoresHelper.getNumeroPrestacao()));
					filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO);

					Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = getControladorUtil().pesquisar(
									filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

					filtroGuiaPagamentoPrestacao.limparListaParametros();

					if(colecaoGuiaPagamentoPrestacao == null || colecaoGuiaPagamentoPrestacao.isEmpty()){
						throw new ControladorException("atencao.guia_nao_encontrada_em_debito", null, guiaPagamentoValoresHelper
										.getIdGuiaPagamento().toString(), guiaPagamentoValoresHelper.getNumeroPrestacao().toString());
					}

					for(GuiaPagamentoPrestacao guiaPagamentoPrestacao : colecaoGuiaPagamentoPrestacao){
						if(!guiaPagamentoPrestacao.getGuiaPagamento().getImovel().getId().equals(parcelamento.getImovel().getId())){
							throw new ControladorException("atencao.colecao_guia_sessao_imovel_diferente");
						}
						valorGuias = valorGuias.add(guiaPagamentoPrestacao.getValorPrestacao());
					}
				}
			}

			if(parcelamento.getValorGuiaPapagamento() != null && valorGuias.compareTo(parcelamento.getValorGuiaPapagamento()) != 0){
				throw new ControladorException("atencao.valores_calculados_guias_divergente");
			}
		}

		BigDecimal valorDebitos = BigDecimal.ZERO;
		if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){

				filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.DEBITO_TIPO);
				filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, debitoACobrar.getId()));

				Collection colecaoDebitoACobrarBanco = getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

				filtroDebitoACobrar.limparListaParametros();

				if(colecaoDebitoACobrarBanco == null || colecaoDebitoACobrarBanco.isEmpty()){
					throw new ControladorException("atencao.debito_a_cobrar_nao_encontrada_em_debito", null, debitoACobrar.getId()
									.toString());
				}

				DebitoACobrar debitoACobrarBanco = (DebitoACobrar) colecaoDebitoACobrarBanco.iterator().next();
				if(!debitoACobrarBanco.getImovel().getId().equals(parcelamento.getImovel().getId())){
					throw new ControladorException("atencao.colecao_debito_a_cobrar_sessao_imovel_diferente");
				}
				if(debitoACobrar.getDebitoTipo().getId() != null
								&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
					valorDebitos = valorDebitos.add(debitoACobrarBanco.getValorDebito());
				}
			}
		}
		// TODO implementação de valor deve ser mais testada
		/*
		 * BigDecimal totalDebitosACobrarParcelamento = BigDecimal.ZERO; if
		 * (parcelamento.getValorServicosACobrar() != null){
		 * totalDebitosACobrarParcelamento =
		 * totalDebitosACobrarParcelamento.add(parcelamento.getValorServicosACobrar()); } if
		 * (parcelamento.getValorParcelamentosACobrar() != null){ totalDebitosACobrarParcelamento =
		 * totalDebitosACobrarParcelamento.add(parcelamento.getValorParcelamentosACobrar()); } if
		 * (valorDebitos.compareTo(totalDebitosACobrarParcelamento) != 0){ throw new
		 * ControladorException("atencao.valores_calculados_debitos_a_cobrar_divergente"); }
		 */

		BigDecimal valorCreditos = BigDecimal.ZERO;
		if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
			FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();
			for(CreditoARealizar creditoARealizar : colecaoCreditoARealizar){

				filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.ID, creditoARealizar.getId()));

				Collection creditoARealizarPesquisada = getControladorUtil().pesquisar(filtroCreditoARealizar,
								CreditoARealizar.class.getName());

				filtroCreditoARealizar.limparListaParametros();

				if(creditoARealizarPesquisada == null || creditoARealizarPesquisada.isEmpty()){
					throw new ControladorException("atencao.credito_a_realizar_nao_encontrada_em_debito", null, creditoARealizar.getId()
									.toString());
				}

				CreditoARealizar creditoARealizarBanco = (CreditoARealizar) creditoARealizarPesquisada.iterator().next();
				if(!creditoARealizarBanco.getImovel().getId().equals(parcelamento.getImovel().getId())){
					throw new ControladorException("atencao.colecao_credito_a_realizar_sessao_imovel_diferente");
				}
				valorCreditos.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorCreditos = valorCreditos.add(creditoARealizarBanco.getValorTotal());
			}
		}

		if(parcelamento.getValorCreditoARealizar() != null && valorCreditos.compareTo(parcelamento.getValorCreditoARealizar()) != 0){
			throw new ControladorException("atencao.valores_calculados_creditos_a_realizar_divergente");
		}
	}

	/**
	 * Método responsável por retornar a soma dos valores de um determinado 'tipoConsulta' da
	 * 'colecaoGuiaPagamentoValores'
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Saulo Lima
	 * @date 08/07/2009
	 * @param colecaoGuiaPagamentoValores
	 * @param tipoConsulta
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal calcularValoresGuia(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, int tipoConsulta)
					throws ControladorException{

		BigDecimal retorno = BigDecimal.ZERO;

		Iterator<GuiaPagamentoValoresHelper> iteratorGuiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();
		while(iteratorGuiaPagamentoValores.hasNext()){
			GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = iteratorGuiaPagamentoValores.next();

			switch(tipoConsulta){
				case ConstantesSistema.PARCELAMENTO_VALOR_GUIA_TOTAL:
					retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					retorno = retorno.add(guiaPagamentoValoresHelper.getValorTotalPrestacao());
					break;

				case ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ATUALIZACAO_MONETARIA:
					if(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
									&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")){
						retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						retorno = retorno.add(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}
					break;

				case ConstantesSistema.PARCELAMENTO_VALOR_GUIA_JUROS_MORA:
					if(guiaPagamentoValoresHelper.getValorJurosMora() != null && !guiaPagamentoValoresHelper.getValorJurosMora().equals("")){
						retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						retorno = retorno.add(guiaPagamentoValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}
					break;

				case ConstantesSistema.PARCELAMENTO_VALOR_GUIA_MULTA:
					if(guiaPagamentoValoresHelper.getValorMulta() != null && !guiaPagamentoValoresHelper.getValorMulta().equals("")){
						retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						retorno = retorno.add(guiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}
					break;

				case ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ACRESCIMO_IMPONTUALIDADE:
					// Para cálculo do Acrescimo de Impontualidade
					retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					retorno = retorno.add(guiaPagamentoValoresHelper.getValorAcrescimosImpontualidade());
					break;

				default:
					break;
			}
		}
		return retorno;
	}

	/**
	 * Método responsável por retornar apenas as 'GuiaPagamentoValoresHelper' selecionas pelo
	 * usuário na tela utilizando o parâmetro
	 * 'chavesPrestacoes' (Ex.: 9988-1$9988-2$7766-1)
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Saulo Lima
	 * @date 08/07/2009
	 * @param chavesPrestacoes
	 * @param colecaoGuiaPagamentoValores
	 * @return Collection<GuiaPagamentoValoresHelper>
	 * @throws ControladorException
	 */
	public Collection<GuiaPagamentoValoresHelper> retornarGuiaPagamentoValoresSelecionadas(String chavesPrestacoes,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores) throws ControladorException{

		Collection<GuiaPagamentoValoresHelper> colecaoRetorno = new ArrayList<GuiaPagamentoValoresHelper>();

		if(chavesPrestacoes != null && !chavesPrestacoes.equals("")){

			Iterator<GuiaPagamentoValoresHelper> iteratorGuiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();
			while(iteratorGuiaPagamentoValores.hasNext()){
				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = iteratorGuiaPagamentoValores.next();
				String chave = guiaPagamentoValoresHelper.getIdGuiaPagamento() + "-" + guiaPagamentoValoresHelper.getNumeroPrestacao();

				if(chavesPrestacoes.contains(chave)){
					colecaoRetorno.add(guiaPagamentoValoresHelper);
				}
			}
		}
		return colecaoRetorno;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar referente
	 * ao parcelamento historico
	 * 
	 * @author lucas medeiros
	 * @date 21/08/2009
	 *       trouxe do repositorio para o controlador, e mudanças.
	 * @param DebitoACobrarHistorico
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void transferirDebitoACobrarHistoricoParaDebitoACobrar(DebitoACobrarHistorico debitoACobrarHistorico,
					boolean indicadorParcelamento) throws ControladorException{

		try{
			DebitoACobrarHistorico debitoACobrarHistoricoTMP = repositorioFaturamento
							.pesquisarDebitoACobrarHistorico(debitoACobrarHistorico);
			DebitoACobrarGeral debitoACobrarGeral = repositorioFaturamento.pesquisarDebitoACobrarGeral(debitoACobrarHistorico);

			debitoACobrarGeral.setIndicadorHistorico(ConstantesSistema.NAO);
			debitoACobrarGeral.setUltimaAlteracao(new Date());

			DebitoACobrar debitoACobrar = new DebitoACobrar();
			try{
				ConvertUtils.register(new BigDecimalConverter(null), java.math.BigDecimal.class);
				PropertyUtils.copyProperties(debitoACobrar, debitoACobrarHistoricoTMP);
			}catch(Exception e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
			debitoACobrar.setDebitoCreditoSituacaoAnterior(null);
			debitoACobrar.setUltimaAlteracao(new Date());
			debitoACobrar.setGeracaoDebito(debitoACobrarHistoricoTMP.getDebitoGeradoRealizar());
			debitoACobrar.setDebitoACobrarGeralOrigem(debitoACobrarHistoricoTMP.getOrigem());
			debitoACobrar.setNumeroLote(debitoACobrarHistoricoTMP.getLote());
			debitoACobrar.setNumeroPrestacaoCobradas(debitoACobrarHistoricoTMP.getPrestacaoCobradas());
			debitoACobrar.setNumeroPrestacaoDebito(debitoACobrarHistoricoTMP.getPrestacaoDebito());
			debitoACobrar.setNumeroSubLote(debitoACobrarHistoricoTMP.getSublote());
			debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);

			// Indicador de Parcelamento - indica se deve ser recuperado ou não o id do
			// parcelamento.
			// No caso do desfazer parcelamento esse id não deve ser restaurado na tabela de débito
			// a cobrar,
			// pois trata-se de um id que deixará de existir qndo o parcelamento for desfeito.
			if(indicadorParcelamento){
				debitoACobrar.setParcelamento(debitoACobrarHistoricoTMP.getParcelamento());
			}else{
				debitoACobrar.setParcelamento(null);
			}

			Collection<DebitoACobrarCategoria> debitoACobrarCategorias = new ArrayList<DebitoACobrarCategoria>();
			DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
			for(DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico : debitoACobrarHistoricoTMP
							.getDebitoACobrarCategoriasHistorico()){

				// Cria um objeto DebitoACobrarCategoria a partir do DebitoACobrarCategoriaHistorico
				debitoACobrarCategorias.add(this.criarDebitoACobrarCategoriaDoDebitoACobrarCategoriaHistorico(debitoACobrar,
								debitoACobrarCategoriaHistorico));
			}

			for(DebitoACobrarCategoriaHistorico debitoCategoriaHistoricoDeletar : debitoACobrarHistoricoTMP
							.getDebitoACobrarCategoriasHistorico()){
				getControladorUtil().remover(debitoCategoriaHistoricoDeletar);
			}

			this.getControladorUtil().remover(debitoACobrarHistoricoTMP);
			this.getControladorUtil().inserir(debitoACobrar);
			this.getControladorUtil().inserirColecaoObjetos(debitoACobrarCategorias);

			this.getControladorUtil().atualizar(debitoACobrarGeral);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Cria um objeto DebitoACobrarCategoria a partir do DebitoACobrarCategoriaHistorico
	 * 
	 * @author Saulo Lima
	 * @date 24/08/2009
	 * @param debitoACobrar
	 * @param debitoACobrarCategoriaHistorico
	 * @return DebitoACobrarCategoria
	 * @throws ControladorException
	 */
	public DebitoACobrarCategoria criarDebitoACobrarCategoriaDoDebitoACobrarCategoriaHistorico(DebitoACobrar debitoACobrar,
					DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico) throws ControladorException{

		DebitoACobrarCategoria debitoACobrarCategoria = null;

		try{

			debitoACobrarCategoria = new DebitoACobrarCategoria();

			debitoACobrarCategoria.setComp_id(new DebitoACobrarCategoriaPK(debitoACobrar, debitoACobrarCategoriaHistorico.getCategoria()));
			debitoACobrarCategoria.setCategoria(debitoACobrarCategoriaHistorico.getCategoria());
			debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
			debitoACobrarCategoria.setUltimaAlteracao(new Date());
			debitoACobrarCategoria.setValorCategoria(debitoACobrarCategoriaHistorico.getValorCategoria());
			debitoACobrarCategoria.setQuantidadeEconomia(debitoACobrarCategoriaHistorico.getQuantidadeEconomia());

		}catch(Exception ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return debitoACobrarCategoria;
	}

	/**
	 * [UC0676] - Consultar Resumo da Negativacao
	 * 
	 * @author Marcio Roberto
	 * @date 28/02/2008
	 * @return NegativacaoHelper
	 * @throws ControladorException
	 */
	public Collection consultarResumoNegativacao(DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper, int tipo)
					throws ControladorException{

		Collection negativacaoHelper = null;
		try{
			// Pega a lista de Resumo das Negativacoes da base de dados.
			negativacaoHelper = repositorioCobranca.consultarNegativacao(dadosConsultaNegativacaoHelper, tipo);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return negativacaoHelper;
	}

	/**
	 * @author Arthur Carvalho
	 * @date 14/09/2009
	 * @param FiltroSupressoesReligacoesReestabelecimentoHelper
	 *            filtro
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarParcelamentosSituacaoNormal(Integer idImovel) throws ControladorException{

		Collection retorno = null;

		try{
			retorno = this.repositorioCobranca.pesquisarParcelamentosSituacaoNormal(idImovel);
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author Andre Nishimura
	 * @date 22/04/2010
	 *       Metodo responsavel por verificar o documento de cobrança esta sob açao de cobrança e
	 *       todos os seus itens estao pagos
	 *       disparando assim a contra-ação
	 */
	public void validaDocumentoCobrancaPagamentoParaContraAcao(Integer idConta) throws ControladorException{ // inserir

		// na
		// interface

		// long ini = 0L, dif = 0L;

		// ini = System.currentTimeMillis();

		// verificação se a conta pertence à um documentoCobranca
		Collection<AcaoCobrancaEfeitoHelper> colecaoAcaoCobrancaEfeito = this.verificaContaNaAcaoCobranca(idConta);

		// dif = System.currentTimeMillis() - ini;
		// LOGGER.info("4.3.7.15.1 - ############################## -> " + dif);
		// ini = System.currentTimeMillis();

		for(AcaoCobrancaEfeitoHelper acaoCobrancaEfeitoHelper : colecaoAcaoCobrancaEfeito){

			// LOGGER.info("Validando documento cobrança pagamento contra-ação");
			this.executarAcaoCobrancaEfeito(acaoCobrancaEfeitoHelper, idConta);

			// dif = System.currentTimeMillis() - ini;
			// LOGGER.info("4.3.7.15.2 - ############################## -> " + dif);
			// ini = System.currentTimeMillis();
		}
	}

	/**
	 * @author
	 * @date 11/10/2010
	 * @param acaoCobrancaEfeito
	 * @param idConta
	 * @param dataEmissaoDocumentoCobranca
	 * @throws ControladorException
	 */
	private void executarAcaoCobrancaEfeito(AcaoCobrancaEfeitoHelper acaoCobrancaEfeitoHelper, Integer idContaHistorico)
					throws ControladorException{

		Boolean gerarOs = true;
		UnidadeOrganizacional unidadeOrganizacional = null;
		ServicoTipo servicoTipo = null;

		AcaoCobrancaEfeito acaoCobrancaEfeito = acaoCobrancaEfeitoHelper.getAcaoCobrancaEfeito();
		Date dataEmissaoDocumentoCobranca = acaoCobrancaEfeitoHelper.getDataEmissaoDocumentoCobranca();
		CobrancaDocumento cobrancaDocumento = acaoCobrancaEfeitoHelper.getCobrancaDocumento();

		Object[] retornoArray = new Object[10];
		Integer idServicoTipoAcao = null;
		Integer idServicoTipoContraAcao = null;

		ContraAcao contraAcao = new ContraAcao();
		contraAcao.setAcaoCobrancaEfeito(acaoCobrancaEfeito);

		try{

			retornoArray = repositorioCobranca.pesquisarDadosImovelPorContaHistorico(idContaHistorico);

			if(retornoArray != null){

				// idSitLigacaoAgua
				if(retornoArray[3] != null){
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId((Integer) retornoArray[3]);
					contraAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
				}

				// idLigacaoAguaDiametro
				if(retornoArray[4] != null){
					LigacaoAguaDiametro ligacaoAguaDiametro = new LigacaoAguaDiametro();
					ligacaoAguaDiametro.setId((Integer) retornoArray[4]);
					contraAcao.setLigacaoAguaDiametro(ligacaoAguaDiametro);
				}

				// idLigacaoAguaMaterial
				if(retornoArray[5] != null){
					LigacaoAguaMaterial ligacaoAguaMaterial = new LigacaoAguaMaterial();
					ligacaoAguaMaterial.setId((Integer) retornoArray[5]);
					contraAcao.setLigacaoAguaMaterial(ligacaoAguaMaterial);
				}

				// idCorteTipo
				if(retornoArray[6] != null){
					CorteTipo corteTipo = new CorteTipo();
					corteTipo.setId((Integer) retornoArray[6]);
					contraAcao.setCorteTipo(corteTipo);
				}

				// idMotivoCorte
				if(retornoArray[7] != null){
					MotivoCorte motivoCorte = new MotivoCorte();
					motivoCorte.setId((Integer) retornoArray[7]);
					contraAcao.setMotivoCorte(motivoCorte);
				}

				// idSupressaoTipo
				if(retornoArray[8] != null){
					SupressaoTipo supressaoTipo = new SupressaoTipo();
					supressaoTipo.setId((Integer) retornoArray[8]);
					contraAcao.setSupressaoTipo(supressaoTipo);
				}

				// idSupressaoMotivo
				if(retornoArray[9] != null){
					SupressaoMotivo supressaoMotivo = new SupressaoMotivo();
					supressaoMotivo.setId((Integer) retornoArray[9]);
					contraAcao.setSupressaoMotivo(supressaoMotivo);
				}

			}

			Imovel imovel = cobrancaDocumento.getImovel();

			if(acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NA0_SE_APLICA)){
				gerarOs = false;

			}else if(acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NEGATIVACAO_SERASA)
							|| acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NEGATIVACAO_SPC_SP)
							|| acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NEGATIVACAO_SPC_BR)){

				// Negativador negativador = new Negativador();
				// if(acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NEGATIVACAO_SERASA)){
				// negativador.setId(Negativador.NEGATIVADOR_SERASA);
				// }else
				// if(acaoCobrancaEfeito.getId().equals(AcaoCobrancaEfeito.NEGATIVACAO_SPC_SP)){
				// negativador.setId(Negativador.NEGATIVADOR_SPC_SAO_PAULO);
				// }else{
				// negativador.setId(Negativador.NEGATIVADOR_SPC_BRASIL);
				// }
				//
				// getControladorSpcSerasa().excluirNegativacao(imovel, negativador,
				// idContaHistorico);

				gerarOs = false;

			}else{

				Object[] arrayContraAcao = repositorioCobranca.pesquisarContraAcao(contraAcao, cobrancaDocumento.getId());

				if(arrayContraAcao != null){

					if(arrayContraAcao[1] != null){
						idServicoTipoContraAcao = (Integer) arrayContraAcao[1];
					}

					if(arrayContraAcao[2] != null){
						unidadeOrganizacional = new UnidadeOrganizacional();
						unidadeOrganizacional.setId((Integer) arrayContraAcao[2]);
					}

					if(arrayContraAcao[3] != null){
						idServicoTipoAcao = (Integer) arrayContraAcao[3];
					}

					Integer qtdOSPenOuEnc = repositorioCobranca.pesquisarOSEncOuPenDoDocCobranca(idServicoTipoContraAcao,
									dataEmissaoDocumentoCobranca, imovel.getId());

					if(qtdOSPenOuEnc > 0){
						gerarOs = false;
					}

				}else{
					gerarOs = false;
				}

			}

			if(gerarOs){
				// Usuário administrador do sistema
				Usuario usuario = new Usuario();
				usuario.setId(Usuario.ID_USUARIO_ADM_SISTEMA);

				OrdemServico ordemServico = new OrdemServico();

				if(idServicoTipoContraAcao != null){
					servicoTipo = new ServicoTipo();
					servicoTipo.setId(idServicoTipoContraAcao);
					ordemServico.setServicoTipo(servicoTipo);
				}else{
					throw new ControladorException("atencao.sem_servico_tipo_ordem_servico");
				}

				ordemServico.setImovel(imovel);
				ordemServico.setCobrancaDocumento(cobrancaDocumento);

				OrdemServicoUnidade ordemServicoUnidade = new OrdemServicoUnidade();
				ordemServicoUnidade.setOrdemServico(ordemServico);
				ordemServicoUnidade.setUnidadeOrganizacional(unidadeOrganizacional);

				Usuario usuarioInclusao = new Usuario();
				usuarioInclusao.setId(Integer.valueOf(Usuario.ID_USUARIO_ADM_SISTEMA));

				ordemServicoUnidade.setUsuario(usuarioInclusao);
				AtendimentoRelacaoTipo atrt = new AtendimentoRelacaoTipo();
				atrt.setId(AtendimentoRelacaoTipo.ABRIR_REGISTRAR);
				ordemServicoUnidade.setAtendimentoRelacaoTipo(atrt);

				Calendar calendar = Calendar.getInstance();
				ordemServicoUnidade.setUltimaAlteracao(calendar.getTime());

				ordemServico.addOrdemServicoUnidade(ordemServicoUnidade);

				Collection collOrdemServicoVinculada = null;
				OrdemServico ordemServicoVinculada = null;

				if(idServicoTipoAcao != null){
					collOrdemServicoVinculada = repositorioCobranca.pesquisarOrdemServicoPorDocumentoCobranca(cobrancaDocumento.getId(),
									idServicoTipoAcao);

				}else{
					collOrdemServicoVinculada = repositorioCobranca.pesquisarOrdemServicoPorDocumentoCobranca(cobrancaDocumento.getId());
				}

				Iterator it = collOrdemServicoVinculada.iterator();
				if(it.hasNext()){
					ordemServicoVinculada = (OrdemServico) it.next();
				}

				ordemServico.setOrdemServicoVinculada(ordemServicoVinculada);

				Object[] dadosDoImovel = this.getControladorImovel().pesquisarDadosLocalizacaoImovel(imovel.getId());

				Integer idLocalidade = null;
				Integer idSetorComercial = null;
				Integer idBairro = null;
				if(dadosDoImovel != null){
					idLocalidade = (Integer) dadosDoImovel[0];
					idSetorComercial = (Integer) dadosDoImovel[1];
					idBairro = (Integer) dadosDoImovel[2];
				}

				this.getControladorOrdemServico().gerarOrdemServico(ordemServico, usuario, null, idLocalidade, idSetorComercial, idBairro,
								unidadeOrganizacional.getId(), null, null);

				// this.getControladorOrdemServico().gerarOrdemServico(ordemServico, usuario, null);
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

	}

	private Collection pesquisarDocumentoCobrancaNaContraAcao(Integer idConta) throws ControladorException{

		Collection colecaoDocumentos = new ArrayList();

		try{
			Collection<Object[]> docs = repositorioCobranca.pesquisarDocumentoCobrancaConta(idConta);

			HashMap mapIdDocItens = new HashMap();

			for(Object[] linha : docs){

				int i = 0;
				CobrancaDocumento cobrancaDocumento = null;

				Set<CobrancaDocumentoItem> colecaoItens = (Set<CobrancaDocumentoItem>) mapIdDocItens.get(linha[0]);

				if(colecaoItens == null){

					colecaoItens = new TreeSet<CobrancaDocumentoItem>();
					mapIdDocItens.put(linha[0], colecaoItens);

					cobrancaDocumento = new CobrancaDocumento();

					cobrancaDocumento.setId((Integer) linha[i++]);
					cobrancaDocumento.setEmissao((Date) linha[i++]);

					cobrancaDocumento.setImovel(new Imovel());
					cobrancaDocumento.getImovel().setId((Integer) linha[i++]);

					// buscar cobranca_acao por id trazendo acef_id
					Integer idAcef = repositorioCobranca.obterIdAcaoCobrancaEfeitoPelaCobrancaAcao((Integer) linha[i++]);

					cobrancaDocumento.setCobrancaAcao(new CobrancaAcao());
					cobrancaDocumento.getCobrancaAcao().setAcaoCobrancaEfeito(new AcaoCobrancaEfeito());
					cobrancaDocumento.getCobrancaAcao().getAcaoCobrancaEfeito().setId(idAcef);

					cobrancaDocumento.setCobrancaDocumentoItems(colecaoItens);

					colecaoDocumentos.add(cobrancaDocumento);

				}else{
					i += 4;
				}
				CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();

				cobrancaDocumentoItem.setId((Integer) linha[i++]);
				cobrancaDocumentoItem.setContaGeral(new ContaGeral());
				cobrancaDocumentoItem.getContaGeral().setId((Integer) linha[i++]);

				/**
				 * cd.cbdo_id, cd.cbdo_tmemissao, cd.imov_id, cd.cbac_id,
				 * items.cdit_id, items.cnta_id, conta.cnta_id id_cnta,
				 * conta.cnta_amreferenciaconta as referencia,
				 * conta.cnta_vlagua as vlAgua,
				 * conta.cnta_vlesgoto as vlEsgoto,
				 * conta.cnta_vldebitos as vlDebitos,
				 * conta.cnta_vlcreditos as vlCreditos,
				 * conta.cnta_vlimpostos as vlImpostos
				 */

				if(linha[i++] != null){
					cobrancaDocumentoItem.getContaGeral().setConta(new Conta());
					cobrancaDocumentoItem.getContaGeral().getConta().setId((Integer) linha[i - 1]);

					if(((Integer) linha[2]) != null){
						cobrancaDocumentoItem.getContaGeral().getConta().setImovel(new Imovel((Integer) linha[2]));
					}
					cobrancaDocumentoItem.getContaGeral().getConta().setReferencia((Integer) linha[i++]);
					cobrancaDocumentoItem.getContaGeral().getConta().setValorAgua((BigDecimal) linha[i++]);
					cobrancaDocumentoItem.getContaGeral().getConta().setValorEsgoto((BigDecimal) linha[i++]);
					cobrancaDocumentoItem.getContaGeral().getConta().setDebitos((BigDecimal) linha[i++]);
					cobrancaDocumentoItem.getContaGeral().getConta().setValorCreditos((BigDecimal) linha[i++]);
					cobrancaDocumentoItem.getContaGeral().getConta().setValorImposto((BigDecimal) linha[i++]);
				}

				colecaoItens.add(cobrancaDocumentoItem);
			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoDocumentos;
	}

	/**
	 * @author:Andre Nishimura
	 * @date: 23/04/2010
	 * @param idConta
	 * @return
	 * @throws ControladorException
	 *             Obtem a lista de documentos de cobranca do imovel
	 */
	private Collection<AcaoCobrancaEfeitoHelper> verificaContaNaAcaoCobranca(Integer idConta) throws ControladorException{

		// Pesquisa se essa conta está num CobrancaDocumento com CobrancaAcao não nulo.
		Collection<AcaoCobrancaEfeitoHelper> colecaoAcaoCobrancaEfeito = new ArrayList();
		Collection<CobrancaDocumento> colecaoCobrancaDocumentos = new ArrayList<CobrancaDocumento>();
		// Calendar a = Calendar.getInstance();
		// obtem todas as açoes de cobrança executadas com a conta em questao
		// 1 - Acoes de cobranca que geram OS (Corte/Supressao)
		// CobrancaDocumento cobrancaDocumento1 =
		// repositorioCobranca.pesquisarDocumentoCobrancaContaAcaoGeraOs(idConta);
		// if (cobrancaDocumento1 != null){
		// colecaoCobrancaDocumentos.add(cobrancaDocumento1);
		// }
		// //2 - Acao de cobranca SPC
		// CobrancaDocumento cobrancaDocumento2 =
		// repositorioCobranca.pesquisarDocumentoCobrancaContaAcaoSPC(idConta);
		// if (cobrancaDocumento2 != null){
		// colecaoCobrancaDocumentos.add(cobrancaDocumento2);
		// }
		// //3 - Acao de cobranca SERASA
		// CobrancaDocumento cobrancaDocumento3 =
		// repositorioCobranca.pesquisarDocumentoCobrancaContaAcaoSERASA(idConta);
		// if (cobrancaDocumento3 != null){
		// colecaoCobrancaDocumentos.add(cobrancaDocumento3);
		// }
		colecaoCobrancaDocumentos = pesquisarDocumentoCobrancaNaContraAcao(idConta);
		// System.out.print("-----> " + Util.calcularDiferencaTempo(a));
		for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumentos){
			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = null;
			if(cobrancaDocumento != null){
				colecaoCobrancaDocumentoItem = cobrancaDocumento.getCobrancaDocumentoItems();
			}
			Boolean todasContasPagas = true;
			// valida se todos as contas do documento de cobrança foram pagas.
			if(colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()){
				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
					// So considerar se for conta...
					if(cobrancaDocumentoItem.getContaGeral() != null){
						ContaGeral contaGeral = cobrancaDocumentoItem.getContaGeral();

						Conta conta = contaGeral.getConta();

						// se a conta for nula, entao está no historico.(foi paga)
						if(conta != null){
							// se a conta que nao está no historico não é a que "esta sendo paga",
							// entao, ainda nao executa contra-ação
							if(!conta.getId().equals(idConta)){

								todasContasPagas = false;
								break;
							}
						}
					}
				}
			}
			if(todasContasPagas){

				CobrancaAcao cobrancaAcao = null;
				if(cobrancaDocumento != null){
					cobrancaAcao = cobrancaDocumento.getCobrancaAcao();
				}
				if(cobrancaAcao != null){
					AcaoCobrancaEfeito acaoCobrancaEfeito = cobrancaAcao.getAcaoCobrancaEfeito();
					AcaoCobrancaEfeitoHelper acaoCobrancaEfeitoHelper = new AcaoCobrancaEfeitoHelper();
					acaoCobrancaEfeitoHelper.setAcaoCobrancaEfeito(acaoCobrancaEfeito);
					acaoCobrancaEfeitoHelper.setDataEmissaoDocumentoCobranca(cobrancaDocumento.getEmissao());
					acaoCobrancaEfeitoHelper.setCobrancaDocumento(cobrancaDocumento);
					colecaoAcaoCobrancaEfeito.add(acaoCobrancaEfeitoHelper);
				}
			}
		}

		return colecaoAcaoCobrancaEfeito;
	}

	public void emitirDocumentoTelecobranca(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario) throws ControladorException{

		List<Object> colecaoEmitirAvisoCobrancaHelper = new ArrayList<Object>();
		int quantidadeCobrancaDocumentoInicio = 0;
		Collection colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		// Collection<CobrancaDocumento> collCobrancaDocumento =
		// repositorioCobranca.pesquisarCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
		// idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca,
		// quantidadeCobrancaDocumentoInicio);

		Collection<CobrancaDocumento> collCobrancaDocumento = pesquisarTodosCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
						idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca);

		if(collCobrancaDocumento != null && !collCobrancaDocumento.isEmpty()){

			List<DocumentoTeleCobrancaHelper> collDocumentoTeleCobrancaHelper = new ArrayList<DocumentoTeleCobrancaHelper>();
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			FiltroClienteFone filtroClienteFone = new FiltroClienteFone();
			for(CobrancaDocumento cobrancaDocumento : collCobrancaDocumento){
				DocumentoTeleCobrancaHelper helper = new DocumentoTeleCobrancaHelper();

				Imovel imovel = cobrancaDocumento.getImovel();

				filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
								ClienteRelacaoTipo.USUARIO));
				filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
				filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
				filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);

				ClienteImovel clienteImovel = (ClienteImovel) this.getControladorUtil()
								.pesquisar(filtroClienteImovel, ClienteImovel.class.getName()).iterator().next();

				filtroClienteImovel.limparListaParametros();

				filtroClienteFone
								.adicionarParametro(new ParametroSimples(FiltroClienteFone.CLIENTE_ID, clienteImovel.getCliente().getId()));
				filtroClienteFone
								.adicionarParametro(new ParametroSimples(FiltroClienteFone.CLIENTE_ID, clienteImovel.getCliente().getId()));
				filtroClienteFone.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteFone.FONE_TIPO);

				Collection<ClienteFone> clienteFones = this.getControladorUtil().pesquisar(filtroClienteFone, ClienteFone.class.getName());

				filtroClienteFone.limparListaParametros();

				if(clienteFones != null){
					for(ClienteFone clienteFone : clienteFones){
						if(clienteFone.getIndicadorTelefonePadrao() != null
										&& clienteFone.getIndicadorTelefonePadrao().equals(ClienteFone.INDICADOR_FONE_PADRAO)){
							helper.setTipoTelefone(clienteFone.getFoneTipo().getId());
							helper.setTelefonePrincipal(clienteFone.getTelefone());
						}else{
							helper.setTelefoneSecundario(clienteFone.getTelefone());
						}
					}
				}

				helper.setNumeroImovel(clienteImovel.getImovel().getId().toString());

				helper.setEmpresa(cobrancaDocumento.getEmpresa().getDescricao());

				helper.setNomeCliente(clienteImovel.getCliente().getNome());

				helper.setEnderecoImovel(imovel.getEnderecoFormatado());

				helper.setNomeBairro(imovel.getLogradouroBairro().getBairro().getNome());

				helper.setValorDebito(cobrancaDocumento.getValorDocumento());

				helper.setCep(imovel.getLogradouroBairro().getBairro().getMunicipio().getUnidadeFederacao().getSigla() + " "
								+ imovel.getLogradouroCep().getCep().getCepFormatado());

				collDocumentoTeleCobrancaHelper.add(helper);
			}

			RelatorioTeleCobranca relatorioTeleCobranca = new RelatorioTeleCobranca(usuario);
			relatorioTeleCobranca.addParametro("collDocumentoTeleCobrancaHelper", collDocumentoTeleCobrancaHelper);
			relatorioTeleCobranca.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_CSV);

			this.getControladorBatch().iniciarProcessoRelatorio(relatorioTeleCobranca);
		}
	}

	/**
	 * @author Andre Nishimura
	 * @date 29/04/2010
	 *       Emisssao de um ou mais documentos de cobrança (Juridico)
	 */
	public void emitirDocumentoCobrancaJuridica(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario) throws ControladorException{

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		Collection colecaoCobrancaJuridicoHelper = this.pesquisarTodosCobrancaDocumentoParaEmitirJuridico(
						idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca);

		if(colecaoCobrancaJuridicoHelper != null && !colecaoCobrancaJuridicoHelper.isEmpty()){

			RelatorioCobrancaJuridico relatorioJuridico = new RelatorioCobrancaJuridico(usuario);
			relatorioJuridico.addParametro("colecaoCobrancaJuridico", colecaoCobrancaJuridicoHelper);
			relatorioJuridico.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_CSV);

			this.getControladorBatch().iniciarProcessoRelatorio(relatorioJuridico);
		}
	}

	public void negativarSpcSerasa(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario, Integer idNegativador)
					throws ControladorException{

		try{

			int quantidadeCobrancaDocumentoInicio = 0;
			Collection colecaoCobrancaDocumento = null;
			Integer idCronogramaAtividadeAcaoCobranca = null;
			Integer idComandoAtividadeAcaoCobranca = null;
			Integer idAcaoCobranca = null;

			List<GuiaPagamento> guias = new ArrayList<GuiaPagamento>();

			if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
				idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
			}
			if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
				idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
			}
			if(acaoCobranca != null && acaoCobranca.getId() != null){
				idAcaoCobranca = acaoCobranca.getId();
			}

			// Integer qtdItensDebitoImovel = Integer.valueOf(0);

			Collection<CobrancaDocumento> collCobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumentoPorCobrancaAcao(
							idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca,
							quantidadeCobrancaDocumentoInicio);

			// Collection<CobrancaDocumento> collCobrancaDocumento =
			// repositorioCobranca.pesquisarCobrancaDocumentoNaoNegativado(
			// idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca,
			// dataAtualPesquisa);

			Collection<DadosNegativacaoPorImovelHelper> helpers = null;

			if(collCobrancaDocumento != null && !collCobrancaDocumento.isEmpty()){

				helpers = new ArrayList<DadosNegativacaoPorImovelHelper>();

				for(CobrancaDocumento cobrancaDocumento : collCobrancaDocumento){

					Imovel imovel = cobrancaDocumento.getImovel();

					if(!this.imovelNegativado(imovel.getId(), idCronogramaAtividadeAcaoCobranca, idComandoAtividadeAcaoCobranca)){

						DadosNegativacaoPorImovelHelper helper = null;
						helper = new DadosNegativacaoPorImovelHelper();
						helper.setIdImovel(imovel.getId());

						Collection<Conta> contas = null;
						contas = repositorioCobranca.pesquisarContasDeCobrancaDocumentoItem(cobrancaDocumento.getId());

						List<ContaValoresHelper> contasValoresHelper = null;
						contasValoresHelper = new ArrayList<ContaValoresHelper>();

						BigDecimal qtdTotalDebitos = BigDecimal.ZERO;
						for(Conta cnta : contas){
							ContaValoresHelper cntaValorHelper = null;
							cntaValorHelper = new ContaValoresHelper();
							cntaValorHelper.setConta(cnta);
							if(cnta != null && cnta.getValorTotal() != null){
								qtdTotalDebitos = qtdTotalDebitos.add(cnta.getValorTotal());
							}
							contasValoresHelper.add(cntaValorHelper);
						}

						// Guias não estão sendo usadas.
						helper.setColecaoGuias(guias);
						// helper.setQtdItensDebitoImovel(qtdItensDebitoImovel);
						// helper.setTotalDebitosImovel(BigDecimal.valueOf(qtdTotalDebitos));
						if(contas != null){
							helper.setColecaoConta(contasValoresHelper);
							helper.setQtdItensDebitoImovel(contas.size());
							helper.setTotalDebitosImovel(qtdTotalDebitos);
						}
						Cliente cliente = cobrancaDocumento.getCliente();
						if(cliente != null){
							helper.setIdCliente(cliente.getId());
						}

						helper.setUsuario(usuario);
						helpers.add(helper);

					}

				}

				this.getControladorSpcSerasa().gerarMovimentoInclusaoNegativacao(
								// null, ConstantesSistema.TIPO_COMANDO_POR_MATRICULA_IMOVEIS,
								"", idNegativador, usuario.getId(), helpers, dataAtualPesquisa, idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca);

			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		LOGGER.info("*************************************************************SAIU no negativarSpcSerasa");
	}

	/**
	 * Verifica se o imovel já foi negativado
	 * 
	 * @author wpereira
	 * @date 14/07/2010
	 * @param idImovel
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param cobrancaAcaoAtividadeComando
	 * @return Boolean
	 * @throws ControladorException
	 */
	private Boolean imovelNegativado(Integer idImovel, Integer idCobrancaAcaoAtividadeCronograma, Integer idCobrancaAcaoAtividadeComando)
					throws ControladorException{

		// Boolean retorno = false;
		// FiltroNegativacaoImoveis filtro = new FiltroNegativacaoImoveis();
		// filtro.adicionarParametro(new ParametroSimples(FiltroNegativacaoImoveis.IMOVEL_ID,
		// idImovel));
		//
		// if(cobrancaAcaoAtividadeCronograma != null){
		// filtro.adicionarParametro(new
		// ParametroSimples(FiltroNegativacaoImoveis.COBRANCA_ACAO_ATIVIDADE_CRONOGRAMA_ID,
		// cobrancaAcaoAtividadeCronograma.getId()));
		// }else if(cobrancaAcaoAtividadeComando != null){
		// filtro.adicionarParametro(new
		// ParametroSimples(FiltroNegativacaoImoveis.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
		// cobrancaAcaoAtividadeComando.getId()));
		// }else{
		// throw new ControladorException("erro.sistema");
		// }
		//
		// Collection<NegativacaoImovei> collNegativacao =
		// this.getControladorUtil().pesquisar(filtro, NegativacaoImovei.class.getName());
		//
		// if((collNegativacao != null) && (!collNegativacao.isEmpty())){
		// retorno = true;
		// }

		Boolean retorno = false;
		try{
			retorno = repositorioCobranca.verificaNegativacao(idImovel, idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);

		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return retorno;
	}

	public Collection<EmissaoOSCobrancaHelper> pesquisarOS(Integer idComando, CobrancaAcaoAtividade tipoComandoAcaoCobrancas)
					throws ControladorException{

		Collection listaOS = null;
		try{
			listaOS = repositorioCobranca.pesquisarOS(idComando, tipoComandoAcaoCobrancas);
		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}
		return listaOS;
	}

	public void emitirOSCobranca(Map<Integer, List<EmissaoOSCobrancaHelper>> associacoes, List<Empresa> empresas,
					CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando, Usuario usuarioLogado) throws ControladorException{

		List<Integer> idOSGeral = new ArrayList<Integer>();

		// FiltroUsuario filtroUsuario = new FiltroUsuario();
		// filtroUsuario.adicionarParametro(new ParametroSimples(filtroUsuario.ID, 9999));
		// List<Usuario> users = (List<Usuario>) this.getControladorUtil().pesquisar(filtroUsuario,
		// Usuario.class.getName());
		//
		// Usuario u = users.get(0);

		for(Integer chave : associacoes.keySet()){
			List<EmissaoOSCobrancaHelper> listaHelper = associacoes.get(chave);
			Empresa empresa = new Empresa();
			empresa.setId(chave);
			idOSGeral.addAll(associarAgenteOS(listaHelper, empresa, tipoComandoAcaoCobranca, idComando));
		}
		cancelarOsPagas(tipoComandoAcaoCobranca, idComando, usuarioLogado);
		emitirOrdensServicoDocumentoCobranca(idOSGeral, usuarioLogado);

	}

	public List<Integer> associarAgenteOS(List<EmissaoOSCobrancaHelper> listaHelper, Empresa empresa,
					CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando){

		List<Integer> idOSGeral = new ArrayList<Integer>();

		for(EmissaoOSCobrancaHelper helper : listaHelper){
			Integer[] arrayQuadras = new Integer[helper.getQuadras().size()];
			int index = 0;
			for(EmissaoOSCobrancaQuadraHelper quadras : helper.getQuadras()){
				arrayQuadras[index] = quadras.getNumeroQuadra();
				index++;
			}
			idOSGeral.addAll(repositorioCobranca.associarAgenteOS(empresa, helper.getLocalidade(), helper.getSetor(), arrayQuadras,
							tipoComandoAcaoCobranca, idComando));
		}
		return idOSGeral;
	}

	public void cancelarOsPagas(CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando, Usuario usuarioLogado)
					throws ControladorException{

		// FIXME: Verificar performance Bulk Insert
		List<OrdemServico> listaOs = repositorioCobranca.getOsCancelar(tipoComandoAcaoCobranca, idComando);
		Hibernate.initialize(listaOs);
		FiltroAtendimentoMotivoEncerramento filtroAtendimento = new FiltroAtendimentoMotivoEncerramento();
		filtroAtendimento.adicionarParametro(new ParametroSimples(FiltroAtendimentoMotivoEncerramento.ID,
						AtendimentoMotivoEncerramento.ENCERRAMENTO_DEBITO_PAGO));

		List<AtendimentoMotivoEncerramento> listaMotivoEncerramento = (List<AtendimentoMotivoEncerramento>) this.getControladorUtil()
						.pesquisar(filtroAtendimento, AtendimentoMotivoEncerramento.class.getName());
		Hibernate.initialize(listaMotivoEncerramento);
		AtendimentoRelacaoTipo atendimentoRelacaoTipo = (AtendimentoRelacaoTipo) this.getControladorUtil().pesquisar(
						AtendimentoRelacaoTipo.ENCERRAR, AtendimentoRelacaoTipo.class, true);
		AtendimentoMotivoEncerramento motivoEncerramento = listaMotivoEncerramento.get(0);

		for(OrdemServico os : listaOs){

			os.setAtendimentoMotivoEncerramento(motivoEncerramento);
			os.setSituacao((short) 2);
			os.setDescricaoParecerEncerramento(null);
			os.setDataEncerramento(new Date());
			os.setUltimaAlteracao(new Date());
			this.getControladorUtil().atualizar(os);

			atualizaOrdemServicoUnidade(os, usuarioLogado, atendimentoRelacaoTipo);
		}
	}

	public void atualizaOrdemServicoUnidade(OrdemServico os, Usuario usuarioLogado, AtendimentoRelacaoTipo atendimentoRelacaoTipo)
					throws ControladorException{

		OrdemServicoUnidade osUnidade = new OrdemServicoUnidade();
		osUnidade.setOrdemServico(os);
		osUnidade.setUnidadeOrganizacional(usuarioLogado.getUnidadeOrganizacional());
		osUnidade.setUsuario(usuarioLogado);
		osUnidade.setAtendimentoRelacaoTipo(atendimentoRelacaoTipo);
		osUnidade.setUltimaAlteracao(new Date());
		this.getControladorUtil().inserir(osUnidade);
	}

	public Collection<RelatorioFechamentoCobrancaHelper> filtrarRelatorioFechamentoCobranca(Date periodoInicio, Date periodoFim,
					CobrancaAcao acao, Empresa empresa, CobrancaAcaoAtividadeComando acaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma acaoAtividadeCronograma, String stringComandoTipo) throws ControladorException{

		Collection<CobrancaSucesso> retorno = null;
		Collection<RelatorioFechamentoCobrancaHelper> retorno1 = new ArrayList();

		try{
			// pesquisar açoes executadas
			retorno = repositorioCobranca.filtrarRelatorioFechamentoCobranca(periodoInicio, periodoFim, acao, empresa,
							acaoAtividadeComando, acaoAtividadeCronograma, stringComandoTipo);

			if(retorno != null && !retorno.isEmpty()){
				RelatorioFechamentoCobrancaHelper helper = new RelatorioFechamentoCobrancaHelper();
				FiltroCobrancaAcaoAtividadeCronograma filtroCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
				FiltroCobrancaAcaoAtividadeComando filtroComando = new FiltroCobrancaAcaoAtividadeComando();
				for(CobrancaSucesso cobrancaSucesso : retorno){
					boolean atualiza = false;
					CobrancaAcaoAtividadeCronograma caac = cobrancaSucesso.getComandoAcaoCronograma();
					CobrancaAcaoAtividadeComando cacm = cobrancaSucesso.getComandoAcaoEventual();

					if(caac != null){

						filtroCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID, caac.getId()));
						filtroCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);
						filtroCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO);
						Collection colecaoCronograma = getControladorUtil().pesquisar(filtroCronograma,
										CobrancaAcaoAtividadeCronograma.class.getName());

						filtroCronograma.limparListaParametros();

						if(colecaoCronograma != null && !colecaoCronograma.isEmpty()){
							caac = ((CobrancaAcaoAtividadeCronograma) colecaoCronograma.iterator().next());
							if(helper != null && helper.getIdCronograma() != null
											&& caac.getId().intValue() == helper.getIdCronograma().intValue()){
								atualiza = true;
							}else{
								atualiza = false;
								helper = new RelatorioFechamentoCobrancaHelper();
							}
							helper.setIdCronograma(caac.getId());
							helper.setCronogramaGrupo(caac.getCobrancaAcaoCronograma().getCobrancaGrupoCronogramaMes().getCobrancaGrupo()
											.getDescricao());
							helper.setComandoTitulo("");
							helper.setAcaoNome(caac.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
						}
					}else{

						filtroComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID, cacm.getId()));
						filtroComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
						Collection colecaoComando = getControladorUtil().pesquisar(filtroComando,
										CobrancaAcaoAtividadeComando.class.getName());

						filtroComando.limparListaParametros();

						if(colecaoComando != null && !colecaoComando.isEmpty()){
							cacm = ((CobrancaAcaoAtividadeComando) colecaoComando.iterator().next());
							if(helper != null && helper.getIdComando() != null
											&& cacm.getId().intValue() == helper.getIdComando().intValue()){
								atualiza = true;
							}else{
								atualiza = false;
								helper = new RelatorioFechamentoCobrancaHelper();
							}
							helper.setIdComando(cacm.getId());
							helper.setComandoTitulo(cacm.getDescricaoTitulo());
							helper.setCronogramaGrupo("");
							helper.setAcaoNome(cacm.getCobrancaAcao().getDescricaoCobrancaAcao());
						}
					}
					if(atualiza){

						helper.setQtdContas(helper.getQtdContas()
										+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
						helper.setQtdParcelas(helper.getQtdParcelas()
										+ (cobrancaSucesso.getQuantidadeParcelas() == null ? 0 : cobrancaSucesso.getQuantidadeParcelas()));
						helper.setValorContas(helper.getValorContas().add(
										cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						helper.setValorParcelas(helper.getValorParcelas()
										.add((cobrancaSucesso.getValorParcelas() == null ? BigDecimal.ZERO : cobrancaSucesso
														.getValorParcelas())));

						if(cobrancaSucesso.getDiasVencidos() <= 30){
							helper.setQtd30(helper.getQtd30()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor30(helper.getValor30().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 30 && cobrancaSucesso.getDiasVencidos() <= 60){
							helper.setQtd60(helper.getQtd60()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor60(helper.getValor60().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 60 && cobrancaSucesso.getDiasVencidos() <= 90){
							helper.setQtd90(helper.getQtd90()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor90(helper.getValor90().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 90 && cobrancaSucesso.getDiasVencidos() <= 120){
							helper.setQtd120(helper.getQtd120()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor120(helper.getValor120().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 120 && cobrancaSucesso.getDiasVencidos() <= 150){
							helper.setQtd150(helper.getQtd150()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor150(helper.getValor150().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 150 && cobrancaSucesso.getDiasVencidos() <= 180){
							helper.setQtd180(helper.getQtd180()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValor180(helper.getValor180().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
						if(cobrancaSucesso.getDiasVencidos() > 180){
							helper.setQtdMaior180(helper.getQtdMaior180()
											+ (cobrancaSucesso.getQuantidadeContas() == null ? 0 : cobrancaSucesso.getQuantidadeContas()));
							helper.setValorMaior180(helper.getValorMaior180().add(
											cobrancaSucesso.getValorContas() == null ? BigDecimal.ZERO : cobrancaSucesso.getValorContas()));
						}
					}else{
						helper.setQtdContas(cobrancaSucesso.getQuantidadeContas());
						helper.setValorContas(cobrancaSucesso.getValorContas());
						helper.setQtdParcelas(cobrancaSucesso.getQuantidadeParcelas());
						helper.setValorParcelas(cobrancaSucesso.getValorParcelas());

						if(cobrancaSucesso.getDiasVencidos() <= 30){
							helper.setQtd30(cobrancaSucesso.getQuantidadeContas());
							helper.setValor30(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 30 && cobrancaSucesso.getDiasVencidos() <= 60){
							helper.setQtd60(cobrancaSucesso.getQuantidadeContas());
							helper.setValor60(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 60 && cobrancaSucesso.getDiasVencidos() <= 90){
							helper.setQtd90(cobrancaSucesso.getQuantidadeContas());
							helper.setValor90(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 90 && cobrancaSucesso.getDiasVencidos() <= 120){
							helper.setQtd120(cobrancaSucesso.getQuantidadeContas());
							helper.setValor120(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 120 && cobrancaSucesso.getDiasVencidos() <= 150){
							helper.setQtd150(cobrancaSucesso.getQuantidadeContas());
							helper.setValor150(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 150 && cobrancaSucesso.getDiasVencidos() <= 180){
							helper.setQtd180(cobrancaSucesso.getQuantidadeContas());
							helper.setValor180(cobrancaSucesso.getValorContas());
						}
						if(cobrancaSucesso.getDiasVencidos() > 180){
							helper.setQtdMaior180(cobrancaSucesso.getQuantidadeContas());
							helper.setValorMaior180(cobrancaSucesso.getValorContas());
						}
						retorno1.add(helper);
					}
				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno1;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	public Collection filtrarRelatorioEficienciaCobranca(Date dataInicial, Date dataFinal, CobrancaAcao acao, Empresa empresa,
					CobrancaAcaoAtividadeComando comando, CobrancaAcaoAtividadeCronograma cronograma, String[] setores, String[] grupos)
					throws ControladorException{

		Collection<EficienciaCobrancaRelatorioHelper> helpersRelatorio = new ArrayList();
		try{
			if(comando == null && cronograma == null){
				// INÍCIO Ambos * * INÍCIO Ambos * * INÍCIO Ambos * * INÍCIO Ambos * *
				Collection<CobrancaAcaoAtividadeComando> comandos = repositorioCobranca.filtrarComandosRelatorioEficienciaCobranca(
								dataInicial, dataFinal, acao, empresa, setores, grupos);
				Collection<CobrancaAcaoAtividadeCronograma> cronogramas = repositorioCobranca
								.filtrarCronogramasRelatorioEficienciaCobranca(dataInicial, dataFinal, acao, empresa, setores, grupos);

				// Adiciona os Comandos à coleção de helpers de retorno
				for(Iterator iteratorComandos = comandos.iterator(); iteratorComandos.hasNext();){
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) iteratorComandos.next();
					helpersRelatorio.add(recuperarEficienciaCobrancaComando(cobrancaAcaoAtividadeComando));
				}

				// Adiciona os Cronogramas à coleção de helpers de retorno
				for(Iterator iteratorCronogramas = cronogramas.iterator(); iteratorCronogramas.hasNext();){
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iteratorCronogramas
									.next();
					helpersRelatorio.add(recuperarEficienciaCobrancaCronograma(cobrancaAcaoAtividadeCronograma));
				}

				// FIM Ambos * * FIM Ambos * * FIM Ambos * * FIM Ambos * * FIM Ambos * *
			}else if(comando != null){
				// INÍCIO Comando * * INÍCIO Comando * * INÍCIO Comando * * INÍCIO Comando * *
				FiltroCobrancaAcaoAtividadeComando filtroComando = new FiltroCobrancaAcaoAtividadeComando();
				filtroComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID, comando.getId()));
				filtroComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
				comando = (CobrancaAcaoAtividadeComando) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroComando,
								CobrancaAcaoAtividadeComando.class.getName()));

				helpersRelatorio.add(recuperarEficienciaCobrancaComando(comando));
				// FIM Comando * * FIM Comando * * FIM Comando * * FIM Comando * * FIM Comando * *
			}else if(cronograma != null){
				// INÍCIO Cronograma * * INÍCIO Cronograma * * INÍCIO Cronograma * * INÍCIO
				// Cronograma * *
				FiltroCobrancaAcaoAtividadeCronograma filtroCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
				filtroCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID, cronograma.getId()));
				cronograma = (CobrancaAcaoAtividadeCronograma) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroCronograma,
								CobrancaAcaoAtividadeCronograma.class.getName()));

				helpersRelatorio.add(recuperarEficienciaCobrancaCronograma(cronograma));

				// FIM Cronograma * * FIM Cronograma * * FIM Cronograma * * FIM Cronograma * * FIM
				// Cronograma * *
			}

			// return this.repositorioCobranca.filtrarRelatorioEficienciaCobranca(dataInicial,
			// dataFinal, acao, empresa, comando, cronograma, setores, grupos);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return helpersRelatorio;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	private EficienciaCobrancaRelatorioHelper recuperarEficienciaCobrancaComando(CobrancaAcaoAtividadeComando comando)
					throws ErroRepositorioException{

		EficienciaCobrancaRelatorioHelper helper = new EficienciaCobrancaRelatorioHelper();
		helper.setIdComando(comando.getId());
		helper.setDescricaoGrupoOuTituloComando(comando.getDescricaoTitulo());
		helper.setDescricaoAcao(comando.getCobrancaAcao().getDescricaoCobrancaAcao());
		helper.setInicioCobranca(comando.getRealizacao());
		Calendar dataHoraFim = Calendar.getInstance();
		dataHoraFim.setTime(comando.getRealizacao());
		dataHoraFim.add(Calendar.DAY_OF_MONTH, comando.getCobrancaAcao().getNumeroDiasValidade());
		helper.setFimCobranca(dataHoraFim.getTime());
		helper.setQuantidadeClientesInicioCobranca(comando.getQuantidadeDocumentos());
		helper.setQuantidadeDebitosInicioCobranca(comando.getQuantidadeItensCobrados());
		helper.setDividaCobradaInicioCobranca(comando.getValorDocumentos());

		helper = repositorioCobranca.calcularRecuperacaoDividaRelatorioEficienciaCobranca(helper,
						EficienciaCobrancaRelatorioHelper.TIPO_COMANDO);
		return helper;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	private EficienciaCobrancaRelatorioHelper recuperarEficienciaCobrancaCronograma(CobrancaAcaoAtividadeCronograma cronograma)
					throws ErroRepositorioException{

		EficienciaCobrancaRelatorioHelper helper = new EficienciaCobrancaRelatorioHelper();
		helper.setIdComando(cronograma.getId());
		helper.setDescricaoGrupoOuTituloComando(cronograma.getCobrancaAcaoCronograma().getCobrancaGrupoCronogramaMes().getCobrancaGrupo()
						.getDescricao());
		helper.setDescricaoAcao(cronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getDescricaoCobrancaAcao());
		helper.setInicioCobranca(cronograma.getRealizacao());
		Calendar dataHoraFim = Calendar.getInstance();
		dataHoraFim.setTime(cronograma.getRealizacao());
		dataHoraFim.add(Calendar.DAY_OF_MONTH, cronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getNumeroDiasValidade());
		helper.setFimCobranca(dataHoraFim.getTime());
		helper.setQuantidadeClientesInicioCobranca(cronograma.getQuantidadeDocumentos());
		helper.setQuantidadeDebitosInicioCobranca(cronograma.getQuantidadeItensCobrados());
		helper.setDividaCobradaInicioCobranca(cronograma.getValorDocumentos());

		helper = repositorioCobranca.calcularRecuperacaoDividaRelatorioEficienciaCobranca(helper,
						EficienciaCobrancaRelatorioHelper.TIPO_CRONOGRAMA);

		return helper;
	}

	public Collection pesquisarBairroPorGrupoEmQuadraRota(Integer grupo) throws ControladorException{

		try{
			return this.repositorioCobranca.pesquisarBairroPorGrupoEmQuadraRota(grupo);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	public Collection filtrarAcompanhamentoExecucaoServicoCobranca(Integer comandoTipo, Integer comandoCronograma, Integer comandoEventual,
					Integer cobrancaAcao, Date periodoInicial, Date periodoFinal, Integer situacao, Integer religado, Integer servico,
					Integer localidade, Integer grupo, String[] bairro, String[] setorComercial) throws ControladorException{

		try{
			return repositorioCobranca.filtrarAcompanhamentoExecucaoServicoCobranca(comandoTipo, comandoCronograma, comandoEventual,
							cobrancaAcao, periodoInicial, periodoFinal, situacao, religado, servico, localidade, grupo, bairro,
							setorComercial);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	public Integer consultarQtdeDocumentosItensPorCobrancaDocumento(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.consultarQtdeDocumentosItensPorCobrancaDocumento(cobrancaDocumento);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * jns
	 * 22/07/2010
	 * 
	 * @param criticaHelper
	 * @throws ControladorException
	 */
	public void atualizarLigacaoAgua(CriticaOSLoteHelper criticaHelper) throws ControladorException{

		if(criticaHelper.getTipoCorte() != null){
			efetuarCorteLigacaoAgua(criticaHelper);
		}else{
			efetuarSupressaoLigacaoAgua(criticaHelper);
		}
	}

	/**
	 * jns
	 * 
	 * @param criticaHelper
	 * @throws ControladorException
	 */
	private void efetuarSupressaoLigacaoAgua(CriticaOSLoteHelper criticaHelper) throws ControladorException{

		try{
			Imovel imovel = (Imovel) repositorioUtil.pesquisar(criticaHelper.getIdImovel(), Imovel.class, true);
			LigacaoAgua ligacaoAgua = imovel.getLigacaoAgua();
			ligacaoAgua.setDataSupressao(criticaHelper.getDataEncerramento());
			if(criticaHelper.getSeloCorteSupressao() != null && !"".equals(criticaHelper.getSeloCorteSupressao())){
				ligacaoAgua.setNumeroSeloSupressao(Integer.parseInt(criticaHelper.getSeloCorteSupressao()));
			}

			SupressaoTipo supressaoTipo = (SupressaoTipo) repositorioUtil.pesquisar(criticaHelper.getTipoSupressao(), SupressaoTipo.class,
							true);
			ligacaoAgua.setSupressaoTipo(supressaoTipo);

			SupressaoMotivo supressaoMotivo = (SupressaoMotivo) repositorioUtil.pesquisar(criticaHelper.getMotivoCorteSupressao(),
							SupressaoMotivo.class, true);
			ligacaoAgua.setSupressaoMotivo(supressaoMotivo);
			ligacaoAgua.setUltimaAlteracao(new Date());

			repositorioUtil.atualizar(ligacaoAgua);

			LigacaoAguaSituacao situacaoLigacao = null;

			if(supressaoTipo.getIndicadorParcial() == 2){// Parcial
				situacaoLigacao = (LigacaoAguaSituacao) repositorioUtil.pesquisar(LigacaoAguaSituacao.SUPR_PARC_PEDIDO,
								LigacaoAguaSituacao.class, true);
			}else{
				situacaoLigacao = (LigacaoAguaSituacao) repositorioUtil.pesquisar(LigacaoAguaSituacao.SUPRIMIDO, LigacaoAguaSituacao.class,
								true);
			}

			imovel.setLigacaoAguaSituacao(situacaoLigacao);
			imovel.setUltimaAlteracao(new Date());
			repositorioUtil.atualizar(imovel);

			if(criticaHelper.getLeituraCorteSupressao() != null){ // Possui hidrômetro
				Hibernate.initialize(ligacaoAgua);
				HidrometroInstalacaoHistorico historicoInstalacaoHidrometro = ligacaoAgua.getHidrometroInstalacaoHistorico();
				historicoInstalacaoHidrometro.setNumeroLeituraSupressao(criticaHelper.getLeituraCorteSupressao());
				historicoInstalacaoHidrometro.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(historicoInstalacaoHidrometro);
			}

			OrdemServico ordemServico = (OrdemServico) repositorioUtil.pesquisar(criticaHelper.getNumeroOS(), OrdemServico.class, true);
			ordemServico.setIndicadorComercialAtualizado((short) 1);
			ordemServico.setUltimaAlteracao(new Date());
			ordemServico.setSupressaoTipo(supressaoTipo);
			repositorioUtil.atualizar(ordemServico);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * jns
	 * 
	 * @param criticaHelper
	 * @throws ControladorException
	 */
	private void efetuarCorteLigacaoAgua(CriticaOSLoteHelper criticaHelper) throws ControladorException{

		// FiltroOrdemServico filtroOS = new FiltroOrdemServico();
		// filtroOS.adicionarCaminhoParaCarregamentoEntidade(filtroOS.IMOVEL);
		// filtroOS.adicionarCaminhoParaCarregamentoEntidade(filtroOS.SERVICO_TIPO_SUBGRUPO);
		// filtroOS.adicionarParametro(new ParametroSimples(filtroOS.ID,numeroOS));
		//
		//
		// criticaOSLoteHelper.setNumeroOS(Integer.valueOf(numeroOS));
		//
		// Collection<OrdemServico> listaOS = this.getControladorUtil().pesquisar(filtroOS,
		// OrdemServico.class.getName());
		// os = (OrdemServico) Util.retonarObjetoDeColecao(listaOS);
		try{

			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LIGACAO_AGUA);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LIGACAO_AGUA_HIDROMETRO_INSTALACAO_HIST);
			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, criticaHelper.getIdImovel()));

			Imovel imovel = (Imovel) Util.retonarObjetoDeColecao(this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName()));

			// Imovel imovel = (Imovel) repositorioUtil.pesquisar(criticaHelper.getIdImovel(),
			// Imovel.class, true);

			LigacaoAguaSituacao situacaoLigacao = (LigacaoAguaSituacao) repositorioUtil.pesquisar(LigacaoAguaSituacao.CORTADO,
							LigacaoAguaSituacao.class, true);
			imovel.setLigacaoAguaSituacao(situacaoLigacao);
			imovel.setUltimaAlteracao(new Date());
			repositorioUtil.atualizar(imovel);

			LigacaoAgua ligacaoAgua = imovel.getLigacaoAgua();

			ligacaoAgua.setDataCorte(criticaHelper.getDataEncerramento());

			if(criticaHelper.getSeloCorteSupressao() != null && !"".equals(criticaHelper.getSeloCorteSupressao())){
				ligacaoAgua.setNumeroSeloCorte(Integer.parseInt(criticaHelper.getSeloCorteSupressao()));
			}

			CorteTipo corteTipo = (CorteTipo) repositorioUtil.pesquisar(criticaHelper.getTipoCorte(), CorteTipo.class, true);
			ligacaoAgua.setCorteTipo(corteTipo);

			MotivoCorte motivoCorte = (MotivoCorte) repositorioUtil.pesquisar(criticaHelper.getMotivoCorteSupressao(), MotivoCorte.class,
							true);
			ligacaoAgua.setMotivoCorte(motivoCorte);
			ligacaoAgua.setUltimaAlteracao(new Date());
			repositorioUtil.atualizar(ligacaoAgua);

			if(criticaHelper.getLeituraCorteSupressao() != null){ // Possui hidrômetro
				Hibernate.initialize(ligacaoAgua);
				HidrometroInstalacaoHistorico historicoInstalacaoHidrometro = ligacaoAgua.getHidrometroInstalacaoHistorico();
				historicoInstalacaoHidrometro.setNumeroLeituraCorte(criticaHelper.getLeituraCorteSupressao());
				historicoInstalacaoHidrometro.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(historicoInstalacaoHidrometro);
			}

			OrdemServico ordemServico = (OrdemServico) repositorioUtil.pesquisar(criticaHelper.getNumeroOS(), OrdemServico.class, true);
			ordemServico.setIndicadorComercialAtualizado((short) 1);
			ordemServico.setUltimaAlteracao(new Date());
			ordemServico.setCorteTipo(corteTipo);
			repositorioUtil.atualizar(ordemServico);

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * jns
	 * 21/09/2010
	 * 
	 * @param criticaHelper
	 * @throws ControladorException
	 */
	public void atualizaOrdemServicoRedeAgua(CriticaOSLoteHelper criticaHelper) throws ControladorException{

		try{
			OrdemServico os = (OrdemServico) getControladorUtil().pesquisar(criticaHelper.getNumeroOS(), OrdemServico.class, true);
			os.setDiametroRedeAgua(criticaHelper.getDiametroRedeAgua());
			os.setMaterialRedeAgua(criticaHelper.getMaterialRedeAgua());
			os.setNumeroProfundidade(BigDecimal.valueOf(criticaHelper.getProfundidadeRede()));
			if(criticaHelper.getPressao() != null){
				os.setNumeroPressao(BigDecimal.valueOf(criticaHelper.getPressao()));
			}

			getControladorUtil().atualizar(os);

		}catch(ControladorException e){
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * jns
	 * 21/09/2010
	 * 
	 * @param criticaHelper
	 * @throws ControladorException
	 */
	public void atualizaOrdemServicoValaPavimento(CriticaOSLoteHelper criticaHelper) throws ControladorException{

		OrdemServicoValaPavimento ordemServicoValaPavimento = new OrdemServicoValaPavimento();

		FiltroOrdemServico filtroOS = new FiltroOrdemServico();
		filtroOS.adicionarParametro(new ParametroSimples(FiltroOrdemServico.ID, criticaHelper.getNumeroOS()));
		Collection<OrdemServico> listaOS = this.getControladorUtil().pesquisar(filtroOS, OrdemServico.class.getName());

		ordemServicoValaPavimento.setOrdemServico((OrdemServico) Util.retonarObjetoDeColecao(listaOS));

		ordemServicoValaPavimento.setNumeroVala(1);
		ordemServicoValaPavimento.setLocalOcorrencia(criticaHelper.getLocalOcorrencia());
		ordemServicoValaPavimento.setPavimentoRua(criticaHelper.getPavimentoRua());
		ordemServicoValaPavimento.setNumeroComprimento(BigDecimal.valueOf(criticaHelper.getComprimento()));
		ordemServicoValaPavimento.setNumeroLargura(BigDecimal.valueOf(criticaHelper.getLarguraVala()));
		ordemServicoValaPavimento.setNumeroProfundidade(BigDecimal.valueOf(criticaHelper.getProfundidadeVala()));
		ordemServicoValaPavimento.setIndicadorAterro(criticaHelper.getIndicadorValaAterrada());
		ordemServicoValaPavimento.setIndicadorEntulho(criticaHelper.getIndicadorValaEntulho());
		ordemServicoValaPavimento.setUltimaAlteracao(new Date());

		getControladorUtil().inserir(ordemServicoValaPavimento);

	}

	/**
	 * jns
	 * 21/07/2010
	 * 
	 * @param criticaHelper
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	private void realizaEncerramentoOS(CriticaOSLoteHelper criticaHelper, Usuario usuarioLogado) throws ControladorException{

		if(criticaHelper != null && criticaHelper.getIndicadorInsSubHidrometro() != null
						&& !criticaHelper.getIndicadorInsSubHidrometro().equals("")){
			atualizaOrdemServicoRedeAgua(criticaHelper);
			atualizaOrdemServicoValaPavimento(criticaHelper);
		}

		OSEncerramentoHelper osEncerramentoHelper = new OSEncerramentoHelper();

		osEncerramentoHelper.setNumeroOS(criticaHelper.getNumeroOS());
		osEncerramentoHelper.setIdMotivoEncerramento(criticaHelper.getMotivoEncerramento().toString());
		osEncerramentoHelper.setDataExecucao(criticaHelper.getDataEncerramento());
		osEncerramentoHelper.setUsuarioLogado(usuarioLogado);
		osEncerramentoHelper.setParecerEncerramento(criticaHelper.getParecer());
		osEncerramentoHelper.setUltimaAlteracao(new Date());

		if(osEncerramentoHelper.getIdMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
			this.getControladorOrdemServico().encerrarOSComExecucaoSemReferencia(osEncerramentoHelper, null,
							OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);
		}else{
			this.getControladorOrdemServico().encerrarOSSemExecucao(osEncerramentoHelper, null,
							OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);
		}
	}

	/**
	 * Efetua a baixa das ordens de serviço de cobrança
	 * 
	 * @author wpereira
	 * @date 22/07/2010
	 * @param arquivo
	 * @param usuario
	 * @throws ControladorException
	 */
	public void efetuarBaixaOrdensServicoCobranca(String arquivo, Usuario usuario) throws ControladorException{

		BufferedReader br = null;
		FileReader fileReader = null;

		try{
			String linha = null;
			fileReader = new FileReader(arquivo);
			br = new BufferedReader(fileReader);
			List<String> linhas = new ArrayList<String>();

			while((linha = br.readLine()) != null){

				CriticaOSLoteHelper criticaOSLoteHelper = this.criticaOSLote(linha);
				linhas.add(criticaOSLoteHelper.getLinhaArquivoLote());

				if(!criticaOSLoteHelper.isStatusCritica()){

					if(!Util.isVazioOuBranco(criticaOSLoteHelper.getIndicadorInsSubHidrometro())){

						if(criticaOSLoteHelper.getIndicadorInsSubHidrometro().equalsIgnoreCase("S")){
							/*
							 * 3.22.1.11.4. Atualizar os dados da substituição do hidrômetro
							 * conforme
							 * caso de uso(<<Inclui>>[UC0364-Efetuar Substituicao Hidrometro])
							 */
							getControladorAtendimentoPublico().efetuarSubstituicaoHidrometro(
											criticaOSLoteHelper.getIntegracaoComercialHelper());
						}else if(criticaOSLoteHelper.getIndicadorInsSubHidrometro().equalsIgnoreCase("I")){
							/*
							 * 3.22.1.12. Caso contrário, atualizar os dados da instalação do
							 * hidrômetro
							 * conforme caso de uso(<<Inclui>>[UC0362-Efetuar Instalacao Hidrometro
							 */
							getControladorAtendimentoPublico().efetuarInstalacaoHidrometro(
											criticaOSLoteHelper.getIntegracaoComercialHelper());

						}
					}
					if(criticaOSLoteHelper.getIndicadorVerificacaoIrregularidades()){
						getControladorOrdemServico().gerarSansaoBaixaEmLoteOS(criticaOSLoteHelper);
					}else if(criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
						this.atualizarLigacaoAgua(criticaOSLoteHelper);
					}
					this.realizaEncerramentoOS(criticaOSLoteHelper, usuario);
				}

			}

			this.gerarArquivoEnviarEmail(linhas);

			br.close();
			fileReader.close();

			File file = new File(arquivo);
			file.delete();

		}catch(FileNotFoundException e){
			e.printStackTrace();
			// gerar email de erro.
			this.gerarEmailErro(e.getMessage(), EnvioEmail.ARQUIVO_RETORNO_BAIXA_ORDEM_SERVICO);
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}catch(IOException e){
			e.printStackTrace();
			this.gerarEmailErro(e.getMessage(), EnvioEmail.ARQUIVO_RETORNO_BAIXA_ORDEM_SERVICO);
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			e.printStackTrace();
			this.gerarEmailErro(e.getMessage(), EnvioEmail.ARQUIVO_RETORNO_BAIXA_ORDEM_SERVICO);
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}finally{
			try{
				if(br != null){
					br.close();
				}

				if(fileReader != null){
					fileReader.close();
				}
			}catch(IOException e){
				throw new ControladorException("erro.sistema", e);
			}

			if(!Util.isVazioOuBranco(arquivo)){
				File file = new File(arquivo);
				file.delete();
			}
		}
	}

	private void gerarEmailErro(String mensagem, Integer idEnvioEmail) throws ControladorException{

		try{

			if(mensagem != null){
				if(!mensagem.startsWith("erro.") && !mensagem.startsWith("atencao.")){
					mensagem = "erro.sistema";
				}
			}else{
				mensagem = "erro.sistema";
			}

			EnvioEmail envioEmailError = getControladorCadastro().pesquisarEnvioEmail(idEnvioEmail);

			String emailRemetente = envioEmailError.getEmailRemetente();
			String tituloMensagem = envioEmailError.getTituloMensagem();
			String emailReceptor = envioEmailError.getEmailReceptor();
			ServicosEmail.enviarMensagem(emailRemetente, emailReceptor, tituloMensagem, ConstantesAplicacao.get(mensagem));

		}catch(Exception e2){
			e2.printStackTrace();
			throw new ControladorException("erro.sistema", e2);
		}finally{
			sessionContext.setRollbackOnly();
		}
	}

	/**
	 * Gera e envia por email o arquivo de retorno de baixa de ordem de serviço
	 * 
	 * @author wpereira
	 * @date 22/07/2010
	 * @param linhas
	 * @throws Exception
	 */
	private void gerarArquivoEnviarEmail(List<String> linhas) throws Exception{

		EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.ARQUIVO_RETORNO_BAIXA_ORDEM_SERVICO);
		StringBuilder stringBuilder = new StringBuilder();

		for(String newLinha : linhas){

			stringBuilder.append(newLinha + ";");
			stringBuilder.append(System.getProperty("line.separator"));

		}

		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(stringBuilder.length());
		BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(byteArrayOutputStream));

		bufferedWriter.write(stringBuilder.toString());
		bufferedWriter.close();
		byteArrayOutputStream.close();

		File leitura = new File("Arquivo.csv");
		FileOutputStream out = new FileOutputStream(leitura.getAbsolutePath());
		out.write(byteArrayOutputStream.toByteArray());
		out.flush();
		out.close();

		String emailRemetente = envioEmail.getEmailRemetente();
		String tituloMensagem = envioEmail.getTituloMensagem();
		String corpoMensagem = envioEmail.getCorpoMensagem();
		String emailReceptor = envioEmail.getEmailReceptor();

		ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, corpoMensagem, leitura);
		leitura.delete();

	}

	/**
	 * Adiciona as criticas a uma linha do arquivo de baixa de ordens de serviço de cobrança
	 * 
	 * @author wpereira
	 * @date 22/07/2010
	 * @param linha
	 * @param criticaOSLoteHelper
	 * @return
	 */
	private String tratarLinhaArquivoBaixaOrdensServicoCobranca(String linha, CriticaOSLoteHelper criticaOSLoteHelper){

		if(criticaOSLoteHelper.isStatusCritica()){
			linha = linha + ";" + criticaOSLoteHelper.getMensagemCritica();
		}else{
			linha = linha + ";ok;";
		}

		return linha;
	}

	/**
	 * @author Eduardo Castor
	 * @throws ErroRepositorioException
	 * @throws NumberFormatException
	 * @date 21/07/2010
	 *       Criticar uma linha do arquivo de OSs para baixar em lote
	 */
	public CriticaOSLoteHelper criticaOSLote(String linhaOS) throws ControladorException, NumberFormatException, ErroRepositorioException{

		final String falha = "falha";
		final String ok = "ok";

		// SimpleDateFormat sd = new SimpleDateFormat("yyyy/MM/dd");
		// sd.setLenient(true);
		CriticaOSLoteHelper criticaOSLoteHelper = new CriticaOSLoteHelper();
		criticaOSLoteHelper.setResultadoCritica(ok);

		String mensagemCritica = "";

		linhaOS = linhaOS.replace(";", " ; ");
		StringTokenizer linha = new StringTokenizer(linhaOS, ";");

		String numeroOS = "";
		if(linha.hasMoreTokens()){
			numeroOS = linha.nextToken().trim();
		}
		String idImovel = "";
		if(linha.hasMoreTokens()){
			idImovel = linha.nextToken().trim();
		}
		String dataEncerramento = "";
		if(linha.hasMoreTokens()){
			dataEncerramento = linha.nextToken().trim();
		}
		String motivoEncerramento = "";
		if(linha.hasMoreTokens()){
			motivoEncerramento = linha.nextToken().trim();
		}
		String tipoCorte = "";
		if(linha.hasMoreTokens()){
			tipoCorte = linha.nextToken().trim();
		}
		String tipoSupressao = "";
		if(linha.hasMoreTokens()){
			tipoSupressao = linha.nextToken().trim();
		}
		String motivoCorteSupressao = "";
		if(linha.hasMoreTokens()){
			motivoCorteSupressao = linha.nextToken().trim();
		}
		String leituraCorteSupressao = "";
		if(linha.hasMoreTokens()){
			leituraCorteSupressao = linha.nextToken().trim();
		}
		String seloCorteSupressao = "";
		if(linha.hasMoreTokens()){
			seloCorteSupressao = linha.nextToken().trim();
		}
		String parecer = "";
		if(linha.hasMoreTokens()){
			parecer = linha.nextToken().trim();
		}
		String diametro = "";
		if(linha.hasMoreTokens()){
			diametro = linha.nextToken().trim();
		}
		String profundidadeRede = "";
		if(linha.hasMoreTokens()){
			profundidadeRede = linha.nextToken().trim().replace(".", "").replace(",", ".");
		}
		String pressao = "";
		if(linha.hasMoreTokens()){
			pressao = linha.nextToken().trim().replace(".", "").replace(",", ".");
		}
		String material = "";
		if(linha.hasMoreTokens()){
			material = linha.nextToken().trim();
		}
		String comprimento = "";
		if(linha.hasMoreTokens()){
			comprimento = linha.nextToken().trim().replace(".", "").replace(",", ".");
		}
		String largura = "";
		if(linha.hasMoreTokens()){
			largura = linha.nextToken().trim().replace(".", "").replace(",", ".");
		}
		String profundidadeVala = "";
		if(linha.hasMoreTokens()){
			profundidadeVala = linha.nextToken().trim().replace(".", "").replace(",", ".");
		}
		String localOcorrencia = "";
		if(linha.hasMoreTokens()){
			localOcorrencia = linha.nextToken().trim();
		}
		String tipoPavimento = "";
		if(linha.hasMoreTokens()){
			tipoPavimento = linha.nextToken().trim();
		}
		String indicadorValaEntulho = "";
		if(linha.hasMoreTokens()){
			indicadorValaEntulho = linha.nextToken().trim();
		}
		String indicadorValaAterrada = "";
		if(linha.hasMoreTokens()){
			indicadorValaAterrada = linha.nextToken().trim();
		}

		// INSTALAÇÃO/SUBSTITUIÇÃO DE HIDRÔMETRO
		String indicadorInsSubHidrometro = "";
		if(linha.hasMoreTokens()){
			indicadorInsSubHidrometro = linha.nextToken().trim();
		}
		String numeroHidrometro = "";
		if(linha.hasMoreTokens()){
			numeroHidrometro = linha.nextToken().trim();
		}
		String dataInstalacaoStr = "";
		if(linha.hasMoreTokens()){
			dataInstalacaoStr = linha.nextToken().trim();
		}
		String tipoMedicao = "";
		if(linha.hasMoreTokens()){
			tipoMedicao = linha.nextToken().trim();
		}
		String localInstalacao = "";
		if(linha.hasMoreTokens()){
			localInstalacao = linha.nextToken().trim();
		}
		String protecao = "";
		if(linha.hasMoreTokens()){
			protecao = linha.nextToken().trim();
		}
		String trocaProtecao = "";
		if(linha.hasMoreTokens()){
			trocaProtecao = linha.nextToken().trim();
		}
		String trocaRegistro = "";
		if(linha.hasMoreTokens()){
			trocaRegistro = linha.nextToken().trim();
		}
		String leituraInstalacao = "";
		if(linha.hasMoreTokens()){
			leituraInstalacao = linha.nextToken().trim();
		}
		String numeroSelo = "";
		if(linha.hasMoreTokens()){
			numeroSelo = linha.nextToken().trim();
		}
		String cavalete = "";
		if(linha.hasMoreTokens()){
			cavalete = linha.nextToken().trim();
		}
		String leituraRetirada = "";
		if(linha.hasMoreTokens()){
			leituraRetirada = linha.nextToken().trim();
		}
		String situacaoHidrometroStr = "";
		if(linha.hasMoreTokens()){
			situacaoHidrometroStr = linha.nextToken().trim();
		}
		String localArmazenagemStr = "";
		if(linha.hasMoreTokens()){
			localArmazenagemStr = linha.nextToken().trim();
		}

		String numeroNila = "";
		if(linha.hasMoreTokens()){
			numeroNila = linha.nextToken().trim();
		}
		String imovelSituacao = "";
		if(linha.hasMoreTokens()){
			imovelSituacao = linha.nextToken().trim();
		}
		String ligacaoSituacao = "";
		if(linha.hasMoreTokens()){
			ligacaoSituacao = linha.nextToken().trim();
		}
		String fiscal = "";
		if(linha.hasMoreTokens()){
			fiscal = linha.nextToken().trim();
		}
		String irregularidadeTipo = "";
		while(linha.hasMoreTokens()){
			irregularidadeTipo += linha.nextToken() + ",";
		}
		if(!irregularidadeTipo.equals("")){ // remove a ultima virgula..
			irregularidadeTipo = irregularidadeTipo.substring(0, irregularidadeTipo.length() - 1);
		}

		boolean ehSubgrupoCorte = false;
		boolean ehSubgrupoSupressao = false;
		boolean ehSubgrupoFiscalizacao = false;
		boolean ehSubgrupoVerificacaoIrregularidades = false;

		// Validando numero de OS
		OrdemServico os = null;
		// ServicoTipo servicoTipo = null;
		try{

			if("".equals(numeroOS)){
				mensagemCritica = mensagemCritica.concat("Ordem de Serviço não Informada./");
				criticaOSLoteHelper.setResultadoCritica(falha);
			}else{

				FiltroOrdemServico filtroOS = new FiltroOrdemServico();
				filtroOS.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.IMOVEL);
				filtroOS.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.SERVICO_TIPO_SUBGRUPO);
				filtroOS.adicionarParametro(new ParametroSimples(FiltroOrdemServico.ID, numeroOS));

				criticaOSLoteHelper.setNumeroOS(Integer.valueOf(numeroOS));

				Collection<OrdemServico> listaOS = this.getControladorUtil().pesquisar(filtroOS, OrdemServico.class.getName());
				os = (OrdemServico) Util.retonarObjetoDeColecao(listaOS);

				if(os == null){
					mensagemCritica = mensagemCritica.concat("Ordem de Serviço inexistente./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}else{
					if(os.getSituacao() != OrdemServico.SITUACAO_PENDENTE){
						mensagemCritica = mensagemCritica.concat("Ordem de Serviço já encerrada./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

					if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_FALTA_PAGAMENTO))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoCorte = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_INFRACAO))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoCorte = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_MEDICAO_INDIVIDUAL))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoCorte = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_PEDIDO))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoCorte = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_DEFINITIVA))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoSupressao = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_PARCIAL))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoSupressao = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId()
									.equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_TOTAL))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoSupressao = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.FISCALIZACAO))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoFiscalizacao = true;
					}else if(os.getServicoTipo().getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.FISCALIZACAO))
									&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() == ConstantesSistema.INDICADOR_USO_ATIVO
													.shortValue()){
						ehSubgrupoVerificacaoIrregularidades = true;
					}else{
						mensagemCritica = mensagemCritica.concat("Ordem de Serviço com tipo de serviço não permitido./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

					ServicoTipo servicoTipo = os.getServicoTipo();

					// Indicador Rede Ramal Água
					if(servicoTipo.getIndicadorRedeRamalAgua() != ConstantesSistema.INDICADOR_USO_DESATIVO.intValue()){
						// Validando diametro
						try{
							if(diametro.equals("")){
								mensagemCritica = mensagemCritica.concat("Diâmetro não informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								DiametroRedeAgua diametroRedeAgua = (DiametroRedeAgua) repositorioUtil.pesquisar(new Integer(diametro),
												DiametroRedeAgua.class, true);
								if(diametroRedeAgua == null){
									mensagemCritica = mensagemCritica.concat("Diâmetro não Cadastrado/Inexistente./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									criticaOSLoteHelper.setDiametroRedeAgua(diametroRedeAgua);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação do diametro./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

						// Validando profundidade rede
						try{
							if(profundidadeRede.equals("")){
								mensagemCritica = mensagemCritica.concat("Profundidade não informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								criticaOSLoteHelper.setProfundidadeRede(new Double(profundidadeRede));
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação da profundidade da rede./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

						// Validando pressão
						try{
							if(!pressao.equals("")){
								criticaOSLoteHelper.setPressao(new Double(pressao));
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação da pressão./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

						// Validando material
						try{
							if(material.equals("")){
								mensagemCritica = mensagemCritica.concat("Material não informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								MaterialRedeAgua materialRedeAgua = (MaterialRedeAgua) repositorioUtil.pesquisar(new Integer(material),
												MaterialRedeAgua.class, true);
								if(materialRedeAgua != null){
									criticaOSLoteHelper.setMaterialRedeAgua(materialRedeAgua);
								}else{
									mensagemCritica = mensagemCritica.concat("Material não Cadastrado./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação do material./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

					}

				}
			}

		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Número da ordem de serviço inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do número da ordem de serviço./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando Campo Imovel
		Imovel imovel = null;
		try{

			if("".equals(idImovel)){
				mensagemCritica = mensagemCritica.concat("Matricula do Imóvel não Informada./");
				criticaOSLoteHelper.setResultadoCritica(falha);
			}else{

				criticaOSLoteHelper.setIdImovel(Integer.valueOf(idImovel));
				imovel = this.getControladorImovel().pesquisarImovel(criticaOSLoteHelper.getIdImovel());
				if(imovel == null){
					mensagemCritica = mensagemCritica.concat("Matricula de imóvel inexistente./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}
				if(!(os.getImovel().getId().equals(criticaOSLoteHelper.getIdImovel()))){
					mensagemCritica = mensagemCritica.concat("Ordem de serviço e matricula do imovel não compatíveis./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}
			}
		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Matricula de imovel inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação da matricula do imóvel./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando Data de Encerramento
		try{
			if("".equals(dataEncerramento)){
				mensagemCritica = mensagemCritica.concat("Data de Encerramento não Informada./");
				criticaOSLoteHelper.setResultadoCritica(falha);
			}else{

				// Date data = sd.parse(dataEncerramento);
				Date data = Util.converteStringParaDate(dataEncerramento);
				if(data == null){
					mensagemCritica = mensagemCritica.concat("Data de encerramento inválida./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}
				if(data.after(new Date())){
					mensagemCritica = mensagemCritica.concat("Data de encerramento maior que data atual./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}

				Calendar dataCalendar = new GregorianCalendar();
				dataCalendar.setTime(data);
				dataCalendar.set(Calendar.HOUR, 23);
				dataCalendar.set(Calendar.MINUTE, 59);
				dataCalendar.set(Calendar.SECOND, 59);
				dataCalendar.set(Calendar.MILLISECOND, 999);
				data = dataCalendar.getTime();

				if(data.before(os.getDataGeracao())){
					mensagemCritica = mensagemCritica.concat("Data de encerramento menor que data de geracao da OS./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}
				criticaOSLoteHelper.setDataEncerramento(data);
			}
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Data de encerramento inválida./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando Motivo de Encerramento
		try{
			if("".equals(motivoEncerramento)){
				mensagemCritica = mensagemCritica.concat("Motivo de Encerramento não Informado./");
				criticaOSLoteHelper.setResultadoCritica(falha);
			}else{
				Integer idMotivo = Integer.valueOf(motivoEncerramento);
				if(this.getControladorOrdemServico().pesquisarAtendimentoMotivoEncerramentoPorId(idMotivo) == null){
					mensagemCritica = mensagemCritica.concat("Motivo de encerramento inexistente./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}
				criticaOSLoteHelper.setMotivoEncerramento(idMotivo);
			}
		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Motivo de encerramento inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do motivo de encerramento./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando tipo de corte
		try{
			if(criticaOSLoteHelper.getMotivoEncerramento() != null
							&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){

				Integer corte = null;

				if(((os.getServicoTipo().getServicoTipoSubgrupo().getId()
								.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_FALTA_PAGAMENTO))
								|| os.getServicoTipo().getServicoTipoSubgrupo().getId()
												.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_PEDIDO))
								|| os.getServicoTipo().getServicoTipoSubgrupo().getId()
												.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_PEDIDO))
								|| os.getServicoTipo().getServicoTipoSubgrupo().getId()
												.equals(Integer.valueOf(ServicoTipoSubgrupo.CORTE_PEDIDO)) || os.getServicoTipo()
								.getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.FISCALIZACAO))))
								&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
												.shortValue()){
					if(tipoCorte.equals("")){
						mensagemCritica = mensagemCritica.concat("Tipo de Corte não Informado./");
						criticaOSLoteHelper.setResultadoCritica(falha);

					}else{
						CorteTipo corteTipo = null;
						corte = Integer.valueOf(tipoCorte);
						// consultar tipo de corte
						FiltroCorteTipo filtroCorteTipo = new FiltroCorteTipo();
						filtroCorteTipo.adicionarParametro(new ParametroSimples(FiltroCorteTipo.ID, corte));
						Collection<CorteTipo> colecaoCorteTipo = getControladorUtil().pesquisar(filtroCorteTipo, CorteTipo.class.getName());
						corteTipo = (CorteTipo) Util.retonarObjetoDeColecao(colecaoCorteTipo);
						if(corteTipo == null){
							mensagemCritica = mensagemCritica.concat("Tipo de Corte não cadastrado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else if((!tipoCorte.equals("")) && (!tipoSupressao.equals(""))){
							mensagemCritica = mensagemCritica.concat("Informar apenas o tipo de corte ou tipo de supressão./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}
					}
				}
				criticaOSLoteHelper.setTipoCorte(corte);
			}
		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Tipo de Corte inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do tipo de corte./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando tipo de Supressao
		try{
			Integer supressao = null;
			if(criticaOSLoteHelper.getMotivoEncerramento() != null
							&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
				if((os.getServicoTipo().getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_DEFINITIVA))
								|| os.getServicoTipo().getServicoTipoSubgrupo().getId()
												.equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_PARCIAL))
								|| os.getServicoTipo().getServicoTipoSubgrupo().getId()
												.equals(Integer.valueOf(ServicoTipoSubgrupo.SUPRESSAO_TOTAL)) || os.getServicoTipo()
								.getServicoTipoSubgrupo().getId().equals(Integer.valueOf(ServicoTipoSubgrupo.FISCALIZACAO)))
								&& os.getServicoTipo().getIndicadorFiscalizacaoInfracao() != ConstantesSistema.INDICADOR_USO_ATIVO
												.shortValue()){
					if(tipoSupressao.equals("")){
						mensagemCritica = mensagemCritica.concat("Tipo de Supressão não Informado./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}else{
						SupressaoTipo supressaoTipo = null;
						supressao = Integer.valueOf(tipoSupressao);
						// consultar tipo de supressao
						FiltroSupressaoTipo filtroSupressaoTipo = new FiltroSupressaoTipo();
						filtroSupressaoTipo.adicionarParametro(new ParametroSimples(FiltroSupressaoTipo.ID, supressao));
						Collection<SupressaoTipo> colecaoSupressaoTipo = getControladorUtil().pesquisar(filtroSupressaoTipo,
										SupressaoTipo.class.getName());
						supressaoTipo = (SupressaoTipo) Util.retonarObjetoDeColecao(colecaoSupressaoTipo);
						if(supressaoTipo == null){
							mensagemCritica = mensagemCritica.concat("Tipo de Supressao não cadastrado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else if((!tipoCorte.equals("")) && (!tipoSupressao.equals(""))){
							mensagemCritica = mensagemCritica.concat("Informar apenas o tipo de corte ou tipo de supressão./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}
					}
				}
			}

			criticaOSLoteHelper.setTipoSupressao(supressao);

		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Tipo de supressao inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do tipo de supressao./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando motivo de corte/supressão
		try{
			Integer motivo = null;
			if(criticaOSLoteHelper.getMotivoEncerramento() != null
							&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
				if(ehSubgrupoCorte || ehSubgrupoSupressao || ehSubgrupoFiscalizacao){
					if(motivoCorteSupressao.equals("")){
						mensagemCritica = mensagemCritica.concat("Motivo de Corte/Supressão não Informado./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}else{
						motivo = Integer.valueOf(motivoCorteSupressao);
						if(criticaOSLoteHelper.getTipoCorte() != null){
							MotivoCorte motivoCorte = null;
							// pesquisar Motivo do Corte
							FiltroMotivoCorte filtroMotivoCorte = new FiltroMotivoCorte();
							filtroMotivoCorte.adicionarParametro(new ParametroSimples(FiltroMotivoCorte.ID, motivo));
							Collection<MotivoCorte> colecaoMotivoCorte = getControladorUtil().pesquisar(filtroMotivoCorte,
											MotivoCorte.class.getName());
							motivoCorte = (MotivoCorte) Util.retonarObjetoDeColecao(colecaoMotivoCorte);
							if(motivoCorte == null){
								mensagemCritica = mensagemCritica.concat("Motivo de corte não cadastrado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}
						if(criticaOSLoteHelper.getTipoSupressao() != null){
							SupressaoMotivo supressaoMotivo = null;
							// pesquisar Motivo do Supressao
							FiltroSupressaoMotivo filtroSupressaoMotivo = new FiltroSupressaoMotivo();
							filtroSupressaoMotivo.adicionarParametro(new ParametroSimples(FiltroSupressaoMotivo.ID, motivo));
							Collection<SupressaoMotivo> colecaoSupressaoMotivo = getControladorUtil().pesquisar(filtroSupressaoMotivo,
											SupressaoMotivo.class.getName());
							supressaoMotivo = (SupressaoMotivo) Util.retonarObjetoDeColecao(colecaoSupressaoMotivo);
							if(supressaoMotivo == null){
								mensagemCritica = mensagemCritica.concat("Motivo de supressao não cadastrado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}
					}
				}
			}
			criticaOSLoteHelper.setMotivoCorteSupressao(motivo);

		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Motivo de supressao inválido./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do motivo de supressao./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando leitura de corte/supressão
		try{
			Integer leitura = null;
			if(criticaOSLoteHelper.getMotivoEncerramento() != null
							&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
				if(ehSubgrupoCorte || ehSubgrupoSupressao || ehSubgrupoFiscalizacao){
					if(getControladorAtendimentoPublico().verificarExistenciaHidrometroEmImovel(imovel.getId())){

						Integer ultimaLeituraImovel = getControladorMicromedicao().obterUltimaLeituraDoImovel(imovel.getId());
						if(ultimaLeituraImovel != null){
							if(leituraCorteSupressao.equals("")){
								mensagemCritica = mensagemCritica.concat("Leitura de Corte/Supressão não Informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								leitura = Integer.valueOf(leituraCorteSupressao);
								if(leitura.compareTo(ultimaLeituraImovel) < 0){
									mensagemCritica = mensagemCritica.concat("Leitura de corte/supressao menor que a anterior./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}
						}
					}
				}
			}

			criticaOSLoteHelper.setLeituraCorteSupressao(leitura);

		}catch(NumberFormatException e){
			mensagemCritica = mensagemCritica.concat("Leitura de corte/supressão inválida./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação da leitura de corte/supressao./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando selo de corte/supressão
		try{
			if(criticaOSLoteHelper.getMotivoEncerramento() != null
							&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
				if(ehSubgrupoCorte || ehSubgrupoSupressao || ehSubgrupoFiscalizacao){
					if(seloCorteSupressao.equals("")){
						mensagemCritica = mensagemCritica.concat("Selo de corte/supressão não informado./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}else{
						criticaOSLoteHelper.setSeloCorteSupressao(seloCorteSupressao);
					}
				}
			}

		}catch(Exception e){
			mensagemCritica = mensagemCritica.concat("Falha na validação do selo de corte/supressão./");
			criticaOSLoteHelper.setResultadoCritica(falha);
		}

		// Validando parecer
		if(criticaOSLoteHelper.getMotivoEncerramento() != null
						&& criticaOSLoteHelper.getMotivoEncerramento().equals(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)){
			if(ehSubgrupoCorte || ehSubgrupoSupressao || ehSubgrupoFiscalizacao){
				if(parecer.equals("")){
					mensagemCritica = mensagemCritica.concat("Parecer não informado./");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}else{
					criticaOSLoteHelper.setParecer(parecer);
				}

				ServicoTipo servicoTipo = os.getServicoTipo();

				// Indicador Rede Ramal Água
				if(servicoTipo.getIndicadorRedeRamalAgua() != ConstantesSistema.INDICADOR_USO_DESATIVO.intValue()){
					// Validando diametro
					try{
						if(diametro.equals("")){
							mensagemCritica = mensagemCritica.concat("Diâmetro não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							DiametroRedeAgua diametroRedeAgua = (DiametroRedeAgua) repositorioUtil.pesquisar(new Integer(diametro),
											DiametroRedeAgua.class, true);
							if(diametroRedeAgua == null){
								mensagemCritica = mensagemCritica.concat("Diâmetro não Cadastrado/Inexistente./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								criticaOSLoteHelper.setDiametroRedeAgua(diametroRedeAgua);
							}
						}
					}catch(Exception ex){
						mensagemCritica = mensagemCritica.concat("Falha na validação do diametro./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

					// Validando profundidade rede
					try{
						if(profundidadeRede.equals("")){
							mensagemCritica = mensagemCritica.concat("Profundidade não informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							criticaOSLoteHelper.setProfundidadeRede(new Double(profundidadeRede));
						}
					}catch(Exception ex){
						mensagemCritica = mensagemCritica.concat("Falha na validação da profundidade da rede./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

					// Validando pressão
					try{
						if(!pressao.equals("")){
							criticaOSLoteHelper.setPressao(new Double(pressao));
						}
					}catch(Exception ex){
						mensagemCritica = mensagemCritica.concat("Falha na validação da pressão./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

					// Validando material
					try{
						if(material.equals("")){
							mensagemCritica = mensagemCritica.concat("Material não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							MaterialRedeAgua materialRedeAgua = (MaterialRedeAgua) repositorioUtil.pesquisar(new Integer(material),
											MaterialRedeAgua.class, true);
							if(materialRedeAgua != null){
								criticaOSLoteHelper.setMaterialRedeAgua(materialRedeAgua);
							}else{
								mensagemCritica = mensagemCritica.concat("Material não Cadastrado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}
					}catch(Exception ex){
						mensagemCritica = mensagemCritica.concat("Falha na validação do material./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}

				}

				// Validando comprimento
				if(!comprimento.equals("")){
					try{
						criticaOSLoteHelper.setComprimento(new Double(comprimento));

						// Validando largura
						if(largura.equals("")){
							mensagemCritica = mensagemCritica.concat("Largura da Vala não Informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							try{
								criticaOSLoteHelper.setLarguraVala(new Double(largura));
							}catch(Exception ex){
								mensagemCritica = mensagemCritica.concat("Largura da Vala não Informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}

						// Validando profundidade
						if(profundidadeVala.equals("")){
							mensagemCritica = mensagemCritica.concat("Profundidade da Vala não Informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							try{
								criticaOSLoteHelper.setProfundidadeVala(new Double(profundidadeVala));
							}catch(Exception ex){
								mensagemCritica = mensagemCritica.concat("Profundidade da Vala não Informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}

						try{
							// Validando local de ocorrência
							if(localOcorrencia.equals("")){
								mensagemCritica = mensagemCritica.concat("Local de Ocorrência não Informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								LocalOcorrencia ocorrencia = (LocalOcorrencia) repositorioUtil.pesquisar(new Integer(localOcorrencia),
												LocalOcorrencia.class, true);
								if(ocorrencia != null){
									criticaOSLoteHelper.setLocalOcorrencia(ocorrencia);
								}else{
									mensagemCritica = mensagemCritica.concat("Local de Ocorrência não Cadastrado./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação no local de ocorrência./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}
						// Validando tipo de pavimento
						try{
							if(tipoPavimento.equals("")){
								mensagemCritica = mensagemCritica.concat("Tipo de pavimento não Informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								PavimentoRua pavimentoRua = (PavimentoRua) repositorioUtil.pesquisar(new Integer(tipoPavimento),
												PavimentoRua.class, true);
								if(pavimentoRua != null){
									criticaOSLoteHelper.setPavimentoRua(pavimentoRua);
								}else{
									mensagemCritica = mensagemCritica.concat("Pavimento não Cadastrado./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação do tipo de pavimento./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}
						try{
							// Validando indicador vala entulho
							if(indicadorValaEntulho.equals("")){
								mensagemCritica = mensagemCritica.concat("Indicador de Entulho não Informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								if(Integer.parseInt(indicadorValaEntulho) == 1 || Integer.parseInt(indicadorValaEntulho) == 2){
									criticaOSLoteHelper.setIndicadorValaEntulho(Integer.parseInt(indicadorValaEntulho));
								}else{
									mensagemCritica = mensagemCritica.concat("Indicador de Entulho Inválido./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}

							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação do indicador de entulho na vala./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}
						try{
							// Validando indicador vala aterrada
							if(indicadorValaAterrada.equals("")){
								mensagemCritica = mensagemCritica.concat("Indicador de Vala Aterrada não Informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								if(Integer.parseInt(indicadorValaAterrada) == 1 || Integer.parseInt(indicadorValaAterrada) == 2){
									criticaOSLoteHelper.setIndicadorValaAterrada(Integer.parseInt(indicadorValaAterrada));
								}else{
									mensagemCritica = mensagemCritica.concat("Indicador de Vala Aterrada Inválido./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação indicador vala aterrada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

					}catch(Exception ex){
						mensagemCritica = mensagemCritica.concat("Comprimento da Vala não Informado./");
						criticaOSLoteHelper.setResultadoCritica(falha);
					}
				}

				/*
				 * ####### INSTALAÇÃO/SUBSTITUIÇÃO HIDRÔMETRO
				 */

				try{
					// Validando indicador instalação/substituição do hidrômetro
					// if(indicadorInsSubHidrometro.equals("")){
					// mensagemCritica =
					// mensagemCritica.concat("Indicador de Serviço de Hidrômetro não informado./");
					// criticaOSLoteHelper.setResultadoCritica(falha);
					// } else {

					if(indicadorInsSubHidrometro.equals("I") || indicadorInsSubHidrometro.equals("S")){

						criticaOSLoteHelper.setIndicadorInsSubHidrometro(indicadorInsSubHidrometro);

						IntegracaoComercialHelper integracaoComercialHelper = new IntegracaoComercialHelper();
						integracaoComercialHelper.setOrdemServico(os);
						integracaoComercialHelper.setVeioEncerrarOS(Boolean.FALSE);
						integracaoComercialHelper.setMatriculaImovel(imovel.getId().toString());

						HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = new HidrometroInstalacaoHistorico();
						hidrometroInstalacaoHistorico.setDataImplantacaoSistema(new Date());
						hidrometroInstalacaoHistorico.setImovel(imovel);
						// Validando Hidrometro
						try{
							Hidrometro hidrometro = repositorioCobranca.getHidrometro(numeroHidrometro);
							if(hidrometro == null){
								mensagemCritica = mensagemCritica.concat("Hidrômetro Inexistente./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								if(!hidrometro.getHidrometroSituacao().getId().equals(HidrometroSituacao.DISPONIVEL)){
									mensagemCritica = mensagemCritica.concat("Hidrômetro com situação")
													.concat(" " + hidrometro.getHidrometroSituacao().getId())
													.concat(" não pode ser instalado./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									hidrometroInstalacaoHistorico.setHidrometro(hidrometro);
									integracaoComercialHelper.setHidrometroInstalacaoHistorico(hidrometroInstalacaoHistorico);
								}
							}
						}catch(Exception ex){
							mensagemCritica = mensagemCritica.concat("Falha na validação do diametro./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}

						// Validando data de instalação
						if(dataInstalacaoStr.equals("")){
							mensagemCritica = mensagemCritica.concat("Data de instalação não informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
							df.setLenient(false);
							Date dataInstalacao = null;
							try{
								dataInstalacao = df.parse(dataInstalacaoStr);
								hidrometroInstalacaoHistorico.setDataInstalacao(dataInstalacao);
								if(dataInstalacao.before(os.getDataGeracao()) || dataInstalacao.after(new Date())){
									mensagemCritica = mensagemCritica.concat("Data de instalação fora do intervalo./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}
							}catch(ParseException e){
								mensagemCritica = mensagemCritica.concat("Data de instalação em formato inválido./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}

						// Validando tipo de medição
						if(tipoMedicao.equals("")){
							mensagemCritica = mensagemCritica.concat("Tipo de mefição não informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							if(tipoMedicao.equals(MedicaoTipo.POCO)
											&& !imovel.getLigacaoEsgotoSituacao().equals(LigacaoEsgotoSituacao.LIGADO)){
								mensagemCritica = mensagemCritica
												.concat("Situação da Ligação de Esgoto do Imóvel está inválida para efetuar a instalação de hidrômetro no Poço. A situação do esgoto deve ser Ligado/");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							if(tipoMedicao.equals(MedicaoTipo.LIGACAO_AGUA)
											&& !imovel.getLigacaoAguaSituacao().equals(LigacaoEsgotoSituacao.LIGADO)){
								mensagemCritica = mensagemCritica
												.concat("Situação da Ligação de Água do Imóvel está inválida para efetuar a instalação de hidrômetro na Ligação de Água. A situação do Água deve ser Ligado ou Ligado em Análise./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							if(tipoMedicao.equals(MedicaoTipo.POCO) && (imovel.getHidrometroInstalacaoHistorico().getId() != null)){
								mensagemCritica = mensagemCritica
												.concat("Imóvel já tem hidrômetro instalado no imóvel para o tipo de medição POÇO./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							if(tipoMedicao.equals(MedicaoTipo.LIGACAO_AGUA) && (imovel.getHidrometroInstalacaoHistorico().getId() != null)){
								mensagemCritica = mensagemCritica
												.concat("Imóvel já tem hidrômetro instalado no imóvel para o tipo de medição LIGAÇÃO DE ÁGUA./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							MedicaoTipo medicaoTipo = (MedicaoTipo) repositorioUtil.pesquisar(Integer.valueOf(tipoMedicao),
											MedicaoTipo.class, false);
							hidrometroInstalacaoHistorico.setMedicaoTipo(medicaoTipo);
						}

						// Validando Local de Instalação
						if(localInstalacao.equals("")){
							mensagemCritica = mensagemCritica.concat("Local de instalação não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							HidrometroLocalInstalacao localInstalacaoHidrometro = (HidrometroLocalInstalacao) repositorioUtil.pesquisar(
											Integer.valueOf(localInstalacao), HidrometroLocalInstalacao.class, false);
							if(localInstalacaoHidrometro == null){
								mensagemCritica = mensagemCritica.concat("Local de Instalação não Cadastrado no Sistema./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							hidrometroInstalacaoHistorico.setHidrometroLocalInstalacao(localInstalacaoHidrometro);
						}

						// Validando Proteção
						if(protecao.equals("")){
							mensagemCritica = mensagemCritica.concat("Tipo de proteção não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							HidrometroProtecao hidrometroProtecao = (HidrometroProtecao) repositorioUtil.pesquisar(
											Integer.valueOf(protecao), HidrometroProtecao.class, true);
							if(hidrometroProtecao == null){
								mensagemCritica = mensagemCritica.concat("Tipo de proteção não cadastrado no sistema./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
							hidrometroInstalacaoHistorico.setHidrometroProtecao(hidrometroProtecao);
						}
						// Validando troca de proteção
						if(trocaProtecao.equals("") || (!trocaProtecao.equalsIgnoreCase("S") && !trocaProtecao.equalsIgnoreCase("N"))){
							mensagemCritica = mensagemCritica.concat("Indicador de troca de proteção inválido./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							if(trocaProtecao.equalsIgnoreCase("S")){
								hidrometroInstalacaoHistorico.setIndicadorTrocaProtecao(Short.valueOf("1"));
							}else{
								hidrometroInstalacaoHistorico.setIndicadorTrocaProtecao(Short.valueOf("2"));
							}
						}

						// Validando troca de registro
						if(trocaRegistro.equals("") || (!trocaRegistro.equalsIgnoreCase("S") && !trocaRegistro.equalsIgnoreCase("N"))){
							mensagemCritica = mensagemCritica.concat("Indicador de troca de registro inválido./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							if(trocaRegistro.equalsIgnoreCase("S")){
								hidrometroInstalacaoHistorico.setIndicadorTrocaRegistro(Short.valueOf("1"));
							}else{
								hidrometroInstalacaoHistorico.setIndicadorTrocaRegistro(Short.valueOf("2"));
							}
						}

						// Validando leitura de instalação
						if(leituraInstalacao.equals("")){
							mensagemCritica = mensagemCritica.concat("Leitura de instalação não informada./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							hidrometroInstalacaoHistorico.setNumeroLeituraInstalacao(Integer.valueOf(leituraInstalacao));
						}

						// Validando número do selo
						if(numeroSelo.equals("")){
							mensagemCritica = mensagemCritica.concat("Número do selo não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							hidrometroInstalacaoHistorico.setNumeroSelo(numeroSelo);
						}

						// Validando indicador de cavalete
						if(cavalete.equals("")){
							mensagemCritica = mensagemCritica.concat("Indicador de cavalete não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							if(!cavalete.equalsIgnoreCase("C") && !cavalete.equalsIgnoreCase("S")){
								mensagemCritica = mensagemCritica.concat("Indicador de cavalete inválido./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								if(cavalete.equalsIgnoreCase("S")){
									hidrometroInstalacaoHistorico.setIndicadorExistenciaCavalete(Short.valueOf("1"));
								}else{
									hidrometroInstalacaoHistorico.setIndicadorExistenciaCavalete(Short.valueOf("2"));
								}
							}
						}

						if(!indicadorInsSubHidrometro.equals("") && indicadorInsSubHidrometro.equalsIgnoreCase("S")){
							// validando leitura de retirada
							if(leituraRetirada.equalsIgnoreCase("")){
								mensagemCritica = mensagemCritica.concat("Leitura de retirada não informada./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								hidrometroInstalacaoHistorico.setNumeroLeituraRetirada(Integer.valueOf(leituraRetirada));
							}
							// validando situacao hidrômetro retirado
							if(situacaoHidrometroStr.equalsIgnoreCase("")){
								mensagemCritica = mensagemCritica.concat("Situação do hidrômetro retirado não informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								HidrometroSituacao situacaoHidrometro = (HidrometroSituacao) repositorioUtil.pesquisar(
												Integer.valueOf(situacaoHidrometroStr), HidrometroSituacao.class, false);
								integracaoComercialHelper.setSituacaoHidrometroSubstituido(situacaoHidrometroStr);
								if(situacaoHidrometro == null){
									mensagemCritica = mensagemCritica.concat("Situação do hidrômetro não cadastrada no sistema./");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									integracaoComercialHelper.setSituacaoHidrometroSubstituido(situacaoHidrometroStr);
								}
							}
							// validando local de armazenagem
							if(localArmazenagemStr.equalsIgnoreCase("")){
								mensagemCritica = mensagemCritica.concat("Local de Armazenagem do Hidrômetro Retirado não Informado./");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}else{
								HidrometroLocalArmazenagem localArmazenagem = (HidrometroLocalArmazenagem) repositorioUtil.pesquisar(
												Integer.valueOf(localArmazenagemStr), HidrometroLocalArmazenagem.class, false);
								integracaoComercialHelper.setLocalArmazenagemHidrometro(localArmazenagem.getId());
								if(localArmazenagem == null){
									mensagemCritica = mensagemCritica.concat("Local de Armazenagem não Cadastrado no Sistema./");
									criticaOSLoteHelper.setResultadoCritica(falha);

								}else{
									integracaoComercialHelper.setLocalArmazenagemHidrometro(Integer.valueOf(localArmazenagemStr));
								}
							}
						}
						if(tipoMedicao.equalsIgnoreCase("")){
							mensagemCritica = mensagemCritica.concat("Tipo de medição não informado./");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							HidrometroInstalacaoHistorico hidrometroSubstituido = null;
							if(tipoMedicao.equals(MedicaoTipo.POCO)){
								hidrometroSubstituido = repositorioImovel.pesquisarHidrometroPorImovel(imovel.getId());
							}else{
								hidrometroSubstituido = repositorioImovel.pesquisarHidrometroPorLigacaoAgua(imovel.getId());
							}

							integracaoComercialHelper.setHidrometroSubstituicaoHistorico(hidrometroSubstituido);
						}
						criticaOSLoteHelper.setIntegracaoComercialHelper(integracaoComercialHelper);
					}else{
						criticaOSLoteHelper.setIndicadorInsSubHidrometro("");
					}
					if(ehSubgrupoVerificacaoIrregularidades){
						criticaOSLoteHelper.setIndicadorVerificacaoIrregularidades(false);
						IntegracaoComercialHelper integracaoComercialHelper = null;
						if(criticaOSLoteHelper.getIntegracaoComercialHelper() == null){
							integracaoComercialHelper = new IntegracaoComercialHelper();
						}else{
							integracaoComercialHelper = criticaOSLoteHelper.getIntegracaoComercialHelper();
						}
						// Número da NILA
						if("".equals(numeroNila)){
							mensagemCritica = mensagemCritica.concat("Numero da NILA não Informada.;");
							criticaOSLoteHelper.setResultadoCritica(falha);
						}else{
							Integer nnDoctoInfracao = Util.obterInteger(numeroNila.split(",")[0]);
							Integer nnAnoDoctoInfracao = Util.obterInteger(numeroNila.split(",")[1]);
							OcorrenciaInfracao ocorrenciaInfracao = (OcorrenciaInfracao) getControladorOrdemServico()
											.recuperarOcorrenciaInfracao(nnDoctoInfracao, nnAnoDoctoInfracao);
							if(ocorrenciaInfracao == null){
								integracaoComercialHelper.setNnDoctoInfracao(nnDoctoInfracao);
								integracaoComercialHelper.setNnAnoDoctoInfracao(nnAnoDoctoInfracao);
								// Situação do Imóvel
								if("".equals(imovelSituacao)){
									mensagemCritica = mensagemCritica.concat("Situação do Imóvel não Informada.;");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									InfracaoImovelSituacao infracaoImovelSitucao = (InfracaoImovelSituacao) getControladorUtil().pesquisar(
													Integer.valueOf(imovelSituacao), InfracaoImovelSituacao.class, false);
									if(infracaoImovelSitucao == null){
										mensagemCritica = mensagemCritica.concat("Situação do Imóvel não Cadastrado/Inexistente;");
										criticaOSLoteHelper.setResultadoCritica(falha);
									}else{
										integracaoComercialHelper.setInfracaoImovelSituacao(infracaoImovelSitucao);
									}
								}

								// Situação da Ligação
								if("".equals(ligacaoSituacao)){
									mensagemCritica = mensagemCritica.concat("Situação da Ligação não Informada;");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									InfracaoLigacaoSituacao infracaoLigacaoSituacao = (InfracaoLigacaoSituacao) getControladorUtil()
													.pesquisar(Integer.valueOf(ligacaoSituacao), InfracaoLigacaoSituacao.class, false);
									if(infracaoLigacaoSituacao == null){
										mensagemCritica = mensagemCritica.concat("Situação da Ligação não Cadastrada/Inexistente;");
										criticaOSLoteHelper.setResultadoCritica(falha);
									}else{
										integracaoComercialHelper.setInfracaoLigacaoSituacao(infracaoLigacaoSituacao);
									}
								}
								// Fiscal
								if("".equals(fiscal)){
									mensagemCritica = mensagemCritica.concat("Fiscal não Informado;");
									criticaOSLoteHelper.setResultadoCritica(falha);
								}else{
									Funcionario funcionarioFiscal = (Funcionario) getControladorUtil().pesquisar(Integer.valueOf(fiscal),
													Funcionario.class, false);
									if(funcionarioFiscal == null){
										mensagemCritica = mensagemCritica.concat("Fiscal não Cadastrado/Inexistente;");
										criticaOSLoteHelper.setResultadoCritica(falha);
									}else{
										integracaoComercialHelper.setFiscal(funcionarioFiscal);
									}
								}

								// Tipo(s) de Irregularidade(s)
								if(!"".equals(irregularidadeTipo)){
									String[] irregularidadesTipo = irregularidadeTipo.split(",");
									Collection colecaoIrregularidadesTipo = new ArrayList();
									for(String tipoIrregularidade : irregularidadesTipo){
										InfracaoTipo infracaoTipo = (InfracaoTipo) getControladorUtil().pesquisar(
														Integer.valueOf(tipoIrregularidade.trim()), InfracaoTipo.class, false);
										if(infracaoTipo == null){
											mensagemCritica = mensagemCritica.concat("Tipo de Irregularidade não Cadastrado/Inexistente;");
											criticaOSLoteHelper.setResultadoCritica(falha);
										}else{
											colecaoIrregularidadesTipo.add(infracaoTipo);
										}
									}
									if(!colecaoIrregularidadesTipo.isEmpty()){
										integracaoComercialHelper.setIrregularidadesTipo(colecaoIrregularidadesTipo);
										criticaOSLoteHelper.setIndicadorVerificacaoIrregularidades(ehSubgrupoVerificacaoIrregularidades);
										criticaOSLoteHelper.setIntegracaoComercialHelper(integracaoComercialHelper);
									}
								}
							}else{
								mensagemCritica = mensagemCritica.concat("Número da NILA já cadastrado");
								criticaOSLoteHelper.setResultadoCritica(falha);
							}
						}

					}

				}catch(Exception ex){
					mensagemCritica = mensagemCritica.concat("Falha na validação da instalação do hidrômetro/");
					criticaOSLoteHelper.setResultadoCritica(falha);
				}

				String linhaAtualizada = numeroOS + ";" + idImovel + ";" + dataEncerramento + ";" + motivoEncerramento + ";" + tipoCorte
								+ ";" + tipoSupressao + ";" + motivoCorteSupressao + ";" + leituraCorteSupressao + ";" + seloCorteSupressao
								+ ";" + parecer + ";" + diametro + ";" + profundidadeRede + ";" + pressao + ";" + material + ";"
								+ comprimento + ";" + largura + ";" + profundidadeVala + ";" + localOcorrencia + ";" + tipoPavimento + ";"
								+ indicadorValaEntulho + ";" + indicadorValaAterrada + ";" + indicadorInsSubHidrometro + ";"
								+ numeroHidrometro + ";" + dataInstalacaoStr + ";" + tipoMedicao + ";" + localInstalacao + ";" + protecao
								+ ";" + trocaProtecao + ";" + trocaRegistro + ";" + leituraInstalacao + ";" + numeroSelo + ";" + cavalete
								+ ";" + leituraRetirada + ";" + situacaoHidrometroStr + ";" + localArmazenagemStr + ";"
								+ criticaOSLoteHelper.getResultadoCritica() + ";" + mensagemCritica;
				criticaOSLoteHelper.setLinhaArquivoLote(linhaAtualizada);
				// }

				if(criticaOSLoteHelper.getResultadoCritica().equalsIgnoreCase("ok")){
					criticaOSLoteHelper.setStatusCritica(false);
				}else{
					if(criticaOSLoteHelper.getResultadoCritica().equalsIgnoreCase("falha")){
						criticaOSLoteHelper.setStatusCritica(true);
					}
				}
			}
		}
		// }

		return criticaOSLoteHelper;

	}

	/**
	 * @author Andre Nishimura
	 * @date 23/07/2010
	 * @param comando
	 * @param idCobrancaAcaoAtividadeComando
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @param acao
	 * @param dataInicial
	 * @param dataFinal
	 * @param grupo
	 * @param setorComercial
	 * @param bairro
	 * @param categoria
	 * @return
	 * @throws ControladorException
	 */
	public Collection<RelatorioImovelPorAcaoCobrancaHelper> filtrarRelatorioImovelPorAcaoCobranca(String comando,
					String idCobrancaAcaoAtividadeComando, String idCobrancaAcaoAtividadeCronograma, String[] acao, Date dataInicial,
					Date dataFinal, String grupo, String[] setorComercial, String[] bairro, String[] categoria, String localidade)
					throws ControladorException{

		Collection<RelatorioImovelPorAcaoCobrancaHelper> colecaoHelper = null;

		try{

			Collection<CobrancaDocumento> colecaoCobrancaDocumento = repositorioCobranca.filtrarRelatorioImovelPorAcaoCobranca(comando,
							idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma, acao, dataInicial, dataFinal, grupo,
							setorComercial, bairro, categoria, localidade);

			RelatorioImovelPorAcaoCobrancaHelper helper = null;

			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){
				colecaoHelper = new ArrayList();
				for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
					OrdemServico ordemServico = null;
					Imovel imovel = cobrancaDocumento.getImovel();
					helper = new RelatorioImovelPorAcaoCobrancaHelper();

					if(cobrancaDocumento.getOrdensServico() != null && !cobrancaDocumento.getOrdensServico().isEmpty()){
						ordemServico = cobrancaDocumento.getOrdensServico().iterator().next();
						helper.setOrdemServico(String.valueOf(ordemServico.getId()));
						helper.setDataEmissao(Util.formatarData(ordemServico.getDataEmissao()));
						helper.setDataExecucao(Util.formatarData(ordemServico.getDataExecucao()));
						if(ordemServico.getAtendimentoMotivoEncerramento() != null){
							helper.setMotivoEncerramento(ordemServico.getAtendimentoMotivoEncerramento().getDescricao());

						}
						if(ordemServico.getAgente() != null){
							helper.setExecutor(ordemServico.getAgente().getDescricao());

						}
					}

					helper.setMatricula(imovel.getId().toString());
					helper.setAcao(cobrancaDocumento.getCobrancaAcao().getDescricaoCobrancaAcao());
					// buscando a Categoria com a maior quantidade de economias
					short maiorQtd = 0;
					Categoria maiorCategoria = null;
					for(ImovelSubcategoria a : (Set<ImovelSubcategoria>) imovel.getImovelSubcategorias()){
						if(a.getQuantidadeEconomias() > maiorQtd){
							maiorCategoria = a.getComp_id().getSubcategoria().getCategoria();
							maiorQtd = a.getQuantidadeEconomias();
						}
					}
					helper.setCategoria(maiorCategoria.getDescricao());
					helper.setZona(imovel.getSetorComercial().getDescricao());
					helper.setGrupo(imovel.getRota().getCobrancaGrupo().getDescricao());
					helper.setQtdDebitos(String.valueOf(consultarQtdeDocumentosItensPorCobrancaDocumento(cobrancaDocumento)));
					helper.setValorDivida(Util.formataBigDecimal(cobrancaDocumento.getValorDocumento(), 2, true));
					helper.setSituacaoAcao(cobrancaDocumento.getCobrancaAcaoSituacao().getDescricao());
					helper.setDataEmissaoAcao(Util.formatarData(cobrancaDocumento.getEmissao()));

					if(colecaoHelper.contains(helper) == false){

						colecaoHelper.add(helper);

					}
				}
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoHelper;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#obterRegistrosRelatorioReligacoesPorImovel(boolean,
	 * boolean, java.util.Date, java.util.Date, java.util.Collection, java.lang.Integer,
	 * java.util.Collection, java.util.Collection, java.util.Collection, java.util.Collection,
	 * java.lang.Integer, java.lang.Integer)
	 */
	/**
	 * @author Willian Mathias
	 * @date 28/07/2010
	 *       Filtro do relatorio de religaçoes por imovel
	 */
	public Collection<RelatorioReligacoesPorImovelHelper> obterRegistrosRelatorioReligacoesPorImovel(boolean comandoCronograma,
					boolean comandoEventual, Date dataInicio, Date dataFim, Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca,
					Collection<Integer> idsSetorComercial, Collection<Integer> idsBairro, Collection<Integer> idsCategoria,
					Collection<Integer> idsServicoTipo, Integer idComandoCronograma, Integer idComandoEventual) throws ControladorException{

		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		try{

			Collection<RelatorioReligacoesPorImovelHelper> helpers = null;
			Collection<OrdemServico> ordensServico = repositorioCobranca.consultarOrdensServico(comandoCronograma, comandoEventual,
							dataInicio, dataFim, idsAcaoCobranca, idGrupoCobranca, idsSetorComercial, idsBairro, idsCategoria,
							idsServicoTipo, idComandoCronograma, idComandoEventual);

			if(ordensServico == null || ordensServico.isEmpty()){
				throw new ControladorException("atencao.pesquisa.nenhumresultado");
			}else{
				helpers = new ArrayList<RelatorioReligacoesPorImovelHelper>();
				FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
				filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL);
				filtroCobrancaDocumentoItem
								.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL_CONTA_HISTORICO);
				FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
				for(OrdemServico os : ordensServico){

					if(os.getImovel() != null && os.getImovel().getImovelSubcategorias() != null){

						ImovelSubcategoria imovelSubCategoria = this.obterPrincipalSubcategoria(idsCategoria, os.getImovel());

						if(imovelSubCategoria != null){

							String dataEmissao = os.getDataEmissao() != null ? df.format(os.getDataEmissao()) : "";
							String dataExecucao = os.getDataExecucao() != null ? df.format(os.getDataExecucao()) : "";
							String motivoEncerramento = os.getAtendimentoMotivoEncerramento() != null ? os
											.getAtendimentoMotivoEncerramento().getDescricao() : "";
							String executor = os.getAgente() != null ? os.getAgente().getDescricao() : "";
							String matricula = os.getImovel() != null ? os.getImovel().getId().toString() : "";
							String servicoTipo = os.getServicoTipo() != null ? os.getServicoTipo().getDescricao() : "";
							String valorDivida = os.getCobrancaDocumento() != null ? Util.formataBigDecimal(os.getCobrancaDocumento()
											.getValorDocumento(), 2, true) : "";

							String categoria = (imovelSubCategoria.getComp_id().getSubcategoria().getCategoria().getDescricaoAbreviada());

							String grupo = "";
							if(os.getImovel() != null && os.getImovel().getRota() != null
											&& os.getImovel().getRota().getCobrancaGrupo() != null){
								grupo = os.getImovel().getRota().getCobrancaGrupo().getId().toString();
							}

							String zona = "";
							if(os.getImovel() != null && os.getImovel().getSetorComercial() != null){
								zona = os.getImovel().getSetorComercial().getId().toString();
							}

							String valorPago = "";
							String valorParcelado = "";
							String entradaParcelamento = "";
							String numeroParcelas = "";

							if(os.getCobrancaDocumento() != null){
								BigDecimal somaValorPago = BigDecimal.valueOf(0);
								BigDecimal somaValorParcelado = BigDecimal.valueOf(0);

								filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(
												FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID, os.getCobrancaDocumento().getId()));

								Collection<CobrancaDocumentoItem> cobrancaDocumentosItens = this.getControladorUtil().pesquisar(
												filtroCobrancaDocumentoItem, CobrancaDocumentoItem.class.getName());

								filtroCobrancaDocumentoItem.limparListaParametros();

								if(cobrancaDocumentosItens != null && !cobrancaDocumentosItens.isEmpty()){
									for(CobrancaDocumentoItem cdi : cobrancaDocumentosItens){

										ContaGeral contaGeral = cdi.getContaGeral();

										if(contaGeral != null){

											ContaHistorico contaHistorico = contaGeral.getContaHistorico();

											if(contaHistorico != null){

												if(contaHistorico.getDebitoCreditoSituacaoAtual().getId()
																.equals(DebitoCreditoSituacao.NORMAL)
																|| contaHistorico.getDebitoCreditoSituacaoAtual().getId()
																				.equals(DebitoCreditoSituacao.RETIFICADA)
																|| contaHistorico.getDebitoCreditoSituacaoAtual().getId()
																				.equals(DebitoCreditoSituacao.INCLUIDA)
																|| contaHistorico.getDebitoCreditoSituacaoAtual().getId()
																				.equals(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO)){

													somaValorPago = somaValorPago.add(contaHistorico.getValorTotal());
												}

												if(contaHistorico.getDebitoCreditoSituacaoAtual().getId()
																.equals(DebitoCreditoSituacao.PARCELADA)){
													somaValorParcelado = somaValorParcelado.add(contaHistorico.getValorTotal());
												}

											}

										}

									}
								}

								valorPago = Util.formataBigDecimal(somaValorPago, 2, true);
								valorParcelado = Util.formataBigDecimal(somaValorParcelado, 2, true);

								filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.COBRANCA_DOCUMENTO_ID, os
												.getCobrancaDocumento().getId()));

								Parcelamento parcelamento = (Parcelamento) Util.retonarObjetoDeColecao(this.getControladorUtil().pesquisar(
												filtroParcelamento, Parcelamento.class.getName()));

								filtroParcelamento.limparListaParametros();

								if(parcelamento != null){

									if(parcelamento.getValorEntrada() != null){
										entradaParcelamento = Util.formataBigDecimal(parcelamento.getValorEntrada(), 2, true);
										numeroParcelas = parcelamento.getNumeroPrestacoes().toString();
									}else{
										entradaParcelamento = "0,00";
										numeroParcelas = "0";
									}

								}

							}

							RelatorioReligacoesPorImovelHelper helper = new RelatorioReligacoesPorImovelHelper();
							helper.setOrdemServico(String.valueOf(os.getId()));
							helper.setDataEmissao(dataEmissao);
							helper.setDataExecucao(dataExecucao);
							helper.setMotivoEncerramento(motivoEncerramento);
							helper.setExecutor(executor);
							helper.setMatricula(matricula);
							helper.setServicoTipo(servicoTipo);
							helper.setCategoria(categoria);
							helper.setGrupo(grupo);
							helper.setZona(zona);
							helper.setQtdDebitos(os.getCobrancaDocumento() != null ? String.valueOf(this
											.consultarQtdeDocumentosItensPorCobrancaDocumento(os.getCobrancaDocumento())) : "");
							helper.setValorDivida(valorDivida);
							helper.setValorPago(valorPago);
							helper.setValorParcelado(valorParcelado);
							helper.setEntradaParcelamento(entradaParcelamento);
							helper.setNumeroParcelas(numeroParcelas);

							helpers.add(helper);

						}

					}

				}

			}

			return helpers;

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Retorna um ImovelSubcategoria com maior quantidade de economias de acordo com as categorias
	 * selecionadas
	 * 
	 * @author wpereira
	 * @date 03/08/2010
	 * @param idCategorias
	 * @param imovel
	 * @return ImovelSubcategoria
	 */
	private ImovelSubcategoria obterPrincipalSubcategoria(Collection<Integer> idsCategorias, Imovel imovel){

		ImovelSubcategoria subcategoriaPrincipal = null;

		for(ImovelSubcategoria sub : (Set<ImovelSubcategoria>) imovel.getImovelSubcategorias()){
			if(subcategoriaPrincipal == null || subcategoriaPrincipal.getQuantidadeEconomias() < sub.getQuantidadeEconomias()){

				subcategoriaPrincipal = sub;

			}

		}

		if(idsCategorias != null && !idsCategorias.isEmpty()){

			if(!idsCategorias.contains(subcategoriaPrincipal.getComp_id().getSubcategoria().getCategoria().getId())){
				subcategoriaPrincipal = null;
			}

		}

		return subcategoriaPrincipal;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IControladorCobranca#consultarQuantidadeRegistrosRelatorioReligacoesPorImovel
	 * (boolean, boolean, java.util.Date, java.util.Date, java.util.Collection, java.lang.Integer,
	 * java.util.Collection, java.util.Collection, java.util.Collection, java.util.Collection,
	 * java.lang.Integer, java.lang.Integer)
	 */
	public Integer consultarQuantidadeRegistrosRelatorioReligacoesPorImovel(boolean comandoCronograma, boolean comandoEventual,
					Date dataInicio, Date dataFim, Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca,
					Collection<Integer> idsSetorComercial, Collection<Integer> idsBairro, Collection<Integer> idsCategoria,
					Collection<Integer> idsServicoTipo, Integer idComandoCronograma, Integer idComandoEventual) throws ControladorException{

		try{

			return repositorioCobranca.consultarQuantidadeOrdensServico(comandoCronograma, comandoEventual, dataInicio, dataFim,
							idsAcaoCobranca, idGrupoCobranca, idsSetorComercial, idsBairro, idsCategoria, idsServicoTipo,
							idComandoCronograma, idComandoEventual);

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	public Integer filtrarRelatorioImovelPorAcaoCobrancaCount(String comando, String idComando, String idCronograma, String[] acao,
					Date dataInicial, Date dataFinal, String grupo, String[] setorComercial, String[] bairro, String[] categoria,
					String localidade)
					throws ControladorException{

		try{
			return repositorioCobranca.filtrarRelatorioImovelPorAcaoCobrancaCount(comando, idComando, idCronograma, acao, dataInicial,
							dataFinal, grupo, setorComercial, bairro, categoria, localidade);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author isilva
	 * @param tipoComando
	 * @param idCobrancaAcaoComando
	 * @param idCobrancaAcaoCronograma
	 * @param padraoPeriodo
	 * @param periodoInicio
	 * @param periodoFim
	 * @param periodoMesInicio
	 * @param periodoMesFim
	 * @param periodoAnoInicio
	 * @param periodoAnoFim
	 * @param localidade
	 * @param acaoSelecionada
	 * @param empresa
	 * @param grupos
	 * @param setores
	 * @param bairros
	 * @param grupoServicos
	 * @param subGrupoServicos
	 * @param servicos
	 * @param tiposCorte
	 * @param tiposSupressao
	 * @return
	 * @throws ControladorException
	 */
	public Object[] obterQuantidadeOrdensPeriodo(String tipoComando, String idCobrancaAcaoComando, String idCobrancaAcaoCronograma,
					String padraoPeriodo, String periodoInicio, String periodoFim, String periodoMesInicio, String periodoMesFim,
					String periodoAnoInicio, String periodoAnoFim, String localidade, Integer acaoSelecionada, Integer empresa,
					Integer[] grupos, Integer[] setores, Integer[] bairros, Integer[] grupoServicos, Integer[] subGrupoServicos,
					Integer[] servicos, Integer[] tiposCorte, Integer[] tiposSupressao) throws ControladorException{

		try{
			return repositorioCobranca.obterQuantidadeOrdensPeriodo(tipoComando, idCobrancaAcaoComando, idCobrancaAcaoCronograma,
							padraoPeriodo, periodoInicio, periodoFim, periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim,
							localidade, acaoSelecionada, empresa, grupos, setores, bairros, grupoServicos, subGrupoServicos, servicos,
							tiposCorte, tiposSupressao);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#pesquisarProdutividadeMensalExecucaoServico()
	 */
	public Object[] pesquisarProdutividadeMensalExecucaoServico(String tipoComando, String idCobrancaAcaoComando,
					String idCobrancaAcaoCronograma, String padraoPeriodo, String periodoInicio, String periodoFim,
					String periodoMesInicio, String periodoMesFim, String periodoAnoInicio, String periodoAnoFim, String localidade,
					Integer acaoSelecionada, Integer[] empresas, Integer[] grupos, Integer[] setores, Integer[] bairros,
					Integer[] grupoServicos, Integer[] subGrupoServicos, Integer[] servicos, Integer[] tiposCorte, Integer[] tiposSupressao)
					throws ControladorException{

		/**
		 * [0] - colecaoProdutividadeMensalExecucaoServicoRelatorioHelper
		 * [1] - evolucaoEnviadaTotal
		 * [2] - evolucaoExecutadaTotal
		 * [3] - acumuladaEnviadaTotal
		 * [4] - acumuladaExecutadaTotal
		 * [5] - sucessoTotal
		 * [6] - sucessoAcumuladaTotal
		 * [7] - mediaTotal
		 */
		Object[] retorno = new Object[8];

		Collection<ProdutividadeMensalExecucaoServicoRelatorioHelper> colecaoProdutividadeMensalExecucaoServicoRelatorioHelper = new ArrayList();

		// Valida os dados obrigatórios para a pesquisa
		this.validarParametros(tipoComando, idCobrancaAcaoComando, idCobrancaAcaoCronograma, empresas, padraoPeriodo, periodoInicio,
						periodoFim, periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim, servicos);

		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		Date dataInicial = null;
		Date dataFim = null;

		if("1".equalsIgnoreCase(padraoPeriodo)){
			// Período de 30 dias
			dataInicial = Util.converteStringParaDate(periodoInicio);
			dataFim = Util.converteStringParaDate(periodoFim);
		}else{
			// Período de 6 meses
			try{
				dataInicial = sdf.parse("01/" + periodoMesInicio + "/" + periodoAnoInicio);
				dataFim = sdf.parse(Util.obterUltimoDiaMes(Integer.valueOf(periodoMesFim), Integer.valueOf(periodoAnoFim)) + "/"
								+ periodoMesFim + "/" + periodoAnoFim);
			}catch(ParseException e){
				e.printStackTrace();
				throw new ControladorException("ERRO_DADOS_INVALIDOS", null, "Período Inicio e/ou Período Fim.");
			}
		}

		BigDecimal cem = new BigDecimal("100").setScale(2);

		Integer primeiroEnviadoTotal = 0;
		Integer ultimoEnviadoTotal = 0;

		Integer primeiroExecutadoTotal = 0;
		Integer ultimoExecutadoTotal = 0;

		Integer enviadaTotal = 0;
		Integer executadaTotal = 0;

		/**
		 * Obtem os dias úteis do período informado.
		 */
		Integer totalDiasUteis = this.quantidadeDiasUteis(dataInicial, dataFim);

		try{

			for(Integer idEmpresa : empresas){

				/**
				 * Consulta das [Ordem de Serviço] de um [Agente] em um
				 * [período] e mais outros Paramentros de pesquisa.
				 */
				Object[] retornoQtdOrdensPeriodo = this.repositorioCobranca.obterQuantidadeOrdensPeriodo(tipoComando,
								idCobrancaAcaoComando, idCobrancaAcaoCronograma, padraoPeriodo, periodoInicio, periodoFim,
								periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim, localidade, acaoSelecionada, idEmpresa,
								grupos, setores, bairros, grupoServicos, subGrupoServicos, servicos, tiposCorte, tiposSupressao);

				FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
				filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.ID, idEmpresa));

				Empresa agente = (Empresa) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroEmpresa,
								Empresa.class.getName()));

				if(agente == null){
					throw new ControladorException("atencao.pesquisa_inexistente", null, "Empresa " + idEmpresa);
				}

				// *********************************** Dados Agrupados de uma Empresa
				// **************************************
				ProdutividadeMensalExecucaoServicoRelatorioHelper produtividadeMensalExecucaoServicoRelatorioHelper = new ProdutividadeMensalExecucaoServicoRelatorioHelper();

				produtividadeMensalExecucaoServicoRelatorioHelper.setNomeEmpresa(agente.getDescricao());

				/**
				 * [0] - quantidadeEnviadasPorEmpresas
				 * [1] - quantidadeExecutadasPorEmpresas
				 * [2] - primeiroEnviado
				 * [3] - ultimoEnviado
				 * [4] - primeiroExecutado
				 * [5] - ultimoExecutado
				 * [6] - evolucaoEnviadasTotalPorEmpresa
				 * [7] - evolucaoExecutadasTotalPorEmpresa
				 * [8] - acumuladoEnviadaTotalPorEmpresa
				 * [9] - acumuladaExecutadaTotalPorEmpresa
				 * [10] - sucessoExecutadaPorEnviadaTotalPorEmpresa
				 * [11] - sucessoAcumuladaTotalPorEmpresa;
				 */
				Object[] quantidadeConsolidacao = new Object[12];

				/**
				 * Para cada agente, monta o helper adicionado os calculos das Os's.
				 */
				quantidadeConsolidacao = this.montarProdutividadeMensalExecucaoServicoRelatorioHelper(
								produtividadeMensalExecucaoServicoRelatorioHelper, retornoQtdOrdensPeriodo, padraoPeriodo, dataInicial,
								dataFim);

				produtividadeMensalExecucaoServicoRelatorioHelper.setAcumuladoEnviadaTotalPorEmpresa(Integer.valueOf("0"));
				produtividadeMensalExecucaoServicoRelatorioHelper.setAcumuladaExecutadaTotalPorEmpresa(Integer.valueOf("0"));

				produtividadeMensalExecucaoServicoRelatorioHelper.setEvolucaoEnviadasTotalPorEmpresa((String) quantidadeConsolidacao[6]);
				produtividadeMensalExecucaoServicoRelatorioHelper.setEvolucaoExecutadasTotalPorEmpresa((String) quantidadeConsolidacao[7]);
				produtividadeMensalExecucaoServicoRelatorioHelper.setAcumuladaEnviadaPorEmpresa(((Integer) quantidadeConsolidacao[8])
								.toString());
				produtividadeMensalExecucaoServicoRelatorioHelper.setAcumuladaExecutadaPorEmpresa(((Integer) quantidadeConsolidacao[9])
								.toString());
				produtividadeMensalExecucaoServicoRelatorioHelper
								.setSucessoExecutadaPorEnviadaTotalPorEmpresa((String) quantidadeConsolidacao[10]);
				produtividadeMensalExecucaoServicoRelatorioHelper.setSucessoAcumuladaTotalPorEmpresa((String) quantidadeConsolidacao[11]);

				if(quantidadeConsolidacao[1] != null){
					BigDecimal totalOsSituacaoExecutadasDiaBigDecimal = new BigDecimal(((Integer) quantidadeConsolidacao[1]).toString())
									.setScale(2);
					BigDecimal diasUteisTotalDecimal = new BigDecimal(totalDiasUteis.toString()).setScale(2);

					if(diasUteisTotalDecimal.compareTo(BigDecimal.ZERO) > 0){
						produtividadeMensalExecucaoServicoRelatorioHelper
										.setMediaPorDiaTotalPorEmpresa(totalOsSituacaoExecutadasDiaBigDecimal.divide(diasUteisTotalDecimal,
														MathContext.DECIMAL32));
					}else{
						// TODO Ver isso depois
						produtividadeMensalExecucaoServicoRelatorioHelper.setMediaPorDiaTotalPorEmpresa(BigDecimal.ZERO);
					}
				}else{
					produtividadeMensalExecucaoServicoRelatorioHelper.setMediaPorDiaTotalPorEmpresa(BigDecimal.ZERO);
				}

				// *********************************************************************************************************

				primeiroEnviadoTotal = primeiroEnviadoTotal + (Integer) quantidadeConsolidacao[2];
				ultimoEnviadoTotal = ultimoEnviadoTotal + (Integer) quantidadeConsolidacao[3];

				primeiroExecutadoTotal = primeiroExecutadoTotal + (Integer) quantidadeConsolidacao[4];
				ultimoExecutadoTotal = ultimoExecutadoTotal + (Integer) quantidadeConsolidacao[5];

				enviadaTotal = enviadaTotal + (Integer) quantidadeConsolidacao[0];
				executadaTotal = executadaTotal + (Integer) quantidadeConsolidacao[1];

				// *********************************************************************************************************

				colecaoProdutividadeMensalExecucaoServicoRelatorioHelper.add(produtividadeMensalExecucaoServicoRelatorioHelper);

			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		retorno[0] = colecaoProdutividadeMensalExecucaoServicoRelatorioHelper;

		// Evolução Enviadas
		String evolucaoEnviadaTotal = "";
		BigDecimal primeiroEnviadoTotalBigDecimal = new BigDecimal(primeiroEnviadoTotal.toString()).setScale(2);
		BigDecimal ultimoEnviadoTotalBigDecimal = new BigDecimal(ultimoEnviadoTotal.toString()).setScale(2);

		if((primeiroEnviadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoEnviadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroEnviadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoEnviadaTotal = "";
		}else{
			BigDecimal valorEnviadasPorEmpresa = ultimoEnviadoTotalBigDecimal.divide(primeiroEnviadoTotalBigDecimal, MathContext.DECIMAL32);

			valorEnviadasPorEmpresa = valorEnviadasPorEmpresa.multiply(cem);

			evolucaoEnviadaTotal = Util.converteBigDecimal((valorEnviadasPorEmpresa.subtract(cem)).doubleValue());
		}

		retorno[1] = evolucaoEnviadaTotal;

		// Evolução Executadas
		String evolucaoExecutadaTotal = "";
		BigDecimal primeiroExecutadoTotalBigDecimal = new BigDecimal(primeiroExecutadoTotal.toString()).setScale(2);
		BigDecimal ultimoExecutadoTotalBigDecimal = new BigDecimal(ultimoExecutadoTotal.toString()).setScale(2);

		if((primeiroExecutadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoExecutadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroExecutadoTotalBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoExecutadaTotal = "";
		}else{
			BigDecimal valorExecutadaPorEmpresa = ultimoExecutadoTotalBigDecimal.divide(primeiroExecutadoTotalBigDecimal,
							MathContext.DECIMAL32);

			valorExecutadaPorEmpresa = valorExecutadaPorEmpresa.multiply(cem);

			evolucaoExecutadaTotal = Util.converteBigDecimal((valorExecutadaPorEmpresa.subtract(cem)).doubleValue());
		}

		retorno[2] = evolucaoExecutadaTotal;

		// Acumulada Enviada
		retorno[3] = enviadaTotal;

		// Acumulada Executada
		retorno[4] = executadaTotal;

		// Sucesso Executada
		String sucessoExecutadasTotal = "";
		BigDecimal totalEnviadasBigDecimal = new BigDecimal(enviadaTotal.toString()).setScale(2);
		BigDecimal totalExecutadasBigDecimal = new BigDecimal(executadaTotal.toString()).setScale(2);

		if((totalEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalExecutadasBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (totalEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoExecutadasTotal = "";
		}else{
			BigDecimal valorSucessoExecutadas = totalExecutadasBigDecimal.divide(totalEnviadasBigDecimal, MathContext.DECIMAL32);
			valorSucessoExecutadas = valorSucessoExecutadas.multiply(cem);
			sucessoExecutadasTotal = Util.converteBigDecimal(valorSucessoExecutadas.doubleValue());
		}

		retorno[5] = sucessoExecutadasTotal;

		// Sucesso Acumulada Total
		String sucessoAcumuladaTotal = "";
		BigDecimal acumuladoEnviadoBigDecimal = new BigDecimal(enviadaTotal.toString()).setScale(2);
		BigDecimal acumuladoExecutadoBigDecimal = new BigDecimal(executadaTotal.toString()).setScale(2);

		if((acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && acumuladoExecutadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoAcumuladaTotal = "";
		}else{
			BigDecimal valorEvolucaoExecutadasAcumuladasPorEmpresa = acumuladoExecutadoBigDecimal.divide(acumuladoEnviadoBigDecimal,
							MathContext.DECIMAL32);
			valorEvolucaoExecutadasAcumuladasPorEmpresa = valorEvolucaoExecutadasAcumuladasPorEmpresa.multiply(cem);
			sucessoAcumuladaTotal = Util.converteBigDecimal(valorEvolucaoExecutadasAcumuladasPorEmpresa.doubleValue());
		}
		retorno[6] = sucessoAcumuladaTotal;

		// Dias Úteis Geral
		BigDecimal mediaTotalDiasUteis = BigDecimal.ZERO;
		BigDecimal totalOsSituacaoExecutadasBigDecimal = new BigDecimal(executadaTotal.toString()).setScale(2);
		BigDecimal diasUteisDecimal = new BigDecimal(totalDiasUteis.toString()).setScale(2);

		if(diasUteisDecimal.compareTo(BigDecimal.ZERO) > 0){
			mediaTotalDiasUteis = totalOsSituacaoExecutadasBigDecimal.divide(diasUteisDecimal, MathContext.DECIMAL32);
		}else{
			// TODO Ver isso depois
			mediaTotalDiasUteis = BigDecimal.ZERO;
		}

		retorno[7] = mediaTotalDiasUteis;

		return retorno;
	}

	/**
	 * @author isilva
	 * @param tipoComando
	 * @param idCobrancaAcaoComando
	 * @param idCobrancaAcaoCronograma
	 * @param empresas
	 * @param periodoInicio
	 * @param periodoFim
	 * @param periodoMesInicio
	 * @param periodoMesFim
	 * @param periodoAnoInicio
	 * @param periodoAnoFim
	 * @throws ControladorException
	 */
	private void validarParametros(String tipoComando, String idCobrancaAcaoComando, String idCobrancaAcaoCronograma, Integer[] empresas,
					String padraoPeriodo, String periodoInicio, String periodoFim, String periodoMesInicio, String periodoMesFim,
					String periodoAnoInicio, String periodoAnoFim, Integer[] servicos) throws ControladorException{

		// Tipo de Comando
		if(Util.isVazioOuBranco(tipoComando)){
			throw new ControladorException("atencao.informe_campo", null, "Tipo de Comando");
		}
		// if (tipoComando.equalsIgnoreCase("1")){
		// if (Util.isVazioOuBranco(idCobrancaAcaoCronograma)){
		// throw new ControladorException("atencao.informe_campo", null, "Comando Cronograma");
		// }
		// } else if (tipoComando.equalsIgnoreCase("2")){
		// if (Util.isVazioOuBranco(idCobrancaAcaoComando)){
		// throw new ControladorException("atencao.informe_campo", null, "Comando Eventual");
		// }
		// }

		// Empresas
		if(Util.isVazioOuBranco(empresas) || empresas.length == 0){
			throw new ControladorException("atencao.informe_campo", null, "Empresa");
		}

		String quantidadeMaximaEmpresas = ConstantesAplicacao.get("aplicacao.quantidade.maxima.empresas.relatorio");

		if(!Util.isVazioOuBranco(quantidadeMaximaEmpresas)){
			if(empresas.length > Integer.valueOf(quantidadeMaximaEmpresas).intValue()){
				throw new ControladorException("aplicacao.quantidade.maxima.empresas.selecionadas.deve.ser.relatorio", null,
								quantidadeMaximaEmpresas);
			}
		}

		// Padrão do Período
		if(Util.isVazioOuBranco(padraoPeriodo)){
			throw new ControladorException("atencao.informe_campo", null, "Padrão do Periodo");
		}else if(!"1".equalsIgnoreCase(padraoPeriodo) && !"2".equalsIgnoreCase(padraoPeriodo)){
			throw new ControladorException("atencao.label_inexistente", null, "Padrão do Periodo");
		}

		if("1".equalsIgnoreCase(padraoPeriodo)){
			// Período de 30 dias
			this.validarDatas(periodoInicio, periodoFim, periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim);
		}else{
			// Período de 6 meses
			this.validarMesAnoDatas(periodoMesInicio, periodoMesFim, periodoAnoInicio, periodoAnoFim);
		}

		// if (Util.isVazioOuBranco(servicos) || servicos.length == 0) {
		// throw new ControladorException("atencao.informe_campo", null, "Serviço");
		// }
	}

	/**
	 * @author isilva
	 * @param periodoInicio
	 * @param periodoFim
	 * @param periodoMesInicio
	 * @param periodoMesFim
	 * @param periodoAnoInicio
	 * @param periodoAnoFim
	 * @throws ControladorException
	 */
	private void validarDatas(String periodoInicio, String periodoFim, String periodoMesInicio, String periodoMesFim,
					String periodoAnoInicio, String periodoAnoFim) throws ControladorException{

		if(Util.isVazioOuBranco(periodoInicio) && Util.isVazioOuBranco(periodoFim)){
			throw new ControladorException("atencao.informe_campo", null, "Período");
		}

		Date dataPeriodoInicio = null;
		Date dataPeriodoFim = null;

		// Data Inicial
		if(Util.isVazioOuBranco(periodoInicio)){
			throw new ControladorException("atencao.required", null, "Período Inicial");
		}else{

			if(!Util.validaDataLinear(periodoInicio)){
				throw new ControladorException("atencao.campo.invalido", null, "Período Inicial");
			}

			try{
				dataPeriodoInicio = Util.converteStringParaDate(periodoInicio);
			}catch(Exception e){
				e.printStackTrace();
				throw new ControladorException("atencao.campo.invalido", null, "Período Inicial");
			}

		}

		// Data Final
		if(Util.isVazioOuBranco(periodoFim)){
			throw new ControladorException("atencao.required", null, "Período Final");
		}else{

			if(!Util.validaDataLinear(periodoFim)){
				throw new ControladorException("atencao.campo.invalido", null, "Período Final");
			}

			try{
				dataPeriodoFim = Util.converteStringParaDate(periodoFim);
			}catch(Exception e){
				throw new ControladorException("atencao.campo.invalido", null, "Período Final");
			}

		}

		// Se data inicio maior que data fim
		if(Util.compararData(dataPeriodoInicio, dataPeriodoFim) == 1){
			throw new ControladorException("atencao.data_inicial_maior_data_final_sem_informar_descricao");
		}

		// Quantidade de linhas que serão listdas no .xls
		String quantidadeDiasMes = ConstantesAplicacao.get("aplicacao.quantidade.dias.mes.relatorio");

		long qtdDias = Util.diferencaDias(dataPeriodoInicio, dataPeriodoFim);

		if(qtdDias > Long.valueOf(quantidadeDiasMes).longValue()){
			throw new ControladorException("atencao.data.maior_que.30_dias", null, "" + quantidadeDiasMes);
		}
	}

	/**
	 * @author isilva
	 * @param periodoMesInicio
	 * @param periodoMesFim
	 * @param periodoAnoInicio
	 * @param periodoAnoFim
	 * @throws ControladorException
	 */
	private void validarMesAnoDatas(String periodoMesInicio, String periodoMesFim, String periodoAnoInicio, String periodoAnoFim)
					throws ControladorException{

		if(Util.isVazioOuBranco(periodoMesInicio)){
			throw new ControladorException("atencao.required", null, "Período Inicio");
		}else if(Integer.valueOf(periodoMesInicio) > 12 || Integer.valueOf(periodoMesInicio) < 1){
			throw new ControladorException("atencao.campo.invalido", null, "Período Inicio");
		}

		if(Util.isVazioOuBranco(periodoAnoInicio)){
			throw new ControladorException("atencao.required", null, "Período Inicio");
		}

		if(Util.isVazioOuBranco(periodoMesFim)){
			throw new ControladorException("atencao.required", null, "Período Fim");
		}else if(Integer.valueOf(periodoMesFim) > 12 || Integer.valueOf(periodoMesFim) < 1){
			throw new ControladorException("atencao.campo.invalido", null, "Período Fim");
		}

		if(Util.isVazioOuBranco(periodoAnoFim)){
			throw new ControladorException("atencao.required", null, "Período Fim");
		}

		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		Date dataInicial = null;
		Date dataFim = null;

		try{
			dataInicial = df.parse("01/" + periodoMesInicio + "/" + periodoAnoInicio);
			dataFim = df.parse(Util.obterUltimoDiaMes(Integer.valueOf(periodoMesFim), Integer.valueOf(periodoAnoFim)) + "/" + periodoMesFim
							+ "/" + periodoAnoFim);
		}catch(ParseException e){
			e.printStackTrace();
			throw new ControladorException("ERRO_DADOS_INVALIDOS", null, "Período Inicio e/ou Período Fim.");
		}

		if(Util.compararData(dataInicial, dataFim) == 1){
			throw new ControladorException("atencao.data.intervalo.invalido");
		}

		String quantidadeMes = ConstantesAplicacao.get("aplicacao.quantidade.mes.ano.relatorio");

		if((Util.calcularDiferencaDeMes(dataInicial, dataFim) + 1) > Integer.valueOf(quantidadeMes).intValue()){
			throw new ControladorException("atencao.data.maior_que.6_meses", null, "" + quantidadeMes);
		}
	}

	/**
	 * @author isilva
	 * @param produtividadeMensalExecucaoServicoRelatorioHelper
	 * @param retornoQtdOrdensPeriodo
	 * @param padraoPeriodo
	 * @param dataInicio
	 * @param dataFim
	 * @return
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private Object[] montarProdutividadeMensalExecucaoServicoRelatorioHelper(
					ProdutividadeMensalExecucaoServicoRelatorioHelper produtividadeMensalExecucaoServicoRelatorioHelper,
					Object[] retornoQtdOrdensPeriodo, String padraoPeriodo, Date dataInicio, Date dataFim) throws ErroRepositorioException,
					ControladorException{

		/**
		 * [0] - quantidadeEnviadasPorEmpresas
		 * [1] - quantidadeExecutadasPorEmpresas
		 * [2] - primeiroEnviado
		 * [3] - ultimoEnviado
		 * [4] - primeiroExecutado
		 * [5] - ultimoExecutado
		 * [6] - evolucaoEnviadasTotalPorEmpresa
		 * [7] - evolucaoExecutadasTotalPorEmpresa
		 * [8] - acumuladoEnviadaTotalPorEmpresa
		 * [9] - acumuladaExecutadaTotalPorEmpresa
		 * [10] - sucessoExecutadaPorEnviadaTotalPorEmpresa
		 * [11] - sucessoAcumuladaTotalPorEmpresa;
		 */

		Date dataInicial = dataInicio;
		Date dataFinal = dataFim;

		int diferencaDias = Util.obterQuantidadeDiasEntreDuasDatas(dataInicial, dataFinal);

		if(padraoPeriodo.equalsIgnoreCase("1")){
			// Período Normal
			return this.preencherHelperPorDia(retornoQtdOrdensPeriodo, produtividadeMensalExecucaoServicoRelatorioHelper, dataInicial,
							dataFinal, diferencaDias);
		}else{
			// Mês/Ano
			return this.preencherHelperPorMesAno(retornoQtdOrdensPeriodo, produtividadeMensalExecucaoServicoRelatorioHelper, dataInicial,
							dataFinal, diferencaDias);
		}
	}

	/**
	 * @author isilva
	 * @param retornoQtdOrdensPeriodo
	 * @param produtividadeMensalExecucaoServicoRelatorioHelper
	 * @param dataInicio
	 * @param dataFinal
	 * @param diferencaDias
	 * @return
	 * @throws NumberFormatException
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private Object[] preencherHelperPorDia(Object[] retornoQtdOrdensPeriodo,
					ProdutividadeMensalExecucaoServicoRelatorioHelper produtividadeMensalExecucaoServicoRelatorioHelper, Date dataInicio,
					Date dataFinal, int diferencaDias) throws NumberFormatException, ErroRepositorioException, ControladorException{

		/**
		 * [0] - quantidadeEnviadasPorEmpresas
		 * [1] - quantidadeExecutadasPorEmpresas
		 * [2] - primeiroEnviado
		 * [3] - ultimoEnviado
		 * [4] - primeiroExecutado
		 * [5] - ultimoExecutado
		 * [6] - evolucaoEnviadasTotalPorEmpresa
		 * [7] - evolucaoExecutadasTotalPorEmpresa
		 * [8] - acumuladoEnviadaTotalPorEmpresa
		 * [9] - acumuladaExecutadaTotalPorEmpresa
		 * [10] - sucessoExecutadaPorEnviadaTotalPorEmpresa
		 * [11] - sucessoAcumuladaTotalPorEmpresa;
		 */
		Object[] quantidadeConsolidacao = new Object[12];

		Collection<DadosPeriodoHelper> dadosPeriodoHelpers = new ArrayList<DadosPeriodoHelper>();

		BigDecimal cem = new BigDecimal("100").setScale(2);

		Integer acumuladoEnviadas = 0;
		Integer acumuladoExecutado = 0;

		Integer enviadasAnterior = 0;
		Integer executadoAnterior = 0;

		Integer primeiroEnviado = 0;
		Integer ultimoEnviado = 0;

		Integer primeiroExecutado = 0;
		Integer ultimoExecutado = 0;

		Integer totalEnviadasMesAno = 0;
		Integer totalExecutadasMesAno = 0;

		BigDecimal acumuladoEnviadasBigDecimal = BigDecimal.ZERO;
		BigDecimal acumuladoEnviadasAnteriorDiaBigDecimal = BigDecimal.ZERO;

		BigDecimal primeiroEnviadoBigDecimal = BigDecimal.ZERO;
		BigDecimal ultimoEnviadoBigDecimal = BigDecimal.ZERO;

		for(int i = 0; i <= diferencaDias; i++){
			// Cada dia será uma linha no .xls

			DadosPeriodoHelper linhaPeriodoHelper = new DadosPeriodoHelper();

			Integer totalOsSituacaoEnviadasDia = 0;
			Integer totalOsSituacaoPendentesDia = 0;
			Integer totalOsSituacaoCanceladasDia = 0;
			Integer totalOsSituacaoExecutadasDia = 0;

			Integer diasUteis = this.quantidadeDiasUteis(dataInicio, dataFinal);

			if(retornoQtdOrdensPeriodo != null){

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[0]).get(Util.formatarData(dataInicio)) != null){
					totalOsSituacaoPendentesDia = ((Map<String, Integer>) retornoQtdOrdensPeriodo[0]).get(Util.formatarData(dataInicio));
				}

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[1]).get(Util.formatarData(dataInicio)) != null){
					totalOsSituacaoCanceladasDia = ((Map<String, Integer>) retornoQtdOrdensPeriodo[1]).get(Util.formatarData(dataInicio));
				}

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[2]).get(Util.formatarData(dataInicio)) != null){
					totalOsSituacaoExecutadasDia = ((Map<String, Integer>) retornoQtdOrdensPeriodo[2]).get(Util.formatarData(dataInicio));
				}

			}

			totalOsSituacaoEnviadasDia = totalOsSituacaoPendentesDia + totalOsSituacaoCanceladasDia + totalOsSituacaoExecutadasDia;

			String evolucaoEnviadas = "";
			String evolucaoExecutadas = "";
			String sucessoEnviadas = "";
			String evolucaoExecutadasAcumuladas = "";

			BigDecimal totalOsSituacaoEnviadasDiaBigDecimal = BigDecimal.ZERO;
			BigDecimal totalOsSituacaoExecutadasDiaBigDecimal = BigDecimal.ZERO;

			BigDecimal acumuladoExecutadasAnteriorDiaBigDecimal = BigDecimal.ZERO;
			BigDecimal acumuladoExecutadoBigDecimal = BigDecimal.ZERO;

			BigDecimal enviadasAnteriorBigDecimal = BigDecimal.ZERO;
			BigDecimal executadoAnteriorBigDecimal = BigDecimal.ZERO;

			// Não é a Primeira Linha da Planilha

			// Valores da linha anterior
			Integer acumuladoEnviadasAnterior = acumuladoEnviadas;
			Integer acumuladoExecutadasAnterior = acumuladoExecutado;

			// Valor da nova linha
			acumuladoEnviadas = acumuladoEnviadas + totalOsSituacaoEnviadasDia;
			acumuladoExecutado = acumuladoExecutado + totalOsSituacaoExecutadasDia;

			// *************** Converte para auxiliar na divisão ***************
			acumuladoEnviadasAnteriorDiaBigDecimal = new BigDecimal(acumuladoEnviadasAnterior.toString()).setScale(2);
			acumuladoEnviadasBigDecimal = new BigDecimal(acumuladoEnviadas.toString()).setScale(2);

			acumuladoExecutadasAnteriorDiaBigDecimal = new BigDecimal(acumuladoExecutadasAnterior.toString()).setScale(2);
			acumuladoExecutadoBigDecimal = new BigDecimal(acumuladoExecutado.toString()).setScale(2);
			// *****************************************************************

			enviadasAnteriorBigDecimal = new BigDecimal(enviadasAnterior).setScale(2);
			executadoAnteriorBigDecimal = new BigDecimal(executadoAnterior).setScale(2);

			totalOsSituacaoEnviadasDiaBigDecimal = new BigDecimal(totalOsSituacaoEnviadasDia).setScale(2);
			totalOsSituacaoExecutadasDiaBigDecimal = new BigDecimal(totalOsSituacaoExecutadasDia).setScale(2);

			// Evolução Enviadas
			if((enviadasAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoEnviadasDiaBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (enviadasAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoEnviadas = "";
			}else{
				BigDecimal valorEnviadas = totalOsSituacaoEnviadasDiaBigDecimal.divide(enviadasAnteriorBigDecimal, MathContext.DECIMAL32);

				valorEnviadas = valorEnviadas.multiply(cem);

				evolucaoEnviadas = Util.converteBigDecimal((valorEnviadas.subtract(cem)).doubleValue());
			}

			// Evolução Executadas
			if((executadoAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoExecutadasDiaBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (executadoAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoExecutadas = "";
			}else{
				BigDecimal valorExecutadas = totalOsSituacaoExecutadasDiaBigDecimal.divide(executadoAnteriorBigDecimal,
								MathContext.DECIMAL32);

				valorExecutadas = valorExecutadas.multiply(cem);

				evolucaoExecutadas = Util.converteBigDecimal((valorExecutadas.subtract(cem)).doubleValue());
			}

			// Sucesso Enviadas
			if((totalOsSituacaoEnviadasDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoExecutadasDiaBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (totalOsSituacaoEnviadasDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				sucessoEnviadas = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
			}else{
				BigDecimal valorSucessoEnviadas = totalOsSituacaoExecutadasDiaBigDecimal.divide(totalOsSituacaoEnviadasDiaBigDecimal,
								MathContext.DECIMAL32);

				valorSucessoEnviadas = valorSucessoEnviadas.multiply(cem);

				// sucessoEnviadas =
				// Util.converteBigDecimal((valorSucessoEnviadas.subtract(cem)).doubleValue());
				sucessoEnviadas = Util.converteBigDecimal(valorSucessoEnviadas.doubleValue());
			}

			// Sucesso Acumuladas
			if((acumuladoEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0 && acumuladoExecutadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
							|| (acumuladoEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoExecutadasAcumuladas = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
			}else{
				BigDecimal valorEvolucaoExecutadasAcumuladas = acumuladoExecutadoBigDecimal.divide(acumuladoEnviadasBigDecimal,
								MathContext.DECIMAL32);

				valorEvolucaoExecutadasAcumuladas = valorEvolucaoExecutadasAcumuladas.multiply(cem);

				// sucessoEnviadas =
				// Util.converteBigDecimal((valorSucessoEnviadas.subtract(cem)).doubleValue());
				evolucaoExecutadasAcumuladas = Util.converteBigDecimal(valorEvolucaoExecutadasAcumuladas.doubleValue());
			}

			// Último Enviado
			ultimoEnviado = totalOsSituacaoEnviadasDia;
			ultimoEnviadoBigDecimal = totalOsSituacaoEnviadasDiaBigDecimal;

			// Último Executado
			ultimoExecutado = totalOsSituacaoExecutadasDia;

			if(dadosPeriodoHelpers.size() == 0){
				// Primeira linha

				// Primeiro Enviado
				primeiroEnviado = totalOsSituacaoEnviadasDia;

				// Primeiro Executado
				primeiroExecutado = totalOsSituacaoExecutadasDia;

				// TODO depois ver se é pra continuar comentado
				primeiroEnviadoBigDecimal = totalOsSituacaoEnviadasDiaBigDecimal;

			}

			this.preencheLinhasPorDia(linhaPeriodoHelper, totalOsSituacaoPendentesDia, totalOsSituacaoCanceladasDia,
							totalOsSituacaoExecutadasDia, dataInicio, diasUteis, acumuladoEnviadas, acumuladoExecutado, evolucaoEnviadas,
							evolucaoExecutadas, sucessoEnviadas, evolucaoExecutadasAcumuladas);

			dadosPeriodoHelpers.add(linhaPeriodoHelper);

			dataInicio = Util.adicionarNumeroDiasDeUmaData(dataInicio, 1);

			// Dados da linha anterior
			enviadasAnterior = totalOsSituacaoEnviadasDia;
			executadoAnterior = totalOsSituacaoExecutadasDia;

			// *********************************
			// Total Enviadas no Mês/Ano
			totalEnviadasMesAno = totalEnviadasMesAno + totalOsSituacaoEnviadasDia;

			// Total Executadas no Mês/Ano
			totalExecutadasMesAno = totalExecutadasMesAno + totalOsSituacaoExecutadasDia;
		}

		/**
		 * [0] - quantidadeEnviadasPorEmpresas
		 * [1] - quantidadeExecutadasPorEmpresas
		 * [2] - primeiroEnviado
		 * [3] - ultimoEnviado
		 * [4] - primeiroExecutado
		 * [5] - ultimoExecutado
		 * [6] - evolucaoEnviadasTotalPorEmpresa
		 * [7] - evolucaoExecutadasTotalPorEmpresa
		 * [8] - acumuladoEnviadaTotalPorEmpresa
		 * [9] - acumuladaExecutadaTotalPorEmpresa
		 * [10] - sucessoExecutadaPorEnviadaTotalPorEmpresa
		 * [11] - sucessoAcumuladaTotalPorEmpresa;
		 */
		quantidadeConsolidacao[0] = totalEnviadasMesAno;
		quantidadeConsolidacao[1] = totalExecutadasMesAno;
		quantidadeConsolidacao[2] = primeiroEnviado;
		quantidadeConsolidacao[3] = ultimoEnviado;
		quantidadeConsolidacao[4] = primeiroExecutado;
		quantidadeConsolidacao[5] = ultimoExecutado;

		// Evolução Enviadas
		String evolucaoEnviadasPorEmpresa = "";
		BigDecimal primeiroEnviadoDiaBigDecimal = new BigDecimal(primeiroEnviado.toString()).setScale(2);
		BigDecimal ultimoEnviadoDiaBigDecimal = new BigDecimal(ultimoEnviado.toString()).setScale(2);

		if((primeiroEnviadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoEnviadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroEnviadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoEnviadasPorEmpresa = "";
		}else{
			BigDecimal valorEnviadasPorEmpresa = ultimoEnviadoDiaBigDecimal.divide(primeiroEnviadoDiaBigDecimal, MathContext.DECIMAL32);

			valorEnviadasPorEmpresa = valorEnviadasPorEmpresa.multiply(cem);

			evolucaoEnviadasPorEmpresa = Util.converteBigDecimal((valorEnviadasPorEmpresa.subtract(cem)).doubleValue());
		}

		quantidadeConsolidacao[6] = evolucaoEnviadasPorEmpresa;

		// Evolução Executadas

		String evolucaoExecutadasPorEmpresa = "";
		BigDecimal primeiroExecutadoDiaBigDecimal = new BigDecimal(primeiroExecutado.toString()).setScale(2);
		BigDecimal ultimoExecutadoDiaBigDecimal = new BigDecimal(ultimoExecutado.toString()).setScale(2);

		if((primeiroExecutadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoExecutadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroExecutadoDiaBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoExecutadasPorEmpresa = "";
		}else{
			BigDecimal valorExecutadasPorEmpresa = ultimoExecutadoDiaBigDecimal.divide(primeiroExecutadoDiaBigDecimal,
							MathContext.DECIMAL32);

			valorExecutadasPorEmpresa = valorExecutadasPorEmpresa.multiply(cem);

			evolucaoExecutadasPorEmpresa = Util.converteBigDecimal((valorExecutadasPorEmpresa.subtract(cem)).doubleValue());
		}

		quantidadeConsolidacao[7] = evolucaoExecutadasPorEmpresa;

		// *********************************************
		quantidadeConsolidacao[8] = acumuladoEnviadas;
		quantidadeConsolidacao[9] = acumuladoExecutado;

		// Sucesso Executada Por Enviada
		String sucessoExecutadasPorEmpresa = "";
		BigDecimal totalEnviadasMesAnoBigDecimal = new BigDecimal(totalEnviadasMesAno.toString()).setScale(2);
		BigDecimal totalExecutadasMesAnoBigDecimal = new BigDecimal(totalExecutadasMesAno.toString()).setScale(2);

		if((totalEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalExecutadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (totalEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoExecutadasPorEmpresa = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
		}else{
			BigDecimal valorSucessoEnviadasPorEmpresa = totalExecutadasMesAnoBigDecimal.divide(totalEnviadasMesAnoBigDecimal,
							MathContext.DECIMAL32);
			valorSucessoEnviadasPorEmpresa = valorSucessoEnviadasPorEmpresa.multiply(cem);
			sucessoExecutadasPorEmpresa = Util.converteBigDecimal(valorSucessoEnviadasPorEmpresa.doubleValue());
		}

		quantidadeConsolidacao[10] = sucessoExecutadasPorEmpresa;

		// Sucesso Acumulada Total Por Empresa
		String sucessoAcumuladaTotalPorEmpresa = "";
		BigDecimal acumuladoEnviadoBigDecimal = new BigDecimal(acumuladoEnviadas.toString()).setScale(2);
		BigDecimal acumuladoExecutadoBigDecimal = new BigDecimal(acumuladoExecutado.toString()).setScale(2);

		if((acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && acumuladoExecutadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoAcumuladaTotalPorEmpresa = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
		}else{
			BigDecimal valorEvolucaoExecutadasAcumuladasPorEmpresa = acumuladoExecutadoBigDecimal.divide(acumuladoEnviadoBigDecimal,
							MathContext.DECIMAL32);
			valorEvolucaoExecutadasAcumuladasPorEmpresa = valorEvolucaoExecutadasAcumuladasPorEmpresa.multiply(cem);
			sucessoAcumuladaTotalPorEmpresa = Util.converteBigDecimal(valorEvolucaoExecutadasAcumuladasPorEmpresa.doubleValue());
		}
		quantidadeConsolidacao[11] = sucessoAcumuladaTotalPorEmpresa;

		produtividadeMensalExecucaoServicoRelatorioHelper.setDadosPeriodoHelpers(dadosPeriodoHelpers);

		return quantidadeConsolidacao;
	}

	/**
	 * @author isilva
	 * @param linha
	 * @param totalOsSituacaoPendentesDia
	 * @param totalOsSituacaoCanceladasDia
	 * @param totalOsSituacaoExecutadasDia
	 * @param dataInicio
	 * @param diasUteis
	 * @param acumuladoEnviadas
	 * @param acumuladoExecutado
	 * @param evolucaoEnviadas
	 * @param evolucaoExecutadas
	 * @param sucessoEnviadas
	 * @param evolucaoExecutadasAcumuladas
	 */
	private void preencheLinhasPorDia(DadosPeriodoHelper linha, Integer totalOsSituacaoPendentesDia, Integer totalOsSituacaoCanceladasDia,
					Integer totalOsSituacaoExecutadasDia, Date dataInicio, Integer diasUteis, Integer acumuladoEnviadas,
					Integer acumuladoExecutado, String evolucaoEnviadas, String evolucaoExecutadas, String sucessoEnviadas,
					String evolucaoExecutadasAcumuladas){

		// Período
		linha.setPeriodo(Util.formatarData(dataInicio));

		Integer quantidadeEnviadas = totalOsSituacaoPendentesDia + totalOsSituacaoCanceladasDia + totalOsSituacaoExecutadasDia;

		linha.setQuantidadeEnviada(quantidadeEnviadas);

		linha.setQuantidadePendente(totalOsSituacaoPendentesDia);
		linha.setQuantidadeCancelada(totalOsSituacaoCanceladasDia);
		linha.setQuantidadeExecutada(totalOsSituacaoExecutadasDia);

		linha.setEvolucaoEnviada(evolucaoEnviadas);
		linha.setEvolucaoExecutada(evolucaoExecutadas);

		linha.setAcumuladoEnviada(acumuladoEnviadas);
		linha.setAcumuladaExecutada(acumuladoExecutado);

		linha.setSucessoExecutadaPorEnviada(sucessoEnviadas);
		linha.setSucessoAcumulada(evolucaoExecutadasAcumuladas);

		BigDecimal totalOsSituacaoExecutadasDiaBigDecimal = new BigDecimal(totalOsSituacaoExecutadasDia.toString()).setScale(2);
		BigDecimal diasUteisDecimal = new BigDecimal(diasUteis.toString()).setScale(2);

		if(diasUteisDecimal.compareTo(BigDecimal.ZERO) > 0){
			linha.setMediaPorDia(totalOsSituacaoExecutadasDiaBigDecimal.divide(diasUteisDecimal, MathContext.DECIMAL32));
		}else{
			// TODO Ver isso depois
			linha.setMediaPorDia(BigDecimal.ZERO);
		}
	}

	/**
	 * @author isilva
	 * @param retornoQtdOrdensPeriodo
	 * @param produtividadeMensalExecucaoServicoRelatorioHelper
	 * @param dataInicio
	 * @param dataFinal
	 * @param diferencaDias
	 * @return
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private Object[] preencherHelperPorMesAno(Object[] retornoQtdOrdensPeriodo,
					ProdutividadeMensalExecucaoServicoRelatorioHelper produtividadeMensalExecucaoServicoRelatorioHelper, Date dataInicio,
					Date dataFinal, int diferencaDias) throws ErroRepositorioException, ControladorException{

		/**
		 * [0] - quantidadeEnviadasPorEmpresas
		 * [1] - quantidadeExecutadasPorEmpresas
		 * [2] - primeiroEnviado
		 * [3] - ultimoEnviado
		 * [4] - primeiroExecutado
		 * [5] - ultimoExecutado
		 * [6] - totalAcumuladoEnviadasPorEmpresa
		 * [7] - totalAcumuladoExecucaoPorEmpresa
		 * [8] - acumuladoEnviadaTotalPorEmpresa
		 * [9] - acumuladaExecutadaTotalPorEmpresa
		 * [11] - sucessoExecutadaPorEnviadaTotalPorEmpresa
		 * [12] - sucessoAcumuladaTotalPorEmpresa;
		 */
		Object[] quantidadeConsolidacao = new Object[12];

		Map<String, Object[]> mapMesAno = new TreeMap<String, Object[]>();
		Date dataInicial = dataInicio;

		for(int i = 0; i < diferencaDias; i++){

			Object[] qtdOSPendentesMesAno = new Object[3];

			qtdOSPendentesMesAno[0] = 0;
			qtdOSPendentesMesAno[1] = 0;
			qtdOSPendentesMesAno[2] = 0;

			if(retornoQtdOrdensPeriodo != null){

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[0]).get(Util.formatarData(dataInicial)) != null){
					qtdOSPendentesMesAno[0] = ((Map<String, Integer>) retornoQtdOrdensPeriodo[0]).get(Util.formatarData(dataInicial));
				}

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[1]).get(Util.formatarData(dataInicial)) != null){
					qtdOSPendentesMesAno[1] = ((Map<String, Integer>) retornoQtdOrdensPeriodo[1]).get(Util.formatarData(dataInicial));
				}

				if(((Map<String, Integer>) retornoQtdOrdensPeriodo[2]).get(Util.formatarData(dataInicial)) != null){
					qtdOSPendentesMesAno[2] = ((Map<String, Integer>) retornoQtdOrdensPeriodo[2]).get(Util.formatarData(dataInicial));
				}

			}

			// Adiciona Mes/Ano
			addValorMap(mapMesAno, Util.formataMesAno(dataInicial), qtdOSPendentesMesAno);

			dataInicial = Util.adicionarNumeroDiasDeUmaData(dataInicial, 1);
		}

		Set<String> chaves = mapMesAno.keySet();

		Collection<DadosPeriodoHelper> dadosPeriodoHelpers = new ArrayList<DadosPeriodoHelper>();

		Long quantidadeMes = Util.calcularDiferencaDeMes(dataInicio, dataFinal) + 1;

		BigDecimal cem = new BigDecimal("100").setScale(2);

		Integer acumuladoEnviadas = 0;
		Integer acumuladoExecutado = 0;

		Integer enviadasAnterior = 0;
		Integer executadoAnterior = 0;

		Integer primeiroEnviado = 0;
		Integer ultimoEnviado = 0;

		Integer primeiroExecutado = 0;
		Integer ultimoExecutado = 0;

		Integer totalEnviadasMesAno = 0;
		Integer totalExecutadasMesAno = 0;

		BigDecimal acumuladoEnviadasAnteriorMesAnoBigDecimal = BigDecimal.ZERO;
		BigDecimal acumuladoEnviadasBigDecimal = BigDecimal.ZERO;

		BigDecimal primeiroEnviadoBigDecimal = BigDecimal.ZERO;
		BigDecimal ultimoEnviadoBigDecimal = BigDecimal.ZERO;

		for(int i = 1; i <= quantidadeMes.intValue(); i++){
			// Cada mes será uma linha no .xls

			String chaveMesAno = Util.formataMesAno(dataInicio);

			DadosPeriodoHelper linhaPeriodoHelper = new DadosPeriodoHelper();

			Integer diasUteis = this.quantidadeDiasUteis(dataInicio, dataFinal);

			Integer totalOsSituacaoEnviadasMesAno = 0;
			Integer totalOsSituacaoPendentesMesAno = 0;
			Integer totalOsSituacaoCanceladasMesAno = 0;
			Integer totalOsSituacaoExecutadasMesAno = 0;

			if(mapMesAno.get(chaveMesAno) != null){
				if((Integer) mapMesAno.get(chaveMesAno)[0] != null){
					totalOsSituacaoPendentesMesAno = (Integer) mapMesAno.get(chaveMesAno)[0];
				}

				if((Integer) mapMesAno.get(chaveMesAno)[1] != null){
					totalOsSituacaoCanceladasMesAno = (Integer) mapMesAno.get(chaveMesAno)[1];
				}

				if((Integer) mapMesAno.get(chaveMesAno)[2] != null){
					totalOsSituacaoExecutadasMesAno = (Integer) mapMesAno.get(chaveMesAno)[2];
				}
			}

			totalOsSituacaoEnviadasMesAno = totalOsSituacaoPendentesMesAno + totalOsSituacaoCanceladasMesAno
							+ totalOsSituacaoExecutadasMesAno;

			String evolucaoEnviadas = "";
			String evolucaoExecutadas = "";
			String sucessoEnviadas = "";
			String evolucaoExecutadasAcumuladas = "";

			BigDecimal totalOsSituacaoEnviadasMesAnoBigDecimal = BigDecimal.ZERO;
			BigDecimal totalOsSituacaoExecutadasMesAnoBigDecimal = BigDecimal.ZERO;

			BigDecimal acumuladoExecutadasAnteriorMesAnoBigDecimal = BigDecimal.ZERO;
			BigDecimal acumuladoExecutadoBigDecimal = BigDecimal.ZERO;

			BigDecimal enviadasAnteriorBigDecimal = BigDecimal.ZERO;
			BigDecimal executadoAnteriorBigDecimal = BigDecimal.ZERO;

			// ********************************************************************
			// Valores da linha anterior
			Integer acumuladoEnviadasAnterior = acumuladoEnviadas;
			Integer acumuladoExecutadasAnterior = acumuladoExecutado;

			// Valor da nova linha
			acumuladoEnviadas = acumuladoEnviadas + totalOsSituacaoEnviadasMesAno;
			acumuladoExecutado = acumuladoExecutado + totalOsSituacaoExecutadasMesAno;

			// *************** Converte para auxiliar na divisão ***************
			acumuladoEnviadasAnteriorMesAnoBigDecimal = new BigDecimal(acumuladoEnviadasAnterior.toString()).setScale(2);
			acumuladoEnviadasBigDecimal = new BigDecimal(acumuladoEnviadas.toString()).setScale(2);

			acumuladoExecutadasAnteriorMesAnoBigDecimal = new BigDecimal(acumuladoExecutadasAnterior.toString()).setScale(2);
			acumuladoExecutadoBigDecimal = new BigDecimal(acumuladoExecutado.toString()).setScale(2);
			// *****************************************************************

			enviadasAnteriorBigDecimal = new BigDecimal(enviadasAnterior).setScale(2);
			executadoAnteriorBigDecimal = new BigDecimal(executadoAnterior).setScale(2);

			totalOsSituacaoEnviadasMesAnoBigDecimal = new BigDecimal(totalOsSituacaoEnviadasMesAno).setScale(2);
			totalOsSituacaoExecutadasMesAnoBigDecimal = new BigDecimal(totalOsSituacaoExecutadasMesAno).setScale(2);
			// ********************************************************************

			// Evolução Enviadas
			if((enviadasAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoEnviadasMesAnoBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (enviadasAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoEnviadas = "";
			}else{
				BigDecimal valorEnviadas = totalOsSituacaoEnviadasMesAnoBigDecimal
								.divide(enviadasAnteriorBigDecimal, MathContext.DECIMAL32);

				valorEnviadas = valorEnviadas.multiply(cem);

				evolucaoEnviadas = Util.converteBigDecimal((valorEnviadas.subtract(cem)).doubleValue());
			}

			// Evolução Executadas
			if((executadoAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoExecutadasMesAnoBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (executadoAnteriorBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoExecutadas = "";
			}else{
				BigDecimal valorExecutadas = totalOsSituacaoExecutadasMesAnoBigDecimal.divide(executadoAnteriorBigDecimal,
								MathContext.DECIMAL32);

				valorExecutadas = valorExecutadas.multiply(cem);

				evolucaoExecutadas = Util.converteBigDecimal((valorExecutadas.subtract(cem)).doubleValue());
			}

			// Sucesso Enviadas
			if((totalOsSituacaoEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalOsSituacaoExecutadasMesAnoBigDecimal
							.compareTo(BigDecimal.ZERO) == 0) || (totalOsSituacaoEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				sucessoEnviadas = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
			}else{
				BigDecimal valorSucessoEnviadas = totalOsSituacaoExecutadasMesAnoBigDecimal.divide(totalOsSituacaoEnviadasMesAnoBigDecimal,
								MathContext.DECIMAL32);

				valorSucessoEnviadas = valorSucessoEnviadas.multiply(cem);

				// sucessoEnviadas =
				// Util.converteBigDecimal((valorSucessoEnviadas.subtract(cem)).doubleValue());
				sucessoEnviadas = Util.converteBigDecimal(valorSucessoEnviadas.doubleValue());
			}

			// Sucesso Acumuladas
			if((acumuladoEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0 && acumuladoExecutadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
							|| (acumuladoEnviadasBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
				evolucaoExecutadasAcumuladas = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
			}else{
				BigDecimal valorEvolucaoExecutadasAcumuladas = acumuladoExecutadoBigDecimal.divide(acumuladoEnviadasBigDecimal,
								MathContext.DECIMAL32);

				valorEvolucaoExecutadasAcumuladas = valorEvolucaoExecutadasAcumuladas.multiply(cem);

				// sucessoEnviadas =
				// Util.converteBigDecimal((valorSucessoEnviadas.subtract(cem)).doubleValue());
				evolucaoExecutadasAcumuladas = Util.converteBigDecimal(valorEvolucaoExecutadasAcumuladas.doubleValue());
			}

			// Último Enviado
			ultimoEnviado = totalOsSituacaoEnviadasMesAno;
			ultimoEnviadoBigDecimal = totalOsSituacaoEnviadasMesAnoBigDecimal;

			// Último Executado
			ultimoExecutado = totalOsSituacaoExecutadasMesAno;

			if(dadosPeriodoHelpers.size() == 0){
				// Primeira linha

				// ***************************
				// Primeiro Enviado
				primeiroEnviado = totalOsSituacaoEnviadasMesAno;

				// Primeiro Executado
				primeiroExecutado = totalOsSituacaoExecutadasMesAno;

				primeiroEnviadoBigDecimal = totalOsSituacaoEnviadasMesAnoBigDecimal;
			}

			this.preencheLinhasPorMesAno(linhaPeriodoHelper, totalOsSituacaoPendentesMesAno, totalOsSituacaoCanceladasMesAno,
							totalOsSituacaoExecutadasMesAno, chaveMesAno, diasUteis, acumuladoEnviadas, acumuladoExecutado,
							evolucaoEnviadas, evolucaoExecutadas, sucessoEnviadas, evolucaoExecutadasAcumuladas);

			dadosPeriodoHelpers.add(linhaPeriodoHelper);

			dataInicio = Util.adicionarNumeroMesDeUmaData(dataInicio, 1);

			// Dados da linha anterior
			enviadasAnterior = totalOsSituacaoEnviadasMesAno;
			executadoAnterior = totalOsSituacaoExecutadasMesAno;

			// *********************************
			// Total Enviadas no Mês/Ano
			totalEnviadasMesAno = totalEnviadasMesAno + totalOsSituacaoEnviadasMesAno;

			// Total Executadas no Mês/Ano
			totalExecutadasMesAno = totalExecutadasMesAno + totalOsSituacaoExecutadasMesAno;
		}

		/**
		 * [0] - quantidadeEnviadasPorEmpresas
		 * [1] - quantidadeExecutadasPorEmpresas
		 * [2] - primeiroEnviado
		 * [3] - ultimoEnviado
		 * [4] - primeiroExecutado
		 * [5] - ultimoExecutado
		 * [6] - evolucaoEnviadasTotalPorEmpresa
		 * [7] - evolucaoExecutadasTotalPorEmpresa
		 * [8] - acumuladoEnviadaTotalPorEmpresa
		 * [9] - acumuladaExecutadaTotalPorEmpresa
		 * [10] - sucessoExecutadaPorEnviadaTotalPorEmpresa
		 * [11] - sucessoAcumuladaTotalPorEmpresa;
		 */
		quantidadeConsolidacao[0] = totalEnviadasMesAno;
		quantidadeConsolidacao[1] = totalExecutadasMesAno;
		quantidadeConsolidacao[2] = primeiroEnviado;
		quantidadeConsolidacao[3] = ultimoEnviado;
		quantidadeConsolidacao[4] = primeiroExecutado;
		quantidadeConsolidacao[5] = ultimoExecutado;

		// Evolução Enviadas
		String evolucaoEnviadasPorEmpresa = "";
		BigDecimal primeiroEnviadoMesAnoBigDecimal = new BigDecimal(primeiroEnviado.toString()).setScale(2);
		BigDecimal ultimoEnviadoMesAnoBigDecimal = new BigDecimal(ultimoEnviado.toString()).setScale(2);

		if((primeiroEnviadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoEnviadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroEnviadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoEnviadasPorEmpresa = "";
		}else{
			BigDecimal valorEnviadasPorEmpresa = ultimoEnviadoMesAnoBigDecimal.divide(primeiroEnviadoMesAnoBigDecimal,
							MathContext.DECIMAL32);

			valorEnviadasPorEmpresa = valorEnviadasPorEmpresa.multiply(cem);

			evolucaoEnviadasPorEmpresa = Util.converteBigDecimal((valorEnviadasPorEmpresa.subtract(cem)).doubleValue());
		}

		quantidadeConsolidacao[6] = evolucaoEnviadasPorEmpresa;

		// Evolução Executadas

		String evolucaoExecutadasPorEmpresa = "";
		BigDecimal primeiroExecutadoMesAnoBigDecimal = new BigDecimal(primeiroExecutado.toString()).setScale(2);
		BigDecimal ultimoExecutadoMesAnoBigDecimal = new BigDecimal(ultimoExecutado.toString()).setScale(2);

		if((primeiroExecutadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && ultimoExecutadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (primeiroExecutadoMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			evolucaoExecutadasPorEmpresa = "";
		}else{
			BigDecimal valorExecutadasPorEmpresa = ultimoExecutadoMesAnoBigDecimal.divide(primeiroExecutadoMesAnoBigDecimal,
							MathContext.DECIMAL32);

			valorExecutadasPorEmpresa = valorExecutadasPorEmpresa.multiply(cem);

			evolucaoExecutadasPorEmpresa = Util.converteBigDecimal((valorExecutadasPorEmpresa.subtract(cem)).doubleValue());
		}

		quantidadeConsolidacao[7] = evolucaoExecutadasPorEmpresa;

		// *********************************************
		quantidadeConsolidacao[8] = acumuladoEnviadas;
		quantidadeConsolidacao[9] = acumuladoExecutado;

		// Sucesso Executada Por Enviada
		String sucessoExecutadasPorEmpresa = "";
		BigDecimal totalEnviadasMesAnoBigDecimal = new BigDecimal(totalEnviadasMesAno.toString()).setScale(2);
		BigDecimal totalExecutadasMesAnoBigDecimal = new BigDecimal(totalExecutadasMesAno.toString()).setScale(2);

		if((totalEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && totalExecutadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (totalEnviadasMesAnoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoExecutadasPorEmpresa = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
		}else{
			BigDecimal valorSucessoEnviadasPorEmpresa = totalExecutadasMesAnoBigDecimal.divide(totalEnviadasMesAnoBigDecimal,
							MathContext.DECIMAL32);
			valorSucessoEnviadasPorEmpresa = valorSucessoEnviadasPorEmpresa.multiply(cem);
			sucessoExecutadasPorEmpresa = Util.converteBigDecimal(valorSucessoEnviadasPorEmpresa.doubleValue());
		}

		quantidadeConsolidacao[10] = sucessoExecutadasPorEmpresa;

		// Sucesso Acumulada Total Por Empresa
		String sucessoAcumuladaTotalPorEmpresa = "";
		BigDecimal acumuladoEnviadoBigDecimal = new BigDecimal(acumuladoEnviadas.toString()).setScale(2);
		BigDecimal acumuladoExecutadoBigDecimal = new BigDecimal(acumuladoExecutado.toString()).setScale(2);

		if((acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0 && acumuladoExecutadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)
						|| (acumuladoEnviadoBigDecimal.compareTo(BigDecimal.ZERO) == 0)){
			sucessoAcumuladaTotalPorEmpresa = Util.converteBigDecimal(BigDecimal.ZERO.doubleValue());
		}else{
			BigDecimal valorEvolucaoExecutadasAcumuladasPorEmpresa = acumuladoExecutadoBigDecimal.divide(acumuladoEnviadoBigDecimal,
							MathContext.DECIMAL32);
			valorEvolucaoExecutadasAcumuladasPorEmpresa = valorEvolucaoExecutadasAcumuladasPorEmpresa.multiply(cem);
			sucessoAcumuladaTotalPorEmpresa = Util.converteBigDecimal(valorEvolucaoExecutadasAcumuladasPorEmpresa.doubleValue());
		}
		quantidadeConsolidacao[11] = sucessoAcumuladaTotalPorEmpresa;

		produtividadeMensalExecucaoServicoRelatorioHelper.setDadosPeriodoHelpers(dadosPeriodoHelpers);

		return quantidadeConsolidacao;

	}

	/**
	 * @author isilva
	 * @param linha
	 * @param totalOsSituacaoPendentesDia
	 * @param totalOsSituacaoCanceladasDia
	 * @param totalOsSituacaoExecutadasDia
	 * @param chaveMesAno
	 * @param diasUteis
	 * @param acumuladoEnviadas
	 * @param acumuladoExecutado
	 * @param evolucaoEnviadas
	 * @param evolucaoExecutadas
	 * @param sucessoEnviadas
	 * @param evolucaoExecutadasAcumuladas
	 */
	private void preencheLinhasPorMesAno(DadosPeriodoHelper linha, Integer totalOsSituacaoPendentesDia,
					Integer totalOsSituacaoCanceladasDia, Integer totalOsSituacaoExecutadasDia, String chaveMesAno, Integer diasUteis,
					Integer acumuladoEnviadas, Integer acumuladoExecutado, String evolucaoEnviadas, String evolucaoExecutadas,
					String sucessoEnviadas, String evolucaoExecutadasAcumuladas){

		// Período
		linha.setPeriodo(chaveMesAno);

		Integer totalEnviadas = totalOsSituacaoPendentesDia + totalOsSituacaoCanceladasDia + totalOsSituacaoExecutadasDia;

		linha.setQuantidadeEnviada(totalEnviadas);

		linha.setQuantidadePendente(totalOsSituacaoPendentesDia);
		linha.setQuantidadeCancelada(totalOsSituacaoCanceladasDia);
		linha.setQuantidadeExecutada(totalOsSituacaoExecutadasDia);

		linha.setEvolucaoEnviada(evolucaoEnviadas);
		linha.setEvolucaoExecutada(evolucaoExecutadas);

		linha.setAcumuladoEnviada(acumuladoEnviadas);
		linha.setAcumuladaExecutada(acumuladoExecutado);

		linha.setSucessoExecutadaPorEnviada(sucessoEnviadas);
		linha.setSucessoAcumulada(evolucaoExecutadasAcumuladas);

		BigDecimal totalOsSituacaoExecutadasDiaBigDecimal = new BigDecimal(totalOsSituacaoExecutadasDia.toString()).setScale(2);
		BigDecimal diasUteisDecimal = new BigDecimal(diasUteis.toString()).setScale(2);

		if(diasUteisDecimal.compareTo(BigDecimal.ZERO) > 0){
			linha.setMediaPorDia(totalOsSituacaoExecutadasDiaBigDecimal.divide(diasUteisDecimal, MathContext.DECIMAL32));
		}else{
			linha.setMediaPorDia(BigDecimal.ZERO);
		}
	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 */
	private void addValorMap(Map<String, Object[]> mapa, String chave, Object[] qtdOSPendentesMesAno){

		if(mapa.get(chave) != null){
			Object[] quantidades = mapa.get(chave);

			if(quantidades[0] == null){
				quantidades[0] = 0;
			}

			if(quantidades[1] == null){
				quantidades[1] = 0;
			}

			if(quantidades[2] == null){
				quantidades[2] = 0;
			}

			quantidades[0] = (Integer) quantidades[0] + (Integer) qtdOSPendentesMesAno[0];
			quantidades[1] = (Integer) quantidades[1] + (Integer) qtdOSPendentesMesAno[1];
			quantidades[2] = (Integer) quantidades[2] + (Integer) qtdOSPendentesMesAno[2];

			mapa.remove(chave);
			mapa.put(chave, quantidades);
		}else{
			mapa.put(chave, qtdOSPendentesMesAno);
		}
	}

	/**
	 * @author isilva
	 * @param dataInicial
	 * @param dataFim
	 * @return
	 * @throws ControladorException
	 */
	private Integer quantidadeDiasUteis(Date dataInicial, Date dataFim) throws ControladorException{

		Integer retorno = 0;

		String diasNaoUteis = ConstantesAplicacao.get("aplicacao.dias.nao.uteis.semana.relatorio");

		String[] colecaoDiasNaoUteis = diasNaoUteis.split(",");
		Collection<Integer> diasExcludentes = new ArrayList<Integer>();

		for(String dia : colecaoDiasNaoUteis){
			diasExcludentes.add(Integer.valueOf(dia).intValue());
		}

		/**
		 * Obtem os dias úteis do período informado.
		 */
		try{
			retorno = this.repositorioUtil.obterQuantidadeDiasUteis(new Municipio(Integer.valueOf("1")), dataInicial, dataFim,
							diasExcludentes);
		}catch(NumberFormatException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	// ---------------------------------------------------------
	/**
	 * Permite a obtenção dos débitos de um imóvel para
	 * método responsável por verificar imóveis sem
	 * débitos para exibir mensagem de sem débito no ano parametrizado.
	 * [UC0000] Obter Débito do Imóvel Para Mensagem
	 * 
	 * @author Yara Souza
	 * @date 10/06/2010
	 * @param indicadorDebito
	 * @param idImovel
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorDebitoACobrar
	 * @param indicadorGuiasPagamento
	 * @param indicadorContas
	 * @return
	 * @throws ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelParaMensagem(int indicadorDebito, String idImovel,
					String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito, Date anoMesInicialVencimentoDebito,
					Date anoMesFinalVencimentoDebito, int indicadorPagamento, int indicadorConta, int indicadorDebitoACobrar,
					int indicadorGuiasPagamento, Boolean indicadorContas, Integer anoRefereciaDebito) throws ControladorException{

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		String anoMesArrecadacao = sistemaParametro.getAnoMesArrecadacao() + "";

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = new ObterDebitoImovelOuClienteHelper();
		// ----------------------------------------------------------------------------
		// Início - Conta
		// ----------------------------------------------------------------------------
		Collection contas = null;
		Collection idImoveis = null;
		Collection idContas = null;

		if(indicadorContas == null || indicadorContas){
			if(indicadorDebito == 1){
				// contas do imovel
				try{
					contas = repositorioCobranca.pesquisarContasImovel(idImovel, DebitoCreditoSituacao.NORMAL,
									DebitoCreditoSituacao.RETIFICADA, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.PARCELADA,
									anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
		}

		ContaValoresHelper contaValores = null;
		Conta conta = null;
		Collection colecaoContasValores = null;
		Collection colecaoIdImoveisContas = null;
		boolean verificaParcelamentoConfirmado = false;

		if(contas != null && !contas.isEmpty()){
			boolean inserir = true;
			Iterator icolecaoContas = contas.iterator();
			colecaoContasValores = new ArrayList();
			colecaoIdImoveisContas = new HashSet();
			boolean temContaParcelada = false;
			FiltroDebitoCreditoSituacao filtroDebitoCreditoSituacao = new FiltroDebitoCreditoSituacao();
			// dados da conta
			while(icolecaoContas.hasNext()){
				inserir = true;
				conta = new Conta();
				contaValores = new ContaValoresHelper();
				temContaParcelada = false;

				Object[] contasArray = (Object[]) icolecaoContas.next();
				if(contasArray[0] != null){// 0
					// Id de contas
					conta.setId(Integer.valueOf(contasArray[0].toString()));
				}
				if(contasArray[1] != null){// 1
					// Valor Agua
					conta.setValorAgua(new BigDecimal(contasArray[1].toString()));
				}
				if(contasArray[2] != null){// 2
					// Valor Esgoto
					conta.setValorEsgoto(new BigDecimal(contasArray[2].toString()));
				}
				if(contasArray[3] != null){// 3
					// Valor Debitos
					conta.setDebitos(new BigDecimal(contasArray[3].toString()));
				}
				if(contasArray[4] != null){// 4
					// Valor Creditos
					conta.setValorCreditos(new BigDecimal(contasArray[4].toString()));
				}else{
					conta.setValorCreditos(new BigDecimal("0.00"));
				}
				if(contasArray[5] != null){// 5
					// Data Revisao
					conta.setDataRevisao((Date) contasArray[5]);
				}
				if(contasArray[6] != null){// 6
					// Referencia
					conta.setReferencia(((Integer) contasArray[6]).intValue());
				}
				if(contasArray[7] != null){// 7
					// Data Vencimento Conta
					conta.setDataVencimentoConta((Date) contasArray[7]);
				}
				if(contasArray[8] != null){// 8
					// Indicador de Cobranca de Multa
					conta.setIndicadorCobrancaMulta(((Short) contasArray[8]).shortValue());
				}
				if(contasArray[9] != null){// 9
					// Debito Credito Situação
					// DebitoCreditoSituacao debitoCreditoSituacao = new
					// DebitoCreditoSituacao();//(DebitoCreditoSituacao)
					// contasArray[9];
					// debitoCreditoSituacao.setId((Integer) contasArray[9]);
					// conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

					Integer idDebitoCreditoSituacaoAtual = (Integer) contasArray[9];

					filtroDebitoCreditoSituacao.adicionarParametro(new ParametroSimples(FiltroDebitoCreditoSituacao.ID,
									idDebitoCreditoSituacaoAtual));

					Collection<DebitoCreditoSituacao> colecaoDebitoCreditoSituacao = this.getControladorUtil().pesquisar(
									filtroDebitoCreditoSituacao, DebitoCreditoSituacao.class.getName());

					filtroDebitoCreditoSituacao.limparListaParametros();

					if(colecaoDebitoCreditoSituacao != null && !colecaoDebitoCreditoSituacao.isEmpty()){

						DebitoCreditoSituacao debitoCreditoSituacao = (DebitoCreditoSituacao) Util
										.retonarObjetoDeColecao(colecaoDebitoCreditoSituacao);
						conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

						if(debitoCreditoSituacao.getId().intValue() == DebitoCreditoSituacao.PARCELADA.intValue()){
							temContaParcelada = true;
							verificaParcelamentoConfirmado = true;
						}

					}
				}

				if(contasArray[10] != null){ // 10
					// Digito Verificador
					conta.setDigitoVerificadorConta(((Short) contasArray[10]).shortValue());
				}

				if(contasArray[11] != null){ // 11
					// Conta Motivo Revisao
					ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
					contaMotivoRevisao.setId((Integer) contasArray[11]);
					conta.setContaMotivoRevisao(contaMotivoRevisao);
				}else{
					conta.setContaMotivoRevisao(null);
				}

				if(contasArray[12] != null){ // 12
					// Última Alteração
					conta.setUltimaAlteracao((Date) contasArray[12]);
				}

				if(contasArray[13] != null){ // 13
					// Imovel
					Imovel imovel = new Imovel();
					imovel.setId((Integer) contasArray[13]);
					conta.setImovel(imovel);
				}

				if(contasArray[14] != null){ // 14
					conta.setConsumoAgua((Integer) contasArray[14]);
				}

				if(contasArray[15] != null){// 15
					// Valor impostos
					conta.setValorImposto((BigDecimal) (contasArray[15]));
				}else{
					conta.setValorImposto(new BigDecimal("0.00"));
				}

				if(contasArray[16] != null){ // 16
					conta.setConsumoEsgoto((Integer) contasArray[16]);
				}

				if(contasArray[17] != null){ // 17
					conta.setCreditoConsumo((Integer) contasArray[17]);
				}

				contaValores.setConta(conta);

				BigDecimal valorPago = null;
				Calendar menorDataPagamento = null;
				Collection dadosPagamento = null;

				try{
					dadosPagamento = repositorioCobranca.pesquisarValorTotalPagamentoMenorDataPagamento(conta.getId());
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				BigDecimal valorConta = conta.getValorTotal();

				// verifica o valor de pagamento da conta
				if(dadosPagamento != null && !dadosPagamento.isEmpty()){

					Object[] dadosPagamentoArray = (Object[]) dadosPagamento.iterator().next();
					if(dadosPagamentoArray[0] != null){
						valorPago = new BigDecimal(dadosPagamentoArray[0].toString());
					}
					if(dadosPagamentoArray[1] != null){
						menorDataPagamento = new GregorianCalendar();
						menorDataPagamento.setTime((Date) dadosPagamentoArray[1]);
					}
					if(valorPago != null){
						if((indicadorPagamento == 1) && (valorPago.compareTo(valorConta) >= 0)){
							inserir = false;
						}else{
							contaValores.setValorPago(valorPago);
						}
					}else{
						contaValores.setValorPago(new BigDecimal(0));
					}
				}// fim do dadosPagamento!=null

				Date dataPagamento = null;
				if(menorDataPagamento != null){
					dataPagamento = menorDataPagamento.getTime();
				}
				if(inserir){
					colecaoContasValores.add(contaValores);
				}

			}// fim do loop

		}// fim de if(contas != null && !contas.isEmpty())

		// Caso na lista de contas existam contas com situação atual
		// correspondente a parcelada,
		// o sitema verifica se o parcelamento está confirmado
		if(verificaParcelamentoConfirmado){
			// Caso tenha sido recebido o cliente,sistema obtém os imóveis da
			// lista das contas que possuem
			// conta com a situacao atual com o valor correspondente a parcelada
			// Caso contrário,considerar apenas o imóvel recebido
			if(indicadorDebito == 1){
				colecaoIdImoveisContas = new HashSet();
				colecaoIdImoveisContas.add(Integer.valueOf(idImovel));
			}

			colecaoContasValores = this.verificarParcelamentoConfirmado(colecaoIdImoveisContas, colecaoContasValores);
		}

		// adcionando a colecao de contas de valores
		if(colecaoContasValores != null){
			obterDebitoImovelOuClienteHelper.setColecaoContasValores(colecaoContasValores);
			obterDebitoImovelOuClienteHelper.setColecaoContasValoresImovel(colecaoContasValores);
		}
		// ----------------------------------------------------------------------------
		// Fim - Conta
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Início - Debito A Cobrar
		// ----------------------------------------------------------------------------
		Collection colecaoDebitosACobrar = null;

		// Indicador de Debito A Cobrar
		if(indicadorDebitoACobrar == 1){
			// caso imovel
			if(indicadorDebito == 1){
				try{
					colecaoDebitosACobrar = repositorioCobranca.pesquisarDebitosACobrarImovel(idImovel,
									DebitoCreditoSituacao.NORMAL.toString());
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
				// caso cliente
			}
		}

		// adicionar os debitos a cobrar
		if(colecaoDebitosACobrar != null){

			Collection colecaoDebtiosACobrarNovos = new ArrayList();

			if(colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()){
				Iterator iteratorColecaoDebtosACobrar = colecaoDebitosACobrar.iterator();
				while(iteratorColecaoDebtosACobrar.hasNext()){
					Object[] colecaoDebitosACobrarArray = (Object[]) iteratorColecaoDebtosACobrar.next();

					DebitoACobrar debitoACobrar = null;
					DebitoTipo debitoTipo = new DebitoTipo();

					if(colecaoDebitosACobrarArray[0] != null){
						debitoACobrar = (DebitoACobrar) colecaoDebitosACobrarArray[0];
					}
					if(colecaoDebitosACobrarArray[1] != null){
						debitoTipo.setDescricao((String) colecaoDebitosACobrarArray[1]);
						debitoACobrar.setDebitoTipo(debitoTipo);
					}
					if(colecaoDebitosACobrarArray[2] != null){
						debitoTipo.setId((Integer) colecaoDebitosACobrarArray[2]);
						debitoACobrar.setDebitoTipo(debitoTipo);
					}
					colecaoDebtiosACobrarNovos.add(debitoACobrar);
				}
			}

			obterDebitoImovelOuClienteHelper.setColecaoDebitoACobrar(colecaoDebtiosACobrarNovos);
		}
		// ----------------------------------------------------------------------------
		// Fim - Debito A Cobrar
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Início - Guia de Pagamento
		// ----------------------------------------------------------------------------

		Collection<Object[]> dadosGuias = new ArrayList<Object[]>();
		// Indicador de Guias de Pagamentos
		if(indicadorGuiasPagamento == 1){

			if(indicadorDebito == 1){
				try{

					if(anoRefereciaDebito != null){
						dadosGuias = repositorioCobranca.pesquisarGuiasPagamentoImovel(idImovel, DebitoCreditoSituacao.NORMAL.intValue(),
										DebitoCreditoSituacao.INCLUIDA.intValue(), DebitoCreditoSituacao.RETIFICADA.intValue(),
										DebitoCreditoSituacao.PARCELADA.intValue(), anoMesInicialVencimentoDebito,
										anoMesFinalVencimentoDebito, Util.converterStringParaInteger(anoMesInicialReferenciaDebito),
										Util.converterStringParaInteger(anoMesFinalReferenciaDebito), DebitoCreditoSituacao.PRESCRITA);
					}else{
						dadosGuias = repositorioCobranca.pesquisarGuiasPagamentoImovel(idImovel, DebitoCreditoSituacao.NORMAL.intValue(),
										DebitoCreditoSituacao.INCLUIDA.intValue(), DebitoCreditoSituacao.RETIFICADA.intValue(),
										DebitoCreditoSituacao.PARCELADA.intValue(), anoMesInicialVencimentoDebito,
										anoMesFinalVencimentoDebito, null, null, DebitoCreditoSituacao.PRESCRITA);
					}

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}

		}

		Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = null;

		// itera a coleção de dados das Guias de Pagamento
		if(dadosGuias != null && !dadosGuias.isEmpty()){

			Iterator<Object[]> dadosGuiasIterator = dadosGuias.iterator();
			colecaoGuiasPagamentoValores = new ArrayList<GuiaPagamentoValoresHelper>();
			GuiaPagamentoValoresHelper guiaPagamentoValores = null;

			while(dadosGuiasIterator.hasNext()){
				boolean inserir = true;
				Object[] guiasPagamentoArray = dadosGuiasIterator.next();

				// Validação
				if(guiasPagamentoArray[0] == null || guiasPagamentoArray[1] == null || guiasPagamentoArray[4] == null){
					throw new ControladorException("erro.sistema", null);
				}

				Integer idGuia = (Integer) guiasPagamentoArray[0];
				Short numeroPrestacao = (Short) guiasPagamentoArray[1];

				if(guiaPagamentoValores != null && guiaPagamentoValores.getIdGuiaPagamento().equals(idGuia)
								&& guiaPagamentoValores.getNumeroPrestacao().equals(numeroPrestacao)){

					inserir = false;

				}else{
					guiaPagamentoValores = new GuiaPagamentoValoresHelper();

					// 0 - Id da Guia de Pagamento
					guiaPagamentoValores.setIdGuiaPagamento(idGuia);
					// 1 - Número da Prestação
					guiaPagamentoValores.setNumeroPrestacao(numeroPrestacao);
					// 2 - Data Vencimento
					if(guiasPagamentoArray[2] != null){
						guiaPagamentoValores.setDataVencimento((Date) guiasPagamentoArray[2]);
					}
					// 3 - Data Emissão
					if(guiasPagamentoArray[3] != null){
						guiaPagamentoValores.setDataEmissao((Date) guiasPagamentoArray[3]);
					}
				}

				// 4 - Guia Pagamento Prestação
				Set<GuiaPagamentoPrestacao> setPrestacoes = null;
				if(guiaPagamentoValores.getGuiaPagamentoPrestacoes() == null){
					setPrestacoes = new HashSet<GuiaPagamentoPrestacao>();
				}else{
					setPrestacoes = guiaPagamentoValores.getGuiaPagamentoPrestacoes();
				}
				GuiaPagamentoPrestacao guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) guiasPagamentoArray[4];
				setPrestacoes.add(guiaPagamentoPrestacao);
				guiaPagamentoValores.setGuiaPagamentoPrestacoes(setPrestacoes);

				// 5 - Ano/Mes referência do faturamento
				if(guiasPagamentoArray[5] != null){
					Integer anoMesReferenciaFaturamento = (Integer) guiasPagamentoArray[5];
					guiaPagamentoValores.setAnoMesReferenciaFaturamento(anoMesReferenciaFaturamento);
				}

				if(inserir){
					colecaoGuiasPagamentoValores.add(guiaPagamentoValores);
				}

			}

			Iterator<GuiaPagamentoValoresHelper> iteratorGuiaHelper = colecaoGuiasPagamentoValores.iterator();
			while(iteratorGuiaHelper.hasNext()){

				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = iteratorGuiaHelper.next();
				BigDecimal valorPago = null;
				Collection<Object[]> dadosPagamento = null;
				Calendar menorDataPagamento = null;
				boolean remover = false;

				try{
					dadosPagamento = repositorioCobranca.pesquisarValorTotalGuiaPagamentoMenorDataGuiaPagamento(guiaPagamentoValoresHelper
									.getIdGuiaPagamento(), guiaPagamentoValoresHelper.getNumeroPrestacao().intValue());
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// verifica o valor de pagamento
				if(dadosPagamento != null && !dadosPagamento.isEmpty()){

					Object[] dadosPagamentoArray = dadosPagamento.iterator().next();

					if(dadosPagamentoArray[0] != null){
						valorPago = new BigDecimal(dadosPagamentoArray[0].toString());
					}
					if(dadosPagamentoArray[1] != null){
						menorDataPagamento = new GregorianCalendar();
						menorDataPagamento.setTime((Date) dadosPagamentoArray[1]);
					}
					if(valorPago != null){
						if((indicadorPagamento == 1) && (valorPago.compareTo(guiaPagamentoValoresHelper.getValorTotalPrestacao()) >= 0)){
							remover = true;
						}else{
							guiaPagamentoValoresHelper.setValorPago(valorPago);
						}
					}else{
						contaValores.setValorPago(new BigDecimal(0));
					}
				} // fim do dadosPagamento!=null

				Date dataPagamento = null;
				if(menorDataPagamento != null){
					dataPagamento = menorDataPagamento.getTime();
				}
				// remover
				if(remover){
					iteratorGuiaHelper.remove();
				}
			}
		}

		// adcionando a colecao de guias de pagamentos e valores
		if(colecaoGuiasPagamentoValores != null){
			obterDebitoImovelOuClienteHelper.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValores);
		}

		// ----------------------------------------------------------------------------
		// Fim - Guia de Pagamento
		// ----------------------------------------------------------------------------

		return obterDebitoImovelOuClienteHelper;

	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#pesquisarRelatorioAcompanhamentoAcao(java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.String)
	 */
	public Object[] pesquisarRelatorioAcompanhamentoAcao(String tipoComando, String acaoSelecionada, String empresa, String periodoInicio,
					String periodoFim, String idCobrancaAcaoAtividadeComando, String idCobrancaAcaoAtividadeCronograma)
					throws ControladorException{

		Integer idEmpresa = Integer.valueOf(empresa);

		ArrayList<CobrancaAcaoTituloHelper> tituloAcoes = new ArrayList<CobrancaAcaoTituloHelper>();
		ArrayList<FaixaHelper> faixas = new ArrayList<FaixaHelper>();
		ArrayList<FaixaHelper> parcelamentos = new ArrayList<FaixaHelper>();
		ArrayList<FaixaHelper> subTotalFaixas = new ArrayList<FaixaHelper>();
		ArrayList<FaixaHelper> totalGeral = new ArrayList<FaixaHelper>();

		// Recumpera as Faixa de Dias de Vencimento para a Empresa
		Collection<CobrancaContratoRemuneracaoPorSucesso> cobrancaContratoRemuneracaoVencimentos = null;

		ArrayList<String> faixasCobrancaContratoRemuneracaoVencimento = new ArrayList<String>();

		// Identificadores das Cobranças
		Set<Integer> idsCobrancaAcao = new TreeSet<Integer>();

		// Cobranças
		Map<Integer, CobrancaAcaoSomatorioHelper> mapCobrancaAcaoSomatorioHelper = new TreeMap<Integer, CobrancaAcaoSomatorioHelper>();

		// Faixas
		Map<Integer, Collection<CobrancaAcaoSomatorioHelper>> colecoesFaixas = new TreeMap<Integer, Collection<CobrancaAcaoSomatorioHelper>>();

		Map<Integer, FaixaHelper> dadosFaixas = new TreeMap<Integer, FaixaHelper>();

		ArrayList<BigDecimal> percentuaisParcelas = new ArrayList<BigDecimal>();

		/**
		 * [0] - tituloAcoes
		 * [1] - faixas
		 * [2] - parcelamentos
		 * [3] - subTotalFaixas
		 * [4] - totalGeral
		 */
		Object[] quantidadeConsolidacao = new Object[5];

		try{

			cobrancaContratoRemuneracaoVencimentos = this.repositorioCobranca
							.pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(idEmpresa);

			if(cobrancaContratoRemuneracaoVencimentos != null && !cobrancaContratoRemuneracaoVencimentos.isEmpty()){

				String ultimaFaixa = "";

				for(CobrancaContratoRemuneracaoPorSucesso cobrancaContratoRemuneracaoVencimento : cobrancaContratoRemuneracaoVencimentos){
					ultimaFaixa = cobrancaContratoRemuneracaoVencimento.getDiasVencidos().toString();
					faixasCobrancaContratoRemuneracaoVencimento.add(ultimaFaixa);
				}

				faixasCobrancaContratoRemuneracaoVencimento.add(">" + ultimaFaixa);

				Set<Integer> faixasDiasVencidosCollection = new TreeSet<Integer>();
				Integer diasVencidosAnterior = null;
				int quantidadeFaixas = 0;

				for(CobrancaContratoRemuneracaoPorSucesso cobrancaContratoRemuneracaoVencimento : cobrancaContratoRemuneracaoVencimentos){

					Integer diasVencidos = cobrancaContratoRemuneracaoVencimento.getDiasVencidos();
					BigDecimal percentualRemuneracao = cobrancaContratoRemuneracaoVencimento.getPercentualRemuneracao();

					BigDecimal valorFixo = cobrancaContratoRemuneracaoVencimento.getValorFixo();
					BigDecimal percentualParcelaPaga = cobrancaContratoRemuneracaoVencimento.getPercentualParcelaPaga();

					FaixaHelper faixaHelper = new FaixaHelper();

					faixaHelper.setDiasAte(diasVencidos);

					if(percentualRemuneracao != null){
						BigDecimal cem = new BigDecimal("100").setScale(2);
						percentualRemuneracao = percentualRemuneracao.divide(cem, MathContext.DECIMAL32);
						faixaHelper.setPorcentagemRemuneracao(percentualRemuneracao);
					}

					if(valorFixo != null){
						faixaHelper.setValorRemuneracao(valorFixo);
					}

					if(percentualParcelaPaga != null){
						faixaHelper.addPorcentagemParcelamentos(percentualParcelaPaga);
						percentuaisParcelas.add(percentualParcelaPaga);
					}

					faixasDiasVencidosCollection.add(diasVencidos);

					/**
					 * [0] - idCobrancaAcao
					 * [1] - descricaoCobrancaAcao
					 * [2] - quantidadeContas
					 * [3] - quantidadeParcelas
					 * [4] - valorContas
					 * [5] - valorParcelas
					 */
					Collection<Object[]> cobrAcoes = this.repositorioCobranca.pesquisarCobrancaAcaoEmFaixa(idEmpresa, tipoComando,
									acaoSelecionada, empresa, periodoInicio, periodoFim, idCobrancaAcaoAtividadeComando,
									idCobrancaAcaoAtividadeCronograma, diasVencidosAnterior, diasVencidos);

					ArrayList<CobrancaAcaoSomatorioHelper> colecaoCobrancaAcaoSomatorioHelpersPorFaixas = null;

					for(Object[] cobrancaAcao : cobrAcoes){

						CobrancaAcaoSomatorioHelper cobrancaAcaoSomatorioHelper = new CobrancaAcaoSomatorioHelper();

						if(percentualRemuneracao != null){
							cobrancaAcaoSomatorioHelper.setPorcentagemFaixa(percentualRemuneracao);
						}

						if(valorFixo != null){
							cobrancaAcaoSomatorioHelper.setValorFixoRemuneracao(valorFixo);
						}

						if(percentualParcelaPaga != null){
							cobrancaAcaoSomatorioHelper.addPorcentagemParcelamentos(percentualParcelaPaga);
						}

						// ********* Todos os Tipos de Débitos

						// IdCobrancaAcao
						if(cobrancaAcao[0] != null){
							cobrancaAcaoSomatorioHelper.setIdCobrancaAcao((Integer) cobrancaAcao[0]);
							idsCobrancaAcao.add((Integer) cobrancaAcao[0]);
						}

						// Descrição da Ação
						if(cobrancaAcao[1] != null){
							cobrancaAcaoSomatorioHelper.setDescricaoAcao((String) cobrancaAcao[1]);
						}else{
							cobrancaAcaoSomatorioHelper.setDescricaoAcao("");
						}

						// Quantidade Debito da Ação
						if(cobrancaAcao[2] != null){
							cobrancaAcaoSomatorioHelper.setQuantidadeDebitos((Integer) cobrancaAcao[2]);
						}else{
							cobrancaAcaoSomatorioHelper.setQuantidadeDebitos(0);
						}

						// Valor da Ação
						if(cobrancaAcao[4] != null){
							cobrancaAcaoSomatorioHelper.setValor((BigDecimal) cobrancaAcao[4]);
						}else{
							cobrancaAcaoSomatorioHelper.setValor(BigDecimal.ZERO);
						}

						// Calcula Comissão por Faixa
						BigDecimal valorBigDecimal = new BigDecimal(cobrancaAcaoSomatorioHelper.getValor().toString()).setScale(2);

						BigDecimal multiplicarValor = BigDecimal.ZERO;

						if(cobrancaAcaoSomatorioHelper.getPorcentagemFaixa() != null){
							multiplicarValor = cobrancaAcaoSomatorioHelper.getPorcentagemFaixa().multiply(valorBigDecimal);
						}else if(cobrancaAcaoSomatorioHelper.getValorFixoRemuneracao() != null){
							BigDecimal quantidadeDebitos = new BigDecimal(cobrancaAcaoSomatorioHelper.getQuantidadeDebitos()).setScale(2);
							multiplicarValor = cobrancaAcaoSomatorioHelper.getValorFixoRemuneracao().multiply(quantidadeDebitos);
						}

						cobrancaAcaoSomatorioHelper.setComissao(multiplicarValor);

						// ******************************************************
						// ****************** Parcelamentos *********************
						if(cobrancaAcao[3] != null){
							cobrancaAcaoSomatorioHelper.setParcelamentoQuantidadeDebitos((Integer) cobrancaAcao[3]);
						}else{
							cobrancaAcaoSomatorioHelper.setParcelamentoQuantidadeDebitos(0);
						}

						if(cobrancaAcao[5] != null){
							cobrancaAcaoSomatorioHelper.setParcelamentoValor((BigDecimal) cobrancaAcao[5]);
						}else{
							cobrancaAcaoSomatorioHelper.setParcelamentoValor(BigDecimal.ZERO);
						}

						// *********************** Calcula Comissão por Parcelamento
						// BigDecimal valorParcelamentoBigDecimal = new
						// BigDecimal(cobrancaAcaoSomatorioHelper.getValor().toString()).setScale(2);

						// BigDecimal multiplicarParcelamentoValor = BigDecimal.ZERO;

						// if (percentualParcelaPaga != null){
						// multiplicarParcelamentoValor = percentualParcelaPaga;
						// } else if (valorFixo != null) {
						// multiplicarParcelamentoValor = valorFixo;
						// }

						// BigDecimal parcelamentoComissaoAntigo =
						// cobrancaAcaoSomatorioHelper.getParcelamentoComissao();
						// BigDecimal novoValorComissaoParcelamento =
						// valorParcelamentoBigDecimal.multiply(multiplicarParcelamentoValor);

						// cobrancaAcaoSomatorioHelper.setParcelamentoComissao(parcelamentoComissaoAntigo.add(novoValorComissaoParcelamento));

						if(colecaoCobrancaAcaoSomatorioHelpersPorFaixas == null || colecaoCobrancaAcaoSomatorioHelpersPorFaixas.isEmpty()){
							colecaoCobrancaAcaoSomatorioHelpersPorFaixas = new ArrayList<CobrancaAcaoSomatorioHelper>();
						}

						this.addCobrancaAcaoSomatorioHelperMap(mapCobrancaAcaoSomatorioHelper,
										cobrancaAcaoSomatorioHelper.getIdCobrancaAcao(), cobrancaAcaoSomatorioHelper);

						colecaoCobrancaAcaoSomatorioHelpersPorFaixas.add(cobrancaAcaoSomatorioHelper);
					}

					this.addValorMapFaixas(colecoesFaixas, diasVencidos, colecaoCobrancaAcaoSomatorioHelpersPorFaixas);

					diasVencidosAnterior = diasVencidos;
					quantidadeFaixas++;

					if(cobrancaContratoRemuneracaoVencimentos.size() == quantidadeFaixas){
						diasVencidos = null;
					}

					this.addFaixaHelperMap(dadosFaixas, faixaHelper.getDiasAte(), faixaHelper);
				}

				// ****************** Títulos Cobranças ******************
				Set setMapCobrancas = mapCobrancaAcaoSomatorioHelper.keySet();
				Iterator iteratorMap = setMapCobrancas.iterator();

				while(iteratorMap.hasNext()){
					Integer key = (Integer) iteratorMap.next();

					CobrancaAcaoSomatorioHelper cobrancaAcaoSomatorio = mapCobrancaAcaoSomatorioHelper.get(key);

					CobrancaAcaoTituloHelper cobrancaAcaoTituloHelper = new CobrancaAcaoTituloHelper();
					cobrancaAcaoTituloHelper.setIdCobrancaAcao(cobrancaAcaoSomatorio.getIdCobrancaAcao());
					cobrancaAcaoTituloHelper.setDescricao(cobrancaAcaoSomatorio.getDescricaoAcao());

					tituloAcoes.add(cobrancaAcaoTituloHelper);
				}

				// ************************************************************
				Set set = colecoesFaixas.keySet();
				Iterator iterMap = set.iterator();
				int i = 1;

				FaixaHelper faixaHelperParcelamento = new FaixaHelper();

				while(iterMap.hasNext()){
					// Cada Faixas

					Integer key = (Integer) iterMap.next();
					Integer diasAte = key;

					// ********************* Total por Faixas *********************
					Integer totalQuantidadeDebitos = 0;
					BigDecimal totalValor = BigDecimal.ZERO;
					BigDecimal totalComissao = BigDecimal.ZERO;
					// ************************************************************

					// ***********************************************************
					Collection<CobrancaAcaoSomatorioHelper> colecaoCobrancaAcaoSomatorioHelpers = colecoesFaixas.get(key);
					FaixaHelper faixaHelper = dadosFaixas.get(key);

					// ***********************************************************

					boolean isUltimaFaixa = false;

					if(i == colecoesFaixas.size()){
						isUltimaFaixa = true;
					}

					StringBuffer faixa = new StringBuffer();
					faixa.append("Débitos venc ");

					// if (isUltimaFaixa){
					// faixa.append(">");
					// }

					faixa.append(diasAte);

					faixaHelper.setFaixaDebito(faixa.toString());

					ArrayList<AcaoHelper> acaoHelpers = null;
					// **************************************************

					for(Integer idCobranca : idsCobrancaAcao){

						CobrancaAcaoSomatorioHelper cobrAcaoHelper = null;

						if(colecaoCobrancaAcaoSomatorioHelpers != null && !colecaoCobrancaAcaoSomatorioHelpers.isEmpty()){
							for(CobrancaAcaoSomatorioHelper cobrancaAcaoHelper : colecaoCobrancaAcaoSomatorioHelpers){
								if(cobrancaAcaoHelper.getIdCobrancaAcao().intValue() == idCobranca.intValue()){
									cobrAcaoHelper = cobrancaAcaoHelper;
									break;
								}
							}
						}

						Integer quantidadeDebitos = 0;
						BigDecimal valor = BigDecimal.ZERO;
						// TODO Depois Ver isso

						AcaoHelper acaoHelper = new AcaoHelper();
						acaoHelper.setIdCobrancaAcao(idCobranca);

						// this.criaAcaoHelper(faixaHelper, quantidadeDebitos, valor,
						// totalQuantidadeDebitos, totalValor, totalComissao);

						if(acaoHelpers == null || acaoHelpers.isEmpty()){
							acaoHelpers = new ArrayList<AcaoHelper>();
						}

						if(cobrAcaoHelper != null){
							// Linha com Dados
							acaoHelper.setQuantidadeDebitos(cobrAcaoHelper.getQuantidadeDebitos());
							acaoHelper.setValor(cobrAcaoHelper.getValor());
							acaoHelper.setComissao(cobrAcaoHelper.getComissao());

							acaoHelper.setParcelamentoQuantidadeDebitos(cobrAcaoHelper.getParcelamentoQuantidadeDebitos());
							acaoHelper.setParcelamentoValor(cobrAcaoHelper.getParcelamentoValor());

							ArrayList<BigDecimal> porcentagemParcelamentos = faixaHelper.getPorcentagemParcelamentos();

							BigDecimal comissaoParcelamento = BigDecimal.ZERO;
							BigDecimal valorParcelamento = cobrAcaoHelper.getParcelamentoValor();

							if(porcentagemParcelamentos != null && !porcentagemParcelamentos.isEmpty()){
								for(BigDecimal porcentagem : porcentagemParcelamentos){
									BigDecimal cem = new BigDecimal("100").setScale(2);
									BigDecimal novaPorcentagem = porcentagem.divide(cem, MathContext.DECIMAL32);

									BigDecimal novoValorPorcentagem = valorParcelamento.multiply(novaPorcentagem);
									comissaoParcelamento = comissaoParcelamento.add(novoValorPorcentagem);
								}
							}

							acaoHelper.setParcelamentoComissao(comissaoParcelamento);
						}else{
							// Linhas sem Dados
							acaoHelper.setQuantidadeDebitos(0);
							acaoHelper.setValor(BigDecimal.ZERO);
							acaoHelper.setComissao(BigDecimal.ZERO);
							acaoHelper.setParcelamentoQuantidadeDebitos(0);
							acaoHelper.setParcelamentoValor(BigDecimal.ZERO);
							acaoHelper.setParcelamentoComissao(BigDecimal.ZERO);
						}

						// *********
						totalQuantidadeDebitos = totalQuantidadeDebitos + acaoHelper.getQuantidadeDebitos();
						totalValor = totalValor.add(acaoHelper.getValor());
						totalComissao = totalComissao.add(acaoHelper.getComissao());
						// ***************************************************

						acaoHelpers.add(acaoHelper);
					}

					if(acaoHelpers == null || acaoHelpers.isEmpty()){
						acaoHelpers = new ArrayList<AcaoHelper>();
					}

					faixaHelper.setAcaoHelpers(acaoHelpers);

					// Totais por faixas
					faixaHelper.setTotalQuantidadeDebitos(totalQuantidadeDebitos);
					faixaHelper.setTotalValor(totalValor);
					faixaHelper.setTotalComissao(totalComissao);

					faixas.add(faixaHelper);
					i++;
				}

				// ******************** Inicio Calculo Parcelamento ********************
				FaixaHelper faixaHelperParcelamentos = new FaixaHelper();
				Collection<AcaoHelper> acaoHelpersParcelamentos = new ArrayList<AcaoHelper>();
				Map<Integer, AcaoHelper> acaoMapHelpersParcelamentos = new TreeMap<Integer, AcaoHelper>();

				Integer quantidadeTotalParcelamentos = 0;
				BigDecimal totalValorParcelamentos = BigDecimal.ZERO;
				BigDecimal totalComissaoParcelamentos = BigDecimal.ZERO;

				if(faixas != null && !faixas.isEmpty() && !idsCobrancaAcao.isEmpty()){
					for(FaixaHelper faixa : faixas){
						if(faixa.getAcaoHelpers() != null && !faixa.getAcaoHelpers().isEmpty()){
							ArrayList<AcaoHelper> colecaoAcaoHelpers = (ArrayList<AcaoHelper>) faixa.getAcaoHelpers();
							for(AcaoHelper acao : colecaoAcaoHelpers){
								this.addAcaoHelperMap(acaoMapHelpersParcelamentos, acao.getIdCobrancaAcao(), acao);
							}
						}
					}

					Set setMapSubTotalCobrancas = acaoMapHelpersParcelamentos.keySet();
					Iterator iteratorMapSubTotal = setMapSubTotalCobrancas.iterator();

					while(iteratorMapSubTotal.hasNext()){
						Integer key = (Integer) iteratorMapSubTotal.next();
						AcaoHelper acaoParcelamentos = acaoMapHelpersParcelamentos.get(key);
						acaoHelpersParcelamentos.add(acaoParcelamentos);
						quantidadeTotalParcelamentos = quantidadeTotalParcelamentos + acaoParcelamentos.getParcelamentoQuantidadeDebitos();
						totalValorParcelamentos = totalValorParcelamentos.add(acaoParcelamentos.getParcelamentoValor());
						totalComissaoParcelamentos = totalComissaoParcelamentos.add(acaoParcelamentos.getParcelamentoComissao());
					}

					faixaHelperParcelamentos.setTituloParcelamentos("Parcelamentos");

					if(percentuaisParcelas != null && !percentuaisParcelas.isEmpty() && percentuaisParcelas.size() == 1){
						BigDecimal percentualRemuneracao = percentuaisParcelas.get(0);
						faixaHelperParcelamentos.setTituloParcelamentos("( " + percentualRemuneracao.toString() + ")");
					}

					faixaHelperParcelamentos.setTotalQuantidadeDebitos(quantidadeTotalParcelamentos);
					faixaHelperParcelamentos.setTotalValor(totalValorParcelamentos);
					faixaHelperParcelamentos.setTotalComissao(totalComissaoParcelamentos);

					faixaHelperParcelamentos.setAcaoHelpers(acaoHelpersParcelamentos);
					parcelamentos.add(faixaHelperParcelamentos);
				}
				// ******************** Fim Calculo Parcelamento ********************

				// ******************** Inicio Calculo SubTotal ********************
				FaixaHelper faixaHelperSubTotal = new FaixaHelper();
				Collection<AcaoHelper> acaoHelpersSubTotal = new ArrayList<AcaoHelper>();
				Map<Integer, AcaoHelper> acaoMapHelpersSubTotal = new TreeMap<Integer, AcaoHelper>();

				Integer quantidadeTotalSubTotal = 0;
				BigDecimal totalValorSubTotal = BigDecimal.ZERO;
				BigDecimal totalComissaoSubTotal = BigDecimal.ZERO;

				if(faixas != null && !faixas.isEmpty() && !idsCobrancaAcao.isEmpty()){
					for(FaixaHelper faixa : faixas){
						if(faixa.getAcaoHelpers() != null && !faixa.getAcaoHelpers().isEmpty()){
							ArrayList<AcaoHelper> colecaoAcaoHelpers = (ArrayList<AcaoHelper>) faixa.getAcaoHelpers();
							for(AcaoHelper acao : colecaoAcaoHelpers){
								this.addAcaoHelperMap(acaoMapHelpersSubTotal, acao.getIdCobrancaAcao(), acao);
							}
						}
					}

					Set setMapSubTotalCobrancas = acaoMapHelpersSubTotal.keySet();
					Iterator iteratorMapSubTotal = setMapSubTotalCobrancas.iterator();

					while(iteratorMapSubTotal.hasNext()){
						Integer key = (Integer) iteratorMapSubTotal.next();
						AcaoHelper acaoSubTotal = acaoMapHelpersSubTotal.get(key);
						acaoHelpersSubTotal.add(acaoSubTotal);
						quantidadeTotalSubTotal = quantidadeTotalSubTotal + acaoSubTotal.getQuantidadeDebitos();
						totalValorSubTotal = totalValorSubTotal.add(acaoSubTotal.getValor());
						totalComissaoSubTotal = totalComissaoSubTotal.add(acaoSubTotal.getComissao());
					}

					faixaHelperSubTotal.setTotalQuantidadeDebitos(quantidadeTotalSubTotal);
					faixaHelperSubTotal.setTotalValor(totalValorSubTotal);
					faixaHelperSubTotal.setTotalComissao(totalComissaoSubTotal);

					faixaHelperSubTotal.setAcaoHelpers(acaoHelpersSubTotal);
					subTotalFaixas.add(faixaHelperSubTotal);

					for(FaixaHelper faixa : faixas){
						BigDecimal valor = faixa.getTotalValor().divide(totalValorSubTotal, MathContext.DECIMAL32);
						faixa.setPorcentagemValor(valor);
					}
				}
				// ******************** Fim Calculo SubTotal ********************

				// ******************** Inicio Calculo Total ********************
				FaixaHelper faixaHelperTotal = new FaixaHelper();
				Collection<AcaoHelper> acaoHelpersTotal = new ArrayList<AcaoHelper>();
				Map<Integer, AcaoHelper> acaoMapHelpersTotal = new TreeMap<Integer, AcaoHelper>();

				if(faixas != null && !faixas.isEmpty() && !idsCobrancaAcao.isEmpty()){
					for(FaixaHelper faixa : faixas){
						if(faixa.getAcaoHelpers() != null && !faixa.getAcaoHelpers().isEmpty()){
							ArrayList<AcaoHelper> colecaoAcaoHelpers = (ArrayList<AcaoHelper>) faixa.getAcaoHelpers();
							for(AcaoHelper acao : colecaoAcaoHelpers){
								this.addAcaoHelperMap(acaoMapHelpersTotal, acao.getIdCobrancaAcao(), acao);
							}
						}
					}

					Set setMapTotalCobrancas = acaoMapHelpersTotal.keySet();
					Iterator iteratorMapTotal = setMapTotalCobrancas.iterator();

					while(iteratorMapTotal.hasNext()){
						Integer key = (Integer) iteratorMapTotal.next();
						AcaoHelper acaoTotal = acaoMapHelpersTotal.get(key);
						acaoHelpersTotal.add(acaoTotal);
					}

					faixaHelperTotal.setTotalQuantidadeDebitos(quantidadeTotalParcelamentos + quantidadeTotalSubTotal);
					faixaHelperTotal.setTotalValor(totalValorParcelamentos.add(totalValorSubTotal));
					faixaHelperTotal.setTotalComissao(totalComissaoParcelamentos.add(totalComissaoSubTotal));

					faixaHelperTotal.setAcaoHelpers(acaoHelpersTotal);
					totalGeral.add(faixaHelperTotal);
				}
				// ******************** Fim Calculo Total ********************

				// ************************ Porcentagem SubTotal **************
				if(faixas != null && !faixas.isEmpty() && !idsCobrancaAcao.isEmpty()){
					FaixaHelper subTotalFaixasAlterarPercentual = subTotalFaixas.get(0);
					FaixaHelper parcelamentosFaixasAlterarPercentual = parcelamentos.get(0);
					FaixaHelper totalFaixasAlterarPercentual = totalGeral.get(0);

					BigDecimal valorPercentagem = subTotalFaixasAlterarPercentual.getTotalComissao().divide(
									totalFaixasAlterarPercentual.getTotalComissao(), MathContext.DECIMAL32);
					subTotalFaixasAlterarPercentual.setPorcentagemValor(valorPercentagem);

					BigDecimal valorPercentagemParcelamento = parcelamentosFaixasAlterarPercentual.getTotalComissao().divide(
									totalFaixasAlterarPercentual.getTotalComissao(), MathContext.DECIMAL32);
					parcelamentosFaixasAlterarPercentual.setPorcentagemValor(valorPercentagemParcelamento);

					BigDecimal valorPercentagemTotal = totalFaixasAlterarPercentual.getTotalComissao().divide(
									totalFaixasAlterarPercentual.getTotalValor(), MathContext.DECIMAL32);
					totalFaixasAlterarPercentual.setPorcentagemValor(valorPercentagemTotal);
				}

			}

			if(idsCobrancaAcao.isEmpty()){
				faixas = new ArrayList<FaixaHelper>();
			}

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		/**
		 * [0] - tituloAcoes
		 * [1] - faixas
		 * [2] - parcelamentos
		 * [3] - subTotalFaixas
		 * [4] - totalGeral
		 */
		quantidadeConsolidacao[0] = new ArrayList<CobrancaAcaoTituloHelper>();
		quantidadeConsolidacao[1] = new ArrayList<FaixaHelper>();
		quantidadeConsolidacao[2] = new ArrayList<FaixaHelper>();
		quantidadeConsolidacao[3] = new ArrayList<FaixaHelper>();
		quantidadeConsolidacao[4] = new ArrayList<FaixaHelper>();

		quantidadeConsolidacao[0] = tituloAcoes;
		quantidadeConsolidacao[1] = faixas;
		quantidadeConsolidacao[2] = parcelamentos;
		quantidadeConsolidacao[3] = subTotalFaixas;
		quantidadeConsolidacao[4] = totalGeral;

		return quantidadeConsolidacao;

	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 * @param cobrancaAcaoSomatorioHelpers
	 */
	private void addCobrancaAcaoSomatorioHelperMap(Map<Integer, CobrancaAcaoSomatorioHelper> mapa, Integer chave,
					CobrancaAcaoSomatorioHelper cobrancaAcaoSomatorioHelper){

		if(mapa.get(chave) == null){
			mapa.put(chave, cobrancaAcaoSomatorioHelper);
		}
	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 * @param acaoHelper
	 */
	private void addAcaoHelperMap(Map<Integer, AcaoHelper> mapa, Integer chave, AcaoHelper acaoHelper){

		AcaoHelper novaAcaoHelper = new AcaoHelper();
		novaAcaoHelper.setDiasAte(acaoHelper.getDiasAte());
		novaAcaoHelper.setIdCobrancaAcao(acaoHelper.getIdCobrancaAcao());
		novaAcaoHelper.setPorcentagemRemuneracao(acaoHelper.getPorcentagemRemuneracao());

		if(mapa.get(chave) != null){

			AcaoHelper acaoHelperAnterior = mapa.get(chave);

			Integer qtd = acaoHelper.getQuantidadeDebitos();
			BigDecimal valor = acaoHelper.getValor();
			BigDecimal comissao = acaoHelper.getComissao();

			Integer qtdParcemalento = acaoHelper.getParcelamentoQuantidadeDebitos();
			BigDecimal valorParcelameto = acaoHelper.getParcelamentoValor();
			BigDecimal comissaoParcelamento = acaoHelper.getParcelamentoComissao();

			novaAcaoHelper.setQuantidadeDebitos(acaoHelperAnterior.getQuantidadeDebitos() + qtd);
			novaAcaoHelper.setValor(acaoHelperAnterior.getValor().add(valor));
			novaAcaoHelper.setComissao(acaoHelperAnterior.getComissao().add(comissao));

			novaAcaoHelper.setParcelamentoQuantidadeDebitos(acaoHelperAnterior.getParcelamentoQuantidadeDebitos() + qtdParcemalento);
			novaAcaoHelper.setParcelamentoValor(acaoHelperAnterior.getParcelamentoValor().add(valorParcelameto));
			novaAcaoHelper.setParcelamentoComissao(acaoHelperAnterior.getParcelamentoComissao().add(comissaoParcelamento));

			mapa.remove(chave);
		}else{
			novaAcaoHelper.setQuantidadeDebitos(acaoHelper.getQuantidadeDebitos());
			novaAcaoHelper.setValor(acaoHelper.getValor());
			novaAcaoHelper.setComissao(acaoHelper.getComissao());

			novaAcaoHelper.setParcelamentoQuantidadeDebitos(acaoHelper.getParcelamentoQuantidadeDebitos());
			novaAcaoHelper.setParcelamentoValor(acaoHelper.getParcelamentoValor());
			novaAcaoHelper.setParcelamentoComissao(acaoHelper.getParcelamentoComissao());
		}

		novaAcaoHelper.setTotalQuantidadeDebitos(novaAcaoHelper.getQuantidadeDebitos() + novaAcaoHelper.getParcelamentoQuantidadeDebitos());
		novaAcaoHelper.setTotalValor(novaAcaoHelper.getValor().add(novaAcaoHelper.getParcelamentoValor()));
		novaAcaoHelper.setTotalComissao(novaAcaoHelper.getComissao().add(novaAcaoHelper.getParcelamentoComissao()));

		mapa.put(chave, novaAcaoHelper);
	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 * @param cobrancaAcaoSomatorioHelpers
	 */
	private void addFaixaHelperMap(Map<Integer, FaixaHelper> mapa, Integer chave, FaixaHelper faixaHelper){

		if(mapa.get(chave) == null){
			mapa.put(chave, faixaHelper);
		}
	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 * @param cobrancaAcaoSomatorioHelpers
	 */
	private void addValorMapFaixas(Map<Integer, Collection<CobrancaAcaoSomatorioHelper>> mapa, Integer chave,
					ArrayList<CobrancaAcaoSomatorioHelper> cobrancaAcaoSomatorioHelpers){

		if(mapa.get(chave) == null){
			mapa.put(chave, cobrancaAcaoSomatorioHelpers);
		}
	}

	/**
	 * @author isilva
	 * @param idEmpresa
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaContratoRemuneracaoPorSucesso> pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(
					Integer idEmpresa) throws ControladorException{

		Collection<CobrancaContratoRemuneracaoPorSucesso> retorno = null;

		if(idEmpresa == null){
			throw new ControladorException("atencao.required", null, "Empresa");
		}

		try{
			retorno = repositorioCobranca.pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(idEmpresa);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#pesquisarCobrancaAcaoEmFaixa(java.lang.Integer,
	 *      java.lang.String, java.lang.String, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String, java.lang.Integer,
	 *      java.lang.Integer)
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoEmFaixa(Integer idEmpresa, String tipoComando, String acaoSelecionada, String empresa,
					String periodoInicio, String periodoFim, String idCobrancaAcaoAtividadeComando,
					String idCobrancaAcaoAtividadeCronograma, Integer diasAteAnterior, Integer diasAte) throws ControladorException{

		Collection<Object[]> retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarCobrancaAcaoEmFaixa(idEmpresa, tipoComando, acaoSelecionada, empresa, periodoInicio,
							periodoFim, idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma, diasAteAnterior, diasAte);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;

	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#relacaoImovelReligacaoEspecialDiaCount(java.lang.Integer,
	 *      java.util.Date, java.util.Date, java.lang.Integer, java.lang.String[],
	 *      java.lang.String[], java.lang.String[])
	 */
	public Integer relacaoImovelReligacaoEspecialDiaCount(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico) throws ControladorException{

		Integer retorno = null;

		try{
			retorno = repositorioCobranca.relacaoImovelReligacaoEspecialDiaCount(idUnidade, periodoInicio, periodoFim, idGrupo, setores,
							bairros, tiposServico);

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;

	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#relacaoImovelReligacaoEspecialDia(java.lang.Integer,
	 *      java.util.Date, java.util.Date, java.lang.Integer, java.lang.String[],
	 *      java.lang.String[], java.lang.String[])
	 */
	public Collection<Object[]> relacaoImovelReligacaoEspecialDia(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico) throws ControladorException{

		Collection<Object[]> retorno = null;

		try{
			retorno = repositorioCobranca.relacaoImovelReligacaoEspecialDia(idUnidade, periodoInicio, periodoFim, idGrupo, setores,
							bairros, tiposServico);

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;

	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IControladorCobranca#relacaoRelatorioImovelReligacaoEspecialDia(java.lang.Integer,
	 *      java.util.Date, java.util.Date, java.lang.Integer, java.lang.String[],
	 *      java.lang.String[], java.lang.String[])
	 */
	public Collection<RelatorioAcompReligacaoEspecialHelper> relacaoRelatorioImovelReligacaoEspecialDia(Integer idUnidade,
					Date periodoInicio, Date periodoFim, Integer idGrupo, String[] setores, String[] bairros, String[] tiposServico)
					throws ControladorException{

		Collection<Object[]> retorno = null;
		Collection<RelatorioAcompReligacaoEspecialHelper> colecaoRelatorioAcompReligacaoEspecialHelper = new ArrayList<RelatorioAcompReligacaoEspecialHelper>();

		try{

			retorno = repositorioCobranca.relacaoImovelReligacaoEspecialDia(idUnidade, periodoInicio, periodoFim, idGrupo, setores,
							bairros, tiposServico);

			if(retorno != null && !retorno.isEmpty()){
				FiltroOrdemServicoProgramacao filtroOrdemServicoProgramacao = new FiltroOrdemServicoProgramacao();
				for(Object[] object : retorno){

					OrdemServico ordemServico = (OrdemServico) object[0];

					RelatorioAcompReligacaoEspecialHelper relatorioAcompReligacaoEspecialHelper = new RelatorioAcompReligacaoEspecialHelper();

					// Dia
					relatorioAcompReligacaoEspecialHelper.setDia(Util.formatarData(ordemServico.getDataGeracao()));

					String matricula = "";

					// Matricula
					if(ordemServico.getImovel() != null){
						matricula = ordemServico.getImovel().getId().toString();
					}

					// Ra
					if(ordemServico.getRegistroAtendimento() != null){
						relatorioAcompReligacaoEspecialHelper.setRa(ordemServico.getRegistroAtendimento().getId().toString());
						if(ordemServico.getRegistroAtendimento().getImovel() != null){
							matricula = ordemServico.getRegistroAtendimento().getImovel().getId().toString();
						}
					}else{
						relatorioAcompReligacaoEspecialHelper.setRa("");
					}

					relatorioAcompReligacaoEspecialHelper.setMatricula(matricula);

					// Número OS
					relatorioAcompReligacaoEspecialHelper.setNumeroOS(ordemServico.getId().toString());

					// Unidade de Origem
					if(ordemServico.getOrdemServicoUnidades() != null && !ordemServico.getOrdemServicoUnidades().isEmpty()){

						OrdemServicoUnidade ordemServicoUnidade = (OrdemServicoUnidade) Util.retonarObjetoDeColecao(ordemServico
										.getOrdemServicoUnidades());

						if(ordemServicoUnidade.getUnidadeOrganizacional() != null){
							relatorioAcompReligacaoEspecialHelper.setOrigem(ordemServicoUnidade.getUnidadeOrganizacional().getDescricao());
						}else{
							relatorioAcompReligacaoEspecialHelper.setOrigem("");
						}
					}else{
						relatorioAcompReligacaoEspecialHelper.setOrigem("");
					}

					// Servico Tipo
					if(ordemServico.getServicoTipo() != null){
						relatorioAcompReligacaoEspecialHelper.setServico(ordemServico.getServicoTipo().getDescricao());
					}else{
						relatorioAcompReligacaoEspecialHelper.setServico("");
					}

					// Zona
					if(object[1] != null){
						relatorioAcompReligacaoEspecialHelper.setZona(((Integer) object[1]).toString());
					}else{
						relatorioAcompReligacaoEspecialHelper.setZona("");
					}

					// Hora da Solicitação
					if(ordemServico.getDataGeracao() != null){
						relatorioAcompReligacaoEspecialHelper.setHoraSolicitacao(Util.formatarData(ordemServico.getDataGeracao()) + " "
										+ Util.formatarHoraSemSegundos(ordemServico.getDataGeracao()));
					}else{
						relatorioAcompReligacaoEspecialHelper.setHoraSolicitacao("");
					}

					// Hora de Execução
					if(ordemServico.getDataExecucao() != null){
						relatorioAcompReligacaoEspecialHelper.setHoraExecucao(Util.formatarData(ordemServico.getDataExecucao()) + " "
										+ Util.formatarHoraSemSegundos(ordemServico.getDataExecucao()));
					}else{
						relatorioAcompReligacaoEspecialHelper.setHoraExecucao("");
					}

					// Bairro
					if(ordemServico.getImovel() != null && ordemServico.getImovel().getRota() != null
									&& ordemServico.getImovel().getRota().getCobrancaGrupo() != null){
						relatorioAcompReligacaoEspecialHelper.setGrupo(ordemServico.getImovel().getRota().getCobrancaGrupo().getId()
										.toString());
					}else{
						relatorioAcompReligacaoEspecialHelper.setGrupo("");
					}

					// Bairro
					if(ordemServico.getImovel() != null && ordemServico.getImovel().getLogradouroBairro() != null
									&& ordemServico.getImovel().getLogradouroBairro().getBairro() != null){
						relatorioAcompReligacaoEspecialHelper.setBairro(ordemServico.getImovel().getLogradouroBairro().getBairro()
										.getNome());
					}else{
						relatorioAcompReligacaoEspecialHelper.setBairro("");
					}

					// Executor
					if(ordemServico.getAgente() != null){
						relatorioAcompReligacaoEspecialHelper.setExecutor(ordemServico.getAgente().getDescricao());
					}else{
						relatorioAcompReligacaoEspecialHelper.setExecutor("");
					}

					// Parecer
					if(ordemServico.getDescricaoParecerEncerramento() != null){
						relatorioAcompReligacaoEspecialHelper.setParecer(ordemServico.getDescricaoParecerEncerramento());
					}else{
						relatorioAcompReligacaoEspecialHelper.setParecer("");
					}

					// Equipe
					filtroOrdemServicoProgramacao.adicionarParametro(new ParametroSimples(FiltroOrdemServicoProgramacao.ORDERM_SERVICO_ID,
									ordemServico.getId()));
					filtroOrdemServicoProgramacao.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServicoProgramacao.EQUIPE);

					Collection<OrdemServicoProgramacao> colecaoOrdemServicoProgramacao = this.getControladorUtil().pesquisar(
									filtroOrdemServicoProgramacao, OrdemServicoProgramacao.class.getName());

					filtroOrdemServicoProgramacao.limparListaParametros();

					if(colecaoOrdemServicoProgramacao != null && !colecaoOrdemServicoProgramacao.isEmpty()){

						Equipe equipe = null;

						for(OrdemServicoProgramacao ordemServicoProgramacao : colecaoOrdemServicoProgramacao){
							if(ordemServicoProgramacao.getEquipe() != null){
								equipe = ordemServicoProgramacao.getEquipe();
								break;
							}
						}

						if(equipe != null){
							relatorioAcompReligacaoEspecialHelper.setEquipe(equipe.getNome());
						}else{
							relatorioAcompReligacaoEspecialHelper.setEquipe("");
						}

					}else{
						relatorioAcompReligacaoEspecialHelper.setEquipe("");
					}

					colecaoRelatorioAcompReligacaoEspecialHelper.add(relatorioAcompReligacaoEspecialHelper);
				}
			}

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRelatorioAcompReligacaoEspecialHelper;

	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança - fluxo principal
	 * [SB0014] - Definir Tipo Relação Cliente-Imóvel para Seleção do Cliente da Ação de Cobrança
	 * 
	 * @throws ControladorException
	 */

	private ClienteRelacaoTipo definirTipoRelacaoClienteImovelParaCliente(CobrancaAcao acaoCobranca, CobrancaCriterio criterioCobranca,
					ClienteRelacaoTipo clienteRelacaoTipo) throws ControladorException{

		if(criterioCobranca.getIndicadorConsiderarApenasDebitoTitularAtual() != null
						&& criterioCobranca.getIndicadorConsiderarApenasDebitoTitularAtual().equals(ConstantesSistema.SIM)){
			// 1. Caso esteja indicado no critério do comando para considerar apenas o débito do
			// titular atual do imóvel (CBCT_ICDEBITOTITULARATUAL com o valor 1 (sim) na tabela
			// COBRANCA_CRITERIO):
			if(criterioCobranca.getClienteRelacaoTipo() == null){
				// 1.1. Caso o tipo do titular atual do débito do imóvel seja o cliente indicado
				// para emissão na conta (CRTP_IDTITULARATUAL com o valor nulo na tabela
				// COBRANCA_CRITERIO):
				// 1.1.1. Atribuir o valor nulo ao Tipo Relação Cliente-Imóvel para Seleção do
				// Cliente da Ação de Cobrança.
				clienteRelacaoTipo = null;
			}else{
				// 1.2. Caso contrário, ou seja, o tipo do titular atual do débito do imóvel não
				// seja o cliente indicado para emissão na conta:
				// 1.2.1. Atribuir o valor correspondente ao tipo de relação definido no
				// critério
				// (CRTP_IDTITULARATUAL da tabela COBRANCA_CRITERIO) ao Tipo Relação
				// Cliente-Imóvel para
				// Seleção do Cliente da Ação de Cobrança.
				clienteRelacaoTipo = criterioCobranca.getClienteRelacaoTipo();
			}
		}else if(acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SERASA)
						|| acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SPC_SP)
						|| acaoCobranca.getId().equals(CobrancaAcao.NEGATIVACAO_SPC_BRASIL)){
			// 2. Caso contrário, ou seja, não esteja indicado no critério do comando para
			// considerar apenas o débito do titular atual do imóvel:
			// 2.1. Caso a ação de cobrança seja negativação (Ação de cobrança=Negativação SPC -
			// BRASIL ou Ação de cobrança=Negativação SPC - SÃO PAULO ou Ação de
			// cobrança=Negativação SERASA):
			// 2.1.1. Caso exista indicação do cliente da negativação (PASI_VLPARAMETRO com
			// valor definido na tabela PARAMETRO_SISTEMA com
			// PASI_CDPARAMETRO="P_CLIENTE_RELACAO_TIPO_NEGATIVACAO"):
			String parametroClienteRelacaoTipoNegativacao;
			try{
				parametroClienteRelacaoTipoNegativacao = ((String) ParametroCobranca.P_CLIENTE_RELACAO_TIPO_NEGATIVACAO.executar());
			}catch(ControladorException e){
				throw new ControladorException("atencao.sistemaparametro_inexistente", null, "P_CLIENTE_RELACAO_TIPO_NEGATIVACAO");
			}
			if(parametroClienteRelacaoTipoNegativacao != null){
				// 2.1.1.1. Atribuir o valor correspondente ao tipo de relação definido no
				// parâmetro
				// ao Tipo Relação Cliente-Imóvel para Seleção do Cliente da Ação de
				// Cobrança.
				clienteRelacaoTipo = new ClienteRelacaoTipo();
				clienteRelacaoTipo.setId(new Integer(parametroClienteRelacaoTipoNegativacao));

			}else{
				// 2.1.2. Caso contrário, ou seja, não existe indicação do cliente da
				// negativação:
				// 2.1.2.1. Atribuir o valor correspondente ao cliente usuário (CRTP_ID da
				// tabela
				// CLIENTE_RELACAO_TIPO com CRTP_DSCLIENTERELACAOTIPO="USUARIO") ao Tipo
				// Relação
				// Cliente-Imóvel para Seleção do Cliente da Ação de Cobrança.

				clienteRelacaoTipo = new ClienteRelacaoTipo();
				clienteRelacaoTipo.setId(ClienteRelacaoTipo.USUARIO);
			}
		}else{
			// 2.2. Caso contrário, ou seja, a ação de cobrança não seja negativação:
			// 2.2.1. Atribuir o valor correspondente ao cliente usuário (CRTP_ID da tabela
			// CLIENTE_RELACAO_TIPO com CRTP_DSCLIENTERELACAOTIPO="USUARIO") ao Tipo Relação
			// Cliente-Imóvel para Seleção do Cliente da Ação de Cobrança.

			clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(ClienteRelacaoTipo.USUARIO);

		}

		return clienteRelacaoTipo;

	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança - fluxo principal
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @param grupoCobranca
	 *            Grupo de Cobrança
	 * @param anoMesReferenciaCicloCobranca
	 *            Ano/Mês de referência do ciclo de cobrança
	 * @param idCronogramaAtividadeAcaoCobranca
	 *            Código do cronograma da atividade da ação de cobrança
	 * @param idComandoAtividadeAcaoCobranca
	 *            Código do comando da atividade da ação de cobrança
	 * @param rotas
	 *            Coleção de rotas
	 * @param acaoCobranca
	 *            Ação de cobrança
	 * @param atividadeCobranca
	 *            Atividade de cobrança
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param criterioCobranca
	 *            Critério de cobrança
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaPorSetorComercial(CobrancaGrupo grupoCobranca,
					int anoMesReferenciaCicloCobranca, CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Integer idSetorComercial, CobrancaAcao acaoCobranca,
					CobrancaAtividade atividadeCobranca, Integer indicadorCriterio, CobrancaCriterio criterioCobranca, Cliente cliente,
					ClienteRelacaoTipo clienteRelacaoTipo, String anoMesReferenciaInicial, String anoMesReferenciaFinal,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual, int idFuncionalidadeIniciada,
					Cliente clienteSuperior, Usuario usuario, SistemaParametro sistemaParametros, Integer idFaturamentoGrupoCronogramaMensal)
					throws ControladorException{

		// Registrar o início do processamento da Unidade de Processamento do Batch

		int idUnidadeIniciada = this.getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.SETOR_COMERCIAL, idSetorComercial);

		try{
			// [UC3043 Registrar Log de Execução do Processo]
			if(!Util.isVazioOuBranco(cobrancaAcaoAtividadeCronograma)){
				this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada,
								"Comando iniciado: Cronograma - " + cobrancaAcaoAtividadeCronograma.getId());
			}else if(!Util.isVazioOuBranco(cobrancaAcaoAtividadeComando)){
				this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada,
								"Comando iniciado: Eventual - " + cobrancaAcaoAtividadeComando.getId());
			}

			if(sistemaParametros == null){
				sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
			}

			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando = null;

			if(indicadorCriterio.equals(CobrancaAtividade.INDICADOR_CRITERIO_POR_COMANDO)){
				colecaoCobrancaCriterioLinhaComando = repositorioCobranca.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca.getId());
			}else{
				Integer idCriteriCobrancaInformadoComando = criterioCobranca.getId();

				criterioCobranca = acaoCobranca.getCobrancaCriterio();
				if(criterioCobranca != null){

					if(!idCriteriCobrancaInformadoComando.equals(criterioCobranca.getId())){
						LOGGER.info("Critério comandado foi : " + idCriteriCobrancaInformadoComando
										+ " porém foi modificado o criterio da ação para : " + criterioCobranca.getId());
					}

					colecaoCobrancaCriterioLinhaComando = repositorioCobranca.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca
									.getId());
				}else{
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.pesquisa.cobranca_acao_sem_criterio");
				}

			}

			// [SB0014] - Definir Tipo Relação Cliente-Imóvel para Seleção do Cliente da Ação de
			// Cobrança
			clienteRelacaoTipo = definirTipoRelacaoClienteImovelParaCliente(acaoCobranca, criterioCobranca, clienteRelacaoTipo);


			// Se o cliente for informado
			if(cliente != null || clienteSuperior != null){
				// [SB0001] - Gerar Atividade de Ação de Cobrança para os Imóveis do Cliente
				this.gerarAtividadeAcaoCobrancaParaImoveisCliente(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, cliente,
								clienteRelacaoTipo, indicadorCriterio, acaoCobranca, atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando, criterioCobranca, anoMesReferenciaInicial, anoMesReferenciaFinal,
								dataVencimentoInicial, dataVencimentoFinal, dataAtual, clienteSuperior, sistemaParametros,
								idSetorComercial, idFuncionalidadeIniciada, idFaturamentoGrupoCronogramaMensal);
			}else{
				if(cobrancaAcaoAtividadeComando != null){
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoBase = repositorioCobranca
									.pesquisarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando.getId());
					// 5.1.1. Caso o arquivo de imóveis esteja informado.
					if(cobrancaAcaoAtividadeComandoBase.getArquivoImoveisBlob() != null){
						this.gerarAtividadeAcaoCobrancaImoveisArquivoImoveis(
										Hibernate.createBlob(cobrancaAcaoAtividadeComandoBase.getArquivoImoveisBlob()),
										cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComandoBase, indicadorCriterio, acaoCobranca,
										atividadeCobranca, anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial,
										dataVencimentoFinal, dataAtual, sistemaParametros, idSetorComercial, criterioCobranca,
										colecaoCobrancaCriterioLinhaComando, idFuncionalidadeIniciada, idFaturamentoGrupoCronogramaMensal,
										clienteRelacaoTipo);
					}else

					// 5.1.2. Caso exista comando precedente associado ao comando da atividade de
					// ação de cobrança recebido.
					if(cobrancaAcaoAtividadeComandoBase.getPrecedente() != null
									&& cobrancaAcaoAtividadeComandoBase.getPrecedente().getId() != null){
						// [SB008 - Gerar Atividade de Ação de Cobrança para os Imóveis do Comando
						// Precedente]
						this.gerarAtividadeAcaoCobrancaImoveisComandoPrecedente(cobrancaAcaoAtividadeCronograma,
										cobrancaAcaoAtividadeComandoBase, indicadorCriterio, acaoCobranca, atividadeCobranca,
										anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal,
										dataAtual, sistemaParametros, idSetorComercial, criterioCobranca,
										idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);
					}else{

						// [SB0002] - Gerar Atividade de Ação de Cobrança para os imóveis da Lista
						// de Rotas
						this.gerarAtividadeAcaoCobrancaParaImoveisPorSetorComercial(cobrancaAcaoAtividadeCronograma,
										cobrancaAcaoAtividadeComando, idSetorComercial, indicadorCriterio, acaoCobranca, atividadeCobranca,
										colecaoCobrancaCriterioLinhaComando, criterioCobranca, anoMesReferenciaInicial,
										anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
										grupoCobranca, idFuncionalidadeIniciada, idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);
					}

				}else{
					// [SB0002] - Gerar Atividade de Ação de Cobrança para os imóveis da Lista de
					// Rotas
					this.gerarAtividadeAcaoCobrancaParaImoveisPorSetorComercial(cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, idSetorComercial, indicadorCriterio, acaoCobranca, atividadeCobranca,
									colecaoCobrancaCriterioLinhaComando, criterioCobranca, anoMesReferenciaInicial, anoMesReferenciaFinal,
									dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros, grupoCobranca,
									idFuncionalidadeIniciada, idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);
				}

			}

			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			return null;

		}catch(Exception e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			sessionContext.setRollbackOnly();
			throw new EJBException(e);
		}
	}

	public void emitirAtividadeAcaoCobrancaPorSetorComercial(ParametrosHelper helper, Integer idFuncionalidadeIniciada)
					throws ControladorException{

		int idUnidadeIniciada = 0;
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.RELATORIO, idUnidadeIniciada);

		LOGGER.info("*******INICIO DO EMITIR ACAO COBRANCA ************************ ");
		try{

			CobrancaGrupo grupoCobranca = helper.getGrupoCobranca();
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = helper.getCobrancaAcaoAtividadeCronograma();
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = helper.getCobrancaAcaoAtividadeComando();
			CobrancaAcao acaoCobranca = helper.getAcaoCobranca();
			CobrancaCriterio criterioCobranca = helper.getCriterioCobranca();
			Integer faturamentoGrupoCronogramaMensalId = helper.getFaturamentoGrupoCronogramaMensalId();
			Date dataAtual = helper.getDataAtual();
			Usuario usuario = helper.getUsuario();

			// 7. O sistema emite os documento de cobrança gerados
			if(acaoCobranca.getId() != null){
				LOGGER.info("*#*#*#* Ação de Cobrança: " + acaoCobranca.getId());

				if(acaoCobranca.getDocumentoTipo() != null && acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.SPC_SP)){

					this.negativarSpcSerasa(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca,
									grupoCobranca, criterioCobranca, usuario, Negativador.NEGATIVADOR_SPC_SAO_PAULO);

				}

				if(acaoCobranca.getDocumentoTipo() != null && acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.SPC_BRASIL)){

					this.negativarSpcSerasa(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca,
									grupoCobranca, criterioCobranca, usuario, Negativador.NEGATIVADOR_SPC_BRASIL);

				}

				if(acaoCobranca.getDocumentoTipo() != null && acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.SERASA)){

					this.negativarSpcSerasa(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca,
									grupoCobranca, criterioCobranca, usuario, Negativador.NEGATIVADOR_SERASA);

				}

				// 7.1 para as ações aviso de corte
				if(acaoCobranca.getId().equals(CobrancaAcao.AVISO_CORTE) || acaoCobranca.getId().equals(CobrancaAcao.AVISO_CORTE_A_REVELIA)){
					// [UC0349 Emitir Documento fr Cobrança - AvisoCorte]
					LOGGER.info("[UC0349 Emitir Documento Cobrança - AvisoCorte]");

					// ==========================================================
					// INICIO - Luciano Galvao (18/06/2012)
					// Trata os objetos que podem vim nulos para que não aconteça
					// NullPointerException na chamada do parâmetro dinâmico
					// ==========================================================
					if(cobrancaAcaoAtividadeCronograma == null){
						cobrancaAcaoAtividadeCronograma = new CobrancaAcaoAtividadeCronograma();
					}
					if(cobrancaAcaoAtividadeComando == null){
						cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
					}
					if(dataAtual == null){
						dataAtual = new Date();
					}
					if(grupoCobranca == null){
						grupoCobranca = new CobrancaGrupo();
					}
					if(criterioCobranca == null){
						criterioCobranca = new CobrancaCriterio();
					}

					if(faturamentoGrupoCronogramaMensalId == null){
						faturamentoGrupoCronogramaMensalId = new Integer(ConstantesSistema.NUMERO_NAO_INFORMADO);
					}
					// ==========================================================
					// FIM - Luciano Galvao (18/06/2012)
					// Trata os objetos que podem vim nulos para que não aconteça
					// NullPointerException na chamada do parâmetro dinâmico
					// ==========================================================

					ParametroCobranca.P_GERAR_ARQUIVO_TXT_AVISO_CORTE.executar(this, -1, cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca, grupoCobranca, criterioCobranca,
									faturamentoGrupoCronogramaMensalId, usuario);
				}

				if(acaoCobranca.getId().equals(CobrancaAcao.AVISO_DEBITO)){

					// Trata os objetos que podem vim nulos para que não aconteça
					// NullPointerException na chamada do parâmetro dinâmico
					if(cobrancaAcaoAtividadeCronograma == null){

						cobrancaAcaoAtividadeCronograma = new CobrancaAcaoAtividadeCronograma();
					}

					if(cobrancaAcaoAtividadeComando == null){

						cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
					}

					if(dataAtual == null){

						dataAtual = new Date();
					}

					if(grupoCobranca == null){

						grupoCobranca = new CobrancaGrupo();
					}

					if(criterioCobranca == null){

						criterioCobranca = new CobrancaCriterio();
					}

					// [UC0575] Emitir Aviso de Cobrança
					LOGGER.info("[UC0349 Emitir Documento Cobrança - AvisoDebito]");
					ParametroCobranca.P_GERAR_ARQUIVO_AVISO_DEBITO.executar(this, -1, cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca,
									grupoCobranca, criterioCobranca, usuario);
				}

				// 7.5 para as ações de telecobranca.
				if(acaoCobranca.getId().equals(CobrancaAcao.TELECOBRANCA)){
					LOGGER.info("[UC0349 Emitir Documento Cobrança - Telecobranca]");
					this.emitirDocumentoTelecobranca(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual,
									acaoCobranca, grupoCobranca, criterioCobranca, usuario);
				}

				if(acaoCobranca.getId().equals(CobrancaAcao.COBRANCA_JURIDICA)){
					/* [UC0942] Gerar Dados Cobranca Juridica */
					LOGGER.info("[UC0349 Emitir Documento Cobrança - Juridica]");
					this.emitirDocumentoCobrancaJuridica(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual,
									acaoCobranca, grupoCobranca, criterioCobranca, usuario);
				}

				// UC01101 - Emitir Carta com Opção de parcelamento
				if(acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO)){
					// PRECISO DA LISTA DE DOCUMENTOS DE COBRANÇA PARA PODER CONSULTAR OS
					// PREPARCELAMENTO E PREENCHER OS HELPERS
					LOGGER.info("[UC01101 Emitir Carta com Opção de parcelamento - CARTA_OPCAO_PARCELAMENTO]");
					this.emitirCartaOpcaoParcelamento(cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, dataAtual,
									acaoCobranca, grupoCobranca, criterioCobranca, usuario);
				}

				// [UC3016] - Gerar Boleto Cobrança Bancária e [UC3018] Gerar TXT Cartas Cobrança
				// Bancária
				if(acaoCobranca.getId().equals(CobrancaAcao.COBRANCA_BANCARIA)){
					try{
						this.gerarBoletoCobrancaBancaria(cobrancaAcaoAtividadeComando.getId(), null, null, usuario);
					}catch(ControladorException e){
						e.printStackTrace();
					}

					LOGGER.info("[UC3018] Gerar TXT Cartas Cobrança Bancária");
					this.gerarTXTCartasCobrancaBancaria(cobrancaAcaoAtividadeComando.getId(), usuario);
				}

				if(acaoCobranca.getId().equals(CobrancaAcao.CORTE_FISICO)){
					// [UC0476] Emitir Documento de Cobrança - Ordem de Corte
					LOGGER.info("[UC0476 Emitir Documento de Cobrança - Ordem de Corte]");

					if(cobrancaAcaoAtividadeCronograma == null) cobrancaAcaoAtividadeCronograma = new CobrancaAcaoAtividadeCronograma();
					if(cobrancaAcaoAtividadeComando == null) cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
					if(acaoCobranca == null) acaoCobranca = new CobrancaAcao();
					if(grupoCobranca == null) grupoCobranca = new CobrancaGrupo();
					if(criterioCobranca == null) criterioCobranca = new CobrancaCriterio();

					ParametroCobranca.P_GERAR_ARQUIVO_TXT_ORDEM_CORTE.executar(this, -1, cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, dataAtual, acaoCobranca, grupoCobranca, criterioCobranca, usuario,
									idFuncionalidadeIniciada);
				}

				if(acaoCobranca.getId().equals(CobrancaAcao.COBRANCA_ADMINISTRATIVA)){
					if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
						// [UC3099 - Gerar Cobrança Administrativa]
						gerarCobrancaAdministrativa(cobrancaAcaoAtividadeComando.getId());
					}
				}
			}else{
				LOGGER.info("*#*#*#* Ação de Cobrança não informado no Emitir Ação de Cobrança!");
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			sessionContext.setRollbackOnly();
			throw new EJBException(e);
		}finally{
			LOGGER.info("*******FIM DO EMITIR ACAO COBRANCA ************************ ");
		}

	}

	// quebrando método muito longo.
	private Conta recuperarConta(Object[] contasArray) throws ControladorException{

		ContaHelper conta = new ContaHelper();

		// Id de contas
		conta.setId(Integer.valueOf(contasArray[0].toString()));

		// Valor Agua
		conta.setValorAgua(new BigDecimal(contasArray[1].toString()));

		// Valor Esgoto
		conta.setValorEsgoto(new BigDecimal(contasArray[2].toString()));

		// Valor Debitos
		conta.setDebitos(new BigDecimal(contasArray[3].toString()));

		if(contasArray[4] != null){// 4
			// Valor Creditos
			conta.setValorCreditos(new BigDecimal(contasArray[4].toString()));
		}else{
			conta.setValorCreditos(BigDecimal.ZERO);
		}

		// Data Revisao
		conta.setDataRevisao((Date) contasArray[5]);

		// Referencia
		conta.setReferencia(((Integer) contasArray[6]).intValue());

		// Data Vencimento Conta
		conta.setDataVencimentoConta((Date) contasArray[7]);

		// Indicador de Cobranca de Multa
		conta.setIndicadorCobrancaMulta(((Short) contasArray[8]).shortValue());

		if(contasArray[9] != null){// 9
			Integer idDebitoCreditoSituacaoAtual = (Integer) contasArray[9];

			conta.setIdDebitoCreditoSituacaoAtual(idDebitoCreditoSituacaoAtual);
			conta.setDescricaoDebitoCreditoSituacaoAtual((String) contasArray[18]);
			conta.setDescricaoAbreviadaDebitoCreditoSituacaoAtual((String) contasArray[19]);

		}else{
			conta.setIdDebitoCreditoSituacaoAtual(null);
			conta.setDescricaoDebitoCreditoSituacaoAtual(null);
			conta.setDescricaoAbreviadaDebitoCreditoSituacaoAtual(null);
		}

		// Digito Verificador
		conta.setDigitoVerificadorConta(((Short) contasArray[10]).shortValue());

		if(contasArray[11] != null){ // 11
			// Conta Motivo Revisao
			conta.setIdContaMotivoRevisao((Integer) contasArray[11]);
		}else{
			conta.setIdContaMotivoRevisao(null);
		}

		// Última Alteração
		conta.setUltimaAlteracao((Date) contasArray[12]);

		if(contasArray[13] != null){ // 13
			// Imovel
			conta.setIdImovel((Integer) contasArray[13]);

		}else{
			conta.setIdImovel(null);

		}

		conta.setConsumoAgua((Integer) contasArray[14]);

		if(contasArray[15] != null){// 15
			// Valor impostos
			conta.setValorImposto((BigDecimal) (contasArray[15]));
		}else{
			conta.setValorImposto(BigDecimal.ZERO);
		}

		conta.setConsumoEsgoto((Integer) contasArray[16]);

		conta.setCreditoConsumo((Integer) contasArray[17]);

		conta.setIndicadorPagamento((Short) contasArray[20]);

		conta.setIndicadorRemuneraCobrancaAdministrativa((Short) contasArray[21]);

		// A consulta que retorna as colunas com os atributos de contas está sendo feita de duas
		// formas diferentes. Uma forma retorna 22 colunas, a outra 25.
		if(contasArray.length > 22){
			if(contasArray[22] != null){// 22
				// Ligacao Água Situação
				conta.setIdLigacaoAguaSituacao((Integer) (contasArray[22]));
			}

			if(contasArray[23] != null){// 23
				// Ligacao Esgoto Situação
				conta.setIdLigacaoEsgotoSituacao((Integer) (contasArray[23]));
			}

			if(contasArray[24] != null){// 24
				// Localidade
				conta.setIdLocalidade((Integer) (contasArray[24]));
			}
		}

		return conta;

	}

	/**
	 * Este caso de uso permite gerar atividade de ação de cobrança com base nos parâmetros
	 * recebidos
	 * [UC0251] Gerar Atividade de Ação de Cobranca
	 * Gera o documento de cobrança
	 * 
	 * @author COMPESA
	 * @date 08/09/2006
	 * @author Yara Souza
	 * @date 22/10/2010
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @param anoMesReferenciaDebito
	 * @param documentoEmissaoForma
	 * @param documentoTipo
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param empresa
	 * @param cobrancaCriterio
	 * @param cobrancaAcao
	 * @param valorDocumento
	 * @param idFaturamentoAtividadeCronograma
	 * @throws ControladorException
	 */
	public Object[] gerarDocumentoCobranca(Imovel imovel, Short indicadorGeracaoTaxaCobranca, Collection<ContaValoresHelper> colecaoContas,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento, Collection<DebitoACobrar> colecaoDebitosACobrar,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto, Integer anoMesReferenciaDebito,
					DocumentoEmissaoForma documentoEmissaoForma, DocumentoTipo documentoTipo,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, Empresa empresa, CobrancaCriterio cobrancaCriterio,
					CobrancaAcao cobrancaAcao, BigDecimal valorDocumento, Date dataAtual,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Cliente cliente,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, SistemaParametro sistemaParametro,
					Integer idFaturamentoGrupoCronogramaMensal, Boolean emissaoAvisoCorteOrdemCorteIndividual) throws ControladorException{

		Object[] retorno = new Object[5];

		if(sistemaParametro == null){
			// Pesquisando Sistemas Parâmetros
			sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		}

		// Item 1
		// Caso tenha sido passado o parâmetro imovel, bem como esteja indicado que é para gerar a
		// taxa de cobrança
		// (indicador de geração de taxa de cobrança = 1 ) o sistema gera o debito a cobrar para o
		// imóvel relativo a taxa de cobrança
		if(indicadorGeracaoTaxaCobranca == 1 && imovel != null){
			this.gerarTaxaCobranca(imovel, indicadorGeracaoTaxaCobranca, sistemaParametro, anoMesReferenciaDebito);
		}
		// Fim item 1
		CobrancaDocumento documentoCobranca = this
						.inserirCobrancaDocumentoEItens(imovel, colecaoContas, colecaoGuiasPagamento, colecaoDebitosACobrar,
										valorAcrescimosImpontualidade, valorDesconto, documentoEmissaoForma, documentoTipo,
										cobrancaAcaoAtividadeComando, cobrancaAcaoAtividadeCronograma, empresa, cobrancaCriterio,
										cobrancaAcao, valorDocumento, dataAtual, colecaoCreditoARealizar, cliente, opcoesParcelamento,
										idFaturamentoGrupoCronogramaMensal);

		if(documentoTipo.getId() != null
						&& (documentoTipo.getId().equals(DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO) || documentoTipo.getId().equals(
										DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO_CARTAO))
						&& opcoesParcelamento.getUsuarioLogado() != null){
			documentoCobranca.setUsuario(opcoesParcelamento.getUsuarioLogado());
		}

		// Caso o documento de cobrança corresponda a um aviso de corte (DOTP_DSDOCUMENTOTIPO com o
		// valor correspondente a "AVISO DE CORTE"
		// na tabela DOCUMENTO_TIPO para DOTP_ID=DOTP_ID da tabela COBRANCA_ACAO com CBAC_ID=Id da
		// Ação de Cobrança em processamento),
		// atribuir o valor correspondente a "ENTREGUE" da tabela COBRANCA_ACAO_SITUACAO;
		// caso contrário, atribuir o valor correspondente a "PENDENTE" da tabela
		// COBRANCA_ACAO_SITUACAO.

		if(emissaoAvisoCorteOrdemCorteIndividual){

			CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();

			if(cobrancaAcao != null && cobrancaAcao.getDocumentoTipo() != null
							&& cobrancaAcao.getDocumentoTipo().getId().equals(DocumentoTipo.AVISO_DE_CORTE)){

				cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.ENTREGUE);

			}else{

				cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.PENDENTE);

			}

			documentoCobranca.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);

		}

		// atualiza o valor dos acrescimos e do nuumero do sequencial do documento de cobrança
		// Atualiza o número do sequencial do documento com o código do documento de cobrança gerado
		documentoCobranca.setNumeroSequenciaDocumento(documentoCobranca.getId());
		getControladorUtil().atualizar(documentoCobranca);

		// Item 4
		// Caso o tipo de serviço da ação de cobrança(SVTP_ID da tabela COBRANCA_ACAO) tenha um
		// valor diferente de nulo,
		// o sistema gera a ordem de serviço referente ao documento de cobrança
		if(cobrancaAcao != null){
			if(cobrancaAcao.getServicoTipo() != null){
				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(FiltroServicoTipo.ID, cobrancaAcao.getServicoTipo().getId()));
				Collection<ServicoTipo> colecaoServicoTipo = this.getControladorUtil().pesquisar(filtroServicoTipo,
								ServicoTipo.class.getName());

				ServicoTipo servicoTipo = null;

				if(colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()){
					servicoTipo = (ServicoTipo) Util.retonarObjetoDeColecao(colecaoServicoTipo);
				}

				OrdemServico ordemServico = new OrdemServico();
				ordemServico.setCobrancaDocumento(documentoCobranca);
				ordemServico.setServicoTipo(cobrancaAcao.getServicoTipo());
				ordemServico.setImovel(imovel);
				ordemServico.setDataEmissao(dataAtual);
				ordemServico.setAgente(empresa);
				ordemServico.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				ordemServico.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
				Integer idOrdemServico = this.getControladorOrdemServico().gerarOrdemServicoSemValidacao(ordemServico,
								imovel.getLocalidade().getId(), Usuario.USUARIO_BATCH);
				retorno[3] = idOrdemServico;
				/*
				 * [OC790655][UC3052][SB0001.4]
				 * [OC790655][UC0251][SB0005.5]
				 * 2. Caso o tipo de serviço da ação de cobrança tenha a indicação de geração de
				 * dados no histórico de manutenção da ligação de água do imóvel
				 * (SVTP_ICGERARHISTORICOIMOVEL com o valor 1 (sim) na tabela SERVICO_TIPO com
				 * SVTP_ID=SVTP_ID da tabela COBRANCA_ACAO):
				 * 2.1. Caso o documento gerado esteja associado a um documento predecessor
				 * (CBAC_IDACAOPRECEDENTE com o valor diferente de nulo na tabela COBRANCA_ACAO),
				 * indicar no documento predecessor mais recente para o imóvel a geração do
				 * documento sucessor, caso exista - atualiza a ocorrência mais recente da tabela
				 * HISTORICO_MANUTENCAO_LIGACAO com IMOV_ID=(IMOV_ID da tabela COBRANCA_DOCUMENTO) e
				 * DOTP_ID=(DOTP_ID da tabela COBRANCA_ACAO com CBAC_ID=(CBAC_IDACAOPRECEDENTE da
				 * tabela COBRANCA_ACAO com CBAC_ID=Id da Ação em processamento)) e CAST_ID=(CAST_ID
				 * da tabela COBRANCA_ACAO_SITUACAO com CAST_DSSITUACAOACAO="ENTREGUE")
				 */
				if(ConstantesSistema.SIM.equals(servicoTipo.getIndicadorGerarHistoricoImovel())
								&& cobrancaAcao.getCobrancaAcaoPredecessora() != null){
					HistoricoManutencaoLigacao historicoAcaoCobrancaPredecessora = getControladorLigacaoAgua()
									.consultarHistoricoAcaoCobranca(documentoCobranca, cobrancaAcao.getCobrancaAcaoPredecessora());
					if(historicoAcaoCobrancaPredecessora != null){
						getControladorLigacaoAgua().atualizarHistoricoManutencaoLigacao(historicoAcaoCobrancaPredecessora, ordemServico);
					}
				}
			}
		}

		if(documentoTipo.getId().equals(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO)){
			Object[] retornoAux = this.calcularOpcoesParcelamentoParaCartaComOpcoesParcelamento(documentoCobranca, colecaoContas,
							colecaoGuiasPagamento, colecaoDebitosACobrar, colecaoCreditoARealizar);

			retorno[0] = retornoAux[0];
			retorno[1] = retornoAux[1];
		}

		retorno[2] = documentoCobranca.getNumeroSequenciaDocumento();
		retorno[4] = documentoCobranca.getId();

		/*
		 * [OC790655][UC3052][SB0001.5]
		 * [OC790655][UC0251][SB0005.6]
		 * : Caso o tipo de documento da ação de cobrança
		 * tenha a indicação de geração de dados no histórico de manutenção da ligação de água do
		 * imóvel (DOTP_ICGERARHISTORICOIMOVEL com o valor 1 (sim) na tabela DOCUMENTO_TIPO com
		 * DOTP_ID=DOTP_ID da tabela COBRANCA_ACAO), o sistema gera os dados - inclui na tabela
		 * HISTORICO_MANUTENCAO_LIGACAO
		 */
		if(ConstantesSistema.SIM.equals(documentoCobranca.getDocumentoTipo().getIndicadorGerarHistoricoImovel())){
			getControladorLigacaoAgua().criarHistoricoManutencaoLigacao(documentoCobranca);
		}
		return retorno;
	}

	private Collection criarCobrancaDocumentoItemConta(CobrancaDocumento documentoCobranca, Collection<ContaValoresHelper> colecaoContas,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, BigDecimal valorAcrescimosImpontualidade)
					throws ControladorException{

		// Para cada ocorrência das listas recebidas ( conts, guias de pagamento, débito a cobrar),
		// o sistema gera os
		// items do documento de cobrança na tabela COBRANCA_DOCUMENTO_ITEM

		// verifica a quantidade total de cobrança documento itens a ser inseridos
		Integer qtdeDocumentoItens = Integer.valueOf(0);
		if(colecaoContas != null && colecaoContas.size() > 0){
			qtdeDocumentoItens = Integer.valueOf(colecaoContas.size());
		}

		CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
		cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);

		Collection collCobrancaDocumentoItem = new ArrayList();

		DocumentoTipo documentoTipoConta = new DocumentoTipo();
		documentoTipoConta.setId(DocumentoTipo.CONTA);

		// Cria os itens de cobrança de documento para contas
		for(ContaValoresHelper contaValorHelper : colecaoContas){

			CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();
			BigDecimal valorAcrescimos = BigDecimal.ZERO;
			// Cria a variável que vai conter o valor do item cobrado
			BigDecimal valorItemCobrado = BigDecimal.ZERO;

			// Calcula o valor do item cobrado
			valorItemCobrado = valorItemCobrado.add(contaValorHelper.getConta().getValorAgua());
			valorItemCobrado = valorItemCobrado.add(contaValorHelper.getConta().getValorEsgoto());
			valorItemCobrado = valorItemCobrado.add(contaValorHelper.getConta().getDebitos());
			valorItemCobrado = valorItemCobrado.subtract(contaValorHelper.getConta().getValorCreditos());

			if(contaValorHelper.getConta().getValorImposto() != null){
				valorItemCobrado = valorItemCobrado.subtract(contaValorHelper.getConta().getValorImposto());
			}

			// alterado por Sávio Luiz data:03/04/2007
			BigDecimal valorMulta = contaValorHelper.getValorMulta();
			if(valorMulta != null){
				valorAcrescimos = valorAcrescimos.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).add(
								valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
			}

			BigDecimal valorJurosMora = contaValorHelper.getValorJurosMora();
			if(valorJurosMora != null){
				valorAcrescimos = valorAcrescimos.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).add(
								valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
			}

			BigDecimal valorAtualizacaoMonetaria = contaValorHelper.getValorAtualizacaoMonetaria();
			if(valorAtualizacaoMonetaria != null){
				valorAcrescimos = valorAcrescimos.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).add(
								valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
			}

			if(valorAcrescimosImpontualidade == null
							|| (valorAcrescimosImpontualidade != null && valorAcrescimosImpontualidade.compareTo(BigDecimal.ZERO) == 0)){
				valorAcrescimos = BigDecimal.ZERO;

				// Necessário para não gerar itens de cobrança com valor de multa, juros e
				// atualização monetária para os documentos que não tem acréscimo
				valorMulta = BigDecimal.ZERO;
				valorJurosMora = BigDecimal.ZERO;
				valorAtualizacaoMonetaria = BigDecimal.ZERO;
			}

			cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);

			// Cria o item de documento de cobrança
			cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
			cobrancaDocumentoItem.setDocumentoTipo(documentoTipoConta);
			ContaGeral contaGeral = new ContaGeral();

			if(contaValorHelper.getConta() != null){
				contaGeral.setId(contaValorHelper.getConta().getId());
				contaGeral.setConta(contaValorHelper.getConta());
				cobrancaDocumentoItem.setContaGeral(contaGeral);
			}
			cobrancaDocumentoItem.setDebitoACobrarGeral(null);
			cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
			cobrancaDocumentoItem.setCreditoARealizarGeral(null);
			cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());

			// Passa os valores de descontos individualmente para as contas.
			if(opcoesParcelamento != null){

				cobrancaDocumentoItem.setValorDescontoMulta(opcoesParcelamento.getValorDescontoMultaContaIndividual(contaValorHelper
								.getConta()));
				cobrancaDocumentoItem.setValorDescontoMora(opcoesParcelamento.getValorDescontoMoraContaIndividual(contaValorHelper
								.getConta()));
				cobrancaDocumentoItem.setValorDescontoCorrecaoMonetaria(opcoesParcelamento
								.getValorDescontoCorrecaoContaIndividual(contaValorHelper.getConta()));
				cobrancaDocumentoItem.setValorDescontoValor(opcoesParcelamento.getValorDescontoValorContaIndividual(contaValorHelper
								.getConta()));

				if(opcoesParcelamento.getValorDescontoInatividade() != null && !opcoesParcelamento.getValorDescontoInatividade().equals("")){
					BigDecimal valorDesconto = opcoesParcelamento.getValorDescontoInatividade().divide(new BigDecimal(qtdeDocumentoItens),
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

					cobrancaDocumentoItem.setValorDescontoDocumento(valorDesconto);
				}else{
					cobrancaDocumentoItem.setValorDescontoDocumento(BigDecimal.ZERO);
				}
			}
			cobrancaDocumentoItem.setValorMulta(valorMulta);
			cobrancaDocumentoItem.setValorMora(valorJurosMora);
			cobrancaDocumentoItem.setValorCorrecaoMonetaria(valorAtualizacaoMonetaria);
			cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());
			collCobrancaDocumentoItem.add(cobrancaDocumentoItem);

		}

		if(collCobrancaDocumentoItem != null && !collCobrancaDocumentoItem.isEmpty()){
			getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaDocumentoItem);
		}

		return collCobrancaDocumentoItem;

	}

	private Collection criarCobrancaDocumentoItemDebitoACobrar(CobrancaDocumento documentoCobranca,
					Collection<DebitoACobrar> colecaoDebitosACobrar, NegociacaoOpcoesParcelamentoHelper opcoesParcelamento,
					BigDecimal valorAcrescimosImpontualidade, DocumentoTipo documentoTipo) throws ControladorException{

		int quantidadeParcelasAntecipadas = 0;
		Integer qtdeDocumentoItens = Integer.valueOf(0);
		if(colecaoDebitosACobrar != null){
			qtdeDocumentoItens = qtdeDocumentoItens + Integer.valueOf(colecaoDebitosACobrar.size());
		}

		Collection collCobrancaDocumentoItem = new ArrayList();
		Collection colecaoRetorno = new ArrayList();

		DocumentoTipo documentoTipoDebito = new DocumentoTipo();
		documentoTipoDebito.setId(DocumentoTipo.DEBITO_A_COBRAR);

		CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
		cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);

		// Conta a quantidade de debitos a cobrar que incidem desconto sansao
		Integer qtdeDebitoACobrarSansao = Integer.valueOf(0);
		for(DebitoACobrar debitoACobrar2 : colecaoDebitosACobrar){

			if(debitoACobrar2.getDebitoTipo().getId().equals(DebitoTipo.SANCOES_REGULAMENTARES)
							|| debitoACobrar2.getDebitoTipo().getId().equals(DebitoTipo.MULTA_POR_INFRACAO)
							|| debitoACobrar2.getDebitoTipo().getId().equals(DebitoTipo.INSTAL_SUBST_HIDROMETRO)
							|| debitoACobrar2.getDebitoTipo().getId().equals(DebitoTipo.CONSUMO_NAO_CONTABILIZADO)){

				qtdeDebitoACobrarSansao++;
			}
		}

		

		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		ParametroSimples param1 = new ParametroSimples(filtroDebitoACobrar.ID, null);
		filtroDebitoACobrar.adicionarParametro(param1);

		// Cria os itens de cobrança de documento para os débitos a cobrar
		for(DebitoACobrar debitoACobrar : colecaoDebitosACobrar){

			/*
			 * Se a "Quantidade de Parcelas Antecipadas" for igual a nulo ou zero, inserir apenas um
			 * item no "documento de cobrança" com o valor
			 * total, caso contrário inserir um item para cada prestação antecipada.
			 */
			if(debitoACobrar.getQuantidadeParcelasAntecipadas() == null || debitoACobrar.getQuantidadeParcelasAntecipadas().intValue() == 0){

				quantidadeParcelasAntecipadas = 0;

				if(!(debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO))
								|| documentoTipo.getId().equals(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO)){

					CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();

					// Cria a variável que vai conter o valor do item cobrado
					BigDecimal valorItemCobrado = debitoACobrar.getValorTotal();

					// cria o item de documento de cobrança
					cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
					cobrancaDocumentoItem.setDocumentoTipo(documentoTipoDebito);
					cobrancaDocumentoItem.setContaGeral(null);
					DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
					debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
					debitoACobrarGeral.setId(debitoACobrar.getId());
					cobrancaDocumentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
					cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
					cobrancaDocumentoItem.setCreditoARealizarGeral(null);
					cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					BigDecimal desconto = BigDecimal.ZERO;
					if(opcoesParcelamento != null && opcoesParcelamento.getValorDescontoSancoesRDEspecial() != null
									&& opcoesParcelamento.getValorDescontoSancoesRDEspecial() != BigDecimal.ZERO){

						if((debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.SANCOES_REGULAMENTARES)
										|| debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.MULTA_POR_INFRACAO)
										|| debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.INSTAL_SUBST_HIDROMETRO) || debitoACobrar
										.getDebitoTipo().getId().equals(DebitoTipo.CONSUMO_NAO_CONTABILIZADO))){

							desconto = desconto
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
											.add(opcoesParcelamento
															.getValorDescontoSancoesRDEspecial()
															.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
															.divide(new BigDecimal(qtdeDebitoACobrarSansao).setScale(
																			Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)));
						}
					}

					if(opcoesParcelamento != null && opcoesParcelamento.getValorDescontoAcrescimosImpontualidadeRDEspecial() != null
									&& opcoesParcelamento.getValorDescontoAcrescimosImpontualidadeRDEspecial() != BigDecimal.ZERO){

						desconto = desconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).add(
										opcoesParcelamento
														.getValorDescontoAcrescimosImpontualidadeRDEspecial()
														.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
														.divide(new BigDecimal(colecaoDebitosACobrar.size()).setScale(
																		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
																		Parcelamento.TIPO_ARREDONDAMENTO));
					}

					cobrancaDocumentoItem.setValorDescontoValor(desconto);
					if(opcoesParcelamento != null && opcoesParcelamento.getValorDescontoInatividade() != null
									&& !opcoesParcelamento.getValorDescontoInatividade().equals("")){

						cobrancaDocumentoItem.setValorDescontoDocumento(opcoesParcelamento
										.getValorDescontoInatividade()
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
										.divide(new BigDecimal(qtdeDocumentoItens).setScale(Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO)));
					}else{
						cobrancaDocumentoItem.setValorDescontoDocumento(BigDecimal.ZERO);
					}

					cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					collCobrancaDocumentoItem.add(cobrancaDocumentoItem);
					// inserir o item de documento de cobrança

				}

			}else{

				quantidadeParcelasAntecipadas = debitoACobrar.getQuantidadeParcelasAntecipadas().intValue();

				short numeroPrestacaoDebitoShort = debitoACobrar.getNumeroPrestacaoDebito();
				short numeroPrestacaoCobradas = debitoACobrar.getNumeroPrestacaoCobradas();

				// Integer numeroTotalParcelas = Integer.valueOf(numeroPrestacaoDebitoShort);

				// "i" varia de 0 (zero) até "quantidadeParcelasAntecipadas - 1"
				for(int i = 0; i < quantidadeParcelasAntecipadas; i++){

					CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();

					BigDecimal valorPrestacao = debitoACobrar.getValorDebito().divide(new BigDecimal(numeroPrestacaoDebitoShort),
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

					// if(i == 0 && ((numeroPrestacaoCobradas + quantidadeParcelasAntecipadas) ==
					// numeroPrestacaoDebitoShort)){

					if(((numeroPrestacaoCobradas + i + 1) == numeroPrestacaoDebitoShort)){
						// Obtém o número de prestação débito
						BigDecimal numeroPrestacaoDebito = new BigDecimal(numeroPrestacaoDebitoShort);

						// Mutiplica o valor da prestação * número da prestação debito
						BigDecimal multiplicacao = valorPrestacao.multiply(numeroPrestacaoDebito).setScale(2);

						// Subtrai o valor do débito pelo resultado da multiplicação
						BigDecimal parte1 = debitoACobrar.getValorDebito().subtract(multiplicacao).setScale(2);

						// Calcula o valor da prestação
						valorPrestacao = valorPrestacao.add(parte1).setScale(2);
					}

					// cria o item de documento de cobrança
					cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
					cobrancaDocumentoItem.setDocumentoTipo(documentoTipoDebito);
					cobrancaDocumentoItem.setContaGeral(null);
					DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
					debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
					debitoACobrarGeral.setId(debitoACobrar.getId());
					cobrancaDocumentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
					cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
					cobrancaDocumentoItem.setCreditoARealizarGeral(null);
					cobrancaDocumentoItem.setValorItemCobrado(valorPrestacao);
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					// Antecipa os números das últimas parcelas
					// cobrancaDocumentoItem.setNumeroParcelaAntecipada(numeroTotalParcelas - i);

					cobrancaDocumentoItem.setNumeroParcelaAntecipada(numeroPrestacaoCobradas + (i + 1));

					// Caso Tipo do Débito seja JUROS_SOBRE_PARCELAMENTO, calcular novo juros
					// (definido temporariamente como ZERO).
					BigDecimal valorJurosParcelaAntecipada = BigDecimal.ZERO;
					if(debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
						valorJurosParcelaAntecipada = BigDecimal.ZERO;
						cobrancaDocumentoItem.setValorDescontoValor(valorPrestacao.subtract(valorJurosParcelaAntecipada));
					}else{
						valorJurosParcelaAntecipada = BigDecimal.ZERO;
					}
					cobrancaDocumentoItem.setValorJurosParcelaAntecipada(valorJurosParcelaAntecipada);

					collCobrancaDocumentoItem.add(cobrancaDocumentoItem);

				}

			}

			if(collCobrancaDocumentoItem != null && !collCobrancaDocumentoItem.isEmpty()){

				getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaDocumentoItem);
				colecaoRetorno.addAll(collCobrancaDocumentoItem);

				collCobrancaDocumentoItem.clear();
			}

			if(debitoACobrar != null){

				param1.setValor(debitoACobrar.getId());
				// Atualiza o Débito A Cobrar com "quantidade de parcelas antecipadas" e
				// "data de antecipação"
				Collection<DebitoACobrar> colecaoDebitoACobrarAtualizar = null;

				colecaoDebitoACobrarAtualizar = this.getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

				if(colecaoDebitoACobrarAtualizar == null || colecaoDebitoACobrarAtualizar.isEmpty()){
					throw new ControladorException("atencao.registro_remocao_nao_existente");
				}

				DebitoACobrar debitoACobrarAtualizar = (DebitoACobrar) Util.retonarObjetoDeColecao(colecaoDebitoACobrarAtualizar);

				if(quantidadeParcelasAntecipadas > 0){
					debitoACobrarAtualizar.setQuantidadeParcelasAntecipadas(debitoACobrarAtualizar.getNumeroPrestacaoCobradas() + quantidadeParcelasAntecipadas);
					debitoACobrarAtualizar.setDataAntecipacao(new Date());
				}

				System.out.println("*****criarCobrancaDocumentoItemDebitoACobrar -> debito : "
								+ debitoACobrarAtualizar.getId() + " - " + " quantidadeAntecipação :"
								+ debitoACobrarAtualizar.getQuantidadeParcelasAntecipadas());

				SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

				if(sistemaParametro.getNumeroDiasEsperaExtratoDebito() != null){
					debitoACobrarAtualizar.setNumeroDiasSuspensao(sistemaParametro.getNumeroDiasEsperaExtratoDebito().intValue());
				}else{
					throw new ControladorException("atencao.sistemaparametro_inexistente", null, "Numero Dias Espera Extrato Debito");
				}

				debitoACobrarAtualizar.setUltimaAlteracao(new Date());

				this.getControladorUtil().atualizar(debitoACobrarAtualizar);
			}



		}
		
		
		if(documentoCobranca.getValorDesconto() != null && documentoCobranca.getValorDesconto().compareTo(BigDecimal.ZERO) > 0){

			Collection collDebitoACobrarAux = this.getControladorFaturamento().pesquisarDebitoACobrarPorDebitoTipo(documentoCobranca.getImovel().getId(),
							DebitoTipo.JUROS_SOBRE_PARCELAMENTO);
			
			if(collDebitoACobrarAux != null){
				BigDecimal parte1 = BigDecimal.ZERO;
				Iterator it = collDebitoACobrarAux.iterator();

				while(it.hasNext()){
					DebitoACobrar dbacAtualizar = (DebitoACobrar) it.next();
					
					/* Atribui o valor que falta a ser cobrado ao valor do documento */
					BigDecimal valorParcela = dbacAtualizar.getValorDebito().divide(
									new BigDecimal(String.valueOf(dbacAtualizar.getNumeroPrestacaoDebito())), 2, BigDecimal.ROUND_DOWN);

									
									
					BigDecimal numeroParcelasAntecipadas = Util.formatarMoedaRealparaBigDecimal(quantidadeParcelasAntecipadas + "");

					System.out.println("numeroParcelasAntecipadas = " + numeroParcelasAntecipadas);

					if(dbacAtualizar.getNumeroPrestacaoCobradas() + quantidadeParcelasAntecipadas == dbacAtualizar
									.getNumeroPrestacaoDebito()){
						// Ultima parcela
						// Obtém o número de prestação débito
						BigDecimal numeroPrestacaoDebito = new BigDecimal(dbacAtualizar.getNumeroPrestacaoDebito());

						// Mutiplica o valor da prestação * número da prestação debito
						BigDecimal multiplicacao = valorParcela.multiply(numeroPrestacaoDebito).setScale(2);

						// Subtrai o valor do débito pelo resultado da multiplicação
						parte1 = dbacAtualizar.getValorDebito().subtract(multiplicacao).setScale(2);

					}

					BigDecimal valorAntecipado = valorParcela.multiply(numeroParcelasAntecipadas);

					if(parte1.compareTo(BigDecimal.ZERO) > 0){
						valorAntecipado = valorAntecipado.add(parte1);
					}


					System.out.println("valorAntecipado = " + valorAntecipado + " - " + "valor Desconto = "
									+ documentoCobranca.getValorDesconto());

					if(valorAntecipado.compareTo(documentoCobranca.getValorDesconto()) == 0){

						if(dbacAtualizar.getQuantidadeParcelasAntecipadas() != null){
							// dbacAtualizar.setQuantidadeParcelasAntecipadas(dbacAtualizar.getQuantidadeParcelasAntecipadas()
							// + quantidadeParcelasAntecipadas);
							dbacAtualizar.setQuantidadeParcelasAntecipadas(dbacAtualizar.getNumeroPrestacaoCobradas()
											+ quantidadeParcelasAntecipadas);

						}else{
							dbacAtualizar.setQuantidadeParcelasAntecipadas(quantidadeParcelasAntecipadas);
						}

						System.out.println("*****criarCobrancaDocumentoItemDebitoACobrar  com JUROS_SOBRE_PARCELAMENTO-> debito : "
										+ dbacAtualizar.getId() + " - " + " quantidadeAntecipação :"
										+ dbacAtualizar.getQuantidadeParcelasAntecipadas());

						SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

						if(sistemaParametro.getNumeroDiasEsperaExtratoDebito() != null){
							dbacAtualizar.setNumeroDiasSuspensao(sistemaParametro.getNumeroDiasEsperaExtratoDebito().intValue());
						}else{
							throw new ControladorException("atencao.sistemaparametro_inexistente", null,
											"Numero Dias Espera Extrato Debito");
						}

						dbacAtualizar.setDataAntecipacao(new Date());
						dbacAtualizar.setUltimaAlteracao(new Date());

						this.getControladorUtil().atualizar(dbacAtualizar);
					}

				}
			}

		}
		
		filtroDebitoACobrar.limparListaParametros();
		filtroDebitoACobrar = null;

		return colecaoRetorno;

	}

	private Collection criarCobrancaDocumentoItemGuiaPagamento(CobrancaDocumento documentoCobranca,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento, NegociacaoOpcoesParcelamentoHelper opcoesParcelamento,
					BigDecimal valorAcrescimosImpontualidade) throws ControladorException{

		Collection collCobrancaDocumentoItem = new ArrayList();

		Integer qtdeDocumentoItens = Integer.valueOf(0);
		if(colecaoGuiasPagamento != null){
			qtdeDocumentoItens = qtdeDocumentoItens + Integer.valueOf(colecaoGuiasPagamento.size());
		}

		CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
		cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);

		// cria os itens de cobrança de documento para as guias de pagamento
		for(GuiaPagamentoValoresHelper guiaPagamentoValorHelper : colecaoGuiasPagamento){

			Short numPrestacao = guiaPagamentoValorHelper.getNumeroPrestacao();
			BigDecimal valorItemCobrado = guiaPagamentoValorHelper.getValorTotalPrestacao();

			DocumentoTipo documentoTipoGuia = new DocumentoTipo();
			documentoTipoGuia.setId(DocumentoTipo.GUIA_PAGAMENTO);

			CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();
			BigDecimal valorAcrescimos = BigDecimal.ZERO;

			// cria o item de documento de cobrança
			cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
			cobrancaDocumentoItem.setDocumentoTipo(documentoTipoGuia);
			cobrancaDocumentoItem.setContaGeral(null);
			cobrancaDocumentoItem.setDebitoACobrarGeral(null);
			cobrancaDocumentoItem.setCreditoARealizarGeral(null);

			GuiaPagamento guiaPagamento = new GuiaPagamento();
			guiaPagamento.setId(guiaPagamentoValorHelper.getIdGuiaPagamento());
			GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
			guiaPagamentoGeral.setGuiaPagamento(guiaPagamento);
			guiaPagamentoGeral.setId(guiaPagamentoValorHelper.getIdGuiaPagamento());
			cobrancaDocumentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
			cobrancaDocumentoItem.setNumeroDaPrestacao(guiaPagamentoValorHelper.getNumeroPrestacao());

			BigDecimal valorMulta = guiaPagamentoValorHelper.getValorMulta();
			if(valorMulta != null){
				valorAcrescimos = valorAcrescimos.add(valorMulta);
			}

			BigDecimal valorJurosMora = guiaPagamentoValorHelper.getValorJurosMora();
			if(valorJurosMora != null){
				valorAcrescimos = valorAcrescimos.add(valorJurosMora);
			}

			BigDecimal valorAtualizacaoMonetaria = guiaPagamentoValorHelper.getValorAtualizacaoMonetaria();
			if(valorAtualizacaoMonetaria != null){
				valorAcrescimos = valorAcrescimos.add(valorAtualizacaoMonetaria);
			}

			if(valorAcrescimosImpontualidade == null
							|| (valorAcrescimosImpontualidade != null && valorAcrescimosImpontualidade.compareTo(BigDecimal.ZERO) == 0)){
				valorAcrescimos = BigDecimal.ZERO;

				// Necessário para não gerar itens de cobrança com valor de multa, juros e
				// atualização monetária para os documentos que não tem acréscimo
				valorMulta = BigDecimal.ZERO;
				valorJurosMora = BigDecimal.ZERO;
				valorAtualizacaoMonetaria = BigDecimal.ZERO;
			}

			cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);
			cobrancaDocumentoItem.setNumeroDaPrestacao(numPrestacao);
			cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());

			if(opcoesParcelamento != null){
				cobrancaDocumentoItem.setValorDescontoMora(opcoesParcelamento.getValorDescontoMoraGuiaIndividual(guiaPagamento));
				cobrancaDocumentoItem.setValorDescontoMulta(opcoesParcelamento.getValorDescontoMultaGuiaIndividual(guiaPagamento));
				cobrancaDocumentoItem.setValorDescontoCorrecaoMonetaria(opcoesParcelamento
								.getValorDescontoCorrecaoGuiaIndividual(guiaPagamento));
				cobrancaDocumentoItem.setValorDescontoValor(opcoesParcelamento.getValorDescontoValorGuiaIndividual(guiaPagamento));
			}
			if(opcoesParcelamento != null && opcoesParcelamento.getValorDescontoInatividade() != null
							&& !opcoesParcelamento.getValorDescontoInatividade().equals("")){
				cobrancaDocumentoItem.setValorDescontoDocumento(opcoesParcelamento
								.getValorDescontoInatividade()
								.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
								.divide(new BigDecimal(qtdeDocumentoItens).setScale(Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO)));
			}else{
				cobrancaDocumentoItem.setValorDescontoDocumento(BigDecimal.ZERO);
			}
			cobrancaDocumentoItem.setValorMulta(valorMulta);
			cobrancaDocumentoItem.setValorMora(valorJurosMora);
			cobrancaDocumentoItem.setValorCorrecaoMonetaria(valorAtualizacaoMonetaria);
			cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());

			collCobrancaDocumentoItem.add(cobrancaDocumentoItem);

		}

		if(collCobrancaDocumentoItem != null && !collCobrancaDocumentoItem.isEmpty()){
			getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaDocumentoItem);
		}

		return collCobrancaDocumentoItem;

	}

	private Collection criarCobrancaDocumentoItemCreditoARealizar(CobrancaDocumento documentoCobranca,
					Collection<CreditoARealizar> colecaoCreditoARealizar) throws ControladorException{

		Collection collCobrancaDocumentoItem = null;
		collCobrancaDocumentoItem = new ArrayList();

		DocumentoTipo documentoTipoCredito = new DocumentoTipo();

		documentoTipoCredito.setId(DocumentoTipo.CREDITO_A_REALIZAR);
		CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
		cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);

		// Cria os itens de cobrança de documento para os creditos a realizar
		for(CreditoARealizar creditoARealizar : colecaoCreditoARealizar){

			CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();
			// cria o item de documento de cobrança
			cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
			cobrancaDocumentoItem.setDocumentoTipo(documentoTipoCredito);
			cobrancaDocumentoItem.setContaGeral(null);
			CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
			creditoARealizarGeral.setCreditoARealizar(creditoARealizar);
			creditoARealizarGeral.setId(creditoARealizar.getId());
			cobrancaDocumentoItem.setCreditoARealizarGeral(creditoARealizarGeral);
			cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
			cobrancaDocumentoItem.setDebitoACobrarGeral(null);
			cobrancaDocumentoItem.setValorItemCobrado(creditoARealizar.getValorTotal());
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());
			cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
			cobrancaDocumentoItem.setUltimaAlteracao(new Date());

			collCobrancaDocumentoItem.add(cobrancaDocumentoItem);
		}

		if(collCobrancaDocumentoItem != null && !collCobrancaDocumentoItem.isEmpty()){
			getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaDocumentoItem);
		}

		return collCobrancaDocumentoItem;

	}

	private CobrancaDocumento inserirCobrancaDocumento(Imovel imovel, DocumentoTipo documentoTipo,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, Empresa empresa, BigDecimal valorDocumento,
					Date dataAtual, BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto, CobrancaCriterio cobrancaCriterio,
					CobrancaAcao cobrancaAcao, Cliente cliente, DocumentoEmissaoForma documentoEmissaoForma, boolean possuiItens,
					Integer idFaturamentoGrupoCronogramaMensal, Integer idResolucaoDiretoria) throws ControladorException{

		// Item 2
		// Cria o documento de cobrança - Seta as informações necessárias para criar o documento de
		// cobrança
		CobrancaDocumento documentoCobranca = new CobrancaDocumento();
		documentoCobranca.setDocumentoTipo(documentoTipo);

		// Vinculando o documento cobranca ao comando Faturamento (SE Aviso de corte for rodado
		// atravez do comando faturamento)
		if(idFaturamentoGrupoCronogramaMensal != null){
			FaturamentoGrupoCronogramaMensal faturamento = new FaturamentoGrupoCronogramaMensal();
			faturamento.setId(idFaturamentoGrupoCronogramaMensal);
			documentoCobranca.setFaturamentoGrupoCronogramaMensal(faturamento);
		}

		// Seta com qualquer valor para inserir, depois da inserção pegar o id
		// do documentoCobranca gerado para atualizar o mesmo registro
		documentoCobranca.setNumeroSequenciaDocumento(1);
		documentoCobranca.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		documentoCobranca.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);

		if(imovel != null){
			documentoCobranca.setImovel(imovel);
			documentoCobranca.setLocalidade(imovel.getLocalidade());
			documentoCobranca.setQuadra(imovel.getQuadra());
			documentoCobranca.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
			documentoCobranca.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			documentoCobranca.setImovelPerfil(imovel.getImovelPerfil());
		}

		documentoCobranca.setEmissao(dataAtual);
		documentoCobranca.setValorTaxa(BigDecimal.ZERO);
		documentoCobranca.setValorDocumento(valorDocumento);

		// Inicio Alterado por Sávio Luiz Data:27/07/2007

		/*
		 * Alterado por Raphael Rossiter em 18/09/2007 (Analistas: Aryed Lins e
		 * Rosana Carvalho) OBJ: Gravar o valor dos acréscimos e o valor do
		 * desconto para os documentos de cobranca que forem de EXTRATO DE
		 * DÉBITO
		 */
		documentoCobranca.setValorAcrescimos(valorAcrescimosImpontualidade);

		if(documentoTipo.getId() != null
						&& (documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_SUPRIMIDO)
										|| documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_CORTADO)
										|| documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_LIGADO)
										|| documentoTipo.getId().equals(DocumentoTipo.EXTRATO_DE_DEBITO)
										|| documentoTipo.getId().equals(DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO) || documentoTipo
										.getId().equals(DocumentoTipo.EXTRATO_DE_DEBITO_PARCELAMENTO_CARTAO))){

			documentoCobranca.setValorDesconto(valorDesconto);

		}else{
			documentoCobranca.setValorDesconto(BigDecimal.ZERO);
		}
		// Fim Alterado por Sávio Luiz Data:27/07/2007

		documentoCobranca.setDocumentoEmissaoForma(documentoEmissaoForma);
		documentoCobranca.setMotivoNaoEntregaDocumento(null);
		documentoCobranca.setEmpresa(empresa);
		documentoCobranca.setUltimaAlteracao(new Date());
		documentoCobranca.setCobrancaCriterio(cobrancaCriterio);
		documentoCobranca.setCobrancaAcao(cobrancaAcao);
		documentoCobranca.setCliente(cliente);

		CobrancaAcaoSituacao cobrancaAcaoSituacao = null;

		// [SB0005] - Gerar Documento de Cobrança (CAST_ID PENDENTE)
		// if(cobrancaAcao == null || cobrancaAcao.getServicoTipo() == null){
		// cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		// cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.ENVIADOS);
		// documentoCobranca.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
		// documentoCobranca.setDataSituacaoAcao(documentoCobranca.getEmissao());
		// }else{
		cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.PENDENTE);
		documentoCobranca.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
		// }
		if(possuiItens){
			CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);
			documentoCobranca.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
		}

		if(idResolucaoDiretoria != null){
			ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
			resolucaoDiretoria.setId(idResolucaoDiretoria);

			documentoCobranca.setResolucaoDiretoria(resolucaoDiretoria);
		}

		// Recupera o código do documento de cobrança
		Integer idDocumentoCobranca;

		idDocumentoCobranca = (Integer) this.getControladorUtil().inserir(documentoCobranca);
		// Seta o código no objeto
		documentoCobranca.setId(idDocumentoCobranca);

		return documentoCobranca;

	}

	/**
	 * @author isilva
	 * @param idPerfilParcelamento
	 * @param idRD
	 * @param idImovelSituacaoTipo
	 * @param idImovelPerfil
	 * @param idSubcategoria
	 * @param valorMinimoDebitoParcelar
	 * @param valorMaximoDebitoParcelar
	 * @param tipoPesquisa
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarExstenciaPerfilParcelamento(Integer idPerfilParcelamento, Integer idRD, Integer idImovelSituacaoTipo,
					Integer idImovelPerfil, Integer idSubcategoria, BigDecimal valorMinimoDebitoParcelar,
					BigDecimal valorMaximoDebitoParcelar, String tipoPesquisa) throws ControladorException{

		Collection<ParcelamentoPerfil> retorno = new ArrayList<ParcelamentoPerfil>();

		try{
			Collection retornoConsulta = this.repositorioCobranca.pesquisarExstenciaPerfilParcelamento(idPerfilParcelamento, idRD,
							idImovelSituacaoTipo, idImovelPerfil, idSubcategoria, valorMinimoDebitoParcelar, valorMaximoDebitoParcelar,
							tipoPesquisa);

			if(retornoConsulta != null && !retornoConsulta.isEmpty()){

				boolean existe = false;
				Iterator iter = retornoConsulta.iterator();
				while(iter.hasNext()){
					ParcelamentoPerfil parcelamentoPerfil = (ParcelamentoPerfil) iter.next();

					if(parcelamentoPerfil.getValorMinimoDebitoAParcelarFaixaDebito() != null
									&& parcelamentoPerfil.getValorMaximoDebitoAParcelarFaixaDebito() != null){

						if((valorMinimoDebitoParcelar.compareTo(parcelamentoPerfil.getValorMinimoDebitoAParcelarFaixaDebito()) >= 0 && valorMinimoDebitoParcelar
										.compareTo(parcelamentoPerfil.getValorMaximoDebitoAParcelarFaixaDebito()) <= 0)
										|| (valorMaximoDebitoParcelar.compareTo(parcelamentoPerfil
														.getValorMinimoDebitoAParcelarFaixaDebito()) >= 0 && valorMaximoDebitoParcelar
														.compareTo(parcelamentoPerfil.getValorMaximoDebitoAParcelarFaixaDebito()) <= 0)){

							existe = true;
							retorno.add(parcelamentoPerfil);
						}

					}

					if(existe){
						break;
					}

				}
			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImoveisPorSetorComercial(
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Integer idSetorComercial, Integer indicadorCriterio,
					CobrancaAcao acaoCobranca, CobrancaAtividade atividadeCobranca,
					Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando, CobrancaCriterio cobrancaCriterioComando,
					String anoMesReferenciaInicial, String anoMesReferenciaFinal, Date dataVencimentoInicial, Date dataVencimentoFinal,
					Date dataAtual, SistemaParametro sistemaParametros, CobrancaGrupo grupoCobranca, Integer idFuncionalidadeIniciada,
					Integer idFaturamentoGrupoCronogramaMensal, ClienteRelacaoTipo clienteRelacaoTipo)
					throws ControladorException{

		// -------------------------------------------------------------------------
		// Caso quantidade de dias cortado informado no critério.
		// -------------------------------------------------------------------------
		Date dataCortado = null;
		if(cobrancaCriterioComando.getQtdDiasCortado() != null){
			dataCortado = Util.subtrairNumeroDiasDeUmaData(dataAtual, cobrancaCriterioComando.getQtdDiasCortado());
		}
		// -------------------------------------------------------------------------

		Integer[] idsTipoDocumentoAIgnorar = null;
		int idTipoDocumentoAGerar = acaoCobranca.getDocumentoTipo().getId();

		switch(idTipoDocumentoAGerar){
			case DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL:
				idsTipoDocumentoAIgnorar = new Integer[6];
				idsTipoDocumentoAIgnorar[0] = DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO;
				idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL;
				idsTipoDocumentoAIgnorar[2] = DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO;
				idsTipoDocumentoAIgnorar[3] = DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL;
				idsTipoDocumentoAIgnorar[4] = DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO;
				idsTipoDocumentoAIgnorar[5] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
				break;
			case DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO:
			case DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL:
			case DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO:
			case DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL:
			case DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO:
				idsTipoDocumentoAIgnorar = new Integer[2];
				idsTipoDocumentoAIgnorar[0] = idTipoDocumentoAGerar;
				idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
				break;
			default:
				idsTipoDocumentoAIgnorar = new Integer[1];
				idsTipoDocumentoAIgnorar[0] = idTipoDocumentoAGerar;
				break;
		}

		Integer idGrupoCobranca = null;
		if(grupoCobranca != null){
			idGrupoCobranca = grupoCobranca.getId();
		}

		Collection colecaoImoveis = getControladorImovel().pesquisarImoveisPorSetorComercialCriterioCobranca(idSetorComercial,
						cobrancaCriterioComando.getId(), dataCortado, idGrupoCobranca, idsTipoDocumentoAIgnorar, acaoCobranca.getId(),
						cobrancaAcaoAtividadeComando);

		// Acrescentando mensagem no Log da aplicação
		String msgLog = "Gerando Atv Cobrança para [" + colecaoImoveis.size() + "] Imoveis do idSetor [" + idSetorComercial + "]";
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getRotaInicial() != null
						&& cobrancaAcaoAtividadeComando.getRotaFinal() != null){
			msgLog = msgLog + ", com Rota no intervalo [" + cobrancaAcaoAtividadeComando.getRotaInicial().getId() + " a "
							+ cobrancaAcaoAtividadeComando.getRotaFinal().getId() + "]";
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getNumeroQuadraInicial() != null
						&& cobrancaAcaoAtividadeComando.getNumeroQuadraFinal() != null){
			msgLog = msgLog + ", com Quadra no intervalo [" + cobrancaAcaoAtividadeComando.getNumeroQuadraInicial() + " a "
							+ cobrancaAcaoAtividadeComando.getNumeroQuadraFinal() + "]";
		}

		LOGGER.info(msgLog);

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = gerarAtividadeCobrancaPorImoveis(
						cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, idSetorComercial, indicadorCriterio, acaoCobranca,
						atividadeCobranca, colecaoCobrancaCriterioLinhaComando, cobrancaCriterioComando, anoMesReferenciaInicial,
						anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
						idFuncionalidadeIniciada, colecaoImoveis, idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);

		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos
		// documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}

	private GerarAtividadeAcaoCobrancaHelper gerarAtividadeCobrancaPorImoveis(
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Integer idSetorComercial, Integer indicadorCriterio,
					CobrancaAcao acaoCobranca, CobrancaAtividade atividadeCobranca,
					Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando, CobrancaCriterio cobrancaCriterioComando,
					String anoMesReferenciaInicial, String anoMesReferenciaFinal, Date dataVencimentoInicial, Date dataVencimentoFinal,
					Date dataAtual, SistemaParametro sistemaParametros, Integer idFuncionalidadeIniciada, Collection colecaoImoveis,
					Integer idFaturamentoGrupoCronogramaMensal, ClienteRelacaoTipo relacaoClienteImovel) throws ControladorException{

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = criarHelperAtividadeCobranca();

		if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){

			Imovel imovel = new Imovel();
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			Quadra quadra = new Quadra();
			Localidade localidade = new Localidade();
			SetorComercial setorComercial = new SetorComercial();
			CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
			Empresa empresa = new Empresa();

			imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
			imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
			imovel.setImovelPerfil(imovelPerfil);
			imovel.setQuadra(quadra);
			imovel.setLocalidade(localidade);
			imovel.setSetorComercial(setorComercial);
			imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

			LogradouroCep logradouroCep = null;

			Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

			int imoveisIterados = 0;

			while(iteratorColecaoImoveis.hasNext()){

				Object[] arrayImovel = (Object[]) iteratorColecaoImoveis.next();

				imovel.setId((Integer) arrayImovel[0]);
				ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);

				ligacaoEsgotoSituacao.setId((Integer) arrayImovel[2]);
				imovelPerfil.setId((Integer) arrayImovel[3]);

				// caso a ação de cobrança gere a ordem de serviço
				if(acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null){
					// seta a empresa cobranca
					empresa.setId((Integer) arrayImovel[13]);

				}else{
					// seta a empresa
					empresa.setId((Integer) arrayImovel[4]);

				}

				localidade.setId((Integer) arrayImovel[5]);
				setorComercial.setCodigo((Integer) arrayImovel[6]);

				quadra.setNumeroQuadra((Integer) arrayImovel[7]);
				imovel.setLote((Short) arrayImovel[8]);

				imovel.setLote((Short) arrayImovel[9]);

				quadra.setId((Integer) arrayImovel[10]);

				cobrancaSituacaoTipo.setId((Integer) arrayImovel[11]);

				imovel.setIndicadorDebitoConta((Short) arrayImovel[12]);

				if((Integer) arrayImovel[14] != null){
					logradouroCep = new LogradouroCep();
					logradouroCep.setId((Integer) arrayImovel[14]);
					imovel.setLogradouroCep(logradouroCep);
				}

				if((Short) arrayImovel[15] != null){
					imovel.setIndicadorExclusao((Short) arrayImovel[15]);
				}

				// item 2
				// cria o objeto que vai armazenar temporariamente os dados retornados pelo
				// [SB0003], para cada imóvel
				GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = null;

				// [SB0003] - Gerar Atividade de Ação de Cobrança para o imóvel
				gerarAtividadeAcaoCobrancaHelperTemp = this.gerarAtividadeAcaoCobrancaParaImovel(cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, imovel, indicadorCriterio, acaoCobranca, atividadeCobranca,
								cobrancaCriterioComando, colecaoCobrancaCriterioLinhaComando, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
								idFaturamentoGrupoCronogramaMensal, relacaoClienteImovel);

				// se o objeto for diferente de nulo
				if(gerarAtividadeAcaoCobrancaHelperTemp != null){
					// recupera a quantidade de documentos de cobrança, quantidade de itens cobrados
					// e o valor do
					// documento do objeto retornado pelo [SB0003]
					gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
									.getQuantidadeDocumentosCobranca() + 1);

					gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
									.getQuantidadeItensCobradosDocumentos()
									+ gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos());

					gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
									.getValorDocumentosCobranca().add(gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca()));

					// Caso seja um comando eventual e a quantidade de documentos gerados seja igual
					// a quantidade máxima de documentos especificada no comando

					// Alterado por Chico, 06/06/08, analista: Ana Breda
					// caso seja um comando de cronograma, verificar é foi preenchida a quantidade
					// maxima de documentos a ser gerada
					if((cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getQuantidadeMaximaDocumentos() != null && cobrancaAcaoAtividadeComando
									.getQuantidadeMaximaDocumentos().equals(
													gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca()))
									|| (cobrancaAcaoAtividadeCronograma != null
													&& cobrancaAcaoAtividadeCronograma.getQuantidadeMaximaDocumentos() != null && cobrancaAcaoAtividadeCronograma
													.getQuantidadeMaximaDocumentos().equals(
																	gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca()))){
						// não roda mais os imóveis das rotas posteriores
						break;
					}
				}

				imoveisIterados++;
				// 1.2.2. Para cada 500 imóveis e no último imóvel, o sistema registra mensagem
				// <<Inclui>> [UC3043 Registrar Log de Execução do Processo], passando o id da
				// funcionalidade iniciada e a mensagem ["Quantidade de imóveis processados (Id do
				// Setor Comercial) " + quantidade de imóveis já processados].
				if((imoveisIterados % 500 == 0) || (colecaoImoveis.size() == imoveisIterados)){
					this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada, "Quantidade de imóveis processados" + //
									idSetorComercial == null ? "" : " (" + idSetorComercial + ")" + //
									": " + imoveisIterados);
				}

			}
		}

		return gerarAtividadeAcaoCobrancaHelper;
	}

	private GerarAtividadeAcaoCobrancaHelper criarHelperAtividadeCobranca(){

		// cria o objeto que vai armazenas os dados
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

		// inicializa os valores de quantidade de documentos, quantidade de itens cobrados e valor
		// do documento de cobrança
		gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
		gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(0);
		gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(BigDecimal.ZERO);
		return gerarAtividadeAcaoCobrancaHelper;
	}

	/**
	 * @author Andre Nishimura
	 * @date Fevereiro/2011
	 */
	public void inserirOrgaoExterno(String descricao) throws ControladorException{

		FiltroOrgaoExterno filtro = new FiltroOrgaoExterno();
		filtro.adicionarParametro(new ParametroSimples(FiltroOrgaoExterno.DESCRICAO, descricao));
		if(!getControladorUtil().pesquisar(filtro, OrgaoExterno.class.getName()).isEmpty()){
			throw new ControladorException("atencao.ja_existe_registro_descricao");
		}
		OrgaoExterno orgaoExterno = new OrgaoExterno();
		orgaoExterno.setDescricao(descricao);
		orgaoExterno.setUltimaAlteracao(new Date());
		orgaoExterno.setIndicadorUso(1);
		getControladorUtil().inserir(orgaoExterno);
	}

	/**
	 * @author Andre Nishimura
	 * @date Fevereiro/2011
	 */
	public void inserirInfracaoTipo(String descricao, String descricaoAbreviada) throws ControladorException{

		FiltroInfracaoTipo filtro = new FiltroInfracaoTipo();
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoTipo.DESCRICAO, descricao));
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoTipo.DESCRICAOABREVIADA, descricao));
		if(!getControladorUtil().pesquisar(filtro, InfracaoTipo.class.getName()).isEmpty()){
			throw new ControladorException("atencao.ja_existe_registro_descricao");
		}
		InfracaoTipo infracaoTipo = new InfracaoTipo();
		infracaoTipo.setDescricao(descricao);
		infracaoTipo.setDescricaoAbreviada(descricaoAbreviada);
		infracaoTipo.setIndicadorUso(new Short("1"));
		infracaoTipo.setUltimaAlteracao(new Date());
		getControladorUtil().inserir(infracaoTipo);
	}

	/**
	 * @author Andre Nishimura
	 * @date Fevereiro/2011
	 */
	public void inserirInfracaoLigacaoSituacao(String descricao, String descricaoAbreviada) throws ControladorException{

		FiltroInfracaoLigacaoSituacao filtro = new FiltroInfracaoLigacaoSituacao();
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoLigacaoSituacao.DESCRICAO, descricao));
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoLigacaoSituacao.DESCRICAOABREVIADA, descricao));
		if(!getControladorUtil().pesquisar(filtro, InfracaoLigacaoSituacao.class.getName()).isEmpty()){
			throw new ControladorException("atencao.ja_existe_registro_descricao");
		}
		InfracaoLigacaoSituacao infracaoLigacaoSituacao = new InfracaoLigacaoSituacao();
		infracaoLigacaoSituacao.setDescricao(descricao);
		infracaoLigacaoSituacao.setDescricaoAbreviada(descricaoAbreviada);
		infracaoLigacaoSituacao.setIndicadorUso(new Short("1"));
		infracaoLigacaoSituacao.setUltimaAlteracao(new Date());
		getControladorUtil().inserir(infracaoLigacaoSituacao);
	}

	/**
	 * @author Andre Nishimura
	 * @date Fevereiro/2011
	 */
	public void inserirInfracaoImovelSituacao(String descricao, String descricaoAbreviada) throws ControladorException{

		FiltroInfracaoImovelSituacao filtro = new FiltroInfracaoImovelSituacao();
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoImovelSituacao.DESCRICAO, descricao));
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoImovelSituacao.DESCRICAOABREVIADA, descricao));
		if(!getControladorUtil().pesquisar(filtro, InfracaoImovelSituacao.class.getName()).isEmpty()){
			throw new ControladorException("atencao.ja_existe_registro_descricao");
		}
		InfracaoImovelSituacao infracaoImovelSituacao = new InfracaoImovelSituacao();
		infracaoImovelSituacao.setDescricao(descricao);
		infracaoImovelSituacao.setDescricaoAbreviada(descricaoAbreviada);
		infracaoImovelSituacao.setIndicadorUso(new Short("1"));
		infracaoImovelSituacao.setUltimaAlteracao(new Date());
		getControladorUtil().inserir(infracaoImovelSituacao);
	}

	/**
	 * @date 16/02/2011
	 * @author Andre Nishimura
	 */
	public void atualizarInfracaoImovelSituacao(InfracaoImovelSituacao bean) throws ControladorException{

		FiltroInfracaoImovelSituacao filtro = new FiltroInfracaoImovelSituacao();
		filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoImovelSituacao.DESCRICAO, bean.getDescricao()));
		bean.setUltimaAlteracao(new Date());
		getControladorUtil().atualizar(bean);
	}

	/**
	 * @date 16/02/2011
	 * @author Andre Nishimura
	 */
	public void atualizarInfracaoLigacaoSituacao(InfracaoLigacaoSituacao bean) throws ControladorException{

		bean.setUltimaAlteracao(new Date());
		getControladorUtil().atualizar(bean);
	}

	/**
	 * @date 16/02/2011
	 * @author Andre Nishimura
	 */
	public void atualizarInfracaoTipo(InfracaoTipo bean) throws ControladorException{

		bean.setUltimaAlteracao(new Date());
		getControladorUtil().atualizar(bean);
	}

	/**
	 * @author Andre Nishimura
	 * @date fevereiro/2011
	 */
	public void inserirInfracaoPerfil(Integer idCategoria, Integer idSubcategoria, Integer idImovelPerfil, Integer idInfracaoTipo)
					throws ControladorException{

		if(idCategoria == null || idCategoria.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Categoria");
		}

		if(idSubcategoria == null || idSubcategoria.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Subcategoria");
		}

		if(idImovelPerfil == null || idImovelPerfil.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Perfil do Imovel");
		}

		if(idInfracaoTipo == null || idInfracaoTipo.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Tipo Infracao");
		}

		if(getControladorUtil().pesquisar(idCategoria, Categoria.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Categoria");
		}
		if(getControladorUtil().pesquisar(idSubcategoria, Subcategoria.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Subcategoria");
		}
		if(getControladorUtil().pesquisar(idImovelPerfil, ImovelPerfil.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Perfil do Imovel");
		}
		if(getControladorUtil().pesquisar(idInfracaoTipo, InfracaoTipo.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Tipo Infracao");
		}

		Categoria categoria = new Categoria();
		categoria.setId(idCategoria);
		Subcategoria subcategoria = new Subcategoria();
		subcategoria.setId(idSubcategoria);
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(idImovelPerfil);
		InfracaoTipo infracaoTipo = new InfracaoTipo();
		infracaoTipo.setId(idInfracaoTipo);

		InfracaoPerfil infracaoPerfil = new InfracaoPerfil();

		infracaoPerfil.setCategoria(categoria);
		infracaoPerfil.setSubcategoria(subcategoria);
		infracaoPerfil.setImovelPerfil(imovelPerfil);
		infracaoPerfil.setInfracaoTipo(infracaoTipo);

		infracaoPerfil.setUltimaAlteracao(new Date());

		getControladorUtil().inserir(infracaoPerfil);

	}

	public void atualizarInfracaoPerfil(Integer id, Integer idCategoria, Integer idSubcategoria, Integer idImovelPerfil,
					Integer idInfracaoTipo) throws ControladorException{

		if(idCategoria == null || idCategoria.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Categoria");
		}

		if(idSubcategoria == null || idSubcategoria.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Subcategoria");
		}

		if(idImovelPerfil == null || idImovelPerfil.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Perfil do Imovel");
		}

		if(idInfracaoTipo == null || idInfracaoTipo.intValue() == -1){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Tipo Infracao");
		}

		if(getControladorUtil().pesquisar(idCategoria, Categoria.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Categoria");
		}
		if(getControladorUtil().pesquisar(idSubcategoria, Subcategoria.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Subcategoria");
		}
		if(getControladorUtil().pesquisar(idImovelPerfil, ImovelPerfil.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Perfil do Imovel");
		}
		if(getControladorUtil().pesquisar(idInfracaoTipo, InfracaoTipo.class, false) == null){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio", null, "Tipo Infracao");
		}

		Categoria categoria = new Categoria();
		categoria.setId(idCategoria);
		Subcategoria subcategoria = new Subcategoria();
		subcategoria.setId(idSubcategoria);
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(idImovelPerfil);
		InfracaoTipo infracaoTipo = new InfracaoTipo();
		infracaoTipo.setId(idInfracaoTipo);

		InfracaoPerfil infracaoPerfil = (InfracaoPerfil) getControladorUtil().pesquisar(id, InfracaoPerfil.class, false);

		infracaoPerfil.setCategoria(categoria);
		infracaoPerfil.setSubcategoria(subcategoria);
		infracaoPerfil.setImovelPerfil(imovelPerfil);
		infracaoPerfil.setInfracaoTipo(infracaoTipo);

		infracaoPerfil.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(infracaoPerfil);

	}

	/**
	 * Retorno emite o extrato de débito do imóvel e retorna o código de barras.
	 * 
	 * @author Yara Souza
	 * @date 03/02/2011
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public String[] retornarCodBarrasExtratoDebito(Imovel imovel) throws ControladorException{

		String[] retorno = new String[5];

		String representacaoNumericaCodBarraSemDigito = "";

		Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(imovel.getId());

		if(cliente != null){

			Date dataVencimentoInicial = Util.converteStringParaDate("01/01/1980");
			Date dataVencimentoFinal = Util.converteStringParaDate("31/12/9999");
			String anoMesReferenciaInicial = "198001";
			String anoMesReferenciaFinal = "999912";

			// seta valores constantes para chamar o metodo que consulta debitos do imovel
			Integer tipoImovel = Integer.valueOf(1);
			Short indicadorGeracaoTaxaCobranca = 2;

			// Obtendo os débitos do imovel
			ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = this.obterDebitoImovelOuCliente(tipoImovel.intValue(), imovel.getId()
							.toString(), null, null, anoMesReferenciaInicial, anoMesReferenciaFinal, dataVencimentoInicial,
							dataVencimentoFinal, 1, 1, 1, 1, 1, 1, 1, true, null, null, null, null, ConstantesSistema.SIM,
							ConstantesSistema.SIM, ConstantesSistema.SIM);

			Collection<ContaValoresHelper> colecaoContaValores = colecaoDebitoImovel.getColecaoContasValores();

			ContaValoresHelper dadosConta = null;

			BigDecimal valorConta = BigDecimal.ZERO;
			BigDecimal valorAcrescimo = BigDecimal.ZERO;
			BigDecimal valorDesconto = BigDecimal.ZERO;
			// BigDecimal valorMulta = BigDecimal.ZERO;
			// BigDecimal valorJurosMora = BigDecimal.ZERO;

			if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){

				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores.iterator();

				// percorre a colecao de conta somando o valor para obter um valor total
				while(colecaoContaValoresIterator.hasNext()){

					dadosConta = colecaoContaValoresIterator.next();
					valorConta = valorConta.add(dadosConta.getConta().getValorTotal()
									.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					valorAcrescimo = valorAcrescimo.add(dadosConta.getValorTotalContaValores().setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO));
					// valorMulta =
					// valorMulta.add(dadosConta.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					// valorJurosMora =
					// valorJurosMora.add(dadosConta.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));

				}
			}

			Collection<DebitoACobrar> colecaoDebitoACobrar = colecaoDebitoImovel.getColecaoDebitoACobrar();

			BigDecimal valorDebitoACobrar = new BigDecimal("0.00");
			BigDecimal valorDebitoACobrarSemJurosParcelamento = new BigDecimal("0.00");
			DebitoACobrar dadosDebito = null;

			if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
				Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar.iterator();

				// percorre a colecao de debito a cobrar somando o valor para obter um valor total
				while(colecaoDebitoACobrarIterator.hasNext()){

					dadosDebito = colecaoDebitoACobrarIterator.next();
					valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito.getValorTotal());

					if(dadosDebito.getDebitoTipo() != null
									&& !dadosDebito.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
						valorDebitoACobrarSemJurosParcelamento = valorDebitoACobrarSemJurosParcelamento.add(dadosDebito.getValorTotal());
					}
				}
			}

			Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel.getColecaoCreditoARealizar();

			BigDecimal valorCreditoARealizar = new BigDecimal("0.00");
			BigDecimal valorCreditoARealizarSemDescontosParcelamento = new BigDecimal("0.00");
			CreditoARealizar dadosCredito = null;

			if(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()){
				Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar.iterator();

				// percorre a colecao de credito a realizar somando o valor para obter um valor
				// total
				while(colecaoCreditoARealizarIterator.hasNext()){

					dadosCredito = colecaoCreditoARealizarIterator.next();
					valorCreditoARealizar = valorCreditoARealizar.add(dadosCredito.getValorTotal());

					if(dadosCredito.getCreditoOrigem() != null
									&& !dadosCredito.getCreditoOrigem().getId().equals(CreditoOrigem.DESCONTOS_CONCEDIDOS_NO_PARCELAMENTO)){
						valorCreditoARealizarSemDescontosParcelamento = valorCreditoARealizarSemDescontosParcelamento.add(dadosCredito
										.getValorTotal());
					}
				}
			}

			BigDecimal valorGuiaPagamento = new BigDecimal("0.00");

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = colecaoDebitoImovel.getColecaoGuiasPagamentoValores();
			if(colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()){

				Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores.iterator();

				// Percorre a colecao de Prestações da Guia de Pagamento somando o valor para obter
				// o total em aberto
				while(colecaoGuiaPagamentoValoresHelperIterator.hasNext()){
					GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = colecaoGuiaPagamentoValoresHelperIterator.next();
					valorGuiaPagamento = valorGuiaPagamento.add(dadosGuiaPagamentoValoresHelper.getValorTotalPrestacao().setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				}
			}

			// Soma o valor total dos debitos e subtrai dos creditos
			BigDecimal valorTotalSemAcrescimo = valorConta.add(valorDebitoACobrar);
			valorTotalSemAcrescimo = valorTotalSemAcrescimo.add(valorGuiaPagamento);
			valorTotalSemAcrescimo = valorTotalSemAcrescimo.subtract(valorCreditoARealizar);

			BigDecimal valorTotalComAcrescimo = valorTotalSemAcrescimo.add(valorAcrescimo);
			BigDecimal valorToralSemAcrescimoESemJurosParcelamento = valorConta.add(valorDebitoACobrarSemJurosParcelamento);
			valorToralSemAcrescimoESemJurosParcelamento = valorToralSemAcrescimoESemJurosParcelamento.add(valorGuiaPagamento);
			valorToralSemAcrescimoESemJurosParcelamento = valorToralSemAcrescimoESemJurosParcelamento
							.subtract(valorCreditoARealizarSemDescontosParcelamento);

			if(valorTotalComAcrescimo.compareTo(BigDecimal.ZERO) > 0){

				DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
				documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

				DocumentoTipo documentoTipo = new DocumentoTipo();
				documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO);

				ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this.gerarEmitirExtratoDebito(imovel,
								indicadorGeracaoTaxaCobranca, colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar,
								valorAcrescimo, valorDesconto, valorTotalComAcrescimo, colecaoCreditoARealizar, cliente, null, null);

				CobrancaDocumento documentoCobranca = extratoDebitoRelatorioHelper.getDocumentoCobranca();
				String seqDocCobranca = "" + documentoCobranca.getNumeroSequenciaDocumento();
				BigDecimal valorTotalDocGerado = documentoCobranca.getValorDocumento();

				// [UC0229] Obtém a representação numérica do código de barra
				String representacaoNumericaCodBarra = getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(5,
								valorTotalDocGerado, documentoCobranca.getLocalidade().getId(), imovel.getId(), null, null, null, null,
								seqDocCobranca, documentoCobranca.getDocumentoTipo().getId(), null, null, null, null, null, null);

				representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
								+ representacaoNumericaCodBarra.substring(12, 23) + representacaoNumericaCodBarra.substring(24, 35)
								+ representacaoNumericaCodBarra.substring(36, 47);

				retorno[0] = representacaoNumericaCodBarraSemDigito;
				retorno[1] = valorTotalSemAcrescimo.toString();
				retorno[2] = valorAcrescimo.toString();
				retorno[3] = valorTotalComAcrescimo.toString();
				retorno[4] = documentoCobranca.getId().toString();

			}else{
				retorno = null;
			}

		}

		return retorno;
	}

	private Collection<CobrancaDocumentoItem> pesquisarDebitosNotificados(Integer idDocumentoCobrancaAcaoPrecedente)
					throws ControladorException{

		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = null;

		try{

			Collection<Object[]> colecaoCobrancaDocumentoItemArray = repositorioCobranca
							.pesquisarCobrancaDocumentoItemContaGuiaPagamentoDebitoACobrar(idDocumentoCobrancaAcaoPrecedente);

			if(colecaoCobrancaDocumentoItemArray != null){

				colecaoCobrancaDocumentoItem = new ArrayList<CobrancaDocumentoItem>(colecaoCobrancaDocumentoItemArray.size());

				for(Object[] coluna : colecaoCobrancaDocumentoItemArray){

					CobrancaDocumentoItem cobrDocItem = new CobrancaDocumentoItem();

					if(coluna[0] != null){ // 0 cnta_id
						Conta conta = new Conta();
						conta.setId((Integer) coluna[0]);
						ContaGeral contaGeral = new ContaGeral();
						contaGeral.setId((Integer) coluna[0]);
						contaGeral.setConta(conta);
						cobrDocItem.setContaGeral(contaGeral);
					}

					if(coluna[1] != null){// 1 gpag_id
						GuiaPagamento guiaPagamento = new GuiaPagamento();
						guiaPagamento.setId((Integer) coluna[1]);
						GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
						guiaPagamentoGeral.setId((Integer) coluna[1]);
						guiaPagamentoGeral.setGuiaPagamento(guiaPagamento);
						cobrDocItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
					}

					if(coluna[2] != null){// 2 dbac_id
						DebitoACobrar debitoACobrar = new DebitoACobrar();
						debitoACobrar.setId((Integer) coluna[2]);
						DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
						debitoACobrarGeral.setId((Integer) coluna[2]);
						debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
						cobrDocItem.setDebitoACobrarGeral(debitoACobrarGeral);
					}

					colecaoCobrancaDocumentoItem.add(cobrDocItem);
				}

				colecaoCobrancaDocumentoItemArray.clear();
				colecaoCobrancaDocumentoItemArray = null;
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoCobrancaDocumentoItem;
	}

	/**
	 * Método responsável pela montagem do HELPER para geração de relatório em formato CSV.
	 * 
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaAcaoComando
	 * @param dataEmissao
	 * @param idCobrancaAcao
	 * @return
	 * @throws ControladorException
	 */

	private Collection pesquisarTodosCobrancaDocumentoParaEmitirJuridico(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando,
					Date dataEmissao, Integer idCobrancaAcao) throws ControladorException{

		Collection colecaoDocCobJuridicoHelper = null;

		try{

			Collection<Object[]> documentosCobrancaJuridico = repositorioCobranca.pesquisarTodosCobrancaDocumentoParaEmitirJuridico(
							idCobrancaAcaoCronograma, idCobrancaAcaoComando, dataEmissao, idCobrancaAcao);

			Integer contador = 1;
			if(documentosCobrancaJuridico != null){

				colecaoDocCobJuridicoHelper = new ArrayList<DocumentoCobrancaJuridicoHelper>(documentosCobrancaJuridico.size());

				for(Object[] linha : documentosCobrancaJuridico){

					DocumentoCobrancaJuridicoHelper helper = new DocumentoCobrancaJuridicoHelper();

					// cobranca documento
					helper.setIdCobrancaDocumento((Integer) linha[0]);

					// imovel
					helper.setIdImovel((Integer) linha[1]);

					// documento tipo
					helper.setIdDocumentoTipo((Integer) linha[3]);

					// qtdDebito
					Integer qtdDebito = repositorioCobranca.pesquisarQuantidadeCobrancaDocumentoItem(helper.getIdCobrancaDocumento());

					if(qtdDebito != null){
						helper.setQtdDebito(qtdDebito);
					}else{
						helper.setQtdDebito(0);
					}

					// valorDebito
					helper.setValorDebito((BigDecimal) linha[20]);

					// grupoCobranca
					helper.setGrupoCobranca((Integer) linha[21]);

					// setorComercial
					helper.setSetorComercial((Integer) linha[9]);

					// localidade
					helper.setIdLocalidade((Integer) linha[10]);

					// bairro
					if(linha[11] != null){
						helper.setBairro((String) linha[11]);
					}else{
						helper.setBairro("");
					}

					// cep
					if(linha[22] != null){
						Integer cep = (Integer) linha[22];
						helper.setCep(cep.toString());
					}

					// ligacaoSituacao
					if(linha[23] != null){
						helper.setLigacaoSituacao((String) linha[23]);
					}else{
						helper.setLigacaoSituacao("");
					}

					// perfil imovel
					helper.setIdImovelPerfil((Integer) linha[24]);

					// ligacaoData
					if(linha[25] != null){
						helper.setLigacaoData(Util.formatarData((Date) linha[25]));
					}else{
						helper.setLigacaoData("");
					}

					// Hidrometro Instalacao Historico
					// ligacaoTipo
					// medidorNumero
					if(linha[27] != null){
						helper.setLigacaoTipo(String.valueOf(1));
						helper.setMedidorNumero((String) linha[19]);

					}else{
						helper.setLigacaoTipo(String.valueOf(0));
						helper.setMedidorNumero("");
					}

					// dataEmissaoDocumento
					if(linha[26] != null){
						helper.setIndicadorDocumentoEmitido("S");
						Date dataEmissaoDoc = (Date) linha[26];
						helper.setDataEmissaoDocumento(Util.formatarData(dataEmissaoDoc));
					}else{
						helper.setIndicadorDocumentoEmitido("N");
						helper.setDataEmissaoDocumento("");
					}

					// num. Sequencial
					helper.setNumeroSequenciaDocumento((Integer) linha[2]);

					// imovelNumero
					if(linha[6] != null){
						String numero = (String) linha[6];
						helper.setImovelNumero(Util.converterStringParaInteger(numero));
					}

					Imovel imovel = new Imovel();

					imovel.setLogradouroBairro(new LogradouroBairro());
					imovel.getLogradouroBairro().setBairro(new Bairro());

					imovel.setLogradouroCep(new LogradouroCep());
					imovel.getLogradouroCep().setLogradouro(new Logradouro());

					imovel.setQuadra(new Quadra());
					imovel.getQuadra().setRota(new Rota());

					imovel.setLocalidade(new Localidade());
					imovel.setSetorComercial(new SetorComercial());
					imovel.setImovelContaEnvio(new ImovelContaEnvio());

					imovel.setId((Integer) linha[1]);
					imovel.setLote((Short) linha[4]);
					imovel.setSubLote((Short) linha[5]);
					imovel.setNumeroImovel((String) linha[6]);
					imovel.setComplementoEndereco((String) linha[7]);
					imovel.setNumeroSequencialRota((Integer) linha[8]);

					imovel.getSetorComercial().setId((Integer) linha[9]);
					imovel.getLocalidade().setId((Integer) linha[10]);

					imovel.getLogradouroBairro().getBairro().setNome((String) linha[11]);
					imovel.getLogradouroCep().getLogradouro().setId((Integer) linha[12]);
					imovel.getLogradouroCep().getLogradouro().setNome((String) linha[13]);

					imovel.getQuadra().setId((Integer) linha[14]);
					imovel.getRota().setId((Integer) linha[15]);

					if(linha[16] != null){
						imovel.setEnderecoReferencia(new EnderecoReferencia());
						imovel.getEnderecoReferencia().setDescricao((String) linha[16]);
					}

					if(linha[17] != null){
						imovel.getLogradouroCep().getLogradouro().setLogradouroTipo(new LogradouroTipo());
						imovel.getLogradouroCep().getLogradouro().getLogradouroTipo().setDescricao((String) linha[17]);
					}

					if(linha[18] != null){
						imovel.getLogradouroCep().getLogradouro().setLogradouroTitulo(new LogradouroTitulo());
						imovel.getLogradouroCep().getLogradouro().getLogradouroTitulo().setDescricao((String) linha[18]);
					}

					if(linha[28] != null){
						imovel.getImovelContaEnvio().setId((Integer) linha[28]);
					}

					if(linha[29] != null){
						imovel.setIndicadorDebitoConta((Short) linha[29]);
					}

					helper.setInscricao(imovel.getInscricaoFormatada().replaceAll("\\.", "-"));

					helper.setEnderecoImovel(imovel.getEnderecoFormatadoAbreviadoSemBairro());

					if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getCep() != null){
						helper.setCep(imovel.getLogradouroCep().getCep().getCepFormatado());
					}

					// roteiro
					String idSetorComercial = "";
					if(imovel.getSetorComercial().getId() != null){
						idSetorComercial = imovel.getSetorComercial().getId().toString();
					}
					String idRota = "";
					if(imovel.getRota().getId() != null){
						idRota = imovel.getRota().getId().toString();
					}
					String numeroSequencialRota = "";
					if(imovel.getNumeroSequencialRota() != null){
						numeroSequencialRota = imovel.getNumeroSequencialRota().toString();
					}

					helper.setRoteiro(idSetorComercial + "-" + idRota + "-" + numeroSequencialRota);

					// enderecoEntrega
					Object[] enderecoEntrega = getControladorFaturamento().obterEnderecoEntregaCliente(imovel);
					String endereco = (String) enderecoEntrega[0];
					helper.setEnderecoEntrega(endereco);

					// cliente
					Cliente cliente = getControladorCliente().retornarDadosClienteUsuario(imovel.getId());

					if(cliente.getNome() != null){
						helper.setNomeCliente(cliente.getNome());
					}

					if(cliente.getCnpj() != null){
						helper.setDocumentoTipo1("CGC");
						helper.setDocumentoNumero1(cliente.getCnpj());
					}else if(cliente.getCpf() != null){
						helper.setDocumentoTipo1("CPF");
						helper.setDocumentoNumero1(cliente.getCpf());
					}else{
						helper.setDocumentoTipo1("");
						helper.setDocumentoNumero1("");
					}

					if(cliente.getRg() != null){
						helper.setDocumentoTipo2("RG");
						helper.setDocumentoNumero2(cliente.getRg());
					}else{
						helper.setDocumentoTipo2("");
						helper.setDocumentoNumero2("");
					}

					Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFonePorCliente(cliente.getId());

					for(Object objetoClienteFone : colecaoClienteFone){
						ClienteFone clienteFone = (ClienteFone) objetoClienteFone;
						if(clienteFone.getFoneTipo().getId().intValue() == FoneTipo.CELULAR.intValue()){
							if(clienteFone.getTelefone() != null){
								helper.setCelular(clienteFone.getTelefone());
							}else{
								helper.setCelular("");
							}
						}else if(clienteFone.getFoneTipo().getId().intValue() == FoneTipo.RECADO.intValue()){
							if(clienteFone.getTelefone() != null){
								helper.setFoneRecado(clienteFone.getTelefone());
							}else{
								helper.setFoneRecado("");
							}
						}else if(clienteFone.getFoneTipo().getId().intValue() == FoneTipo.COMERCIAL.intValue()){
							if(clienteFone.getTelefone() != null){
								helper.setFoneComercial(clienteFone.getTelefone());
							}else{
								helper.setFoneComercial("");
							}
						}else if(clienteFone.getFoneTipo().getId().intValue() == FoneTipo.RESIDENCIAL.intValue()){
							if(clienteFone.getTelefone() != null){
								helper.setFoneResidencial(clienteFone.getTelefone());
							}else{
								helper.setFoneResidencial("");
							}
						}else if(clienteFone.getFoneTipo().getId().intValue() == FoneTipo.OUTRO.intValue()){
							if(clienteFone.getTelefone() != null){
								helper.setFoneComercial(clienteFone.getTelefone());
							}else{
								helper.setFoneComercial("");
							}
						}
					}

					// Categoria
					Collection colecaoCategorias = getControladorImovel().pesquisarCategoriasImovel(imovel);
					for(Object objetoCategorias : colecaoCategorias){
						Categoria categoria = (Categoria) objetoCategorias;
						helper.setImovelCategoria(categoria.getId() + "-" + categoria.getDescricao());
					}

					// Tipo debito
					if(imovel.getIndicadorDebitoConta().intValue() == ConstantesSistema.SIM.intValue()){
						helper.setDebitoTipo("Debito Automatico");
					}else{
						helper.setDebitoTipo("Cobrança em Fatura");
					}

					// Grande Cliente
					if(helper.getIdImovelPerfil() != null){
						if(helper.getIdImovelPerfil() == ImovelPerfil.GRANDE.intValue()){
							helper.setDescricaoImovelPerfil("GRANDE CLIENTE");
						}else{
							helper.setDescricaoImovelPerfil("");
						}
					}else{
						helper.setDescricaoImovelPerfil("");
					}

					// Ultima Leitura
					Integer ultimaLeitura = getControladorMicromedicao().obterUltimaLeituraDoImovel(imovel.getId());
					if(ultimaLeitura != null){
						helper.setUltimaLeitura(String.valueOf(ultimaLeitura));
					}else{
						helper.setUltimaLeitura("");
					}

					// Codigo Barras
					String representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
									PagamentoTipo.PAGAMENTO_TIPO_COBANCA_MATRICULA_IMOVEL, helper.getValorDebito(),
									helper.getIdLocalidade(), helper.getIdImovel(), null, null, null, null,
									String.valueOf(helper.getNumeroSequenciaDocumento()), helper.getIdDocumentoTipo(), null, null, null,
									null, null, null);

					helper.setCodigoBarras(representacaoNumericaCodBarra);

					// OS
					OrdemServico ordemServico = this.getControladorOrdemServico().pesquisarOSPorDocumentoCobranca(
									helper.getIdCobrancaDocumento());
					if(ordemServico != null){
						// situacao da Execuçao da OS e data da execuçao da OS
						if(ordemServico.getSituacao() == OrdemServico.SITUACAO_ENCERRADO){
							helper.setExecucaoOSSituacao("S");
							helper.setDataExecucao(Util.formatarData(ordemServico.getDataExecucao()));
						}else{
							helper.setExecucaoOSSituacao("N");
							helper.setDataExecucao("");
						}

					}else{
						helper.setExecucaoOSSituacao("N");
						helper.setDataExecucao("");
					}

					// Sequencial
					helper.setLinhaSequencial(contador);
					// numero do imovel
					helper.setImovelNumero(imovel.getId());

					contador++;

					colecaoDocCobJuridicoHelper.add(helper);

				}
			}

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoDocCobJuridicoHelper;
	}

	/**
	 * @author Andre Nishimura
	 * @date 14 de Março de 2011
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcaoAtividadeCronograma
	 */
	public void atualizarTotalizadoresCobrancaAcaoAtividade(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma) throws ControladorException{

		try{
			Integer quantidadeDocumentos = 0;
			Integer quantidadeItensCobrados = 0;
			BigDecimal valorDocumentos = BigDecimal.ZERO;

			List totalizadores = repositorioCobranca.consultarTotalizadoresAcaoCobrancaAtividade(cobrancaAcaoAtividadeComando,
							cobrancaAcaoAtividadeCronograma);

			if(totalizadores != null && !totalizadores.isEmpty()){
				Object[] totalizador = (Object[]) totalizadores.iterator().next();
				quantidadeDocumentos = (Integer) totalizador[0];
				valorDocumentos = (BigDecimal) totalizador[1];
				quantidadeItensCobrados = (Integer) totalizador[2];

				if(cobrancaAcaoAtividadeComando != null){
					Integer idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando.getId();

					LOGGER.warn("*#*#*#* quantidadeItensCobrados " + quantidadeItensCobrados + " do comando "
									+ idCobrancaAcaoAtividadeComando);
				}
			}

			if(cobrancaAcaoAtividadeComando != null){

				cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(quantidadeDocumentos);
				cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(quantidadeItensCobrados);
				cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentos);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);

			}else if(cobrancaAcaoAtividadeCronograma != null){

				cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentos);
				cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobrados);
				cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentos);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);
			}

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}catch(ControladorException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	private Object[] calcularOpcoesParcelamentoParaCartaComOpcoesParcelamento(CobrancaDocumento documentoCobranca,
					Collection<ContaValoresHelper> colecaoContas, Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento,
					Collection<DebitoACobrar> colecaoDebitosACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar)
					throws ControladorException{

		Object[] retorno = new Object[2];

		int quantidadePreParcelamentoOpcaoInseridas = 0;

		// Para o cálculo do Débito Total Atualizado
		BigDecimal valorTotalContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidade = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;
		BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
		BigDecimal valorRestanteACobrar = BigDecimal.ZERO;
		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorMulta = BigDecimal.ZERO;
		BigDecimal debitoTotalAtualizado = BigDecimal.ZERO;
		BigDecimal valorDescontoAntiguidade = BigDecimal.ZERO;
		BigDecimal valorDescontoInatividade = BigDecimal.ZERO;
		BigDecimal valorJurosParcelamento = BigDecimal.ZERO;

		Iterator contaValores = colecaoContas.iterator();
		while(contaValores.hasNext()){
			ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
			valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
			if(contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")){
				valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria().setScale(
								Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
			}
			if(contaValoresHelper.getValorJurosMora() != null && !contaValoresHelper.getValorJurosMora().equals("")){
				valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
			}
			if(contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")){
				valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
			}

			// Para cálculo do Acrescimo de Impontualidade
			valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper
							.getValorTotalContaValoresParcelamento());
		}

		if(colecaoGuiasPagamento != null){
			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresSelecionadas = colecaoGuiasPagamento;

			valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_TOTAL));
			valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ATUALIZACAO_MONETARIA));
			valorJurosMora = valorJurosMora.add(calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_JUROS_MORA));
			valorMulta = valorMulta.add(calcularValoresGuia(colecaoGuiaPagamentoValoresSelecionadas,
							ConstantesSistema.PARCELAMENTO_VALOR_GUIA_MULTA));
			valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(calcularValoresGuia(
							colecaoGuiaPagamentoValoresSelecionadas, ConstantesSistema.PARCELAMENTO_VALOR_GUIA_ACRESCIMO_IMPONTUALIDADE));
		}

		// Acrescimos por Impotualidade
		BigDecimal retornoSoma = BigDecimal.ZERO;
		retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);
		// Para o cálculo do Débito Total Atualizado
		valorTotalAcrescimoImpontualidade = retornoSoma;

		Iterator debitoACobrarValores = colecaoDebitosACobrar.iterator();

		final int indiceCurtoPrazo = 0;
		final int indiceLongoPrazo = 1;

		Collection<Integer> tiposParcelamento = Util
						.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO
						.executar());

		while(debitoACobrarValores.hasNext()){
			DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

			// [FS0022]-Verificar existência de juros sobre imóvel
			if(debitoACobrar.getDebitoTipo().getId() != null
							&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){

				// Debitos A Cobrar - Serviço
				if(debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.SERVICO_NORMAL)){
					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotal();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
									valorRestanteACobrar);
					valorTotalRestanteServicosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteServicosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}

				// Debitos A Cobrar - Parcelamento
				if(tiposParcelamento != null && tiposParcelamento.contains(debitoACobrar.getFinanciamentoTipo().getId())){

					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotal();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradas(),
									valorRestanteACobrar);
					valorTotalRestanteParcelamentosACobrarCurtoPrazo
									.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteParcelamentosACobrarLongoPrazo
									.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}
			}else if(debitoACobrar.getDebitoTipo().getId() != null
							&& debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
				valorJurosParcelamento = valorJurosParcelamento.add(debitoACobrar.getValorTotal());
			}
		}

		// Serviços
		valorTotalRestanteServicosACobrar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo.add(valorTotalRestanteServicosACobrarLongoPrazo);
		valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
						.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);

		if(colecaoCreditoARealizar != null){
			Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();

			while(creditoARealizarValores.hasNext()){
				CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();
				valorCreditoARealizar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorCreditoARealizar = valorCreditoARealizar.add(creditoARealizar.getValorTotal());
			}
		}
		// Débito Total Atualizado

		debitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalContas);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalGuiasPagamento);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalAcrescimoImpontualidade);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteServicosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteParcelamentosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado.add(valorJurosParcelamento);
		debitoTotalAtualizado = debitoTotalAtualizado.subtract(valorCreditoARealizar);
		debitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		CobrancaAcao cobrancaAcao = documentoCobranca.getCobrancaAcao();
		CobrancaCriterio cobrancaCriterio = cobrancaAcao.getCobrancaCriterio();

		Short indicadorEmissaoContaRevisao = cobrancaCriterio.getIndicadorEmissaoContaRevisao();
		Short indicadorConsideraGuiaPagamento = cobrancaAcao.getIndicadorConsideraGuiaPagamento();
		Short indicadorAcrescimoImpontualidade = cobrancaAcao.getIndicadorAcrescimoImpontualidade();
		Short indicadorCobrancaDebACobrar = cobrancaAcao.getIndicadorCobrancaDebACobrar();
		Short indicadorConsideraCreditoRealizar = cobrancaAcao.getIndicadorConsideraCreditoRealizar();

		PreParcelamento preParcelamento = this.inserirPreParcelamento(documentoCobranca, valorTotalContas,
						valorTotalAcrescimoImpontualidade, valorTotalRestanteServicosACobrar, valorTotalRestanteParcelamentosACobrar,
						valorTotalGuiasPagamento, valorCreditoARealizar, valorAtualizacaoMonetaria, valorJurosMora, valorMulta,
						debitoTotalAtualizado, valorDescontoAntiguidade, valorDescontoInatividade, indicadorEmissaoContaRevisao,
						indicadorConsideraGuiaPagamento, indicadorAcrescimoImpontualidade, indicadorCobrancaDebACobrar,
						indicadorConsideraCreditoRealizar);

		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, documentoCobranca.getImovel().getId()));
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CONSUMO_TARIFA);

		Collection<Imovel> imovelPesquisado = getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

		filtroImovel.getColecaoCaminhosParaCarregamentoEntidades().clear();
		filtroImovel.limparListaParametros();
		filtroImovel = null;

		// Verificar existêncioa da matrícula do imóvel
		Imovel imovel = null;
		if(imovelPesquisado != null && !imovelPesquisado.isEmpty()){
			imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
		}

		BigDecimal valorTarifaMinimaAguaImovel = getControladorFaturamento().obterTarifaMinimaAguaImovel(imovel).setScale(
						Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = null;
		try{
			parcelamentoQuantidadePrestacao = repositorioCobranca.pesquisarParcelamentoQuantidadePrestacaoMaximaParcela(documentoCobranca
							.getCobrancaAcao().getPrimeiraResolucaoDiretoria().getId());
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		try{
			inserirPreParcelamentoOpcao(preParcelamento, valorTotalAcrescimoImpontualidade, debitoTotalAtualizado,
							valorTarifaMinimaAguaImovel, new Short("1"), parcelamentoQuantidadePrestacao, documentoCobranca
											.getCobrancaAcao().getPrimeiraResolucaoDiretoria(), colecaoContas, colecaoGuiasPagamento,
							documentoCobranca, valorJurosParcelamento);

			quantidadePreParcelamentoOpcaoInseridas = quantidadePreParcelamentoOpcaoInseridas + 1;

		}catch(ControladorException ex){
			// Alteração para não abortar o batch de carta de opções de parcelamento para os
			// seguintes erros
			if(!ex.getMessage().equals("atencao.nao.existe.condicao.parcelamento.quantidade.prestacoes")
							&& !ex.getMessage().equals("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil")
							&& !ex.getMessage().equals("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel")
							&& !ex.getMessage().equals("atencao.nao.existe.situacao.imovel.correspondente.situacao.agua.esgoto")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.debito.atualizado.menor.ou.igual.zero")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.menor.ou.igual.zero")){
				throw ex;
			}
		}

		try{
			parcelamentoQuantidadePrestacao = repositorioCobranca.pesquisarParcelamentoQuantidadePrestacaoMaximaParcela(documentoCobranca
							.getCobrancaAcao().getSegundaResolucaoDiretoria().getId());
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		try{
			inserirPreParcelamentoOpcao(preParcelamento, valorTotalAcrescimoImpontualidade, debitoTotalAtualizado,
							valorTarifaMinimaAguaImovel, new Short("2"), parcelamentoQuantidadePrestacao, documentoCobranca
											.getCobrancaAcao().getSegundaResolucaoDiretoria(), colecaoContas, colecaoGuiasPagamento,
							documentoCobranca, valorJurosParcelamento);

			quantidadePreParcelamentoOpcaoInseridas = quantidadePreParcelamentoOpcaoInseridas + 1;

		}catch(ControladorException ex){
			// Alteração para não abortar o batch de carta de opções de parcelamento para os
			// seguintes erros
			if(!ex.getMessage().equals("atencao.nao.existe.condicao.parcelamento.quantidade.prestacoes")
							&& !ex.getMessage().equals("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil")
							&& !ex.getMessage().equals("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel")
							&& !ex.getMessage().equals("atencao.nao.existe.situacao.imovel.correspondente.situacao.agua.esgoto")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.debito.atualizado.menor.ou.igual.zero")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.menor.ou.igual.zero")){
				throw ex;
			}
		}

		try{
			parcelamentoQuantidadePrestacao = repositorioCobranca.pesquisarParcelamentoQuantidadePrestacaoMaximaParcela(documentoCobranca
							.getCobrancaAcao().getTerceiraResolucaoDiretoria().getId());
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		try{
			inserirPreParcelamentoOpcao(preParcelamento, valorTotalAcrescimoImpontualidade, debitoTotalAtualizado,
							valorTarifaMinimaAguaImovel, new Short("3"), parcelamentoQuantidadePrestacao, documentoCobranca
											.getCobrancaAcao().getTerceiraResolucaoDiretoria(), colecaoContas, colecaoGuiasPagamento,
							documentoCobranca, valorJurosParcelamento);

			quantidadePreParcelamentoOpcaoInseridas = quantidadePreParcelamentoOpcaoInseridas + 1;

		}catch(ControladorException ex){
			// Alteração para não abortar o batch de carta de opções de parcelamento para os
			// seguintes erros
			if(!ex.getMessage().equals("atencao.nao.existe.condicao.parcelamento.quantidade.prestacoes")
							&& !ex.getMessage().equals("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil")
							&& !ex.getMessage().equals("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel")
							&& !ex.getMessage().equals("atencao.nao.existe.situacao.imovel.correspondente.situacao.agua.esgoto")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.debito.atualizado.menor.ou.igual.zero")
							&& !ex.getMessage().equals("atencao.pre.parcelamento.valor.total.menor.ou.igual.zero")){
				throw ex;
			}
		}

		retorno[0] = preParcelamento;
		retorno[1] = quantidadePreParcelamentoOpcaoInseridas;

		return retorno;
	}

	private void inserirPreParcelamentoOpcao(PreParcelamento preParcelamento, BigDecimal valorTotalAcrescimoImpontualidade,
					BigDecimal debitoTotalAtualizado, BigDecimal valorTarifaMinimaAguaImovel, Short posicao,
					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao, ResolucaoDiretoria resolucaoDiretoria,
					Collection<ContaValoresHelper> colecaoContas, Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento,
					CobrancaDocumento documentoCobranca, BigDecimal valorJurosParcelamento) throws ControladorException{

		if(parcelamentoQuantidadePrestacao != null){
			BigDecimal valorEntradaMinima = BigDecimal.ZERO;
			BigDecimal percentualEntradaMinima = BigDecimal.ZERO;
			BigDecimal valorCem = new BigDecimal(100);
			BigDecimal valorDebitoDesconto = BigDecimal.ZERO;

			PreParcelamentoOpcao preParcelamentoOpcao = new PreParcelamentoOpcao();

			valorDebitoDesconto = debitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO).subtract(
							valorTotalAcrescimoImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

			if(parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada() != null
							&& parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().compareTo(BigDecimal.ZERO) > 0){

				percentualEntradaMinima = parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().setScale(
								Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				if(parcelamentoQuantidadePrestacao.getIndicadorEntradaParcelamento().intValue() == ParcelamentoQuantidadePrestacao.DEBITO_ATUALIZADO
								.intValue()){
					valorEntradaMinima = debitoTotalAtualizado.subtract(valorTotalAcrescimoImpontualidade).multiply(
									percentualEntradaMinima.divide(valorCem));
				}else if(parcelamentoQuantidadePrestacao.getIndicadorEntradaParcelamento().intValue() == ParcelamentoQuantidadePrestacao.DEBITO_ORIGINAL
								.intValue()){
					valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
				}
			}

			if(parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel() != null
							&& parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().compareTo(BigDecimal.ZERO) > 0

			){

				percentualEntradaMinima = parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().setScale(
								Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

				valorEntradaMinima = valorTarifaMinimaAguaImovel.multiply(percentualEntradaMinima.divide(valorCem));

			}

			try{
				Boolean usouValorAtualizado = true;
				ParcelamentoFaixaValor parcelamentoFaixaValorMenor = null;

				// Caso tenha uma faixa com o valor atualizado...
				parcelamentoFaixaValorMenor = repositorioCobranca.obterParcelamentoFaixaValor(parcelamentoQuantidadePrestacao.getId(),
								valorDebitoDesconto, ParcelamentoFaixaValor.DEBITO_ATUALIZADO);

				// Caso contrario refaz a pesquisa com o valor original (Sem os acrescimos)
				if(parcelamentoFaixaValorMenor == null){
					parcelamentoFaixaValorMenor = repositorioCobranca.obterParcelamentoFaixaValor(parcelamentoQuantidadePrestacao.getId(),
									debitoTotalAtualizado.subtract(valorTotalAcrescimoImpontualidade),
									ParcelamentoFaixaValor.DEBITO_ORIGINAL);
					usouValorAtualizado = false;
				}

				if(parcelamentoFaixaValorMenor != null){
					if(parcelamentoFaixaValorMenor.getPercentualFaixa() != null){
						percentualEntradaMinima = parcelamentoFaixaValorMenor.getPercentualFaixa().setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);

						if(usouValorAtualizado){
							valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
						}else{
							valorEntradaMinima = debitoTotalAtualizado.subtract(valorTotalAcrescimoImpontualidade).multiply(
											percentualEntradaMinima.divide(valorCem));
						}
					}else if(parcelamentoFaixaValorMenor.getValorFixoEntrada() != null){
						valorEntradaMinima = parcelamentoFaixaValorMenor.getValorFixoEntrada();
					}else{
						throw new ControladorException("atencao.parcelamento.faixa.valor.nao.cadastrado.para.este.debito");
					}
				}

			}catch(ErroRepositorioException e){
				throw new ControladorException(e.getMessage());
			}

			preParcelamentoOpcao.setPreParcelamento(preParcelamento);
			preParcelamentoOpcao.setPosicaoOpcao(posicao);

			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = new IndicadoresParcelamentoHelper();
			indicadoresParcelamentoHelper.setIndicadorContasRevisao(preParcelamento.getIndicadorContasRevisao().intValue());
			indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(preParcelamento.getIndicadorDebitoACobrar().intValue());
			indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(preParcelamento.getIndicadorCreditoARealizar().intValue());
			indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(preParcelamento.getIndicadorGuiasPagamento().intValue());
			indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(preParcelamento.getIndicadorAcrescimosImpontualdade()
							.intValue());

			NegociacaoOpcoesParcelamentoHelper negociacao = obterOpcoesDeParcelamento(resolucaoDiretoria.getId(), preParcelamento
							.getImovel().getId(), valorEntradaMinima, preParcelamento.getImovel().getLigacaoAguaSituacao().getId(),
							preParcelamento.getImovel().getLigacaoEsgotoSituacao().getId(), preParcelamento.getImovel().getImovelPerfil()
											.getId(), Util.formataMesAno(new Date()), preParcelamento.getIndicadorRestabelecimento()
											.intValue(), colecaoContas, preParcelamento.getValorDebitoAtualizado(),
							preParcelamento.getValorMulta(), preParcelamento.getValorJurosMora(),
							preParcelamento.getValorAtualizacaoMonetaria(), preParcelamento.getImovel()
											.getNumeroReparcelamentoConsecutivos() != null ? preParcelamento.getImovel()
											.getNumeroReparcelamentoConsecutivos().intValue() : 0, colecaoGuiasPagamento,
							Usuario.USUARIO_BATCH, preParcelamento.getValorDebitoAtualizado(),
							preParcelamento.getAnoMesReferenciaFaturamento(), 999912, indicadoresParcelamentoHelper, new Date().toString(),
							true, parcelamentoQuantidadePrestacao);

			indicadoresParcelamentoHelper = null;

			OpcoesParcelamentoHelper opcoesParcelamentoHelperMaior = null;

			Iterator it = negociacao.getOpcoesParcelamento().iterator();
			while(it.hasNext()){
				OpcoesParcelamentoHelper opcoesParcelamentoHelper = (OpcoesParcelamentoHelper) it.next();
				if(opcoesParcelamentoHelperMaior == null
								|| opcoesParcelamentoHelperMaior.getQuantidadePrestacao() < opcoesParcelamentoHelper
												.getQuantidadePrestacao()){
					opcoesParcelamentoHelperMaior = opcoesParcelamentoHelper;
				}
			}

			preParcelamentoOpcao.setValorMulta(BigDecimal.ZERO);
			preParcelamentoOpcao.setValorAtualizacaoMonetaria(BigDecimal.ZERO);
			preParcelamentoOpcao.setPercentualDescontoAcrescimoImpontualidade(negociacao.getValorDescontoAcrecismosImpotualidade());
			preParcelamentoOpcao.setValorDescontosAcrescimosAntiguidade(negociacao.getValorDescontoAntiguidade());
			preParcelamentoOpcao.setValorDescontosAcrescimosImpontualidade(negociacao.getValorDescontoAcrecismosImpotualidade());
			preParcelamentoOpcao.setValorDescontosAcrescimosInatividade(negociacao.getValorDescontoInatividade() != null ? negociacao
							.getValorDescontoInatividade() : BigDecimal.ZERO);
			preParcelamentoOpcao.setPercentualDescontoAntiguidade(negociacao.getPercentualDescontoAntiguidadeDebito() != null ? negociacao
							.getPercentualDescontoAntiguidadeDebito() : BigDecimal.ZERO);
			preParcelamentoOpcao
							.setPercentualDescontoInatividade(negociacao.getPercentualDescontoInatividadeLigacaoAgua() != null ? negociacao
											.getPercentualDescontoInatividadeLigacaoAgua() : BigDecimal.ZERO);
			preParcelamentoOpcao.setValorDescontoSancoesRDEspecial(negociacao.getValorDescontoSancoesRDEspecial());
			preParcelamentoOpcao.setValorDescontoTarifaSocialRDEspecial(negociacao.getValorDescontoTarifaSocialRDEspecial());

			if(opcoesParcelamentoHelperMaior != null && opcoesParcelamentoHelperMaior.getQuantidadePrestacao().intValue() > 1){

				if(opcoesParcelamentoHelperMaior.getValorEntradaMinima() == null
								|| opcoesParcelamentoHelperMaior.getValorEntradaMinima().compareTo(BigDecimal.ZERO) == 0){
					preParcelamentoOpcao.setNumeroPrestacoes(opcoesParcelamentoHelperMaior.getQuantidadePrestacao().intValue() - 1);
					preParcelamentoOpcao.setValorEntrada(opcoesParcelamentoHelperMaior.getValorPrestacao());
					preParcelamentoOpcao.setValorPrestacao(opcoesParcelamentoHelperMaior.getValorPrestacao());
				}else{
					preParcelamentoOpcao.setNumeroPrestacoes(opcoesParcelamentoHelperMaior.getQuantidadePrestacao().intValue());
					preParcelamentoOpcao.setValorEntrada(opcoesParcelamentoHelperMaior.getValorEntradaMinima());
					preParcelamentoOpcao.setValorPrestacao(opcoesParcelamentoHelperMaior.getValorPrestacao());
				}

				preParcelamentoOpcao.setValorJurosMora(opcoesParcelamentoHelperMaior.getTaxaJuros());

				valorJurosParcelamento = valorJurosParcelamento.add((((opcoesParcelamentoHelperMaior.getValorPrestacao()
								.multiply(new BigDecimal(opcoesParcelamentoHelperMaior.getQuantidadePrestacao())))
								.add(opcoesParcelamentoHelperMaior.getValorEntradaMinima())).add(negociacao.getValorDescontoAntiguidade()))
								.subtract(preParcelamento.getValorDebitoAtualizado()));

				preParcelamentoOpcao.setValorJurosParcelamento(valorJurosParcelamento);

				BigDecimal valorDebitoAtualizado = preParcelamento.getValorDebitoAtualizado().add(
								preParcelamentoOpcao.getValorJurosParcelamento());

				preParcelamentoOpcao.setValorDebitoAtualizado(valorDebitoAtualizado);

				// ******* Campanha Parcelamento date 23/08/2011 ******************
				preParcelamentoOpcao.setNumeroMesesEntreParcelas(opcoesParcelamentoHelperMaior.getNumeroMesesEntreParcelas());

				preParcelamentoOpcao.setNumeroParcelasALancar(opcoesParcelamentoHelperMaior.getNumeroParcelasALancar());

				preParcelamentoOpcao.setNumeroMesesInicioCobranca(opcoesParcelamentoHelperMaior.getNumeroMesesInicioCobranca());

				preParcelamentoOpcao.setNumeroDiasVencimentoDaEntrada(opcoesParcelamentoHelperMaior.getNumeroDiasVencimentoDaEntrada());
				// *********** date 23/08/2011 ******************

			}else{
				preParcelamentoOpcao.setNumeroPrestacoes(1);
				if(negociacao.getValorEntrada() == null || negociacao.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
					// divida total
					BigDecimal dividaTotal = preParcelamento.getValorDebitoAtualizado();

					// desconto
					BigDecimal valorDescontos = (preParcelamentoOpcao.getValorDescontosAcrescimosAntiguidade() != null ? preParcelamentoOpcao
									.getValorDescontosAcrescimosAntiguidade() : BigDecimal.ZERO)
									.add(preParcelamentoOpcao.getValorDescontosAcrescimosImpontualidade() != null ? preParcelamentoOpcao
													.getValorDescontosAcrescimosImpontualidade() : BigDecimal.ZERO)
									.add(preParcelamentoOpcao.getValorDescontosAcrescimosInatividade() != null ? preParcelamentoOpcao
													.getValorDescontosAcrescimosInatividade() : BigDecimal.ZERO)
									.add(preParcelamentoOpcao.getValorDescontoSancoesRDEspecial() != null ? preParcelamentoOpcao
													.getValorDescontoSancoesRDEspecial() : BigDecimal.ZERO);

					preParcelamentoOpcao.setValorEntrada(dividaTotal.subtract(valorDescontos));
				}else{
					preParcelamentoOpcao.setValorEntrada(negociacao.getValorEntrada());
				}
				preParcelamentoOpcao.setValorPrestacao(BigDecimal.ZERO);
				preParcelamentoOpcao.setValorJurosMora(BigDecimal.ZERO);
				preParcelamentoOpcao.setValorJurosParcelamento(BigDecimal.ZERO);
				preParcelamentoOpcao.setValorDebitoAtualizado(preParcelamento.getValorDebitoAtualizado());

				// ******* Campanha Parcelamento date 23/08/2011 ******************
				preParcelamentoOpcao.setNumeroMesesInicioCobranca(1);

				preParcelamentoOpcao.setNumeroDiasVencimentoDaEntrada(1);
				// *********** date 23/08/2011 ******************
			}

			ParcelamentoPerfil perfilParcelamento = null;
			perfilParcelamento = this.obterPerfilParcelamento(preParcelamento.getImovel(), preParcelamento.getDocumentoCobranca()
							.getCobrancaAcao(), resolucaoDiretoria);
			preParcelamentoOpcao.setParcelamentoPerfil(perfilParcelamento);
			preParcelamentoOpcao.setUltimaAlteracao(new Date());

			// ***************** Verificar Diferença: Débito e Créditos **********
			verificarDiferencaDebitoCreditoImovelAParcelar(preParcelamento, preParcelamentoOpcao);
			// *******************************************************************

			getControladorUtil().inserir(preParcelamentoOpcao);

			negociacao = null;
			preParcelamentoOpcao = null;

		}
	}

	private ParcelamentoPerfil obterPerfilParcelamento(Imovel imovel, CobrancaAcao acaoCobranca, ResolucaoDiretoria resolucaoDiretoria){

		Integer idAgua = imovel.getLigacaoAguaSituacao() != null ? imovel.getLigacaoAguaSituacao().getId() : null;
		Integer idEsgoto = imovel.getLigacaoEsgotoSituacao() != null ? imovel.getLigacaoEsgotoSituacao().getId() : null;
		ParcelamentoPerfil perfilParcelamento = null;
		ImovelSituacao imovelSituacao = null;

		try{
			// Condição 1
			if(idAgua != null && idEsgoto != null){
				imovelSituacao = getControladorImovel().obterSituacaoImovel(idAgua, idEsgoto);
				// Condição 2
				if(imovelSituacao == null){
					imovelSituacao = getControladorImovel().obterSituacaoImovel(idAgua, null);
				}
			}
		}catch(ControladorException e1){
			return null;
		}

		if(imovelSituacao != null){
			try{
				Subcategoria subcategoria = obterSubCategoriaMaiorEconomia(imovel);
				perfilParcelamento = this.obterPerfilParcelamento(imovel.getId(), imovelSituacao.getImovelSituacaoTipo().getId(), imovel
								.getImovelPerfil().getId(), subcategoria.getId(), resolucaoDiretoria.getId(), true);
			}catch(ControladorException e){
				return null;
			}
		}else{
			return null;
		}

		return perfilParcelamento;
	}

	/**
	 * [UC0643] Inserir Ação de Cobrança
	 * [FS0011] - Verificar existência do perfil do imóvel dos critérios de cobrança nas Resoluções
	 * da Diretoria
	 * 
	 * @author Anderson Italo
	 * @date 02/03/2011
	 * @throws ControladorException
	 */
	private void verificarPerfilImovelCriterioResolucao(CobrancaAcao cobrancaAcao,
					Collection<ParcelamentoPerfil> colecaoPerfilParcelamento, int numeroOrderResolucao) throws ControladorException{

		FiltroCobrancaCriterioLinha filtroCobrancaCriterioLinha = new FiltroCobrancaCriterioLinha();
		filtroCobrancaCriterioLinha.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterioLinha.COBRANCA_CRITERIO_ID, cobrancaAcao
						.getCobrancaCriterio().getId()));
		filtroCobrancaCriterioLinha.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterioLinha.IMOVEL_PERFIL);

		Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = getControladorUtil().pesquisar(filtroCobrancaCriterioLinha,
						CobrancaCriterioLinha.class.getName());

		for(CobrancaCriterioLinha cobrancaCriterioLinha : colecaoCobrancaCriterioLinha){

			boolean encontrouPerfilImovel = false;
			for(ParcelamentoPerfil perfilParcelamento : colecaoPerfilParcelamento){

				if(((cobrancaCriterioLinha.getImovelPerfil() != null && perfilParcelamento.getImovelPerfil() != null) && (cobrancaCriterioLinha
								.getImovelPerfil().getId().intValue() == perfilParcelamento.getImovelPerfil().getId().intValue()))
								|| (perfilParcelamento.getImovelPerfil() == null)){
					encontrouPerfilImovel = true;
					break;
				}
			}

			if(encontrouPerfilImovel == false){
				if(numeroOrderResolucao == 1){
					throw new ControladorException("atencao.nao_existe_perfil_imovel_resolucao", null, cobrancaAcao
									.getPrimeiraResolucaoDiretoria().getNumeroResolucaoDiretoria(), cobrancaCriterioLinha.getImovelPerfil()
									.getDescricao());
				}else if(numeroOrderResolucao == 2){
					throw new ControladorException("atencao.nao_existe_perfil_imovel_resolucao", null, cobrancaAcao
									.getSegundaResolucaoDiretoria().getNumeroResolucaoDiretoria(), cobrancaCriterioLinha.getImovelPerfil()
									.getDescricao());
				}else if(numeroOrderResolucao == 3){
					throw new ControladorException("atencao.nao_existe_perfil_imovel_resolucao", null, cobrancaAcao
									.getTerceiraResolucaoDiretoria().getNumeroResolucaoDiretoria(), cobrancaCriterioLinha.getImovelPerfil()
									.getDescricao());
				}
			}
		}
	}

	/**
	 * UC01101 - Emitir Carta com Opção de parcelamento
	 * Esse método gera Cartas com opções de parcelamento
	 * Emitir Carta Opção de Parcelamento
	 * 
	 * @return void
	 */
	public void emitirCartaOpcaoParcelamento(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
					CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio, Usuario usuario) throws ControladorException{

		// * * * TRECHO DE CÓDIGO PARA CONTAR O TEMPO * * *
		// ini = System.currentTimeMillis();
		// dif = System.currentTimeMillis() - ini;
		// LOGGER.info("1 - ############################## -> " + dif);
		// ini = System.currentTimeMillis();

		Collection colecaoCobrancaDocumento = null;
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		Integer formatoArquivo = null;

		if(cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if(cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null){
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
			formatoArquivo = cobrancaAcaoAtividadeComando.getFormatoArquivo();
		}
		if(acaoCobranca != null && acaoCobranca.getId() != null){
			idAcaoCobranca = acaoCobranca.getId();
		}

		colecaoCobrancaDocumento = pesquisarTodosCobrancaDocumentoParaEmitir(idCronogramaAtividadeAcaoCobranca,
						idComandoAtividadeAcaoCobranca, dataAtualPesquisa, idAcaoCobranca);

		List<Object> colecaoEmitirCartaOpcaoParcelamentoHelper = this
						.obterColecaoEmitirCartaOpcaoParcelamentoHelper(colecaoCobrancaDocumento);

		// &*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
		// Monta os relatorios em blocos de 1000
		if(colecaoEmitirCartaOpcaoParcelamentoHelper != null && (colecaoEmitirCartaOpcaoParcelamentoHelper.size() > 0)){

			LOGGER.info("QUANTIDADE TOTAL = " + colecaoEmitirCartaOpcaoParcelamentoHelper.size());

			Collection<Collection<Object>> colecaoParcialEmitirCartaOpcaoParcelamentoHelper = this.dividirColecaoEmBlocos(
							colecaoEmitirCartaOpcaoParcelamentoHelper, ConstantesSistema.QUANTIDADE_LIMITE_RELATORIOS_POR_ARQUIVO);

			int totalBlocosContasAEmitir = (Util.dividirArredondarResultado(colecaoEmitirCartaOpcaoParcelamentoHelper.size(),
							ConstantesSistema.QUANTIDADE_BLOCO_IMPRESSOES_EMISSAO_CONTA_FATURAMENTO, BigDecimal.ROUND_CEILING));

			if(totalBlocosContasAEmitir == 0){
				totalBlocosContasAEmitir = 1;
			}
			colecaoEmitirCartaOpcaoParcelamentoHelper.clear();
			colecaoEmitirCartaOpcaoParcelamentoHelper = null;

			int contadorBlocoContasAEmitir = 1;

			LOGGER.info("QUANTIDADE BLOCOS = " + colecaoParcialEmitirCartaOpcaoParcelamentoHelper.size());

			if(formatoArquivo == null){
				formatoArquivo = TarefaRelatorio.TIPO_PDF;
			}

			int tipoFormatoRelatorio = TarefaRelatorio.TIPO_PDF;

			if(formatoArquivo == TarefaRelatorio.TIPO_CSV){
				tipoFormatoRelatorio = TarefaRelatorio.TIPO_ZIP;
			}

			for(Collection bloco : colecaoParcialEmitirCartaOpcaoParcelamentoHelper){

				Collection<EmitirCartaOpcaoParcelamentoHelper> tmp = bloco;

				String mensagemArquivo = "PARTE: " + contadorBlocoContasAEmitir + "/" + totalBlocosContasAEmitir;
				RelatorioCartaOpcaoParcelamento relatorioCartaOpcaoParcelamento = new RelatorioCartaOpcaoParcelamento(usuario);
				relatorioCartaOpcaoParcelamento.addParametro("colecaoEmitirCartaOpcaoParcelamentoHelper", tmp);
				relatorioCartaOpcaoParcelamento.addParametro("formatoArquivo", formatoArquivo);
				relatorioCartaOpcaoParcelamento.addParametro("tipoFormatoRelatorio", tipoFormatoRelatorio);
				relatorioCartaOpcaoParcelamento.addParametro("descricaoArquivo", mensagemArquivo);
				relatorioCartaOpcaoParcelamento.addParametro("exibirMensagemComprovante", true);

				this.getControladorBatch().iniciarProcessoRelatorio(relatorioCartaOpcaoParcelamento);
				contadorBlocoContasAEmitir++;
			}
			colecaoParcialEmitirCartaOpcaoParcelamentoHelper.clear();
			colecaoParcialEmitirCartaOpcaoParcelamentoHelper = null;
		}

		if(colecaoCobrancaDocumento != null){
			colecaoCobrancaDocumento.clear();
			colecaoCobrancaDocumento = null;
		}
		// &*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*

	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @param id
	 * @return
	 * @throws ControladorException
	 */
	public PreParcelamentoOpcao obterPreParcelamentoOpcao(Integer id) throws ControladorException{

		try{
			return repositorioCobranca.obterPreParcelamentoOpcao(id);
		}catch(ErroRepositorioException e){
			throw new ControladorException(e.getMessage());
		}
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @param id
	 * @param id
	 * @return
	 * @throws ControladorException
	 */
	public PreParcelamentoOpcao obterCobrancaDocumentoPreParcelamento(Integer seguencialDocCobrancao, Integer idPreParcelamentoOpcao)
					throws ControladorException{

		try{
			return repositorioCobranca.obterCobrancaDocumentoPreParcelamentoOpcao(seguencialDocCobrancao, idPreParcelamentoOpcao);
		}catch(ErroRepositorioException e){
			throw new ControladorException(e.getMessage());
		}
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @return
	 * @throws ControladorException
	 */
	public PreParcelamentoHelper obterPreParcelamento(CobrancaDocumento documentoCobranca) throws ControladorException{

		try{
			return repositorioCobranca.obterPreParcelamento(documentoCobranca);
		}catch(ErroRepositorioException e){
			throw new ControladorException(e.getMessage());
		}
	}

	/**
	 * [UC0645] Manter Ação de Cobrança
	 * [SB0002] - Remover Ação de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 11/03/2011
	 * @throws ControladorException
	 */
	public void removerAcaoCobranca(String[] selecaoCobrancaAcao, Usuario usuario) throws ControladorException{

		if(selecaoCobrancaAcao == null || selecaoCobrancaAcao.length < 1){
			throw new ControladorException("atencao.registros.nao_selecionados");
		}else{

			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			for(int i = 0; i < selecaoCobrancaAcao.length; i++){
				Integer idRegistroRemocao = new Integer(selecaoCobrancaAcao[i]);

				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idRegistroRemocao));

				Collection<CobrancaAcao> colecaoRegistroRemocao = this.getControladorUtil().pesquisar(filtroCobrancaAcao,
								CobrancaAcao.class.getName());

				filtroCobrancaAcao.limparListaParametros();

				CobrancaAcao cobrancaAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoRegistroRemocao);

				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				RegistradorOperacao registradorSistemaAbastecimento = new RegistradorOperacao(Operacao.OPERACAO_COBRANCA_ACAO_REMOVER,
								cobrancaAcao.getId(), cobrancaAcao.getId(), new UsuarioAcaoUsuarioHelper(usuario,
												UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				Operacao operacaoSistemaAbastecimento = new Operacao();
				operacaoSistemaAbastecimento.setId(Operacao.OPERACAO_COBRANCA_ACAO_REMOVER);

				OperacaoEfetuada operacaoEfetuadaUnidade = new OperacaoEfetuada();
				operacaoEfetuadaUnidade.setOperacao(operacaoSistemaAbastecimento);

				cobrancaAcao.setOperacaoEfetuada(operacaoEfetuadaUnidade);
				cobrancaAcao.adicionarUsuario(usuario, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorSistemaAbastecimento.registrarOperacao(cobrancaAcao);
				this.getControladorUtil().remover(cobrancaAcao);
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
			}
		}
	}

	/**
	 * retorna as Resolucões da Diretoria com data Vigência maior
	 * ou igual que a data atual
	 * [UC0643] Inserir Ação de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 08/11/2006
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaDataVigenciaFimMaiorIgualDataAtual() throws ControladorException{

		try{
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarResolucaoDiretoriaDataVigenciaFimMaiorIgualDataAtual();

			// erro no hibernate
		}catch(ErroRepositorioException ex){
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public Collection<CobrancaSituacaoHistorico> pesquisarCobrancaSituacaoHistorico(Integer idImovel, Integer anoMesFinal)
					throws ControladorException{

		Collection<CobrancaSituacaoHistorico> retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarCobrancaSituacaoHistorico(idImovel, anoMesFinal);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	public Integer pesquisarDebitosACobrarDeParcelamentoEmAberto(Integer idImovel, Integer anoMesReferencia,
					Collection<Integer> idsDebitoTipo) throws ControladorException{

		Integer retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarDebitosACobrarDeParcelamentoEmAberto(idImovel, anoMesReferencia, idsDebitoTipo);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * @author Andre Nishimura
	 * @date 17/03/2011
	 */
	public Integer obterSequenceInfracaoPerfil() throws ControladorException{

		Integer retorno;
		try{
			retorno = repositorioCobranca.obterSequenceInfracaoPerfil();
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}

	/**
	 * @author Andre Nishimura
	 * @date 17/03/2011
	 */
	public void inserirInfracaoPerfil(Collection colecaoInfracaoPerfil, Map mapInfracaoPerfilDebitoTipo) throws ControladorException{

		for(InfracaoPerfil infracaoPerfil : (Collection<InfracaoPerfil>) colecaoInfracaoPerfil){

			infracaoPerfil.setUltimaAlteracao(new Date());

			// Validção para não permitir a inclusão de infração perfil repetido
			FiltroInfracaoPerfil filtroInfracaoPerfil = new FiltroInfracaoPerfil();

			filtroInfracaoPerfil.adicionarParametro(new ParametroSimples(FiltroInfracaoPerfil.INFRACAO_TIPO_ID, infracaoPerfil
							.getInfracaoTipo().getId()));
			filtroInfracaoPerfil.adicionarParametro(new ParametroSimples(FiltroInfracaoPerfil.IMOVEL_PERFIL_ID, infracaoPerfil
							.getImovelPerfil().getId()));
			filtroInfracaoPerfil.adicionarParametro(new ParametroSimples(FiltroInfracaoPerfil.CATEGORIA_ID, infracaoPerfil.getCategoria()
							.getId()));
			filtroInfracaoPerfil.adicionarParametro(new ParametroSimples(FiltroInfracaoPerfil.SUBCATEGORIA_ID, infracaoPerfil
							.getSubcategoria().getId()));

			Collection colecaoInfracaoPerfilBase = getControladorUtil().pesquisar(filtroInfracaoPerfil, InfracaoPerfil.class.getName());

			if(colecaoInfracaoPerfilBase != null && !colecaoInfracaoPerfilBase.isEmpty()){
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.infracao_perfil.existente");
			}

			Collection colecaoInfracaoPerfilDebitoTipo = (Collection) mapInfracaoPerfilDebitoTipo
							.get(String.valueOf(infracaoPerfil.getId()));
			if(colecaoInfracaoPerfilDebitoTipo == null || colecaoInfracaoPerfilDebitoTipo.isEmpty()){
				throw new ControladorException("atencao.informe_campo", null, "pelo menos um tipo de debito para o perfil de infração");
			}

			try{
				getControladorUtil().inserir(infracaoPerfil);

				InfracaoPerfilDebitoTipo infracaoPerfilDebitoTipo = null;
				BigDecimal numeroFatorMultiplicador = null;
				BigDecimal porcentagemDesconto = null;

				for(InfracaoPerfilDebitoTipoHelper helper : (Collection<InfracaoPerfilDebitoTipoHelper>) colecaoInfracaoPerfilDebitoTipo){
					infracaoPerfilDebitoTipo = new InfracaoPerfilDebitoTipo();

					infracaoPerfilDebitoTipo.setIndicadorLancamentoAtivo(1);

					numeroFatorMultiplicador = Util.formatarStringMoedaRealparaBigDecimal(helper.getFatorMultiplicador(), 2);

					if(numeroFatorMultiplicador == null){
						numeroFatorMultiplicador = BigDecimal.ZERO;
					}

					infracaoPerfilDebitoTipo.setNumeroFatorMultiplicador(numeroFatorMultiplicador);

					infracaoPerfilDebitoTipo.setInfracaoPerfil(infracaoPerfil);

					porcentagemDesconto = Util.formatarStringMoedaRealparaBigDecimal(helper.getPorcentagemDesconto(), 2);

					if(porcentagemDesconto == null){
						porcentagemDesconto = BigDecimal.ZERO;
					}

					infracaoPerfilDebitoTipo.setPorcentagemDesconto(porcentagemDesconto);

					infracaoPerfilDebitoTipo.setUltimaAlteracao(new Date());

					DebitoTipo debitoTipo = (DebitoTipo) getControladorUtil().pesquisar(Integer.valueOf(helper.getIdDebitoTipo()),
									DebitoTipo.class, false);
					infracaoPerfilDebitoTipo.setDebitoTipo(debitoTipo);

					getControladorUtil().inserir(infracaoPerfilDebitoTipo);
				}
			}catch(ControladorException e){
				throw new ControladorException("erro.sistema", e);
			}
		}
	}

	/**
	 * @author Andre Nishimura
	 * @date 17/03/2011
	 */
	public void removerInfracaoPerfil(String[] ids, Usuario usuarioLogado) throws ControladorException{

		try{
			for(String id : ids){
				InfracaoPerfil i = (InfracaoPerfil) getControladorUtil().pesquisar(Integer.valueOf(id), InfracaoPerfil.class, false);

				FiltroInfracaoPerfilDebitoTipo filtro = new FiltroInfracaoPerfilDebitoTipo();
				filtro.adicionarParametro(new ParametroSimples(FiltroInfracaoPerfilDebitoTipo.INFRACAO_PERFIL_ID, i.getId()));
				Collection perfilDebitoTipo = getControladorUtil().pesquisar(filtro, InfracaoPerfilDebitoTipo.class.getName());

				for(InfracaoPerfilDebitoTipo e : (Collection<InfracaoPerfilDebitoTipo>) perfilDebitoTipo){
					getControladorUtil().remover(e);
				}
			}

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_INFRACAO_PERFIL_REMOVER);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList<UsuarioAcaoUsuarioHelper>();
			colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			getControladorUtil().remover(ids, InfracaoPerfil.class.getName(), operacaoEfetuada, colecaoUsuarios);

		}catch(ControladorException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author Andre Nishimura
	 * @date 17/03/2011
	 */
	public void atualizarInfracaoDebitoTipo(Collection colecaoDebitoTipo, Collection remocao, Collection inserir)
					throws ControladorException{

		if(colecaoDebitoTipo != null && !colecaoDebitoTipo.isEmpty()){
			try{
				for(InfracaoPerfilDebitoTipoHelper helper : (Collection<InfracaoPerfilDebitoTipoHelper>) colecaoDebitoTipo){
					if(helper.getId() == null){
						InfracaoPerfilDebitoTipo infracaoPerfilDebitoTipo = new InfracaoPerfilDebitoTipo();

						infracaoPerfilDebitoTipo.setIndicadorLancamentoAtivo(1);
						infracaoPerfilDebitoTipo.setNumeroFatorMultiplicador(Util.formatarStringMoedaRealparaBigDecimal(
										helper.getFatorMultiplicador(), 2));
						InfracaoPerfil infracaoPerfil = (InfracaoPerfil) getControladorUtil().pesquisar(
										Integer.valueOf(helper.getIdInfracaoPerfil()), InfracaoPerfil.class, false);
						infracaoPerfilDebitoTipo.setInfracaoPerfil(infracaoPerfil);
						infracaoPerfilDebitoTipo.setPorcentagemDesconto(Util.formatarStringMoedaRealparaBigDecimal(
										helper.getPorcentagemDesconto(), 2));
						infracaoPerfilDebitoTipo.setUltimaAlteracao(new Date());
						DebitoTipo debitoTipo = (DebitoTipo) getControladorUtil().pesquisar(Integer.valueOf(helper.getIdDebitoTipo()),
										DebitoTipo.class, false);
						infracaoPerfilDebitoTipo.setDebitoTipo(debitoTipo);

						getControladorUtil().inserir(infracaoPerfilDebitoTipo);
					}else{
						InfracaoPerfilDebitoTipo infracaoPerfilDebitoTipo = (InfracaoPerfilDebitoTipo) getControladorUtil().pesquisar(
										Integer.valueOf(helper.getId()), InfracaoPerfilDebitoTipo.class, false);
						infracaoPerfilDebitoTipo.setIndicadorLancamentoAtivo(helper.getLancamentoAtivo().equals("SIM") ? 1 : 2);
						infracaoPerfilDebitoTipo.setNumeroFatorMultiplicador(Util.formatarStringMoedaRealparaBigDecimal(
										helper.getFatorMultiplicador(), 2));
						infracaoPerfilDebitoTipo.setPorcentagemDesconto(Util.formatarStringMoedaRealparaBigDecimal(
										helper.getPorcentagemDesconto(), 2));
						infracaoPerfilDebitoTipo.setUltimaAlteracao(new Date());

						getControladorUtil().atualizar(infracaoPerfilDebitoTipo);

					}
				}
			}catch(ControladorException e){
				throw new ControladorException("erro.sistema", e);
			}
		}else{
			throw new ControladorException("atencao.campo.informado", null, "Tipo de Debito");
		}
		if(remocao != null){
			try{
				for(InfracaoPerfilDebitoTipoHelper helper : (Collection<InfracaoPerfilDebitoTipoHelper>) remocao){
					if(helper.getId() != null){
						InfracaoPerfilDebitoTipo infracaoPerfilDebitoTipo = (InfracaoPerfilDebitoTipo) getControladorUtil().pesquisar(
										Integer.valueOf(helper.getId()), InfracaoPerfilDebitoTipo.class, false);
						if(infracaoPerfilDebitoTipo != null){
							getControladorUtil().remover(infracaoPerfilDebitoTipo);
						}
					}
				}
			}catch(ControladorException e){
				throw new ControladorException("erro.sistema", e);
			}
		}
	}

	// ----------

	/**
	 * Este caso de uso permite desfazer os parcelamentos de débitos
	 * [UC0213] Desfazer Parcelamento de Débitos
	 * 
	 * @author Vitor Hora
	 * @created 19/08/2008
	 * @author Saulo Lima
	 * @date 13/07/2009
	 *       Recuperar Guias de Pagamento do Histórico + Identação + Tipo de retorno
	 * @throws ControladorException
	 */
	public void desfazerParcelamentosDebito(String motivo, Integer idParcelamento, Usuario usuario) throws ControladorException{

		try{

			Collection<GuiaPagamentoPrestacaoHelper> colecaoGuiasPrestacoes = null;
			String[] guiasRemocao = null;

			FiltroParcelamentoItem filtroParcelamentoItem = new FiltroParcelamentoItem();
			filtroParcelamentoItem.adicionarParametro(new ParametroSimples(FiltroParcelamentoItem.PARCELAMENTO_ID, idParcelamento));
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral.contaHistorico");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral.contaHistorico.localidade");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral.contaHistorico.debitoCreditoSituacaoAtual");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("contaGeral.contaHistorico.debitoCreditoSituacaoAnterior");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("parcelamento.imovel");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("guiaPagamentoGeral.guiaPagamentoHistorico");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral.debitoACobrarHistorico");
			filtroParcelamentoItem.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral.creditoARealizarHistorico");
			filtroParcelamentoItem.setInitializeLazy(true);

			// Procura ParcelamentoItem na base
			Collection<ParcelamentoItem> colecaoParcelamentoItem = this.getControladorUtil().pesquisar(filtroParcelamentoItem,
							ParcelamentoItem.class.getName());

			Iterator<ParcelamentoItem> parcelamentoItemIterator = colecaoParcelamentoItem.iterator();
			ParcelamentoItem parcelamentoItem = null;
			Integer codigoImovel = null;
			Collection<ContaHistorico> colecaoContasHistorico = new ArrayList<ContaHistorico>();

			FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = null;

			CobrancaDocumento cobrancaDocumento = null;
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

			Integer idCobrancaDocumento = null;
			Integer idCobrancaAcaoAtividadeComando = null;

			Short indicadorCobrancaAdministrativa = null;

			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = null;

			Map<Integer, Integer> mapCbdoIdCacmId = new HashMap<Integer, Integer>();

			while(parcelamentoItemIterator.hasNext()){

				parcelamentoItem = parcelamentoItemIterator.next();

				codigoImovel = parcelamentoItem.getParcelamento().getImovel().getId();

				// recupera o sistema parametro
				SistemaParametro sistemaParametro = null;
				sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

				if(parcelamentoItem.getContaGeral() != null && parcelamentoItem.getContaGeral().getContaHistorico() != null){
					Integer situacaoAtual = 0;

					if(parcelamentoItem.getContaGeral().getContaHistorico() != null){
						// Conta conta = parcelamentoItem.getContaGeral().getConta();
						ContaHistorico contaHistorico = parcelamentoItem.getContaGeral().getContaHistorico();

						if(contaHistorico.getDebitoCreditoSituacaoAnterior() == null){
							situacaoAtual = DebitoCreditoSituacao.NORMAL.intValue();
						}else{
							situacaoAtual = contaHistorico.getDebitoCreditoSituacaoAnterior().getId();
						}

						int anoMesReferenciaContabil = 0;

						Collection colecaoContaCanceladaRetificacao = null;
						try{
							colecaoContaCanceladaRetificacao = repositorioCobranca.pesquisarContaCanceladaRetificacao(codigoImovel,
											contaHistorico.getAnoMesReferenciaConta());
						}catch(ErroRepositorioException e){
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
						// Mês/ano de referência contábil Caso exista conta com situação atual
						// correspondete a cancelada por retificação
						// CNTA_AMREFERENCIACONTABIL = CNTA_AMREFERENCIACONTABIL da conta cancelada
						// por retificação
						if(colecaoContaCanceladaRetificacao != null && !colecaoContaCanceladaRetificacao.isEmpty()){
							anoMesReferenciaContabil = ((Integer) colecaoContaCanceladaRetificacao.iterator().next()).intValue();
						}else{

							// caso contrário CNTA_AMREFERENCIACONTABIL = CNTA_AMREFERENCIACONTA da
							// conta parcelada
							anoMesReferenciaContabil = contaHistorico.getAnoMesReferenciaConta();
						}

						contaHistorico.setAnoMesReferenciaContabil(anoMesReferenciaContabil);

						// Verifica se há relação entre a conta com parcelamento desfeito e algum
						// item de documento de cobrança - [UC3082] Atualizar Item Documento
						// Cobrança
						Integer idConta = contaHistorico.getId();

						this.atualizarItemDocumentoCobranca(idConta, null, null, null, CobrancaDebitoSituacao.PENDENTE, new Date(),
										CobrancaDebitoSituacao.PARCELADO);

						// Verificar se há relação do desfazer parcelamento com itens de
						// negativação:

						Integer referenciaConta = contaHistorico.getAnoMesReferenciaConta();

						// Atualizar itens negativação
						// [SB0006 - Atualizar Item da Negativação]
						// [UC0937 - Obter Itens de Negativação Associados à Conta]
						this.getControladorSpcSerasa().atualizarItemDaNegativacaoDesfazerParcelamento(referenciaConta,
										parcelamentoItem.getParcelamento().getImovel(), new Date(), Boolean.TRUE, ConstantesSistema.NAO);

						Collection<ContaHistorico> colecaoContasHistoricoTemp = new ArrayList<ContaHistorico>();
						if(!colecaoContasHistorico.contains(contaHistorico)){
							colecaoContasHistorico.add(contaHistorico);
							colecaoContasHistoricoTemp.add(contaHistorico);

							// Transferir conta historico para conta
							this.getControladorFaturamento().transferirContasHistoricoParaConta(colecaoContasHistoricoTemp,
											sistemaParametro.getAnoMesArrecadacao(), DebitoCreditoSituacao.NORMAL);

						}
						this.atualizarSituacaoContaHistorico(idConta.toString(), situacaoAtual, anoMesReferenciaContabil);

						// Caso a Conta em questão pertença a Algum Item do Documento de Cobrança na
						// situação Parcelado

						filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
						filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.CONTA_GERAL_ID,
										idConta));
						filtroCobrancaDocumentoItem
										.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO);
						filtroCobrancaDocumentoItem
										.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_COMANDO);

						colecaoCobrancaDocumentoItem = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
										CobrancaDocumentoItem.class.getName());

						if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
							indicadorCobrancaAdministrativa = contaHistorico.getIndicadorCobrancaAdministrativa();

							for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
								cobrancaDocumento = cobrancaDocumentoItem.getCobrancaDocumento();
								idCobrancaDocumento = cobrancaDocumento.getId();

								cobrancaAcaoAtividadeComando = cobrancaDocumento.getCobrancaAcaoAtividadeComando();

								if(indicadorCobrancaAdministrativa != null
												&& indicadorCobrancaAdministrativa == ConstantesSistema.SIM.shortValue()
												&& cobrancaAcaoAtividadeComando != null
												&& !mapCbdoIdCacmId.containsKey(idCobrancaDocumento)){
									idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando.getId();

									mapCbdoIdCacmId.put(idCobrancaDocumento, idCobrancaAcaoAtividadeComando);
								}
							}
						}
					}
				}

				GuiaPagamentoGeral guiaPagamentoGeral = parcelamentoItem.getGuiaPagamentoGeral();

				if(guiaPagamentoGeral != null){
					Integer idGuiaPagamento = guiaPagamentoGeral.getId();
					Short numeroPrestacao = parcelamentoItem.getNumeroPrestacao();

					// Recuperar do Histórico as Prestações da Guia (Caso 'Guia de Pagamento' esteja
					// no histórico, ela também será recuperada).
					this.getControladorArrecadacao().transferirGuiaPagamentoPrestacaoHistoricoParaGuiaPagamentoPrestacao(
									guiaPagamentoGeral.getId(), parcelamentoItem.getNumeroPrestacao());

					// Caso a Guia em questão pertença a Algum Item do Documento de Cobrança
					// Parcelado

					filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
					filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(
									FiltroCobrancaDocumentoItem.GUIA_PAGAMENTO_GERAL_ID, idGuiaPagamento));
					filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.NUMERO_DA_PRESTACAO,
									numeroPrestacao));
					filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO);
					filtroCobrancaDocumentoItem
									.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_COMANDO);

					colecaoCobrancaDocumentoItem = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
									CobrancaDocumentoItem.class.getName());

					if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
						FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
						filtroGuiaPagamentoPrestacao.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO);
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
										FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID, idGuiaPagamento));
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO,
										numeroPrestacao));

						GuiaPagamentoPrestacao guiaPagamentoPrestacaoPesquisada = (GuiaPagamentoPrestacao) Util.retonarObjetoDeColecao(this
										.getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
														GuiaPagamentoPrestacao.class.getName()));

						indicadorCobrancaAdministrativa = guiaPagamentoPrestacaoPesquisada.getIndicadorCobrancaAdministrativa();

						for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
							cobrancaDocumento = cobrancaDocumentoItem.getCobrancaDocumento();
							idCobrancaDocumento = cobrancaDocumento.getId();

							cobrancaAcaoAtividadeComando = cobrancaDocumento.getCobrancaAcaoAtividadeComando();

							if(indicadorCobrancaAdministrativa != null
											&& indicadorCobrancaAdministrativa == ConstantesSistema.SIM.shortValue()
											&& cobrancaAcaoAtividadeComando != null && !mapCbdoIdCacmId.containsKey(idCobrancaDocumento)){
								idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando.getId();

								mapCbdoIdCacmId.put(idCobrancaDocumento, idCobrancaAcaoAtividadeComando);
							}
						}
					}
				}

				// Tornar Inadimplente os Imóveis que possuam débitos vinculados aos Itens do CBDO
				// em Questão
				if(mapCbdoIdCacmId != null && !mapCbdoIdCacmId.isEmpty()){
					Integer idCobrancaAcaoAtividadeComandoAux = null;

					FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = null;

					Collection<Object> colecaoImovelCobrancaSituacaoAtualizar = new ArrayList<Object>();

					Collection<ImovelCobrancaSituacao> colecaoImovelCobrancaSituacao = null;

					CobrancaDebitoSituacao cobrancaDebitoSituacaoPendente = new CobrancaDebitoSituacao();
					cobrancaDebitoSituacaoPendente.setId(CobrancaDebitoSituacao.PENDENTE);

					for(Integer idCobrancaDocumentoAux : mapCbdoIdCacmId.keySet()){
						idCobrancaAcaoAtividadeComandoAux = mapCbdoIdCacmId.get(idCobrancaDocumentoAux);

						filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();
						filtroImovelCobrancaSituacao.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaSituacao.IMOVEL_ID,
										codigoImovel));
						filtroImovelCobrancaSituacao
										.adicionarParametro(new ParametroSimples(
														FiltroImovelCobrancaSituacao.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
														idCobrancaAcaoAtividadeComandoAux));

						colecaoImovelCobrancaSituacao = this.getControladorUtil().pesquisar(filtroImovelCobrancaSituacao,
										ImovelCobrancaSituacao.class.getName());

						if(!Util.isVazioOrNulo(colecaoImovelCobrancaSituacao)){
							for(ImovelCobrancaSituacao imovelCobrancaSituacao : colecaoImovelCobrancaSituacao){
								imovelCobrancaSituacao.setDataAdimplencia(null);
								imovelCobrancaSituacao.setAnoMesAdimplencia(null);
								imovelCobrancaSituacao.setUltimaAlteracao(new Date());
								imovelCobrancaSituacao.setCobrancaDebitoSituacao(cobrancaDebitoSituacaoPendente);

								colecaoImovelCobrancaSituacaoAtualizar.add(imovelCobrancaSituacao);
							}
						}
					}

					this.getControladorUtil().atualizarColecaoObjetos(colecaoImovelCobrancaSituacaoAtualizar);
				}

				if(parcelamentoItem.getDebitoACobrarGeral() != null
								&& parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrarHistorico() != null){

					int situacaoAtualDebito = 0;
					// DebitoACobrar debitoACobrar =
					// parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar();
					DebitoACobrarHistorico debitoACobrarHistorico = parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrarHistorico();

					if(debitoACobrarHistorico.getDebitoCreditoSituacaoAnterior() == null){
						situacaoAtualDebito = DebitoCreditoSituacao.NORMAL.intValue();
					}else{
						situacaoAtualDebito = debitoACobrarHistorico.getDebitoCreditoSituacaoAnterior().getId();
					}

					int anoMesReferenciaContabil = Util.recuperaAnoMesDaData(debitoACobrarHistorico.getDebitoGeradoRealizar());

					Integer idDebitoACobrar = debitoACobrarHistorico.getId();

					this.atualizarSituacaoDebitoACobrarHistorico(idDebitoACobrar.toString(), situacaoAtualDebito, anoMesReferenciaContabil);

					// Verifica se há relação entre o débito a cobrar com parcelamento desfeito e
					// algum item de documento de cobrança - [UC3082] Atualizar Item Documento
					// Cobrança
					this.atualizarItemDocumentoCobranca(null, null, null, idDebitoACobrar, CobrancaDebitoSituacao.PENDENTE, new Date(),
									CobrancaDebitoSituacao.PARCELADO);

					// Parcelamento parcelamento = new Parcelamento();
					// parcelamento.setId(idParcelamento);

					// Indicador de Parcelamento - indica se deve ser recuperado ou não o id do
					// parcelamento.
					// No caso do desfazer parcelamento esse id não deve ser restaurado na tabela de
					// débito a cobrar,
					// pois trata-se de um id que deixará de existir qndo o parcelamento for
					// desfeito.
					boolean indicadorParcelamento = false;

					this.transferirDebitoACobrarHistoricoParaDebitoACobrar(debitoACobrarHistorico, indicadorParcelamento);
				}

				if(parcelamentoItem.getCreditoARealizarGeral() != null
								&& parcelamentoItem.getCreditoARealizarGeral().getCreditoARealizarHistorico() != null){

					CreditoARealizarHistorico creditoARealizarHistorico = parcelamentoItem.getCreditoARealizarGeral()
									.getCreditoARealizarHistorico();

					this.transferirCreditoARealizarHistoricoParaCreditoARealizar(creditoARealizarHistorico.getId(), idParcelamento);
				}
			}

			// 1.11. Caso existam contas que foram transferidas do histórico com motivo de revisão
			// "Cobrança Bancária"
			// (CMRV_ID = CMRV_ID da tabela CONTA_MOTIVO_REVISAO referente ao valor "COBRANCA
			// BANCARIA")
			if(!Util.isVazioOrNulo(colecaoContasHistorico)){
				Collection<Conta> colecaoContasParaRevisao = new ArrayList();

				for(ContaHistorico contaHistorico : colecaoContasHistorico){
					// Consulta a conta pelo id da conta do histórico
					FiltroConta filtroConta = new FiltroConta();
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaHistorico.getId()));
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.CONTA_MOTIVO_REVISAO_ID,
									ContaMotivoRevisao.REVISAO_POR_COBRANCA_BANCARIA));
					filtroConta.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.CONTA_MOTIVO_REVISAO);

					colecaoContasParaRevisao.addAll(getControladorUtil().pesquisar(filtroConta, Conta.class.getName()));
				}

				if(!Util.isVazioOrNulo(colecaoContasParaRevisao)){
					// retirar de revisão <<Inclui>> [UC0149 - Retirar Conta de Revisão]
					getControladorFaturamento().retirarRevisaoConta(colecaoContasParaRevisao, null, usuario);
				}
			}

			if(codigoImovel != null){

				FiltroConta filtroConta = new FiltroConta();
				filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, codigoImovel));
				filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.CONTA_MOTIVO_REVISAO_ID,
								ContaMotivoRevisao.REVISAO_POR_PAGAMENTO_COMPROVADO));
				filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");

				Collection<Conta> colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

				Collection<Conta> colecaoContasParaRevisao = new ArrayList();

				if(colecaoConta != null && !colecaoConta.isEmpty()){

					Iterator<Conta> iteratorConta = colecaoConta.iterator();
					while(iteratorConta.hasNext()){

						Conta conta = null;
						conta = iteratorConta.next();

						if((conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.NORMAL.intValue())
										|| (conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.RETIFICADA
														.intValue())
										|| (conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.INCLUIDA
														.intValue())){
							colecaoContasParaRevisao.add(conta);
						}
					}

					// 1.2 chama o caso de uso [UC0149] para retirar contas de revisao
					getControladorFaturamento().retirarRevisaoConta(colecaoContasParaRevisao, null, null);
				}

				Collection<Conta> colecaoContasEP = new ArrayList<Conta>();
				if(codigoImovel != null){

					filtroConta.limparListaParametros();
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, codigoImovel));
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, idParcelamento));

					Collection<Conta> colecaoConta2 = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
					if(colecaoConta2 != null && !colecaoConta2.isEmpty()){

						Iterator<Conta> iteratorConta = colecaoConta2.iterator();
						while(iteratorConta.hasNext()){

							Conta conta = iteratorConta.next();

							if((conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.NORMAL.intValue())
											|| (conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.RETIFICADA
															.intValue())
											|| (conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.INCLUIDA
															.intValue())){

								colecaoContasEP.add(conta);
							}
						}
					}
				}

				// Início - Rotina referente ao cancelamento das guias de pagamento
				Parcelamento parcelamento = null;
				GuiaPagamento guiaPagamento = null;

				// Pesquisa a guia do parcelamento
				FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
				filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, idParcelamento));

				Collection<GuiaPagamento> colecaoGuiaPagamento = Fachada.getInstancia().pesquisar(filtroGuiaPagamento,
								GuiaPagamento.class.getName());

				if(!Util.isVazioOrNulo(colecaoGuiaPagamento)){
					guiaPagamento = (GuiaPagamento) Util.retonarObjetoDeColecao(colecaoGuiaPagamento);
				}

				if(!Util.isVazioOuBranco(guiaPagamento)){
					// Pesquisa as prestações da guia de pagamento
					colecaoGuiasPrestacoes = this.getControladorFaturamento()
									.pesquisarGuiasPagamentoPrestacaoFiltrar(guiaPagamento.getId());

					// Prepara a lista com os registro a serem cancelados
					guiasRemocao = new String[colecaoGuiasPrestacoes.size()];
					int cont = 0;

					for(GuiaPagamentoPrestacaoHelper guiaPagamentoPrestacaoHelper : colecaoGuiasPrestacoes){
						guiasRemocao[cont] = guiaPagamentoPrestacaoHelper.getId().toString();
						cont++;
					}
				}

				if(!Util.isVazioOrNulo(colecaoGuiasPrestacoes)){
					FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
					filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade(FiltroParcelamento.COBRANCA_FORMA_ENTIDADE);
					filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.ID, idParcelamento));

					Collection<Parcelamento> colecaoParcelamento = Fachada.getInstancia().pesquisar(filtroParcelamento,
									Parcelamento.class.getName());

					parcelamento = (Parcelamento) Util.retonarObjetoDeColecao(colecaoParcelamento);

					// Verifica as possibilidades para cancelamento de guia de pagamento
					if(parcelamento.getCobrancaForma().getId().equals(CobrancaForma.GUIA_DE_PAGAMENTO)){
						// Cancela a guia caso a forma de cobrança do parcelamento corresponda a
						// "cobrança por guia de pagamento" (CBFM_ID com o valor correspondente a "
						// COBRANÇA EM BOLETO BANCARIO" na tabela PARCELAMENTO) (Item 1.8 do Fluxo
						// Principal)
						this.getControladorFaturamento().cancelarGuiaPagamento(colecaoGuiasPrestacoes, guiasRemocao, false, usuario);
					}
				}
				// FIM

				// 1.8.1 Caso a entrada do parcelamento tenha sido através de contas marcadas como
				// EP,
				// ou seja,existem contas do ímovel associados ao parcelamento(a partir da tabela
				// CONTA com IMOV_ID = IMOV_ID da tabela IMOVEL) e situação atual DCST_IDATUAL com o
				// valor correspondente a normal ,retificada ou concluída e PARC_ID=PARC_ID do
				// parcelamento
				if(colecaoContasEP != null && !colecaoContasEP.isEmpty()){

					// 1.8.1.1 Retirar as contas de revisão
					getControladorFaturamento().retirarRevisaoConta(colecaoContasEP, null, null);

					// 1.8.1.3 desassociar a conta do parcelamento atualiza PARC_ID da tabela CONTA
					// com valor nulo
					Iterator<Conta> iteratorContaEP = colecaoContasEP.iterator();

					while(iteratorContaEP.hasNext()){

						Conta conta = null;
						conta = iteratorContaEP.next();
						conta.setParcelamento(null);

						// Verifica se há relação entre a conta de entrada do parcelamento desfeito
						// e algum item de documento de cobrança - [UC3082] Atualizar Item Documento
						// Cobrança
						Integer idConta = conta.getId();

						this.atualizarItemDocumentoCobranca(idConta, null, null, null, CobrancaDebitoSituacao.PENDENTE, new Date(),
										CobrancaDebitoSituacao.PARCELADO);

						// 1.8.1.2 Para cada conta alterar o vencimento para vencimento original
						// passando o vencimento original da conta (CNTA_DTVENCIMENTOORIGINAL)
						getControladorFaturamento().alterarVencimentoConta(Collections.singletonList(conta), null,
										conta.getDataVencimentoOriginal(), null);

						// Atualizar itens negativação
						// [SB0006 - Atualizar Item da Negativação]
						// [UC0937 - Obter Itens de Negativação Associados à Conta]
						getControladorSpcSerasa().atualizarItemDaNegativacaoDesfazerParcelamento(conta.getReferencia(), conta.getImovel(),
										new Date(), Boolean.TRUE, ConstantesSistema.NAO);

						try{
							repositorioUtil.atualizar(conta);
						}catch(ErroRepositorioException e){
							e.printStackTrace();
						}
					}

				}else{
					// 1.9.2. Caso contrário, ou seja, a entrada do parcelamento não tenha sido
					// através de contasmerece

					// 1.9.2.1. Caso a forma de cobrança do parcelamento corresponda a "cobrança em
					// conta" (CBFM_ID com o valor correspondente a "COBRANÇA EM CONTA" na tabela
					// PARCELAMENTO):
					if(!Util.isVazioOrNulo(colecaoGuiasPrestacoes) && !Util.isVazioOuBranco(parcelamento)
									&& parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) > 0
									&& parcelamento.getCobrancaForma().getId().equals(CobrancaForma.COBRANCA_EM_CONTA)){
						this.getControladorFaturamento().cancelarGuiaPagamento(colecaoGuiasPrestacoes, guiasRemocao, false, usuario);
					}
				}

				Imovel imovel = null;
				imovel = getControladorImovel().consultarParcelamentosDebitosImovel(codigoImovel);

				if(imovel != null){
					Integer numeroParcelamento = 0;
					if(imovel.getNumeroParcelamento() != null && imovel.getNumeroParcelamento() > 0){
						numeroParcelamento = imovel.getNumeroParcelamento() - 1;
					}
					Integer numeroReparcelamentoConsecutivo = 0;
					Integer numeroReparcelamento = 0;
					if(imovel.getNumeroReparcelamentoConsecutivos() != null && imovel.getNumeroReparcelamentoConsecutivos() > 0){
						numeroReparcelamentoConsecutivo = imovel.getNumeroReparcelamentoConsecutivos() - 1;
						numeroReparcelamento = imovel.getNumeroReparcelamento() - 1;
					}

					// 1.9 Atualiza a tabela IMOVEL
					try{
						repositorioImovel.atualizarDadosImovel(codigoImovel, numeroParcelamento, numeroReparcelamentoConsecutivo,
										numeroReparcelamento);
					}catch(ErroRepositorioException e){
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
				}

				// 1.10 atualiza a tabela parcelamento
				this.atualizarParcelamento(Integer.valueOf(idParcelamento), ParcelamentoSituacao.DESFEITO, motivo);

				// 1.14.1. Selecionar boletos bancários associados ao parcelamento
				// (ocorrências da tabela BOLETO_BANCARIO com PARC_ID = Id do parcelamento que está
				// sendo desfeito)
				FiltroBoletoBancario filtroBoletoBancario = null;

				filtroBoletoBancario = new FiltroBoletoBancario();
				filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.PARCELAMENTO_ID, idParcelamento));
				filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.PARCELAMENTO);
				filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.SITUACAO);

				Collection<BoletoBancario> colecaoBoletoBancario = getControladorUtil().pesquisar(filtroBoletoBancario,
								BoletoBancario.class.getName());

				// 1.14.2. Para cada boleto selecionado:
				if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
					Collection<BoletoBancarioLancamentoEnvio> colecaoBoletoBancarioLancamentoEnvio = new ArrayList();
					for(BoletoBancario boletoBancario : colecaoBoletoBancario){
						// 1.14.2.1. Desassociar o boleto bancário do parcelamento (atualizar o
						// PARC_ID para
						// nulo da tabela BOLETO_BANCARIO).
						boletoBancario.getParcelamento().setId(null);
						boletoBancario.setUltimaAlteracao(new Date());

						this.getControladorUtil().atualizar(boletoBancario);

						// 1.14.2.2. Caso a situação atual do boleto permita a geração do pedido de
						// baixa(BBST_IDATUAL=BBST_IDATUALOBRIGATORIA da tabela
						// BOLETO_BANCARIO_LANCMT_ENVIO com BLEN_ID
						// correspondente a "PEDIDO DE BAIXA" ou "SUSTAR PROTESTO E BAIXAR
						// TITUL")
						FiltroBoletoBancarioLancamentoEnvio filtroLancamentoEnvio = new FiltroBoletoBancarioLancamentoEnvio();
						filtroLancamentoEnvio.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioLancamentoEnvio.ID,
										BoletoBancarioLancamentoEnvio.PEDIDO_DE_BAIXA, ConectorOr.CONECTOR_OR, 2));
						filtroLancamentoEnvio.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioLancamentoEnvio.ID,
										BoletoBancarioLancamentoEnvio.SUSTAR_PROTESTO_E_BAIXAR_TITUL));
						filtroLancamentoEnvio
										.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancarioLancamentoEnvio.SITUACAO_ATUAL_OBRIGATORIA);

						colecaoBoletoBancarioLancamentoEnvio = getControladorUtil().pesquisar(filtroLancamentoEnvio,
										BoletoBancarioLancamentoEnvio.class.getName());

						if(!Util.isVazioOrNulo(colecaoBoletoBancarioLancamentoEnvio)){
							for(BoletoBancarioLancamentoEnvio boletoBancarioLancamentoEnvio : colecaoBoletoBancarioLancamentoEnvio){
								if(boletoBancario.getBoletoBancarioSituacao() != null
												&& boletoBancarioLancamentoEnvio.getSituacaoAtualObrigatoria() != null
												&& boletoBancario
																.getBoletoBancarioSituacao()
																.getId()
																.equals(boletoBancarioLancamentoEnvio.getSituacaoAtualObrigatoria().getId())){
									// cancelar o boleto (gerar comando de baixa do boleto)
									// [SB0002 - Cancelar boleto bancário]
									this.cancelarBoletoBancario(boletoBancario.getId(), boletoBancario.getBoletoBancarioSituacao().getId(),
													usuario);
								}
							}
						}
					}
				}

				this.atualizarDadosParcelamentoParaImovel(codigoImovel);
			}

			this.removerDebitosACobrarECreditosARealizarDoParcelamento(idParcelamento);

		}catch(ControladorException ce){
			sessionContext.setRollbackOnly();
			throw ce;
		}catch(Exception ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento de Débitos
	 * [SB0002] - Cancela boleto bancário
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 13/10/2011
	 * @param idParcelamento
	 * @param usuario
	 * @throws ControladorException
	 */
	private void cancelarBoletoBancario(Integer idBoletoBancario, Integer idBoletoBancarioSituacao, Usuario usuario)
					throws ControladorException{

		BoletoBancarioMovimentacao boletoBancarioMovimentacao = new BoletoBancarioMovimentacao();

		try{
			BoletoBancario boletoBancario = repositorioCobranca.pesquisarBoletoBancarioPeloId(idBoletoBancario);

			if(boletoBancario != null){
				boletoBancarioMovimentacao.setBoletoBancario(boletoBancario);

				// Caso a situação atual do boleto seja "EM CARTEIRA",
				if(idBoletoBancarioSituacao.equals(BoletoBancarioSituacao.EM_CARTEIRA)){
					// BLEN_ID da tabela BOLETO_BANCARIO_LANCMT_ENVIO referente a "PEDIDO DE BAIXA";
					boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(BoletoBancarioLancamentoEnvio.PEDIDO_BAIXA);
				}else{
					// caso contrário, BLEN_ID da tabela BOLETO_BANCARIO_LANCMT_ENVIO referente a
					// "SUSTAR PROTESTO E BAIXAR TITUL".
					boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(BoletoBancarioLancamentoEnvio.SUSTAR_PROTESTO_BAIXAR_TITUL);
				}

				boletoBancarioMovimentacao.setBoletoBancarioLancamentoRetorno(null);
				boletoBancarioMovimentacao.setBoletoBancarioMovimentacaoRetorno(null);
				boletoBancarioMovimentacao.setUsuario(usuario);
				boletoBancarioMovimentacao.setArrecadadorMovimentoItem(null);
				boletoBancarioMovimentacao.setDataMovimentacao(new Date());
				boletoBancarioMovimentacao.setUltimaAlteracao(new Date());

				getControladorUtil().inserir(boletoBancarioMovimentacao);
			}
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	private void removerDebitosACobrarECreditosARealizarDoParcelamento(Integer idParcelamento) throws ControladorException{

		try{
			// Registrando contabilmente a remoção dos débitos gerados pelo parcelamento.

			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.PARCELAMENTO_ID, idParcelamento));
			filtroDebitoACobrar
							.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.DEBITO_TIPO_ID, DebitoTipo.PARCELAMENTO_CONTAS));
			DebitoACobrar debitoContas = (DebitoACobrar) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroDebitoACobrar,
							DebitoACobrar.class.getName()));

			Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = null;
			if(debitoContas != null){

				Collection<Conta> contasOrigem = repositorioCobranca.pesquisarContaDoParcelamentoPorItem(idParcelamento);

				mapaCategoriaItensContabeisValor = distribuirTotalContaPorCategoriaItemContabil(debitoContas, contasOrigem);
			}

			// ParcelamentoHelper parcelamentoHelper = new ParcelamentoHelper(new
			// Parcelamento(idParcelamento),
			// mapaCategoriaItensContabeisValor);
			// getControladorContabil().registrarLancamentoContabil(parcelamentoHelper,
			// OperacaoContabil.DESFAZER_PARCELAMENTO);
			// Fim de registro cotabil.

			repositorioCobranca.removerDebitosACobrarECreditosARealizarDoParcelamento(idParcelamento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	private Map<Categoria, Map<Integer, BigDecimal>> distribuirTotalContaPorCategoriaItemContabil(DebitoACobrar debitoContas,
					Collection<Conta> colecaoContaValores) throws ControladorException, ErroRepositorioException{

		Map<Categoria, Map<Integer, BigDecimal>> mapaCategoriaItensContabeisValor = new HashMap<Categoria, Map<Integer, BigDecimal>>();
		Categoria filtro = new Categoria();

		BigDecimal valorTotalContas = BigDecimal.ZERO;
		for(Conta conta : colecaoContaValores){
			if(conta != null && conta.getValorImposto() != null){
				valorTotalContas = valorTotalContas.add(conta.getValorTotal().add(conta.getValorImposto()));
			}else{
				valorTotalContas = valorTotalContas.add(conta.getValorTotal());
			}
		}
		// -----------------------------------------------------------------------------------------
		// Autor: Yara Souza
		// Analista : Luís Eduardo
		// Data: 29/12/2011
		// -----------------------------------------------------------------------------------------

		// Tratamento apenas para evitar ArithmeticException: / by zero.
		// Será necessária análise para os casos de valor Débito a Cobrar e Guia de Pagamento e não
		// apenas de valor de Conta.
		// Esta alteração afeta a geração de valor para contabilidade, não gera contabilização caso
		// valorTotalContas = 0
		// Alteração provisória.

		if(valorTotalContas.compareTo(BigDecimal.ZERO) == 0){
			valorTotalContas = BigDecimal.ONE;
		}

		// CÓDIGO ANTERIOR
		// if( debitoContas.getValorDebito() != null
		// && debitoContas.getValorDebito().compareTo(BigDecimal.ZERO) != 0
		// ){
		//

		// CÓDIGO ALTERADO PARA
		// if( (debitoContas.getValorDebito() != null
		// && debitoContas.getValorDebito().compareTo(BigDecimal.ZERO) != 0)
		// && valorTotalContas.compareTo(BigDecimal.ZERO)!= 0 ){
		// -----------------------------------------------------------------------------------------

		if((debitoContas.getValorDebito() != null && debitoContas.getValorDebito().compareTo(BigDecimal.ZERO) != 0)
						&& valorTotalContas.compareTo(BigDecimal.ZERO) != 0){
			BigDecimal valorEntrada = valorTotalContas.subtract(debitoContas.getValorDebito());

			// Calcula valor proporcional de água, esgoto e débitos para o resíduo da conta
			// não coberto pelo valor da entrada.
			BigDecimal fator = debitoContas.getValorDebito().divide(valorTotalContas, 2, BigDecimal.ROUND_DOWN);

			BigDecimal valorAgua = BigDecimal.ZERO;
			BigDecimal valorEsgoto = BigDecimal.ZERO;
			BigDecimal valorRestante = BigDecimal.ZERO;
			BigDecimal valorTotal = BigDecimal.ZERO;

			// Acumula valores de água, esgoto e débito das contas selecionadas, descontando o valor
			// de entrada caso exista.
			for(Conta conta : colecaoContaValores){

				Collection<ContaCategoria> contaCategorias = conta.getContaCategorias();

				// Carregando débitos cobrados categorias da conta
				Collection<DebitoCobradoCategoria> colecaoDebitoCobradoCategoria = repositorioFaturamento
								.buscarDebitoCobradoCategoriaPorIdConta(conta.getId());

				BigDecimal valorTotalConta = conta.getValorTotal().add(conta.getValorImposto());

				if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(valorTotalConta) < 0){
					// valor entrada diferente de Zero e
					// menor q o valor total de contas

					BigDecimal valorConta = valorTotalConta.subtract(valorEntrada);
					valorEntrada = BigDecimal.ZERO;
					valorTotal = valorTotal.add(valorConta);

					BigDecimal valorCategoria = BigDecimal.ZERO;
					for(ContaCategoria contaCategoria : contaCategorias){
						filtro.setId(contaCategoria.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();

							if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
								valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);

							if(contaCategoria.getValorEsgoto() != null && contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
								valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);

							mapaCategoriaItensContabeisValor.put(new Categoria(contaCategoria.getComp_id().getCategoria().getId(),
											(int) contaCategoria.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
								if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_AGUA)){
									valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN)
													.add(mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_AGUA));
								}else{
									valorCategoria = contaCategoria.getValorAgua().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
								}
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);

							if(contaCategoria.getValorEsgoto() != null && contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
								if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
									valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN)
													.add(mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_ESGOTO));
								}else{
									valorCategoria = contaCategoria.getValorEsgoto().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN);
								}
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);
						}
					}

					// Povoando valores dos itens contábeis dos débitos cobrados por categoria.
					for(DebitoCobradoCategoria debitoCobradoCategoria : colecaoDebitoCobradoCategoria){
						filtro.setId(debitoCobradoCategoria.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId(),
											debitoCobradoCategoria.getValorCategoria().multiply(fator).setScale(2, BigDecimal.ROUND_DOWN));
							mapaCategoriaItensContabeisValor.put(new Categoria(debitoCobradoCategoria.getComp_id().getCategoria().getId(),
											debitoCobradoCategoria.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId())){
								valorCategoria = debitoCobradoCategoria
												.getValorCategoria()
												.multiply(fator)
												.setScale(2, BigDecimal.ROUND_DOWN)
												.add(mapaItensValor.get(debitoCobradoCategoria.getDebitoCobrado()
																.getLancamentoItemContabil().getId()));
							}else{
								valorCategoria = debitoCobradoCategoria.getValorCategoria().multiply(fator)
												.setScale(2, BigDecimal.ROUND_DOWN);
							}
							mapaItensValor.put(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId(),
											valorCategoria);
						}
					}

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(valorTotalConta) == 0){
					// valor entrada diferente de Zero e
					// valor entrada igual a valor total de contas

					valorEntrada = BigDecimal.ZERO;

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) != 0 && valorEntrada.compareTo(valorTotalConta) > 0){
					// valor entrada diferente de Zero e
					// valor entrada maior q o valor total de contas

					valorEntrada = valorEntrada.subtract(valorTotalConta);

				}else if(valorEntrada.compareTo(BigDecimal.ZERO) == 0){
					// acumula valores totais da conta caso não haja mais valor de entrada a
					// compensar.

					valorTotal = valorTotal.add(valorTotalConta);

					BigDecimal valorCategoria = BigDecimal.ZERO;
					for(ContaCategoria contaCategoria : contaCategorias){
						filtro.setId(contaCategoria.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();

							if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
								mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, contaCategoria.getValorAgua());
							}

							if(contaCategoria.getValorEsgoto() != null && contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
								mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, contaCategoria.getValorEsgoto());
							}

							mapaCategoriaItensContabeisValor.put(new Categoria(contaCategoria.getComp_id().getCategoria().getId(),
											(int) contaCategoria.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(contaCategoria.getValorAgua() != null && contaCategoria.getValorAgua().compareTo(BigDecimal.ZERO) > 0){
								if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_AGUA)){
									valorCategoria = contaCategoria.getValorAgua().add(
													mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_AGUA));
								}else{
									valorCategoria = contaCategoria.getValorAgua();
								}
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_AGUA, valorCategoria);

							if(contaCategoria.getValorEsgoto() != null && contaCategoria.getValorEsgoto().compareTo(BigDecimal.ZERO) > 0){
								if(mapaItensValor.containsKey(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
									valorCategoria = contaCategoria.getValorEsgoto().add(
													mapaItensValor.get(LancamentoItemContabil.TARIFA_DE_ESGOTO));
								}else{
									valorCategoria = contaCategoria.getValorEsgoto();
								}
							}
							mapaItensValor.put(LancamentoItemContabil.TARIFA_DE_ESGOTO, valorCategoria);
						}
					}

					// Povoando valores dos itens contábeis dos débitos cobrados por categoria.
					for(DebitoCobradoCategoria debitoCobradoCategoria : colecaoDebitoCobradoCategoria){
						filtro.setId(debitoCobradoCategoria.getComp_id().getCategoria().getId());

						if(!mapaCategoriaItensContabeisValor.containsKey(filtro)){
							Map<Integer, BigDecimal> mapaItensValor = new HashMap<Integer, BigDecimal>();
							mapaItensValor.put(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId(),
											debitoCobradoCategoria.getValorCategoria());
							mapaCategoriaItensContabeisValor.put(new Categoria(debitoCobradoCategoria.getComp_id().getCategoria().getId(),
											debitoCobradoCategoria.getQuantidadeEconomia()), mapaItensValor);
						}else{
							Map<Integer, BigDecimal> mapaItensValor = mapaCategoriaItensContabeisValor.get(filtro);

							if(mapaItensValor.containsKey(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId())){
								valorCategoria = debitoCobradoCategoria.getValorCategoria().add(
												mapaItensValor.get(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil()
																.getId()));
							}else{
								valorCategoria = debitoCobradoCategoria.getValorCategoria();
							}
							mapaItensValor.put(debitoCobradoCategoria.getDebitoCobrado().getLancamentoItemContabil().getId(),
											valorCategoria);
						}
					}
				}
			}

			// Verifica se resta valor de conta a ser incluído como débito do parcelamento.
			if(debitoContas.getValorDebito().compareTo(BigDecimal.ZERO) != 0){

				Categoria menorCategoriaAgua = new Categoria(Integer.MAX_VALUE);
				Categoria menorCategoriaEsgoto = new Categoria(Integer.MAX_VALUE);
				Categoria menorCategoriaRestante = new Categoria(Integer.MAX_VALUE);
				Integer menorIdItemContabilRestante = Integer.MAX_VALUE;

				// Calcula totais de água, esgoto e débito.
				for(Categoria categoria : mapaCategoriaItensContabeisValor.keySet()){
					Map<Integer, BigDecimal> itens = mapaCategoriaItensContabeisValor.get(categoria);

					for(Integer idItemContabil : itens.keySet()){
						if(idItemContabil.equals(LancamentoItemContabil.TARIFA_DE_AGUA)){
							valorAgua = valorAgua.add(itens.get(idItemContabil));
							menorCategoriaAgua = categoria.getId() < menorCategoriaAgua.getId() ? categoria : menorCategoriaAgua;
						}else if(idItemContabil.equals(LancamentoItemContabil.TARIFA_DE_ESGOTO)){
							valorEsgoto = valorEsgoto.add(itens.get(idItemContabil));
							menorCategoriaEsgoto = categoria.getId() < menorCategoriaEsgoto.getId() ? categoria : menorCategoriaEsgoto;
						}else{
							valorRestante = valorRestante.add(itens.get(idItemContabil));
							menorCategoriaRestante = categoria.getId() < menorCategoriaRestante.getId() ? categoria
											: menorCategoriaRestante;
							menorIdItemContabilRestante = idItemContabil < menorIdItemContabilRestante ? idItemContabil
											: menorIdItemContabilRestante;
						}
					}
				}

				BigDecimal diferenca = valorTotal.subtract(valorAgua.add(valorEsgoto.add(valorRestante)));

				// Adicionando diferença caso exista
				if(diferenca.compareTo(BigDecimal.ZERO) != 0){
					// no valor da água.
					if(valorAgua.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaAgua).put(
										LancamentoItemContabil.TARIFA_DE_AGUA,
										mapaCategoriaItensContabeisValor.get(menorCategoriaAgua).get(LancamentoItemContabil.TARIFA_DE_AGUA)
														.add(diferenca));
					}
					// no valor do esgoto, caso não tenha água.
					else if(valorEsgoto.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaEsgoto).put(
										LancamentoItemContabil.TARIFA_DE_ESGOTO,
										mapaCategoriaItensContabeisValor.get(menorCategoriaEsgoto)
														.get(LancamentoItemContabil.TARIFA_DE_ESGOTO).add(diferenca));
					}
					// novalor dos débito, caso não tenha água nem esgoto.
					else if(valorRestante.compareTo(BigDecimal.ZERO) != 0){
						mapaCategoriaItensContabeisValor.get(menorCategoriaRestante).put(
										menorIdItemContabilRestante,
										mapaCategoriaItensContabeisValor.get(menorCategoriaRestante).get(menorIdItemContabilRestante)
														.add(diferenca));
					}
				}
			}
		}

		return mapaCategoriaItensContabeisValor;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar categoria
	 * referente ao parcelamento historico
	 * 
	 * @author Vitor Hora
	 * @created 21/08/2008
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerDebitoACobrarCategoriaDoParcelamentoHistorico(Integer idDebito) throws ControladorException{

		try{
			repositorioCobranca.removerDebitoACobrarCategoriaDoParcelamentoHistorico(idDebito);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover credito a realizar
	 * referente ao parcelamento historico
	 * 
	 * @author Vitor
	 * @param idParcelamento
	 * @created 21/08/2008
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	private void transferirCreditoARealizarHistoricoParaCreditoARealizar(Integer idCreditoARealizarHistorico, Integer idParcelamento)
					throws ControladorException{

		try{
			repositorioCobranca.transferirCreditoARealizarHistoricoParaCreditoARealizar(idCreditoARealizarHistorico, idParcelamento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover guia pagamento referente
	 * ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerGuiaPagamentoDoParcelamentoHistorico(Integer codigoImovel, Integer codigoParcelamento) throws ControladorException{

		try{
			FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.IMOVEL_ID, codigoImovel));
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, codigoParcelamento));
			Collection colecaoGuiasPagamentos = repositorioUtil.pesquisar(filtroGuiaPagamento, GuiaPagamentoHistorico.class.getName());
			GuiaPagamentoHistorico guiaPagamentoHistorico = (GuiaPagamentoHistorico) Util.retonarObjetoDeColecao(colecaoGuiasPagamentos);
			if(guiaPagamentoHistorico != null && !guiaPagamentoHistorico.equals("") && guiaPagamentoHistorico.getId() != null
							&& !guiaPagamentoHistorico.getId().equals("")){

				FiltroPagamentoHistorico filtroPagamento = new FiltroPagamentoHistorico();
				filtroPagamento.adicionarParametro(new ParametroSimples(FiltroPagamentoHistorico.ID, guiaPagamentoHistorico.getId()));
				Collection colecaoPagamentos = repositorioUtil.pesquisar(filtroPagamento, PagamentoHistorico.class.getName());

				if(colecaoPagamentos != null && !colecaoPagamentos.isEmpty()){

					Iterator iter = colecaoPagamentos.iterator();

					while(iter.hasNext()){
						PagamentoHistorico pagamentoHistorico = (PagamentoHistorico) iter.next();
						getControladorArrecadacao().removerGuiaPagamentoPagamentoHistorico(pagamentoHistorico.getId());

					}
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.parcelamento.nao.pode.ser.desfeito");

				}

				repositorioCobranca.removerClienteGuiaPagamentoDoParcelamentoHistorico(guiaPagamentoHistorico.getId());

				repositorioCobranca.removerGuiaPagamentoCobrancaDoParcelamentoHistorico(guiaPagamentoHistorico.getId());

				repositorioCobranca.removerGuiaPagamentoDoParcelamentoHistorico(codigoImovel, codigoParcelamento);
			}
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Vitor
	 * @created 21/08/2008
	 * @param DebitoCreditoSituacaoAnterior
	 *            DebitoCreditoSituacaoAtual idConta
	 * @exception controladorException
	 *                controlador Exception
	 */
	private void atualizarSituacaoContaHistorico(String codigoConta, int situacaoAtual, int anoMesReferenciaContabil)
					throws ControladorException{

		try{
			repositorioCobranca.atualizarSituacaoConta(codigoConta, situacaoAtual, anoMesReferenciaContabil);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public Collection<BoletoBancario> pesquisarBoletoBancario(BoletoBancarioHelper boletoBancarioHelper,
					boolean verificarNumeroBoletoCartaCobranca, boolean desconsiderarParametros, boolean verificarDocumentoCobranca,
					int pageOffset) throws ControladorException{

		Collection<BoletoBancario> colecaoBoletoBancario = null;

		try{
			colecaoBoletoBancario = repositorioCobranca.pesquisarBoletoBancario(boletoBancarioHelper, desconsiderarParametros,
							verificarDocumentoCobranca, verificarNumeroBoletoCartaCobranca, pageOffset);

			return colecaoBoletoBancario;

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * @author Isaac Silva
	 * @date 21/09/2011
	 * @param preParcelamento
	 * @param preParcelamentoOpcao
	 * @throws ControladorException
	 */
	private void verificarDiferencaDebitoCreditoImovelAParcelar(PreParcelamento preParcelamento, PreParcelamentoOpcao preParcelamentoOpcao)
					throws ControladorException{

		if(preParcelamento.getValorDebitoAtualizado().compareTo(BigDecimal.ZERO) <= 0){
			throw new ControladorException("atencao.pre.parcelamento.valor.total.debito.atualizado.menor.ou.igual.zero");
		}

		// valor total a pagar se o cliente escolher essa opção de
		// parcelamento
		BigDecimal valor = BigDecimal.ZERO;

		if(preParcelamentoOpcao.getNumeroPrestacoes() == 1){
			// desconto
			BigDecimal valorDescontosPreParcelamentoOpcao = (preParcelamentoOpcao.getValorDescontosAcrescimosAntiguidade() != null ? preParcelamentoOpcao
							.getValorDescontosAcrescimosAntiguidade() : BigDecimal.ZERO)
							.add(preParcelamentoOpcao.getValorDescontosAcrescimosImpontualidade() != null ? preParcelamentoOpcao
											.getValorDescontosAcrescimosImpontualidade() : BigDecimal.ZERO)
							.add(preParcelamentoOpcao.getValorDescontosAcrescimosInatividade() != null ? preParcelamentoOpcao
											.getValorDescontosAcrescimosInatividade() : BigDecimal.ZERO)
							.add(preParcelamentoOpcao.getValorDescontoSancoesRDEspecial() != null ? preParcelamentoOpcao
											.getValorDescontoSancoesRDEspecial() : BigDecimal.ZERO);

			valor = preParcelamento.getValorDebitoAtualizado().subtract(valorDescontosPreParcelamentoOpcao);

		}else{
			valor = preParcelamentoOpcao.getValorEntrada().compareTo(BigDecimal.ZERO) == 0 ? preParcelamentoOpcao.getValorPrestacao()
							: preParcelamentoOpcao.getValorEntrada();
		}

		if(valor.compareTo(BigDecimal.ZERO) <= 0){
			throw new ControladorException("atencao.pre.parcelamento.valor.total.menor.ou.igual.zero");
		}
	}

	/**
	 * Gera os Débitos a Cobrar das diferença entre os débitos
	 * 
	 * @author Isaac Silva
	 * @date 31/08/2011
	 * @param imovel
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param taxaJuros
	 * @param parcelamentoId
	 * @param colecaoCategoria
	 * @param efetuarParcelamento
	 *            se true atualiza os atributos: numeroMesesEntreParcelas, numeroParcelasALancar,
	 *            numeroMesesInicioCobranca que serão usados no faturamento;
	 * @param numeroMesesEntreParcelas
	 * @param numeroParcelasALancar
	 * @param numeroMesesInicioCobranca
	 * @throws ControladorException
	 */
	public void gerarDebitosACobrarDiferencaEntreDebitos(Imovel imovel, BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora,
					BigDecimal valorMulta, BigDecimal taxaJuros, Integer parcelamentoId, Collection<Categoria> colecaoCategoria,
					boolean efetuarParcelamento, Integer numeroMesesEntreParcelas, Integer numeroParcelasALancar,
					Integer numeroMesesInicioCobranca) throws ControladorException{

		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.SETOR_COMERCIAL);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.QUADRA);
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, imovel.getId()));

		Imovel imovelAux = (Imovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName()));

		// Atualização Monetária
		if(valorAtualizacaoMonetaria != null && !(valorAtualizacaoMonetaria.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoAtualizacaMonetaria = filtrarDebitoTipo(DebitoTipo.ATUALIZACAO_MONETARIA);

			// Inclui o débito a cobrar para Atualização Monetária
			inserirDebitoACobrarDebitoTipo(debitoTipoAtualizacaMonetaria, imovelAux, Short.valueOf((short) 1), valorAtualizacaoMonetaria,
							taxaJuros, parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.NORMAL, efetuarParcelamento,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);
		}

		// Juros Mora
		if(valorJurosMora != null && !(valorJurosMora.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoJurosMora = filtrarDebitoTipo(DebitoTipo.JUROS_MORA);

			// Inclui o débito a cobrar para Juros Mora
			inserirDebitoACobrarDebitoTipo(debitoTipoJurosMora, imovelAux, Short.valueOf((short) 1), valorJurosMora, taxaJuros,
							parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.NORMAL, efetuarParcelamento,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);
		}

		// Multa por Impontualidade
		if(valorMulta != null && !(valorMulta.compareTo(BigDecimal.ZERO) == 0)){
			DebitoTipo debitoTipoMultaImpontualidade = filtrarDebitoTipo(DebitoTipo.MULTA_IMPONTUALIDADE);

			// Inclui o débito a cobrar para Multa
			inserirDebitoACobrarDebitoTipo(debitoTipoMultaImpontualidade, imovelAux, Short.valueOf((short) 1), valorMulta, taxaJuros,
							parcelamentoId, colecaoCategoria, null, DebitoCreditoSituacao.NORMAL, efetuarParcelamento,
							numeroMesesEntreParcelas, numeroParcelasALancar, numeroMesesInicioCobranca, null);

		}
	}

	/**
	 * Faz parte de [UC0067] Obter Débito do Imóvel ou Cliente Obtem o Valor
	 * Total dos Pagamentos da Conta Author: Rafael Santos Data: 05/01/2006
	 * 
	 * @param idConta
	 *            Id Conta
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarValorTotalPagamentoMenorDataPagamento(Integer idConta) throws ControladorException{

		try{
			return this.repositorioCobranca.pesquisarValorTotalPagamentoMenorDataPagamento(idConta);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author Isaac Silva
	 * @date 23/09/2011
	 * @param cobrancaDocumento
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaDocumentoItem> obterCobrancaDocumentoItem(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		Collection<CobrancaDocumentoItem> colecao = new ArrayList<CobrancaDocumentoItem>();

		try{
			colecao = this.repositorioCobranca.obterCobrancaDocumentoItem(cobrancaDocumento);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return colecao;
	}

	/**
	 * [UC3018] Gerar TXT Cartas Cobrança Bancária.
	 * Método que vai gerar o arquivo TXT com as cartas que serão enviadas com o aviso de cobrança.
	 * 
	 * @author Ailton Sousa
	 * @date 12/10/2011
	 * @param idComandoCobranca
	 * @throws ControladorException
	 */
	public void gerarTXTCartasCobrancaBancaria(Integer idComandoCobranca, Usuario usuario) throws ControladorException{

		int numeroBoletos = 0;
		Collection colecaoIDsCobrancaDocumento = null;
		Collection<CobrancaDocumento> colecaoCobrancaDocumento = new ArrayList<CobrancaDocumento>();
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

		try{
			colecaoIDsCobrancaDocumento = repositorioCobranca.pesquisarDocumentosCobrancaBancaria(idComandoCobranca);
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		if(colecaoIDsCobrancaDocumento != null && !colecaoIDsCobrancaDocumento.isEmpty()){
			Iterator itIdSCobrancaDocumento = colecaoIDsCobrancaDocumento.iterator();
			Integer idCobrancaDocumento = null;
			CobrancaDocumento cobrancaDocumento = null;

			while(itIdSCobrancaDocumento.hasNext()){
				idCobrancaDocumento = (Integer) itIdSCobrancaDocumento.next();

				try{
					cobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumento(idCobrancaDocumento);
				}catch(ErroRepositorioException e2){
					e2.printStackTrace();
					throw new ControladorException("erro.sistema", e2);
				}

				colecaoCobrancaDocumento.add(cobrancaDocumento);
			}
			/*
			 * Executa o método correspondente ao subfluxo de geração do arquivo de cartas de
			 * cobrança.
			 * [SB0001 - Gerar Cartas Cobrança Bancária - Modelo 1]
			 */
			ParametroCobranca.P_GERAR_CARTAS_COBRANCA_BANCARIA.executar(this, -1, colecaoCobrancaDocumento, sistemaParametro,
							idComandoCobranca, usuario);

		}else{
			// [FS0001 - Verificar existência dos documentos de cobrança bancária].
			EnvioEmail envioEmail = null;

			envioEmail = this.getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.GERAR_CARTA_COBRANCA_BANCARIA);

			String mensagemComplementar = "Não há documentos de cobrança para a emissão das cartas de cobrança bancária do comando de identificação "
							+ idComandoCobranca + ". Entre em contato com o analista responsável.";

			try{
				ServicosEmail.enviarMensagem(envioEmail.getEmailRemetente(), envioEmail.getEmailReceptor(), envioEmail.getTituloMensagem(),
								envioEmail.getCorpoMensagem() + "\n" + mensagemComplementar);
			}catch(Exception e3){
				e3.printStackTrace();
				throw new ControladorException("erro.sistema", e3);
			}
		}
	}

	/**
	 * [UC3019] Identificar Cobrança Bancária com Negociação.
	 * Método que Identifica cobranças bancárias que foram Negociadas, verificando o cumprimento ou
	 * não do acordo firmado entre cliente e Empresa, através do pagamento da 1ª. Prestação.
	 * 
	 * @author Ailton Sousa
	 * @date 19/10/2011
	 * @throws ControladorException
	 */
	public void identificarCobrancaBancariaComNegociacao(int idFuncionalidadeIniciada, Integer idProcessoIniciado)
					throws ControladorException{

		int idUnidadeIniciada = 0;
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try{
			Usuario usuarioProcesso = null;
			GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;
			GuiaPagamentoPrestacao guiaPagamentoPrestacaoNumeroPrestacao2 = null;
			GuiaPagamentoPrestacao guiaPagamentoPrestacaoAnterior = null;

			Integer numeroSequencialAnterior = null;
			Integer idBoletoBancarioAnterior = null;
			Integer idSituacaoAtualBoletoBancarioAnterior = null;

			FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao2 = null;
			Collection<GuiaPagamentoPrestacao> guiasPagamentosPrestacao2 = null;

			FiltroBoletoBancario filtroBoletoBancario = null;
			Collection<BoletoBancario> colecaoBoletoBancario = null;
			Collection<BoletoBancario> colecaoBoletoBancarioGerado = null;

			BoletoBancario boletoBancario = null;
			Integer numeroSequencial = null;
			String descricaoOcorrencia = "";
			String ocorrenciaSequencialBoleto = "";
			String ocorrenciaPedidoBaixa = "";
			String descricaoBoletosGerados = "";

			Collection colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria = null;
			Collection colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados = null;
			Collection colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos1 = null;
			Collection colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2 = null;
			Collection colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa = null;

			RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = null;
			RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper = null;
			RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper = null;
			RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper = null;

			FiltroProcessoIniciado filtroProcessoIniciado = new FiltroProcessoIniciado();
			filtroProcessoIniciado.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.ID, idProcessoIniciado));

			Collection<ProcessoIniciado> colecaoProcessoIniciado = this.getControladorUtil().pesquisar(filtroProcessoIniciado,
							ProcessoIniciado.class.getName());

			if(!Util.isVazioOrNulo(colecaoProcessoIniciado)){
				ProcessoIniciado processoIniciado = (ProcessoIniciado) Util.retonarObjetoDeColecao(colecaoProcessoIniciado);

				usuarioProcesso = processoIniciado.getUsuario();
			}

			colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper>();
			colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos1 = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper>();
			colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2 = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper>();

			// [SB0001] PASSO 2
			// O sistema seleciona os boletos bancários gerados a partir da ação de cobrança
			// bancária e com negociação realizada e sem boletos resultantes da negociação gerados e
			// com a 1ª prestação paga

			// [SB0007] - Trata cobrança bancária com pagamento da primeira prestação e sem boleto.
			Collection guiasPagamentosPrestacaoPagas = repositorioCobranca.pesquisarGuiaPagamentoPrestacaoComNegociacaoPaga();

			if(!Util.isVazioOrNulo(guiasPagamentosPrestacaoPagas)){
				Integer idGuiaPagamentoAnterior = null;
				Integer idGuiaPagamento = null;
				Integer idBoletoBancario = null;
				Integer idSituacaoAtual1 = null;
				String descricaoSituacaoAtualBoleto1 = "";

				Iterator itGuiasPagamentosPrestacao = guiasPagamentosPrestacaoPagas.iterator();

				// 1. O sistema gera o relatório de ocorrências do processo diário da
				// cobrança bancária para a situação
				// "Relação dos boletos bancários agregadores de contas, parcelados,
				// com a entrada do parcelamento paga e sem os boletos correspondentes às
				// prestações do parcelamento gerados".
				descricaoOcorrencia += "Relação dos boletos bancários agregadores de contas, ";
				descricaoOcorrencia += "parcelados, com a entrada do parcelamento paga e ";
				descricaoOcorrencia += "sem os boletos correspondentes às prestações do parcelamento gerados.";

				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper();
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
								.setOcorrencia(ConstantesSistema.OCORRENCIA_ENTRADA_PAGA_SEM_BOLETOS);
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper.setDescricaoOcorrencia(descricaoOcorrencia);

				while(itGuiasPagamentosPrestacao.hasNext()){
					Object[] guiasPagamentoPrestacaoArray = (Object[]) itGuiasPagamentosPrestacao.next();

					if(guiasPagamentoPrestacaoArray != null && guiasPagamentoPrestacaoArray[0] != null){
						idGuiaPagamento = (Integer) guiasPagamentoPrestacaoArray[0];

						// 2. Para cada conjunto de prestações de uma mesma guia:
						if(idGuiaPagamentoAnterior == null
										|| (idGuiaPagamentoAnterior != null && idGuiaPagamentoAnterior.intValue() != idGuiaPagamento
														.intValue())){
							relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper();

							// 2.1. O sistema gera a ocorrência
							// "Geração dos boletos das guias do parcelamento do boleto de
							// sequencial."
							// no relatório de ocorrências do processo diário da cobrança bancária.
							ocorrenciaSequencialBoleto = "";
							if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[2])){
								numeroSequencial = (Integer) guiasPagamentoPrestacaoArray[2];
								ocorrenciaSequencialBoleto += "Geração dos boletos das guias do parcelamento do boleto de sequencial "
												+ numeroSequencial + ".";
							}

							relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
											.setOcorrenciaSequencialBoleto(ocorrenciaSequencialBoleto);

							// 2.2. O sistema chama o caso de uso
							// UC3016 - Gerar Boleto Cobrança Bancária,
							// passando como parâmetro o id da guia de pagamento (GPAG_ID) e o
							// número inicial da guia com o valor 2 (dois).
							colecaoBoletoBancarioGerado = this.gerarBoletoCobrancaBancaria(null, idGuiaPagamento, 2, null);

							// 2.3. Para cada boleto gerado pelo [UC3016] (a partir da tabela
							// BOLETO_BANCARIO
							if(!Util.isVazioOrNulo(colecaoBoletoBancarioGerado)){

								colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper>();

								for(BoletoBancario boletoBancarioGerado : colecaoBoletoBancarioGerado){
									relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper();
									descricaoBoletosGerados = "";

									// 2.3.1. O sistema gera a ocorrência "Geração do boleto de
									// sequencial correspondente à prestação do parcelamento
									// do boleto de sequencial para o arrecadador
									descricaoBoletosGerados += "Geração do boleto de sequencial ";
									descricaoBoletosGerados += boletoBancarioGerado.getNumeroSequencial() + " ";
									descricaoBoletosGerados += "correspondente à prestação ";
									descricaoBoletosGerados += boletoBancarioGerado.getGuiaPagamento().getId() + "-";
									descricaoBoletosGerados += boletoBancarioGerado.getNumeroPrestacoes() + " ";
									descricaoBoletosGerados += "do parcelamento do boleto de sequencial " + numeroSequencial + " ";

									String nomeCliente = "";
									ArrecadadorContrato arrecadadorContrato = repositorioCobranca
													.pesquisarContratoArrecadadorPorGuiaPagamento(boletoBancarioGerado.getGuiaPagamento()
																	.getId());

									if(!Util.isVazioOuBranco(arrecadadorContrato)){

										FiltroArrecadadorContrato filtroArrecadadorContrato = new FiltroArrecadadorContrato();
										filtroArrecadadorContrato.adicionarParametro(new ParametroSimples(FiltroArrecadadorContrato.ID,
														arrecadadorContrato.getId()));
										filtroArrecadadorContrato
														.adicionarCaminhoParaCarregamentoEntidade(FiltroArrecadadorContrato.ARRECADADOR_CLIENTE);

										Collection<ArrecadadorContrato> colecaoArrecadadorContrato = this.getControladorUtil().pesquisar(
														filtroArrecadadorContrato, ArrecadadorContrato.class.getName());

										if(!Util.isVazioOrNulo(colecaoArrecadadorContrato)){
											ArrecadadorContrato arrecadadorContratoAux = (ArrecadadorContrato) Util
															.retonarObjetoDeColecao(colecaoArrecadadorContrato);
											nomeCliente = arrecadadorContratoAux.getArrecadador().getCliente().getNome();
										}
									}

									descricaoBoletosGerados += "para o arrecadador " + nomeCliente;

									relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper
													.setBoletoGerado(descricaoBoletosGerados);

									colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados
													.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper);
								}
							}

							relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
											.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados);

							// 2.4. Caso a situação atual do boleto negociado permita a geração de
							// pedido de baixa do boleto
							if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[3])){
								idBoletoBancario = (Integer) guiasPagamentoPrestacaoArray[3];

								boolean permiteGerarBaixaBoleto = repositorioCobranca
												.verificaPermissaoGerarPedidoBaixaBoleto(idBoletoBancario);

								if(permiteGerarBaixaBoleto){
									// 2.4.1. O sistema gera o pedido de baixa do boleto negociado
									// [SB0005 - Gera Pedido de Baixa dos Boletos], passando uma
									// lista com o boleto bancário negociado
									// (BBCO_ID da tabela BOLETO_BANCARIO com BBCO_ID=Id do boleto
									// negociado selecionado)
									// e com o Indicador de Usuário Batch com o valor 2 (não).
									filtroBoletoBancario = new FiltroBoletoBancario();
									filtroBoletoBancario
													.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID, idBoletoBancario));
									filtroBoletoBancario
													.adicionarParametro(new ParametroNaoNulo(FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
									filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.SITUACAO);

									colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario,
													BoletoBancario.class.getName());

									if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
										boletoBancario = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoletoBancario);
										if(boletoBancario.getIdOriginal() != null){
											this.gerarPedidoBaixaBoleto(boletoBancario.getIdOriginal(), boletoBancario
															.getBoletoBancarioSituacao().getId(), new Date(), usuarioProcesso);
										}else{
											// Se não possuir idOriginal significa que é o
											// boleto original
											this.gerarPedidoBaixaBoleto(boletoBancario.getId(), boletoBancario.getBoletoBancarioSituacao()
															.getId(), new Date(), usuarioProcesso);
										}
									}

									// 2.4.2. O sistema gera a ocorrência "Pedido de baixa do boleto
									// de sequencial
									// Usuário deve acompanhar a confirmação da baixa do boleto pelo
									// banco por meio da funcionalidade Manter Boleto Bancário".
									ocorrenciaPedidoBaixa = "";
									ocorrenciaPedidoBaixa += "Pedido de baixa do boleto de sequencial " + numeroSequencial + ". ";
									ocorrenciaPedidoBaixa += "Usuário deve acompanhar a confirmação da baixa do boleto pelo ";
									ocorrenciaPedidoBaixa += "banco por meio da funcionalidade Manter Boleto Bancário.";

								}
								// 2.5. Caso contrário, ou seja, caso a situação atual do boleto
								// negociado não permita a geração do pedido de baixa do boleto
								// OU exista para o boleto negociado movimentação pendente de envio
								// e/ou retorno:
								else{
									// 2.5.1. O sistema gera a ocorrência "Não foi possível gerar o
									// pedido de baixa do boleto de sequencial
									// A situação atual do boleto
									// não permite o pedido de baixa ou há movimentação pendente de
									// envio ou retorno para o boleto.
									// Usuário deve pedir a baixa do boleto por meio da
									// funcionalidade Manter Boleto Bancário".
									ocorrenciaPedidoBaixa = "";
									ocorrenciaPedidoBaixa += "Não foi possível gerar o pedido de baixa do boleto de sequencial "
													+ numeroSequencial + ". ";

									idSituacaoAtual1 = null;
									descricaoSituacaoAtualBoleto1 = "";
									if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[4])){
										idSituacaoAtual1 = (Integer) guiasPagamentoPrestacaoArray[4];

										FiltroBoletoBancarioSituacao filtroBoletoBancarioSituacao = new FiltroBoletoBancarioSituacao();
										filtroBoletoBancarioSituacao.adicionarParametro(new ParametroSimples(
														FiltroBoletoBancarioSituacao.ID, idSituacaoAtual1));

										Collection<BoletoBancarioSituacao> colecaoBoletoBancarioSituacao = this.getControladorUtil()
														.pesquisar(filtroBoletoBancarioSituacao, BoletoBancarioSituacao.class.getName());

										if(!Util.isVazioOrNulo(colecaoBoletoBancarioSituacao)){
											BoletoBancarioSituacao boletoBancarioSituacao = (BoletoBancarioSituacao) Util
															.retonarObjetoDeColecao(colecaoBoletoBancarioSituacao);
											descricaoSituacaoAtualBoleto1 = boletoBancarioSituacao.getDescricao();
										}

									}
									ocorrenciaPedidoBaixa += "A situação atual do boleto " + descricaoSituacaoAtualBoleto1 + " ";
									ocorrenciaPedidoBaixa += "não permite o pedido de baixa ou há movimentação pendente de envio ou retorno para o boleto. ";
									ocorrenciaPedidoBaixa += "Usuário deve pedir a baixa do boleto por meio da funcionalidade Manter Boleto Bancário.";
								}
								relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
												.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
							}

							colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos1
											.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper);
						}

						// Armazena a guia anterior para que possa ser feita a comparação na
						// próxima iteração, verificando se existe transição nos números dos
						// ids. Caso ocorra essa transição será gerado boleto para o conjunto de
						// guias anterior à iteração corrente.
						idGuiaPagamentoAnterior = idGuiaPagamento;
					}
				}

				if(!Util.isVazioOrNulo(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos1)){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
									.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos1);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper);
				}
			}

			// [SB0001] PASSO 3
			// Retorna apenas as Guias de Pagamento Prestação com Negociação e cujo número da
			// parcela seja igual a 1.
			Collection guiasPagamentosPrestacaoConsultas = repositorioCobranca.pesquisarGuiaPagamentoPrestacaoComNegociacao();

			// [FS0001 - Verifica seleção de boletos].
			if(guiasPagamentosPrestacaoConsultas != null && !guiasPagamentosPrestacaoConsultas.isEmpty()){
				Integer idBoletoBancario = null;
				Integer idSituacaoAtual2 = null;
				String descricaoSituacaoAtualBoleto2 = "";

				Iterator itGuiasPagamentosPrestacao = guiasPagamentosPrestacaoConsultas.iterator();

				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper();

				// 1. O sistema gera o relatório de ocorrências do processo
				// diário da cobrança bancária para a situação
				// "Relação dos boletos bancários agregadores de contas,
				// parcelados, com a entrada do parcelamento vencida
				// e não paga e sem os boletos correspondentes às prestações do
				// parcelamento gerados".
				descricaoOcorrencia = "";
				descricaoOcorrencia += "Relação dos boletos bancários agregadores de contas, ";
				descricaoOcorrencia += "parcelados, com a entrada do parcelamento vencida e não paga e ";
				descricaoOcorrencia += "sem os boletos correspondentes às prestações do parcelamento gerados.";

				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
								.setOcorrencia(ConstantesSistema.OCORRENCIA_ENTRADA_VENCIDA_SEM_BOLETOS);
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper.setDescricaoOcorrencia(descricaoOcorrencia);

				// [SB0003] - Trata cobrança bancária sem pagamento da primeira prestação.
				while(itGuiasPagamentosPrestacao.hasNext()){

					Object[] guiasPagamentoPrestacaoArray = (Object[]) itGuiasPagamentosPrestacao.next();
					if(guiasPagamentoPrestacaoArray != null){
						guiaPagamentoPrestacao = repositorioCobranca.obterGuiaPagamentoPrestacao(
										Integer.valueOf(guiasPagamentoPrestacaoArray[0].toString()),
										Short.valueOf(guiasPagamentoPrestacaoArray[1].toString()),
										Integer.valueOf(guiasPagamentoPrestacaoArray[5].toString()),
										Integer.valueOf(guiasPagamentoPrestacaoArray[6].toString()));

						if(guiaPagamentoPrestacao != null){
							// Como so chama o UC3016 no fim de cada conjunto de prestação da
							// mesma guia. Se o id da guia corrente for diferente do id da guia
							// anterior implica em gerar o boleto para o conjunto de
							// guias anteriores
							if((guiaPagamentoPrestacaoAnterior != null && guiaPagamentoPrestacao.getComp_id().getGuiaPagamentoId()
											.intValue() != guiaPagamentoPrestacaoAnterior.getComp_id().getGuiaPagamentoId().intValue())){

								relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper();

								// Reinicializa a guia de pagamento da 2a prestação para que seja
								// feita uma nova consulta todas as vezes que existir uma transição
								// de id de guia
								guiaPagamentoPrestacaoNumeroPrestacao2 = null;

								try{
									// Chama o [UC3016 - Gerar Boleto Cobrança Bancária]
									colecaoBoletoBancarioGerado = this.gerarBoletoCobrancaBancaria(null, guiaPagamentoPrestacaoAnterior
													.getComp_id().getGuiaPagamentoId(), 1, null);

									if(!Util.isVazioOrNulo(colecaoBoletoBancarioGerado)){
										// 2.1. O sistema gera a ocorrência
										// "Geração dos boletos das guias do parcelamento do boleto
										// de
										// sequencial."
										// no relatório de ocorrências do processo diário da
										// cobrança
										// bancária.
										ocorrenciaSequencialBoleto = "";

										if(!Util.isVazioOuBranco(numeroSequencialAnterior)){
											numeroSequencial = numeroSequencialAnterior;

											ocorrenciaSequencialBoleto += "Geração dos boletos das guias do parcelamento do boleto de sequencial "
															+ numeroSequencial + ".";
										}

										relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
														.setOcorrenciaSequencialBoleto(ocorrenciaSequencialBoleto);

										colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper>();

										// 2.4. Para cada boleto gerado pelo [UC3016]
										for(BoletoBancario boletoBancarioGerado : colecaoBoletoBancarioGerado){
											relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper();
											descricaoBoletosGerados = "";
											// 2.4.1. O sistema gera a ocorrência "Geração do boleto
											// de
											// sequencial correspondente à prestação do parcelamento
											// do boleto de sequencial para o arrecadador
											descricaoBoletosGerados += "Geração do boleto de sequencial ";
											descricaoBoletosGerados += boletoBancarioGerado.getNumeroSequencial() + " ";
											descricaoBoletosGerados += "correspondente à prestação ";
											descricaoBoletosGerados += boletoBancarioGerado.getGuiaPagamento().getId() + "-";
											descricaoBoletosGerados += boletoBancarioGerado.getNumeroPrestacoes() + " ";
											descricaoBoletosGerados += "do parcelamento do boleto de sequencial ";
											descricaoBoletosGerados += numeroSequencial == null ? "" : numeroSequencial + " ";

											String nomeCliente = "";
											ArrecadadorContrato arrecadadorContrato = repositorioCobranca
															.pesquisarContratoArrecadadorPorGuiaPagamento(boletoBancarioGerado
																			.getGuiaPagamento().getId());

											if(!Util.isVazioOuBranco(arrecadadorContrato)){

												FiltroArrecadadorContrato filtroArrecadadorContrato = new FiltroArrecadadorContrato();
												filtroArrecadadorContrato.adicionarParametro(new ParametroSimples(
																FiltroArrecadadorContrato.ID, arrecadadorContrato.getId()));
												filtroArrecadadorContrato
																.adicionarCaminhoParaCarregamentoEntidade(FiltroArrecadadorContrato.ARRECADADOR_CLIENTE);

												Collection<ArrecadadorContrato> colecaoArrecadadorContrato = this.getControladorUtil()
																.pesquisar(filtroArrecadadorContrato, ArrecadadorContrato.class.getName());

												if(!Util.isVazioOrNulo(colecaoArrecadadorContrato)){
													ArrecadadorContrato arrecadadorContratoAux = (ArrecadadorContrato) Util
																	.retonarObjetoDeColecao(colecaoArrecadadorContrato);
													nomeCliente = arrecadadorContratoAux.getArrecadador().getCliente().getNome();
												}
											}

											descricaoBoletosGerados += "para o arrecadador " + nomeCliente;

											relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper
															.setBoletoGerado(descricaoBoletosGerados);

											colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados
															.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper);
										}
									}

									relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
													.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados);

									if(!Util.isVazioOuBranco(idBoletoBancarioAnterior)){
										idBoletoBancario = idBoletoBancarioAnterior;

										boolean permiteGerarBaixaBoleto = repositorioCobranca
														.verificaPermissaoGerarPedidoBaixaBoleto(idBoletoBancario);

										if(permiteGerarBaixaBoleto){
											// 2.5.1.1. O sistema gera o pedido de baixa do boleto
											// negociado[SB0005] - Gera Pedido de Baixa dos Boletos
											// passando uma lista com o boleto bancário negociado
											// e com o Indicador de Usuário Batch com o valor 2
											// (não).
											// Consulta o boleto gerado
											filtroBoletoBancario = new FiltroBoletoBancario();
											filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID,
															idBoletoBancario));
											filtroBoletoBancario.adicionarParametro(new ParametroNaoNulo(
															FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
											filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.SITUACAO);

											colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario,
															BoletoBancario.class.getName());

											if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
												boletoBancario = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoletoBancario);
												if(boletoBancario.getIdOriginal() != null){
													this.gerarPedidoBaixaBoleto(boletoBancario.getIdOriginal(), boletoBancario
																	.getBoletoBancarioSituacao().getId(), new Date(), usuarioProcesso);
												}else{
													// Se não possuir idOriginal significa que é o
													// boleto original
													this.gerarPedidoBaixaBoleto(boletoBancario.getId(), boletoBancario
																	.getBoletoBancarioSituacao().getId(), new Date(), usuarioProcesso);
												}
											}

											// 2.5.1.2. O sistema gera a ocorrência "Pedido de baixa
											// do boleto
											// de sequencial
											// Usuário deve acompanhar a confirmação da baixa do
											// boleto pelo
											// banco por meio da funcionalidade Manter Boleto
											// Bancário".
											ocorrenciaPedidoBaixa = "";
											ocorrenciaPedidoBaixa += "Pedido de baixa do boleto de sequencial ";
											ocorrenciaPedidoBaixa += numeroSequencial == null ? "" : numeroSequencial + ". ";
											ocorrenciaPedidoBaixa += "Usuário deve acompanhar a confirmação da baixa do boleto pelo ";
											ocorrenciaPedidoBaixa += "banco por meio da funcionalidade Manter Boleto Bancário.";

										}
										// 2.6. Caso contrário, ou seja, caso a situação atual do
										// boleto
										// negociado não permita a geração do pedido de baixa do
										// boleto
										// OU exista para o boleto negociado movimentação pendente
										// de envio
										// e/ou retorno:
										else{
											// 2.6.1. O sistema gera a ocorrência "Não foi possível
											// gerar o
											// pedido de baixa do boleto de sequencial
											// A situação atual do boleto
											// não permite o pedido de baixa ou há movimentação
											// pendente de
											// envio ou retorno para o boleto.
											// Usuário deve pedir a baixa do boleto por meio da
											// funcionalidade Manter Boleto Bancário".
											ocorrenciaPedidoBaixa = "";
											ocorrenciaPedidoBaixa += "Não foi possível gerar o pedido de baixa do boleto de sequencial ";
											ocorrenciaPedidoBaixa += numeroSequencial == null ? "" : numeroSequencial + ". ";

											if(!Util.isVazioOuBranco(idSituacaoAtualBoletoBancarioAnterior)){
												idSituacaoAtual2 = idSituacaoAtualBoletoBancarioAnterior;

												FiltroBoletoBancarioSituacao filtroBoletoBancarioSituacao = new FiltroBoletoBancarioSituacao();
												filtroBoletoBancarioSituacao.adicionarParametro(new ParametroSimples(
																FiltroBoletoBancarioSituacao.ID, idSituacaoAtual2));

												Collection<BoletoBancarioSituacao> colecaoBoletoBancarioSituacao = this
																.getControladorUtil().pesquisar(filtroBoletoBancarioSituacao,
																				BoletoBancarioSituacao.class.getName());

												if(!Util.isVazioOrNulo(colecaoBoletoBancarioSituacao)){
													BoletoBancarioSituacao boletoBancarioSituacao = (BoletoBancarioSituacao) Util
																	.retonarObjetoDeColecao(colecaoBoletoBancarioSituacao);
													descricaoSituacaoAtualBoleto2 = boletoBancarioSituacao.getDescricao();
												}

											}
											ocorrenciaPedidoBaixa += "A situação atual do boleto " + descricaoSituacaoAtualBoleto2 + " ";
											ocorrenciaPedidoBaixa += "não permite o pedido de baixa ou há movimentação pendente de envio ou retorno para o boleto. ";
											ocorrenciaPedidoBaixa += "Usuário deve pedir a baixa do boleto por meio da funcionalidade Manter Boleto Bancário.";
										}

										relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
														.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
									}
								}catch(ControladorException e){
									e.printStackTrace();
								}
								colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2
												.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper);
							}

							// Pesquisa a Guia de Pagamento Prestação com número de prestação
							// igual a 2 para atualizar a data de vencimento da guia com numero
							// de prestação igual a 1.
							if(guiaPagamentoPrestacaoNumeroPrestacao2 == null){
								filtroGuiaPagamentoPrestacao2 = new FiltroGuiaPagamentoPrestacao();
								filtroGuiaPagamentoPrestacao2.adicionarParametro(new ParametroSimples(
												FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID, guiaPagamentoPrestacao.getComp_id()
																.getGuiaPagamentoId()));
								filtroGuiaPagamentoPrestacao2.adicionarParametro(new ParametroSimples(
												FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO, 2));

								guiasPagamentosPrestacao2 = this.getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao2,
												GuiaPagamentoPrestacao.class.getName());

								if(!Util.isVazioOrNulo(guiasPagamentosPrestacao2)){
									guiaPagamentoPrestacaoNumeroPrestacao2 = (GuiaPagamentoPrestacao) Util
													.retonarObjetoDeColecao(guiasPagamentosPrestacao2);
								}
							}

							// [SB0004] - Retifica data de vencimento primeira prestação.
							if(guiaPagamentoPrestacaoNumeroPrestacao2 != null){
								guiaPagamentoPrestacao.setDataVencimento(guiaPagamentoPrestacaoNumeroPrestacao2.getDataVencimento());
							}else{
								// ATUALIZAÇÃO [SB0004] - Retifica data de vencimento primeira
								// prestação. Se não existir uma 2a prestação atualiza a data de
								// vencimento atribuindo o valor original mais 1 mês
								guiaPagamentoPrestacao.setDataVencimento(Util.adcionarOuSubtrairMesesAData(
												guiaPagamentoPrestacao.getDataVencimento(), 1, 0));
							}

							guiaPagamentoPrestacao.setUltimaAlteracao(new Date());
							this.getControladorUtil().atualizar(guiaPagamentoPrestacao);

							// Como so chama o UC3016 no fim de cada conjunto de prestação da
							// mesma guia, temos que tratar a chamada para o último registro.
							if(!itGuiasPagamentosPrestacao.hasNext()){
								try{
									relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper();

									// Chama o [UC3016 - Gerar Boleto Cobrança Bancária]
									colecaoBoletoBancarioGerado = this.gerarBoletoCobrancaBancaria(null, guiaPagamentoPrestacao
													.getComp_id().getGuiaPagamentoId(), 1, null);

									if(!Util.isVazioOrNulo(colecaoBoletoBancarioGerado)){
										// 2.1. O sistema gera a ocorrência
										// "Geração dos boletos das guias do parcelamento do boleto
										// de
										// sequencial."
										// no relatório de ocorrências do processo diário da
										// cobrança
										// bancária.
										ocorrenciaSequencialBoleto = "";
										if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[2])){
											numeroSequencial = (Integer) guiasPagamentoPrestacaoArray[2];

											ocorrenciaSequencialBoleto += "Geração dos boletos das guias do parcelamento do boleto de sequencial "
															+ numeroSequencial + ".";
										}

										relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
														.setOcorrenciaSequencialBoleto(ocorrenciaSequencialBoleto);

										colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper>();

										// 2.4. Para cada boleto gerado pelo [UC3016]
										for(BoletoBancario boletoBancarioGerado : colecaoBoletoBancarioGerado){
											relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper();
											descricaoBoletosGerados = "";
											// 2.4.1. O sistema gera a ocorrência "Geração do boleto
											// de
											// sequencial correspondente à prestação do parcelamento
											// do boleto de sequencial para o arrecadador
											descricaoBoletosGerados += "Geração do boleto de sequencial ";
											descricaoBoletosGerados += boletoBancarioGerado.getNumeroSequencial() + " ";
											descricaoBoletosGerados += "correspondente à prestação ";
											descricaoBoletosGerados += boletoBancarioGerado.getGuiaPagamento().getId() + "-";
											descricaoBoletosGerados += boletoBancarioGerado.getNumeroPrestacoes() + " ";
											descricaoBoletosGerados += "do parcelamento do boleto de sequencial " + numeroSequencial + " ";

											String nomeCliente = "";
											ArrecadadorContrato arrecadadorContrato = repositorioCobranca
															.pesquisarContratoArrecadadorPorGuiaPagamento(boletoBancarioGerado
																			.getGuiaPagamento().getId());

											if(!Util.isVazioOuBranco(arrecadadorContrato)){
												FiltroArrecadadorContrato filtroArrecadadorContrato = new FiltroArrecadadorContrato();

												filtroArrecadadorContrato.adicionarParametro(new ParametroSimples(
																FiltroArrecadadorContrato.ID, arrecadadorContrato.getId()));
												filtroArrecadadorContrato
																.adicionarCaminhoParaCarregamentoEntidade(FiltroArrecadadorContrato.ARRECADADOR_CLIENTE);

												Collection<ArrecadadorContrato> colecaoArrecadadorContrato = this.getControladorUtil()
																.pesquisar(filtroArrecadadorContrato, ArrecadadorContrato.class.getName());

												if(!Util.isVazioOrNulo(colecaoArrecadadorContrato)){
													ArrecadadorContrato arrecadadorContratoAux = (ArrecadadorContrato) Util
																	.retonarObjetoDeColecao(colecaoArrecadadorContrato);
													nomeCliente = arrecadadorContratoAux.getArrecadador().getCliente().getNome();
												}
											}

											descricaoBoletosGerados += "para o arrecadador " + nomeCliente;

											relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper
															.setBoletoGerado(descricaoBoletosGerados);

											colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados
															.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGeradosHelper);
										}
									}

									relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
													.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosGerados);

									if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[3])){
										idBoletoBancario = (Integer) guiasPagamentoPrestacaoArray[3];

										boolean permiteGerarBaixaBoleto = repositorioCobranca
														.verificaPermissaoGerarPedidoBaixaBoleto(idBoletoBancario);

										if(permiteGerarBaixaBoleto){
											// 2.5.1.1. O sistema gera o pedido de baixa do boleto
											// negociado[SB0005] - Gera Pedido de Baixa dos Boletos
											// passando uma lista com o boleto bancário negociado
											// e com o Indicador de Usuário Batch com o valor 2
											// (não).
											// Consulta o boleto gerado
											filtroBoletoBancario = new FiltroBoletoBancario();
											filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID,
															idBoletoBancario));
											filtroBoletoBancario.adicionarParametro(new ParametroNaoNulo(
															FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
											filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.SITUACAO);

											colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario,
															BoletoBancario.class.getName());

											if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
												boletoBancario = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoletoBancario);
												if(boletoBancario.getIdOriginal() != null){
													this.gerarPedidoBaixaBoleto(boletoBancario.getIdOriginal(), boletoBancario
																	.getBoletoBancarioSituacao().getId(), new Date(), usuarioProcesso);
												}else{
													// Se não possuir idOriginal significa que é o
													// boleto original
													this.gerarPedidoBaixaBoleto(boletoBancario.getId(), boletoBancario
																	.getBoletoBancarioSituacao().getId(), new Date(), usuarioProcesso);
												}
											}

											// 2.5.1.2. O sistema gera a ocorrência "Pedido de baixa
											// do boleto
											// de sequencial
											// Usuário deve acompanhar a confirmação da baixa do
											// boleto pelo
											// banco por meio da funcionalidade Manter Boleto
											// Bancário".
											ocorrenciaPedidoBaixa = "";
											ocorrenciaPedidoBaixa += "Pedido de baixa do boleto de sequencial " + numeroSequencial + ". ";
											ocorrenciaPedidoBaixa += "Usuário deve acompanhar a confirmação da baixa do boleto pelo ";
											ocorrenciaPedidoBaixa += "banco por meio da funcionalidade Manter Boleto Bancário.";

										}
										// 2.6. Caso contrário, ou seja, caso a situação atual do
										// boleto
										// negociado não permita a geração do pedido de baixa do
										// boleto
										// OU exista para o boleto negociado movimentação pendente
										// de envio
										// e/ou retorno:
										else{
											// 2.6.1. O sistema gera a ocorrência "Não foi possível
											// gerar o
											// pedido de baixa do boleto de sequencial
											// A situação atual do boleto
											// não permite o pedido de baixa ou há movimentação
											// pendente de
											// envio ou retorno para o boleto.
											// Usuário deve pedir a baixa do boleto por meio da
											// funcionalidade Manter Boleto Bancário".
											ocorrenciaPedidoBaixa = "";
											ocorrenciaPedidoBaixa += "Não foi possível gerar o pedido de baixa do boleto de sequencial "
															+ numeroSequencial + ". ";

											if(!Util.isVazioOuBranco(guiasPagamentoPrestacaoArray[4])){
												idSituacaoAtual2 = (Integer) guiasPagamentoPrestacaoArray[4];

												FiltroBoletoBancarioSituacao filtroBoletoBancarioSituacao = new FiltroBoletoBancarioSituacao();
												filtroBoletoBancarioSituacao.adicionarParametro(new ParametroSimples(
																FiltroBoletoBancarioSituacao.ID, idSituacaoAtual2));

												Collection<BoletoBancarioSituacao> colecaoBoletoBancarioSituacao = this
																.getControladorUtil().pesquisar(filtroBoletoBancarioSituacao,
																				BoletoBancarioSituacao.class.getName());

												if(!Util.isVazioOrNulo(colecaoBoletoBancarioSituacao)){
													BoletoBancarioSituacao boletoBancarioSituacao = (BoletoBancarioSituacao) Util
																	.retonarObjetoDeColecao(colecaoBoletoBancarioSituacao);
													descricaoSituacaoAtualBoleto2 = boletoBancarioSituacao.getDescricao();
												}

											}
											ocorrenciaPedidoBaixa += "A situação atual do boleto " + descricaoSituacaoAtualBoleto2 + " ";
											ocorrenciaPedidoBaixa += "não permite o pedido de baixa ou há movimentação pendente de envio ou retorno para o boleto. ";
											ocorrenciaPedidoBaixa += "Usuário deve pedir a baixa do boleto por meio da funcionalidade Manter Boleto Bancário.";
										}

										relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper
														.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
									}
								}catch(ControladorException e){
									e.printStackTrace();
								}

								colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2
												.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletosHelper);
							}
							// Armazena a guia anterior para que possa ser feita a comparação na
							// próxima iteração, verificando se existe transição nos números dos
							// ids. Caso ocorra essa transição será gerado boleto para o conjunto de
							// guias anterior à iteração corrente.
							guiaPagamentoPrestacaoAnterior = guiaPagamentoPrestacao;
							numeroSequencialAnterior = (Integer) guiasPagamentoPrestacaoArray[2];
							idBoletoBancarioAnterior = (Integer) guiasPagamentoPrestacaoArray[3];
							idSituacaoAtualBoletoBancarioAnterior = (Integer) guiasPagamentoPrestacaoArray[4];

						}
					}
				}

				if(!Util.isVazioOrNulo(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2)){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
									.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaBoletos2);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper);
				}
			}

			// [SB0001] PASSO 4 - Pesquisa os boletos bancários gerados a partir da ação de cobrança
			// bancária, com situação atual que permite a geração de pedido de baixa do boleto, sem
			// movimentação pendente de envio e/ou retorno e sem itens pendentes
			Collection listaBoletosPedidoBaixa = repositorioCobranca.pesquisarBoletosBancariosPermissaoPedidoBaixa();
			Date dataAtual = new Date();

			// [FS0001 - Verifica seleção de boletos].
			if(listaBoletosPedidoBaixa != null && !listaBoletosPedidoBaixa.isEmpty()){
				Iterator dadosBoletosPedidoBaixa = listaBoletosPedidoBaixa.iterator();

				// [SB0008] - Gera Pedido de Baixa dos Boletos Originais Sem Pendência Total ou
				// Parcial
				// 1. O sistema gera o relatório de ocorrências do processo diário da cobrança
				// bancária para a situação
				// "Relação dos boletos bancários agregadores de contas, com situação atual que
				// permite o pedido de baixa do boleto,
				// sem movimentação pendente de envio e/ou retorno e com alguma das contas não mais
				// pendente".
				descricaoOcorrencia = "";
				descricaoOcorrencia += "Relação dos boletos bancários agregadores de contas, ";
				descricaoOcorrencia += "com situação atual que permite o pedido de baixa do boleto, ";
				descricaoOcorrencia += "sem movimentação pendente de envio e/ou retorno e com alguma das contas não mais pendente.";

				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper();
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
								.setOcorrencia(ConstantesSistema.OCORRENCIA_PERMITE_PEDIDO_BAIXA_SEM_MOVIMENTACAO_ENVIO_PENDENTE);
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper.setDescricaoOcorrencia(descricaoOcorrencia);

				colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper>();

				while(dadosBoletosPedidoBaixa.hasNext()){

					Object[] boletoPedidoBaixaArray = (Object[]) dadosBoletosPedidoBaixa.next();
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper();

					if(boletoPedidoBaixaArray != null){
						// Consulta o boleto gerado
						filtroBoletoBancario = new FiltroBoletoBancario();
						filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.SITUACAO);
						filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID,
										(Integer) boletoPedidoBaixaArray[0]));

						Collection<BoletoBancario> colecaoBoleto = this.getControladorUtil().pesquisar(filtroBoletoBancario,
										BoletoBancario.class.getName());

						BoletoBancario boleto = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoleto);
						// 2. O sistema gera o pedido de baixa dos boletos
						// [SB0005 - Gera Pedido de Baixa dos Boletos], passando uma lista com os
						// boletos bancários selecionados
						// e com o Indicador de Usuário Batch com o valor 1 (sim).
						this.gerarPedidoBaixaBoleto(boleto.getId(), boleto.getBoletoBancarioSituacao().getId(), dataAtual,
										Usuario.USUARIO_BATCH);

						// 3. Para cada boleto com pedido de baixa gerado:
						// 3.1. O sistema gera a ocorrência "Pedido de baixa do boleto de sequencial
						// Usuário deve acompanhar a confirmação da baixa do boleto pelo banco por
						// meio da funcionalidade Manter Boleto Bancário".
						ocorrenciaPedidoBaixa = "";
						ocorrenciaPedidoBaixa += "Pedido de baixa do boleto de sequencial " + numeroSequencial + ". ";
						ocorrenciaPedidoBaixa += "Usuário deve acompanhar a confirmação da baixa do boleto pelo ";
						ocorrenciaPedidoBaixa += "banco por meio da funcionalidade Manter Boleto Bancário.";
					}

					relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa
									.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper);
				}

				if(!Util.isVazioOuBranco(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa)){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
									.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper);
				}
			}

			// [SB0001] PASSO 5 - O sistema Gera Pedido de Baixa dos Boletos selecionando os boletos
			// bancários gerados a partir da ação de cobrança bancária, com parcelamento realizado
			// sem entrada, com situação atual que permite a geração de pedido de baixa e sem
			// movimentação pendente de envio e/ou retorno, com retorno da entrada de títulos de
			// todos os boletos correspondentes às prestações do parcelamento ou com todos os
			// boletos correspondentes às prestações do parcelamento cancelados
			Collection<BoletoBancario> listaBoletosSemEntradaPedidoBaixa = repositorioCobranca
							.pesquisarBoletosBancariosSemEntradaPermissaoPedidoBaixa();

			// [FS0001 - Verifica seleção de boletos].
			if(!Util.isVazioOrNulo(listaBoletosSemEntradaPedidoBaixa)){
				// [SB0009] - Gera Pedido de Baixa dos Boletos Originais Parcelados Sem Entrada

				// 1. O sistema gera o relatório de ocorrências do processo diário da cobrança
				// bancária para a situação
				// "Relação dos boletos bancários agregadores de contas, parcelados sem entrada, com
				// situação atual que permite o pedido de baixa do boleto,
				// com retorno da entrada de títulos de todos os boletos correspondentes às
				// prestações do parcelamento ou com todos os boletos correspondentes às prestações
				// do parcelamento cancelados".
				descricaoOcorrencia = "";
				descricaoOcorrencia += "Relação dos boletos bancários agregadores de contas, parcelados sem entrada, ";
				descricaoOcorrencia += "com situação atual que permite o pedido de baixa do boleto, ";
				descricaoOcorrencia += "com retorno da entrada de títulos de todos os boletos correspondentes às prestações do parcelamento ";
				descricaoOcorrencia += "ou com todos os boletos correspondentes às prestações do parcelamento cancelados.";

				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper();
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
								.setOcorrencia(ConstantesSistema.OCORRENCIA_PERMITE_PEDIDO_BAIXA_COM_RETORNO_ENTRADA_OU_BOLETOS_CANCELADOS);
				relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper.setDescricaoOcorrencia(descricaoOcorrencia);

				colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper>();

				// 2. O sistema gera o pedido de baixa dos boletos
				// [SB0005 - Gera Pedido de Baixa dos Boletos], passando uma lista com os boletos
				// bancários selecionados
				// e com o Indicador de Usuário Batch com o valor 2 (não).
				for(BoletoBancario boletoSemEntradaPedidoBaixa : listaBoletosSemEntradaPedidoBaixa){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper();

					numeroSequencial = boletoSemEntradaPedidoBaixa.getNumeroSequencial();

					if(!Util.isVazioOuBranco(boletoSemEntradaPedidoBaixa)){
						this.gerarPedidoBaixaBoleto(boletoSemEntradaPedidoBaixa.getId(), boletoSemEntradaPedidoBaixa
										.getBoletoBancarioSituacao().getId(), dataAtual, usuarioProcesso);
					}
					// 3. Para cada boleto com pedido de baixa gerado:
					// 3.1. O sistema gera a ocorrência "Pedido de baixa do boleto de sequencial
					// Usuário deve acompanhar a confirmação da baixa do boleto pelo banco por meio
					// da funcionalidade Manter Boleto Bancário".
					ocorrenciaPedidoBaixa = "";
					ocorrenciaPedidoBaixa += "Pedido de baixa do boleto de sequencial " + numeroSequencial + ". ";
					ocorrenciaPedidoBaixa += "Usuário deve acompanhar a confirmação da baixa do boleto pelo ";
					ocorrenciaPedidoBaixa += "banco por meio da funcionalidade Manter Boleto Bancário.";

					relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa
									.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper);
				}

				if(!Util.isVazioOuBranco(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa)){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
									.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper);
				}
			}

			// [SB0001] PASSO 6 - O sistema seleciona os imóveis com boletos de documento de
			// cobrança, baixados, onde o pedido de baixa foi feito pelo usuário batch, com itens
			// pendentes e sem novo boleto de documento de cobrança para o imóvel com algum desses
			// itens
			Integer idUsuarioBatch = Integer.valueOf((String) ParametroGeral.P_USUARIO_BATCH.executar());

			Collection<Object[]> listaImoveisComBoletosBaixados = repositorioCobranca.pesquisarImoveisComBoletosBaixados(idUsuarioBatch);

			if(!Util.isVazioOrNulo(listaImoveisComBoletosBaixados)){
				// [SB0006] - Gera Novo Boleto
				Map<Integer, Collection<Integer>> mapArrecadadorImoveis = new HashMap<Integer, Collection<Integer>>();

				Integer idArrecadador = null;
				Integer idImovel = null;

				Collection<Integer> idImoveis = null;

				colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa = new ArrayList<RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper>();

				for(Object[] arrayArrecadadorImovel : listaImoveisComBoletosBaixados){
					idArrecadador = (Integer) arrayArrecadadorImovel[0];
					idImovel = (Integer) arrayArrecadadorImovel[1];
					if(mapArrecadadorImoveis.containsKey(idArrecadador)){
						idImoveis = mapArrecadadorImoveis.get(idArrecadador);
					}else{
						idImoveis = new ArrayList<Integer>();
					}
					idImoveis.add(idImovel);
					mapArrecadadorImoveis.put(idArrecadador, idImoveis);
				}

				Collection<Integer> colecaoIdCobrancaAcaoAtividadeComando = new ArrayList<Integer>();
				Integer idComando = null;

				for(Integer idArrecadadorAux : mapArrecadadorImoveis.keySet()){
					idImoveis = mapArrecadadorImoveis.get(idArrecadadorAux);

					idComando = this.gerarNovoBoleto(idArrecadadorAux, idImoveis, idProcessoIniciado);

					if(!colecaoIdCobrancaAcaoAtividadeComando.contains(idComando)){
						colecaoIdCobrancaAcaoAtividadeComando.add(idComando);
					}
				}


				for(Integer idCobrancaAcaoAtividadeComando : colecaoIdCobrancaAcaoAtividadeComando){
					// 1.1.4. Para cada boleto gerado
					// (a partir da tabela BOLETO_BANCARIO com CBDO_ID=CBDO_ID da tabela
					// COBRANCA_DOCUMENTO com CACM_ID=CACM_ID executado no passo anterior):
					filtroBoletoBancario = new FiltroBoletoBancario();
					filtroBoletoBancario.adicionarParametro(new ParametroNaoNulo(FiltroBoletoBancario.DOCUMENTOCOBRANCA_ID));
					filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
									idCobrancaAcaoAtividadeComando));

					Collection<BoletoBancario> colecaoBoletosBancarios = this.getControladorUtil().pesquisar(filtroBoletoBancario,
									BoletoBancario.class.getName());

					if(!Util.isVazioOuBranco(colecaoBoletosBancarios)){
						// 1.1.3. O sistema gera o relatório de ocorrências do processo diário da
						// cobrança
						// bancária para a situação
						// "Relação dos boletos gerados para substituir os boletos baixados em razão
						// de
						// algumas de suas contas não estarem mais pendentes".
						relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper();

						descricaoOcorrencia = "";
						descricaoOcorrencia += "Relação dos boletos gerados para substituir os boletos baixados ";
						descricaoOcorrencia += "em razão de algumas de suas contas não estarem mais pendentes.";

						relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
										.setOcorrencia(ConstantesSistema.OCORRENCIA_BOLETOS_GERADOS_PARA_SUBSTITUIR_BOLETOS_BAIXADOS);
						relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper.setDescricaoOcorrencia(descricaoOcorrencia);
					}

					for(BoletoBancario boletoBancarioComando : colecaoBoletosBancarios){
						relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper = new RelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper();

						numeroSequencial = boletoBancarioComando.getNumeroSequencial();

						// 1.1.4.1. O sistema gera a ocorrência "Geração do boleto de sequencial
						ocorrenciaPedidoBaixa = "";
						ocorrenciaPedidoBaixa += "Geração do boleto de sequencial " + numeroSequencial + ".";

						relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper.setOcorrenciaPedidoBaixa(ocorrenciaPedidoBaixa);
						colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa
										.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixaHelper);
					}
				}

				if(!Util.isVazioOuBranco(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa)){
					relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper
									.setColecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa(colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancariaPedidoBaixa);
					colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria.add(relatorioOcorrenciasProcessoDiarioCobrancaBancariaHelper);
				}
			}

			// [SB0002] - Processar Negociações com Pré-Parcelamentos
			// Pesquisa as ocorrências de negociações de cobranças realizadas por meio de registros
			// de atendimento ainda não finalizados
			Collection<CobrancaNegociacaoAtendimento> colecaoCobrancaNegociacaoAtendimento = repositorioCobranca
							.pesquisarCobrancaNegociacaoAtendimentoNaoEncerrado();

			if(!Util.isVazioOrNulo(colecaoCobrancaNegociacaoAtendimento)){
				// Verifica, para cada negociacao, se existe a necessidade de encerrar o registro de
				// atendimento caso o prazo para a negociação do débito expirar
				for(CobrancaNegociacaoAtendimento cobrancaNegociacaoAtendimento : colecaoCobrancaNegociacaoAtendimento){
					String parametroDiasCarenciaPagamentoEntradaNegociacao = (String) ParametroCobranca.P_DIAS_CARENCIA_PAGAMENTO_ENTRADA_NEGOCIACAO
									.executar();
					Date prazoMaximoCarencia = Util.adicionarNumeroDiasDeUmaData(cobrancaNegociacaoAtendimento.getDataVencimento(),
									Integer.parseInt(parametroDiasCarenciaPagamentoEntradaNegociacao));

					// Se o dia do prazo máximo for menor que o dia atual no sistema encerra o RA
					if(prazoMaximoCarencia.before(Util.zerarHoraMinutoSegundo(new Date()))){
						String nmTipoDocumentoNegociacao = null;
						Integer idDocumentoNegociacao = null;
						String nmDescricaoParecer = "";
						Date dataCorrente = new Date();

						// Prepara o texto com a descrição do parecer
						if(cobrancaNegociacaoAtendimento.getCobrancaDocumento() != null){
							// Caso a negociação corresponda a um extrato de débito seta os campos
							// nuTipoDocumentoNegociacao e idDocumentoNegociacao de acordo com o
							// documento de cobrança
							nmTipoDocumentoNegociacao = "Extrato de Débito de Negociação";
							idDocumentoNegociacao = cobrancaNegociacaoAtendimento.getCobrancaDocumento().getId();

						}else if(cobrancaNegociacaoAtendimento.getPreParcelamento() != null){
							// Caso a negociação corresponda a um pré-parcelamento seta os campos
							// nuTipoDocumentoNegociacao e idDocumentoNegociacao de acordo com o
							// pré-parcelamento
							nmTipoDocumentoNegociacao = "Pré-Parcelamento de Negociação";
							idDocumentoNegociacao = cobrancaNegociacaoAtendimento.getPreParcelamento().getId();
						}

						nmDescricaoParecer = "Este RA foi encerrado em razão do NÃO pagamento do " + nmTipoDocumentoNegociacao
										+ "de identificação " + idDocumentoNegociacao.toString() + " antes do vencimento.";

						// Encerrar RA
						RegistroAtendimento registroAtendimento = cobrancaNegociacaoAtendimento.getRegistroAtendimento();

						// Prepara o motivo de encerramento
						FiltroAtendimentoMotivoEncerramento filtroAtendimentoMotivoEncerramento = new FiltroAtendimentoMotivoEncerramento();

						filtroAtendimentoMotivoEncerramento.adicionarParametro(new ParametroSimples(FiltroAtendimentoMotivoEncerramento.ID,
										AtendimentoMotivoEncerramento.PRIMEIRA_PARCELA_NAO_PAGA));

						Collection colecaoAtendimentoMotivoEncerramento = Fachada.getInstancia().pesquisar(
										filtroAtendimentoMotivoEncerramento, AtendimentoMotivoEncerramento.class.getName());

						AtendimentoMotivoEncerramento atendimentoMotivoEncerramento = (AtendimentoMotivoEncerramento) Util
										.retonarObjetoDeColecao(colecaoAtendimentoMotivoEncerramento);

						// Prepara o usuario
						FiltroUsuario filtroUsuario = new FiltroUsuario();

						filtroUsuario.adicionarCaminhoParaCarregamentoEntidade("unidadeOrganizacional");

						filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.ID, Usuario.USUARIO_BATCH.getId()));

						Collection colecaoUsuario = Fachada.getInstancia().pesquisar(filtroUsuario, Usuario.class.getName());

						Usuario usuario = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);

						// Seta os campos referentes ao encerramento pelo processo batch
						registroAtendimento.setAtendimentoMotivoEncerramento(atendimentoMotivoEncerramento);
						registroAtendimento.setCodigoSituacao(ConstantesSistema.CD_SITUACAO_RA_ENCERRADO);
						registroAtendimento.setDataEncerramento(dataCorrente);
						registroAtendimento.setParecerEncerramento(nmDescricaoParecer);
						registroAtendimento.setUltimaAlteracao(dataCorrente);

						// Faz as validações de tramitação
						Fachada.getInstancia().validarEncerramentoRA(registroAtendimento);

						// Prepara o RA unidade
						RegistroAtendimentoUnidade registroAtendimentoUnidade = new RegistroAtendimentoUnidade();

						registroAtendimentoUnidade.setRegistroAtendimento(registroAtendimento);
						registroAtendimentoUnidade.setUnidadeOrganizacional(usuario.getUnidadeOrganizacional());
						registroAtendimentoUnidade.setUsuario(usuario);

						AtendimentoRelacaoTipo atendimentoRelacaoTipo = new AtendimentoRelacaoTipo();
						atendimentoRelacaoTipo.setId(AtendimentoRelacaoTipo.ENCERRAR);

						registroAtendimentoUnidade.setAtendimentoRelacaoTipo(atendimentoRelacaoTipo);
						registroAtendimentoUnidade.setUltimaAlteracao(dataCorrente);

						// Encerrar RA
						this.getControladorRegistroAtendimento().encerrarRegistroAtendimento(registroAtendimento,
										registroAtendimentoUnidade, usuario);
					}
				}
			}

			RelatorioOcorrenciasProcessoDiarioCobrancaBancaria relatorioOcorrenciasProcessoDiarioCobrancaBancaria = new RelatorioOcorrenciasProcessoDiarioCobrancaBancaria(
							usuarioProcesso);
			relatorioOcorrenciasProcessoDiarioCobrancaBancaria.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);

			relatorioOcorrenciasProcessoDiarioCobrancaBancaria.addParametro("colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria",
							colecaoRelatorioOcorrenciasProcessoDiarioCobrancaBancaria);

			this.getControladorBatch().iniciarProcessoRelatorio(relatorioOcorrenciasProcessoDiarioCobrancaBancaria);

			// --------------------------------------------------------
			//
			// Registrar o fim da execução da Unidade de Processamento
			//
			// --------------------------------------------------------
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception e){
			// sessionContext.setRollbackOnly();
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);

			// Gera o Email do Erro.
			this.gerarEmailErro(e, EnvioEmail.IDENTIFICAR_COBRANCA_BANCARIA_COM_NEGOCIACAO);
		}
	}

	/**
	 * Gera o pedido de baixo de um boleto
	 * 
	 * @author Hugo Lima
	 * @date 19/12/2011
	 * @param idBoletoBancario
	 * @param idBoletoBancarioLancamentoEnvio
	 * @throws ControladorException
	 */
	private void gerarPedidoBaixaBoleto(Integer idBoletoBancario, Integer idSituacaoBoleto, Date dataAtual, Usuario usuario)
					throws ControladorException{

		BoletoBancarioMovimentacao boletoBancarioMovimentacao = new BoletoBancarioMovimentacao();
		BoletoBancarioLancamentoEnvio boletoBancarioLancamentoEnvio = null;

		// Verifica qual tipo de lançamento será realizado
		if(idSituacaoBoleto.equals(BoletoBancarioSituacao.EM_CARTEIRA)){
			boletoBancarioLancamentoEnvio = BoletoBancarioLancamentoEnvio.PEDIDO_BAIXA;
		}else if(idSituacaoBoleto.equals(BoletoBancarioSituacao.EM_CARTORIO)){
			boletoBancarioLancamentoEnvio = BoletoBancarioLancamentoEnvio.SUSTAR_PROTESTO_BAIXAR_TITUL;
		}

		// Seta os campos de BoletoBancarioMovimentacao
		boletoBancarioMovimentacao.setBoletoBancario(new BoletoBancario(idBoletoBancario));
		boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(boletoBancarioLancamentoEnvio);
		boletoBancarioMovimentacao.setUsuario(usuario);
		boletoBancarioMovimentacao.setDataMovimentacao(dataAtual);
		boletoBancarioMovimentacao.setUltimaAlteracao(dataAtual);

		// Inclui o BoletoBancarioMovimentacao
		this.getControladorUtil().inserir(boletoBancarioMovimentacao);
	}

	/**
	 * Gera o email relatando o erro dado no processamento da rotina.
	 * 
	 * @author Ailton Sousa
	 * @date 20/10/2011
	 * @param e
	 * @param idEnvioEmail
	 * @throws ControladorException
	 */
	private void gerarEmailErro(Exception e, Integer idEnvioEmail) throws ControladorException{

		try{
			String mensagem = e.getMessage();
			if(mensagem != null){
				if(!mensagem.startsWith("erro.") && !mensagem.startsWith("atencao.")){
					mensagem = "erro.sistema";
				}
			}else{
				mensagem = "erro.sistema";
			}

			EnvioEmail envioEmailError = getControladorCadastro().pesquisarEnvioEmail(idEnvioEmail);

			String emailRemetente = envioEmailError.getEmailRemetente();
			String tituloMensagem = envioEmailError.getTituloMensagem();
			String emailReceptor = envioEmailError.getEmailReceptor();
			String corpoMensagem = envioEmailError.getCorpoMensagem();
			if(e instanceof ControladorException){
				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor, tituloMensagem, corpoMensagem + "\n"
								+ ((ControladorException) e).getMensagem());
			}else{
				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor, tituloMensagem,
								corpoMensagem + "\n" + ConstantesAplicacao.get(mensagem));
			}

		}catch(Exception e2){
			e2.printStackTrace();
			throw new ControladorException("erro.sistema", e2);
		}
	}

	private GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaImoveisArquivoImoveis(Blob arquivoImoveis,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Integer indicadorCriterio, CobrancaAcao acaoCobranca,
					CobrancaAtividade atividadeCobranca, String anoMesReferenciaInicial, String anoMesReferenciaFinal,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual, SistemaParametro sistemaParametros,
					Integer idSetorComercial, CobrancaCriterio criterioCobranca, Collection colecaoCobrancaCriterioLinha,
					Integer idFuncionalidadeIniciada, Integer idFaturamentoGrupoCronogramaMensal, ClienteRelacaoTipo clienteRelacaoTipo)
					throws ControladorException{

		try{
			// cria o objeto que vai armazenas os dados
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

			// cria o objeto que vai armazenar temporariamente os dados retornados
			// pelo [SB0003], para cada imóvel
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

			// inicializa os valores de quantidade de documentos, quantidade de
			// itens cobrados e valor do documento de cobrança
			gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
			gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(0);
			gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(BigDecimal.ZERO);

			byte[] arrayByte = IoUtil.toByteArray(arquivoImoveis);
			ArrayList<Integer> idImoveis = new ArrayList<Integer>();
			FileReader fileReader = null;
			arquivoImoveis.getBinaryStream();
			File arquivo = new File("arquivoGerarAtividadeAcaoCobrancaImoveisArquivoImoveis" + idSetorComercial
							+ System.currentTimeMillis() + ".txt");
			if(!arquivo.exists()){
				arquivo.createNewFile();
			}
			FileOutputStream fos = new FileOutputStream(arquivo);
			fos.write(arrayByte);
			fos.flush();
			fos.close();
			fileReader = new FileReader(arquivo);
			BufferedReader br = new BufferedReader(fileReader);
			String linha = null;
			Integer[] idsTipoDocumentoAIgnorar = null;
			switch(acaoCobranca.getDocumentoTipo().getId()){
				case DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL:
					idsTipoDocumentoAIgnorar = new Integer[6];
					idsTipoDocumentoAIgnorar[0] = DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO;
					idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL;
					idsTipoDocumentoAIgnorar[2] = DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO;
					idsTipoDocumentoAIgnorar[3] = DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL;
					idsTipoDocumentoAIgnorar[4] = DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO;
					idsTipoDocumentoAIgnorar[5] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
					break;
				case DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO:
				case DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL:
				case DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO:
				case DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL:
				case DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO:
					idsTipoDocumentoAIgnorar = new Integer[2];
					idsTipoDocumentoAIgnorar[0] = acaoCobranca.getDocumentoTipo().getId();
					idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
					break;
				default:
					idsTipoDocumentoAIgnorar = new Integer[1];
					idsTipoDocumentoAIgnorar[0] = acaoCobranca.getDocumentoTipo().getId();
					break;
			}
			Collection colecaoImoveis = null;
			while((linha = br.readLine()) != null){
				if(Util.isInteger(linha)){
					idImoveis.add(Util.obterInteger(linha));
				}
			}
			fileReader.close();
			br.close();
			arquivo.delete();
			colecaoImoveis = repositorioImovel.pesquisarImoveis(idImoveis, idSetorComercial, acaoCobranca.getId(),
							idsTipoDocumentoAIgnorar, criterioCobranca, clienteRelacaoTipo);

			if(!Util.isVazioOrNulo(colecaoImoveis)){
				// Objetos declarados/inicializados fora do loop para poupar memoria,
				// devido a qtde de imoveis que serão processados
				Imovel imovel = new Imovel();
				LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
				ImovelPerfil imovelPerfil = new ImovelPerfil();
				Quadra quadra = new Quadra();
				// Rota rotaEmpresa = null;
				Localidade localidade = new Localidade();
				SetorComercial setorComercial = new SetorComercial();
				CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
				Rota rota = new Rota();
				Empresa empresa = new Empresa();

				imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
				imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
				imovel.setImovelPerfil(imovelPerfil);
				imovel.setQuadra(quadra);
				imovel.setLocalidade(localidade);
				imovel.setSetorComercial(setorComercial);
				imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
				quadra.setRota(rota);
				imovel.setRota(rota);
				rota.setEmpresa(empresa);
				LogradouroCep logradouroCep = null;

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

				int imoveisIterados = 0;

				while(iteratorColecaoImoveis.hasNext()){

					Object[] arrayImovel = (Object[]) iteratorColecaoImoveis.next();

					imovel.setId((Integer) arrayImovel[0]);

					ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);

					ligacaoEsgotoSituacao.setId((Integer) arrayImovel[2]);

					imovelPerfil.setId((Integer) arrayImovel[3]);

					// caso a ação de cobrança gere a ordem de serviço
					if(acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null){
						// seta a empresa cobranca
						empresa.setId((Integer) arrayImovel[13]);
					}else{
						// seta a empresa
						empresa.setId((Integer) arrayImovel[4]);
					}

					localidade.setId((Integer) arrayImovel[5]);

					setorComercial.setCodigo((Integer) arrayImovel[6]);

					quadra.setNumeroQuadra((Integer) arrayImovel[7]);

					imovel.setLote((Short) arrayImovel[8]);

					imovel.setSubLote((Short) arrayImovel[9]);

					quadra.setId((Integer) arrayImovel[10]);

					cobrancaSituacaoTipo.setId((Integer) arrayImovel[11]);

					imovel.setIndicadorDebitoConta((Short) arrayImovel[12]);

					if((Integer) arrayImovel[14] != null){
						logradouroCep = new LogradouroCep();
						logradouroCep.setId((Integer) arrayImovel[14]);
						imovel.setLogradouroCep(logradouroCep);
					}
					rota.setId((Integer) arrayImovel[15]);

					imovel.setIndicadorExclusao((Short) arrayImovel[16]);

					gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, imovel, indicadorCriterio, acaoCobranca, atividadeCobranca,
									criterioCobranca, colecaoCobrancaCriterioLinha, anoMesReferenciaInicial, anoMesReferenciaFinal,
									dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
									idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);

					// se o objeto retornado for diferente de nulo
					if(gerarAtividadeAcaoCobrancaHelperTemp != null){

						// gerarAtividadeAcaoCobrancaHelper.getImovelIds().addAll(gerarAtividadeAcaoCobrancaHelperTemp.getImovelIds());

						// recupera a quantidade de documentos de cobrança, quantidade
						// de itens cobrados e o valor do documento do objeto retornado pelo
						// [SB0003]
						gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeDocumentosCobranca() + 1);
						gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeItensCobradosDocumentos()
										+ gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos());
						gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getValorDocumentosCobranca()
										.add(gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca()));
					}

					imoveisIterados++;
					// 4.2. Para cada 500 imóveis e no último imóvel, o sistema registra mensagem
					// <<Inclui>> [UC3043 Registrar Log de Execução do Processo], passando o id da
					// funcionalidade iniciada e a mensagem ["Quantidade de imóveis processados: " +
					// quantidade de imóveis já processados].
					if((imoveisIterados % 500 == 0) || (colecaoImoveis.size() == imoveisIterados)){
						this.getControladorAcesso().registrarLogExecucaoProcesso(idFuncionalidadeIniciada,
										"Quantidade de imóveis processados: " + imoveisIterados);
					}
				}
			}
			return gerarAtividadeAcaoCobrancaHelper;
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}catch(IOException e){
			throw new ControladorException("erro.sistema", e);
		}catch(SQLException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC3016] Gerar Boleto Cobrança Bancária
	 * 
	 * @date 18/10/2011
	 * @author Péricles Tavares
	 * @param idComandoCobrancaEventual
	 * @param idGuiaPagamento
	 * @param numeroPrestacaoInicialGuia
	 * @param usuario
	 * @throws ControladorException
	 */
	public Collection<BoletoBancario> gerarBoletoCobrancaBancaria(Integer idComandoCobrancaEventual, Integer idGuiaPagamento,
					Integer numeroPrestacaoInicialGuia, Usuario usuario) throws ControladorException{

		Integer qtidadeBoletos = 0;
		Collection<BoletoBancario> colecaoBoletoBancario = new ArrayList<BoletoBancario>();
		try{
			SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
			ArrecadadorContrato arrecadadorContrato = null;
			BoletoBancario boletoBancario = null;
			BoletoBancarioSituacaoHistorico boletoBancarioSituacaoHistorico = null;
			BoletoBancarioMovimentacao boletoBancarioMovimentacao = null;
			BoletoBancarioSituacao boletoBancarioSituacao = new BoletoBancarioSituacao();
			boletoBancarioSituacao.setId(BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO);
			DocumentoTipo documentoTipoCobranca = new DocumentoTipo();
			documentoTipoCobranca.setId(DocumentoTipo.DOCUMENTO_COBRANCA);
			DocumentoTipo documentoTipoGuiaPagamento = new DocumentoTipo();
			documentoTipoGuiaPagamento.setId(DocumentoTipo.GUIA_PAGAMENTO);
			Usuario usuarioBatch = new Usuario();
			usuarioBatch.setId(Util.obterInteger(ParametroGeral.P_USUARIO_BATCH.executar()));
			Integer ultimoSequencialBoletoBancario = null;
			if(idComandoCobrancaEventual != null){
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) getControladorUtil().pesquisar(
								idComandoCobrancaEventual, CobrancaAcaoAtividadeComando.class, true);
				arrecadadorContrato = repositorioCobranca
								.pesquisarContratoArrecadadorPorCobrancaAtividadeComando(idComandoCobrancaEventual);
				if(arrecadadorContrato == null){
					throw new ControladorException("atencao.nenhum_contrato_arrecadador_cobranca_bancaria", null, repositorioCobranca
									.pesquisarArrecadadorPorCobrancaAtividadeComando(cobrancaAcaoAtividadeComando.getId()).getId()
									.toString());
				}else if(arrecadadorContrato.getCodigoConvenioBoletoBancario() == null){
					throw new ControladorException("atencao.arrecadador_sem_convenio_boleto", null, arrecadadorContrato.getId().toString());
				}
				ultimoSequencialBoletoBancario = repositorioCobranca.retornaUltimoSequencialBoleto(idComandoCobrancaEventual);
				if(ultimoSequencialBoletoBancario == null){
					ultimoSequencialBoletoBancario = arrecadadorContrato.getNumeroSequencialBoleto();
				}
				// O sistema obtém os documentos de cobrança vigentes gerados pelo comando de
				// cobrança
				// bancária e sem boleto bancário gerado
				Collection<CobrancaDocumento> colecaoCobrancaDocumentos = repositorioCobranca
								.retornaCobrancaDocumentoVigentesGeradosComandoCobranca(idComandoCobrancaEventual);
				if(Util.isVazioOrNulo(colecaoCobrancaDocumentos)){
					throw new ControladorException("atencao.nenhum_documento_cobranca_comando_identificacao", null,
									idComandoCobrancaEventual.toString());
				}else{
					Collection<Conta> contas = null;
					CobrancaAcao cobrancaAcao = repositorioCobranca.retornaCobrancaAcao(idComandoCobrancaEventual);
					Collection<Conta> colecaoContasRetirarRevisao = new ArrayList<Conta>();
					Collection<Conta> colecaoContasColocarRevisao = new ArrayList<Conta>();
					for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumentos){
						contas = repositorioCobranca.recuperarContasCobrancaDocumento(cobrancaDocumento.getId());
						if(!Util.isVazioOrNulo(contas)){
							for(Conta conta : contas){
								if(conta.getDataRevisao() != null){
									colecaoContasRetirarRevisao.add(conta);
									colecaoContasColocarRevisao.add(conta);
								}else{
									colecaoContasColocarRevisao.add(repositorioCobranca.recuperarContaCobrancaDocumentoId(conta.getId()));
								}
							}
						}
						qtidadeBoletos++;
						boletoBancario = new BoletoBancario();
						boletoBancario.setConvenio(arrecadadorContrato.getCodigoConvenioBoletoBancario());
						boletoBancario.setNumeroSequencial(++ultimoSequencialBoletoBancario);
						boletoBancario.setBoletoBancarioSituacao(boletoBancarioSituacao);
						boletoBancario.setAnoMesReferencia(sistemaParametro.getAnoMesFaturamento());
						boletoBancario.setArrecadador(arrecadadorContrato.getArrecadador());
						boletoBancario.setDataVencimento(Util.adicionarNumeroDiasDeUmaData(cobrancaDocumento.getEmissao(),
										cobrancaAcao.getNumeroDiasVencimento()));
						boletoBancario.setValorDebito(cobrancaDocumento.getValorDocumento());
						boletoBancario.setDataEmissao(cobrancaDocumento.getEmissao());
						boletoBancario.setImovel(cobrancaDocumento.getImovel());
						boletoBancario.setCliente(getControladorImovel().pesquisarClienteResponsavelImovel(
										cobrancaDocumento.getImovel().getId()));
						boletoBancario.setDocumentoTipo(documentoTipoCobranca);
						boletoBancario.setDocumentoCobranca(cobrancaDocumento);
						boletoBancario.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancario);
						colecaoBoletoBancario.add(boletoBancario);

						boletoBancarioSituacaoHistorico = new BoletoBancarioSituacaoHistorico();
						boletoBancarioSituacaoHistorico.setBoletoBancario(boletoBancario);
						boletoBancarioSituacaoHistorico.setBoletoBancarioSituacao(boletoBancarioSituacao);
						boletoBancarioSituacaoHistorico.setDataEntrada(new Date());
						boletoBancarioSituacaoHistorico.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancarioSituacaoHistorico);

						boletoBancarioMovimentacao = new BoletoBancarioMovimentacao();
						boletoBancarioMovimentacao.setBoletoBancario(boletoBancario);
						boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(BoletoBancarioLancamentoEnvio.ENTRADA_DE_TITULOS);
						boletoBancarioMovimentacao.setUsuario(usuarioBatch);
						boletoBancarioMovimentacao.setDataMovimentacao(new Date());
						boletoBancarioMovimentacao.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancarioMovimentacao);

					}
					if(!Util.isVazioOrNulo(colecaoContasRetirarRevisao)){
						getControladorFaturamento().retirarRevisaoConta(colecaoContasRetirarRevisao, null, usuario);
					}
					if(!Util.isVazioOrNulo(colecaoContasColocarRevisao)){
						ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
						contaMotivoRevisao
										.setId(Util.obterInteger((String) ParametroCobranca.P_MOTIVO_REVISAO_COBRANCA_BANCARIA.executar()));
						getControladorFaturamento().colocarRevisaoConta(colecaoContasColocarRevisao, null, contaMotivoRevisao, usuario);
					}

				}
			}
			if(idGuiaPagamento != null){
				arrecadadorContrato = repositorioCobranca.pesquisarContratoArrecadadorPorGuiaPagamento(idGuiaPagamento);
				if(arrecadadorContrato == null){

					Arrecadador arrecadador = repositorioCobranca.pesquisarArrecadadorPorGuiaPagamento(idGuiaPagamento);
					if(arrecadador != null){
						throw new ControladorException("atencao.nenhum_contrato_arrecadador_cobranca_bancaria", null, arrecadador.getId()
										.toString());
					}else{
						throw new ControladorException("atencao.nenhum_contrato_arrecadador_cobranca_bancaria");
					}

				}else if(arrecadadorContrato.getCodigoConvenioBoletoBancario() == null){
					throw new ControladorException("atencao.arrecadador_sem_convenio_boleto", null, arrecadadorContrato.getId().toString());
				}
				ultimoSequencialBoletoBancario = arrecadadorContrato.getNumeroSequencialBoleto();
				Collection<Object[]> colecaoGuiaPagamentoPrestacao = repositorioCobranca.pesquisarGuiaPagamentoPrestacaoBoletoBancario(
								idGuiaPagamento, numeroPrestacaoInicialGuia);
				if(Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao)){
					throw new ControladorException("atencao.nenhuma_prestacao_guia_pagamento", null, idGuiaPagamento.toString());
				}else{
					GuiaPagamento guiaPagamento = (GuiaPagamento) getControladorUtil()
									.pesquisar(idGuiaPagamento, GuiaPagamento.class, true);
					for(Object[] arrayRetorno : colecaoGuiaPagamentoPrestacao){
						qtidadeBoletos++;
						boletoBancario = new BoletoBancario();
						boletoBancario.setConvenio(arrecadadorContrato.getCodigoConvenioBoletoBancario());
						boletoBancario.setNumeroSequencial(++ultimoSequencialBoletoBancario);
						boletoBancario.setBoletoBancarioSituacao(boletoBancarioSituacao);
						boletoBancario.setAnoMesReferencia((Integer) arrayRetorno[0]);
						boletoBancario.setArrecadador(arrecadadorContrato.getArrecadador());
						boletoBancario.setDataVencimento((Date) arrayRetorno[2]);
						boletoBancario.setValorDebito((BigDecimal) arrayRetorno[4]);
						boletoBancario.setDataEmissao((Date) arrayRetorno[1]);
						boletoBancario.setImovel(guiaPagamento.getImovel());
						boletoBancario.setCliente(getControladorImovel().pesquisarClienteResponsavelImovel(
										guiaPagamento.getImovel().getId()));
						boletoBancario.setDocumentoTipo(documentoTipoGuiaPagamento);
						boletoBancario.setGuiaPagamento(guiaPagamento);
						boletoBancario.setNumeroPrestacoes(Integer.valueOf(((Short) arrayRetorno[3])).intValue());
						boletoBancario.setIdOriginal(repositorioCobranca.pesquisarBoletoBancarioOriginal(idGuiaPagamento));
						boletoBancario.setParcelamento(guiaPagamento.getParcelamento());
						boletoBancario.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancario);
						colecaoBoletoBancario.add(boletoBancario);

						boletoBancarioSituacaoHistorico = new BoletoBancarioSituacaoHistorico();
						boletoBancarioSituacaoHistorico.setBoletoBancario(boletoBancario);
						boletoBancarioSituacaoHistorico.setBoletoBancarioSituacao(boletoBancarioSituacao);
						boletoBancarioSituacaoHistorico.setDataEntrada(new Date());
						boletoBancarioSituacaoHistorico.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancarioSituacaoHistorico);

						boletoBancarioMovimentacao = new BoletoBancarioMovimentacao();
						boletoBancarioMovimentacao.setBoletoBancario(boletoBancario);
						boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(BoletoBancarioLancamentoEnvio.ENTRADA_DE_TITULOS);
						boletoBancarioMovimentacao.setUsuario(usuarioBatch);
						boletoBancarioMovimentacao.setDataMovimentacao(new Date());
						boletoBancarioMovimentacao.setUltimaAlteracao(new Date());
						getControladorUtil().inserir(boletoBancarioMovimentacao);
					}
				}

			}
			if(qtidadeBoletos != 0){
				arrecadadorContrato.setNumeroSequencialBoleto(ultimoSequencialBoletoBancario);
				arrecadadorContrato.setUltimaAlteracao(new Date());
				getControladorUtil().atualizar(arrecadadorContrato);
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return colecaoBoletoBancario;
	}

	/**
	 * [UC3020] Gerar Movimento de Cobrança Bancária para o banco
	 * pesquisa os movimentos de cobrança bancária para o banco,referentes ao
	 * ano/mês de faturamento informados
	 * [SB0002]- Carregar Lista de Bancos
	 * 
	 * @author Yara Souza
	 * @date 12/10/2011
	 * @param anoMesReferenciaFaturamento
	 *            ,idBanco
	 * @return Coleção de DebitoAutomaticoMovimento
	 * @throws ControladorException
	 */
	public Map<Banco, Collection> pesquisaCobrancaBancariaMovimento(Integer anoMesReferenciaFaturamento) throws ControladorException{

		Map<Banco, Collection> boletoBancarioMovimentacaoBancosMap = null;
		try{

			Collection colecaoidsBancos = repositorioCobranca.pesquisarBancoPorArrecadacaoForma(ArrecadacaoForma.COBRANCA_BANCARIA);

			if(colecaoidsBancos != null && !colecaoidsBancos.isEmpty()){

				Collection colecaoBoletoBancarioMovimento = repositorioCobranca.pesquisarBoletoBancarioMovimento(
								anoMesReferenciaFaturamento, colecaoidsBancos);

				if(colecaoBoletoBancarioMovimento != null && !colecaoBoletoBancarioMovimento.isEmpty()){

					boletoBancarioMovimentacaoBancosMap = new HashMap();

					Iterator iteCollBoletoBancarioMovimento = colecaoBoletoBancarioMovimento.iterator();

					boolean primeiraVez = true;
					Integer idBancoUltimo = null;
					Banco bancoInserir = null;
					Collection listaBoletoBancarioMovimento = new ArrayList();

					while(iteCollBoletoBancarioMovimento.hasNext()){
						BoletoBancarioMovimentacao boletoBancarioMovimento = (BoletoBancarioMovimentacao) iteCollBoletoBancarioMovimento
										.next();

						if(boletoBancarioMovimento != null){

							Banco banco = null;
							// banco
							if(boletoBancarioMovimento.getBoletoBancario() != null
											&& boletoBancarioMovimento.getBoletoBancario().getArrecadador() != null){

								FiltroBanco filtroBanco = new FiltroBanco();
								filtroBanco.adicionarParametro(new ParametroSimples(FiltroBanco.ID, boletoBancarioMovimento
												.getBoletoBancario().getArrecadador().getCodigoAgente()));

								Collection bancos = getControladorUtil().pesquisar(filtroBanco, Banco.class.getName());
								banco = (Banco) Util.retonarObjetoDeColecao(bancos);
							}

							if(primeiraVez){
								idBancoUltimo = banco.getId();
								bancoInserir = banco;
								primeiraVez = false;
							}
							if(idBancoUltimo.equals(banco.getId())){
								listaBoletoBancarioMovimento.add(boletoBancarioMovimento);
							}else{
								boletoBancarioMovimentacaoBancosMap.put(bancoInserir, listaBoletoBancarioMovimento);
								listaBoletoBancarioMovimento = new ArrayList();
								idBancoUltimo = banco.getId();
								bancoInserir = banco;
								listaBoletoBancarioMovimento.add(boletoBancarioMovimento);
								primeiraVez = true;

							}

						}
					}
					boletoBancarioMovimentacaoBancosMap.put(bancoInserir, listaBoletoBancarioMovimento);

				}
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return boletoBancarioMovimentacaoBancosMap;
	}

	private ArrecadadorMovimento retornarArrecadadorMovimento(Banco banco, ArrecadadorContrato arrecadadorContrato,
					SistemaParametro sistemaParametro) throws ControladorException{

		ArrecadadorMovimento arrecadadorMovimento = new ArrecadadorMovimento();

		// instancia um objeto arrecadador movimento
		arrecadadorMovimento = new ArrecadadorMovimento();
		arrecadadorMovimento.setCodigoRemessa(Short.valueOf("1"));

		// Código do convênio do arrecadador contrato
		String codigoConvenio = arrecadadorContrato.getCodigoConvenioBoletoBancario();
		arrecadadorMovimento.setCodigoConvenio(codigoConvenio);
		arrecadadorMovimento.setNomeEmpresa(sistemaParametro.getNomeAbreviadoEmpresa());
		arrecadadorMovimento.setCodigoBanco(Short.valueOf(banco.getId().toString()));
		arrecadadorMovimento.setNomeBanco(banco.getDescricao());
		arrecadadorMovimento.setDataGeracao(new Date());
		Integer numeroSequencialArquivoEnvio = arrecadadorContrato.getNumeroSequencialArquivoEnvioBoleto();
		arrecadadorMovimento.setNumeroSequencialArquivo(numeroSequencialArquivoEnvio + 1);
		arrecadadorMovimento.setNumeroVersaoLayout(Integer.valueOf("" + sistemaParametro.getNumeroLayoutFebraban()));
		arrecadadorMovimento.setDescricaoIdentificacaoServico(ConstantesSistema.COBRANCA_BANCARIA);
		arrecadadorMovimento.setValorTotalMovimento(BigDecimal.ZERO);
		arrecadadorMovimento.setUltimaAlteracao(new Date());

		return arrecadadorMovimento;

	}

	private ArrecadadorMovimentoItem retornarArrecadadorMovimentoItem(StringBuilder conteudoRegistro,
					ArrecadadorMovimento arrecadadorMovimento, String codigoRegistroCodigo) throws ControladorException{

		ArrecadadorMovimentoItem arrecadadorMovimentoItem = new ArrecadadorMovimentoItem();

		try{
			arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
			RegistroCodigo registroCodigo = repositorioCobranca.pesquisarIdRegistroCodigo(codigoRegistroCodigo);
			if(registroCodigo != null){
				arrecadadorMovimentoItem.setRegistroCodigo(registroCodigo);
			}else{
				throw new ControladorException("atencao.movimento.cobranca.codigo.registro.inexistente");
			}

			arrecadadorMovimentoItem.setConteudoRegistro(conteudoRegistro.toString());
			arrecadadorMovimentoItem.setDescricaoOcorrencia(ConstantesAplicacao.get("movimento.cobranca.bancaria.descricao_ocorrencia_ok"));
			arrecadadorMovimentoItem.setIndicadorAceitacao(ConstantesSistema.ACEITO);
			arrecadadorMovimentoItem.setUltimaAlteracao(new Date());

		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return arrecadadorMovimentoItem;

	}

	/**
	 * [UC3020]-Gerar Movimento Cob. Bancária para Envio ao Banco.
	 * [SB0001] - Gerar Movimento para cobrança bancária
	 * 
	 * @author Yara Souza
	 * @date 16/10/2011
	 */
	public void gerarMovimentoCobrancaBancaria(Map<Banco, Collection> boletoBancarioMovimentacaoBancosMap, Usuario usuario)
					throws ControladorException{

		Collection colecaoGerarMovimentoCobrancaBancaria = new ArrayList();

		// cria uma coleção com a a chave(Banco) do Map
		Iterator boletoBancarioMovimentacaoBancosIterator = boletoBancarioMovimentacaoBancosMap.keySet().iterator();

		ArrecadadorMovimento arrecadadorMovimento = null;
		ArrecadadorMovimentoItem arrecadadorMovimentoItem = null;

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		// Verificar o email.
		EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.GERAR_MOVIMENTO_COBRANCA_BANCARIA);

		Integer qtdRegistrosSegmentoP = 0;
		Integer qtdRegistrosSegmentoQ = 0;
		Integer qtdRegistrosSegmentoR = 0;
		Integer qtdRegistrosLote = 0;

		while(boletoBancarioMovimentacaoBancosIterator.hasNext()){

			Banco banco = (Banco) boletoBancarioMovimentacaoBancosIterator.next();
			GerarMovimentoCobrancaBancariaBancoHelper gerarMovimentoCobrancaBancariaBancoHelper = new GerarMovimentoCobrancaBancariaBancoHelper();

			ArrecadadorContrato arrecadadorContrato = null;
			try{

				arrecadadorContrato = repositorioCobranca.pesquisarArrecadadorContrato(banco.getId());

				// recupera a coleção de valores(BoletoBancarioMovimentacao) pelo valor, no map
				Collection<BoletoBancarioMovimentacao> colecaoBoletoBancarioMovimentacao = boletoBancarioMovimentacaoBancosMap.get(banco);

				arrecadadorMovimento = this.retornarArrecadadorMovimento(banco, arrecadadorContrato, sistemaParametro);

				// +4 referentes (0,1,5 e 9)
				Integer quantidadeRegistrosMap = colecaoBoletoBancarioMovimentacao.size() + 4;
				arrecadadorMovimento.setNumeroRegistrosMovimento(quantidadeRegistrosMap);
				Integer idArrecadadorMovimento = (Integer) repositorioUtil.inserir(arrecadadorMovimento);
				arrecadadorMovimento.setId(idArrecadadorMovimento);

				Collection colecaoArrecadadorMovimentoItem = new ArrayList();
				BigDecimal valorTotalDebitado = BigDecimal.ZERO;

				// [SB0003 - Gerar Movimento Registro Código 0 - Header do Arquivo]
				StringBuilder movimentoRegistroCodigo0 = new StringBuilder();
				movimentoRegistroCodigo0 = this.gerarHeaderDoArquivo(banco, arrecadadorContrato, arrecadadorMovimento, sistemaParametro);
				arrecadadorMovimentoItem = this.retornarArrecadadorMovimentoItem(movimentoRegistroCodigo0, arrecadadorMovimento,
								RegistroCodigo.HEADER);
				arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
				repositorioUtil.inserir(arrecadadorMovimentoItem);
				colecaoArrecadadorMovimentoItem.add(arrecadadorMovimentoItem);

				// [SB0004 - Gerar Movimento Registro Código 1 - Header do Lote]
				StringBuilder movimentoRegistroCodigo1 = new StringBuilder();
				movimentoRegistroCodigo1 = this.gerarHeaderDoLote(banco, arrecadadorContrato, arrecadadorMovimento, sistemaParametro);
				arrecadadorMovimentoItem = this.retornarArrecadadorMovimentoItem(movimentoRegistroCodigo1, arrecadadorMovimento,
								RegistroCodigo.HEADER_LOTE);
				arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
				repositorioUtil.inserir(arrecadadorMovimentoItem);
				colecaoArrecadadorMovimentoItem.add(arrecadadorMovimentoItem);

				Iterator boletoBancarioMovimentacaoIterator = colecaoBoletoBancarioMovimentacao.iterator();

				Integer sequencial = 0;

				while(boletoBancarioMovimentacaoIterator.hasNext()){
					BoletoBancarioMovimentacao boletoBancarioMovimentacao = (BoletoBancarioMovimentacao) boletoBancarioMovimentacaoIterator
									.next();

					BoletoBancario boletoBancario = boletoBancarioMovimentacao.getBoletoBancario();

					// [SB0005 - Gerar Movimento Segmento P]
					sequencial = sequencial + 1;

					StringBuilder movimentoSegmentoP = new StringBuilder();
					movimentoSegmentoP = this.gerarMovimentoSegmentoP(banco, arrecadadorContrato, arrecadadorMovimento, boletoBancario,
									sistemaParametro, boletoBancarioMovimentacao, sequencial);
					qtdRegistrosSegmentoP = qtdRegistrosSegmentoP + 1;

					// [SB0006 - Gerar Movimento Segmento Q]
					sequencial = sequencial + 1;

					StringBuilder movimentoSegmentoQ = new StringBuilder();
					movimentoSegmentoQ = this.gerarMovimentoSegmentoQ(banco, arrecadadorMovimento, boletoBancario, sistemaParametro,
									boletoBancarioMovimentacao, sequencial);
					qtdRegistrosSegmentoQ = qtdRegistrosSegmentoQ + 1;

					// [SB0007 - Gerar Movimento Segmento R]
					sequencial = sequencial + 1;

					StringBuilder movimentoSegmentoR = new StringBuilder();
					movimentoSegmentoR = this.gerarMovimentoSegmentoR(banco, arrecadadorMovimento, boletoBancario, sistemaParametro,
									boletoBancarioMovimentacao, sequencial);
					qtdRegistrosSegmentoR = qtdRegistrosSegmentoR + 1;

					StringBuilder conteudoRegistro = new StringBuilder();
					conteudoRegistro = conteudoRegistro.append(movimentoSegmentoP).append(movimentoSegmentoQ).append(movimentoSegmentoR);

					arrecadadorMovimentoItem = this.retornarArrecadadorMovimentoItem(conteudoRegistro, arrecadadorMovimento,
									RegistroCodigo.CODIGO_3);
					arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
					repositorioUtil.inserir(arrecadadorMovimentoItem);
					colecaoArrecadadorMovimentoItem.add(arrecadadorMovimentoItem);

					valorTotalDebitado = valorTotalDebitado.add(boletoBancario.getValorDebito());

					boletoBancarioMovimentacao.setArrecadadorMovimentoItem(arrecadadorMovimentoItem);
					boletoBancarioMovimentacao.setUltimaAlteracao(new Date());

					// 7.5.5 Verificar se houve alteração na situação do boleto.
					Collection collBoletoBancarioEnvioRetornoSituacao = repositorioCobranca.pesquisarBoletoBancarioEnvioRetornoSituacao(
									boletoBancarioMovimentacao.getBoletoBancarioLancamentoEnvio().getId(), null);
					BoletoBancarioEnvioRetornoSituacao boletoBancarioEnvioRetornoSituacao = null;
					if(!collBoletoBancarioEnvioRetornoSituacao.isEmpty()){
						boletoBancarioEnvioRetornoSituacao = (BoletoBancarioEnvioRetornoSituacao) Util
										.retonarObjetoDeColecao(collBoletoBancarioEnvioRetornoSituacao);
					}
					if(boletoBancarioEnvioRetornoSituacao != null){

						boletoBancario.setBoletoBancarioSituacao(boletoBancarioEnvioRetornoSituacao.getSituacaoAtual());
						boletoBancario.setUltimaAlteracao(new Date());

						repositorioUtil.atualizar(boletoBancario);

						BoletoBancarioSituacaoHistorico boletoBancarioSitHistorico = new BoletoBancarioSituacaoHistorico();
						boletoBancarioSitHistorico.setBoletoBancario(boletoBancario);
						boletoBancarioSitHistorico.setBoletoBancarioSituacao(boletoBancario.getBoletoBancarioSituacao());
						boletoBancarioSitHistorico.setDataEntrada(new Date());
						boletoBancarioSitHistorico.setUltimaAlteracao(new Date());

						repositorioUtil.inserir(boletoBancarioSitHistorico);

					}

					repositorioUtil.atualizar(boletoBancarioMovimentacao);

				}

				StringBuilder movimentoRegistroCodigo5 = new StringBuilder();
				movimentoRegistroCodigo5 = this.gerarTraillerLote(banco, qtdRegistrosSegmentoP, qtdRegistrosSegmentoQ,
								qtdRegistrosSegmentoR);
				arrecadadorMovimentoItem = this.retornarArrecadadorMovimentoItem(movimentoRegistroCodigo5, arrecadadorMovimento,
								RegistroCodigo.CODIGO_5);
				arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
				repositorioUtil.inserir(arrecadadorMovimentoItem);
				colecaoArrecadadorMovimentoItem.add(arrecadadorMovimentoItem);

				StringBuilder movimentoRegistroCodigo9 = new StringBuilder();
				qtdRegistrosLote = qtdRegistrosSegmentoP + qtdRegistrosSegmentoQ + qtdRegistrosSegmentoR + 2;
				movimentoRegistroCodigo9 = this.gerarTraillerArquivo(banco, qtdRegistrosLote);
				arrecadadorMovimentoItem = this.retornarArrecadadorMovimentoItem(movimentoRegistroCodigo9, arrecadadorMovimento,
								RegistroCodigo.CODIGO_9);
				arrecadadorMovimentoItem.setArrecadadorMovimento(arrecadadorMovimento);
				repositorioUtil.inserir(arrecadadorMovimentoItem);
				colecaoArrecadadorMovimentoItem.add(arrecadadorMovimentoItem);

				arrecadadorMovimento.setValorTotalMovimento(valorTotalDebitado);
				arrecadadorMovimento.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(arrecadadorMovimento);

				StringBuilder arquivoTXTEnvioBanco = this.gerarArquivoTXTParaEnvioBanco(colecaoArrecadadorMovimentoItem);

				// atualiza o numero sequencial do arquivo no arrecadador contrato

				repositorioCobranca.atualizarNumeroSequencialArrecadadorContratoBoleto(arrecadadorContrato.getId(),
								arrecadadorMovimento.getNumeroSequencialArquivo());

				String situacaoEmail = this.enviarEmailArquivoTXT(envioEmail, arrecadadorMovimento, arquivoTXTEnvioBanco,
								arrecadadorContrato, banco);

				gerarMovimentoCobrancaBancariaBancoHelper.setBanco(banco);
				gerarMovimentoCobrancaBancariaBancoHelper.setArrecadadorMovimento(arrecadadorMovimento);
				gerarMovimentoCobrancaBancariaBancoHelper.setDescricaoEmail(arrecadadorContrato.getDescricaoEmail());
				gerarMovimentoCobrancaBancariaBancoHelper.setSituacaoEnvioEmail(situacaoEmail);
				colecaoGerarMovimentoCobrancaBancaria.add(gerarMovimentoCobrancaBancariaBancoHelper);

			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

		}

		this.gerarResumoMovimentosCobrancaGerados(colecaoGerarMovimentoCobrancaBancaria, envioEmail, usuario);

	}

	private String enviarEmailArquivoTXT(EnvioEmail envioEmail, ArrecadadorMovimento arrecadadorMovimento,
					StringBuilder arquivoTXTEnvioBanco, ArrecadadorContrato arrecadadorContrato, Banco banco) throws ControladorException{

		String emailRemetente = envioEmail.getEmailRemetente();
		String situacaoEmail = null;
		String tituloMensagem = envioEmail.getTituloMensagem()
						+ " "
						+ (arrecadadorMovimento.getNumeroSequencialArquivo() != null ? arrecadadorMovimento.getNumeroSequencialArquivo()
										: "");

		String nomeZip = banco.getDescricaoAbreviada() + "_" + Util.formatarDataSemBarraDDMMAAAA(new Date());
		String emailReceptor = envioEmail.getEmailReceptor();
		boolean mandouEmailBanco = false;
		String descricaoEmail = arrecadadorContrato.getDescricaoEmail();

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try{
			File leitura = File.createTempFile(nomeZip, ".rem");
			BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
			out.write(arquivoTXTEnvioBanco.toString());
			out.flush();
			out.close();
			// se o email do arrecadador movimento for preenchido
			if(descricaoEmail != null){
				ServicosEmail.enviarMensagemArquivoAnexado(descricaoEmail, emailRemetente, tituloMensagem, "", leitura);
				mandouEmailBanco = true;
				ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, "", leitura);
				situacaoEmail = "Enviado";
			}else{
				ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, "", leitura);
				situacaoEmail = "Não Enviado";
			}
			// compactado.delete();
		}catch(SendFailedException e){
			if(mandouEmailBanco){
				situacaoEmail = "Enviado.";
			}else{
				situacaoEmail = "Não Enviado.";
			}
		}catch(IOException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return situacaoEmail;
	}

	// [SB0003 - Gerar Movimento Registro Código 0 - Header do Arquivo]
	private StringBuilder gerarHeaderDoArquivo(Banco banco, ArrecadadorContrato arrecadadorContrato,
					ArrecadadorMovimento arrecadadorMovimento, SistemaParametro sistemaParametro) throws ControladorException{

		StringBuilder registroHeaderDoArquivo = new StringBuilder();

		Integer idBanco = banco.getId();
		String idBancoStr = Integer.toString(idBanco);

		// 1-3 código banco
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(3, idBancoStr));
		// 4-7 lote
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(4, "0"));
		// 8-8 tipo de registro
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(1, "0"));
		// 9-17 uso febraban
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 9));
		// 18-18 tipo Inscrição Empresa
		String tipoInscricaoEmpresa = "2";
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(1, tipoInscricaoEmpresa));
		// 19-32 Num. Inscrição
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(14, sistemaParametro.getCnpjEmpresa()));
		// 33-52 Cód. Convênio
		registroHeaderDoArquivo.append(this.formatarCodigoDoConvenio(idBancoStr, arrecadadorMovimento));

		// Consultar Agência.
		Agencia agencia = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getAgencia();

		String codigoAgenciaMantedora = agencia.getCodigoAgencia();
		int tamanho = codigoAgenciaMantedora.length();
		String codigoAgenciaMantedoraSemUltimoDigito = Util.getConteudo(1, tamanho - 1, codigoAgenciaMantedora.toCharArray());
		String ultimoDigito = Util.getConteudo(tamanho, 1, codigoAgenciaMantedora.toCharArray());

		// 54-58 Ag. Mantedora
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(5, codigoAgenciaMantedoraSemUltimoDigito));

		// 58-58 Díg. Agencia Mantedora
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda(ultimoDigito, 1));

		// 59-70 Conta Corrente Mantedora
		String numeroContaCorrente = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getNumeroConta();
		tamanho = numeroContaCorrente.length();
		String numeroContaCorrenteSemDig = Util.getConteudo(1, tamanho - 1, numeroContaCorrente.toCharArray());
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(12, numeroContaCorrenteSemDig));

		// 71-71 Dígito CC Mantedora
		String ultimoDigNumeroContaCorrente = Util.getConteudo(tamanho, 1, numeroContaCorrente.toCharArray());
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda(ultimoDigNumeroContaCorrente, 1));

		// 72-72 Dígito Ag-CC Mantedora
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 1));

		// 73-102 Nome Empresa
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda(sistemaParametro.getNomeEmpresa(), 30));

		// 103-132 Nome do Banco
		registroHeaderDoArquivo.append(Util.completaString(banco.getDescricao(), 30));

		// 133-142 Uso Febraban/CNAB
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 10));

		// 143 - 143 Cód. Remessa /Retorno
		String codigoRetorno = "1";
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(1, codigoRetorno));

		Date dataGeracao = new Date();

		// 144 - 151 Data de geração do arquivo
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(8, Util.recuperaDiaMesAnoDaData(dataGeracao)));

		// 152 - 157 Hora de geração do arquivo
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(6, Util.formatarHoraSemDataSemPonto(dataGeracao)));

		// 158 - 163 Número sequencial do arquivo enviado.
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(6, arrecadadorMovimento.getNumeroSequencialArquivo().toString()));

		// 164 - 166 Número versão layout arquivo
		String numeroVersao = "084";
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(3, numeroVersao));

		// 167 - 171 Densidade gravação arquivo.
		registroHeaderDoArquivo.append(Util.adicionarZerosEsquedaNumero(5, "0"));

		// 172 - 191 Reservado Branco
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 20));

		// 192 - 211 Reservado empresa
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 20));

		// 212 - 222 Uso Febraban/CNAB
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 11));

		// 223 - 225 Identificação cobrança s/ papel
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 3));

		// 226 - 228 Uso Vans
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 3));

		// 229 - 230 Tipo serviço
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 2));

		// 231 - 240 Cód. Ocorrência
		registroHeaderDoArquivo.append(Util.completaStringComEspacoAEsquerda("", 10));

		return registroHeaderDoArquivo;

	}

	// [SB0004 - Gerar Movimento Registro Código 1 - Header do Lote]
	private StringBuilder gerarHeaderDoLote(Banco banco, ArrecadadorContrato arrecadadorContrato,
					ArrecadadorMovimento arrecadadorMovimento, SistemaParametro sistemaParametro) throws ControladorException{

		StringBuilder registroHeaderDoLote = new StringBuilder();

		Integer idBanco = banco.getId();
		String idBancoStr = Integer.toString(idBanco);

		// 1-3 código banco
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(3, idBancoStr));
		// 4-7 lote
		String loteServico = "1";
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 tipo de registro
		String tipoRegistro = "1";
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(1, tipoRegistro));
		// 9-9 uso febraban
		String tipoOperacao = "R";
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda(tipoOperacao, 1));
		// 10 -11 Tipo Servico
		String tipoServico = "01";
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(2, tipoServico));
		// 12-13 Uso Febraban/CNAB
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 2));
		// 14-16 Num. versão layout lote
		String numeroVersao = "042";
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(3, numeroVersao));
		// 17 - 17 Uso Febraban/CNAB
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 18-18 tipo Inscrição Empresa
		String tipoInscricaoEmpresa = "2";
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(1, tipoInscricaoEmpresa));
		// 19-33 Num. Inscrição
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(15, sistemaParametro.getCnpjEmpresa()));
		// 33-53 Cód. Convênio
		registroHeaderDoLote.append(this.formatarCodigoDoConvenio(idBancoStr, arrecadadorMovimento));

		// Consultar Agência.
		Agencia agencia = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getAgencia();

		String codigoAgenciaMantedora = agencia.getCodigoAgencia();
		int tamanho = codigoAgenciaMantedora.length();
		String codigoAgenciaMantedoraSemUltimoDigito = Util.getConteudo(1, tamanho - 1, codigoAgenciaMantedora.toCharArray());
		String ultimoDigito = Util.getConteudo(tamanho, 1, codigoAgenciaMantedora.toCharArray());

		// 54-58 Ag. Mantedora
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(5, codigoAgenciaMantedoraSemUltimoDigito));

		// 59-59 Díg. Agencia Mantedora
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda(ultimoDigito, 1));

		// 60-71 Conta Corrente Mantedora
		String numeroContaCorrente = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getNumeroConta();
		tamanho = numeroContaCorrente.length();
		String numeroContaCorrenteSemDig = Util.getConteudo(1, tamanho - 1, numeroContaCorrente.toCharArray());
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(12, numeroContaCorrenteSemDig));

		// 72-72 Dígito CC Mantedora
		String ultimoDigNumeroContaCorrente = Util.getConteudo(tamanho, 1, numeroContaCorrente.toCharArray());
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda(ultimoDigNumeroContaCorrente, 1));

		// 73-73 Dígito Ag-CC Mantedora
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 1));

		// 74-103 Nome Empresa
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda(sistemaParametro.getNomeEmpresa(), 30));

		// 104-143 Mensagem 1
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 40));

		// 144-183 Mensagem 2
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 40));

		// 184 - 191 Núm. sequencial arquivo enviado
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(8, arrecadadorMovimento.getNumeroSequencialArquivo().toString()));

		Date dataGeracao = new Date();
		// 192 - 199 Data de geração do remessa
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(8, Util.recuperaDiaMesAnoDaData(dataGeracao)));

		// 200 - 207 Data crédito
		registroHeaderDoLote.append(Util.adicionarZerosEsquedaNumero(8, "0"));

		// 208 - 240 Uso Febraban/CNAB
		registroHeaderDoLote.append(Util.completaStringComEspacoAEsquerda("", 33));

		return registroHeaderDoLote;

	}

	// [SB0005 - Gerar Movimento Segmento P]
	private StringBuilder gerarMovimentoSegmentoP(Banco banco, ArrecadadorContrato arrecadadorContrato,
					ArrecadadorMovimento arrecadadorMovimento, BoletoBancario boletoBancario, SistemaParametro sistemaParametro,
					BoletoBancarioMovimentacao boletoBancarioMovimentacao, Integer sequencial){

		StringBuilder registroSegmentoP = new StringBuilder();

		// 1-3 código banco
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(3, banco.getId().toString()));
		// 4-7 lote
		String loteServico = "1";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 tipo de registro
		String tipoRegistro = "3";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, tipoRegistro));
		// 9 - 13 Sequencial do arquivo no lote
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(5, sequencial.toString()));
		// 14 - 14 Cód. segmento reg. detalhe = "P"
		String codigoSegRegDetalhe = "P";
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda(codigoSegRegDetalhe, 1));
		// 15 - 15 Uso Febraban/CNAB
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 16 - 17 Cód. movimento remessa
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(2, boletoBancarioMovimentacao.getBoletoBancarioLancamentoEnvio().getId()
						.toString()));

		// Consultar Agência.
		// -------------------------------------------------
		Agencia agencia = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getAgencia();

		String codigoAgenciaMantedora = agencia.getCodigoAgencia();
		int tamanho = codigoAgenciaMantedora.length();
		String codigoAgenciaMantedoraSemUltimoDigito = Util.getConteudo(1, tamanho - 1, codigoAgenciaMantedora.toCharArray());
		String ultimoDigito = Util.getConteudo(tamanho, 1, codigoAgenciaMantedora.toCharArray());

		// 18 - 22 Ag. Mantedora
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(5, codigoAgenciaMantedoraSemUltimoDigito));

		// 23 - 23 Díg. Agencia Mantedora
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda(ultimoDigito, 1));

		// 24- 35 Conta Corrente Mantedora
		String numeroContaCorrente = arrecadadorContrato.getContaBancariaDepositoArrecadacaoBoleto().getNumeroConta();
		tamanho = numeroContaCorrente.length();
		String numeroContaCorrenteSemDig = Util.getConteudo(1, tamanho - 1, numeroContaCorrente.toCharArray());
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(12, numeroContaCorrenteSemDig));

		// 36 - 36 Dígito CC Mantedora
		String ultimoDigNumeroContaCorrente = Util.getConteudo(tamanho, 1, numeroContaCorrente.toCharArray());
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda(ultimoDigNumeroContaCorrente, 1));

		// 37 - 37 Dígito Ag-CC Mantedora
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));

		// -------------------------------------------------

		// 38 - 57 Identificação do título no banco
		// [FS0004 - Formatar Nosso Número]
		StringBuilder nossoNumeroFormatado = new StringBuilder();

		String codigoConvenio = boletoBancario.getConvenio();
		codigoConvenio = Util.adicionarZerosEsquedaNumero(7, codigoConvenio);
		codigoConvenio = codigoConvenio.substring(0, 7);
		nossoNumeroFormatado.append(codigoConvenio);

		nossoNumeroFormatado.append(Util.adicionarZerosEsquedaNumero(10, boletoBancario.getNumeroSequencial().toString()));
		nossoNumeroFormatado.append(Util.completaStringComEspacoAEsquerda("", 3));
		registroSegmentoP.append(nossoNumeroFormatado.toString());

		// 58 - 58 Código da Carteira
		String codigoCarteira = "7";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, codigoCarteira));

		// 59 - 59 Forma cadastramento título no banco
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, "0"));

		// 60 - 60 Tipo de documento
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));

		// 61 - 61 Identificacao Emissão bloqueto
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, "0"));

		// 62 - 62 Identificacao Distribuição
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));

		// 63 - 77 Identificacao Distribuição
		// [FS0005 - Formatar Número Documento de Cobrança]
		StringBuilder numeroDocumentoCobrancaFormatado = new StringBuilder();
		String valorFixo1 = "PARCEL.";
		String valorFixo2 = "PARCEL.UNICA";
		if(boletoBancario.getGuiaPagamento() != null){

			String numeroPrestacoes = Util.adicionarZerosEsquedaNumero(2, boletoBancario.getNumeroPrestacoes().toString());
			String numeroPrestacaoTotal = boletoBancario.getGuiaPagamento().getNumeroPrestacaoTotal().toString();

			numeroDocumentoCobrancaFormatado = numeroDocumentoCobrancaFormatado.append(valorFixo1).append(numeroPrestacoes).append("/")
							.append(numeroPrestacaoTotal);
		}else{
			numeroDocumentoCobrancaFormatado = numeroDocumentoCobrancaFormatado.append(valorFixo2);
		}
		registroSegmentoP.append(Util.completaString(numeroDocumentoCobrancaFormatado.toString(), 15));

		// 78 - 85 Data vencimento título
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(8, Util.recuperaDiaMesAnoDaData(boletoBancario.getDataVencimento())));

		// 86 - 100 Data nominal título
		registroSegmentoP
						.append(Util.adicionarZerosEsquedaNumero(15, Util.formatarBigDecimalParaString(boletoBancario.getValorDebito(), 2)));

		// 101 - 105 Agência encarregada cobrança
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(5, "0"));

		// 106 - 106 Dígito verificador agência
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));

		// 107 - 108 Espécie de título
		String especieTitulo = "4";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(2, especieTitulo));

		// 109 - 109 Identificador título Aceito/Não Aceito
		String indicadorTitulo = "N";
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda(indicadorTitulo, 1));

		// 110 - 117 Data emissão do título
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(8, Util.recuperaDiaMesAnoDaData(boletoBancario.getDataEmissao())));

		// 118 - 118 Código juros mora
		String codigoJurosMora = "2";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, codigoJurosMora));

		// 119 - 126 Data juros mora
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(8, "0"));

		// 127 - 141 Juros de Mora por dia/taxa
		String jurosMoraPorDiaTaxa = Util.adicionarZerosEsquedaNumero(13, "1");
		registroSegmentoP.append(Util.completarStringZeroDireita(jurosMoraPorDiaTaxa, 15));

		// 142 - 142 Código do desconto 1
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, "0"));

		// 143 - 150 Data do desconto 1
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(8, "0"));

		// 151 - 165 Valor/Percentual Desconto 1
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(15, "0"));

		// 166 - 180 Valor do IOF a ser concedido
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(15, "0"));

		// 181 - 195 Valor do abatimento
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(15, "0"));

		// 196 - 220 - Identificação título empresa
		// [FS0002 - Formatar Identificação do Titulo na Empresa]
		StringBuilder identificacaoTituloEmpresaFormatado = new StringBuilder();

		identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("M", 1));
		identificacaoTituloEmpresaFormatado.append(Util.adicionarZerosEsquedaNumero(8, boletoBancario.getImovel().getId().toString()));
		identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("DA", 2));

		if(boletoBancario.getDocumentoCobranca() != null){
			identificacaoTituloEmpresaFormatado.append(Util.adicionarZerosEsquedaNumero(9, boletoBancario.getDocumentoCobranca().getId()
							.toString()));
			identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("", 5));
		}else if(boletoBancario.getGuiaPagamento() != null){
			identificacaoTituloEmpresaFormatado.append(Util.adicionarZerosEsquedaNumero(9, boletoBancario.getGuiaPagamento().getId()
							.toString()));
			identificacaoTituloEmpresaFormatado
							.append(Util.adicionarZerosEsquedaNumero(3, boletoBancario.getNumeroPrestacoes().toString()));
			identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("", 2));
		}else if(boletoBancario.getConta() != null){
			identificacaoTituloEmpresaFormatado.append(Util.adicionarZerosEsquedaNumero(9, boletoBancario.getConta().getId().toString()));
			identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("", 5));
		}else{
			identificacaoTituloEmpresaFormatado.append(Util.adicionarZerosEsquedaNumero(9, boletoBancario.getDebitoACobrar().getId()
							.toString()));
			identificacaoTituloEmpresaFormatado.append(Util.completaStringComEspacoAEsquerda("", 5));
		}

		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(25, identificacaoTituloEmpresaFormatado.toString()));

		// 221 - 221 Código par protesto
		String codigoProtesto = "2";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, codigoProtesto));

		// 222 - 223 Núm. dias para protesto
		String numDiasProtesto = "5";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(2, numDiasProtesto));

		// 224 - 224 Cód. Baixa/Devolução
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(1, "0"));

		// 225 - 227 Núm. dias p/ Baixa/Devolução
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(3, "0"));

		// 228- 229 Código da moeda
		String codigoMoeda = "9";
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(2, codigoMoeda));

		// 230 - 239 Núm. contrato operação crédito
		registroSegmentoP.append(Util.adicionarZerosEsquedaNumero(10, "0"));

		// 240 - 240 Uso Febraban/CNAB
		registroSegmentoP.append(Util.completaStringComEspacoAEsquerda("", 1));

		return registroSegmentoP;

	}

	// [SB0006 - Gerar Movimento Segmento Q]
	private StringBuilder gerarMovimentoSegmentoQ(Banco banco, ArrecadadorMovimento arrecadadorMovimento, BoletoBancario boletoBancario,
					SistemaParametro sistemaParametro, BoletoBancarioMovimentacao boletoBancarioMovimentacao, Integer sequencial)
					throws ControladorException{

		StringBuilder registroSegmentoQ = new StringBuilder();

		// 1-3 código banco
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(3, banco.getId().toString()));
		// 4-7 lote
		String loteServico = "1";
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 detalhe registro
		String detalheRegistro = "3";
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(1, detalheRegistro));
		// 9 - 13 Sequencial do arquivo no lote
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(5, sequencial.toString()));
		// 14 - 14 Cód. segmento reg. detalhe = "P"
		String codigoSegRegDetalhe = "Q";
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(codigoSegRegDetalhe, 1));
		// 15 - 15 Uso Febraban/CNAB
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 16 - 17 Cód. movimento remessa
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(2, boletoBancarioMovimentacao.getBoletoBancarioLancamentoEnvio().getId()
						.toString()));

		Cliente cliente;

		try{
			cliente = repositorioCobranca.pesquisarCliente(boletoBancario.getImovel().getId());
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		// 18 - 18 Tipo de inscrição
		Short indicadorPessoaFisicaJuridica = cliente.getClienteTipo().getIndicadorPessoaFisicaJuridica();
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(cliente.getClienteTipo().getIndicadorPessoaFisicaJuridica()
						.toString(), 1));
		// 19 - 33 - Número inscrição
		// [FS0006] - Formata número da inscrição.
		if(indicadorPessoaFisicaJuridica.equals(ConstantesSistema.INDICADOR_PESSOA_FISICA)){
			if(cliente.getCpf() != null){
				registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(15, cliente.getCpf().toString()));
			}else{
				registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(15, "0"));
			}

		}else{
			if(cliente.getCnpj() != null){
				registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(15, cliente.getCnpj().toString()));
			}else{
				registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(15, "0"));
			}

		}
		// 34 - 73 Nome
		String nomeCliente = cliente.getNome();
		String nomeClienteFormatado = "";
		if(nomeCliente.length() >= 40){
			nomeClienteFormatado = Util.getConteudo(1, 40, nomeCliente.toCharArray());
		}else{
			nomeClienteFormatado = nomeCliente;
		}
		registroSegmentoQ.append(Util.completaString(nomeClienteFormatado, 40));

		// 74 - 113 Endereco
		// [UC0085]Obter Endereco
		String endereco = this.getControladorEndereco().pesquisarEnderecoClienteAbreviado(cliente.getId(), true);
		String enderecoFormatado = "";
		if(endereco != null){
			if(endereco.length() >= 40){
				enderecoFormatado = Util.getConteudo(1, 40, endereco.toCharArray());
			}else{
				enderecoFormatado = endereco;
			}

		}
		registroSegmentoQ.append(Util.completaString(enderecoFormatado, 40));

		Object[] dadosEndereco = this.getControladorEndereco().obterDadosEndereco(boletoBancario.getImovel().getId());

		String bairro = (String) dadosEndereco[4];
		String bairroFormatado = "";
		if(bairro != null){
			if(bairro.length() >= 15){
				bairroFormatado = Util.getConteudo(1, 15, bairro.toCharArray());
			}else{
				bairroFormatado = bairro;
			}

		}

		String cepFormatado = "";
		if(dadosEndereco[16] != null){
			String cep = ((Integer) dadosEndereco[16]).toString();

			if(cep.length() >= 5){
				cepFormatado = Util.getConteudo(1, 5, cep.toCharArray());
			}

		}

		String cidade = (String) dadosEndereco[6];

		String unidadeFederativa = (String) dadosEndereco[8];
		String unidadeFederativaFormatado = Util.getConteudo(1, 2, unidadeFederativa.toCharArray());

		// 114 - 128 Bairro
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(bairroFormatado, 15));

		// 129 - 133 Cep
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(cepFormatado, 5));

		// 134 - 136 Sufixo do CEP
		// 3 ultimos dígitos do codigo cep.
		int tamanho = cepFormatado.length();
		String codigoCep = "";
		if(tamanho > 0){
			int inicio = tamanho - 3;
			codigoCep = Util.getConteudo(inicio, 3, cepFormatado.toCharArray());
			registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(codigoCep, 3));
		}else{
			registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(codigoCep, 3));
		}

		// 137 - 151 Cidade
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(cidade, 15));

		// 152 - 153 UF
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda(unidadeFederativaFormatado, 2));

		// 154 - 154 Tipo de inscrição
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(1, "0"));

		// 155 - 169 Número de inscrição
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(15, "0"));

		// 170 - 209 Nome do sacador/avalista
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda("", 40));

		// 210 - 212 Código Banco correspondente a compensação
		registroSegmentoQ.append(Util.adicionarZerosEsquedaNumero(3, "0"));

		// 213 - 232 Nosso número
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda("", 20));

		// 233 - 240 Uso febraban/CNAB
		registroSegmentoQ.append(Util.completaStringComEspacoAEsquerda("", 8));

		return registroSegmentoQ;

	}

	// [SB0007 - Gerar Movimento Segmento R]
	private StringBuilder gerarMovimentoSegmentoR(Banco banco, ArrecadadorMovimento arrecadadorMovimento, BoletoBancario boletoBancario,
					SistemaParametro sistemaParametro, BoletoBancarioMovimentacao boletoBancarioMovimentacao, Integer sequencial){

		StringBuilder registroSegmentoR = new StringBuilder();

		// 1-3 código banco
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(3, banco.getId().toString()));
		// 4-7 lote
		String loteServico = "1";
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 detalhe registro
		String detalheRegistro = "3";
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, detalheRegistro));
		// 9 - 13 Sequencial do arquivo no lote
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(5, sequencial.toString()));
		// 14 - 14 Cód. segmento reg. detalhe = "P"
		String codigoSegRegDetalhe = "R";
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda(codigoSegRegDetalhe, 1));
		// 15 - 15 Uso Febraban/CNAB
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 16 - 17 Cód. movimento remessa
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(2, boletoBancarioMovimentacao.getBoletoBancarioLancamentoEnvio().getId()
						.toString()));

		// 18 - 18 Cód. desconto 2
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, "0"));
		// 19 - 26 Data desconto 2
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(8, "0"));
		// 27 - 41 Valor percentual desconto 2
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(15, "0"));
		// 42 - 42 Cód. desconto 3
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, "0"));
		// 43 - 50 Data desconto 3
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(8, "0"));
		// 51 - 65 Valor percentual desconto 2
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(15, "0"));
		// 66 - 66 Cód. Multa
		String codigoMulta = "2";
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, codigoMulta));
		// 67 - 74 Data da multa
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(8, "0"));
		// 75 - 89 Valor percentual a ser aplicado
		String valorPercentual = Util.adicionarZerosEsquedaNumero(13, "2");
		registroSegmentoR.append(Util.completarStringZeroDireita(valorPercentual, 15));
		// 90 - 99 Informação ao sacado
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 10));
		// 100 - 139 Mensagem 3
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 40));
		// 140 - 179 Mensagem 4
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 40));
		// 180 - 199 Uso Febraban/CNAB
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 20));
		// 200 - 207 Cód. ocorrência sacado
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(8, "0"));
		// 208 - 210 Cód. banco conta débito
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(3, "0"));
		// 211 - 215 Cód. agência débito
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(5, "0"));
		// 216 - 216 Díg. verif. agência
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, "0"));
		// 217 - 228 Díg. verif. agência
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(12, "0"));
		// 229 - 229 Díg. verif. conta
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 230 - 230 Díg. verif. agência/conta
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 1));
		// 231 - 231 Aviso p/ débito automático
		registroSegmentoR.append(Util.adicionarZerosEsquedaNumero(1, "0"));
		// 232 - 240 Uso Febraban/CNAB
		registroSegmentoR.append(Util.completaStringComEspacoAEsquerda("", 9));

		return registroSegmentoR;
	}

	// [SB0008 - Gerar Movimento Registro Código 5]
	private StringBuilder gerarTraillerLote(Banco banco, Integer qtdRegistrosSegmentoP, Integer qtdRegistrosSegmentoQ,
					Integer qtdRegistrosSegmentoR){

		StringBuilder registroTraillerLote = new StringBuilder();

		// 1-3 código banco
		registroTraillerLote.append(Util.adicionarZerosEsquedaNumero(3, banco.getId().toString()));
		// 4-7 lote
		String loteServico = "1";
		registroTraillerLote.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 detalhe registro
		String detalheRegistro = "5";
		registroTraillerLote.append(Util.adicionarZerosEsquedaNumero(1, detalheRegistro));
		// 9 - 17 Uso Febraban/CNAB
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 9));
		// 18 - 23 Qtd Registros lote
		Integer qtdRegistrosLote = qtdRegistrosSegmentoP + qtdRegistrosSegmentoQ + qtdRegistrosSegmentoR + 2;
		registroTraillerLote.append(Util.adicionarZerosEsquedaNumero(6, qtdRegistrosLote.toString()));
		// 24 - 29 Qtd tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 6));
		// 30 - 46 Valor tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 17));
		// 47 - 52 Qtd tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 6));
		// 53 - 69 Valor tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 17));
		// 70 - 75 Qtd tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 6));
		// 76 - 92 Valor tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 17));
		// 83 - 98 Qtd tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 6));
		// 99 - 115 Valor tit. cobrança
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 17));
		// 116 - 123 Núm. aviso lançamento
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 8));
		// 124 - 240 Uso Febraban/CNAB
		registroTraillerLote.append(Util.completaStringComEspacoAEsquerda("", 117));

		return registroTraillerLote;

	}

	// [SB0008 - Gerar Movimento Registro Código 5]
	private StringBuilder gerarTraillerArquivo(Banco banco, Integer qtdRegistrosLote){

		StringBuilder registroTraillerArquivo = new StringBuilder();

		// 1-3 código banco
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(3, banco.getId().toString()));
		// 4-7 lote
		String loteServico = "9999";
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(4, loteServico));
		// 8-8 detalhe registro
		String detalheRegistro = "9";
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(1, detalheRegistro));
		// 9 - 17 Uso Febraban/CNAB
		registroTraillerArquivo.append(Util.completaStringComEspacoAEsquerda("", 9));
		// 18 - 23 Qtd lotes
		Integer qtdLotes = 1;
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(6, qtdLotes.toString()));
		// 24 - 29 Qtd registros Arquivo
		Integer qtdRegistrosArquivo = qtdRegistrosLote + 2;
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(6, qtdRegistrosArquivo.toString()));
		// 30 - 35 qtd contas p/ conc. lotes
		registroTraillerArquivo.append(Util.adicionarZerosEsquedaNumero(6, "0"));
		// 36 - 240 Uso Febraban/CNAB
		registroTraillerArquivo.append(Util.completaStringComEspacoAEsquerda("", 205));

		return registroTraillerArquivo;

	}

	// [SB0010] - Gerar Arquivo TXT para Envio ao Banco
	private StringBuilder gerarArquivoTXTParaEnvioBanco(Collection collArrecadadorMovimentoItem){

		StringBuilder arquivoTxtLinha = new StringBuilder();

		Iterator it = collArrecadadorMovimentoItem.iterator();

		ArrecadadorMovimentoItem arrecadadorMovimentoItem = null;
		String conteudoRegistro = "";
		RegistroCodigo registroCodigo = null;
		String codigo = "";

		while(it.hasNext()){
			arrecadadorMovimentoItem = (ArrecadadorMovimentoItem) it.next();
			conteudoRegistro = arrecadadorMovimentoItem.getConteudoRegistro();
			registroCodigo = arrecadadorMovimentoItem.getRegistroCodigo();
			codigo = registroCodigo.getCodigo();

			if(codigo.equals(RegistroCodigo.HEADER)){
				arquivoTxtLinha.append(Util.completaString(conteudoRegistro, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
			}else if(codigo.equals(RegistroCodigo.HEADER_LOTE)){
				arquivoTxtLinha.append(Util.completaString(conteudoRegistro, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
			}else if(codigo.equals(RegistroCodigo.CODIGO_3)){
				char[] conteudo = conteudoRegistro.toCharArray();

				int tamanho = conteudo.length;

				String conteudoP = Util.getConteudo(1, 240, conteudo);
				tamanho = tamanho - 240;
				String conteudoQ = Util.getConteudo(241, 240, conteudo);
				tamanho = tamanho - 240;
				String conteudoR = Util.getConteudo(481, tamanho, conteudo);

				arquivoTxtLinha.append(Util.completaString(conteudoP, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
				arquivoTxtLinha.append(Util.completaString(conteudoQ, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
				arquivoTxtLinha.append(Util.completaString(conteudoR, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
			}else if(codigo.equals(RegistroCodigo.CODIGO_5)){
				arquivoTxtLinha.append(Util.completaString(conteudoRegistro, 240));
				arquivoTxtLinha.append(System.getProperty("line.separator"));
			}else{
				arquivoTxtLinha.append(Util.completaString(conteudoRegistro, 240));
			}
		}

		return arquivoTxtLinha;

	}

	public void regerarArquivoTxtMovimentoCobrancaBancaria(ArrecadadorMovimento arrecadadorMovimento, String envioBanco, Usuario usuario)
					throws ControladorException{

		Collection colecaoGerarMovimentoCobrancaBancaria = new ArrayList();
		Collection colecaoArrecadadorMovimentoItem = null;
		String descricaoEmail = null;
		GerarMovimentoCobrancaBancariaBancoHelper gerarMovimentoCobrancaBancariaBancoHelper = new GerarMovimentoCobrancaBancariaBancoHelper();
		String estadoEmail = null;
		try{
			colecaoArrecadadorMovimentoItem = repositorioArrecadacao.consultarItensMovimentoArrecadador(arrecadadorMovimento, null, null,
							null);

			descricaoEmail = repositorioArrecadacao.pesquisarEmailArrecadadorContrato(arrecadadorMovimento.getCodigoBanco());

		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.REGERAR_MOVIMENTO_COBRANCA_BANCARIA);
		// cria o arquivo txt para o envio
		StringBuilder arquivoTxtGerado = this.gerarArquivoTXTParaEnvioBanco(colecaoArrecadadorMovimentoItem);

		String emailRemetente = envioEmail.getEmailRemetente();

		String tituloMensagem = envioEmail.getTituloMensagem()
						+ " "
						+ (arrecadadorMovimento.getNumeroSequencialArquivo() != null ? arrecadadorMovimento.getNumeroSequencialArquivo()
										: "");
		String emailReceptor = envioEmail.getEmailReceptor();
		boolean mandouEmailBanco = false;
		try{

			File leitura = File.createTempFile("gsan", ".txt");
			BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
			out.write(arquivoTxtGerado.toString());
			out.flush();
			out.close();
			// caso o envio do banco seja igual a 1, então envia para o
			// banco
			if(envioBanco.equals("1")){
				// se o email do arrecadador movimento for preenchido
				if(descricaoEmail != null){

					ServicosEmail.enviarMensagemArquivoAnexado(descricaoEmail, emailRemetente, tituloMensagem, "", leitura);
					mandouEmailBanco = true;
					ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, "Registros Regerados",
									leitura);

					estadoEmail = "Enviado";
				}else{
					ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, "Registros Regerados",
									leitura);

					estadoEmail = "Não Enviado";
				}

			}else{
				ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, "Registros Gerados", leitura);

				estadoEmail = "Não Enviado";
			}
			// leitura.delete();
		}catch(SendFailedException e){
			if(mandouEmailBanco){
				estadoEmail = "Enviado";
			}else{
				estadoEmail = "Não Enviado";
			}

		}catch(IOException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		FiltroBanco filtroBanco = new FiltroBanco();
		filtroBanco.adicionarParametro(new ParametroSimples(FiltroBanco.ID, Integer.valueOf(arrecadadorMovimento.getCodigoBanco())));
		Collection colecaoBanco = getControladorUtil().pesquisar(filtroBanco, Banco.class.getName());
		Banco banco = null;
		if(colecaoBanco != null && !colecaoBanco.isEmpty()){
			banco = (Banco) Util.retonarObjetoDeColecao(colecaoBanco);
		}

		gerarMovimentoCobrancaBancariaBancoHelper.setBanco(banco);
		gerarMovimentoCobrancaBancariaBancoHelper.setArrecadadorMovimento(arrecadadorMovimento);
		gerarMovimentoCobrancaBancariaBancoHelper.setDescricaoEmail(descricaoEmail);
		gerarMovimentoCobrancaBancariaBancoHelper.setSituacaoEnvioEmail(estadoEmail);
		colecaoGerarMovimentoCobrancaBancaria.add(gerarMovimentoCobrancaBancariaBancoHelper);

		this.gerarResumoMovimentosCobrancaGerados(colecaoGerarMovimentoCobrancaBancaria, envioEmail, usuario);

	}

	private void gerarResumoMovimentosCobrancaGerados(Collection colecaoGerarMovimentoCobrancaBancaria, EnvioEmail envioEmail,
					Usuario usuario) throws ControladorException{

		// Parte que gera o relatório e envia por email
		// cria uma instância da classe do relatório
		String emailRemetente = envioEmail.getEmailRemetente();
		String tituloMensagem = "RELATORIO -" + envioEmail.getTituloMensagem();
		String emailReceptor = envioEmail.getEmailReceptor();
		String corpoMensagem = "RELATORIO -" + envioEmail.getCorpoMensagem();

		RelatorioMovimentoCobrancaBancaria relatorio = new RelatorioMovimentoCobrancaBancaria(usuario);
		relatorio.addParametro("colecaoGerarMovimentoCobrancaBancaria", colecaoGerarMovimentoCobrancaBancaria);
		relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
		byte[] relatorioGerado = (byte[]) relatorio.executar();

		try{
			File leitura = File.createTempFile("gsan", ".PDF");
			FileOutputStream out = new FileOutputStream(leitura.getAbsolutePath());
			out.write(relatorioGerado);
			out.flush();
			out.close();

			ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, corpoMensagem, leitura);

			leitura.delete();
		}catch(IOException e){
			throw new ControladorException("erro.sistema", e);
		}catch(Exception e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * Obter Criterio de cobranca associado ao documento de cobranca correspondente a negativação
	 * [UC0688]-Gerar Resumo Diario de Negativacao
	 * [SB0002] / Step 2
	 * 
	 * @autor Genival Barbosa
	 * @date 26/10/2011
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterCobrancaCriterioAssociadoDocumentoCobrancaCorrespNegativacao(Integer idNegativadorMovimento)
					throws ControladorException{

		Collection retorno;
		try{
			retorno = repositorioCobranca.obterCobrancaCriterioAssociadoDocumentoCobrancaCorrespNegativacao(idNegativadorMovimento);

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema");
		}

		return retorno;
	}

	/**
	 * Pesquisar Quantidade de Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeBoletoBancario(BoletoBancarioHelper boletoBancarioHelper, boolean verificarNumeroBoletoCartaCobranca,
					boolean desconsiderarParametros, boolean verificarDocumentoCobranca) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarQuantidadeBoletoBancario(boletoBancarioHelper, desconsiderarParametros,
							verificarDocumentoCobranca, verificarNumeroBoletoCartaCobranca);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisar Boleto Bancário pelo Id
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public BoletoBancario pesquisarBoletoBancarioPeloId(Integer id) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarBoletoBancarioPeloId(id);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [SB0001] Atualizar Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public void atualizarBoletoBancario(BoletoBancario boletoBancario, Integer idBoletoBancarioLancamentoEnvio, Date dataVencimentoTitulo,
					Usuario usuarioLogado) throws ControladorException{

		//
		// Validação dos campos
		//

		// Lançamento de Envio
		if(idBoletoBancarioLancamentoEnvio == null || idBoletoBancarioLancamentoEnvio == ConstantesSistema.NUMERO_NAO_INFORMADO){
			throw new ControladorException("atencao.required", null, "Lançamento de Envio");
		}

		FiltroBoletoBancarioLancamentoEnvio filtroLancamentoEnvio = new FiltroBoletoBancarioLancamentoEnvio();
		filtroLancamentoEnvio.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioLancamentoEnvio.ID,
						idBoletoBancarioLancamentoEnvio));

		Collection<BoletoBancarioLancamentoEnvio> colecaoBoletoBancarioLancamentoEnvio = getControladorUtil().pesquisar(
						filtroLancamentoEnvio, BoletoBancarioLancamentoEnvio.class.getName());

		if(Util.isVazioOrNulo(colecaoBoletoBancarioLancamentoEnvio)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		BoletoBancarioLancamentoEnvio boletoBancarioLancamentoEnvio = (BoletoBancarioLancamentoEnvio) Util
						.retonarObjetoDeColecao(colecaoBoletoBancarioLancamentoEnvio);

		// [FS0005 - Verificar compatibilidade entre o lançameno de envio e a situação atual
		// do boleto]
		BoletoBancarioSituacao situacaoAtualObrigatoria = boletoBancarioLancamentoEnvio.getSituacaoAtualObrigatoria();

		if(situacaoAtualObrigatoria != null){
			BoletoBancarioSituacao boletoBancarioSituacao = boletoBancario.getBoletoBancarioSituacao();
			Integer idSituacaoBoletoBancario = boletoBancarioSituacao.getId();

			Integer idSituacaoAtualObrigatoria = situacaoAtualObrigatoria.getId();

			if(!idSituacaoAtualObrigatoria.equals(idSituacaoBoletoBancario)){

				String descricaoSituacaoBoletoBancario = boletoBancarioSituacao.getDescricao();
				String descricaoLancamentoEnvio = boletoBancarioLancamentoEnvio.getDescricaoLancamentoEnvio();

				throw new ControladorException("atencao.nao_eh_possivel_realizar_operacao_boleto", null,
								new String[] {descricaoSituacaoBoletoBancario, descricaoLancamentoEnvio});
			}
		}

		// Data de Vencimento do Título
		Short indicadorAlterarDados = boletoBancarioLancamentoEnvio.getIndicadorAlterarDados();

		if(ConstantesSistema.SIM.equals(indicadorAlterarDados) && dataVencimentoTitulo == null){
			throw new ControladorException("atencao.required", null, "Data de Vencimento do Título");
		}else if(ConstantesSistema.NAO.equals(indicadorAlterarDados) && dataVencimentoTitulo != null){
			throw new ControladorException("atencao.data_vencimento_do_titulo_informado", null, "Data de Vencimento do Título");
		}

		Date dataCorrente = new Date();
		dataCorrente = Util.zerarHoraMinutoSegundo(dataCorrente);

		if(dataVencimentoTitulo != null && dataCorrente.compareTo(dataVencimentoTitulo) > 0){
			throw new ControladorException("atencao.data_vencimento_titulo.menor.data_corrente");
		}

		dataCorrente = new Date();

		//
		// Verifica se ocorreu atualização por outro usuário
		//

		Integer idBoletoBancario = boletoBancario.getId();

		// Pesquisando o Boleto Bancário na base
		FiltroBoletoBancario filtroBoletoBancario = new FiltroBoletoBancario();
		filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID, idBoletoBancario));

		Collection<BoletoBancario> colecaoBoletoBancario = getControladorUtil().pesquisar(filtroBoletoBancario,
						BoletoBancario.class.getName());

		if(Util.isVazioOrNulo(colecaoBoletoBancario)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		BoletoBancario boletoBancarioNaBase = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoletoBancario);

		if(boletoBancarioNaBase.getUltimaAlteracao().after(boletoBancario.getUltimaAlteracao())){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		//
		// Efetuando as alteraçõs
		//

		// 2.4.2.1. Movimentação do Boleto Bancário
		this.inserirBoletoBancarioMovimentacao(boletoBancario, usuarioLogado, boletoBancarioLancamentoEnvio);

		// 2.4.2.2. Alteração da Data de Vencimento do Título
		if(dataVencimentoTitulo != null){
			boletoBancario.setDataVencimento(dataVencimentoTitulo);

			// 2.4.2.3. Registrar a transação de alteração do Boleto Bancário
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_BOLETO_BANCARIO_ATUALIZAR,
							boletoBancario.getId(), boletoBancario.getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_BOLETO_BANCARIO_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			boletoBancario.setOperacaoEfetuada(operacaoEfetuada);
			boletoBancario.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);

			registradorOperacao.registrarOperacao(boletoBancario);
		}

		// Atualizar
		boletoBancario.setUltimaAlteracao(dataCorrente);
		getControladorUtil().atualizar(boletoBancario);
	}

	/**
	 * Pesquisar Quantidade de Movimentação Pendente ou sem Retorno
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeMovimentacaoPendenteOuSemRetorno(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarQuantidadeMovimentacaoPendenteOuSemRetorno(idBoletoBancario);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [SB0002] Cancelar Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public void cancelarBoletoBancario(Integer idMotivoCancelamento, String[] idRegistrosCancelamento, Usuario usuarioLogado)
					throws ControladorException{

		//
		// Validação dos campos
		//

		// Motivo do Cancelamento
		if(idMotivoCancelamento == null || idMotivoCancelamento == ConstantesSistema.NUMERO_NAO_INFORMADO){
			throw new ControladorException("atencao.required", null, "Motivo do Cancelamento");
		}

		// Ids do Boleto Bancário para Cancelar
		if(Util.isVazioOrNulo(idRegistrosCancelamento)){
			throw new ControladorException("atencao.required", null, "Ids do Boleto Bancário");
		}

		// Pesquisa Motivo do Cancelamento
		FiltroBoletoBancarioMotivoCancelamento filtroMotivoCancelamento = new FiltroBoletoBancarioMotivoCancelamento();
		filtroMotivoCancelamento.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioMotivoCancelamento.ID, idMotivoCancelamento));
		filtroMotivoCancelamento.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioMotivoCancelamento.INDICADOR_USO,
						ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<BoletoBancarioMotivoCancelamento> colecaoBoletoBancarioMotivoCancelamento = getControladorUtil().pesquisar(
						filtroMotivoCancelamento, BoletoBancarioMotivoCancelamento.class.getName());

		if(Util.isVazioOrNulo(colecaoBoletoBancarioMotivoCancelamento)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		BoletoBancarioMotivoCancelamento boletoBancarioMotivoCancelamento = (BoletoBancarioMotivoCancelamento) Util
						.retonarObjetoDeColecao(colecaoBoletoBancarioMotivoCancelamento);

		// Pesquisa Boleto Bancário Situação
		Integer idBoletoBancarioSituacao = BoletoBancarioSituacao.CANCELADO;

		FiltroBoletoBancarioSituacao filtroBoletoBancarioSituacao = new FiltroBoletoBancarioSituacao();
		filtroBoletoBancarioSituacao.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioSituacao.ID, idBoletoBancarioSituacao));

		Collection<BoletoBancarioSituacao> colecaoBoletoBancarioSituacao = this.getControladorUtil().pesquisar(
						filtroBoletoBancarioSituacao, BoletoBancarioSituacao.class.getName());

		if(Util.isVazioOrNulo(colecaoBoletoBancarioSituacao)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		BoletoBancarioSituacao boletoBancarioSituacaoCancelado = (BoletoBancarioSituacao) Util
						.retonarObjetoDeColecao(colecaoBoletoBancarioSituacao);

		idBoletoBancarioSituacao = BoletoBancarioSituacao.CANCELADO_BAIXA_E_PROTESTO;

		filtroBoletoBancarioSituacao = new FiltroBoletoBancarioSituacao();
		filtroBoletoBancarioSituacao.adicionarParametro(new ParametroSimples(FiltroBoletoBancarioSituacao.ID, idBoletoBancarioSituacao));

		colecaoBoletoBancarioSituacao = this.getControladorUtil().pesquisar(filtroBoletoBancarioSituacao,
						BoletoBancarioSituacao.class.getName());

		if(Util.isVazioOrNulo(colecaoBoletoBancarioSituacao)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		BoletoBancarioSituacao boletoBancarioSituacaoCanceladoBaixaEProtesto = (BoletoBancarioSituacao) Util
						.retonarObjetoDeColecao(colecaoBoletoBancarioSituacao);

		FiltroBoletoBancario filtroBoletoBancario = null;
		FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = null;
		FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = null;

		Collection<BoletoBancario> colecaoBoletoBancario = null;
		Collection<ImovelCobrancaSituacao> colecaoImovelCobrancaSituacao = null;
		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = null;
		Collection<Conta> colecaoContasParaRevisao = null;

		BoletoBancario boletoBancario = null;
		ImovelCobrancaSituacao imovelCobrancaSituacao = null;

		Date dataCorrente = new Date();

		BoletoBancarioSituacao boletoBancarioSituacao = null;

		for(String idBoletoBancario : idRegistrosCancelamento){
			filtroBoletoBancario = new FiltroBoletoBancario();
			filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.IMOVEL);
			filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.DOCUMENTOCOBRANCA);
			filtroBoletoBancario.adicionarCaminhoParaCarregamentoEntidade(FiltroBoletoBancario.DOCUMENTO_TIPO);
			filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID, idBoletoBancario));

			colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario, BoletoBancario.class.getName());

			if(Util.isVazioOrNulo(colecaoBoletoBancario)){
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			boletoBancario = (BoletoBancario) Util.retonarObjetoDeColecao(colecaoBoletoBancario);

			boletoBancario.setBoletoBancarioMotivoCancelamento(boletoBancarioMotivoCancelamento);
			boletoBancario.setDataCancelamento(dataCorrente);

			boolean existeBoletoAgregado = this.verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(Integer
							.valueOf(idBoletoBancario));

			if(existeBoletoAgregado){
				boletoBancarioSituacao = boletoBancarioSituacaoCanceladoBaixaEProtesto;
			}else{
				boletoBancarioSituacao = boletoBancarioSituacaoCancelado;
			}

			boletoBancario.setBoletoBancarioSituacao(boletoBancarioSituacao);

			boletoBancario.setUltimaAlteracao(dataCorrente);

			// Registrar a transação de alteração do Boleto Bancário
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(Operacao.OPERACAO_BOLETO_BANCARIO_CANCELAR,
							boletoBancario.getId(), boletoBancario.getId(), new UsuarioAcaoUsuarioHelper(usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_BOLETO_BANCARIO_CANCELAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			boletoBancario.setOperacaoEfetuada(operacaoEfetuada);
			boletoBancario.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);

			registradorOperacao.registrarOperacao(boletoBancario);

			// 3.1.1.1. Atualizar
			this.getControladorUtil().atualizar(boletoBancario);

			// 3.1.1.2. Incluir boleto Bancário Histórico
			this.inserirBoletoBancarioSituacaoHistorico(boletoBancario, usuarioLogado, boletoBancarioSituacao);

			// 3.1.1.3. Caso o boleto esteja associado a um documento de cobrança, ou seja, o boleto
			// que está sendo cancelado é o boleto único gerado na ação de cobrança
			DocumentoTipo documentoTipo = boletoBancario.getDocumentoTipo();

			if(documentoTipo != null && documentoTipo.getId().equals(DocumentoTipo.DOCUMENTO_DE_COBRANCA)){
				CobrancaDocumento cobrancaDocumento = boletoBancario.getDocumentoCobranca();
				Integer idCobrancaDocumento = cobrancaDocumento.getId();

				// [SB0004 - Retirar Contas de Revisão]
				filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
				filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL);
				filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL_CONTA);
				filtroCobrancaDocumentoItem
								.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL_CONTA_MOTIVO_REVISAO);
				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DOCUMENTO_TIPO_ID,
								DocumentoTipo.CONTA));
				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
								idCobrancaDocumento));

				colecaoCobrancaDocumentoItem = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
								CobrancaDocumentoItem.class.getName());

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
					// Para cada item de débito, verifica se a conta está em revisão pelo motivo de
					// cobrança bancária
					colecaoContasParaRevisao = new ArrayList();

					for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
						ContaGeral contaGeral = cobrancaDocumentoItem.getContaGeral();
						Conta conta = contaGeral.getConta();

						if(conta != null){
							ContaMotivoRevisao contaMotivoRevisao = conta.getContaMotivoRevisao();

							if(contaMotivoRevisao != null){
								Integer idContaMotivoRevisao = contaMotivoRevisao.getId();

								if(ParametroCobranca.isCobrancaBancaria(idContaMotivoRevisao.toString())){
									colecaoContasParaRevisao.add(conta);
								}
							}
						}
					}

					// [UC0149 - Retirar Conta de Revisão]
					if(!Util.isVazioOrNulo(colecaoContasParaRevisao)){
						this.getControladorFaturamento().retirarRevisaoConta(colecaoContasParaRevisao, null, usuarioLogado);
					}
				}

				// [SB0008] - Atualizar Situação dos Itens do Documento de Cobrança
				filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
								idCobrancaDocumento));
				filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(
								FiltroCobrancaDocumentoItem.COBRANCA_DEBITO_SITUACAO_ID, CobrancaDebitoSituacao.PENDENTE));

				colecaoCobrancaDocumentoItem = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
								CobrancaDocumentoItem.class.getName());

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
					CobrancaDebitoSituacao cobrancaDebitoSituacaoExcluido = new CobrancaDebitoSituacao();
					cobrancaDebitoSituacaoExcluido.setId(CobrancaDebitoSituacao.EXCLUIDO);

					Collection<Object> colecaoCobrancaDocumentoItemAtualizar = new ArrayList<Object>();

					for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
						cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacaoExcluido);
						cobrancaDocumentoItem.setDataSituacaoDebito(new Date());
						cobrancaDocumentoItem.setIndicadorAtualizado(ConstantesSistema.SIM);
						cobrancaDocumentoItem.setUltimaAlteracao(new Date());

						colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
					}

					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoItemAtualizar);
				}
			}

			// 3.1.1.4. Caso não exista outros boletos vigentes
			Imovel imovel = boletoBancario.getImovel();
			Integer idImovel = imovel.getId();

			Integer qtdBoletosVigentes = this.pesquisarQuantidadeBoletosVigentesDoImovel(idImovel, null);

			if(qtdBoletosVigentes == 0){
				// Atualiza a situação da cobrança
				filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();
				filtroImovelCobrancaSituacao.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaSituacao.IMOVEL_ID, idImovel));
				filtroImovelCobrancaSituacao.adicionarParametro(new ParametroNulo(FiltroImovelCobrancaSituacao.DATA_RETIRADA_COBRANCA));
				filtroImovelCobrancaSituacao.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaSituacao.ID_COBRANCA_SITUACAO,
								CobrancaSituacao.COBRANCA_BANCARIA));

				colecaoImovelCobrancaSituacao = this.getControladorUtil().pesquisar(filtroImovelCobrancaSituacao,
								ImovelCobrancaSituacao.class.getName());

				if(!Util.isVazioOrNulo(colecaoImovelCobrancaSituacao)){
					// Retira o Imóvel da Situação de Cobrança Bancária
					imovelCobrancaSituacao = (ImovelCobrancaSituacao) Util.retonarObjetoDeColecao(colecaoImovelCobrancaSituacao);

					imovelCobrancaSituacao.setDataRetiradaCobranca(dataCorrente);
					imovelCobrancaSituacao.setUltimaAlteracao(dataCorrente);

					this.getControladorUtil().atualizar(imovelCobrancaSituacao);
				}
			}
		}
	}

	/**
	 * Inserir Boleto Bancário Movimentação
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public void inserirBoletoBancarioMovimentacao(BoletoBancario boletoBancario, Usuario usuarioLogado,
					BoletoBancarioLancamentoEnvio boletoBancarioLancamentoEnvio) throws ControladorException{

		Date dataCorrente = new Date();

		BoletoBancarioMovimentacao boletoBancarioMovimentacao = new BoletoBancarioMovimentacao();
		boletoBancarioMovimentacao.setBoletoBancario(boletoBancario);
		boletoBancarioMovimentacao.setBoletoBancarioLancamentoEnvio(boletoBancarioLancamentoEnvio);
		boletoBancarioMovimentacao.setUsuario(usuarioLogado);
		boletoBancarioMovimentacao.setDataMovimentacao(dataCorrente);
		boletoBancarioMovimentacao.setUltimaAlteracao(dataCorrente);

		getControladorUtil().inserir(boletoBancarioMovimentacao);
	}

	/**
	 * Inserir Boleto Bancário Situação Histórico
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	private void inserirBoletoBancarioSituacaoHistorico(BoletoBancario boletoBancario, Usuario usuarioLogado,
					BoletoBancarioSituacao boletoBancarioSituacao) throws ControladorException{

		Date dataCorrente = new Date();

		BoletoBancarioSituacaoHistorico boletoBancarioSituacaoHistorico = new BoletoBancarioSituacaoHistorico();
		boletoBancarioSituacaoHistorico.setBoletoBancario(boletoBancario);
		boletoBancarioSituacaoHistorico.setBoletoBancarioSituacao(boletoBancarioSituacao);
		boletoBancarioSituacaoHistorico.setDataEntrada(dataCorrente);
		boletoBancarioSituacaoHistorico.setUltimaAlteracao(dataCorrente);

		getControladorUtil().inserir(boletoBancarioSituacaoHistorico);
	}

	/**
	 * Pesquisar Guia de pagamento Prestação pelo Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoBoleto(Integer guiaPagamentoId, Integer numeroPrestacao)
					throws ControladorException{

		Collection<GuiaPagamentoPrestacaoHelper> colecaoGuiaPagamentoPrestacao = null;

		try{
			colecaoGuiaPagamentoPrestacao = repositorioCobranca.pesquisarGuiasPagamentoPrestacaoBoleto(guiaPagamentoId, numeroPrestacao);

			BigDecimal valorPagamento = this.getControladorArrecadacao().retornarSomatorioPagamentoDaGuia(guiaPagamentoId, numeroPrestacao);

			if(!Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao) && valorPagamento != null){
				String valorPagamentoStr = Util.formatarMoedaReal(valorPagamento);

				for(GuiaPagamentoPrestacaoHelper guiaPagamentoPrestacaoHelper : colecaoGuiaPagamentoPrestacao){
					guiaPagamentoPrestacaoHelper.setValorPagamentoStr(valorPagamentoStr);
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoGuiaPagamentoPrestacao;
	}

	/**
	 * Pesquisar Contas Pelo Boleo Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<BoletoBancarioContaHelper> pesquisarContasPeloBoletoBancario(Integer idBoletoBancario) throws ControladorException{

		Collection<BoletoBancarioContaHelper> retorno = new ArrayList<BoletoBancarioContaHelper>();

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca.pesquisarContasPeloBoletoBancario(idBoletoBancario);

			BoletoBancarioContaHelper helper = null;

			for(Object[] array : colecaoArray){
				helper = new BoletoBancarioContaHelper();

				if(array[0] != null){
					helper.setReferencia((Integer) array[0]);
				}

				if(array[1] != null){
					helper.setDataVencimentoConta((Date) array[1]);
				}

				if(array[2] != null){
					helper.setValorAgua((BigDecimal) array[2]);
				}else{
					helper.setValorAgua(BigDecimal.ZERO);
				}

				if(array[3] != null){
					helper.setValorEsgoto((BigDecimal) array[3]);
				}else{
					helper.setValorEsgoto(BigDecimal.ZERO);
				}

				if(array[4] != null){
					helper.setValorDebitos((BigDecimal) array[4]);
				}else{
					helper.setValorDebitos(BigDecimal.ZERO);
				}

				if(array[5] != null){
					helper.setValorCreditos((BigDecimal) array[5]);
				}else{
					helper.setValorCreditos(BigDecimal.ZERO);
				}

				if(array[6] != null){
					helper.setValorImposto((BigDecimal) array[6]);
				}else{
					helper.setValorImposto(BigDecimal.ZERO);
				}

				if(array[7] != null){
					helper.setIdCliente((Integer) array[7]);
				}

				if(array[8] != null){
					helper.setValorItemCobrado((BigDecimal) array[8]);
				}else{
					helper.setValorItemCobrado(BigDecimal.ZERO);
				}

				if(array[9] != null){
					helper.setValorAcrescimos((BigDecimal) array[9]);
				}else{
					helper.setValorAcrescimos(BigDecimal.ZERO);
				}

				if(array[10] != null){
					helper.setDescricaoDebitoCreditoSituacao((String) array[10]);
				}

				if(array[11] != null){
					Integer idConta = (Integer) array[11];

					helper.setIdConta(idConta);

					BigDecimal valorPagamento = this.getControladorArrecadacao().retornarSomatorioPagamentoDaConta(idConta);

					if(valorPagamento != null){
						String valorPagamentoStr = Util.formatarMoedaReal(valorPagamento);
						helper.setValorPago(valorPagamentoStr);
					}
				}

				retorno.add(helper);
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * Pesquisar Quantidade de Boletos Vigentes Filtrando pelo Imóvel
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeBoletosVigentesDoImovel(Integer idImovel, Integer idBoleto) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarQuantidadeBoletosVigentesDoImovel(idImovel, idBoleto);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisar Conteúdo do Arrecadador Movimento Ítem pelo Boleto Bancário
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public String pesquisarConteudoArrecadadorMovimentoItem(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarConteudoArrecadadorMovimentoItem(idBoletoBancario);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisar Boleto Bancário Totalizador
	 * [UC3023] Manter Boleto Bancário
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2011
	 */
	public Collection<BoletoBancarioTotalizadorHelper> pesquisarBoletoBancarioTotalizadorPorImovel(
					BoletoBancarioHelper boletoBancarioHelper, boolean desconsiderarParametros, boolean verificarDocumentoCobranca,
					boolean verificarNumeroBoletoCartaCobranca, int pageOffset) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarBoletoBancarioTotalizadorPorImovel(boletoBancarioHelper, desconsiderarParametros,
							verificarDocumentoCobranca, verificarNumeroBoletoCartaCobranca, pageOffset);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança.
	 * [SB0008] - Gerar Atividade de Ação de Cobrança para os Imóveis do Comando Precedente.
	 * 
	 * @author Ailton Sousa
	 * @date 26/10/2011
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param cobrancaAcaoAtividadeComando
	 * @param indicadorCriterio
	 * @param acaoCobranca
	 * @param atividadeCobranca
	 * @param anoMesReferenciaInicial
	 * @param anoMesReferenciaFinal
	 * @param dataVencimentoInicial
	 * @param dataVencimentoFinal
	 * @param dataAtual
	 * @param sistemaParametros
	 * @param idSetorComercial
	 * @throws ControladorException
	 */
	private GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaImoveisComandoPrecedente(
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, Integer indicadorCriterio, CobrancaAcao acaoCobranca,
					CobrancaAtividade atividadeCobranca, String anoMesReferenciaInicial, String anoMesReferenciaFinal,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual, SistemaParametro sistemaParametros,
					Integer idSetorComercial, CobrancaCriterio criterioCobranca, Integer idFaturamentoGrupoCronogramaMensal,
					ClienteRelacaoTipo clienteRelacaoTipo)
					throws ControladorException{

		// cria o objeto que vai armazenas os dados
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

		try{
			// cria o objeto que vai armazenar temporariamente os dados retornados
			// pelo [SB0003], para cada imóvel
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

			// inicializa os valores de quantidade de documentos, quantidade de
			// itens cobrados e valor do documento de cobrança
			gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
			gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(0);
			gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(BigDecimal.ZERO);

			Collection<Integer> idImoveisTotal = repositorioCobranca.pesquisarImoveisComandoPrecedente(cobrancaAcaoAtividadeComando
							.getPrecedente().getId());

			if(!Util.isVazioOrNulo(idImoveisTotal)){

				Integer[] idsTipoDocumentoAIgnorar = null;
				switch(acaoCobranca.getDocumentoTipo().getId()){
					case DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL:
						idsTipoDocumentoAIgnorar = new Integer[6];
						idsTipoDocumentoAIgnorar[0] = DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO;
						idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL;
						idsTipoDocumentoAIgnorar[2] = DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO;
						idsTipoDocumentoAIgnorar[3] = DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL;
						idsTipoDocumentoAIgnorar[4] = DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO;
						idsTipoDocumentoAIgnorar[5] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
						break;
					case DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO:
					case DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL:
					case DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO:
					case DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL:
					case DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO:
						idsTipoDocumentoAIgnorar = new Integer[2];
						idsTipoDocumentoAIgnorar[0] = acaoCobranca.getDocumentoTipo().getId();
						idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
						break;
					default:
						idsTipoDocumentoAIgnorar = new Integer[1];
						idsTipoDocumentoAIgnorar[0] = acaoCobranca.getDocumentoTipo().getId();
						break;
				}
				Collection<Imovel> colecaoImoveis = repositorioImovel.pesquisarImoveis(idImoveisTotal, idSetorComercial,
								acaoCobranca.getId(), idsTipoDocumentoAIgnorar, criterioCobranca, clienteRelacaoTipo);

				if(!Util.isVazioOrNulo(colecaoImoveis)){
					// Objetos declarados/inicializados fora do loop para poupar memoria,
					// devido a qtde de imoveis que serão processados
					Imovel imovel = new Imovel();
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ImovelPerfil imovelPerfil = new ImovelPerfil();
					Quadra quadra = new Quadra();
					// Rota rotaEmpresa = null;
					Localidade localidade = new Localidade();
					SetorComercial setorComercial = new SetorComercial();
					CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
					Rota rota = new Rota();
					Empresa empresa = new Empresa();

					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					imovel.setImovelPerfil(imovelPerfil);
					imovel.setQuadra(quadra);
					imovel.setLocalidade(localidade);
					imovel.setSetorComercial(setorComercial);
					imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
					quadra.setRota(rota);
					imovel.setRota(rota);
					rota.setEmpresa(empresa);
					LogradouroCep logradouroCep = null;

					Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

					while(iteratorColecaoImoveis.hasNext()){

						Object[] arrayImovel = (Object[]) iteratorColecaoImoveis.next();

						imovel.setId((Integer) arrayImovel[0]);

						ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);

						ligacaoEsgotoSituacao.setId((Integer) arrayImovel[2]);

						imovelPerfil.setId((Integer) arrayImovel[3]);

						// caso a ação de cobrança gere a ordem de serviço
						if(acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null){
							// seta a empresa cobranca
							empresa.setId((Integer) arrayImovel[13]);
						}else{
							// seta a empresa
							empresa.setId((Integer) arrayImovel[4]);
						}

						localidade.setId((Integer) arrayImovel[5]);

						setorComercial.setCodigo((Integer) arrayImovel[6]);

						quadra.setNumeroQuadra((Integer) arrayImovel[7]);

						imovel.setLote((Short) arrayImovel[8]);

						imovel.setLote((Short) arrayImovel[9]);

						quadra.setId((Integer) arrayImovel[10]);

						cobrancaSituacaoTipo.setId((Integer) arrayImovel[11]);

						imovel.setIndicadorDebitoConta((Short) arrayImovel[12]);

						if((Integer) arrayImovel[14] != null){
							logradouroCep = new LogradouroCep();
							logradouroCep.setId((Integer) arrayImovel[14]);
							imovel.setLogradouroCep(logradouroCep);
						}

						rota.setId((Integer) arrayImovel[15]);

						imovel.setIndicadorExclusao((Short) arrayImovel[16]);


						// CobrancaCriterio criterioCobranca =
						// repositorioCobranca.pesquisarCriterioCobrancaRota(imovel.getQuadra().getRota()
						// .getId().intValue(), acaoCobranca.getId());
						Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = repositorioCobranca
										.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca.getId());
						gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(cobrancaAcaoAtividadeCronograma,
										cobrancaAcaoAtividadeComando, imovel, indicadorCriterio, acaoCobranca, atividadeCobranca,
										criterioCobranca, colecaoCobrancaCriterioLinha, anoMesReferenciaInicial, anoMesReferenciaFinal,
										dataVencimentoInicial, dataVencimentoFinal, dataAtual, sistemaParametros,
										idFaturamentoGrupoCronogramaMensal, clienteRelacaoTipo);

						// se o objeto retornado for diferente de nulo
						if(gerarAtividadeAcaoCobrancaHelperTemp != null){

							// gerarAtividadeAcaoCobrancaHelper.getImovelIds().addAll(gerarAtividadeAcaoCobrancaHelperTemp.getImovelIds());

							// recupera a quantidade de documentos de cobrança, quantidade
							// de itens cobrados e o valor do documento do objeto retornado pelo
							// [SB0003]
							gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca() + 1);
							gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeItensCobradosDocumentos()
											+ gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos());
							gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
											.getValorDocumentosCobranca().add(
															gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca()));
						}
					}
				}
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

		return gerarAtividadeAcaoCobrancaHelper;
	}

	/**
	 * @author Hugo Lima
	 * @date 02/12/2011
	 * @param resolucaoDiretoria
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> consultarResolucaoDiretoriaGrupo(ResolucaoDiretoriaGrupoHelper resolucaoDiretoriaGrupoHelper,
					int pageOffset) throws ControladorException{

		Collection<ResolucaoDiretoria> colecao = new ArrayList<ResolucaoDiretoria>();

		try{
			colecao = this.repositorioCobranca.consultarResolucaoDiretoriaGrupo(resolucaoDiretoriaGrupoHelper, pageOffset);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return colecao;
	}

	/**
	 * Obter Cobrança Negociação Atendimento
	 * 
	 * @author Hebert Falcão
	 * @date 25/11/2011
	 */
	public CobrancaNegociacaoAtendimento obterCobrancaNegociacaoAtendimento(Integer idCobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.obterCobrancaNegociacaoAtendimento(idCobrancaDocumento);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Re-enviar documento de negociação atendimento
	 * [UC0257] Consultar Documentos de Cobrança
	 * 
	 * @author Hebert Falcão
	 * @date 25/11/2011
	 */
	public void reEnviarDocumentoNegociacaoAtendimento(String idCobrancaNegociacaoAtendimento, String emailNegociacao)
					throws ControladorException{

		FiltroCobrancaNegociacaoAtendimento filtroCobrancaNegociacaoAtendimento = new FiltroCobrancaNegociacaoAtendimento();
		filtroCobrancaNegociacaoAtendimento
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaNegociacaoAtendimento.COBRANCA_DOCUMENTO);
		filtroCobrancaNegociacaoAtendimento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaNegociacaoAtendimento.PRE_PARCELAMENTO);
		filtroCobrancaNegociacaoAtendimento.adicionarParametro(new ParametroSimples(FiltroCobrancaNegociacaoAtendimento.ID,
						idCobrancaNegociacaoAtendimento));

		Collection<CobrancaNegociacaoAtendimento> colecaoCobrancaNegociacaoAtendimento = this.getControladorUtil().pesquisar(
						filtroCobrancaNegociacaoAtendimento, CobrancaNegociacaoAtendimento.class.getName());

		if(Util.isVazioOrNulo(colecaoCobrancaNegociacaoAtendimento)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		CobrancaNegociacaoAtendimento cobrancaNegociacaoAtendimento = (CobrancaNegociacaoAtendimento) Util
						.retonarObjetoDeColecao(colecaoCobrancaNegociacaoAtendimento);

		if(Util.isVazioOuBranco(emailNegociacao)){
			throw new ControladorException("É necessário informar o e-mail para o re-envio do documento da negociação.");
		}

		// Atualizar e-mail
		cobrancaNegociacaoAtendimento.setEmail(emailNegociacao);
		cobrancaNegociacaoAtendimento.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(cobrancaNegociacaoAtendimento);

		RegistroAtendimento registroAtendimento = cobrancaNegociacaoAtendimento.getRegistroAtendimento();
		Integer idRegistroAtendimento = registroAtendimento.getId();

		// Re-enviando o documento
		CobrancaDocumento cobrancaDocumento = cobrancaNegociacaoAtendimento.getCobrancaDocumento();

		if(cobrancaDocumento != null){
			ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = new ExtratoDebitoRelatorioHelper(
							new ArrayList<CobrancaDocumentoItem>(), new ArrayList<CobrancaDocumentoItem>(),
							new ArrayList<CobrancaDocumentoItem>(), new ArrayList<CobrancaDocumentoItem>());

			// Negociação com extrato de débito
			Integer idCobrancaDocumento = cobrancaDocumento.getId();

			// Contas
			FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
							idCobrancaDocumento));
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DOCUMENTO_TIPO_ID,
							DocumentoTipo.CONTA));
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL);
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL_CONTA);
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CONTA_GERAL_CONTA_HISTORICO);

			Collection<CobrancaDocumentoItem> colecaoItemContas = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
							CobrancaDocumentoItem.class.getName());

			if(!Util.isVazioOrNulo(colecaoItemContas)){
				extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemContas(colecaoItemContas);
			}

			// Guias de Pagamento
			filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
							idCobrancaDocumento));
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DOCUMENTO_TIPO_ID,
							DocumentoTipo.GUIA_PAGAMENTO));
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.GUIA_PAGAMENTO_GERAL);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.GUIA_PAGAMENTO_GERAL_GUIA_PAGAMENTO);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.GUIA_PAGAMENTO_GERAL_GUIA_PAGAMENTO_HISTORICO);

			Collection<CobrancaDocumentoItem> colecaoItemGuiasDePagamento = this.getControladorUtil().pesquisar(
							filtroCobrancaDocumentoItem, CobrancaDocumentoItem.class.getName());

			if(!Util.isVazioOrNulo(colecaoItemGuiasDePagamento)){
				extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemGuiasPagamento(colecaoItemGuiasDePagamento);
			}

			// Débitos a Cobrar
			filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
							idCobrancaDocumento));
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DOCUMENTO_TIPO_ID,
							DocumentoTipo.DEBITO_A_COBRAR));
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.DEBITO_A_COBRAR_GERAL);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.DEBITO_A_COBRAR_GERAL_DEBITO_A_COBRAR);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.DEBITO_A_COBRAR_GERAL_DEBITO_A_COBRAR_HISTORICO);

			Collection<CobrancaDocumentoItem> colecaoItemDebitosACobrar = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
							CobrancaDocumentoItem.class.getName());

			if(!Util.isVazioOrNulo(colecaoItemDebitosACobrar)){
				extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemDebitosACobrar(colecaoItemDebitosACobrar);
			}

			// Créditos a Realizar
			filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
							idCobrancaDocumento));
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DOCUMENTO_TIPO_ID,
							DocumentoTipo.CREDITO_A_REALIZAR));
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CREDITO_A_REALIZAR_GERAL);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CREDITO_A_REALIZAR_GERAL_CREDITO_A_REALIZAR);
			filtroCobrancaDocumentoItem
							.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.CREDITO_A_REALIZAR_GERAL_CREDITO_A_REALIZAR_HISTORICO);

			Collection<CobrancaDocumentoItem> colecaoItemCreditosARealizar = this.getControladorUtil().pesquisar(
							filtroCobrancaDocumentoItem, CobrancaDocumentoItem.class.getName());

			if(!Util.isVazioOrNulo(colecaoItemCreditosARealizar)){
				extratoDebitoRelatorioHelper.setColecaoCobrancaDocumentoItemCreditoARealizar(colecaoItemCreditosARealizar);
			}

			// Imóvel
			Imovel imovel = cobrancaDocumento.getImovel();
			Integer idImovel = imovel.getId();

			imovel = this.getControladorImovel().pesquisarImovel(idImovel);
			cobrancaDocumento.setImovel(imovel);

			String inscricaoFormatada = imovel.getInscricaoFormatada();

			// Imóvel Perfil
			ImovelPerfil imovelPerfil = cobrancaDocumento.getImovelPerfil();
			Integer idImovelPerfil = imovelPerfil.getId();

			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();
			filtroImovelPerfil.adicionarParametro(new ParametroSimples(FiltroImovelPerfil.ID, idImovelPerfil));

			Collection<ImovelPerfil> colecaoImovelPerfil = this.getControladorUtil().pesquisar(filtroImovelPerfil,
							ImovelPerfil.class.getName());

			imovelPerfil = (ImovelPerfil) Util.retonarObjetoDeColecao(colecaoImovelPerfil);
			cobrancaDocumento.setImovelPerfil(imovelPerfil);

			// Localidade
			Localidade localidadeDocumento = cobrancaDocumento.getLocalidade();
			Integer idLocalidade = localidadeDocumento.getId();

			localidadeDocumento = this.getControladorLocalidade().pesquisarLocalidadeDigitada(idLocalidade);
			cobrancaDocumento.setLocalidade(localidadeDocumento);

			extratoDebitoRelatorioHelper.setDocumentoCobranca(cobrancaDocumento);

			// Cliente do Imóvel
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, idImovel));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO,
							ClienteRelacaoTipo.USUARIO));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE_CLIENTE_TIPO);

			Collection<ClienteImovel> clientesImovel = this.getControladorUtil().pesquisar(filtroClienteImovel,
							ClienteImovel.class.getName());

			String nomeCliente = "";

			if(!Util.isVazioOrNulo(clientesImovel)){
				ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(clientesImovel);

				Cliente cliente = clienteImovel.getCliente();

				if(cliente != null){
					nomeCliente = cliente.getNome();
				}
			}

			// Endereço do Imóvel
			String enderecoImovel = this.getControladorEndereco().pesquisarEnderecoFormatado(idImovel);

			// Calcula qntde de parcelas a pagar
			Integer qtdParcelas = 0;
			BigDecimal valorTotalDebitos = BigDecimal.ZERO;

			if(!Util.isVazioOrNulo(colecaoItemDebitosACobrar)){
				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoItemDebitosACobrar){
					DebitoACobrarGeral debitoACobrarGeral = cobrancaDocumentoItem.getDebitoACobrarGeral();
					DebitoACobrar debitoACobrar = debitoACobrarGeral.getDebitoACobrar();

					qtdParcelas = qtdParcelas + (debitoACobrar.getNumeroPrestacaoDebito() - debitoACobrar.getNumeroPrestacaoCobradas());
					valorTotalDebitos = valorTotalDebitos.add(debitoACobrar.getValorTotal());
				}
			}

			String quantidadeParcelas = String.valueOf(qtdParcelas);

			// Crédito a realizar
			BigDecimal valorCreditos = BigDecimal.ZERO;

			if(!Util.isVazioOrNulo(colecaoItemCreditosARealizar)){
				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoItemCreditosARealizar){
					CreditoARealizarGeral creditoARealizarGeral = cobrancaDocumentoItem.getCreditoARealizarGeral();
					CreditoARealizar creditoARealizar = creditoARealizarGeral.getCreditoARealizar();

					valorCreditos = valorCreditos.add(creditoARealizar.getValorTotal());
				}
			}

			BigDecimal valorDocumento = BigDecimal.ZERO;
			if(cobrancaDocumento.getValorDocumento() != null){
				valorDocumento = cobrancaDocumento.getValorDocumento();
			}
			BigDecimal valorDesconto = BigDecimal.ZERO;
			if(cobrancaDocumento.getValorDesconto() != null){
				valorDesconto = cobrancaDocumento.getValorDesconto();
			}
			BigDecimal valorAcrescimosImpontualidade = BigDecimal.ZERO;
			if(cobrancaDocumento.getValorAcrescimos() != null){
				valorAcrescimosImpontualidade = cobrancaDocumento.getValorAcrescimos();
			}

			RelatorioExtratoDebito relatorioExtratoDebito = this.obterRelatorioExtratoDebito(extratoDebitoRelatorioHelper, imovel,
							valorTotalDebitos, valorAcrescimosImpontualidade, valorCreditos, valorDesconto, valorDocumento, null,
							inscricaoFormatada, nomeCliente, Integer.toString(idImovel), enderecoImovel, quantidadeParcelas, null, null, null, null);

			byte[] relatorioGerado = (byte[]) relatorioExtratoDebito.executar();

			this.enviarEmailCobrancaNegociacaoAtendimento(emailNegociacao, relatorioGerado, idRegistroAtendimento);
		}else{
			// Negociação com pré-parcelamento
			PreParcelamento preParcelamento = cobrancaNegociacaoAtendimento.getPreParcelamento();

			cobrancaDocumento = preParcelamento.getDocumentoCobranca();
			Integer idCobrancaDocumento = cobrancaDocumento.getId();

			FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
			filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.ID, idCobrancaDocumento));

			Collection<CobrancaDocumento> colecaoCobrancaDocumento = this.getControladorUtil().pesquisar(filtroCobrancaDocumento,
							CobrancaDocumento.class.getName());

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
				for(CobrancaDocumento cobrancaDocumentoAux : colecaoCobrancaDocumento){
					Imovel imovelDocumento = cobrancaDocumentoAux.getImovel();
					Integer idImovelDocumento = imovelDocumento.getId();

					imovelDocumento = getControladorImovel().pesquisarImovel(idImovelDocumento);
					cobrancaDocumentoAux.setImovel(imovelDocumento);
				}
			}

			List<Object> colecaoEmitirCartaOpcaoParcelamentoHelper = this
							.obterColecaoEmitirCartaOpcaoParcelamentoHelper(colecaoCobrancaDocumento);

			if(!Util.isVazioOrNulo(colecaoEmitirCartaOpcaoParcelamentoHelper)){
				RelatorioCartaOpcaoParcelamento relatorio = new RelatorioCartaOpcaoParcelamento(null);
				relatorio.addParametro("colecaoEmitirCartaOpcaoParcelamentoHelper", colecaoEmitirCartaOpcaoParcelamentoHelper);
				relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
				relatorio.addParametro("exibirMensagemComprovante", false);
				relatorio.addParametro("formatoArquivo", TarefaRelatorio.TIPO_PDF);

				byte[] relatorioGerado = (byte[]) relatorio.executar();

				this.enviarEmailCobrancaNegociacaoAtendimento(emailNegociacao, relatorioGerado, idRegistroAtendimento);
			}
		}
	}

	/**
	 * Enviar e-mail com o documento de cobrança da negociação
	 * [UC0257] Consultar Documentos de Cobrança
	 * 
	 * @author Hebert Falcão
	 * @date 25/11/2011
	 */
	private void enviarEmailCobrancaNegociacaoAtendimento(String emailReceptor, byte[] relatorioGerado, Integer idRegistroAtendimento)
					throws ControladorException{

		EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.NEGOCIACAO_DE_DEBITO);

		String emailRemetente = envioEmail.getEmailRemetente();
		String tituloMensagem = envioEmail.getTituloMensagem();
		String corpoMensagem = envioEmail.getCorpoMensagem();

		FiltroRegistroAtendimento filtroRegistroAtendimento = new FiltroRegistroAtendimento();
		filtroRegistroAtendimento.adicionarParametro(new ParametroSimples(FiltroRegistroAtendimento.ID, idRegistroAtendimento));

		Collection<RegistroAtendimento> colecaoRegistroAtendimento = this.getControladorUtil().pesquisar(filtroRegistroAtendimento,
						RegistroAtendimento.class.getName());

		if(!Util.isVazioOrNulo(colecaoRegistroAtendimento)){
			RegistroAtendimento registroAtendimento = (RegistroAtendimento) Util.retonarObjetoDeColecao(colecaoRegistroAtendimento);
			Date dataHoraRegistroAtendimento = registroAtendimento.getRegistroAtendimento();

			String dataHoraRegistroAtendimentoStr = Util.formatarDataComHora(dataHoraRegistroAtendimento);

			if(corpoMensagem.contains("{dataHoraAtendimento}")){
				corpoMensagem = corpoMensagem.replace("{dataHoraAtendimento}", dataHoraRegistroAtendimentoStr);
			}
		}

		try{
			File leitura = File.createTempFile("NegociacaoDebito", ".pdf");

			FileOutputStream out = new FileOutputStream(leitura.getAbsolutePath());
			out.write(relatorioGerado);
			out.flush();
			out.close();

			ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor, emailRemetente, tituloMensagem, corpoMensagem, leitura);

			leitura.delete();
		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método extraído do emitirCartaOpcaoParcelamento(...);
	 */
	private List<Object> obterColecaoEmitirCartaOpcaoParcelamentoHelper(Collection<CobrancaDocumento> colecaoCobrancaDocumento)
					throws ControladorException{

		String simboloMoeda = "R$ ";

		List<Object> colecaoEmitirCartaOpcaoParcelamentoHelper = null;

		if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
			colecaoEmitirCartaOpcaoParcelamentoHelper = new ArrayList<Object>();

			LOGGER.info("QUANTIDADE CARTA OPÇÃO PARCELAMENTO A EMITIR = " + colecaoCobrancaDocumento.size());

			EmitirCartaOpcaoParcelamentoHelper emitirCartaOpcaoParcelamentoHelper = null;

			for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
				emitirCartaOpcaoParcelamentoHelper = new EmitirCartaOpcaoParcelamentoHelper();

				if(cobrancaDocumento != null){
					PreParcelamentoHelper preParcelamentoHelper = obterPreParcelamento(cobrancaDocumento);
					PreParcelamento preParcelamento = preParcelamentoHelper.getPreParcelamento();

					if(preParcelamento != null){
						Collection listaPreParcelamentoOpcao = preParcelamentoHelper.getColecaoPreParcelamentoOpcao();

						if(listaPreParcelamentoOpcao.size() >= 1){
							Cliente cliente = getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());

							// nome do cliente
							if(cliente != null && !GenericValidator.isBlankOrNull(cliente.getNome())){
								emitirCartaOpcaoParcelamentoHelper.setNomeCliente(cliente.getNome());
							}else{
								emitirCartaOpcaoParcelamentoHelper.setNomeCliente("");
							}

							// matricula do cliente
							emitirCartaOpcaoParcelamentoHelper.setMatricula(cobrancaDocumento.getImovel().getId() + "");

							emitirCartaOpcaoParcelamentoHelper.setTextoNomeEMatriculaCliente(emitirCartaOpcaoParcelamentoHelper
											.getNomeCliente() + " (mat. " + cliente.getId() + ")");
							// inscricao
							emitirCartaOpcaoParcelamentoHelper.setInscricao(cobrancaDocumento.getImovel().getInscricaoFormatada());

							// roteiro
							String roteiro = cobrancaDocumento.getImovel().getSetorComercial().getId() + "-"
											+ cobrancaDocumento.getImovel().getRota().getId();

							if(cobrancaDocumento.getImovel().getNumeroSequencialRota() != null){
								roteiro = roteiro + "-" + cobrancaDocumento.getImovel().getNumeroSequencialRota();
							}

							emitirCartaOpcaoParcelamentoHelper.setRoteiro(roteiro);

							// hidrômetro
							if(cobrancaDocumento.getImovel().getLigacaoAgua() != null
											&& cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
								emitirCartaOpcaoParcelamentoHelper.setHm(cobrancaDocumento.getImovel().getLigacaoAgua()
												.getHidrometroInstalacaoHistorico().getNumeroHidrometro());
							}else{
								emitirCartaOpcaoParcelamentoHelper.setHm("");
							}

							// endereco
							emitirCartaOpcaoParcelamentoHelper.setEndereco(cobrancaDocumento.getImovel()
											.getEnderecoFormatadoAbreviadoSemBairro());
							// bairro
							emitirCartaOpcaoParcelamentoHelper.setBairro(cobrancaDocumento.getImovel().getLogradouroBairro().getBairro()
											.getNome());

							if(cobrancaDocumento.getImovel().getLogradouroCep() != null
											&& cobrancaDocumento.getImovel().getLogradouroCep().getCep() != null
											&& cobrancaDocumento.getImovel().getLogradouroCep().getCep().getCodigo() != null){
								emitirCartaOpcaoParcelamentoHelper.setCep(cobrancaDocumento.getImovel().getLogradouroCep().getCep()
												.getCodigo().toString());
							}else{
								emitirCartaOpcaoParcelamentoHelper.setCep("");
							}

							// saldo principal
							BigDecimal saldoPrincipal = preParcelamento.getValorDebitoAtualizado().subtract(
											preParcelamento.getValorJurosMora().add(preParcelamento.getValorMulta()));

							emitirCartaOpcaoParcelamentoHelper.setSaldoPrincipal(simboloMoeda + Util.formatarMoedaReal(saldoPrincipal));

							// juros
							emitirCartaOpcaoParcelamentoHelper.setJuros(simboloMoeda
											+ Util.formatarMoedaReal(preParcelamento.getValorJurosMora()));

							// multa
							emitirCartaOpcaoParcelamentoHelper.setMulta(simboloMoeda
											+ Util.formatarMoedaReal(preParcelamento.getValorMulta()));

							// divida total
							BigDecimal dividaTotal = preParcelamento.getValorDebitoAtualizado();

							emitirCartaOpcaoParcelamentoHelper.setDividaTotal(simboloMoeda + Util.formatarMoedaReal(dividaTotal));

							List<EmitirCartaOpcaoParcelamentoDetailHelper> opcoesParcelamento = new ArrayList<EmitirCartaOpcaoParcelamentoDetailHelper>();
							EmitirCartaOpcaoParcelamentoDetailHelper detailHelper = null;

							for(Iterator iteratorPPOP = listaPreParcelamentoOpcao.iterator(); iteratorPPOP.hasNext();){
								PreParcelamentoOpcao ppop = (PreParcelamentoOpcao) iteratorPPOP.next();
								detailHelper = new EmitirCartaOpcaoParcelamentoDetailHelper();

								// numero opção (posição da opção)
								detailHelper.setNumeroOpcao("OPÇÃO " + ppop.getPosicaoOpcao() + ":");

								// desconto
								BigDecimal valorDescontos = (ppop.getValorDescontosAcrescimosAntiguidade() != null ? ppop
												.getValorDescontosAcrescimosAntiguidade() : BigDecimal.ZERO)
												.add(ppop.getValorDescontosAcrescimosImpontualidade() != null ? ppop
																.getValorDescontosAcrescimosImpontualidade() : BigDecimal.ZERO)
												.add(ppop.getValorDescontosAcrescimosInatividade() != null ? ppop
																.getValorDescontosAcrescimosInatividade() : BigDecimal.ZERO)
												.add(ppop.getValorDescontoSancoesRDEspecial() != null ? ppop
																.getValorDescontoSancoesRDEspecial() : BigDecimal.ZERO);

								detailHelper.setDesconto(simboloMoeda + Util.formatarMoedaReal(valorDescontos));

								// valor total a pagar se o cliente escolher essa opção de
								// parcelamento
								BigDecimal valorTotalOpcaoParcelamentoAPagar = BigDecimal.ZERO;

								if(ppop.getNumeroPrestacoes() == 1 && ppop.getValorPrestacao().equals(BigDecimal.ZERO)){
									valorTotalOpcaoParcelamentoAPagar = dividaTotal.subtract(valorDescontos);
								}else{
									valorTotalOpcaoParcelamentoAPagar = ppop.getValorEntrada().add(
													ppop.getValorPrestacao().multiply(
																	BigDecimal.valueOf(ppop.getNumeroPrestacoes().longValue())));
								}

								// a pagar
								detailHelper.setaPagar(simboloMoeda + Util.formatarMoedaReal(valorTotalOpcaoParcelamentoAPagar));

								// Posição da Opção
								String posicaoOpcaoStr = "";
								Short posicaoOpcao = ppop.getPosicaoOpcao();

								if(posicaoOpcao != null){
									posicaoOpcaoStr = Short.toString(posicaoOpcao);
								}

								detailHelper.setPosicaoOpcao(posicaoOpcaoStr);

								// Valor da Entrada
								String valorEntradaStr = "";

								// Número de Prestações
								String numeroPrestacoesStr = "";

								// Valor da Prestação
								String valorPrestacaoStr = "";

								// Condição de Pagamento
								String condicaoPagamento = null;

								if(ppop.getNumeroPrestacoes() == 1){
									if(ppop.getValorPrestacao().equals(BigDecimal.ZERO)){
										condicaoPagamento = "À vista";
										detailHelper.setTextoValorPrimeiraParcela("R$ "
														+ Util.formatarMoedaReal(valorTotalOpcaoParcelamentoAPagar));
									}else{
										condicaoPagamento = "Entrada R$ " + Util.formatarMoedaReal(ppop.getValorEntrada()) + " + "
														+ ppop.getNumeroPrestacoes() + " x R$ "
														+ Util.formatarMoedaReal(ppop.getValorPrestacao());

										detailHelper.setTextoValorPrimeiraParcela("R$ " + Util.formatarMoedaReal(ppop.getValorEntrada()));

										valorEntradaStr = simboloMoeda + Util.formatarMoedaReal(ppop.getValorEntrada());

										numeroPrestacoesStr = Integer.toString(ppop.getNumeroPrestacoes());

										valorPrestacaoStr = simboloMoeda + Util.formatarMoedaReal(ppop.getValorPrestacao());
									}
								}else if(ppop.getNumeroPrestacoes() > 1 && !ppop.getValorPrestacao().equals(ppop.getValorEntrada())){
									if(ppop.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
										condicaoPagamento = ppop.getNumeroPrestacoes() + " x R$ "
														+ Util.formatarMoedaReal(ppop.getValorPrestacao());

										detailHelper.setTextoValorPrimeiraParcela("R$ " + Util.formatarMoedaReal(ppop.getValorPrestacao()));
									}else{
										condicaoPagamento = "Entrada R$ " + Util.formatarMoedaReal(ppop.getValorEntrada()) + " + "
														+ ppop.getNumeroPrestacoes() + " x R$ "
														+ Util.formatarMoedaReal(ppop.getValorPrestacao());

										detailHelper.setTextoValorPrimeiraParcela("R$ " + Util.formatarMoedaReal(ppop.getValorEntrada()));

										valorEntradaStr = simboloMoeda + Util.formatarMoedaReal(ppop.getValorEntrada());
									}

									numeroPrestacoesStr = Integer.toString(ppop.getNumeroPrestacoes());

									valorPrestacaoStr = simboloMoeda + Util.formatarMoedaReal(ppop.getValorPrestacao());
								}else if(ppop.getNumeroPrestacoes() > 1 && ppop.getValorPrestacao().equals(ppop.getValorEntrada())){
									condicaoPagamento = (ppop.getNumeroPrestacoes() + 1) + " x R$ "
													+ Util.formatarMoedaReal(ppop.getValorPrestacao());

									detailHelper.setTextoValorPrimeiraParcela("R$ " + Util.formatarMoedaReal(ppop.getValorPrestacao()));

									numeroPrestacoesStr = Integer.toString(ppop.getNumeroPrestacoes() + 1);

									valorPrestacaoStr = simboloMoeda + Util.formatarMoedaReal(ppop.getValorPrestacao());
								}

								detailHelper.setCondicoesPagamento(condicaoPagamento);

								detailHelper.setValorEntrada(valorEntradaStr);

								detailHelper.setNumeroPrestacoes(numeroPrestacoesStr);

								detailHelper.setValorPrestacao(valorPrestacaoStr);

								// texto Proposto Negociacao
								detailHelper.setTextoPropostoNegociacao("Matrícula: " + ppop.getId() + " - Proposta de negociação");

								// obtendo o codigo de barras
								BigDecimal valorCodBarras = BigDecimal.ZERO;

								if(ppop.getNumeroPrestacoes() == 1 && ppop.getValorPrestacao().equals(BigDecimal.ZERO)){
									valorCodBarras = valorTotalOpcaoParcelamentoAPagar;
								}else{
									valorCodBarras = ppop.getValorEntrada().compareTo(BigDecimal.ZERO) == 0 ? ppop.getValorPrestacao()
													: ppop.getValorEntrada();
								}

								String representacaoNumericaCodBarra = getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
												Integer.valueOf(PagamentoTipo.PAGAMENTO_TIPO_COBANCA_PRE_PARCELAMENTO), valorCodBarras,
												cobrancaDocumento.getImovel().getLocalidade().getId(),
												cobrancaDocumento.getImovel().getId(), null, null, null, null,
												cobrancaDocumento.getNumeroSequenciaDocumento() + "",
												cobrancaDocumento.getDocumentoTipo().getId(), null, null, null, ppop.getId(), null, null);

								String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + "-"
												+ representacaoNumericaCodBarra.substring(11, 12) + " "
												+ representacaoNumericaCodBarra.substring(12, 23) + "-"
												+ representacaoNumericaCodBarra.substring(23, 24) + " "
												+ representacaoNumericaCodBarra.substring(24, 35) + "-"
												+ representacaoNumericaCodBarra.substring(35, 36) + " "
												+ representacaoNumericaCodBarra.substring(36, 47) + "-"
												+ representacaoNumericaCodBarra.substring(47, 48);

								detailHelper.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);

								String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
												+ representacaoNumericaCodBarra.substring(12, 23)
												+ representacaoNumericaCodBarra.substring(24, 35)
												+ representacaoNumericaCodBarra.substring(36, 47);

								detailHelper.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);

								// adiciona o detail ao helper
								opcoesParcelamento.add(detailHelper);
							} // fim do loop em PreParcelamentoOpção

							// adiciona o helper de opções de parcelamento(detail) ao helper de
							// PréParcelamento(master)
							emitirCartaOpcaoParcelamentoHelper.setOpcoesDeParcelamento(opcoesParcelamento);

							colecaoEmitirCartaOpcaoParcelamentoHelper.add(emitirCartaOpcaoParcelamentoHelper);
						}
					}

				} // fim if(cobrancaDocumento != null)
			} // fim do loop em cobrançaDocumento(PreParcelamento)
		}

		return colecaoEmitirCartaOpcaoParcelamentoHelper;
	}

	/**
	 * Retorna o valor de controladorLocalidade
	 * 
	 * @return O valor de controladorLocalidade
	 */
	protected ControladorLocalidadeLocal getControladorLocalidade(){

		ControladorLocalidadeLocalHome localHome = null;
		ControladorLocalidadeLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLocalidadeLocalHome) locator.getLocalHome(ConstantesJNDI.CONTROLADOR_LOCALIDADE_SEJB);

			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * Método extrado da classe GerarRelatorioExtratoDebitoAction
	 */
	public RelatorioExtratoDebito obterRelatorioExtratoDebito(ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper, Imovel imovel,
					BigDecimal valorDebitosACobrar, BigDecimal valorAcrescimosImpontualidade, BigDecimal valorCreditos,
					BigDecimal valorDesconto, BigDecimal valorDocumento, Usuario usuario, String inscricao, String nomeUsuario,
					String matricula, String enderecoImovel, String quantidadeParcelas, String mensagemPagamentoAVista, 
					String quantidadeParcelasDebitos, Integer quantidadeDebitoACobrar, Integer quantidadeParcelamento) throws ControladorException{

		CobrancaDocumento documentoCobranca = extratoDebitoRelatorioHelper.getDocumentoCobranca();

		// Linha 1
		String nomeLocalidade = documentoCobranca.getLocalidade().getDescricao();

		// Linha 3
		String seqDocCobranca = "" + documentoCobranca.getNumeroSequenciaDocumento();

		// Linha 4
		String situacaoAgua = "" + documentoCobranca.getImovel().getLigacaoAguaSituacao().getId();
		String situacaoEsgoto = "" + documentoCobranca.getImovel().getLigacaoEsgotoSituacao().getId();
		String qtdResidencial = "";
		String qtdComercial = "";
		String qtdIndustrial = "";
		String qtdPublico = "";
		String descPerfilImovel = documentoCobranca.getImovelPerfil().getDescricao();
		String dataEmissao = Util.formatarData(documentoCobranca.getEmissao());

		// Obter Quantidade de economias por categoria
		Collection<Categoria> colecaoCategorias = this.getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

		if(!Util.isVazioOrNulo(colecaoCategorias)){
			for(Categoria categoria : colecaoCategorias){
				if(categoria.getId().equals(Categoria.RESIDENCIAL)){
					qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
				}else if(categoria.getId().equals(Categoria.COMERCIAL)){
					qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
				}else if(categoria.getId().equals(Categoria.INDUSTRIAL)){
					qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
				}else if(categoria.getId().equals(Categoria.PUBLICO)){
					qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
				}
			}
		}

		// linhas 7 , 8, 9 e 10
		BigDecimal valorTotalContas = BigDecimal.ZERO;
		BigDecimal valorServicosAtualizacoes = BigDecimal.ZERO;

		String valorTotalContasString = "";
		String valorServicosAtualizacoesString = "";
		String valorDescontoString = "";
		String valorTotalString = "";

		valorTotalContas = extratoDebitoRelatorioHelper.getValorTotalConta();
		valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		valorServicosAtualizacoes = valorAcrescimosImpontualidade.add(extratoDebitoRelatorioHelper.getValorTotalGuiaPagamento().add(
						valorDebitosACobrar));

		valorTotalContasString = Util.formatarMoedaReal(valorTotalContas);

		valorServicosAtualizacoesString = Util.formatarMoedaReal(valorServicosAtualizacoes);

		if(valorCreditos != null && valorDesconto != null
						&& (valorCreditos.compareTo(BigDecimal.ZERO) > 0 || valorCreditos.compareTo(BigDecimal.ZERO) == 0)
						&& (valorDesconto.compareTo(BigDecimal.ZERO) > 0 || valorDesconto.compareTo(BigDecimal.ZERO) == 0)){
			valorDescontoString = Util.formatarMoedaReal(valorCreditos.add(valorDesconto));
		}

		valorTotalString = Util.formatarMoedaReal(valorDocumento);

		// Parte que vai mandar o relatório para a tela
		// cria uma instância da classe do relatório
		RelatorioExtratoDebito relatorioExtratoDebito = new RelatorioExtratoDebito(usuario);

		// Linha 1
		relatorioExtratoDebito.addParametro("nomeLocalidade", nomeLocalidade);

		// Linha 2
		relatorioExtratoDebito.addParametro("inscricao", inscricao);
		relatorioExtratoDebito.addParametro("nomeUsuario", nomeUsuario);
		relatorioExtratoDebito.addParametro("matricula", matricula);

		// Linha 3
		relatorioExtratoDebito.addParametro("enderecoImovel", enderecoImovel);
		relatorioExtratoDebito.addParametro("seqDocCobranca", seqDocCobranca);

		// Linha 4
		relatorioExtratoDebito.addParametro("situacaoAgua", situacaoAgua);
		relatorioExtratoDebito.addParametro("situacaoEsgoto", situacaoEsgoto);
		relatorioExtratoDebito.addParametro("qtdResidencial", qtdResidencial);
		relatorioExtratoDebito.addParametro("qtdComercial", qtdComercial);
		relatorioExtratoDebito.addParametro("qtdIndustrial", qtdIndustrial);
		relatorioExtratoDebito.addParametro("qtdPublico", qtdPublico);
		relatorioExtratoDebito.addParametro("descPerfilImovel", descPerfilImovel);
		relatorioExtratoDebito.addParametro("dataEmissao", dataEmissao);

		// linhas 7 , 8, 9 e 10
		relatorioExtratoDebito.addParametro("quantidadeParcelas", quantidadeParcelas);
		relatorioExtratoDebito.addParametro("quantidadeParcelasDebitos", quantidadeParcelasDebitos);
		relatorioExtratoDebito.addParametro("quantidadeDebitoACobrar", quantidadeDebitoACobrar);
		relatorioExtratoDebito.addParametro("quantidadeParcelamento", quantidadeParcelamento);
		
		relatorioExtratoDebito.addParametro("valorTotalContas", valorTotalContasString);
		relatorioExtratoDebito.addParametro("valorServicosAtualizacoes", valorServicosAtualizacoesString);
		relatorioExtratoDebito.addParametro("valorDesconto", valorDescontoString);
		relatorioExtratoDebito.addParametro("valorTotalComDesconto", valorTotalString);

		// Linha 11
		String representacaoNumericaCodBarra = "";

		// [UC0229] Obtém a representação numérica do código de barra
		representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(5, valorDocumento,
						documentoCobranca.getLocalidade().getId(), imovel.getId(), null, null, null, null, seqDocCobranca,
						documentoCobranca.getDocumentoTipo().getId(), null, null, null, null, null, null);

		// Formata a representação númerica do código de barras
		String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + "-"
						+ representacaoNumericaCodBarra.substring(11, 12) + " " + representacaoNumericaCodBarra.substring(12, 23) + "-"
						+ representacaoNumericaCodBarra.substring(23, 24) + " " + representacaoNumericaCodBarra.substring(24, 35) + "-"
						+ representacaoNumericaCodBarra.substring(35, 36) + " " + representacaoNumericaCodBarra.substring(36, 47) + "-"
						+ representacaoNumericaCodBarra.substring(47, 48);

		relatorioExtratoDebito.addParametro("representacaoNumericaCodBarra", representacaoNumericaCodBarraFormatada);

		String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
						+ representacaoNumericaCodBarra.substring(12, 23) + representacaoNumericaCodBarra.substring(24, 35)
						+ representacaoNumericaCodBarra.substring(36, 47);

		relatorioExtratoDebito.addParametro("representacaoNumericaCodBarraSemDigito", representacaoNumericaCodBarraSemDigito);

		relatorioExtratoDebito.addParametro("valorAcrescimosImpontualidade", valorAcrescimosImpontualidade);
		relatorioExtratoDebito.addParametro("extratoDebitoRelatorioHelper", extratoDebitoRelatorioHelper);

		String codigoRotaESequencialRota = this.getControladorMicromedicao().obterRotaESequencialRotaDoImovel(imovel.getId());
		relatorioExtratoDebito.addParametro("codigoRotaESequencialRota", codigoRotaESequencialRota);

		relatorioExtratoDebito.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);

		relatorioExtratoDebito.addParametro("mensagemPagamentoAVista", mensagemPagamentoAVista);

		return relatorioExtratoDebito;
	}

	/**
	 * Pesquisar Quantidade de Ítens Pagos
	 * 
	 * @author Hebert Falcão
	 * @date 19/12/2011
	 */
	public Integer pesquisarQuantidadeDeItensPagos(Integer idCobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarQuantidadeDeItensPagos(idCobrancaDocumento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public void atualizarCobrancaDocumento(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		// [UC3044] Informar Entrega/Devolução de Documentos de Cobrança
		// Atualização realizada por outro usuário
		FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
		filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));

		Collection colecaoCobrancaDocumentoBase = getControladorUtil()
						.pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());

		if(colecaoCobrancaDocumentoBase == null || colecaoCobrancaDocumentoBase.isEmpty()){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		CobrancaDocumento cobrancaDocumentoBase = (CobrancaDocumento) colecaoCobrancaDocumentoBase.iterator().next();

		if(cobrancaDocumentoBase.getUltimaAlteracao().after(cobrancaDocumento.getUltimaAlteracao())){
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		cobrancaDocumento.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(cobrancaDocumento);
		/*
		 * [OC790655][UC3044][SB0001.1.3]: 1.3. Caso o tipo de documento da ação de
		 * cobrança tenha a indicação de geração de dados no histórico de manutenção da ligação de
		 * água do imóvel (DOTP_ICGERARHISTORICOIMOVEL com o valor 1 (sim) na tabela DOCUMENTO_TIPO
		 * com DOTP_ID=DOTP_ID da tabela COBRANCA_DOCUMENTO), o sistema indica a entrega/devolução
		 * do documento - atualiza a tabela HISTORICO_MANUTENCAO_LIGACAO
		 */

		FiltroDocumentoTipo filtroDocumentoTipo = new FiltroDocumentoTipo();
		filtroDocumentoTipo.adicionarParametro(new ParametroSimples(FiltroDocumentoTipo.ID, cobrancaDocumento.getDocumentoTipo().getId()));
		DocumentoTipo documentoTipo = (DocumentoTipo) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroDocumentoTipo,
						DocumentoTipo.class.getName()));
		if(ConstantesSistema.SIM.equals(documentoTipo.getIndicadorGerarHistoricoImovel())){
			getControladorLigacaoAgua().atualizarHistoricoManutencaoLigacao(cobrancaDocumento,
							HistoricoManutencaoLigacao.INFORMAR_ENTREGA_DEVOLUCAO_DOCUMENTOS);
		}
	}

	/**
	 * [UC3031] Efetuar Negociação de Débitos
	 * 
	 * @author Hebert Falcão
	 * @date 11/12/2011
	 */
	public void efetuarNegociacaoDeDebitos(Integer idImovel, Integer idClienteUsuario, Short indicadorPessoaFisicaJuridica,
					String cpfCnpjCliente, String emailCliente, Usuario usuarioLogado, Short negociacaoQuantidadeParcelas,
					BigDecimal negociacaoValorParcela, BigDecimal negociacaoValorEntrada, BigDecimal negociacaoValorDebitoAposDesconto,
					String negociacaoIndicadorPagamentoCartaoCredito, Collection<ContaValoresHelper> colecaoContaValores,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, BigDecimal valorAcrescimosImpontualidade,
					BigDecimal valorTotalRestanteServicosACobrar, BigDecimal valorTotalRestanteParcelamentosACobrar,
					BigDecimal valorDesconto, BigDecimal valorCreditos, String inscricaoImovel, String enderecoImovel,
					NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamento, BigDecimal valorTotalConta, BigDecimal valorTotalGuia,
					BigDecimal valorTotalAtualizacaoMonetaria, BigDecimal valorTotalJurosMora, BigDecimal valorTotalMulta,
					BigDecimal valorDebitoTotalAtualizado, BigDecimal negociacaoValorDescontoAntiguidade,
					BigDecimal negociacaoValorDescontoInatividade, Integer negociacaoNumeroMesesEntreParcelas,
					Integer negociacaoNumeroParcelasALancar, Integer negociacaoNumeroMesesInicioCobranca,
					Integer negociacaoNumeroDiasVencimentoDaEntrada, BigDecimal negociacaoTaxaJuros, Integer negociacaoIdRD)
					throws ControladorException{

		// Campos obrigatórios
		if(Util.isVazioOuBranco(idImovel)){
			throw new ControladorException("atencao.required", null, "Imóvel");
		}

		if(Util.isVazioOuBranco(idClienteUsuario)){
			throw new ControladorException("atencao.required", null, "Cliente Usuário");
		}

		if(Util.isVazioOuBranco(cpfCnpjCliente)){
			throw new ControladorException("atencao.required", null, "CPF/CNPJ");
		}

		if(Util.isVazioOuBranco(emailCliente)){
			throw new ControladorException("atencao.required", null, "E-mail");
		}

		if(negociacaoValorEntrada.compareTo(BigDecimal.ZERO) == 0 && !negociacaoQuantidadeParcelas.equals(new Short("0"))){
			throw new ControladorException("atencao.negociacao.sem.entrada");
		}

		// Cliente Usuário
		Cliente clienteUsuario = null;
		String nomeCliente = "";

		FiltroCliente filtroCliente = new FiltroCliente();
		filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.ID, idClienteUsuario));
		filtroCliente.adicionarCaminhoParaCarregamentoEntidade(FiltroCliente.UNIDADE_FEDERACAO);
		filtroCliente.adicionarCaminhoParaCarregamentoEntidade(FiltroCliente.ORGAO_EXPEDIDOR_RG);

		Collection<Cliente> colecaoCliente = this.getControladorUtil().pesquisar(filtroCliente, Cliente.class.getName());

		if(!Util.isVazioOrNulo(colecaoCliente)){
			boolean atualizarCliente = false;

			clienteUsuario = (Cliente) Util.retonarObjetoDeColecao(colecaoCliente);

			nomeCliente = clienteUsuario.getNome();

			if(ClienteTipo.INDICADOR_PESSOA_FISICA.equals(indicadorPessoaFisicaJuridica)){
				String cpfAtualCliente = clienteUsuario.getCpf();

				if(Util.isVazioOuBranco(cpfAtualCliente) || !cpfAtualCliente.equals(cpfCnpjCliente)){
					atualizarCliente = true;
					clienteUsuario.setCpf(cpfCnpjCliente);
				}
			}else{
				String cnpjAtualCliente = clienteUsuario.getCnpj();

				if(Util.isVazioOuBranco(cnpjAtualCliente) || !cnpjAtualCliente.equals(cpfCnpjCliente)){
					atualizarCliente = true;
					clienteUsuario.setCnpj(cpfCnpjCliente);
				}
			}

			String emailAtualCliente = clienteUsuario.getEmail();

			if(Util.isVazioOuBranco(emailAtualCliente) || !emailAtualCliente.equals(emailCliente)){
				atualizarCliente = true;
				clienteUsuario.setEmail(emailCliente);
			}

			if(atualizarCliente){
				clienteUsuario.setUltimaAlteracao(new Date());

				this.getControladorUtil().atualizar(clienteUsuario);
			}
		}else{
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		// Imóvel
		Imovel imovel = getControladorImovel().pesquisarImovel(idImovel);

		if(imovel == null){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		CobrancaDocumento cobrancaDocumento = null;
		PreParcelamento preParcelamento = null;

		// Data vencimento da entrada
		Date dataVencimentoEntrada = negociacaoOpcoesParcelamento.getDataVencimentoEntrada();

		// Registro de atendimento

		Integer idRegistroAtendimento = this.inserirRegistroAtendimentoNegociacao(usuarioLogado, clienteUsuario, imovel,
						negociacaoQuantidadeParcelas, negociacaoValorParcela, negociacaoValorEntrada, negociacaoValorDebitoAposDesconto,
						valorDebitoTotalAtualizado);

		RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		registroAtendimento.setId(idRegistroAtendimento);

		byte[] relatorioGerado = null;

		if(negociacaoQuantidadeParcelas.equals(Short.parseShort("0"))){
			// Extrato de débito

			if(!Util.isVazioOrNulo(colecaoContaValores)){
				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores.iterator();

				ContaValoresHelper contaValoresHelper = null;
				Integer indicadorContasDebito = null;

				while(colecaoContaValoresIterator.hasNext()){
					contaValoresHelper = colecaoContaValoresIterator.next();

					indicadorContasDebito = contaValoresHelper.getIndicadorContasDebito();

					if(indicadorContasDebito != null && indicadorContasDebito.equals(2)){
						colecaoContaValoresIterator.remove();
					}
				}
			}

			Short indicadorGeracaoTaxaCobranca = Short.parseShort("2");

			colecaoDebitoACobrar = this.obterColecaoDebitosACobrarDoParcelamento(colecaoDebitoACobrar);

			if(!Util.isVazioOuBranco(negociacaoIndicadorPagamentoCartaoCredito)){
				negociacaoOpcoesParcelamento.setInPagamentoCartaoCredito(negociacaoIndicadorPagamentoCartaoCredito);
				negociacaoOpcoesParcelamento.setUsuarioLogado(usuarioLogado);
			}

			ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this.gerarEmitirExtratoDebito(imovel, indicadorGeracaoTaxaCobranca,
							colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar, valorAcrescimosImpontualidade,
							valorDesconto, negociacaoValorDebitoAposDesconto, colecaoCreditoARealizar, null, negociacaoOpcoesParcelamento,
							null);

			cobrancaDocumento = extratoDebitoRelatorioHelper.getDocumentoCobranca();

			RelatorioExtratoDebito relatorioExtratoDebito = this.obterRelatorioExtratoDebito(extratoDebitoRelatorioHelper, imovel,
							valorTotalRestanteServicosACobrar.add(valorTotalRestanteParcelamentosACobrar), valorAcrescimosImpontualidade,
							valorCreditos, valorDesconto, negociacaoValorDebitoAposDesconto, usuarioLogado, inscricaoImovel,
							nomeCliente, idImovel.toString(), enderecoImovel, negociacaoQuantidadeParcelas.toString(), null, null, null, null);

			relatorioGerado = (byte[]) relatorioExtratoDebito.executar();
		}else{
			// Carta com opções de parcelamento

			DocumentoTipo documentoTipo = new DocumentoTipo(DocumentoTipo.CARTA_OPCAO_PARCELAMENTO);

			DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
			documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

			BigDecimal valorDocumento = valorDebitoTotalAtualizado.subtract(valorAcrescimosImpontualidade);

			CobrancaDocumento cobrancaDocumentoPrep = this.inserirCobrancaDocumentoEItens(imovel, colecaoContaValores,
							colecaoGuiaPagamentoValores, colecaoDebitoACobrar, valorAcrescimosImpontualidade, valorDesconto,
							documentoEmissaoForma, documentoTipo, null, null, null, null, null, valorDocumento, new Date(),
							colecaoCreditoARealizar, clienteUsuario, negociacaoOpcoesParcelamento, null);

			// Atualiza o número do sequencial do documento com o código do documento de cobrança
			// gerado
			Integer idCobrancaDocumentoPrep = cobrancaDocumentoPrep.getId();
			cobrancaDocumentoPrep.setNumeroSequenciaDocumento(idCobrancaDocumentoPrep);
			getControladorUtil().atualizar(cobrancaDocumentoPrep);

			Short indicadorEmissaoContaRevisao = new Short("2");
			Short indicadorConsideraGuiaPagamento = new Short("1");
			Short indicadorAcrescimoImpontualidade = new Short("1");
			Short indicadorCobrancaDebACobrar = new Short("1");
			Short indicadorConsideraCreditoRealizar = new Short("1");

			preParcelamento = this.inserirPreParcelamento(cobrancaDocumentoPrep, valorTotalConta, valorAcrescimosImpontualidade,
							valorTotalRestanteServicosACobrar, valorTotalRestanteParcelamentosACobrar, valorTotalGuia, valorCreditos,
							valorTotalAtualizacaoMonetaria, valorTotalJurosMora, valorTotalMulta, valorDebitoTotalAtualizado,
							negociacaoValorDescontoAntiguidade, negociacaoValorDescontoInatividade, indicadorEmissaoContaRevisao,
							indicadorConsideraGuiaPagamento, indicadorAcrescimoImpontualidade, indicadorCobrancaDebACobrar,
							indicadorConsideraCreditoRealizar);

			this.inserirPreParcelamentoOpcaoNegociacao(negociacaoQuantidadeParcelas, negociacaoValorParcela, negociacaoValorEntrada,
							negociacaoOpcoesParcelamento, valorDebitoTotalAtualizado, negociacaoValorDescontoAntiguidade,
							negociacaoNumeroMesesEntreParcelas, negociacaoNumeroParcelasALancar, negociacaoNumeroMesesInicioCobranca,
							negociacaoNumeroDiasVencimentoDaEntrada, negociacaoTaxaJuros, negociacaoIdRD, preParcelamento);

			Collection<CobrancaDocumento> colecaoCobrancaDocumentoPrep = new ArrayList();
			colecaoCobrancaDocumentoPrep.add(cobrancaDocumentoPrep);

			List<Object> colecaoEmitirCartaOpcaoParcelamentoHelper = this
							.obterColecaoEmitirCartaOpcaoParcelamentoHelper(colecaoCobrancaDocumentoPrep);

			if(!Util.isVazioOrNulo(colecaoEmitirCartaOpcaoParcelamentoHelper)){
				RelatorioCartaOpcaoParcelamento relatorioCarta = new RelatorioCartaOpcaoParcelamento(null);
				relatorioCarta.addParametro("colecaoEmitirCartaOpcaoParcelamentoHelper", colecaoEmitirCartaOpcaoParcelamentoHelper);
				relatorioCarta.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
				relatorioCarta.addParametro("exibirMensagemComprovante", false);
				relatorioCarta.addParametro("formatoArquivo", TarefaRelatorio.TIPO_PDF);

				relatorioGerado = (byte[]) relatorioCarta.executar();
			}
		}

		// Negociação
		CobrancaNegociacaoAtendimento cobrancaNegociacaoAtendimento = new CobrancaNegociacaoAtendimento();
		cobrancaNegociacaoAtendimento.setCobrancaDocumento(cobrancaDocumento);
		cobrancaNegociacaoAtendimento.setPreParcelamento(preParcelamento);
		cobrancaNegociacaoAtendimento.setImovel(imovel);
		cobrancaNegociacaoAtendimento.setRegistroAtendimento(registroAtendimento);

		if(ClienteTipo.INDICADOR_PESSOA_FISICA.equals(indicadorPessoaFisicaJuridica)){
			cobrancaNegociacaoAtendimento.setNumeroCnpj(null);
			cobrancaNegociacaoAtendimento.setNumeroCpf(cpfCnpjCliente);
		}else{
			cobrancaNegociacaoAtendimento.setNumeroCnpj(cpfCnpjCliente);
			cobrancaNegociacaoAtendimento.setNumeroCpf(null);
		}

		cobrancaNegociacaoAtendimento.setEmail(emailCliente);
		cobrancaNegociacaoAtendimento.setDataVencimento(dataVencimentoEntrada);
		cobrancaNegociacaoAtendimento.setUltimaAlteracao(new Date());

		getControladorUtil().inserir(cobrancaNegociacaoAtendimento);

		// Enviar negociação por e-mail
		this.enviarEmailCobrancaNegociacaoAtendimento(emailCliente, relatorioGerado, idRegistroAtendimento);
	}

	/**
	 * Inserir Registro de Atendimento de uma negociação de débito
	 * [UC3031] Efetuar Negociação de Débitos
	 * 
	 * @author Hebert Falcão
	 * @date 11/12/2011
	 */
	private Integer inserirRegistroAtendimentoNegociacao(Usuario usuarioLogado, Cliente clienteUsuario, Imovel imovel,
					Short negociacaoQuantidadeParcelas, BigDecimal negociacaoValorParcela, BigDecimal negociacaoValorEntrada,
					BigDecimal negociacaoValorDebitoAposDesconto, BigDecimal valorDebitoTotalAtualizado) throws ControladorException{

		Date dataHoraAtual = new Date();

		// Solicitação Tipo Especificação
		Integer idSolicitacaoTipoEspecificacao = Util
						.converterStringParaInteger((String) ParametroCobranca.P_ESPECIFICACAO_NEGOCIACAO_DEBITOS.executar());

		FiltroSolicitacaoTipoEspecificacao filtroSolicitacaoTipoEspecificacao = new FiltroSolicitacaoTipoEspecificacao();
		filtroSolicitacaoTipoEspecificacao.adicionarParametro(new ParametroSimples(FiltroSolicitacaoTipoEspecificacao.ID,
						idSolicitacaoTipoEspecificacao));

		Collection<SolicitacaoTipoEspecificacao> colecaoSolicitacaoTipoEspecificacao = this.getControladorUtil().pesquisar(
						filtroSolicitacaoTipoEspecificacao, SolicitacaoTipoEspecificacao.class.getName());

		if(Util.isVazioOrNulo(colecaoSolicitacaoTipoEspecificacao)){
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		SolicitacaoTipoEspecificacao solicitacaoTipoEspecificacao = (SolicitacaoTipoEspecificacao) Util
						.retonarObjetoDeColecao(colecaoSolicitacaoTipoEspecificacao);
		SolicitacaoTipo solicitacaoTipo = solicitacaoTipoEspecificacao.getSolicitacaoTipo();

		short indicadorAtendimentoOnLine = 1;

		String dataAtendimento = Util.formatarData(dataHoraAtual);

		String horaAtendimento = Util.formatarHoraSemData(dataHoraAtual);

		String tempoEsperaInicial = null;

		String tempoEsperaFinal = null;

		Integer idMeioSolicitacao = 6;

		Integer senhaAtendimento = null;

		Integer horasPrazo = solicitacaoTipoEspecificacao.getHorasPrazo();
		Date dataCalculada = Util.adicionarNumeroHorasAUmaData(dataHoraAtual, horasPrazo);
		String dataPrevista = Util.formatarDataComHora(dataCalculada);

		StringBuffer observacaoAux = new StringBuffer();
		observacaoAux.append("Valor do Debito Atualizado: " + Util.formatarMoedaReal(valorDebitoTotalAtualizado) + ". ");
		observacaoAux.append("Valor da Entrada: " + Util.formatarMoedaReal(negociacaoValorEntrada) + ". ");
		observacaoAux.append("Parcelas: " + negociacaoQuantidadeParcelas + ". ");
		observacaoAux.append("Valor da Parcela: " + Util.formatarMoedaReal(negociacaoValorParcela) + ". ");

		String observacao = observacaoAux.toString();

		Integer idImovel = imovel.getId();

		String descricaoLocalOcorrencia = null;

		Integer idSolicitacaoTipo = solicitacaoTipo.getId();

		Imovel imovelParaEndereco = this.getControladorEndereco().pesquisarImovelParaEndereco(idImovel);
		Collection colecaoEndereco = new ArrayList();
		colecaoEndereco.add(imovelParaEndereco);

		String pontoReferenciaLocalOcorrencia = null;

		Integer idBairroArea = null;

		Integer idLocalidade = null;
		Localidade localidade = imovel.getLocalidade();
		if(localidade != null){
			idLocalidade = localidade.getId();
		}

		Integer idSetorComercial = null;
		SetorComercial setorComercial = imovel.getSetorComercial();
		if(setorComercial != null){
			idSetorComercial = setorComercial.getId();
		}

		Quadra quadra = imovel.getQuadra();
		Integer idQuadra = quadra.getId();

		Integer idDivisaoEsgoto = null;

		Integer idLocalOcorrencia = null;

		Integer idPavimentoRua = null;

		Integer idPavimentoCalcada = null;

		Integer idUnidadeAtendimento = null;
		UnidadeOrganizacional unidadeAtendimento = usuarioLogado.getUnidadeOrganizacional();
		if(unidadeAtendimento != null){
			idUnidadeAtendimento = unidadeAtendimento.getId();
		}

		Integer idUsuarioLogado = usuarioLogado.getId();

		Integer idCliente = clienteUsuario.getId();

		String pontoReferenciaSolicitante = null;

		String nomeSolicitante = clienteUsuario.getNome();

		boolean novoSolicitante = false;

		Integer idUnidadeSolicitante = null;

		Integer idFuncionario = null;
		Funcionario funcionario = usuarioLogado.getFuncionario();

		if(funcionario != null){
			idFuncionario = funcionario.getId();
		}

		Collection colecaoFone = this.getControladorCliente().pesquisarClienteFone(idCliente);

		Collection colecaoEnderecoSolicitante = this.getControladorCliente().pesquisarEnderecoCliente(idCliente);

		EspecificacaoTramite especificacaoTramite = new EspecificacaoTramite();
		especificacaoTramite.setSolicitacaoTipoEspecificacao(solicitacaoTipoEspecificacao);

		Integer idUnidadeDestino = null;

		Collection<UnidadeOrganizacional> colecaoUnidadeOrganizacional = this.getControladorRegistroAtendimento()
						.obterUnidadeDestinoPorEspecificacao(especificacaoTramite);

		if(!Util.isVazioOrNulo(colecaoUnidadeOrganizacional)){
			UnidadeOrganizacional unidadeDestino = (UnidadeOrganizacional) Util.retonarObjetoDeColecao(colecaoUnidadeOrganizacional);
			idUnidadeDestino = unidadeDestino.getId();
		}

		String parecerUnidadeDestino = null;

		Collection<Integer> colecaoIdServicoTipo = null;

		String numeroRAManual = null;

		Integer idRAJAGerado = null;

		BigDecimal coordenadaNorte = null;

		BigDecimal coordenadaLeste = null;

		Integer sequenceRA = getControladorRegistroAtendimento().obterSequenceRA();

		Integer idRaReiterada = null;

		String tipoCliente = "";
		ClienteTipo clienteTipo = clienteUsuario.getClienteTipo();
		if(clienteTipo != null){
			tipoCliente = Integer.toString(clienteTipo.getId());
		}

		String numeroCpf = clienteUsuario.getCpf();

		String numeroRg = clienteUsuario.getRg();

		String orgaoExpedidorRg = "";
		OrgaoExpedidorRg orgaoExpedidor = clienteUsuario.getOrgaoExpedidorRg();
		if(orgaoExpedidor != null){
			orgaoExpedidorRg = orgaoExpedidor.getDescricaoAbreviada();
		}

		String unidadeFederacaoRG = "";
		UnidadeFederacao unidadeFederacao = clienteUsuario.getUnidadeFederacao();
		if(unidadeFederacao != null){
			unidadeFederacaoRG = unidadeFederacao.getSigla();
		}

		String numeroCnpj = clienteUsuario.getCnpj();

		Collection<Conta> colecaoContas = null;

		String identificadores = null;

		ContaMotivoRevisao contaMotivoRevisao = null;

		// Campos inseridos através da tela na funcionalidade Inserir RA
		String indicadorProcessoAdmJud = ConstantesSistema.NAO.toString();
		String numeroProcessoAgencia = null;

		Integer[] idRegistroAtendimento = this.getControladorRegistroAtendimento().inserirRegistroAtendimento(indicadorAtendimentoOnLine,
						dataAtendimento, horaAtendimento, tempoEsperaInicial, tempoEsperaFinal, idMeioSolicitacao, senhaAtendimento,
						idSolicitacaoTipoEspecificacao, dataPrevista, observacao, idImovel, descricaoLocalOcorrencia, idSolicitacaoTipo,
						colecaoEndereco, pontoReferenciaLocalOcorrencia, idBairroArea, idLocalidade, idSetorComercial, idQuadra,
						idDivisaoEsgoto, idLocalOcorrencia, idPavimentoRua, idPavimentoCalcada, idUnidadeAtendimento, idUsuarioLogado,
						idCliente, pontoReferenciaSolicitante, nomeSolicitante, novoSolicitante, idUnidadeSolicitante, idFuncionario,
						colecaoFone, colecaoEnderecoSolicitante, idUnidadeDestino, parecerUnidadeDestino, colecaoIdServicoTipo,
						numeroRAManual, idRAJAGerado, coordenadaNorte, coordenadaLeste, sequenceRA, idRaReiterada, tipoCliente, numeroCpf,
						numeroRg, orgaoExpedidorRg, unidadeFederacaoRG, numeroCnpj, colecaoContas, identificadores, contaMotivoRevisao,
						indicadorProcessoAdmJud, numeroProcessoAgencia);

		return idRegistroAtendimento[0];
	}

	/**
	 * Inserir Pre-parcelamento Opção de uma negociação de débito
	 * [UC3031] Efetuar Negociação de Débitos
	 * 
	 * @author Hebert Falcão
	 * @date 11/12/2011
	 */
	private void inserirPreParcelamentoOpcaoNegociacao(Short negociacaoQuantidadeParcelas, BigDecimal negociacaoValorParcela,
					BigDecimal negociacaoValorEntrada, NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamento,
					BigDecimal valorDebitoTotalAtualizado, BigDecimal negociacaoValorDescontoAntiguidade,
					Integer negociacaoNumeroMesesEntreParcelas, Integer negociacaoNumeroParcelasALancar,
					Integer negociacaoNumeroMesesInicioCobranca, Integer negociacaoNumeroDiasVencimentoDaEntrada,
					BigDecimal negociacaoTaxaJuros, Integer negociacaoIdRD, PreParcelamento preParcelamento) throws ControladorException{

		PreParcelamentoOpcao preParcelamentoOpcao = new PreParcelamentoOpcao();
		preParcelamentoOpcao.setPreParcelamento(preParcelamento);
		preParcelamentoOpcao.setPosicaoOpcao(Short.parseShort("1"));

		preParcelamentoOpcao.setValorMulta(BigDecimal.ZERO);
		preParcelamentoOpcao.setValorAtualizacaoMonetaria(BigDecimal.ZERO);

		BigDecimal valorDescontoAcrecismosImpotualidade = negociacaoOpcoesParcelamento.getValorDescontoAcrecismosImpotualidade();
		preParcelamentoOpcao.setPercentualDescontoAcrescimoImpontualidade(valorDescontoAcrecismosImpotualidade);

		BigDecimal valorDescontoAntiguidade = negociacaoOpcoesParcelamento.getValorDescontoAntiguidade();
		preParcelamentoOpcao.setValorDescontosAcrescimosAntiguidade(valorDescontoAntiguidade);

		preParcelamentoOpcao.setValorDescontosAcrescimosImpontualidade(valorDescontoAcrecismosImpotualidade);

		BigDecimal valorDescontoInatividade = negociacaoOpcoesParcelamento.getValorDescontoInatividade();

		if(valorDescontoInatividade == null){
			valorDescontoInatividade = BigDecimal.ZERO;
		}

		preParcelamentoOpcao.setValorDescontosAcrescimosInatividade(valorDescontoInatividade);

		BigDecimal percentualDescontoAntiguidadeDebito = negociacaoOpcoesParcelamento.getPercentualDescontoAntiguidadeDebito();

		if(percentualDescontoAntiguidadeDebito == null){
			percentualDescontoAntiguidadeDebito = BigDecimal.ZERO;
		}

		preParcelamentoOpcao.setPercentualDescontoAntiguidade(percentualDescontoAntiguidadeDebito);

		BigDecimal percentualDescontoInatividadeLigacaoAgua = negociacaoOpcoesParcelamento.getPercentualDescontoInatividadeLigacaoAgua();

		if(percentualDescontoInatividadeLigacaoAgua == null){
			percentualDescontoInatividadeLigacaoAgua = BigDecimal.ZERO;
		}

		preParcelamentoOpcao.setPercentualDescontoInatividade(percentualDescontoInatividadeLigacaoAgua);

		BigDecimal valorDescontoSancoesRDEspecial = negociacaoOpcoesParcelamento.getValorDescontoSancoesRDEspecial();
		preParcelamentoOpcao.setValorDescontoSancoesRDEspecial(valorDescontoSancoesRDEspecial);

		BigDecimal valorDescontoTarifaSocialRDEspecial = negociacaoOpcoesParcelamento.getValorDescontoTarifaSocialRDEspecial();
		preParcelamentoOpcao.setValorDescontoTarifaSocialRDEspecial(valorDescontoTarifaSocialRDEspecial);

		preParcelamentoOpcao.setNumeroPrestacoes(negociacaoQuantidadeParcelas.intValue());
		preParcelamentoOpcao.setValorEntrada(negociacaoValorEntrada);
		preParcelamentoOpcao.setValorPrestacao(negociacaoValorParcela);
		preParcelamentoOpcao.setValorJurosMora(negociacaoTaxaJuros);

		BigDecimal negociacaoQuantidadeParcelasBD = new BigDecimal(negociacaoQuantidadeParcelas);
		BigDecimal valorJurosParcelamento = negociacaoValorParcela.multiply(negociacaoQuantidadeParcelasBD);
		valorJurosParcelamento = valorJurosParcelamento.add(negociacaoValorEntrada);
		valorJurosParcelamento = valorJurosParcelamento.add(negociacaoValorDescontoAntiguidade);
		valorJurosParcelamento = valorJurosParcelamento.subtract(valorDebitoTotalAtualizado);

		preParcelamentoOpcao.setValorJurosParcelamento(valorJurosParcelamento);

		preParcelamentoOpcao.setValorDebitoAtualizado(valorDebitoTotalAtualizado);
		preParcelamentoOpcao.setNumeroMesesEntreParcelas(negociacaoNumeroMesesEntreParcelas);
		preParcelamentoOpcao.setNumeroParcelasALancar(negociacaoNumeroParcelasALancar);
		preParcelamentoOpcao.setNumeroMesesInicioCobranca(negociacaoNumeroMesesInicioCobranca);
		preParcelamentoOpcao.setNumeroDiasVencimentoDaEntrada(negociacaoNumeroDiasVencimentoDaEntrada);

		ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
		resolucaoDiretoria.setId(negociacaoIdRD);

		ParcelamentoPerfil perfilParcelamento = this.obterPerfilParcelamento(preParcelamento.getImovel(), null, resolucaoDiretoria);
		preParcelamentoOpcao.setParcelamentoPerfil(perfilParcelamento);

		preParcelamentoOpcao.setUltimaAlteracao(new Date());

		getControladorUtil().inserir(preParcelamentoOpcao);
	}

	/**
	 * Método extraído da classe GerarRelatorioExtratoDebitoAction
	 * 
	 * @throws ControladorException
	 */
	public Collection obterColecaoDebitosACobrarDoParcelamento(Collection<DebitoACobrar> colecaoDebitosACobrar) throws ControladorException{

		Collection<DebitoACobrar> colecaoDebitosACobrarParcelamento = new ArrayList();

		if(!Util.isVazioOrNulo(colecaoDebitosACobrar)){
			DebitoTipo debitoTipo = null;
			Integer idDebitoTipo = null;

			FinanciamentoTipo financiamentoTipo = null;
			Integer idFinanciamentoTipo = null;

			Collection<Integer> tiposParcelamento = Util
							.converterStringParaColecaoInteger(ParametroParcelamento.P_FINANCIAMENTO_TIPO_PARCELAMENTO.executar());

			for(DebitoACobrar debitoACobrar : colecaoDebitosACobrar){
				debitoTipo = debitoACobrar.getDebitoTipo();
				idDebitoTipo = debitoTipo.getId();

				// Verificar existência de juros sobre imóvel
				if(idDebitoTipo != null && !idDebitoTipo.equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
					financiamentoTipo = debitoACobrar.getFinanciamentoTipo();
					idFinanciamentoTipo = financiamentoTipo.getId();

					// Debitos A Cobrar - Serviço
					if(idFinanciamentoTipo.equals(FinanciamentoTipo.SERVICO_NORMAL)){
						colecaoDebitosACobrarParcelamento.add(debitoACobrar);
					}

					// Debitos A Cobrar - Parcelamento
					if(tiposParcelamento != null && tiposParcelamento.contains(debitoACobrar.getFinanciamentoTipo().getId())){

						colecaoDebitosACobrarParcelamento.add(debitoACobrar);
					}
				}
			}
		}

		return colecaoDebitosACobrarParcelamento;
	}

	/**
	 * Método extraído do gerarDocumentoCobranca(...);
	 */
	private CobrancaDocumento inserirCobrancaDocumentoEItens(Imovel imovel, Collection<ContaValoresHelper> colecaoContas,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento, Collection<DebitoACobrar> colecaoDebitosACobrar,
					BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto, DocumentoEmissaoForma documentoEmissaoForma,
					DocumentoTipo documentoTipo, CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, Empresa empresa, CobrancaCriterio cobrancaCriterio,
					CobrancaAcao cobrancaAcao, BigDecimal valorDocumento, Date dataAtual,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Cliente cliente,
					NegociacaoOpcoesParcelamentoHelper opcoesParcelamento, Integer idFaturamentoGrupoCronogramaMensal)
					throws ControladorException{

		boolean possuiColecaoContas = !Util.isVazioOrNulo(colecaoContas);
		boolean possuiDebitosACobrar = !Util.isVazioOrNulo(colecaoDebitosACobrar);
		boolean possuiGuiasPagamento = !Util.isVazioOrNulo(colecaoGuiasPagamento);
		boolean possuiCreditoARealizar = !Util.isVazioOrNulo(colecaoCreditoARealizar);
		boolean possuiItens = (possuiColecaoContas || possuiDebitosACobrar || possuiGuiasPagamento || possuiCreditoARealizar);

		CobrancaDocumento documentoCobranca = this.inserirCobrancaDocumento(imovel, documentoTipo, cobrancaAcaoAtividadeComando,
						cobrancaAcaoAtividadeCronograma, empresa, valorDocumento, dataAtual, valorAcrescimosImpontualidade, valorDesconto,
						cobrancaCriterio, cobrancaAcao, cliente, documentoEmissaoForma, possuiItens, idFaturamentoGrupoCronogramaMensal,
						null);

		if(possuiColecaoContas){
			this.criarCobrancaDocumentoItemConta(documentoCobranca, colecaoContas, opcoesParcelamento, valorAcrescimosImpontualidade);
		}

		if(possuiDebitosACobrar){
			this.criarCobrancaDocumentoItemDebitoACobrar(documentoCobranca, colecaoDebitosACobrar, opcoesParcelamento,
							valorAcrescimosImpontualidade, documentoTipo);
		}

		if(possuiGuiasPagamento){
			this.criarCobrancaDocumentoItemGuiaPagamento(documentoCobranca, colecaoGuiasPagamento, opcoesParcelamento,
							valorAcrescimosImpontualidade);
		}

		if(possuiCreditoARealizar){
			this.criarCobrancaDocumentoItemCreditoARealizar(documentoCobranca, colecaoCreditoARealizar);
		}

		return documentoCobranca;
	}

	/**
	 * Método extraído do calcularOpcoesParcelamentoParaCartaComOpcoesParcelamento(...);
	 */
	private PreParcelamento inserirPreParcelamento(CobrancaDocumento documentoCobranca, BigDecimal valorTotalContas,
					BigDecimal valorTotalAcrescimoImpontualidade, BigDecimal valorTotalRestanteServicosACobrar,
					BigDecimal valorTotalRestanteParcelamentosACobrar, BigDecimal valorTotalGuiasPagamento,
					BigDecimal valorCreditoARealizar, BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora,
					BigDecimal valorMulta, BigDecimal debitoTotalAtualizado, BigDecimal valorDescontoAntiguidade,
					BigDecimal valorDescontoInatividade, Short indicadorEmissaoContaRevisao, Short indicadorConsideraGuiaPagamento,
					Short indicadorAcrescimoImpontualidade, Short indicadorCobrancaDebACobrar, Short indicadorConsideraCreditoRealizar)
					throws ControladorException{

		PreParcelamento preParcelamento = new PreParcelamento();

		preParcelamento.setDocumentoCobranca(documentoCobranca);
		preParcelamento.setPreParcelamento(new Date());

		ParcelamentoSituacao parcelamentoSituacao = new ParcelamentoSituacao();
		parcelamentoSituacao.setId(ParcelamentoSituacao.PRE_PARCELAMENTO);
		preParcelamento.setSituacaoParcelamento(parcelamentoSituacao);

		preParcelamento.setAnoMesReferenciaFaturamento(Util.getAnoMesComoInt(new Date()));
		preParcelamento.setValorConta(valorTotalContas);
		preParcelamento.setValorGuiaPapagamento(valorTotalGuiasPagamento);
		preParcelamento.setValorServicosACobrar(valorTotalRestanteServicosACobrar);
		preParcelamento.setValorParcelamentosACobrar(valorTotalRestanteParcelamentosACobrar);
		preParcelamento.setValorCreditoARealizar(valorCreditoARealizar);
		preParcelamento.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);
		preParcelamento.setValorJurosMora(valorJurosMora);
		preParcelamento.setValorMulta(valorMulta);
		preParcelamento.setValorDebitoAtualizado(debitoTotalAtualizado);
		preParcelamento.setValorDescontoAcrescimos(valorTotalAcrescimoImpontualidade);
		preParcelamento.setValorDescontoAntiguidade(valorDescontoAntiguidade);
		preParcelamento.setValorDescontoInatividade(valorDescontoInatividade);
		preParcelamento.setIndicadorRestabelecimento(new Short("2"));

		preParcelamento.setIndicadorContasRevisao(indicadorEmissaoContaRevisao);
		preParcelamento.setIndicadorGuiasPagamento(indicadorConsideraGuiaPagamento);
		preParcelamento.setIndicadorAcrescimosImpontualdade(indicadorAcrescimoImpontualidade);
		preParcelamento.setIndicadorDebitoACobrar(indicadorCobrancaDebACobrar);
		preParcelamento.setIndicadorCreditoARealizar(indicadorConsideraCreditoRealizar);

		preParcelamento.setUltimaAlteracao(new Date());

		Imovel imovel = documentoCobranca.getImovel();
		preParcelamento.setImovel(imovel);
		preParcelamento.setLigacaoAguaSituacao(imovel.getLigacaoAguaSituacao());
		preParcelamento.setLigacaoEsgotoSituacao(imovel.getLigacaoEsgotoSituacao());

		preParcelamento.setImovelPerfil(documentoCobranca.getImovelPerfil());
		preParcelamento.setRegistroAtendimento(null);
		preParcelamento.setFuncionario(null);
		preParcelamento.setLocalidade(documentoCobranca.getLocalidade());
		preParcelamento.setQuadra(documentoCobranca.getQuadra());
		preParcelamento.setCodigoSetorComercial(documentoCobranca.getCodigoSetorComercial());
		preParcelamento.setNumeroQuadra(documentoCobranca.getNumeroQuadra());

		CobrancaForma cobrancaForma = new CobrancaForma();
		cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
		preParcelamento.setCobrancaForma(cobrancaForma);

		preParcelamento.setIndicadorConfirmacaoParcelamento(new Short("2"));

		Integer idPreParcelamento = (Integer) getControladorUtil().inserir(preParcelamento);
		preParcelamento.setId(idPreParcelamento);

		return preParcelamento;
	}

	private ControladorRegistroAtendimentoLocal getControladorRegistroAtendimento(){

		ControladorRegistroAtendimentoLocalHome localHome = null;
		ControladorRegistroAtendimentoLocal local = null;

		ServiceLocator locator = null;

		try{
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorRegistroAtendimentoLocalHome) locator
							.getLocalHome(ConstantesJNDI.CONTROLADOR_REGISTRO_ATENDIMENTO_SEJB);

			local = localHome.create();

			return local;
		}catch(CreateException e){
			throw new SistemaException(e);
		}catch(ServiceLocatorException e){
			throw new SistemaException(e);
		}
	}

	/**
	 * @param imovel
	 * @param idMotivoNaoGeracao
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcaoAtividadeCronograma
	 * @throws ControladorException
	 */

	private void informarCobrancaDocumentoNaoGerado(Imovel imovel, Integer idMotivoNaoGeracao,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma) throws ControladorException{

		MotivoNaoGeracaoDocumento motivoNaoGeracaoDocumento = new MotivoNaoGeracaoDocumento();
		motivoNaoGeracaoDocumento.setId(idMotivoNaoGeracao);

		CobrancaDocumentoNaoGerado cobrancaDocumentoNaoGerado = new CobrancaDocumentoNaoGerado();
		cobrancaDocumentoNaoGerado.setImovel(imovel);
		cobrancaDocumentoNaoGerado.setMotivoNaoGeracaoDocumento(motivoNaoGeracaoDocumento);
		cobrancaDocumentoNaoGerado.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		cobrancaDocumentoNaoGerado.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
		cobrancaDocumentoNaoGerado.setUltimaAlteracao(new Date());

		try{
			this.getControladorUtil().inserirOuAtualizar(cobrancaDocumentoNaoGerado);
		}catch(ControladorException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Pesquisar Documentos de Cobrança para geração do relatório
	 * 
	 * @author Cinthya Cavalcanti
	 * @date 28/12/2011
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoRelatorioEmitirRelacaoDocumentos(int idCobrancaAtividadeAcaoComando)
					throws ControladorException{

		Collection<CobrancaDocumento> retorno = new ArrayList<CobrancaDocumento>();

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca
							.pesquisarCobrancaDocumentoRelatorioEmitirRelacaoDocumentos(idCobrancaAtividadeAcaoComando);

			CobrancaDocumento cobrancaDocumento = null;

			for(Object[] array : colecaoArray){
				cobrancaDocumento = new CobrancaDocumento();

				if(array[0] != null){
					cobrancaDocumento.setId((Integer) array[0]);
				}

				if(array[1] != null){
					Imovel imovel = new Imovel();
					imovel.setId((Integer) array[1]);

					cobrancaDocumento.setImovel(imovel);
				}

				if(array[2] != null){
					Localidade localidade = new Localidade();
					localidade.setId((Integer) array[2]);
					if(array[3] != null){
						localidade.setDescricao((String) array[3]);
					}

					cobrancaDocumento.setLocalidade(localidade);
				}

				if(array[4] != null){
					cobrancaDocumento.setValorDocumento((BigDecimal) array[4]);
				}
				if(array[5] != null){
					cobrancaDocumento.setNumeroSequenciaDocumento((Integer) array[5]);
				}

				if(array[6] != null){
					cobrancaDocumento.getImovel().setLigacaoAguaSituacao((LigacaoAguaSituacao) array[6]);
				}

				if(array[7] != null){
					cobrancaDocumento.getImovel().setLigacaoEsgotoSituacao((LigacaoEsgotoSituacao) array[7]);
				}

				retorno.add(cobrancaDocumento);
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0013 - Cont.] Gerar Guias de Pagamento do Parcelamento
	 */
	private Integer gerarGuiaPagamentoParcelamento(
					Imovel imovel,
					Parcelamento parcelamento,
					Collection<Categoria> colecaoCategoria,
					BigDecimal valorEntrada,
					Collection<ContaValoresHelper> colecaoContaValores,
					Integer idBoletoBancario,
					String indicadorParcelamentoCobrancaBancaria,
					Integer numeroDiasVencimentoEntrada,
					BigDecimal valorASerNegociado,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaConta,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaGuiaPagamento,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaDebitoACobrar,
					Map<Integer, BigDecimal> mapaListaAcumuladaJurosParcelamento,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaAcrescimoImpontualidade,
					Short indicadorTotalRemuneracaoCobrancaAdm,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		Date dataVencimentoCalculada = null;
		Integer numeroPrimeiraParcela = 1;
		Integer incrementoNumeroPrestacoes = 0;

		boolean existeContaEP = true;

		if(valorEntrada.compareTo(BigDecimal.ZERO) == 1){
			// Contas marcadas como entrada de parcelamento
			Collection<Conta> colecaoContaEP = null;

			if(!Util.isVazioOrNulo(colecaoContaValores)){
				colecaoContaEP = new ArrayList<Conta>();

				Integer indicadorContasDebito = null;
				Conta conta = null;

				for(ContaValoresHelper contaValoresHelper : colecaoContaValores){
					indicadorContasDebito = contaValoresHelper.getIndicadorContasDebito();

					if(indicadorContasDebito != null && indicadorContasDebito.equals(Integer.valueOf(1))){
						conta = contaValoresHelper.getConta();
						colecaoContaEP.add(conta);
					}
				}
			}

			// Caso não existam contas marcadas como entrada de parcelamento (EP)
			if(Util.isVazioOrNulo(colecaoContaEP)){
				existeContaEP = false;

				numeroPrimeiraParcela = 2;
				incrementoNumeroPrestacoes = 1;

				Integer numeroDias = null;

				if(numeroDiasVencimentoEntrada != null && !numeroDiasVencimentoEntrada.equals(0)){
					numeroDias = numeroDiasVencimentoEntrada;
				}else{
					numeroDias = Integer.parseInt((String) ParametroCobranca.P_NUMERO_DIAS_CALCULO_VENCIMENTO_PARCELA
									.executar(ExecutorParametrosCobranca.getInstancia()));
				}

				dataVencimentoCalculada = this.obterDataVencimentoGuiaEntradaParcelamento(new Date(), numeroDias);
			}
		}

		// Inclui a guia de pagamento do parcelamento
		GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
		guiaPagamentoGeral.setIndicadorHistorico(ConstantesSistema.NAO);
		guiaPagamentoGeral.setUltimaAlteracao(new Date());

		Integer idGuiaPagamentoGeral = (Integer) this.getControladorUtil().inserir(guiaPagamentoGeral);

		GuiaPagamento guiaPagamento = new GuiaPagamento();
		guiaPagamento.setId(idGuiaPagamentoGeral);

		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao(DebitoCreditoSituacao.NORMAL);
		guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		Localidade localidade = imovel.getLocalidade();
		guiaPagamento.setLocalidade(localidade);

		SetorComercial setorComercial = imovel.getSetorComercial();
		guiaPagamento.setSetorComercial(setorComercial);

		guiaPagamento.setImovel(imovel);
		guiaPagamento.setCliente(null);
		guiaPagamento.setRegistroAtendimento(null);
		guiaPagamento.setOrdemServico(null);
		guiaPagamento.setParcelamento(parcelamento);

		DocumentoTipo documentoTipo = new DocumentoTipo(DocumentoTipo.GUIA_PAGAMENTO);
		guiaPagamento.setDocumentoTipo(documentoTipo);

		guiaPagamento.setOrigem(null);

		Short numeroPrestacoesSH = parcelamento.getNumeroPrestacoes();

		// -------------------------------------------------------------------------------------
		// Caso não existam contas marcadas como entrada de parcelamento (EP),
		// atribuir Valor a ser negociado da Aba 4 Conclusão mais Juros de Parcelamento
		// (PARC_VLJUROSPARCELAMENTO);
		// caso contrário, atribuir Valor a ser negociado da Aba 4
		// Conclusão mais Juros de Parcelamento (PARC_VLJUROSPARCELAMENTO) menos valor da entrada
		// (PARC_VLENTRADA)

		// -------------------------------------------------------------------------------------
		BigDecimal valorDebito = BigDecimal.ZERO;
		BigDecimal jurosParcelamento = BigDecimal.ZERO;

		if(parcelamento.getValorJurosParcelamento() != null){
			jurosParcelamento = parcelamento.getValorJurosParcelamento();
		}

		if(!existeContaEP){
			valorDebito = valorASerNegociado.add(jurosParcelamento);
		}else{
			valorDebito = valorASerNegociado.add(jurosParcelamento).subtract(valorEntrada);
		}

		guiaPagamento.setValorDebito(valorDebito);
		// -------------------------------------------------------------------------------------

		Integer numeroPrestacaoTotal = numeroPrestacoesSH + incrementoNumeroPrestacoes;
		if(!Util.isVazioOuBranco(numeroPrestacaoTotal)){
			guiaPagamento.setNumeroPrestacaoTotal(numeroPrestacaoTotal.shortValue());
		}

		guiaPagamento.setUltimaAlteracao(new Date());
		guiaPagamento.setDataInclusao(new Date());
		guiaPagamento.setGuiaPagamentoGeral(guiaPagamentoGeral);

		this.getControladorUtil().inserir(guiaPagamento);

		// Inclui a prestação da guia de pagamento
		this.gerarGuiaPagamentoPrestacaoParcelamento(parcelamento, idGuiaPagamentoGeral, colecaoCategoria, numeroPrimeiraParcela,
						incrementoNumeroPrestacoes, dataVencimentoCalculada, numeroDiasVencimentoEntrada, mapaListaAcumuladaConta,
						mapaListaAcumuladaGuiaPagamento, mapaListaAcumuladaDebitoACobrar, mapaListaAcumuladaJurosParcelamento,
						mapaListaAcumuladaAcrescimoImpontualidade, indicadorTotalRemuneracaoCobrancaAdm,
						colecaoParcelamentoConfiguracaoPrestacao);

		// Inclui os clientes do imóvel
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE_RELACAO_TIPO);
		filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));

		Collection<ClienteImovel> clientesImovel = this.getControladorUtil().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());

		if(!Util.isVazioOrNulo(clientesImovel)){
			ClienteGuiaPagamento clienteGuiaPagamento = null;
			Cliente clienteAux = null;
			ClienteRelacaoTipo clienteRelacaoTipoAux = null;

			for(ClienteImovel clienteImovel : clientesImovel){
				clienteAux = clienteImovel.getCliente();
				clienteRelacaoTipoAux = clienteImovel.getClienteRelacaoTipo();

				clienteGuiaPagamento = new ClienteGuiaPagamento();
				clienteGuiaPagamento.setCliente(clienteAux);
				clienteGuiaPagamento.setClienteRelacaoTipo(clienteRelacaoTipoAux);
				clienteGuiaPagamento.setGuiaPagamento(guiaPagamento);
				clienteGuiaPagamento.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(clienteGuiaPagamento);
			}
		}

		// Atualizar boleto bancário
		// Caso seja possível o parcelamento de cobrança bancária (PASI_DSPARAMETRO com o valor 1
		// (sim)
		// na tabela PARAMETRO_SISTEMA para PASI_DSPARAMETRO="P_PARCELAMENTO_COBRANCA_BANCARIA")
		// e o campo o campo "Parcelamento de Cobrança Bancária?" esteja com a opção "Sim"
		// selecionada:
		Short pIndicadorParcelamentoCobrancaBancaria = Util.obterShort((String) ParametroCobranca.P_PARCELAMENTO_COBRANCA_BANCARIA
						.executar(ExecutorParametrosCobranca.getInstancia()));

		if(pIndicadorParcelamentoCobrancaBancaria.equals(ConstantesSistema.SIM)
						&& indicadorParcelamentoCobrancaBancaria.equals(ConstantesSistema.SIM.toString()) && idBoletoBancario != null){

			FiltroBoletoBancario filtroBoletoBancario = new FiltroBoletoBancario();
			filtroBoletoBancario.adicionarParametro(new ParametroSimples(FiltroBoletoBancario.ID, idBoletoBancario));

			Collection<BoletoBancario> colecaoBoletoBancario = this.getControladorUtil().pesquisar(filtroBoletoBancario,
							BoletoBancario.class.getName());

			if(!Util.isVazioOrNulo(colecaoBoletoBancario)){
				for(BoletoBancario boletoBancario : colecaoBoletoBancario){
					boletoBancario.setParcelamento(parcelamento);
					boletoBancario.setUltimaAlteracao(new Date());

					this.getControladorUtil().atualizar(boletoBancario);
				}
			}

			// [UC3016] Gerar Boleto Cobrança Bancária
			if(valorEntrada.compareTo(BigDecimal.ZERO) == 0){
				this.gerarBoletoCobrancaBancaria(null, idGuiaPagamentoGeral, 1, null);
			}

		}

		return idGuiaPagamentoGeral;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0013 - Cont.] Gerar Guias de Pagamento do Parcelamento
	 */
	private void gerarGuiaPagamentoPrestacaoParcelamento(
					Parcelamento parcelamento,
					Integer idGuiaPagamentoGeral,
					Collection<Categoria> colecaoCategoria,
					Integer numeroPrimeiraParcela,
					Integer incrementoNumeroPrestacoes,
					Date dataVencimento,
					Integer numeroDiasVencimentoEntrada,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaConta,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaGuiaPagamento,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaDebitoACobrar,
					Map<Integer, BigDecimal> mapaListaAcumuladaJurosParcelamento,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaListaAcumuladaAcrescimoImpontualidade,
					Short indicadorTotalRemuneracaoCobrancaAdm,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		// Parcelamento de Contas
		if(mapaListaAcumuladaConta != null && !mapaListaAcumuladaConta.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaConta.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaConta
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui a guia de pagamento para Parcelamento de Contas
					this.inserirGuiaPagamentoDebitoTipo(idGuiaPagamentoGeral, debitoTipo, mapaValoresPorCategoria, parcelamento,
									numeroPrimeiraParcela, incrementoNumeroPrestacoes, dataVencimento, numeroDiasVencimentoEntrada,
									indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm(),
									colecaoParcelamentoConfiguracaoPrestacao);
				}
			}
		}

		// Parcelamento de Guias de Pagamento
		if(mapaListaAcumuladaGuiaPagamento != null && !mapaListaAcumuladaGuiaPagamento.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaGuiaPagamento.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaGuiaPagamento
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui a guia de pagamento para Parcelamento de Contas
					this.inserirGuiaPagamentoDebitoTipo(idGuiaPagamentoGeral, debitoTipo, mapaValoresPorCategoria, parcelamento,
									numeroPrimeiraParcela, incrementoNumeroPrestacoes, dataVencimento, numeroDiasVencimentoEntrada,
									indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm(),
									colecaoParcelamentoConfiguracaoPrestacao);
				}
			}
		}

		// Parcelamento de Acrescimos por Impontualidade
		if(mapaListaAcumuladaAcrescimoImpontualidade != null && !mapaListaAcumuladaAcrescimoImpontualidade.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaAcrescimoImpontualidade.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaAcrescimoImpontualidade
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui a guia de pagamento para Acréscimos por impontualidade
					this.inserirGuiaPagamentoDebitoTipo(idGuiaPagamentoGeral, debitoTipo, mapaValoresPorCategoria, parcelamento,
									numeroPrimeiraParcela, incrementoNumeroPrestacoes, dataVencimento, numeroDiasVencimentoEntrada,
									indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm(),
									colecaoParcelamentoConfiguracaoPrestacao);
				}
			}
		}

		// Parcelamento de Debitos a Cobrar
		if(mapaListaAcumuladaDebitoACobrar != null && !mapaListaAcumuladaDebitoACobrar.isEmpty()){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaDebitoACobrar.keySet()){
				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaValoresPorItemContabil = mapaListaAcumuladaDebitoACobrar
								.get(chaveDebitoTipo);

				for(LancamentoItemContabilParcelamentoHelper lancamentoContabilHelper : mapaValoresPorItemContabil.keySet()){
					Map<Categoria, BigDecimal> mapaValoresPorCategoria = mapaValoresPorItemContabil.get(lancamentoContabilHelper);

					LancamentoItemContabil lancamentoItemContabil = new LancamentoItemContabil(
									lancamentoContabilHelper.getIdLancamentoItemContabil());
					debitoTipo.setLancamentoItemContabil(lancamentoItemContabil);

					// 1. Inclui a guia de pagamento para Parcelamento de Contas
					this.inserirGuiaPagamentoDebitoTipo(idGuiaPagamentoGeral, debitoTipo, mapaValoresPorCategoria, parcelamento,
									numeroPrimeiraParcela, incrementoNumeroPrestacoes, dataVencimento, numeroDiasVencimentoEntrada,
									indicadorTotalRemuneracaoCobrancaAdm,
									lancamentoContabilHelper.getIndicadorRemuneracaoParcialCobrancaAdm(),
									colecaoParcelamentoConfiguracaoPrestacao);
				}
			}
		}

		// Juros sobre Parcelamento
		if(!Util.isVazioOuBranco(mapaListaAcumuladaJurosParcelamento)){

			for(Integer chaveDebitoTipo : mapaListaAcumuladaJurosParcelamento.keySet()){

				DebitoTipo debitoTipo = filtrarDebitoTipo(chaveDebitoTipo);

				BigDecimal valorJuros = mapaListaAcumuladaJurosParcelamento.get(chaveDebitoTipo);

				// Juros sobre Parcelamento
				Map<Categoria, BigDecimal> valorJurosPorCategoria = distribuirJurosParcelamentoPorCategoria(colecaoCategoria, valorJuros);

				// Juros sobre Parcelamento Cobrança Administrativa
				this.inserirGuiaPagamentoDebitoTipo(idGuiaPagamentoGeral, debitoTipo, valorJurosPorCategoria, parcelamento,
								numeroPrimeiraParcela, incrementoNumeroPrestacoes, dataVencimento, numeroDiasVencimentoEntrada,
								ConstantesSistema.NAO, ConstantesSistema.NAO, colecaoParcelamentoConfiguracaoPrestacao);

			}
		}

		// Caso seja parcelamento configurável (parcelas fixas)
		if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

			// Varre as prestações para lançar a diferença devido aos arredondamentos e bater
			// com o valor pré-fixado pelos usuários
			verificarDiferencaArredondamentosParcelamentoConfiguravel(idGuiaPagamentoGeral, colecaoParcelamentoConfiguracaoPrestacao);
		}
	}

	/**
	 * Varre as prestações para lançar a diferença devido aos arredondamentos e bater com o valor
	 * pré-fixado pelos usuários nos casos em que for parcelamento configurável (parcelas fixas)
	 * 
	 * @author Anderson Italo
	 * @date 05/03/2014
	 */
	private void verificarDiferencaArredondamentosParcelamentoConfiguravel(Integer idGuiaPagamentoGeral,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		// Ajuste das prestações em guia_pagamento_prestacao
		FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
		filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID,
						idGuiaPagamentoGeral));
		filtroGuiaPagamentoPrestacao.setCampoOrderBy(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO);

		Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
						GuiaPagamentoPrestacao.class.getName());

		HashMap<Short, BigDecimal> mapNumeroPrestacaoSomatorioValor = new HashMap<Short, BigDecimal>();

		for(GuiaPagamentoPrestacao gpp : colecaoGuiaPagamentoPrestacao){

			if(mapNumeroPrestacaoSomatorioValor.get(gpp.getComp_id().getNumeroPrestacao()) != null){

				BigDecimal valorPrest = mapNumeroPrestacaoSomatorioValor.get(gpp.getComp_id().getNumeroPrestacao());
				valorPrest = valorPrest.add(gpp.getValorPrestacao());
				mapNumeroPrestacaoSomatorioValor.put(gpp.getComp_id().getNumeroPrestacao(), valorPrest);
			}else{

				mapNumeroPrestacaoSomatorioValor.put(gpp.getComp_id().getNumeroPrestacao(), gpp.getValorPrestacao());
			}
		}

		Short indiceGeralPrestacoes = 1;

		// Varre os Conjuntos de Prestação Configurável
		for(ParcelamentoConfiguracaoPrestacao parcConfigPrest : colecaoParcelamentoConfiguracaoPrestacao){

			for(int j = 0; j < parcConfigPrest.getNumeroPrestacao().intValue(); j++){

				// Caso o valor acumulado da prestação seja menor do que o valor
				// pré-fixado pelo usuário
				if(mapNumeroPrestacaoSomatorioValor.get(indiceGeralPrestacoes).compareTo(parcConfigPrest.getValorPrestacao()) < 0){

					for(GuiaPagamentoPrestacao gpp : colecaoGuiaPagamentoPrestacao){

						// Adiciona a diferença no primeiro registro de guia_pagamento_prestacao
						// encontrado para prestação
						if(gpp.getComp_id().getNumeroPrestacao().equals(indiceGeralPrestacoes)){

							BigDecimal diferencaAcumuladaPrest = parcConfigPrest.getValorPrestacao().subtract(
											mapNumeroPrestacaoSomatorioValor.get(indiceGeralPrestacoes));
							BigDecimal valorPrest = gpp.getValorPrestacao().add(diferencaAcumuladaPrest);
							gpp.setValorPrestacao(valorPrest);

							getControladorUtil().atualizar(gpp);

							break;
						}
					}
				}

				indiceGeralPrestacoes = Short.valueOf(String.valueOf(indiceGeralPrestacoes.intValue() + 1));
			}
		}

		// Ajuste das prestações em guia_pagamento_categoria
		FiltroGuiaPagamentoCategoria filtroGuiaPagamentoCategoria = new FiltroGuiaPagamentoCategoria();
		filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.GUIA_PAGAMENTO_ID,
						idGuiaPagamentoGeral));
		filtroGuiaPagamentoCategoria.setCampoOrderBy(FiltroGuiaPagamentoCategoria.CATEGORIA_ID);
		filtroGuiaPagamentoCategoria.setCampoOrderBy(FiltroGuiaPagamentoCategoria.NUMERO_PRESTACAO);

		Collection<GuiaPagamentoCategoria> colecaoGuiaPagamentoCategoria = getControladorUtil().pesquisar(filtroGuiaPagamentoCategoria,
						GuiaPagamentoCategoria.class.getName());

		mapNumeroPrestacaoSomatorioValor = new HashMap<Short, BigDecimal>();

		for(GuiaPagamentoCategoria gpc : colecaoGuiaPagamentoCategoria){

			if(mapNumeroPrestacaoSomatorioValor.get(gpc.getComp_id().getNumeroPrestacao()) != null){

				BigDecimal valorPrest = mapNumeroPrestacaoSomatorioValor.get(gpc.getComp_id().getNumeroPrestacao());
				valorPrest = valorPrest.add(gpc.getValorCategoria());
				mapNumeroPrestacaoSomatorioValor.put(gpc.getComp_id().getNumeroPrestacao(), valorPrest);
			}else{

				mapNumeroPrestacaoSomatorioValor.put(gpc.getComp_id().getNumeroPrestacao(), gpc.getValorCategoria());
			}
		}

		indiceGeralPrestacoes = 1;

		// Varre os Conjuntos de Prestação Configurável
		for(ParcelamentoConfiguracaoPrestacao parcConfigPrest : colecaoParcelamentoConfiguracaoPrestacao){

			for(int j = 0; j < parcConfigPrest.getNumeroPrestacao().intValue(); j++){

				// Caso o valor acumulado da prestação seja menor do que o valor
				// pré-fixado pelo usuário
				if(mapNumeroPrestacaoSomatorioValor.get(indiceGeralPrestacoes).compareTo(parcConfigPrest.getValorPrestacao()) < 0){

					for(GuiaPagamentoCategoria gpc : colecaoGuiaPagamentoCategoria){

						// Adiciona a diferença no primeiro registro de guia_pagamento_categoria
						// encontrado para prestação
						if(gpc.getComp_id().getNumeroPrestacao().equals(indiceGeralPrestacoes)){

							BigDecimal diferencaAcumuladaPrest = parcConfigPrest.getValorPrestacao().subtract(
											mapNumeroPrestacaoSomatorioValor.get(indiceGeralPrestacoes));
							BigDecimal valorPrest = gpc.getValorCategoria().add(diferencaAcumuladaPrest);
							gpc.setValorCategoria(valorPrest);

							getControladorUtil().atualizar(gpc);

							break;
						}
					}
				}

				indiceGeralPrestacoes = Short.valueOf(String.valueOf(indiceGeralPrestacoes.intValue() + 1));
			}
		}
	}

	/**
	 * Distribui o valor de juros do parcelamento por categorias
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Map<Categoria, BigDecimal> distribuirJurosParcelamentoPorCategoria(Collection<Categoria> colecaoCategoria, BigDecimal valorJuros){

		Map<Categoria, BigDecimal> retorno = new HashMap<Categoria, BigDecimal>();

		if(!Util.isVazioOrNulo(colecaoCategoria)){

			// 2.1. [UC0185] Obter Valor por Categoria
			Collection<BigDecimal> colecaoValorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoria, valorJuros);

			if(!Util.isVazioOrNulo(colecaoValorCategoria)){

				Iterator<BigDecimal> colecaoValorCategoriaIterator = colecaoValorCategoria.iterator();
				BigDecimal valorCategoria = null;

				for(Categoria categoria : colecaoCategoria){

					if(colecaoValorCategoriaIterator.hasNext()){
						valorCategoria = colecaoValorCategoriaIterator.next();
						if(valorCategoria != null && valorCategoria.compareTo(BigDecimal.ZERO) > 0){
							retorno.put(categoria, valorCategoria);
						}
					}
				}
			}
		}

		return retorno;

	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0013 - Cont.] Gerar Guias de Pagamento do Parcelamento
	 */
	private void inserirGuiaPagamentoDebitoTipo(Integer idGuiaPagamentoGeral, DebitoTipo debitoTipo,
					Map<Categoria, BigDecimal> mapaValoresPorCategoria, Parcelamento parcelamento, Integer numeroPrimeiraParcela,
					Integer incrementoNumeroPrestacoes, Date dataVencimento, Integer numeroDiasVencimentoEntrada,
					Short indicadorTotalRemuneracaoCobrancaAdm, Short indicadorParcialRemuneracaoCobrancaAdm,
					Collection<ParcelamentoConfiguracaoPrestacao> colecaoParcelamentoConfiguracaoPrestacao) throws ControladorException{

		// BigDecimal valorPrestacao = valorTotal.divide(new BigDecimal(numeroPrestacao), 2,
		// BigDecimal.ROUND_DOWN);
		BigDecimal valorPrestacao = BigDecimal.ZERO;

		// valor da parcela
		// Atenção: Caso o resultado não seja inteiro,
		// truncar o valor obtido para duas casas decimais e ajustar,
		// para mais ou para menos, a diferença entre o valor da guia (GPAG_VLDEBITO) valor total
		// parcelado e
		// o valor total de cada prestação (todas as prestações geradas, inclusive a entrada, caso
		// exista)
		// vezes o número de prestações (todas as prestações geradas, inclusive a entrada, caso
		// exista), no valor da última prestação.

		BigDecimal totalPrestacoes = BigDecimal.ZERO;
		BigDecimal diferenca = BigDecimal.ZERO;

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		Integer anoMesFaturamento = sistemaParametro.getAnoMesFaturamento();

		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao(DebitoCreditoSituacao.NORMAL);
		Integer idLancamentoItemContabil = debitoTipo.getLancamentoItemContabil().getId();

		GuiaPagamentoPrestacaoPK guiaPagamentoPrestacaoPK = null;
		GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;
		GuiaPagamentoCategoriaPK guiaPagamentoCategoriaPK = null;
		GuiaPagamentoCategoria guiaPagamentoCategoria = null;

		Date dataVencimentoAux = null;
		Short prestacao = null;

		// Soma dos valores por categoria
		BigDecimal valorTotalPorTipoLancamento = Util.somaColecaoBigDecimal(mapaValoresPorCategoria.values());

		BigDecimal valorCategoria = null;
		HashMap<Integer, BigDecimal> mapNumeroSequenciaValorPrestacao = new HashMap<Integer, BigDecimal>();
		Collection<Short> colecaoPrestacoesInformadas = new ArrayList<Short>();
		BigDecimal valorTotalFinanciado = BigDecimal.ZERO;

		if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

			// Ordenar a coleção por número sequencia
			List sortFields = new ArrayList();
			sortFields.add(new BeanComparator("numeroSequencia"));

			ComparatorChain multiSort = new ComparatorChain(sortFields);
			Collections.sort((List<ParcelamentoConfiguracaoPrestacao>) colecaoParcelamentoConfiguracaoPrestacao, multiSort);

			for(ParcelamentoConfiguracaoPrestacao parcelamentoConfiguracaoPrestacao : colecaoParcelamentoConfiguracaoPrestacao){

				mapNumeroSequenciaValorPrestacao.put(parcelamentoConfiguracaoPrestacao.getNumeroSequencia(),
								parcelamentoConfiguracaoPrestacao.getValorPrestacao());

				BigDecimal produtoPrestacaoVersusValor = parcelamentoConfiguracaoPrestacao.getValorPrestacao()
								.multiply(new BigDecimal(parcelamentoConfiguracaoPrestacao.getNumeroPrestacao().toString()))
								.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

				valorTotalFinanciado = valorTotalFinanciado.add(produtoPrestacaoVersusValor);
				colecaoPrestacoesInformadas.add(parcelamentoConfiguracaoPrestacao.getNumeroPrestacao());
			}
		}else{

			colecaoPrestacoesInformadas.add(Util.obterShort(parcelamento.getNumeroPrestacoes().toString()));
		}

		int indexPrestacoes = 0;
		Integer numeroSequenciaPrestacao = 0;

		for(Short numeroPrestacoes : colecaoPrestacoesInformadas){

			numeroSequenciaPrestacao = numeroSequenciaPrestacao.intValue() + 1;
			for(int i = numeroPrimeiraParcela; i <= (numeroPrestacoes.intValue() + incrementoNumeroPrestacoes.intValue()); i++){

				if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

					BigDecimal valorPrestacaoConfigurado = mapNumeroSequenciaValorPrestacao.get(numeroSequenciaPrestacao);
					BigDecimal valorItemVezesValorPrestacao = valorTotalPorTipoLancamento.multiply(valorPrestacaoConfigurado).setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorPrestacao = valorItemVezesValorPrestacao.divide(valorTotalFinanciado, 2, BigDecimal.ROUND_DOWN);
				}else{

					valorPrestacao = Util.calcularValorPrestacao(valorTotalPorTipoLancamento, numeroPrestacoes, i);
				}

				guiaPagamentoPrestacaoPK = new GuiaPagamentoPrestacaoPK();
				guiaPagamentoPrestacaoPK.setGuiaPagamentoId(idGuiaPagamentoGeral);

				indexPrestacoes++;

				if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){
				prestacao = Short.parseShort(String.valueOf(indexPrestacoes));
				}else{
					prestacao = Short.parseShort(String.valueOf(i));
				}

				guiaPagamentoPrestacaoPK.setNumeroPrestacao(prestacao);

				guiaPagamentoPrestacaoPK.setDebitoTipoId(debitoTipo.getId());
				guiaPagamentoPrestacaoPK.setItemLancamentoContabilId(idLancamentoItemContabil);

				guiaPagamentoPrestacao = new GuiaPagamentoPrestacao();
				guiaPagamentoPrestacao.setComp_id(guiaPagamentoPrestacaoPK);
				guiaPagamentoPrestacao.setDebitoCreditoSituacao(debitoCreditoSituacao);
				guiaPagamentoPrestacao.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());

				// Caso não seja parcelamento configurável
				if(Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

					totalPrestacoes = totalPrestacoes.add(valorPrestacao);

					if(indexPrestacoes == (parcelamento.getNumeroPrestacoes().intValue() + incrementoNumeroPrestacoes.intValue())){

						diferenca = valorTotalPorTipoLancamento.subtract(totalPrestacoes);
						valorPrestacao = valorPrestacao.add(diferenca);
					}
				}

				guiaPagamentoPrestacao.setValorPrestacao(valorPrestacao);

				if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){
				if(indexPrestacoes == numeroPrimeiraParcela){
					// Primeira prestação

					if(dataVencimento != null){
						dataVencimentoAux = Util.somaMesData(dataVencimento, 1);
					}else{
						Integer numeroDias = null;

						if(numeroDiasVencimentoEntrada != null && !numeroDiasVencimentoEntrada.equals(0)){
							numeroDias = numeroDiasVencimentoEntrada;
						}else{
							numeroDias = Integer.parseInt((String) ParametroCobranca.P_NUMERO_DIAS_CALCULO_VENCIMENTO_PARCELA
											.executar(ExecutorParametrosCobranca.getInstancia()));
						}

						dataVencimentoAux = Util.adicionarNumeroDiasDeUmaData(new Date(), 30);
						dataVencimentoAux = this.obterDataVencimentoGuiaEntradaParcelamento(dataVencimentoAux, numeroDias);
					}
				}else{
					dataVencimentoAux = Util.somaMesData(dataVencimentoAux, 1);
				}

				}else{
					if(i == numeroPrimeiraParcela){
						// Primeira prestação

						if(dataVencimento != null){
							dataVencimentoAux = Util.somaMesData(dataVencimento, 1);
						}else{
							Integer numeroDias = null;

							if(numeroDiasVencimentoEntrada != null && !numeroDiasVencimentoEntrada.equals(0)){
								numeroDias = numeroDiasVencimentoEntrada;
							}else{
								numeroDias = Integer.parseInt((String) ParametroCobranca.P_NUMERO_DIAS_CALCULO_VENCIMENTO_PARCELA
												.executar(ExecutorParametrosCobranca.getInstancia()));
							}

							dataVencimentoAux = Util.adicionarNumeroDiasDeUmaData(new Date(), 30);
							dataVencimentoAux = this.obterDataVencimentoGuiaEntradaParcelamento(dataVencimentoAux, numeroDias);
						}
					}else{
						dataVencimentoAux = Util.somaMesData(dataVencimentoAux, 1);
					}

				}

				guiaPagamentoPrestacao.setDataVencimento(dataVencimentoAux);
				guiaPagamentoPrestacao.setIndicadorPagamentoPendente(ConstantesSistema.NAO);
				guiaPagamentoPrestacao.setIndicadorCobrancaMulta(ConstantesSistema.NAO);
				guiaPagamentoPrestacao.setAnoMesReferenciaFaturamento(anoMesFaturamento);
				guiaPagamentoPrestacao.setDataEmissao(new Date());
				guiaPagamentoPrestacao.setUltimaAlteracao(new Date());

				// 1. Caso o Indicador de Remuneração Total Cobrança Administrativa esteja com o
				// valor 1
				// (sim)
				if(indicadorTotalRemuneracaoCobrancaAdm != null && indicadorTotalRemuneracaoCobrancaAdm.equals(ConstantesSistema.SIM)){
					guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.SIM);

					// Caso contrário
				}else{
					// 2.1. Atribuir o Indicador de Remuneração Parcial Cobrança Administrativa para
					// o
					// tipo de débito e item contábil correspondente
					guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(indicadorParcialRemuneracaoCobrancaAdm);
				}

				this.getControladorUtil().inserir(guiaPagamentoPrestacao);

				// Laço para criar as guias de pagamento por categoria
				for(Categoria categoria : mapaValoresPorCategoria.keySet()){

					FiltroGuiaPagamentoCategoria filtroGuiaPagamentoCategoria = new FiltroGuiaPagamentoCategoria();
					filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.GUIA_PAGAMENTO_ID,
									idGuiaPagamentoGeral));
					filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.NUMERO_PRESTACAO,
									prestacao));
					filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoCategoria.CATEGORIA_ID,
									categoria.getId()));
					filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(
									FiltroGuiaPagamentoCategoria.LANCAMENTO_ITEM_CONTABIL_ID, idLancamentoItemContabil));
					guiaPagamentoCategoria = (GuiaPagamentoCategoria) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(
									filtroGuiaPagamentoCategoria, GuiaPagamentoCategoria.class.getName()));

					if(!Util.isVazioOrNulo(colecaoParcelamentoConfiguracaoPrestacao)){

						BigDecimal valorPrestacaoConfigurado = mapNumeroSequenciaValorPrestacao.get(numeroSequenciaPrestacao);
						BigDecimal valorItemVezesValorPrestacao = mapaValoresPorCategoria.get(categoria)
										.multiply(valorPrestacaoConfigurado)
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorCategoria = valorItemVezesValorPrestacao.divide(valorTotalFinanciado, 2, BigDecimal.ROUND_DOWN);

					}else{

						valorCategoria = Util.calcularValorPrestacao(mapaValoresPorCategoria.get(categoria), numeroPrestacoes, i);
					}

					if(guiaPagamentoCategoria != null){

						guiaPagamentoCategoria.setValorCategoria(guiaPagamentoCategoria.getValorCategoria().add(valorCategoria));
						guiaPagamentoCategoria.setUltimaAlteracao(new Date());

						this.getControladorUtil().atualizar(guiaPagamentoCategoria);

					}else{
						guiaPagamentoCategoriaPK = new GuiaPagamentoCategoriaPK();
						guiaPagamentoCategoriaPK.setGuiaPagamentoId(idGuiaPagamentoGeral);
						guiaPagamentoCategoriaPK.setNumeroPrestacao(prestacao);
						guiaPagamentoCategoriaPK.setCategoriaId(categoria.getId());
						guiaPagamentoCategoriaPK.setLancamentoItemContabilId(idLancamentoItemContabil);

						guiaPagamentoCategoria = new GuiaPagamentoCategoria();
						guiaPagamentoCategoria.setComp_id(guiaPagamentoCategoriaPK);
						guiaPagamentoCategoria.setQuantidadeEconomia(categoria.getQuantidadeEconomiasCategoria());
						guiaPagamentoCategoria.setValorCategoria(valorCategoria);
						guiaPagamentoCategoria.setUltimaAlteracao(new Date());

						this.getControladorUtil().inserir(guiaPagamentoCategoria);
					}
				}

			}
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0016] - Obter Boletos Bancários para Negociação.
	 * O sistema obtém os boletos bancários do imóvel possíveis de serem negociados.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection<BoletoBancario> obterBoletosBancariosParaNegociacao(Integer idImovel) throws ControladorException{

		try{
			return repositorioCobranca.obterBoletosBancariosParaNegociacao(idImovel);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0016] - Obter Boletos Bancários para Negociação.
	 * Obtém a data de entrada através da entidade BoletoBancarioSituacaoHistorico pelo ID do
	 * BoletoBancario.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Date obterDataEntradaBoletoBancarioSituacaoHistorico(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.obterDataEntradaBoletoBancarioSituacaoHistorico(idBoletoBancario);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0017] - Determinar Parametrização do Parcelamento de Cobrança Bancária
	 * Obtém a menor referência das contas associadas ao boleto bancário selecionado para
	 * negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterMenorReferenciaContaBoletoBancario(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.obterMenorReferenciaContaBoletoBancario(idBoletoBancario);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [SB0017] - Determinar Parametrização do Parcelamento de Cobrança Bancária
	 * Obtém a maior referência das contas associadas ao boleto bancário selecionado para
	 * negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterMaiorReferenciaContaBoletoBancario(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.obterMaiorReferenciaContaBoletoBancario(idBoletoBancario);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public void emitirRelacaoDocumentosCobranca(Usuario usuario, Integer idFuncionalidadeIniciada,
					CobrancaAcaoAtividadeComando comandoAtividadeAcaoComando) throws ControladorException{

		int idUnidadeIniciada = 0;
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.RELATORIO, idUnidadeIniciada);

		LOGGER.info("******INICO DO EMITIR RELACAO DOCUMENTOS COBRANCA ************************ ");
		try{
			RelatorioEmitirRelacaoDocumentos relatorioEmitirRelacaoDocumentos = new RelatorioEmitirRelacaoDocumentos(usuario);
			relatorioEmitirRelacaoDocumentos.addParametro("comandoAtividadeAcaoComando", comandoAtividadeAcaoComando);
			relatorioEmitirRelacaoDocumentos.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);

			this.getControladorBatch().iniciarProcessoRelatorio(relatorioEmitirRelacaoDocumentos);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}finally{
			LOGGER.info("******FIM DO EMITIR RELACAO DOCUMENTOS COBRANCA ************************ ");

		}
	}

	public void emitirRelacaoDocumentosCobranca(Usuario usuario, String descricaoAcaoCobranca, Integer idFuncionalidadeIniciada,
					Integer idFaturamentoGrupoCronogramaMensal, CobrancaAcaoAtividadeComando comandoAtividadeAcaoComando)
					throws ControladorException{

		int idUnidadeIniciada = 0;
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.RELATORIO, idUnidadeIniciada);

		LOGGER.info("******INICO DO EMITIR RELACAO DOCUMENTOS COBRANCA ************************ ");
		try{
			FiltroCobrancaDocumento filtro = new FiltroCobrancaDocumento();
			filtro.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumento.FATURAMENTO_GRUPO_CRONOGRAMA_MENSAL_ID,
							idFaturamentoGrupoCronogramaMensal));
			filtro.setCampoOrderBy(FiltroCobrancaDocumento.LOCALIDADE_ID, FiltroCobrancaDocumento.SETOR_COMERCIAL,
							FiltroCobrancaDocumento.QUADRA_NM, FiltroCobrancaDocumento.IMOVEL_LOTE, FiltroCobrancaDocumento.IMOVEL_SUBLOTE);

			Collection documentos = getControladorUtil().pesquisar(filtro, CobrancaDocumento.class.getName());
			LOGGER.info("QTD DE DOCUMENTOS COBRANCA A SEREM EXIBIDOS NA RELACAO DE EMITIDOS: " + documentos.size());
			List<Integer> listaDocumentoCobrancaId = new ArrayList<Integer>();
			for(Object object : documentos){
				CobrancaDocumento doc = (CobrancaDocumento) object;
				listaDocumentoCobrancaId.add(doc.getId());
			}
			RelatorioEmitirRelacaoDocumentos relatorioDocumentosGerados = new RelatorioEmitirRelacaoDocumentos(usuario);
			relatorioDocumentosGerados.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);
			relatorioDocumentosGerados.addParametro("listaIdsDocumentosCobranca", listaDocumentoCobrancaId);
			relatorioDocumentosGerados.addParametro("gerarRelatorioAvisoCortePorFluxoFaturamento", Boolean.TRUE);
			relatorioDocumentosGerados.addParametro("descricaoCobrancaAcao", descricaoAcaoCobranca);
			relatorioDocumentosGerados.addParametro("comandoAtividadeAcaoComando", comandoAtividadeAcaoComando);

			this.getControladorBatch().iniciarProcessoRelatorio(relatorioDocumentosGerados);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}finally{
			LOGGER.info("******FIM DO EMITIR RELACAO DOCUMENTOS COBRANCA ************************ ");

		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * [FS0016] - Verificar se usuário possui autorização para utilizar a RD
	 * 
	 * @author Ailton Sousa
	 * @date 27/12/2011
	 * @param idUsuario
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaPermitidaAoUsuario(Integer idUsuario) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarResolucaoDiretoriaPermitidaAoUsuario(idUsuario);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Hebert Falcão
	 * @date 31/12/2011
	 */
	private Date obterDataVencimentoGuiaEntradaParcelamento(Date data, Integer numeroDias) throws ControladorException{

		// O dia do vencimento da guia de entrada nunca poderá se 29, 30 ou 31 porque há
		// meses em que esses dias não ocorrem

		Date dataVencimentoCalculada = Util.adicionarNumeroDiasDeUmaData(data, numeroDias);

		dataVencimentoCalculada = Util.obterDataComDiaExistenteEmTodosMeses(dataVencimentoCalculada);

		return dataVencimentoCalculada;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * Verifica se a conta está associada ao boleto bancário da negociação.
	 * 
	 * @author Ailton Sousa
	 * @date 18/01/2012
	 * @param idBoletoBancario
	 * @param idConta
	 * @return
	 * @throws ControladorException
	 */
	public boolean isContaAssociadaAoBoletoBancario(Integer idBoletoBancario, Integer idConta) throws ControladorException{

		try{
			return repositorioCobranca.isContaAssociadaAoBoletoBancario(idBoletoBancario, idConta);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 */

	public Collection<ParcelamentoSituacaoEspecial> verificarRDComRestricao(Integer idResolucaoDiretoria) throws ControladorException{

		try{
			return repositorioCobranca.verificarRDComRestricao(idResolucaoDiretoria);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos.
	 * 
	 * @param idLocalidade
	 * @param intervalorParcelamentoInicial
	 * @param intervalorParcelamentoFinal
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ParcelamentoSituacaoEspecial> pesquisarParcelamentoSituacaoEspecialPorLocalidade(Integer idLocalidade,
					Integer intervalorParcelamentoInicial, Integer intervalorParcelamentoFinal) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarParcelamentoSituacaoEspecialPorLocalidade(idLocalidade, intervalorParcelamentoInicial,
							intervalorParcelamentoFinal);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0111] Iniciar Processo
	 * [SB0007] - Obter Dados Complementares do Comando de Cronograma de Cobrança
	 * 
	 * @author Hugo Lima
	 * @date 28/02/2012
	 * @param idComandoFaturamento
	 * @return
	 * @throws ControladorException
	 */
	public String obterDadosComplementaresComandoCronogramaCobranca(Integer idComandoFaturamento) throws ControladorException{

		String retorno = "";
		Object[] retornoConsulta = null;
		try{
			retornoConsulta = this.repositorioCobranca.pesquisarDadosComplementaresComandoCronogramaCobranca(idComandoFaturamento);
			if(!Util.isVazioOrNulo(retornoConsulta)){
				ProcessoIniciadoDadoComplementarHelper helper = new ProcessoIniciadoDadoComplementarHelper();
				helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_DESCRICAO, retornoConsulta[0]);
				helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_ATIVIDADE_DESCRICAO, retornoConsulta[1]);
				helper.adcionarDadoComplementar(DadoComplementarEnumerator.ANO_MES_REFERENCIA,
								Util.formatarAnoMesParaMesAno((Integer) retornoConsulta[2]));
				helper.adcionarDadoComplementar(DadoComplementarEnumerator.GRUPO_DESCRICAO, retornoConsulta[3]);
				retorno = helper.getStringFormatoPesistencia();

			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}

	/**
	 * [UC0111] Iniciar Processo
	 * [SB0008] - Obter Dados Complementares do Comando Eventual de Cobrança
	 * 
	 * @author Hugo Lima
	 * @date 28/02/2012
	 * @param idComandoFaturamento
	 * @return
	 * @throws ControladorException
	 */
	public String obterDadosComplementaresComandoEventualCobranca(Integer idComandoFaturamento) throws ControladorException{

		ProcessoIniciadoDadoComplementarHelper helper = new ProcessoIniciadoDadoComplementarHelper();
		Object[] retornoConsulta = null;
		String descricaoCobrancaAcao = "";
		String descricaoCobrancaAtividade = "";
		String descricaoTitulo = "";
		String descricaoGrupo = "";
		try{

			retornoConsulta = this.repositorioCobranca.pesquisarDadosComplementaresComandoEventualCobranca(idComandoFaturamento);

			if(!Util.isVazioOrNulo(retornoConsulta)){
				descricaoCobrancaAcao = (String) retornoConsulta[0];
				descricaoCobrancaAtividade = (String) retornoConsulta[1];
				descricaoTitulo = (String) retornoConsulta[2];
				if(!Util.isVazioOuBranco(retornoConsulta[3])){
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_DESCRICAO, descricaoCobrancaAcao);
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_ATIVIDADE_DESCRICAO,
									descricaoCobrancaAtividade);
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_COMANDO_TITULO, descricaoTitulo);
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.GRUPO_DESCRICAO, descricaoGrupo);
				}else{
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_DESCRICAO, descricaoCobrancaAcao);
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_ATIVIDADE_DESCRICAO,
									descricaoCobrancaAtividade);
					helper.adcionarDadoComplementar(DadoComplementarEnumerator.COBRANCA_ACAO_COMANDO_TITULO, descricaoTitulo);
				}

			}
		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);
		}

		return helper.getStringFormatoPesistencia();
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * 
	 * @author Hebert Falcão
	 * @date 02/03/2012
	 */
	public Object[] realizarArrastoDeParcelamento(Integer idImovel) throws ControladorException{

		Object[] retorno = new Object[3];
		boolean indicadorArrasto = false;
		Collection<DebitoACobrarParcelamentoHelper> colecaoDebitoACobrarDeParcelamentoHelper = null;
		BigDecimal valorTotalDebitos = BigDecimal.ZERO;
		Map<DebitoCobrado, Collection> mapDebitosCobrados = new HashMap<DebitoCobrado, Collection>();
		Collection<Pagamento> colecaoPagamento = null;

		Short pArrastoParcelasDescumprimentoParcelamento = Util
						.obterShort((String) ParametroCobranca.P_ARRASTO_PARCELAS_DESCUMPRIMENTO_PARCELAMENTO
										.executar(ExecutorParametrosCobranca.getInstancia()));

		if(pArrastoParcelasDescumprimentoParcelamento.equals(ConstantesSistema.SIM)){

			colecaoDebitoACobrarDeParcelamentoHelper = this.pesquisarDebitoACobrarDeParcelamentoHelper(idImovel);

			if(!Util.isVazioOrNulo(colecaoDebitoACobrarDeParcelamentoHelper)){

				Integer pQuantidadeParcelasVencidasArrasto = Integer
								.parseInt((String) ParametroCobranca.P_QTD_PARCELAS_VENCIDAS_ARRASTO_PARC
												.executar(ExecutorParametrosCobranca.getInstancia()));

				Integer pNumeroDiasDebitoVencidoParaArrasto = Integer
								.parseInt((String) ParametroCobranca.P_NUMERO_DIAS_DEBITO_VENCIDO_PARA_ARRASTO
												.executar(ExecutorParametrosCobranca.getInstancia()));

				Short pCobrarDescontosMultasArrasto = Util.obterShort((String) ParametroCobranca.P_COBRAR_DESCONTOS_MULTAS_ARRASTO
								.executar(ExecutorParametrosCobranca.getInstancia()));

				Integer idParcelamento = null;
				Parcelamento parcelamento = null;
				Integer quantidadePrestacoesVencidas = null;
				boolean existenciaMultaPorDescumprimento = false;
				boolean gerarDebitoCobradoPenalizacao = false;

				FiltroParcelamento filtroParcelamento = null;
				Collection<Parcelamento> colecaoParcelamento = null;

				ResolucaoDiretoria resolucaoDiretoria = null;
				Short indicadorCobrarDescontosArrasto = null;

				FiltroCreditoARealizar filtroCreditoARealizar = null;
				Collection<CreditoARealizar> colecaoCreditoARealizar = null;
				Integer idCreditoARealizar = null;
				Collection<Integer> idsCreditoARealizarCancelar = null;
				String[] idsCreditoARealizarCancelarStr = null;
				Object[] idsCreditoARealizarCancelarObj = null;

				Imovel imovel = null;

				BigDecimal valorDescontosMultasAbonadasNoParcelamento = BigDecimal.ZERO;

				Collection<DebitoACobrar> colecaoDebitoACobrarParaHistorico = new ArrayList<DebitoACobrar>();
				Collection<ObjetoTransacao> colecaoDebitoACobrarContabilizacao = new ArrayList<ObjetoTransacao>();

				for(DebitoACobrarParcelamentoHelper debitoACobrarDeParcelamentoHelper : colecaoDebitoACobrarDeParcelamentoHelper){
					idsCreditoARealizarCancelar = new ArrayList<Integer>();

					parcelamento = null;

					idParcelamento = debitoACobrarDeParcelamentoHelper.getIdParcelamento();

					valorDescontosMultasAbonadasNoParcelamento = BigDecimal.ZERO;

					if(idParcelamento != null){

						existenciaMultaPorDescumprimento = this.verificarExistenciaMultaPorDescumprimento(idParcelamento);

						if(existenciaMultaPorDescumprimento){
							continue;
						}

						quantidadePrestacoesVencidas = this.obterQuantidadePrestacoesVencidas(idParcelamento,
										pNumeroDiasDebitoVencidoParaArrasto);

						if(quantidadePrestacoesVencidas == 0){
							quantidadePrestacoesVencidas = this.obterQuantidadePrestacoesVencidasPorDebitoACobrar(
											debitoACobrarDeParcelamentoHelper.getAnoMesReferenciaDebito(), idImovel,
											pNumeroDiasDebitoVencidoParaArrasto, new Short(debitoACobrarDeParcelamentoHelper
															.getNumeroPrestacaoDebito().toString()));
						}

					}else{

						Integer anoMesReferenciaDebito = debitoACobrarDeParcelamentoHelper.getAnoMesReferenciaDebito();

						existenciaMultaPorDescumprimento = this.verificarExistenciaMultaPorDescumprimentoPorDebitoACobrar(
										anoMesReferenciaDebito, idImovel);

						if(existenciaMultaPorDescumprimento){
							continue;
						}

						quantidadePrestacoesVencidas = this.obterQuantidadePrestacoesVencidasPorDebitoACobrar(
										debitoACobrarDeParcelamentoHelper.getAnoMesReferenciaDebito(), idImovel,
										pNumeroDiasDebitoVencidoParaArrasto, new Short(debitoACobrarDeParcelamentoHelper
														.getNumeroPrestacaoDebito().toString()));
					}

					if(idParcelamento != null){
						filtroParcelamento = new FiltroParcelamento();
						filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.ID, idParcelamento));
						filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade(FiltroParcelamento.RESOLUCAO_DIRETORIA);

						colecaoParcelamento = this.getControladorUtil().pesquisar(filtroParcelamento, Parcelamento.class.getName());

						if(!Util.isVazioOrNulo(colecaoParcelamento)){
							parcelamento = (Parcelamento) Util.retonarObjetoDeColecao(colecaoParcelamento);

							// 1.2.5. Caso seja para recobrar descontos e multas abonadas no
							// parcelamento
							if(ConstantesSistema.SIM.equals(pCobrarDescontosMultasArrasto)){

								// e haja valor a ser cobrado no parcelamento, deve gerar débito
								// cobrado de penalização
								gerarDebitoCobradoPenalizacao = this.verificarValorSerCobradoParcelamento(parcelamento);
							}

							// Cobrar descontos concedidos no parcelamento
							resolucaoDiretoria = parcelamento.getResolucaoDiretoria();

							if(resolucaoDiretoria != null){

								// Se o indicado para Realizar Arrasto da Resolução Diretoria está
								// com valor NAO, desconsidera este parcelamento para o arrasto
								if(resolucaoDiretoria.getIndicadorArrasto() != null
												&& resolucaoDiretoria.getIndicadorArrasto().equals(ConstantesSistema.NAO)){
									continue;
								}

								indicadorCobrarDescontosArrasto = resolucaoDiretoria.getIndicadorCobrarDescontosArrasto();

								if(indicadorCobrarDescontosArrasto != null && indicadorCobrarDescontosArrasto.equals(ConstantesSistema.SIM)){
									filtroCreditoARealizar = new FiltroCreditoARealizar();
									filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.PARCELAMENTO_ID,
													idParcelamento));

									colecaoCreditoARealizar = this.getControladorUtil().pesquisar(filtroCreditoARealizar,
													CreditoARealizar.class.getName());

									if(!Util.isVazioOrNulo(colecaoCreditoARealizar)){
										for(CreditoARealizar creditoARealizar : colecaoCreditoARealizar){
											idCreditoARealizar = creditoARealizar.getId();

											if(!idsCreditoARealizarCancelar.contains(idCreditoARealizar)){
												idsCreditoARealizarCancelar.add(idCreditoARealizar);
											}
										}
									}
								}
							}else{

								continue;
							}
						}
					}

					if(quantidadePrestacoesVencidas < pQuantidadeParcelasVencidasArrasto){
						continue;

					}else{

						// [SB0001] - Realizar o arrasto das parcelas restantes
						retorno = realizarArrastoParcelasRestantes(debitoACobrarDeParcelamentoHelper, indicadorArrasto, valorTotalDebitos);

						if(retorno != null){

							if(retorno[0] != null){
								valorTotalDebitos = (BigDecimal) retorno[0];
							}
							if(retorno[1] != null){
								mapDebitosCobrados.putAll((Map<DebitoCobrado, Collection>) retorno[1]);
							}

							if(retorno[2] != null){
								indicadorArrasto = (Boolean) retorno[2];
							}

							if(retorno[3] != null){
								colecaoDebitoACobrarContabilizacao = (Collection<ObjetoTransacao>) retorno[3];
							}
							if(retorno[4] != null){
								colecaoDebitoACobrarParaHistorico = (Collection<DebitoACobrar>) retorno[4];
							}

							if(retorno[5] != null){
								colecaoPagamento = (Collection<Pagamento>) retorno[5];
							}
						}

										// Transfere o débito a cobrar para histórico
						if(!Util.isVazioOrNulo(colecaoDebitoACobrarParaHistorico)){
							this.getControladorFaturamento().transferirDebitosACobrarParaHistorico(colecaoDebitoACobrarParaHistorico,
											Boolean.TRUE);
						}

						if(!Util.isVazioOrNulo(colecaoPagamento)){

							for(Pagamento pagamento : colecaoPagamento){
								// [UC0300] - Classificar Pagamentos e
								// Devolucoes
								this.getControladorArrecadacao().classificarPagamentosRegistroMovimentoArrecadadores(pagamento);
							}
						}

						// [SB0004] - Gerar Débito Cobrado de Penalização
						if(gerarDebitoCobradoPenalizacao){
							LOGGER.info("GEROU ARRASTO PENALIZAÇÃO = " + idImovel);

							if(parcelamento.getValorMulta() != null){
								valorDescontosMultasAbonadasNoParcelamento = valorDescontosMultasAbonadasNoParcelamento.add(parcelamento
												.getValorMulta());
							}
							if(parcelamento.getValorDescontoAntiguidade() != null){
								valorDescontosMultasAbonadasNoParcelamento = valorDescontosMultasAbonadasNoParcelamento.add(parcelamento
												.getValorDescontoAntiguidade());
							}

							DebitoCobrado debitoCobradoPenalizacao = this.gerarDebitoCobradoPenalizacao(parcelamento, idImovel,
											valorDescontosMultasAbonadasNoParcelamento);

							Collection<DebitoCobradoCategoria> colecaoDebitoCobradoCategoria = this.gerarDebitoCobradoCategoriaPenalizacao(
											idImovel, valorTotalDebitos, debitoCobradoPenalizacao);
							valorTotalDebitos = valorTotalDebitos.add(debitoCobradoPenalizacao.getValorPrestacao());

							// Guarda o débito cobrado gerado com sua coleção de categorias
							// associadas em Map que será retornado por este método
							mapDebitosCobrados.put(debitoCobradoPenalizacao, colecaoDebitoCobradoCategoria);
						}

						if(!Util.isVazioOrNulo(idsCreditoARealizarCancelar)){
							imovel = new Imovel();
							imovel.setId(idImovel);

							idsCreditoARealizarCancelarObj = idsCreditoARealizarCancelar.toArray();

							idsCreditoARealizarCancelarStr = new String[idsCreditoARealizarCancelar.size()];

							for(int i = 0; i < idsCreditoARealizarCancelar.size(); i++){
								idsCreditoARealizarCancelarStr[i] = idsCreditoARealizarCancelarObj[i].toString();
							}

							this.getControladorFaturamento().cancelarCreditoARealizar(idsCreditoARealizarCancelarStr, imovel,
											Usuario.USUARIO_BATCH, true);
						}
					}
				}
			}
		}


		if(indicadorArrasto){

			LOGGER.info("FEZ ARRASTO=" + idImovel + " Valor Débitos Arrasto: " + valorTotalDebitos);
		}

		retorno[0] = valorTotalDebitos;
		retorno[1] = mapDebitosCobrados;
		retorno[2] = indicadorArrasto;

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Consultar os parcelamentos ativos do imóvel recebido, realizados com forma de cobrança em
	 * conta e com prestações a serem cobradas de tipo de lançamento contábil diferente de Juros de
	 * Parcelamento
	 * 
	 * @author Hebert Falcão
	 * @date 02/03/2012
	 */
	public Collection<Parcelamento> pesquisarParcelamentosAtivo(Integer idImovel) throws ControladorException{

		Collection<Parcelamento> retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarParcelamentosAtivo(idImovel);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Verifica se o imóvel possua multa por descumprimento para a referência do parcelamento
	 * 
	 * @author Hebert Falcão
	 * @date 02/03/2012
	 */
	public boolean verificarExistenciaMultaPorDescumprimento(Integer idParcelamento) throws ControladorException{

		boolean retorno = false;

		try{
			retorno = repositorioCobranca.verificarExistenciaMultaPorDescumprimento(idParcelamento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Selecionar as prestações que não sejam referentes ao tipo de lançamento contábil Juros de
	 * Parcelamento e que estejam vencidos
	 * 
	 * @author Hebert Falcão
	 * @date 02/03/2012
	 */
	public Integer obterQuantidadePrestacoesVencidas(Integer idParcelamento, Integer fatorReducao) throws ControladorException{

		Integer retorno = null;

		try{
			retorno = repositorioCobranca.obterQuantidadePrestacoesVencidas(idParcelamento, fatorReducao);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Obter débito a cobrar ativo associado a um parcelamento e que tenha prestações a serem
	 * cobradas
	 * 
	 * @author Hebert Falcão
	 * @date 02/03/2012
	 */
	public Collection<DebitoACobrar> obterDebitoACobrarAtivoAssociadoParcelamento(Integer idParcelamento) throws ControladorException{

		Collection<DebitoACobrar> retorno = null;

		try{
			retorno = repositorioCobranca.obterDebitoACobrarAtivoAssociadoParcelamento(idParcelamento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	private Object[] gerarEOuEmitirCobrancaAcaoIndividual(CobrancaAcaoIndividualHelper cobrancaAcaoHelper, Imovel imovel,
					BigDecimal valorDocumento, Collection<ContaValoresHelper> colecaoContas,
					Collection<DebitoACobrar> colecaoDebitosACobrar, Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento,
					Collection<CreditoARealizar> colecaoCreditoARealizar, Empresa empresa, DocumentoEmissaoForma documentoEmissaoForma,
					Cliente cliente, Date dataAtual, boolean geracaoConjunta) throws ControladorException{

		Object[] retorno = new Object[2];

		CobrancaAcao cobrancaAcao = null;
		DocumentoTipo documentoTipo = null;
		Integer codigoRetorno = null;
		Object[] dadosDocumentoArray = null;
		Integer numeroSequencialDocumento = null;
		Integer idCobrancaDocumento = null;
		CobrancaDocumento cobrancaDocumento = null;
		Integer idOrdemServico = null;
		OrdemServico ordemServico = null;

		if(cobrancaAcaoHelper.getCobrancaAcao().getId().equals(CobrancaAcao.AVISO_CORTE)
						|| cobrancaAcaoHelper.getCobrancaAcao().getId().equals(CobrancaAcao.CORTE_FISICO)){

			cobrancaAcao = cobrancaAcaoHelper.getCobrancaAcao();
			documentoTipo = cobrancaAcao.getDocumentoTipo();

			// 3.1.1. Caso o Indicador de Verificação de Existência da Ação para o Imóvel
			// esteja com o valor 1 (sim):
			if(cobrancaAcaoHelper.getIndicadorExistenciaAcaoImovel().equals(ConstantesSistema.SIM)){
				// 3.1.1.1. O sistema verifica existência de aviso de corte para o
				// imóvel
				// [SB0004 - Verificar Existência do Documento de Cobrança].
				codigoRetorno = this.verificarExistenciaDocumentoCobranca(cobrancaAcao, imovel.getId(), geracaoConjunta);
			}

			if(codigoRetorno != null && codigoRetorno.equals(ConstantesSistema.ATIVIDADE_EFETUADA_COM_SUCESSO)){

				// 3.1.2. O sistema gera um documento de cobrança do tipo "Aviso de Corte" para
				// o imóvel
				// [SB0001 - Gerar Documento de Cobrança - para o Id da Ação de cobrança referente a
				// Aviso de Corte
				// (CBAC_ID da tabela COBRANCA_ACAO correspondente ao Aviso de Corte)].
				// Gerar documento de cobrança
				dadosDocumentoArray = this.gerarDocumentoCobranca(imovel, cobrancaAcaoHelper.getCobrancaAcao().getIndicadorGeracaoTaxa(),
								colecaoContas, colecaoGuiasPagamento, colecaoDebitosACobrar, BigDecimal.ZERO, BigDecimal.ZERO, null,
								documentoEmissaoForma, documentoTipo, null, null, empresa, null, cobrancaAcao, valorDocumento, dataAtual,
								colecaoCreditoARealizar, cliente, null, null, null, Boolean.TRUE);

				if(!Util.isVazioOrNulo(dadosDocumentoArray)){
					cobrancaDocumento = new CobrancaDocumento();
					idCobrancaDocumento = (Integer) dadosDocumentoArray[4];
					numeroSequencialDocumento = (Integer) dadosDocumentoArray[2];
					cobrancaDocumento.setId(idCobrancaDocumento);
					cobrancaDocumento.setNumeroSequenciaDocumento(numeroSequencialDocumento);
					cobrancaAcaoHelper.setCobrancaDocumento(cobrancaDocumento);

					if(cobrancaAcaoHelper.getCobrancaAcao().getId().equals(CobrancaAcao.CORTE_FISICO)){
						if(dadosDocumentoArray[3] != null){
							idOrdemServico = (Integer) dadosDocumentoArray[3];
							ordemServico = new OrdemServico();
							ordemServico.setId(idOrdemServico);
							cobrancaAcaoHelper.setOrdemServico(ordemServico);
						}
					}
				}

			}

			// 3.1.3. O sistema retorna a Identificação do Documento de Cobrança (CBDO_ID da
			// tabela COBRANCA_DOCUMENTO) e
			// o Código de Retorno da Atividade para o caso de uso de origem.
			retorno[0] = (Integer) codigoRetorno;
			retorno[1] = (CobrancaAcaoIndividualHelper) cobrancaAcaoHelper;

		}

		return retorno;

	}

	private RelatorioAvisoEOrdemCorteIndividual emitirCobrancaAcaoIndividual(Imovel imovel, BigDecimal valorDocumento, Cliente cliente,
					Usuario usuario, List<CobrancaAcaoIndividualHelper> cobrancaAcaoHelper) throws ControladorException{

		RelatorioAvisoEOrdemCorteIndividual relatorio = null;
		Collection<RelatorioAvisoEOrdemCorteIndividualBean> colecaoBean = new ArrayList<RelatorioAvisoEOrdemCorteIndividualBean>();

		for(CobrancaAcaoIndividualHelper itemHelper : cobrancaAcaoHelper){
			colecaoBean.add(this.emitirCobrancaAcaoIndividual(imovel, valorDocumento, cliente, usuario, itemHelper));
		}
		relatorio = new RelatorioAvisoEOrdemCorteIndividual(usuario);
		relatorio.addParametro("relatorioAvisoEOrdemCorteIndividualBean", colecaoBean);
		relatorio.addParametro("tipoFormatoRelatorio", TarefaRelatorio.TIPO_PDF);

		return relatorio;
	}

	private RelatorioAvisoEOrdemCorteIndividualBean emitirCobrancaAcaoIndividual(Imovel imovel, BigDecimal valorDocumento, Cliente cliente,
					Usuario usuario, CobrancaAcaoIndividualHelper cobrancaAcaoHelper) throws ControladorException{

		// Dados do relatório

		RelatorioAvisoEOrdemCorteIndividualBean relatorioBean = new RelatorioAvisoEOrdemCorteIndividualBean();

		Integer numeroItens = 0;

		BigDecimal debitosAnteriores = BigDecimal.ZERO;

		Collection<String> mesAnoDebitos = new ArrayList<String>();
		Collection<String> vencimentoDebitos = new ArrayList<String>();
		Collection<BigDecimal> valorDebitos = new ArrayList<BigDecimal>();

		String dataDebitoAnterior = null;
		String representacaoNumericaCodBarra = "";
		String numDocumentoAvisoCorteStr = "";
		String numDocumentoCorteStr = "";
		String numOrdemServicoStr = "";

		DocumentoTipo documentoTipo = null;
		if(cobrancaAcaoHelper.getCobrancaAcao() != null && cobrancaAcaoHelper.getCobrancaAcao().getDocumentoTipo() != null){
			documentoTipo = cobrancaAcaoHelper.getCobrancaAcao().getDocumentoTipo();
		}

		CobrancaDocumento cobrancaDocumento = cobrancaAcaoHelper.getCobrancaDocumento();

		if(cobrancaDocumento != null){

			if(cobrancaAcaoHelper.getOrdemServico() != null){
				numDocumentoCorteStr = Integer.toString(cobrancaDocumento.getNumeroSequenciaDocumento());
				numOrdemServicoStr = cobrancaAcaoHelper.getOrdemServico().getId().toString();
			}else{
				numDocumentoAvisoCorteStr = Integer.toString(cobrancaDocumento.getNumeroSequenciaDocumento());
			}

			Integer idLocalidade = null;
			if(imovel.getLocalidade() != null){
				idLocalidade = imovel.getLocalidade().getId();
			}

			// [UC0229] Obtém a representação numérica do código de barra
			representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(5, valorDocumento,
							idLocalidade, imovel.getId(), null, null, null, null, numDocumentoAvisoCorteStr, documentoTipo.getId(), null,
							null, null, null, null, null);

			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItemConta = null;
			Collection<Object[]> colecaoCobrancaDocumentoItemGuiaPagamento = null;
			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoDebitoACobrar = null;

			try{
				colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
								.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemConta)){
					numeroItens = numeroItens + colecaoCobrancaDocumentoItemConta.size();
				}

				colecaoCobrancaDocumentoItemGuiaPagamento = this.repositorioCobranca
								.selecionarDadosCobrancaDocumentoItemReferenteGuiaPagamento(cobrancaDocumento);

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemGuiaPagamento)){
					numeroItens = numeroItens + colecaoCobrancaDocumentoItemGuiaPagamento.size();
				}

				colecaoCobrancaDocumentoDebitoACobrar = this.repositorioCobranca
								.selecionarCobrancaDocumentoItemReferenteDebitoACobrar(cobrancaDocumento);

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoDebitoACobrar)){
					numeroItens = numeroItens + colecaoCobrancaDocumentoDebitoACobrar.size();
				}
			}catch(ErroRepositorioException ex){
				throw new ControladorException("erro.sistema", ex);
			}

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemConta)){
				// Conta
				int quantidadeAIgnorar = colecaoCobrancaDocumentoItemConta.size() - 15;
				int contador = 1;
				Integer mesAnoMaisAnterior = 300012;

				ContaGeral contaGeral = null;
				Conta conta = null;
				int referencia = 0;
				BigDecimal valorTotalAux = null;
				Date dataVencimentoConta = null;
				String dataVencimentoContaStr = "";
				String referenciaStr = "";

				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItemConta){
					contaGeral = cobrancaDocumentoItem.getContaGeral();
					conta = contaGeral.getConta();
					referencia = conta.getReferencia();
					valorTotalAux = conta.getValorTotal();

					// Exibir apenas os 15 últimos itens
					if(contador > quantidadeAIgnorar){
						referenciaStr = Util.formatarAnoMesSemBarraParaMesAnoComBarra(referencia);
						mesAnoDebitos.add(referenciaStr);

						dataVencimentoConta = conta.getDataVencimentoConta();
						dataVencimentoContaStr = Util.formatarData(dataVencimentoConta);
						vencimentoDebitos.add(dataVencimentoContaStr);

						valorDebitos.add(valorTotalAux);

						if(Util.compararAnoMesReferencia(referencia, mesAnoMaisAnterior, "<")){
							mesAnoMaisAnterior = referencia;
						}
					}else{
						debitosAnteriores = debitosAnteriores.add(valorTotalAux);
					}

					contador++;
				}

				if(debitosAnteriores.compareTo(BigDecimal.ZERO) > 0){
					dataDebitoAnterior = Util.formatarAnoMesSemBarraParaMesAnoComBarra(mesAnoMaisAnterior);
				}
			}else if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemGuiaPagamento)){
				// Guia Pagamento
				BigDecimal valorItemCobrado = null;

				for(Object[] objeto : colecaoCobrancaDocumentoItemGuiaPagamento){
					valorItemCobrado = (BigDecimal) objeto[0];

					debitosAnteriores = debitosAnteriores.add(valorItemCobrado);
				}
			}else if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoDebitoACobrar)){
				// Débito a Cobrar
				DebitoACobrarGeral debitoACobrarGeral = null;
				DebitoACobrar debitoACobrar = null;
				BigDecimal valorTotalAux = null;

				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoDebitoACobrar){
					debitoACobrarGeral = cobrancaDocumentoItem.getDebitoACobrarGeral();
					debitoACobrar = debitoACobrarGeral.getDebitoACobrar();
					valorTotalAux = debitoACobrar.getValorTotal();

					debitosAnteriores = debitosAnteriores.add(valorTotalAux);
				}
			}

			// Id do Imóvel
			Integer idImovel = imovel.getId();

			// Matrícula do imóvel
			String idImovelStr = imovel.getIdParametrizado();
			relatorioBean.setMatricula(idImovelStr);

			// Inscrição formatada
			String inscricaoFormatada = imovel.getInscricaoFormatada();
			relatorioBean.setInscricao(inscricaoFormatada);

			// Endereço do imóvel
			String enderecoImovel = this.getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
			relatorioBean.setEndereco(enderecoImovel);

			String nomeCliente = "";

			if(cliente != null){
				nomeCliente = cliente.getNome();
			}

			// Nome do cliente
			relatorioBean.setCliente(nomeCliente);

			// Número do documentod e cobrança do aviso de corte
			relatorioBean.setNumDocumentoAvisoCorte(numDocumentoAvisoCorteStr);

			// Número do documentod e cobrança do corte
			relatorioBean.setNumDocumentoCorte(numDocumentoCorteStr);

			// Número OS
			relatorioBean.setNumeroOrdemServico(numOrdemServicoStr);

			// Gerar detalhamento das contas
			relatorioBean.gerarDetail(mesAnoDebitos, vencimentoDebitos, valorDebitos);

			// Valor dos débitos anteriores ao primeiro débito exibido
			String debitosAnterioresStr = Util.formatarMoedaReal(debitosAnteriores);
			relatorioBean.setDebitosAnteriores(debitosAnterioresStr);

			// Valor total
			String valorDocumentoStr = Util.formatarMoedaReal(valorDocumento);
			relatorioBean.setValorTotalDebito(valorDocumentoStr);

			// Código de barras
			String representacaoNumericaCodBarraFormatada = "";
			String representacaoNumericaCodBarraSemDigito = "";

			if(!Util.isVazioOuBranco(representacaoNumericaCodBarra)){
				representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11) + "-"
								+ representacaoNumericaCodBarra.substring(11, 12) + " " + representacaoNumericaCodBarra.substring(12, 23)
								+ "-" + representacaoNumericaCodBarra.substring(23, 24) + " "
								+ representacaoNumericaCodBarra.substring(24, 35) + "-" + representacaoNumericaCodBarra.substring(35, 36)
								+ " " + representacaoNumericaCodBarra.substring(36, 47) + "-"
								+ representacaoNumericaCodBarra.substring(47, 48);

				representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra.substring(0, 11)
								+ representacaoNumericaCodBarra.substring(12, 23) + representacaoNumericaCodBarra.substring(24, 35)
								+ representacaoNumericaCodBarra.substring(36, 47);
			}

			relatorioBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
			relatorioBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);

			// Data do primeiro débito exibido
			relatorioBean.setDataDebitoAnterior(dataDebitoAnterior);

			// Númer de itens
			String numeroItensStr = Integer.toString(numeroItens);
			relatorioBean.setNumeroItens(numeroItensStr);

			// Hidrômetro / Local de instalção
			String localInstalacao = "";
			String hidrometro = "";

			LigacaoAgua ligacaoAgua = imovel.getLigacaoAgua();
			HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = ligacaoAgua.getHidrometroInstalacaoHistorico();

			if(hidrometroInstalacaoHistorico != null && hidrometroInstalacaoHistorico.getDataRetirada() == null){
				hidrometro = hidrometroInstalacaoHistorico.getNumeroHidrometro();

				HidrometroLocalInstalacao hidrometroLocalInstalacao = hidrometroInstalacaoHistorico.getHidrometroLocalInstalacao();

				if(hidrometroLocalInstalacao != null){
					localInstalacao = hidrometroLocalInstalacao.getDescricao();
				}
			}

			relatorioBean.setLocalInstalacao(localInstalacao);
			relatorioBean.setHidrometro(hidrometro);

		}

		return relatorioBean;
	}

	/**
	 * [UC3052] Gerar e Emitir Aviso de Corte e Ordem de Corte Individual
	 * 
	 * @author Hebert Falcão, Yara Souza
	 * @throws ControladorException
	 * @date 16/03/2012,20/05/2012
	 *       1.1. Id do imóvel.
	 *       1.2. Valor do documento.
	 *       1.3. Lista de Contas.
	 *       1.4. Lista de Débitos a Cobrar.
	 *       1.5. Lista de Guias de Pagamento.
	 *       1.6. Lista de Crédito a Realizar.
	 *       1.7. Lista de Ações de Cobrança.
	 *       1.8. Indicador da Atividade.
	 *       1.9. Código de Retorno da Atividade.
	 *       1.10. Identificação do Documento de Cobrança.
	 */
	public CobrancaAcaoIndividualHelper gerarEmitirAvisoDeCorteOrdemDeCorteIndividual(Integer idImovel, BigDecimal valorDocumento,
					Collection<ContaValoresHelper> colecaoContas, Collection<DebitoACobrar> colecaoDebitosACobrar,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento, Collection<CreditoARealizar> colecaoCreditoARealizar,
					Usuario usuario, Collection<CobrancaAcaoIndividualHelper> colecaoCobrancaAcaoHelper, Short indicadorAtividade)
					throws ControladorException{

		CobrancaAcaoIndividualHelper retorno = null;
		// 2. Atribuir o valor 0 (zero) ao Código de Retorno da Atividade.
		Integer codigoRetornoAtividade = 0;

		try{

			// Imóvel
			Imovel imovel = this.getControladorImovel().pesquisarImovel(idImovel);

			if(imovel == null){
				throw new ActionServletException("atencao.pesquisa.nenhumresultado", null, "Imóvel");
			}

			Rota rota = imovel.getRota();
			Empresa empresa = rota.getEmpresa();

			Date dataAtual = new Date();

			DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
			documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

			// Cliente
			Cliente cliente = null;
			Integer idCliente = this.getControladorImovel().consultarClienteRelacaoTipoPorImovel(idImovel,
							ClienteRelacaoTipo.USUARIO.shortValue());
			if(idCliente != null){
				cliente = this.getControladorCliente().pesquisarCliente(idCliente);
			}

			// *****Tem que fazer o filtro fora, da ação de cobrança.
			boolean geracaoConjunta = false;
			if(colecaoCobrancaAcaoHelper.size() == 2){ // FIXME ALERT - Ahgl Vem sempre da Action
														// com 2
				geracaoConjunta = true;
			}

			Iterator it = colecaoCobrancaAcaoHelper.iterator();
			List<CobrancaAcaoIndividualHelper> listaCobrancaAcaoHelper = new ArrayList<CobrancaAcaoIndividualHelper>();
			while(it.hasNext()){

				CobrancaAcaoIndividualHelper cobrancaAcaoHelper = (CobrancaAcaoIndividualHelper) it.next();

				// 3. Caso o Indicador da Atividade recebido esteja com o valor 1 (gerar) ou 2
				// (gerar e emitir):
				if(indicadorAtividade.equals(ConstantesSistema.GERAR) || indicadorAtividade.equals(ConstantesSistema.GERAR_EMITIR)){
					Object[] retornoGerarEOuEmitir = this.gerarEOuEmitirCobrancaAcaoIndividual(cobrancaAcaoHelper, imovel, valorDocumento,
									colecaoContas, colecaoDebitosACobrar, colecaoGuiasPagamento, colecaoCreditoARealizar, empresa,
									documentoEmissaoForma, cliente, dataAtual, geracaoConjunta);

					codigoRetornoAtividade = (Integer) retornoGerarEOuEmitir[0];
					cobrancaAcaoHelper = (CobrancaAcaoIndividualHelper) retornoGerarEOuEmitir[1];
					cobrancaAcaoHelper.setCodigoRetornoAtividade(codigoRetornoAtividade);
					// **** ver se nao da erro de modificação na mesma coleção.
					listaCobrancaAcaoHelper.add(cobrancaAcaoHelper);
				}
			}

			// 4. Caso o Indicador da Atividade recebido esteja com o valor 2 (gerar e emitir) ou 3
			// (emitir):
			if(indicadorAtividade.equals(ConstantesSistema.GERAR_EMITIR) || indicadorAtividade.equals(ConstantesSistema.EMITIR)){

				RelatorioAvisoEOrdemCorteIndividual relatorio = this.emitirCobrancaAcaoIndividual(imovel, valorDocumento, cliente, usuario,
								listaCobrancaAcaoHelper);
				retorno = listaCobrancaAcaoHelper.iterator().next();
				retorno.setRelatorio(relatorio);

			}
		}catch(Exception e){
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.aviso.ordem.corte.nao.gerado");
		}

		return retorno;
	}

	/**
	 * [UC0458] - Imprimir Ordem de Serviço
	 * [SB9000] - Obter Data Corte ou Supressão
	 * 
	 * @param ordemServico
	 * @return
	 */
	public Date obterDataCorteOuSupressao(OrdemServico ordemServico, String indicadorDataRetorno){

		Date dataRetorno = null;
		Date dataCorteOuSupressao = null;
		Date dataCorte = null;
		Date dataSupressao = null;

		if(ordemServico.getImovel() != null && ordemServico.getImovel().getLigacaoAguaSituacao() != null
						&& ordemServico.getImovel().getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.CORTADO)){

			if(ordemServico.getImovel().getLigacaoAgua() != null && ordemServico.getImovel().getLigacaoAgua().getDataCorte() != null){
				dataCorteOuSupressao = ordemServico.getImovel().getLigacaoAgua().getDataCorte();
				dataCorte = ordemServico.getImovel().getLigacaoAgua().getDataCorte();
			}

		}else{
			if(ordemServico.getImovel().getLigacaoAgua() != null && ordemServico.getImovel().getLigacaoAgua().getDataSupressao() != null){
				dataCorteOuSupressao = ordemServico.getImovel().getLigacaoAgua().getDataSupressao();
				dataSupressao = ordemServico.getImovel().getLigacaoAgua().getDataSupressao();
			}else{
				if(ordemServico.getImovel().getLigacaoAgua() != null && ordemServico.getImovel().getLigacaoAgua().getDataCorte() != null){
					dataCorteOuSupressao = ordemServico.getImovel().getLigacaoAgua().getDataCorte();
					dataCorte = ordemServico.getImovel().getLigacaoAgua().getDataCorte();
				}
			}
		}

		if(indicadorDataRetorno != null){
			if(indicadorDataRetorno.equals(ConstantesSistema.INDICADOR_DATA_CORTE)){
				dataRetorno = dataCorte;
			}else if(indicadorDataRetorno.equals(ConstantesSistema.INDICADOR_DATA_SUPRESSAO)){
				dataRetorno = dataSupressao;
			}else{
				dataRetorno = dataCorteOuSupressao;
			}
		}else{
			dataRetorno = dataCorteOuSupressao;
		}

		return dataRetorno;

	}

	/**
	 * [UC0458] - Imprimir Ordem de Serviço
	 * [SB9001] - Obter Contas Vencidas do Imóvel
	 * 
	 * @param ordemServico
	 * @return
	 */
	public Object[] obterContasVencidasDoImovel(Integer idImovel, boolean limitarQuantidade) throws ControladorException{

		Object[] retorno = new Object[5];

		int tamanho = 9;
		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = this.obterDebitoImovelOuCliente(1, // indicadorDebito
						idImovel.toString(), // idImovel
						null, // codigoCliente
						null, // clienteRelacaoTipo
						"000101", // anoMesInicialReferenciaDebito
						"999912", // anoMesFinalReferenciaDebito
						dataVencimentoInicial, // anoMesInicialVencimentoDebito
						dataVencimentoFinal, // anoMesFinalVencimentoDebito
						2, // indicadorPagamento
						1, // indicadorConta
						2, // indicadorDebitoACobrar
						2, // indicadorCreditoARealizar
						2, // indicadorNotasPromissorias
						2, // indicadorGuiasPagamento
						2, // indicadorCalcularAcrescimoImpontualidade
						true,// indicadorContas
						null, null, null, null, ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

		// 2
		Integer quantidadeContasVencidas = 0;
		BigDecimal valorContasVencidas = BigDecimal.ZERO;
		BigDecimal diferencaContasVencidas = BigDecimal.ZERO;

		// 3
		Object[] ultimasContaVencidas = new Object[tamanho];
		ContaVencidaHelper contaVencidaHelper = null;

		if(imovelDebitoCredito != null && imovelDebitoCredito.getColecaoContasValores() != null
						&& !imovelDebitoCredito.getColecaoContasValores().isEmpty()){

			if(!limitarQuantidade){
				tamanho = imovelDebitoCredito.getColecaoContasValores().size();
				ultimasContaVencidas = new Object[tamanho];
			}

			BigDecimal valorTotalContasVencidas = this.getValorTotalContas(imovelDebitoCredito.getColecaoContasValores().toArray());

			// 3.1
			if(imovelDebitoCredito.getColecaoContasValores().size() > tamanho){
				int i = 1;

				Iterator it = imovelDebitoCredito.getColecaoContasValores().iterator();
				while(it.hasNext()){

					if(i < tamanho){
						ContaValoresHelper contaHelper = (ContaValoresHelper) it.next();
						Conta conta = contaHelper.getConta();
						contaVencidaHelper = new ContaVencidaHelper();
						contaVencidaHelper.setReferencia(conta.getReferencia() + "");
						contaVencidaHelper.setValor(conta.getValorTotalContaBigDecimal());
						contaVencidaHelper.setVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						ultimasContaVencidas[i] = contaVencidaHelper;
						i++;

					}else{
						break;
					}

				}

				quantidadeContasVencidas = tamanho - 1;
				valorContasVencidas = this.getValorTotalContas(ultimasContaVencidas);
				diferencaContasVencidas = valorTotalContasVencidas.subtract(valorContasVencidas);

				contaVencidaHelper = new ContaVencidaHelper();
				contaVencidaHelper.setReferencia("ANTES");
				contaVencidaHelper.setValor(diferencaContasVencidas);
				contaVencidaHelper.setVencimento("");
				ultimasContaVencidas[0] = contaVencidaHelper;

			}else{

				int i = 0;
				Iterator it = imovelDebitoCredito.getColecaoContasValores().iterator();
				tamanho = imovelDebitoCredito.getColecaoContasValores().size();
				while(it.hasNext()){

					if(i < tamanho){
						ContaValoresHelper contaHelper = (ContaValoresHelper) it.next();
						Conta conta = contaHelper.getConta();
						contaVencidaHelper = new ContaVencidaHelper();
						contaVencidaHelper.setReferencia(conta.getReferencia() + "");
						contaVencidaHelper.setValor(conta.getValorTotalContaBigDecimal());
						contaVencidaHelper.setVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						ultimasContaVencidas[i] = contaVencidaHelper;
						i++;
					}else{
						break;
					}

				}

				quantidadeContasVencidas = tamanho;
				valorContasVencidas = this.getValorTotalContas(ultimasContaVencidas);

			}

		}

		retorno[0] = quantidadeContasVencidas;
		retorno[1] = valorContasVencidas;
		retorno[2] = ultimasContaVencidas;

		return retorno;
	}

	/**
	 * [UC0458] - Imprimir Ordem de Serviço
	 * [SB9002] - Obter Dados Últimos Consumos
	 * 
	 * @author Carlos Chrystian
	 * @date 11/04/2013
	 * @param ordemServico
	 * @return
	 */
	public Collection<DadosUltimosConsumosHelper> obterDadosUltimosConsumos(Integer idImovel, int numeroMeses){

		Collection<DadosUltimosConsumosHelper> retorno = new ArrayList<DadosUltimosConsumosHelper>();

		try{

			// 1. O sistema seleciona os dados do histórico de consumo e de medição do imóvel nos
			// últimos meses

			// (PARM_AMREFERENCIAFATURAMENTO da tabela SISTEMA_PARAMETROS)
			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

			// Subtrai o número de meses informado do valor do parâmetro
			// PARM_AMREFERENCIAFATURAMENTO
			Integer anoMesReferenciaAnoAnterior = Util.subtraiAteSeisMesesAnoMesReferencia(sistemaParametros.getAnoMesFaturamento(), 12);

			// Consulta os dados os últimos consumos
			Collection<Object[]> colecaoDadosUltimosConsumos = null;
			try{
				colecaoDadosUltimosConsumos = repositorioCobranca.obterDadosUltimosConsumos(idImovel, anoMesReferenciaAnoAnterior,
								sistemaParametros.getAnoMesFaturamento());
			}catch(ErroRepositorioException e){
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			DadosUltimosConsumosHelper dadosUltimosConsumosHelper = null;

			for(Object[] objects : colecaoDadosUltimosConsumos){
				dadosUltimosConsumosHelper = new DadosUltimosConsumosHelper();
				// 1.1. Referência do Consumo (CSHI_AMFATURAMENTO);
				String referenciaFaturamento = Util.formatarAnoMesParaMesAno(((BigDecimal) objects[0]).intValue());
				dadosUltimosConsumosHelper.setReferenciaConsumo(referenciaFaturamento);
				// 1.2. Consumo Faturado (CSHI_NNCONSUMOFATURADOMES);
				String consumoFaturado = "0";
				if(objects[1] != null){
					consumoFaturado = ((BigDecimal) objects[1]).toString();
				}
				dadosUltimosConsumosHelper.setConsumoFaturado(Util.completarStringZeroEsquerda(consumoFaturado, 4));
				// 1.3. Leitura Faturada (MDHI_NNLEITURAATUALFATURAMENTO da tabela
				// MEDICAO_HISTORICO).
				String leituraFaturada = "0";
				if(objects[2] != null){
					leituraFaturada = Util.completarStringZeroEsquerda(((BigDecimal) objects[2]).toString(), 4);
				}
				dadosUltimosConsumosHelper.setLeituraFaturada(leituraFaturada);

				// Adiciona a helper na coleção
				retorno.add(dadosUltimosConsumosHelper);
			}
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return retorno;
	}

	private BigDecimal getValorTotalContas(Object[] contas){

		BigDecimal valorTotal = BigDecimal.ZERO;
		for(int i = 0; i < contas.length; i++){
			if(contas[i] != null){
				if(contas[i] instanceof ContaValoresHelper){
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contas[i];
					valorTotal = valorTotal.add(contaValoresHelper.getValorTotalConta());
				}
				if(contas[i] instanceof ContaVencidaHelper){
					ContaVencidaHelper contaValoresHelper = (ContaVencidaHelper) contas[i];
					valorTotal = valorTotal.add(contaValoresHelper.getValor());
				}
			}

		}

		LOGGER.info("valorTotal = " + valorTotal);
		return valorTotal;

	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Calcula os acrescimmos por Impontualidade(multa,juros de mora e atualização monetaria)
	 * 
	 * @author Yara Souza
	 * @date 03/04/2012
	 * @param anoMesReferenciaDebito
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param valorDebito
	 * @param valorMultasCobradas
	 * @param indicadorMulta
	 * @param anoMesArrecadacao
	 * @param idConta
	 * @param dataEmissaoDocumento
	 * @param indicadorEmissaoDocumento
	 *            Na emissão do documento o indicador que estiver como 1 no
	 *            ParametroAcrescimosEmissaoDocumento deve ser considerado, o que tiver como 2 deve
	 *            ter o valor zerado, pois não será cobrado nesse momento. Caso não seja emissão, a
	 *            lógica
	 *            é invertida.
	 * @return
	 * @throws ControladorException
	 */
	@Deprecated
	public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidadeOLD(int anoMesReferenciaDebito, Date dataVencimento,
					Date dataPagamento, BigDecimal valorDebito, BigDecimal valorMultasCobradas, short indicadorMulta,
					String anoMesArrecadacao, Integer idConta, Date dataEmissaoDocumento, Short indicadorEmissaoDocumento)
					throws ControladorException{

		// Utilizar: calcularAcrescimoPorImpontualidadeBancoDeDados

		SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		// 2. Caso o imóvel tenha indicador de débito automático e o recebimento, mesmo em atraso,
		// tenha sido através de débito automático, o sistema não calcula os acréscimos de
		// impontualidade.
		// ...

		// 3. Caso a data de vencimento não seja um dia útil, atribuir à data de vencimento o
		// próximo dia útil;
		Calendar novaDataVencimento = new GregorianCalendar();
		novaDataVencimento.setTime(dataVencimento);

		if(sistemaParametros.getLogradouro() == null || sistemaParametros.getLogradouro().getId() == null){
			throw new IllegalStateException("erro.logradouro_nao_definido_parametros");
		}

		Collection<Logradouro> colecaoLogradouro = getControladorEndereco().pesquisarLogradouroCompleto(null, null, null, null, null, null,
						null, sistemaParametros.getLogradouro().getId().toString(), null, null, null, Integer.valueOf(0));
		if(colecaoLogradouro == null || colecaoLogradouro.isEmpty()){
			throw new IllegalStateException("erro.logradouro_nao_definido_parametros");
		}
		Logradouro logradouro = colecaoLogradouro.iterator().next();
		if(logradouro == null || logradouro.getMunicipio() == null){
			throw new IllegalStateException("erro.municipio_de_logradouro_nao_definido_parametros");
		}
		Municipio municipio = logradouro.getMunicipio();

		// verifica se a data de vencimento deve ser "adiada" por ser feriado ou fim de semana
		novaDataVencimento.setTime(this.verificarDataUtilVencimento(novaDataVencimento.getTime(), municipio));

		int numeroDiasVencimentoCobranca = sistemaParametros.getNumeroDiasVencimentoCobranca().intValue();

		Calendar dataCorrenteMenosNumeroDiasVencimentoCobranca = new GregorianCalendar();
		dataCorrenteMenosNumeroDiasVencimentoCobranca.setTime(new Date());
		dataCorrenteMenosNumeroDiasVencimentoCobranca.add(Calendar.DAY_OF_MONTH, (-numeroDiasVencimentoCobranca));

		// 4. Caso a data de pagamento não seja nula:
		BigDecimal valorMulta = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;

		Calendar dataCorrente = new GregorianCalendar();
		dataCorrente.setTime(new Date());

		boolean calcular = true;
		Calendar novaDataPagamento = new GregorianCalendar();

		if(dataPagamento != null){
			novaDataPagamento.setTime(dataPagamento);
			// 4.1. Caso a data de pagamento não seja superior a data de vencimento atribuir o valor
			// zero para os valores de multa,
			// juros de mora e atualização monetária e retornar para o caso de uso que chamou esta
			// funcionalidade.
			if(novaDataPagamento.compareTo(novaDataVencimento) <= 0){
				calcular = false;
			}

			// 5. Caso contrário:
		}else if(dataCorrente.compareTo(novaDataVencimento) <= 0){

			// 5.1. Caso a data corrente não seja superior a data de vencimento atribuir o valor
			// zero para os valores de multa,
			// juros de mora e atualização monetária e retornar para o caso de uso que chamou esta
			// funcionalidade.
			calcular = false;

			// 6. Caso contrário:
		}else if(novaDataVencimento.compareTo(dataCorrenteMenosNumeroDiasVencimentoCobranca) >= 0){
			// 6.1. Caso a data de vencimento seja igual ou posterior à data corrente menos três
			// dias atribuir o valor zero para os valores de multa,
			// juros de mora e atualização monetária e retornar para o caso de uso que chamou esta
			// funcionalidade.
			calcular = false;
		}

		Calendar dataFinal = new GregorianCalendar();
		// 7. Caso a data de pagamento seja nula, atribuir a data de pagamento à Data Final.
		if(novaDataPagamento != null){
			dataFinal = novaDataPagamento;
		}else{
			// 8. Caso contrário, atribuir a data corrente à Data Final.
			dataFinal = dataCorrente;
		}

		novaDataVencimento.setTime(dataVencimento);

		// 9. O sistema seleciona os índices dos acréscimos por impontualidade com ano-mês maior ou
		// igual ao ano-mês da Data de Vencimento e menor ou igual ao ano-mês da Data Final
		// (a partir da tabela INDICES_ACRESCIMOS_IMPONTUALIDADE com IACI_AMREFERENCIA between
		// ano-mês da Data de Vencimento e
		// ano-mês da Data Final =ano/mês de referência do débito)

		Integer anoMesDataVencimento = Util.getAnoMesComoInteger(novaDataVencimento.getTime());
		Integer anoMesDataFinal = Util.getAnoMesComoInteger(dataFinal.getTime());

		CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = new CalcularAcrescimoPorImpontualidadeHelper();

		IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade = null;

		if(calcular){
			BigDecimal indiceMulta = BigDecimal.ZERO;
			BigDecimal indiceJurosMora = BigDecimal.ZERO;
			BigDecimal fatorAtualizacaMonetaria = BigDecimal.ZERO;

			// 11. Inicializar as variáveis: valor de multa, valor de juros de mora, valor de
			// atualização monetária,
			// índice de juros de mora, índice de atualização monetária com zero.
			// (definir variáveis com 6 casas decimais para fins de precisão no cálculo)

			valorMulta = BigDecimal.ZERO;
			valorJurosMora = BigDecimal.ZERO;
			valorAtualizacaoMonetaria = BigDecimal.ZERO;
			indiceJurosMora = BigDecimal.ZERO;
			fatorAtualizacaMonetaria = BigDecimal.ZERO;

			String pMaiorAnoMesContaSemAcrescimo = (String) ParametroCobranca.P_MAIOR_ANO_MES_CONTA_SEM_ACRESCIMOS.executar();
			if(Util.compararAnoMesReferencia(anoMesReferenciaDebito, Util.converterStringParaInteger(pMaiorAnoMesContaSemAcrescimo), ">")){

				try{

					HashMap<Integer, IndicesAcrescimosImpontualidade> mapIndicesAcrescimosImpontualidade = repositorioCobranca
									.pesquisarIndiceAcrescimoImpontualidade(anoMesDataVencimento, anoMesDataFinal);

					if(mapIndicesAcrescimosImpontualidade.isEmpty()){
						try{
							indicesAcrescimosImpontualidade = repositorioCobranca
											.pesquisarMenorIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);

							if(indicesAcrescimosImpontualidade != null){
								indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
								indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
								fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
							}else{
								indiceMulta = BigDecimal.ZERO;
								indiceJurosMora = BigDecimal.ZERO;
								fatorAtualizacaMonetaria = BigDecimal.ZERO;
							}

						}catch(ErroRepositorioException ex){
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", ex);
						}
					}

					BigDecimal valorJurosCobrados = BigDecimal.ZERO;
					BigDecimal valorAtualizacaoCobradas = BigDecimal.ZERO;
					if(idConta != null){
						valorJurosCobrados = this.getControladorFaturamento().pesquisarValorJurosCobrados(idConta);
						if(valorJurosCobrados == null){
							valorJurosCobrados = BigDecimal.ZERO;
						}
						valorAtualizacaoCobradas = this.getControladorFaturamento().pesquisarValorAtualizacaoCobradas(idConta);
						if(valorAtualizacaoCobradas == null){
							valorAtualizacaoCobradas = BigDecimal.ZERO;
						}

					}

					// 12. Para cada ano-mês entre o ano-mês da Data de Vencimento e o ano-mês da
					// Data
					// Final
					BigDecimal indiceJurosAcumulado = BigDecimal.ZERO;
					BigDecimal indiceAtualizacaoAcumulado = BigDecimal.ZERO;

					Long meses = Util.calcularDiferencaDeMes(novaDataVencimento.getTime(), dataFinal.getTime());

					Integer[] listaReferencias = Util.obterReferenciasAPartirRefencia(anoMesDataVencimento, meses.intValue() + 1);
					Integer anoMes = null;

					for(int i = 0; i < listaReferencias.length; i++){
						// 12.1. Caso o ano-mês da data de vencimento e o ano-mês da data final
						// sejam
						// iguais
						// ao ano-mês do índice, calcula a quantidade de dias em atraso = dia da
						// Data
						// Final
						// MENOS dia da Data de
						// Vencimento MENOS 1 (um);

						anoMes = listaReferencias[i];

						indicesAcrescimosImpontualidade = mapIndicesAcrescimosImpontualidade.get(anoMes);

						// ......................................................................
						int diasEmAtraso = 0;

						if(Util.compararAnoMesReferencia(anoMesDataVencimento, anoMes, "=")
										&& Util.compararAnoMesReferencia(anoMesDataFinal, anoMes, "=")){

							// 12.1. Caso o ano-mês da data de vencimento e o ano-mês da data final
							// sejam
							// iguais
							// ao ano-mês do índice,
							// calcula a quantidade de dias em atraso = dia da Data Final MENOS dia
							// da
							// Data
							// de
							// Vencimento MENOS 1 (um);

							diasEmAtraso = Util.calcularDiferencaEntreDatas(novaDataVencimento.getTime(), dataFinal.getTime(),
											ConstantesSistema.DIFERENCA_DIAS).intValue();

						}else if(Util.compararAnoMesReferencia(anoMesDataVencimento, anoMes, "=")){

							// 12.2. Caso contrário, caso o ano-mês da Data de Vencimento seja igual
							// ao
							// ano-mês
							// do índice, calcular a quantidade de dias em atraso = último dia do
							// mês
							// menos
							// dia
							// da Data de Vencimento;
							int mes = novaDataVencimento.get(Calendar.MONTH);
							int ano = novaDataVencimento.get(Calendar.YEAR);
							int dia = novaDataVencimento.get(Calendar.DAY_OF_MONTH);

							// ************************************************************************************************
							// Para compatibilização para dados do GCS. (Falar com Chico ou Luís
							// Eduardo 05/04/2012)
							// Se mês for fevereiro fixa 28.
							// Retirar após sistema entrar no ar na DESO.
							if(mes == 1){
								diasEmAtraso = 28 - dia;
							}else{
								diasEmAtraso = Util.converterStringParaInteger(Util.obterUltimoDiaMes(mes + 1, ano)) - dia;
							}
							// ************************************************************************************************

						}else if(Util.compararAnoMesReferencia(anoMesDataFinal, anoMes, "=")){

							// 12.3. Caso contrário, caso o ano-mês da Data Final seja igual ao
							// ano-mês
							// do
							// índice, calcular a quantidade de dias em atraso = dia do mês da Data
							// Final
							// MENOS
							// 1 (um);

							int dia = dataFinal.get(Calendar.DAY_OF_MONTH);

							diasEmAtraso = dia - 1;
							// diasEmAtraso = dia;

						}else{

							// 12.4. Caso contrário, a quantidade de dias em atraso = 30 (trinta).
							diasEmAtraso = 30;
						}

						// 12.5. Caso a quantidade de dias em atraso seja maior que zero:
						if(diasEmAtraso > 0){

							if(indicesAcrescimosImpontualidade != null){

								indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
								indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
								fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();

							}else{
								// -------------------------------------------------------

								try{
									indicesAcrescimosImpontualidade = repositorioCobranca
													.pesquisarMenorIndiceAcrescimoImpontualidade(anoMes);

									if(indicesAcrescimosImpontualidade != null){

										indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
										indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
										fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
									}else{

										indiceMulta = BigDecimal.ZERO;
										indiceJurosMora = BigDecimal.ZERO;
										fatorAtualizacaMonetaria = BigDecimal.ZERO;
									}

								}catch(ErroRepositorioException ex){
									sessionContext.setRollbackOnly();
									throw new ControladorException("erro.sistema", ex);
								}

								// -------------------------------------------------------

							}

							// 12.5.2. Caso contrário, os valores índice de juros de mora e índice
							// de
							// atualização monetária permanecem com os valores anteriores.

							// 12.5.3. Adicionar ao valor dos juros de mora o resultado de "valor do
							// débito
							indiceJurosAcumulado = indiceJurosAcumulado.add(Util.dividirArredondando(
											new BigDecimal(diasEmAtraso).multiply(indiceJurosMora), new BigDecimal(3000), 6));

							// BigDecimal valorJurosMoraMes =
							// Util.dividirArredondando((valorDebito.subtract(valorJurosCobrados))
							// .multiply(new BigDecimal(diasEmAtraso).multiply(indiceJurosMora)),
							// new BigDecimal(3000), 2);
							//
							// valorJurosMora = valorJurosMora.add(valorJurosMoraMes);

							// 12.5.4. Adicionar ao valor de atualização monetária o resultado de
							// "valor
							// do
							// débito * quantidade de dias em atraso * índice de atualização
							// monetária /
							// 3000".
							// Calcular Valor de Atualização Monetária

							indiceAtualizacaoAcumulado = indiceAtualizacaoAcumulado.add(Util.dividirArredondando(new BigDecimal(
											diasEmAtraso).multiply(fatorAtualizacaMonetaria), new BigDecimal(3000), 6));

							// BigDecimal valorAtualizacaoMonetariaMes =
							// Util.dividirArredondando((valorDebito
							// .subtract(valorAtualizacaoCobradas)).multiply(new
							// BigDecimal(diasEmAtraso)
							// .multiply(fatorAtualizacaMonetaria)), new BigDecimal(3000), 2);
							//
							// valorAtualizacaoMonetaria =
							// valorAtualizacaoMonetaria.add(valorAtualizacaoMonetariaMes);

						}

					}

					valorJurosMora = Util.truncar(valorDebito.subtract(valorJurosCobrados).multiply(indiceJurosAcumulado), 2);

					valorAtualizacaoMonetaria = Util.truncar(
									valorDebito.subtract(valorAtualizacaoCobradas).multiply(indiceAtualizacaoAcumulado), 2);

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// 14. Caso contrário, a empresa tenha atualização tarifária
				// (PARM_ICATUALIZACAOTARIFARIA da tabela SISTEMA_PARAMETRO com valor igual a 1),
				// o sistema calcula atualização tarifária da seguinte forma:
				if(sistemaParametros.getIndicadorAtualizacaoTarifaria() == ConstantesSistema.SIM){
					valorAtualizacaoMonetaria = this.calcularValorAtualizacaoTarifaria(sistemaParametros, idConta);
				}
			}else{
				try{
					indicesAcrescimosImpontualidade = repositorioCobranca
									.pesquisarMenorIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);

					if(indicesAcrescimosImpontualidade != null){
						indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
					}else{
						indiceMulta = BigDecimal.ZERO;
					}

				}catch(ErroRepositorioException e){
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			// 15. Caso o indicador de que já cobrou multa corresponda a NÃO (2), o sistema calcula
			// o valor da multa da seguinte forma:

			Calendar dataAtual = Calendar.getInstance();
			Calendar dataCalendarVencimento = new GregorianCalendar();
			dataCalendarVencimento.setTime(dataVencimento);

			if(indicadorMulta == 2
							&& (dataVencimento != null && (dataVencimento.compareTo(Util.formatarDataSemHora(dataAtual.getTime()))) < 0)){

				if(valorMultasCobradas == null){
					valorMultasCobradas = BigDecimal.ZERO;
				}

				if(((String) ParametroCobranca.P_CALCULA_MULTA_COM_DEBITO_ATUALIZADO.executar(ExecutorParametrosCobranca.getInstancia()))
								.equals(ConstantesSistema.SIM.toString())){
					valorMulta = Util.truncar(valorDebito.add(valorJurosMora).add(valorAtualizacaoMonetaria).subtract(valorMultasCobradas)
									.multiply(Util.dividirArredondando(indiceMulta, new BigDecimal(100))), 2);
				}else{
					valorMulta = Util.truncar(
									valorDebito.subtract(valorMultasCobradas).multiply(
													Util.dividirArredondando(indiceMulta, new BigDecimal(100))), 2);
				}

			}

			// .................................................................... ..

		}

		if(dataEmissaoDocumento != null && indicadorEmissaoDocumento != null){
			ParametroAcrescimosEmissaoDocumento parametroAcrescimosEmissaoDocumento = this.getControladorArrecadacao()
							.pesquisarParametroAcrescimosEmissaoDocumento(dataEmissaoDocumento);

			if(parametroAcrescimosEmissaoDocumento != null){
				Short indicadorJurosEmissao = parametroAcrescimosEmissaoDocumento.getIndicadorJuros();

				if(indicadorEmissaoDocumento.equals(ConstantesSistema.SIM)){
					if(indicadorJurosEmissao.equals(ConstantesSistema.NAO)){
						valorJurosMora = BigDecimal.ZERO;
					}
				}else{
					if(indicadorJurosEmissao.equals(ConstantesSistema.SIM)){
						valorJurosMora = BigDecimal.ZERO;
					}
				}

				Short indicadorCorrecaoEmissao = parametroAcrescimosEmissaoDocumento.getIndicadorCorrecao();

				if(indicadorEmissaoDocumento.equals(ConstantesSistema.SIM)){
					if(indicadorCorrecaoEmissao.equals(ConstantesSistema.NAO)){
						valorAtualizacaoMonetaria = BigDecimal.ZERO;
					}
				}else{
					if(indicadorCorrecaoEmissao.equals(ConstantesSistema.SIM)){
						valorAtualizacaoMonetaria = BigDecimal.ZERO;
					}
				}

				Short indicadorMultaEmissao = parametroAcrescimosEmissaoDocumento.getIndicadorMulta();

				if(indicadorEmissaoDocumento.equals(ConstantesSistema.SIM)){
					if(indicadorMultaEmissao.equals(ConstantesSistema.NAO)){
						valorMulta = BigDecimal.ZERO;
					}
				}else{
					if(indicadorMultaEmissao.equals(ConstantesSistema.SIM)){
						valorMulta = BigDecimal.ZERO;
					}
				}
			}
		}

		calcularAcrescimoPorImpontualidade.setValorMulta(valorMulta);
		calcularAcrescimoPorImpontualidade.setValorJurosMora(valorJurosMora);
		calcularAcrescimoPorImpontualidade.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);

		return calcularAcrescimoPorImpontualidade;
	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * [FS0003] - Verificar permissão para inclusão de contas em revisão por Cobrança Bancária
	 * 
	 * @author Anderson Italo
	 * @date 24/04/2012
	 * @throws ControladorException
	 */
	public void verificarPermissaoInclusaoContasRevisaoCobrancaBancaria(Collection idsContas, Usuario usuarioLogado)
					throws ControladorException{


		String parametroMotivoRevisaoCobrancaBancaria = ((String) ParametroCobranca.P_MOTIVO_REVISAO_COBRANCA_BANCARIA.executar(this));

		FiltroConta filtroConta = new FiltroConta();
		Collection<Conta> colecaoConta = this.getControladorUtil().pesquisar(idsContas, filtroConta, Conta.class.getName());

		if(!Util.isVazioOrNulo(colecaoConta)){
			Integer idConta = null;

			BoletoBancario boleoBancario = null;
			Integer idBoleoBancario = null;

			for(Conta conta : colecaoConta){
				idConta = conta.getId();
				
				if(conta.getContaMotivoRevisao() != null){
				
					if(parametroMotivoRevisaoCobrancaBancaria != null){
						// Caso a conta esteja com o motivo de revisão Cobrança Bancária
						if(parametroMotivoRevisaoCobrancaBancaria.equals(conta.getContaMotivoRevisao().getId().toString())){
							// Se o usuário logado não possua permissão especial para imprimir conta
							// em
							// revisão com motivo Cobrança Bancária
							if(!this.getControladorPermissaoEspecial().verificarPermissaoImprimirCancelarContaEmCobrancaBancaria(
											usuarioLogado)){
								// Desabilitar a seleção da conta
								idsContas.remove(idConta);
							}else{
								boleoBancario = this.obterMaisRecenteBoletoBancarioDaContaEmCobrancaBancaria(idConta);

								if(boleoBancario != null){
									idBoleoBancario = boleoBancario.getId();

									if(this.verificarSituacaoBoletoNaoPermiteEmissaoExtrato(idBoleoBancario)){

										// Desabilitar a seleção da conta
										idsContas.remove(idConta);
									}
								}
							}
						}
				}

				}
			}
			
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [FS0003] - Verificar permissão para impressão de contas em revisão por Cobrança Bancária
	 * 
	 * @author Yara Souza
	 * @date 30/04/2012
	 * @throws ControladorException
	 */
	public boolean verificarPermissaoImpressaoContasRevisaoCobrancaBancaria(Usuario usuarioLogado, Conta conta) throws ControladorException{

		boolean retorno = false;
		String parametroMotivoRevisaoCobrancaBancaria = ((String) ParametroCobranca.P_MOTIVO_REVISAO_COBRANCA_BANCARIA.executar(this));

		// Caso a conta esteja com o motivo de revisão Cobrança Bancária
		if(parametroMotivoRevisaoCobrancaBancaria.equals(conta.getContaMotivoRevisao().getId().toString())){

			// Se o usuário logado não possua permissão especial para imprimir conta em revisão com
			// motivo Cobrança Bancária
			if(this.getControladorPermissaoEspecial().verificarPermissaoImprimirCancelarContaEmCobrancaBancaria(usuarioLogado)){
				retorno = true;

				Integer idConta = conta.getId();

				BoletoBancario boleoBancario = this.obterMaisRecenteBoletoBancarioDaContaEmCobrancaBancaria(idConta);

				if(boleoBancario != null){
					Integer idBoleoBancario = boleoBancario.getId();

					if(this.verificarSituacaoBoletoNaoPermiteEmissaoExtrato(idBoleoBancario)){
						retorno = false;
					}
				}
			}
		}

		return retorno;

	}

	/**
	 * Conta os registros para mandar pra batch ou gerar online o relatório
	 * 
	 * @Autor: Ítalo Almeida
	 * @Date: 03/05/2012
	 */

	public Integer gerarCurvaAbcDebitosCount(String classificacao, String indicadorImovelMedicaoIndividualizada,
					String indicadorImovelParalizacaoFaturamentoCobranca, String[] gerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String idSetorComercialInicial, String idSetorComercialFinal, String[] situacaoLigacaoAgua,
					String[] situacaoLigacaoEsgoto, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria) throws ControladorException{

		try{
			return repositorioCobranca.gerarCurvaAbcDebitosCount(classificacao, indicadorImovelMedicaoIndividualizada,
							indicadorImovelParalizacaoFaturamentoCobranca, gerenciaRegional, idLocalidadeInicial, idLocalidadeFinal,
							idSetorComercialInicial, idSetorComercialFinal, situacaoLigacaoAgua, situacaoLigacaoEsgoto,
							intervaloConsumoMinimoFixadoEsgotoInicial, intervaloConsumoMinimoFixadoEsgotoFinal, indicadorMedicao,
							idTipoMedicao, idPerfilImovel, idTipoCategoria, categoria, idSubCategoria);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [FS0037] - Verificar existência de guia de parcelamento de cobrança bancária
	 * [FS0041] - Verificar existência de guias correspondentes a prestações de parcelamento com
	 * concessão de desconto nos acréscimos
	 * Remover guia de pagamento na composição do débito para o parcelamento
	 * 
	 * @author Hebert Falcão, Yara Souza
	 * @date 13/05/2012, 19/01/2013
	 */
	public void removerGuiaDePagamentoNaComposicaoDoDebitoParcelamennto(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores)
					throws ControladorException{

		Integer idGuiaPagamento = null;
		Short numeroPrestacao = null;

		boolean existeGuiaParcelamento = false;

		Iterator<GuiaPagamentoValoresHelper> guiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();

		GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = null;

		while(guiaPagamentoValores.hasNext()){
			guiaPagamentoValoresHelper = guiaPagamentoValores.next();

			idGuiaPagamento = guiaPagamentoValoresHelper.getIdGuiaPagamento();
			numeroPrestacao = guiaPagamentoValoresHelper.getNumeroPrestacao();

			existeGuiaParcelamento = this.verificarGuiaPagamentoParcelamentoCobrancaBancaria(idGuiaPagamento, numeroPrestacao);

			// [FS0041 - Verificar existência de guias correspondentes a prestações de parcelamento
			// com concessão de desconto]
			if(!existeGuiaParcelamento){
				existeGuiaParcelamento = this.verificarGuiaPagamentoParcelamentoComConcessaoDesconto(idGuiaPagamento);
			}

			if(existeGuiaParcelamento){
				guiaPagamentoValores.remove();
			}
		}
	}

	/**
	 * Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Rafael Santos ,Rafael Santos, Pedro Alexandre
	 * @date 04/01/2006,22/03/2006,13/03/2007
	 * @author eduardo henrique
	 * @date 12/08/2008
	 *       Alteração na obtenção de Guias de Pagamento para o Imóvel / Cliente
	 * @author Saulo Lima
	 * @date 17/07/2009
	 *       Mudança no objeto 'GuiaPagamentoValoresHelper'
	 * @author Josenildo Neves
	 * @date 23/05/2012
	 *       Refactor da recuperação dos débitos dos imóveis
	 * @param indicadorDebito
	 * @param idImovel
	 * @param codigoCliente
	 * @param clienteRelacaoTipo
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorCalcularAcrescimoImpontualidade
	 * @param indicadorContas
	 * @param anoMesArrecadacao
	 * @param idImoveis
	 * @return
	 * @throws ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteContas(int indicadorDebito, String idImovel, String codigoCliente,
					Integer clienteRelacaoTipo, String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito,
					Date anoMesInicialVencimentoDebito, Date anoMesFinalVencimentoDebito, int indicadorPagamento, int indicadorConta,
					int indicadorCalcularAcrescimoImpontualidade, Boolean indicadorContas, String anoMesArrecadacao, Collection idImoveis,
					Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Short indicadorConsiderarPagamentoNaoClassificado,
					Short multa, Short jurosMora, Short atualizacaoTarifaria) throws ControladorException{

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = new ObterDebitoImovelOuClienteHelper();

		try{
			if(indicadorDebito == 2){ // caso cliente

				idImoveis = repositorioCobranca.pesquisarIDImoveisClienteImovel(codigoCliente, clienteRelacaoTipo);

			}else if(indicadorDebito == 3 || indicadorDebito == 4){

				// Verifica se é pesquisa por cliente superior (o código 99 é apenas um
				// identificador)
				if(clienteRelacaoTipo != null && clienteRelacaoTipo.equals(Integer.valueOf(99))){

					clienteRelacaoTipo = null;
					idImoveis = repositorioCobranca.pesquisarIdImoveisClienteSuperiorSemRelacaoFim(codigoCliente);

				}else{
					idImoveis = repositorioCobranca.pesquisarIdImoveisClienteSemRelacaoFim(codigoCliente, clienteRelacaoTipo);
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		Collection contas = null;

		if(indicadorContas == null || indicadorContas){

			if(indicadorDebito == 1){

				// contas do imovel
				try{

					contas = repositorioCobranca.pesquisarContasImovel(idImovel, DebitoCreditoSituacao.NORMAL,
									DebitoCreditoSituacao.RETIFICADA, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.PARCELADA,
									anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);

				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}else if(indicadorDebito == 2){
				// contas do cliente
				try{

					Collection idContas = null;
					idContas = repositorioCobranca.pesquisarIDContasClienteConta(codigoCliente, clienteRelacaoTipo);

					if(idContas != null && !idContas.isEmpty()){

						contas = repositorioCobranca.pesquisarContasCliente(idContas, DebitoCreditoSituacao.NORMAL.toString(),
										DebitoCreditoSituacao.RETIFICADA.toString(), DebitoCreditoSituacao.INCLUIDA.toString(),
										DebitoCreditoSituacao.PARCELADA.toString(), anoMesInicialReferenciaDebito,
										anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito, anoMesFinalVencimentoDebito,
										DebitoCreditoSituacao.PRESCRITA.toString());

						idContas.clear();
						idContas = null;
					}
				}catch(ErroRepositorioException ex){
					// sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}else if(indicadorDebito == 3){
				// contas do cliente responsável
				try{
					// idImoveis =
					// repositorioCobranca.pesquisarIDImoveisClienteImovel(codigoCliente,
					// clienteRelacaoTipo);

					if(idImoveis != null && !idImoveis.isEmpty()){
						contas = repositorioCobranca.pesquisarContasImoveis(idImoveis, DebitoCreditoSituacao.NORMAL.toString(),
										DebitoCreditoSituacao.RETIFICADA.toString(), DebitoCreditoSituacao.INCLUIDA.toString(),
										DebitoCreditoSituacao.PARCELADA.toString(), anoMesInicialReferenciaDebito,
										anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito, anoMesFinalVencimentoDebito,
										DebitoCreditoSituacao.PRESCRITA.toString());
					}
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

			}else if(indicadorDebito == 4){
				try{
					Collection idContas = null;
					idContas = repositorioCobranca.pesquisarIDContasClienteConta(codigoCliente, clienteRelacaoTipo);

					if(idImoveis != null && !idImoveis.isEmpty()){
						contas = repositorioCobranca.pesquisarDebitosCliente(idContas, idImoveis, DebitoCreditoSituacao.NORMAL.toString(),
										DebitoCreditoSituacao.RETIFICADA.toString(), DebitoCreditoSituacao.INCLUIDA.toString(),
										DebitoCreditoSituacao.PARCELADA.toString(), anoMesInicialReferenciaDebito,
										anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito, anoMesFinalVencimentoDebito,
										DebitoCreditoSituacao.PRESCRITA.toString());
					}
				}catch(ErroRepositorioException ex){
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
		}

		boolean verificaParcelamentoConfirmado = false;
		Collection colecaoIdImoveisContas = new HashSet();
		Collection colecaoContasValores = new ArrayList();

		if(contas != null && !contas.isEmpty()){

			Iterator icolecaoContas = contas.iterator();

			try{

				// dados da conta
				while(icolecaoContas.hasNext()){

					boolean inserir = true;
					boolean temContaParcelada = false;

					ContaValoresHelper contaValores = new ContaValoresHelper();

					Object[] contasArray = (Object[]) icolecaoContas.next();
					// Foi removido a fluxo e colocado no método abaixo.
					Conta conta = recuperarConta(contasArray);

					// Consulta o indicador de cobranca administrativa
					Short indicadorCobrancaAdministrativa = this.repositorioCobranca.obterIndicadorCobrancaAdministrativaConta(conta
									.getId());
					conta.setIndicadorCobrancaAdministrativa(indicadorCobrancaAdministrativa);

					if(conta.getDebitoCreditoSituacaoAtual() != null
									&& conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.PARCELADA
													.intValue()){

						temContaParcelada = true;
						verificaParcelamentoConfirmado = true;
					}

					contaValores.setConta(conta);

					BigDecimal valorPago = null;
					Date menorDataPagamento = null;

					// -----------------------------------------------------
					// Criado campo indicador de pagamento em conta, só verifico pagamento se
					// indicador = 1
					// (sim, existe registro em pagamento)
					// -----------------------------------------------------
					Collection dadosPagamento = null;
					if(conta.getIndicadorPagamento() != null && conta.getIndicadorPagamento() == (short) 1){

						dadosPagamento = repositorioCobranca.pesquisarValorTotalPagamentoMenorDataPagamento(conta.getId());

					}
					// -----------------------------------------------------

					/** alteração por pedro alexandre dia 21/05/2007 */
					/*
					 * BigDecimal valorConta = conta.getValorAgua().add(
					 * conta.getValorEsgoto()).add(conta.getDebitos())
					 * .subtract(conta.getValorCreditos());
					 */
					BigDecimal valorConta = conta.getValorTotal();

					// verifica o valor de pagamento da conta
					if(dadosPagamento != null && !dadosPagamento.isEmpty()){

						Object[] dadosPagamentoArray = (Object[]) dadosPagamento.iterator().next();

						if(dadosPagamentoArray[0] != null){
							valorPago = (BigDecimal) dadosPagamentoArray[0];
							// valorPago = new BigDecimal(
							// dadosPagamentoArray[0].toString());
						}

						if(dadosPagamentoArray[1] != null){
							menorDataPagamento = (Date) dadosPagamentoArray[1];
						}

						if(valorPago != null){

							// if((indicadorPagamento == 1) && (valorPago.compareTo(valorConta) >=
							// 0)){
							// inserir = false;
							// }else{
							// contaValores.setValorPago(valorPago);
							// }

							// Nova regra.
							// Indicador indicadorConsiderarPagamentoNaoClassificado incluido
							// para considerar ou não contas pagas porém não classificadas no
							// retorno das contas.
							if(indicadorPagamento == 1){
								// Caso exista valor no indicador igual a 2 (NÃO)
								if(indicadorConsiderarPagamentoNaoClassificado != null && indicadorConsiderarPagamentoNaoClassificado == 2){
									// retiro a conta com indicador de pagamento da lista de débitos
									inserir = false;

								}else{

									// Caso exista valor no indicador igual a 1 (SIM)
									if(indicadorConsiderarPagamentoNaoClassificado != null
													&& indicadorConsiderarPagamentoNaoClassificado == 1){

										// considero a conta, mesmo com um pagamento, como um débito
										contaValores.setValorPago(valorPago);

									}else{

										// Caso não exista o valor para o parametro
										// indicadorConsiderarPagamentoNaoClassificado = null,
										// considera a regra existente inicialmente.
										if((indicadorPagamento == 1) && (valorPago.compareTo(valorConta) >= 0)){

											// retiro a conta com indicador de pagamento da lista de
											// débitos, caso exista indicador de pagamento e o
											// pagamento é maior que o valor da conta.
											inserir = false;
										}else{
											// considero a conta, mesmo com um pagamento, como um
											// débito
											contaValores.setValorPago(valorPago);
										}
									}

								}

							}else{
								contaValores.setValorPago(valorPago);
							}

						}else{
							contaValores.setValorPago(BigDecimal.ZERO);
						}

						dadosPagamento.clear();
						dadosPagamento = null;

					}// fim do dadosPagamento!=null

					// Verificar se a conta esta em revisao
					if((indicadorConta == 2) && (conta.getDataRevisao() != null)){
						inserir = false;
					}

					// BoletoBancario boletoBancario =
					// repositorioCobranca.obterBoletoBancarioDebito(conta);
					//
					// if(boletoBancario != null){
					// inserir = false;
					// obterDebitoImovelOuClienteHelper.setIdBoletoBancario(boletoBancario.getId());
					// }

					// Date dataPagamento = null;
					// if (menorDataPagamento != null) {
					// dataPagamento = menorDataPagamento.getTime();
					// }

					// Calcular o Acrescimo por Impontualidade
					if(indicadorCalcularAcrescimoImpontualidade == 1 && (inserir)){

						// Calcula o valor das multas cobradas para a conta
						BigDecimal valorMultasCobradas = null;
						valorMultasCobradas = getControladorFaturamento().pesquisarValorMultasCobradas(conta.getId());

						CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = null;

						calcularAcrescimoPorImpontualidade = this.calcularAcrescimoPorImpontualidadeBancoDeDados(conta.getReferencia(),
										conta.getDataVencimentoConta(), menorDataPagamento, valorConta, valorMultasCobradas,
										conta.getIndicadorCobrancaMulta(), anoMesArrecadacao, conta.getId(), dataEmissaoDocumento,
										indicadorEmissaoDocumento, multa, jurosMora, atualizacaoTarifaria);

						// set os Valores
						if(calcularAcrescimoPorImpontualidade != null){

							// seta valor de multa
							contaValores.setValorMulta(calcularAcrescimoPorImpontualidade.getValorMulta());

							// seta valor de juros mora
							contaValores.setValorJurosMora(calcularAcrescimoPorImpontualidade.getValorJurosMora());

							// seta valor de atualizacao monetaria
							contaValores.setValorAtualizacaoMonetaria(calcularAcrescimoPorImpontualidade.getValorAtualizacaoMonetaria());

						}
					}

					if(inserir){

						if(temContaParcelada){

							if(indicadorDebito == 2){
								colecaoIdImoveisContas.add(conta.getImovel().getId());
							}
						}

						colecaoContasValores.add(contaValores);
					}

				}// fim do loop

			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

			contas.clear();
			contas = null;

		}// fim de if(contas != null && !contas.isEmpty())

		// Caso na lista de contas existam contas com situação atual
		// correspondente a parcelada,
		// o sitema verifica se o parcelamento está confirmado
		if(verificaParcelamentoConfirmado){

			// Caso tenha sido recebido o cliente,sistema obtém os imóveis da
			// lista das contas que possuem
			// conta com a situacao atual com o valor correspondente a parcelada

			// Caso contrário,considerar apenas o imóvel recebido
			if(indicadorDebito == 1){

				colecaoIdImoveisContas = new HashSet();
				colecaoIdImoveisContas.add(Integer.valueOf(idImovel));
			}

			colecaoContasValores = this.verificarParcelamentoConfirmado(colecaoIdImoveisContas, colecaoContasValores);

		}

		// adcionando a colecao de contas de valores
		if(colecaoContasValores != null){
			obterDebitoImovelOuClienteHelper.setColecaoContasValores(colecaoContasValores);
			obterDebitoImovelOuClienteHelper.setColecaoContasValoresImovel(colecaoContasValores);
		}

		colecaoIdImoveisContas.clear();
		colecaoIdImoveisContas = null;

		return obterDebitoImovelOuClienteHelper;
	}

	public ObterDebitoImovelOuClienteHelper obterDebitoImovelContas(int indicadorDebito, String idImovel,
					String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito, Date anoMesInicialVencimentoDebito,
					Date anoMesFinalVencimentoDebito) throws ControladorException{

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = new ObterDebitoImovelOuClienteHelper();

		boolean verificaParcelamentoConfirmado = false;
		Collection colecaoIdImoveisContas = new HashSet();
		Collection colecaoContasValores = new ArrayList();
		Collection contas = null;

		if(indicadorDebito == 1){

			// contas do imovel
			try{

				contas = repositorioCobranca.pesquisarContasImovel(idImovel, DebitoCreditoSituacao.NORMAL,
								DebitoCreditoSituacao.RETIFICADA, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.PARCELADA,
								anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito,
								anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);

				if(contas != null && !contas.isEmpty()){

					Iterator icolecaoContas = contas.iterator();
					// dados da conta
					while(icolecaoContas.hasNext()){

						ContaValoresHelper contaValores = new ContaValoresHelper();

						Object[] contasArray = (Object[]) icolecaoContas.next();
						// Foi removido a fluxo e colocado no método abaixo.
						Conta conta = recuperarConta(contasArray);

						if(conta.getDebitoCreditoSituacaoAtual() != null
										&& conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.PARCELADA
														.intValue()){

							verificaParcelamentoConfirmado = true;
						}

						contaValores.setConta(conta);
						colecaoContasValores.add(contaValores);

					}

				}

				// Caso na lista de contas existam contas com situação atual
				// correspondente a parcelada,
				// o sitema verifica se o parcelamento está confirmado
				if(verificaParcelamentoConfirmado){

					// Caso tenha sido recebido o cliente,sistema obtém os imóveis da
					// lista das contas que possuem
					// conta com a situacao atual com o valor correspondente a parcelada

					// Caso contrário,considerar apenas o imóvel recebido
					colecaoIdImoveisContas = new HashSet();
					colecaoIdImoveisContas.add(Integer.valueOf(idImovel));

					colecaoContasValores = this.verificarParcelamentoConfirmado(colecaoIdImoveisContas, colecaoContasValores);

				}

				// adcionando a colecao de contas de valores
				if(colecaoContasValores != null){
					obterDebitoImovelOuClienteHelper.setColecaoContasValores(colecaoContasValores);
					obterDebitoImovelOuClienteHelper.setColecaoContasValoresImovel(colecaoContasValores);
				}

				colecaoIdImoveisContas.clear();
				colecaoIdImoveisContas = null;

			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		}

		return obterDebitoImovelOuClienteHelper;
	}

	/**
	 * [UC3052] Gerar e Emitir Aviso de Corte e Ordem de Corte Individual
	 * [UC0251] Gerar Atividade de Ação de Cobrança ***Falta mudar chamada***
	 * 
	 * @param dataCorrente
	 * @param cobrancaAcao
	 * @return
	 */
	private Date obterDataMinimaEmissaoRealizacaoAcaoPrecente(Date dataCorrente, CobrancaAcao cobrancaAcao){

		Date dataMinimaEmissaoRealizacaoAcaoPrecente = Util.subtrairNumeroDiasDeUmaData(dataCorrente,
						cobrancaAcao.getNumeroDiasMinimoAcaoPrecedente());
		// Formata a data para a última hora, minutos e segundos
		Calendar dataCalendar = new GregorianCalendar();
		dataCalendar.setTime(dataMinimaEmissaoRealizacaoAcaoPrecente);
		dataCalendar.set(Calendar.HOUR_OF_DAY, 23);
		dataCalendar.set(Calendar.MINUTE, 59);
		dataCalendar.set(Calendar.SECOND, 59);
		dataCalendar.set(Calendar.MILLISECOND, 999);
		dataMinimaEmissaoRealizacaoAcaoPrecente = dataCalendar.getTime();

		return dataMinimaEmissaoRealizacaoAcaoPrecente;
	}

	/**
	 * [UC3052] Gerar e Emitir Aviso de Corte e Ordem de Corte Individual
	 * [UC0251] Gerar Atividade de Ação de Cobrança ***Falta mudar chamada***
	 * Calcula a data minima de emissão/realização da ação precedente diminuindo o
	 * numero de dias da validade
	 * 
	 * @param dataCorrente
	 * @param cobrancaAcaoPrecedente
	 * @return
	 */
	private Date obterDataEmissaoValidacaoAcaoPrecente(Date dataCorrente, CobrancaAcao cobrancaAcaoPrecedente){

		Date dataEmissaoValidacaoAcaoPrecente = Util.subtrairNumeroDiasDeUmaData(dataCorrente,
						cobrancaAcaoPrecedente.getNumeroDiasValidade());
		Calendar dataCalendar = new GregorianCalendar();
		dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
		dataCalendar.set(Calendar.HOUR_OF_DAY, 00);
		dataCalendar.set(Calendar.MINUTE, 00);
		dataCalendar.set(Calendar.SECOND, 00);
		dataCalendar.set(Calendar.MILLISECOND, 000);
		dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();

		return dataEmissaoValidacaoAcaoPrecente;

	}

	/**
	 * [UC3052] Gerar e Emitir Aviso de Corte e Ordem de Corte Individual
	 * [SB0004 - Verificar Existência do Documento de Cobrança].
	 * 
	 * @param dataCorrente
	 * @param cobrancaAcaoPrecedente
	 * @return
	 * @throws ControladorException
	 */
	public Integer verificarExistenciaDocumentoCobranca(CobrancaAcao cobrancaAcao, Integer idImovel, boolean geracaoConjunta)
					throws ControladorException{

		Integer codigoRetornoAtividade = ConstantesSistema.ATIVIDADE_EFETUADA_COM_SUCESSO;
		Integer idDocumentoCobranca = null;
		Date dataCorrente = new Date();

		if(geracaoConjunta){

			Integer numeroDiasValidade = cobrancaAcao.getNumeroDiasValidade().intValue();

			try{
				idDocumentoCobranca = repositorioCobranca.pesquisarDocumentoCobrancaNoPeriodoDeValidade(idImovel, cobrancaAcao
								.getDocumentoTipo().getId(), numeroDiasValidade);

			}catch(ErroRepositorioException e){
				throw new ControladorException("erro.sistema", e);
			}

			if(idDocumentoCobranca != null){
				codigoRetornoAtividade = ConstantesSistema.ATIVIDADE_EFETUADA_SEM_SUCESSO;
				return codigoRetornoAtividade;
			}

		}else{
			// FIXME AHGL - DEAD CODE Bloco else. Nunca geracaoConjunta vai chegar false. ver no
			// GRAEOCIA.java linha 372
			try{

				CobrancaAcao cobrancaAcaoPrecedente = cobrancaAcao.getCobrancaAcaoPredecessora();
				if(cobrancaAcaoPrecedente != null && !cobrancaAcaoPrecedente.equals("")){

					Date dataMinimaEmissaoRealizacaoAcaoPrecente = obterDataMinimaEmissaoRealizacaoAcaoPrecente(dataCorrente, cobrancaAcao);

					Date dataEmissaoValidacaoAcaoPrecente = obterDataEmissaoValidacaoAcaoPrecente(dataCorrente, cobrancaAcaoPrecedente);

					idDocumentoCobranca = repositorioCobranca.pesquisarDocumentoCobrancaRelativoAcaoPrecedente(idImovel,
									cobrancaAcaoPrecedente.getDocumentoTipo().getId(), cobrancaAcao.getId(),
									dataMinimaEmissaoRealizacaoAcaoPrecente, dataEmissaoValidacaoAcaoPrecente);

					if(idDocumentoCobranca == null){
						codigoRetornoAtividade = ConstantesSistema.ATIVIDADE_EFETUADA_SEM_SUCESSO;
						return codigoRetornoAtividade;
					}

					if(cobrancaAcaoPrecedente.getServicoTipo() != null){

						idDocumentoCobranca = repositorioCobranca.pesquisarDocumentoCobrancaAcaoPrecedente(idImovel, cobrancaAcaoPrecedente
										.getServicoTipo().getId(), AtendimentoMotivoEncerramento.INDICADOR_EXECUCAO_SIM,
										dataMinimaEmissaoRealizacaoAcaoPrecente);

						if(idDocumentoCobranca == null){
							codigoRetornoAtividade = ConstantesSistema.ATIVIDADE_EFETUADA_SEM_SUCESSO;
							return codigoRetornoAtividade;
						}

					}

				}

				// 2. Caso já exista a mesma ação de cobrança para o imóvel ainda no período de
				// validade e com a situação da ação diferente de "CANCELADA POR DECURSO DE PRAZO"
				// (existe ocorrência na tabela COBRANCA_DOCUMENTO com IMOV_ID=Id do imóvel recebido
				// e DOTP_ID=DOTP_ID da tabela COBRANCA_ACAO e com (DATE(CBDO_TMEMISSAO) mais
				// CBAC_NNDIASVALIDADE) maior ou igual a data corrente e CAST_ID diferente de
				// 4-quatro (cancelada por decurso de prazo)):
				// 2.1. Atribuir o valor 9-nove (atividade efetuada sem sucesso) ao código de
				// retorno.

				Integer numeroDiasValidade = cobrancaAcao.getNumeroDiasValidade().intValue();

				idDocumentoCobranca = repositorioCobranca.pesquisarDocumentoCobrancaNoPeriodoDeValidade(idImovel, cobrancaAcao
								.getDocumentoTipo().getId(), numeroDiasValidade);

				if(idDocumentoCobranca != null){
					codigoRetornoAtividade = ConstantesSistema.ATIVIDADE_EFETUADA_SEM_SUCESSO;
					return codigoRetornoAtividade;
				}

			}catch(ErroRepositorioException ex){
				throw new ControladorException("erro.sistema", ex);
			}

		}

		return codigoRetornoAtividade;

	}

	/**
	 * Método que busca o setor comercial por cobranca documento.
	 * 
	 * @author José Cláudio
	 * @param idCobrancaDocumento
	 *            id a ser informado.
	 */
	public Object[] pesquisarSetorComercialPorCobrancaDocumento(Integer idCobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarSetorComercialPorCobrancaDocumento(idCobrancaDocumento);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método que obtém total de descrições em Ação de Cobrança a partir de um setor
	 * 
	 * @author José Cláudio
	 * @param cdSetorComercial
	 *            codigo a ser informado.
	 */
	public Integer pesquisarTotalDescricoesCobrancaAcaoPorSetor(Integer cdSetorComercial) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarTotalDescricoesCobrancaAcaoPorSetor(cdSetorComercial);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método que obtém total de descrições em Ação de Cobrança a partir de uma localidade
	 * 
	 * @author José Cláudio
	 * @param idLocalidade
	 *            id a ser informado.
	 */
	public Integer pesquisarTotalDescricoesCobrancaAcaoPorLocalidade(Integer idLocalidade) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarTotalDescricoesCobrancaAcaoPorLocalidade(idLocalidade);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Obtém total de ocorrencias em documento de Cobrança a partir de um setor comercial
	 * 
	 * @autor José Cláudio
	 * @param Integer
	 *            cdSetorComercial
	 * @return Total de ocorrencias em documento de Cobrança a partir de um setor comercial
	 * @exception ErroRepositorioException
	 *                Descrição da exceção
	 * @date 06/06/2012
	 */
	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorSetor(Integer cdSetorComercial, Integer localidadeId,
					Integer faturamentoGrupoMensalId, Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarTotalOcorrenciasCobrancaAcaoPorSetor(cdSetorComercial, localidadeId,
							faturamentoGrupoMensalId, cobrancaAcaoAtividadeComandoId, idCobrancaAcao);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Obtém total de ocorrencias em documento de Cobrança a partir de uma localidade
	 * 
	 * @autor José Cláudio
	 * @param Integer
	 *            idLocalidade
	 * @return Total de ocorrencias em documento de Cobrança a partir de uma localidade
	 * @exception ErroRepositorioException
	 *                Descrição da exceção
	 * @date 06/06/2012
	 */
	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorLocalidade(Integer idLocalidade, Integer faturamentoGrupoMensalId,
					Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarTotalOcorrenciasCobrancaAcaoPorLocalidade(idLocalidade, faturamentoGrupoMensalId,
							cobrancaAcaoAtividadeComandoId, idCobrancaAcao);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Separa a lista de documentos cobrança em:
	 * Lista dos Documentos de Cobrança com Entrega para o Cliente Responsável
	 * Lista dos Documentos de Cobrança com Entrega para o Cliente Usuário
	 * Lista dos Documentos de Cobrança com Entrega para o Cliente Proprietário
	 * Lista dos Documentos de Cobrança com Entrega para o Imóvel
	 * E ordena de acordo com cada critérios.
	 * [UC0349] Emitir Documento de Cobrança - Aviso de Corte
	 * 
	 * @author Josenildo Neves
	 * @date 07/06/2012
	 * @param colecaoCobrancaDocumento
	 * @return
	 */
	public CobrancaDocumentoColecoesOrdenadasHelper tratarColecaoDocumentosCobranca(Collection<CobrancaDocumento> colecaoCobrancaDocumento)
					throws ControladorException{

		List<CobrancaDocumentoAvisoCorteHelper> documentosCobrancaEntregaClienteResponsavel = new ArrayList<CobrancaDocumentoAvisoCorteHelper>();
		List<CobrancaDocumentoAvisoCorteHelper> documentosCobrancaEntregaClienteUsuario = new ArrayList<CobrancaDocumentoAvisoCorteHelper>();
		List<CobrancaDocumentoAvisoCorteHelper> documentosCobrancaEntregaClienteProprietario = new ArrayList<CobrancaDocumentoAvisoCorteHelper>();
		List<CobrancaDocumentoAvisoCorteHelper> documentosCobrancaEntregaImovel = new ArrayList<CobrancaDocumentoAvisoCorteHelper>();

		CobrancaDocumentoAvisoCorteHelper cobrancaDocumentoAvisoCorteHelper = null;

		CobrancaDocumentoColecoesOrdenadasHelper colecoesOrdenadasHelper = null;

		Integer idCliente = null;
		Integer indicadorEnvio = null;

		if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){

			for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){

				indicadorEnvio = cobrancaDocumento.getImovel().getImovelContaEnvio().getId();

				Integer idEmpresa = new Integer(0);
				if(cobrancaDocumento.getEmpresa() != null){
					idEmpresa = cobrancaDocumento.getEmpresa().getId();
				}

				Integer idLocalidade = new Integer(0);
				if(cobrancaDocumento.getLocalidade() != null){
					idLocalidade = cobrancaDocumento.getLocalidade().getId();
				}

				// Lista dos Documentos de Cobrança com Entrega para o Cliente Responsável
				if(indicadorEnvio.equals(ImovelContaEnvio.ENVIAR_CLIENTE_RESPONSAVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.NAO_PAGAVEL_IMOVEL_PAGAVEL_RESPONSAVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.PAGAVEL_PARA_IMOVEL_E_PAGAVEL_PARA_RESPONSAVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.PAGAVEL_PARA_IMOVEL_E_NAO_PAGAVEL_PARA_RESPOSAVEL)){

					Collection collClienteImovel = pesquisarClientePeloTipo(cobrancaDocumento, ClienteRelacaoTipo.RESPONSAVEL);

					if(!Util.isVazioOrNulo(collClienteImovel)){

						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(collClienteImovel);

						idCliente = clienteImovel.getCliente().getId();

					}

					// [UC0085]Obter Endereco
					String enderecoFormatado = null;

					if(idCliente != null){
						enderecoFormatado = pesquisarEnderecoClienteAbreviado(idCliente);
					}

					cobrancaDocumentoAvisoCorteHelper = new CobrancaDocumentoAvisoCorteHelper(idEmpresa, idCliente, idLocalidade,
									cobrancaDocumento.getCodigoSetorComercial(), cobrancaDocumento.getNumeroQuadra(), cobrancaDocumento
													.getImovel().getLote(), //
									cobrancaDocumento.getImovel().getSubLote(), enderecoFormatado, //
									CobrancaDocumentoAvisoCorteHelper.ENTREGA_CLIENTE_RESPONSAVEL, cobrancaDocumento);

					documentosCobrancaEntregaClienteResponsavel.add(cobrancaDocumentoAvisoCorteHelper);

				}

				// Lista dos Documentos de Cobrança com Entrega para o Cliente Usuário
				if(indicadorEnvio.equals(ImovelContaEnvio.ENVIAR_PARA_CLIENTE_USUARIO)){

					Collection collClienteImovel = pesquisarClientePeloTipo(cobrancaDocumento, ClienteRelacaoTipo.USUARIO);

					if(!Util.isVazioOrNulo(collClienteImovel)){

						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(collClienteImovel);

						idCliente = clienteImovel.getCliente().getId();

					}

					// [UC0085]Obter Endereco
					String enderecoFormatado = pesquisarEnderecoClienteAbreviado(idCliente);

					cobrancaDocumentoAvisoCorteHelper = new CobrancaDocumentoAvisoCorteHelper(idEmpresa, idCliente, idLocalidade,
									cobrancaDocumento.getCodigoSetorComercial(), cobrancaDocumento.getNumeroQuadra(), cobrancaDocumento
													.getImovel().getLote(), //
									cobrancaDocumento.getImovel().getSubLote(), enderecoFormatado, //
									CobrancaDocumentoAvisoCorteHelper.ENTREGA_CLIENTE_USUARIO, cobrancaDocumento);

					documentosCobrancaEntregaClienteUsuario.add(cobrancaDocumentoAvisoCorteHelper);

				}

				// Lista dos Documentos de Cobrança com Entrega para o Cliente Proprietário
				if(indicadorEnvio.equals(ImovelContaEnvio.ENVIAR_PARA_CLIENTE_PROPRIETARIO)){

					Collection collClienteImovel = pesquisarClientePeloTipo(cobrancaDocumento, ClienteRelacaoTipo.PROPRIETARIO);

					if(!Util.isVazioOrNulo(collClienteImovel)){

						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(collClienteImovel);

						idCliente = clienteImovel.getCliente().getId();

					}

					// [UC0085]Obter Endereco
					String enderecoFormatado = pesquisarEnderecoClienteAbreviado(idCliente);

					cobrancaDocumentoAvisoCorteHelper = new CobrancaDocumentoAvisoCorteHelper(idEmpresa, idCliente, idLocalidade,
									cobrancaDocumento.getCodigoSetorComercial(), cobrancaDocumento.getNumeroQuadra(), cobrancaDocumento
													.getImovel().getLote(), //
									cobrancaDocumento.getImovel().getSubLote(), enderecoFormatado, //
									CobrancaDocumentoAvisoCorteHelper.ENTREGA_CLIENTE_PROPRIETARIO, cobrancaDocumento);

					documentosCobrancaEntregaClienteProprietario.add(cobrancaDocumentoAvisoCorteHelper);

				}

				// Lista dos Documentos de Cobrança com Entrega para o Imóvel
				if(indicadorEnvio.equals(ImovelContaEnvio.ENVIAR_IMOVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.NAO_PAGAVEL_IMOVEL_PAGAVEL_RESPONSAVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.PAGAVEL_PARA_IMOVEL_E_PAGAVEL_PARA_RESPONSAVEL)
								|| indicadorEnvio.equals(ImovelContaEnvio.PAGAVEL_PARA_IMOVEL_E_NAO_PAGAVEL_PARA_RESPOSAVEL)){

					// [UC0085]Obter Endereco
					String enderecoFormatado = consultarEndereco(cobrancaDocumento.getImovel().getId());

					cobrancaDocumentoAvisoCorteHelper = new CobrancaDocumentoAvisoCorteHelper(idEmpresa, null, idLocalidade,
									cobrancaDocumento.getCodigoSetorComercial(), cobrancaDocumento.getNumeroQuadra(), cobrancaDocumento
													.getImovel().getLote(), //
									cobrancaDocumento.getImovel().getSubLote(), enderecoFormatado, //
									CobrancaDocumentoAvisoCorteHelper.ENTREGA_IMOVEL, cobrancaDocumento);

					documentosCobrancaEntregaImovel.add(cobrancaDocumentoAvisoCorteHelper);

				}
			}

			colecoesOrdenadasHelper = new CobrancaDocumentoColecoesOrdenadasHelper(documentosCobrancaEntregaClienteResponsavel,
							documentosCobrancaEntregaClienteUsuario, documentosCobrancaEntregaClienteProprietario,
							documentosCobrancaEntregaImovel);

		}

		return colecoesOrdenadasHelper;

	}

	protected String consultarEndereco(Integer idImovel) throws ControladorException{

		return this.getControladorEndereco().pesquisarEndereco(idImovel);
	}

	protected String pesquisarEnderecoClienteAbreviado(Integer idCliente) throws ControladorException{

		return this.getControladorEndereco().pesquisarEnderecoClienteAbreviado(idCliente);
	}

	protected Collection pesquisarClientePeloTipo(CobrancaDocumento cobrancaDocumento, Integer clienteTipo){

		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, cobrancaDocumento.getImovel().getId()));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, clienteTipo));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);

		Collection collClienteImovel = Fachada.getInstancia().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());
		return collClienteImovel;
	}

	/**
	 * [UC0349] - Emitir documento de cobrança
	 * Retorna os itens de documento de cobrança ordenados pela referência da conta
	 * 
	 * @created 11/06/2012
	 * @author Luciano Galvao
	 */
	public Collection pesquisarCobrancaDocumentoItens(Integer idCobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarCobrancaDocumentoItens(idCobrancaDocumento);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0349] - Emitir documento de cobrança
	 * Retorna os ids dos documentos de cobrança a partir do cronograma e comando de cobrança
	 * 
	 * @created 11/06/2012
	 * @author Luciano Galvao
	 */
	public Collection pesquisarCobrancaDocumentoIds(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarCobrancaDocumentoIds(idCobrancaAcaoCronograma, idCobrancaAcaoComando);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Verifica se existe, dentro da listagem de debitos de um imovel ou cliente, uma ocorrencia de
	 * conta ou guia de pagamento em cobranca administrativa
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param colecaoContasValoresHelper
	 * @param colecaoGuiasPagamentoValoresHelper
	 * @return
	 * @throws ControladorException
	 */
	public boolean existeContaOuGuiaPagamentoDebitoImovelOuCliente(Collection<ContaValoresHelper> colecaoContasValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresHelper) throws ControladorException{

		boolean existeOcorrenciaCobrancaAdministrativa = false;

		// Verifica as contas
		if(!Util.isVazioOrNulo(colecaoContasValoresHelper)){
			for(ContaValoresHelper contaValoresHelper : colecaoContasValoresHelper){
				if(contaValoresHelper.getConta().getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
					existeOcorrenciaCobrancaAdministrativa = true;
					break;
				}
			}
		}

		// Verifica as Guias
		if(!existeOcorrenciaCobrancaAdministrativa && !Util.isVazioOrNulo(colecaoGuiasPagamentoValoresHelper)){
			for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValoresHelper){
				if(guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
					existeOcorrenciaCobrancaAdministrativa = true;
					break;
				}
			}
		}

		return existeOcorrenciaCobrancaAdministrativa;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0026] - Verificar Débito em Cobrança Administrativa - Retirar Guias
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param colecaoContasValoresHelper
	 * @param colecaoGuiasPagamentoValoresHelper
	 * @return
	 * @throws ControladorException
	 */
	public void removerGuiaPagamentoCobrancaAdministrativaDebitoImovel(Usuario usuario, Integer idImovel,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper) throws ControladorException{

		Collection colecaoIdsGuiasRemover = null;
		boolean idsConsultados = false;
		try{

			// 1. Caso o usuário logado pertença a uma empresa de cobrança administrativa
			if(this.repositorioCobranca.existeEmpresaCobrancaContrato(usuario.getEmpresa().getId())){

				if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValoresHelper)){
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperClone = (Collection<GuiaPagamentoValoresHelper>) ((ArrayList<GuiaPagamentoValoresHelper>) colecaoGuiaPagamentoValoresHelper)
									.clone();
					Iterator dadosColecaoGuiaPagamentoValoresHelper = colecaoGuiaPagamentoValoresHelperClone.iterator();
					while(dadosColecaoGuiaPagamentoValoresHelper.hasNext()){
						GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) dadosColecaoGuiaPagamentoValoresHelper
										.next();

						// 1.2. Caso existam, na lista de guias de pagamento retornada pelo
						// [UC0067], guias de pagamento em cobrança administrativa
						if(guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){

							// Consulta os ids de guias a remover apenas uma vez caso seja
							// verificada a ocorrencia de pelo menos uma guia em cobranca
							// administrativa
							if(!idsConsultados){
								// Pesquisa os ids das contas a serem excluidos
								colecaoIdsGuiasRemover = this.repositorioCobranca
												.obterIdsGuiasPagamentoCobrancaAdministrativaEmpresaDiferente(usuario.getEmpresa().getId(),
																idImovel);
								idsConsultados = true;
							}

							// Armazena os ids de guias e suas prestacoes em uma lista para a
							// comparacao
							ArrayList<Hashtable<Integer, Short>> listaGuiasPrestacaoRemover = new ArrayList<Hashtable<Integer, Short>>();
							Iterator dadosGuias = colecaoIdsGuiasRemover.iterator();
							while(dadosGuias.hasNext()){
								Object[] dadoGuia = (Object[]) dadosGuias.next();
								Hashtable<Integer, Short> hashGuiaPrestacao = new Hashtable<Integer, Short>();
								hashGuiaPrestacao.put((Integer) dadoGuia[0], (Short) dadoGuia[1]);
								listaGuiasPrestacaoRemover.add(hashGuiaPrestacao);
							}

							// Caso a hsatable que representa a guia prestação atual esteja contida
							// na lista de guias prestação nao permitidas essa é excluida da colecao
							Hashtable<Integer, Short> hashGuiaPrestacaoAtual = new Hashtable<Integer, Short>();
							hashGuiaPrestacaoAtual.put(guiaPagamentoValoresHelper.getIdGuiaPagamento(),
											guiaPagamentoValoresHelper.getNumeroPrestacao());
							if(listaGuiasPrestacaoRemover.contains(hashGuiaPrestacaoAtual)){
								colecaoGuiaPagamentoValoresHelper.remove(guiaPagamentoValoresHelper);
							}
						}
					}
				}
			}
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0026] - Verificar Débito em Cobrança Administrativa - Retirar Contas
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param usuario
	 * @param idImovel
	 * @param colecaoContasValoresHelper
	 * @throws ControladorException
	 */
	public void removerContaCobrancaAdministrativaDebitoImovel(Usuario usuario, Integer idImovel,
					Collection<ContaValoresHelper> colecaoContasValoresHelper) throws ControladorException{

		Collection<Integer> colecaoIdsContasRemover = null;
		boolean idsConsultados = false;
		try{

			// 1. Caso o usuário logado pertença a uma empresa de cobrança administrativa
			if(this.repositorioCobranca.existeEmpresaCobrancaContrato(usuario.getEmpresa().getId())){

				if(!Util.isVazioOrNulo(colecaoContasValoresHelper)){
					Collection<ContaValoresHelper> colecaoContaValoresHelperClone = (Collection<ContaValoresHelper>) ((ArrayList<ContaValoresHelper>) colecaoContasValoresHelper)
									.clone();
					Iterator dadosColecaoContasValoresHelper = colecaoContaValoresHelperClone.iterator();
					while(dadosColecaoContasValoresHelper.hasNext()){
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) dadosColecaoContasValoresHelper.next();
						// 1.1. Caso existam, na lista de contas retornada pelo [UC0067], contas em
						// cobrança administrativa
						if(contaValoresHelper.getConta().getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){

							// Consulta os ids de contas a remover apenas uma vez caso seja
							// constatada a ocorrencia de pelo menos uma conta em cobranca
							// administrativa
							if(!idsConsultados){
								// Pesquisa os ids das contas a serem excluidos
								colecaoIdsContasRemover = this.repositorioCobranca.obterIdsContasCobrancaAdministrativaEmpresaDiferente(
												usuario.getEmpresa().getId(), idImovel);
								idsConsultados = true;
							}

							// Caso o id da conta em cobrança administrativa exista na coleção de
							// Ids a serem removidos exclui a conta da coleção
							if(colecaoIdsContasRemover.contains(contaValoresHelper.getConta().getId())){
								colecaoContasValoresHelper.remove(contaValoresHelper);
							}
						}
					}
				}
			}
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author Hugo Lima
	 * @date 02/07/2012
	 * @param idEmpresa
	 * @return
	 * @throws ControladorException
	 */
	public boolean existeEmpresaCobrancaContrato(Integer idEmpresa) throws ControladorException{

		try{
			return this.repositorioCobranca.existeEmpresaCobrancaContrato(idEmpresa);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imóveis da Cobrança Administrativa.
	 * 
	 * @created 30/07/2012
	 * @author Josenildo Neves.
	 */
	public Collection<ImovelCobrancaSituacaoAdministrativaHelper> consultarRetirarImovelCobrancaAdministrativa(Integer idLocalidade,
					Integer cdSetorComercial, Integer idImovel, Integer numeroPaginas) throws ControladorException{

		try{
			return repositorioCobranca
							.consultarRetirarImovelCobrancaAdministrativa(idLocalidade, cdSetorComercial, idImovel, numeroPaginas);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imóveis da Cobrança Administrativa.
	 * 
	 * @created 30/07/2012
	 * @author Josenildo Neves.
	 */
	public Integer consultarRetirarImovelCobrancaAdministrativaCount(Integer idLocalidade, Integer cdSetorComercial, Integer idImovel)
					throws ControladorException{

		try{
			return repositorioCobranca.consultarRetirarImovelCobrancaAdministrativaCount(idLocalidade, cdSetorComercial, idImovel);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0001] - Exibir dados da Cobrança Administrativa do Imóvel.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return ImovelCobrancaSituacaoAdministrativaHelper
	 */
	public ImovelCobrancaSituacaoAdministrativaHelper consultarRetirarImovelCobrancaAdministrativaDadosRemuneracao(
					Integer idImovelCobrancaSituacao) throws ControladorException{

		try{
			return repositorioCobranca.consultarRetirarImovelCobrancaAdministrativaDadosRemuneracao(idImovelCobrancaSituacao);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] - Encerrar Cobrança Administrativa do Imóvel.
	 * 
	 * @created 31/07/2012
	 * @param idsImovelCobrancaSituacao
	 *            lista de ids selecionada na tela.
	 */
	public void encerrarCobrancaAdministrativaImovel(List<Integer> idsImovelCobrancaSituacao, Integer motivoRetirada, Usuario usuario)
					throws ControladorException{

		try{

			// Valida o preenchimento das informações de entrada - Imóveis Cobrança Situação e
			// Motivo de Retirada
			if(Util.isVazioOrNulo(idsImovelCobrancaSituacao)){
				throw new ControladorException("atencao.imoveis_nao_selecionados_cobranca_administrativa");
			}

			if((motivoRetirada == null) || (motivoRetirada.intValue() < 0)){
				throw new ControladorException("atencao.motivo_retirada_nao_informado_cobranca_administrativa");
			}

			// Passo 1 - Consultar o motivo na tabela IMOVEL_COBRANCA_MOTIVO_RETIRAD, de acordo com
			// o motivo informado pelo usuário
			FiltroImovelCobrancaMotivoRetirada filtroMotivoRetirada = new FiltroImovelCobrancaMotivoRetirada();
			filtroMotivoRetirada.adicionarParametro(new ParametroSimples(FiltroImovelCobrancaMotivoRetirada.ID, motivoRetirada));

			ImovelCobrancaMotivoRetirada motivo = (ImovelCobrancaMotivoRetirada) Util.retonarObjetoDeColecao(getControladorUtil()
							.pesquisar(filtroMotivoRetirada, ImovelCobrancaMotivoRetirada.class.getName()));

			// Passo 2 Criar For com os id´s selecionados
			Date ultimaAlteracao = new Date();
			Imovel imovel = null;

			for(Integer idImovelCobranca : idsImovelCobrancaSituacao){

				// Passo 3 Consultar por ID IMOVEL_COBRANCA_SITUACAO
				ImovelCobrancaSituacao imovelCobranca = (ImovelCobrancaSituacao) getControladorUtil().pesquisar(idImovelCobranca,
								ImovelCobrancaSituacao.class, false);

				// Passo 4 atribuir valores em:
				// ISCB_DTRETIRADACOBRANCA Data Corrente
				imovelCobranca.setDataRetiradaCobranca(ultimaAlteracao);
				// ICMR_ID ICMR_ID Escolhido acima.
				imovelCobranca.setImovelCobrancaMotivoRetirada(motivo);
				// ISCB_TMULTIMAALTERACAO Data Corrente.
				imovelCobranca.setUltimaAlteracao(ultimaAlteracao);
				// USUR_ID Usuário Logado.
				imovelCobranca.setUsuario(usuario);

				// Passo 5 Consultar 1.2
				Collection<CobrancaDocumentoItem> cobrancaPendentes = repositorioCobranca
								.obterDocumentosCobrancaPendentes(idImovelCobranca);

				for(CobrancaDocumentoItem cobrancaDocumentoItem : cobrancaPendentes){

					// atualizar valores
					// CDIT_TMULTIMAALTERACAO Data Corrente
					cobrancaDocumentoItem.setUltimaAlteracao(ultimaAlteracao);
					// CDIT_ICATUALIZADO 1(Já Atualizado)
					cobrancaDocumentoItem.setIndicadorAtualizado(new Short("1"));
					// CDIT_DTSITUACAODEBITO Data Corrente.
					cobrancaDocumentoItem.setDataSituacaoDebito(ultimaAlteracao);
					// CDST_ID 7 (Excluído)
					CobrancaDebitoSituacao cobrancaDebitoSituacao = (CobrancaDebitoSituacao) getControladorUtil().pesquisar(7,
									CobrancaDebitoSituacao.class, false);
					cobrancaDocumentoItem.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

					// Passo 6 Desmarcar o Documento para não sendo da Cobrança Administrativa.
					Short indicadorCobrancaAdministrativa = new Short("2");
					if(cobrancaDocumentoItem.getContaGeral() != null && cobrancaDocumentoItem.getContaGeral().getConta() != null){
						Conta conta = cobrancaDocumentoItem.getContaGeral().getConta();
						conta.setIndicadorCobrancaAdministrativa(indicadorCobrancaAdministrativa);
						conta.setUltimaAlteracao(new Date());
						getControladorUtil().atualizar(conta);
					}else if(cobrancaDocumentoItem.getGuiaPagamentoGeral() != null
									&& cobrancaDocumentoItem.getGuiaPagamentoGeral().getGuiaPagamento() != null){
						GuiaPagamento guiaPagamento = cobrancaDocumentoItem.getGuiaPagamentoGeral().getGuiaPagamento();

						FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
										FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID, guiaPagamento.getId()));
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO,
										cobrancaDocumentoItem.getNumeroDaPrestacao()));

						Collection<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = this.getControladorUtil().pesquisar(
										filtroGuiaPagamentoPrestacao, GuiaPagamentoPrestacao.class.getName());

						if(!Util.isVazioOrNulo(colecaoGuiaPagamentoPrestacao)){
							GuiaPagamentoPrestacao guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) Util
											.retonarObjetoDeColecao(colecaoGuiaPagamentoPrestacao);
							guiaPagamentoPrestacao.setIndicadorCobrancaAdministrativa(indicadorCobrancaAdministrativa);
							guiaPagamentoPrestacao.setUltimaAlteracao(new Date());
							getControladorUtil().atualizar(guiaPagamentoPrestacao);
						}
					}

					getControladorUtil().atualizar(cobrancaDocumentoItem);

				}

				// 4.1.2. Desmarca os itens pendentes remuneráveis:
				if(Util.isNaoNuloBrancoZero(imovelCobranca.getImovel())){
					imovel = imovelCobranca.getImovel();

					// 4.1.2.1. Desmarca as contas remuneráveis
					desmarcarContasRemuneraveis(ultimaAlteracao, imovel);

					// 4.1.2.2. Desmarca as guias remuneráveis
					desmarcarGuiasPagamentosRemuneraveis(ultimaAlteracao, imovel);

					// 4.1.2.3. Desmarca os débitos a cobrar remuneráveis
					desmarcarDebidosACobrarRemuneraveis(ultimaAlteracao, imovel);

					// 4.1.2.4. Desmarca os débitos cobrados remuneráveis.
					desmacarDebitosCobradosRemuneraveis(ultimaAlteracao, imovel);

				}

				getControladorUtil().atualizar(imovelCobranca);

			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 4.1.2.1. Desmarca as contas remuneráveis - atualiza a tabela CONTA para
	 * IMOV_ID=Id do imóvel selecionado para retirada e CNTA_ICREMUNERACOBRANCAADM
	 * com o valor 1 (sim), caso existam contas remuneráveis para o imóvel, com os
	 * seguintes dados:
	 * 
	 * @param ultimaAlteracao
	 * @param imovel
	 * @throws ControladorException
	 */
	private void desmarcarContasRemuneraveis(Date ultimaAlteracao, Imovel imovel) throws ControladorException{

		FiltroConta filtroConta = new FiltroConta();
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.IMOVEL_ID, imovel.getId()));
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.INDICADOR_REMUNERACAO_COBRANCA_ADMINISTRATIVA,
						ConstantesSistema.SIM));

		Collection colecaoConta = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

		if(Util.isNaoNuloBrancoZero(colecaoConta)){
			Conta conta = null;
			for(Object object : colecaoConta){
				conta = (Conta) object;

				conta.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.NAO);
				conta.setUltimaAlteracao(ultimaAlteracao);
				getControladorUtil().atualizar(conta);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 4.1.2.2. Desmarca as guias remuneráveis - atualiza a tabela
	 * GUIA_PAGAMENTO_PRESTACAO para GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO com
	 * IMOV_ID=Id do imóvel selecionado para retirada e GPPR_ICREMUNERACOBRANCAADM
	 * com o valor 1 (sim), caso existam guias remuneráveis para o imóvel, com os
	 * seguintes dados:
	 * 
	 * @param ultimaAlteracao
	 * @param imovel
	 * @throws ControladorException
	 */
	private void desmarcarGuiasPagamentosRemuneraveis(Date ultimaAlteracao, Imovel imovel) throws ControladorException{

		FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
		filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_IMOVEL_ID, imovel
						.getId()));
		filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.INDICADOR_REMUNERA_COBRANCA_ADM,
						ConstantesSistema.SIM));

		Collection colecaoGuiaPagamentoPrestacao = getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
						GuiaPagamentoPrestacao.class.getName());

		if(Util.isNaoNuloBrancoZero(colecaoGuiaPagamentoPrestacao)){
			GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;
			for(Object object : colecaoGuiaPagamentoPrestacao){
				guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) object;

				guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.NAO);
				guiaPagamentoPrestacao.setUltimaAlteracao(ultimaAlteracao);
				getControladorUtil().atualizar(guiaPagamentoPrestacao);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 4.1.2.3. Desmarca os débitos a cobrar remuneráveis - atualiza a tabela
	 * DEBITO_A_COBRAR para IMOV_ID=Id do imóvel selecionado para retirada e
	 * DBAC_ICREMUNERACOBRANCAADM com o valor 1 (sim), caso existam débitos a cobrar
	 * remuneráveis para o imóvel, com os seguintes dados:
	 * 
	 * @param ultimaAlteracao
	 * @param imovel
	 * @throws ControladorException
	 */
	private void desmarcarDebidosACobrarRemuneraveis(Date ultimaAlteracao, Imovel imovel) throws ControladorException{

		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.IMOVEL_ID, imovel.getId()));
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.INDICADOR_REMUNERACAO_COBRANCA_ADMINISTRATIVA,
						ConstantesSistema.SIM));

		Collection colecaoDebitoACobrar = getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

		if(Util.isNaoNuloBrancoZero(colecaoDebitoACobrar)){
			DebitoACobrar debitoACobrar = null;
			for(Object object : colecaoDebitoACobrar){
				debitoACobrar = (DebitoACobrar) object;

				debitoACobrar.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.NAO);
				debitoACobrar.setUltimaAlteracao(ultimaAlteracao);
				getControladorUtil().atualizar(debitoACobrar);

			}
		}
	}

	/**
	 * [UC3060] Manter Imóvel Cobrança Administrativa
	 * 4.1.2.4. Desmarca os débitos cobrados remuneráveis - atualiza a tabela
	 * DEBITO_COBRADO para CNTA_ID=(CNTA_ID da tabela CONTA com IMOV_ID=Id do imóvel
	 * selecionado para retirada) e DBCB_ICREMUNERACOBRANCAADM com o valor 1 (sim),
	 * caso existam débitos cobrados remuneráveis para o imóvel, com os seguintes
	 * dados:
	 * 
	 * @param ultimaAlteracao
	 * @param imovel
	 * @throws ControladorException
	 */
	private void desmacarDebitosCobradosRemuneraveis(Date ultimaAlteracao, Imovel imovel) throws ControladorException{

		FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
		filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.CONTA_IMOVEL_ID, imovel.getId()));
		filtroDebitoCobrado.adicionarParametro(new ParametroSimples(FiltroDebitoCobrado.INDICADOR_REMUNERA_COBRANCA_ADM,
						ConstantesSistema.SIM));

		Collection colecaoDebitoCobrado = getControladorUtil().pesquisar(filtroDebitoCobrado, DebitoCobrado.class.getName());

		if(Util.isNaoNuloBrancoZero(colecaoDebitoCobrado)){
			DebitoCobrado debitoCobrado = null;
			for(Object object : colecaoDebitoCobrado){
				debitoCobrado = (DebitoCobrado) object;

				debitoCobrado.setIndicadorRemuneraCobrancaAdministrativa(ConstantesSistema.NAO);
				debitoCobrado.setUltimaAlteracao(ultimaAlteracao);
				getControladorUtil().atualizar(debitoCobrado);

			}
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * Pós-condição: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Sávio Luiz
	 * @date 15/06/2007
	 */
	public void gerarResumoAcoesCobrancaEventual(Object[] dadosCobrancaAcaoAtividadeEventual, int idFuncionalidadeIniciada,
					Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando,
					Collection<CobrancaDocumento> colecaoCobrancaDocumento) throws ControladorException{

		Collection<CobrancaDocumento> colecaoCobrancaDocumentoParaGeracaoResumo = null;
		boolean recebeuDocumentoPorParametro = false;

		// Verifica se foi chamada pelo batch Gerar Resumo das Ações de Cobrança
		if(idFuncionalidadeIniciada > 0){

			int idUnidadeIniciada = 0;

			// Registrar o início do processamento da Unidade de Processamento do Batch
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_COMAND, Util.obterInteger(dadosCobrancaAcaoAtividadeEventual[0].toString()));
			try{

				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
				if(!Util.isVazioOrNulo(dadosCobrancaAcaoAtividadeEventual)){

					cobrancaAcaoAtividadeComando = repositorioCobranca.pesquisarCobrancaAcaoAtividadeComandoPorId(Util
									.obterInteger(dadosCobrancaAcaoAtividadeEventual[0].toString()));
				}

				// Para cada comando eventual de cobrança recebido ou selecionado
				if(cobrancaAcaoAtividadeComando != null){

					LOGGER.info("Antes de excluir os registros de ResumoCobrancaAcaoEventual do Comando de Cobrança "
									+ cobrancaAcaoAtividadeComando.getId());
					/*
					 * O sistema exclui o resumo das ações de cobrança eventual referente ao
					 * comando de
					 * ação de cobrança que está sendo processado
					 */
					repositorioCobranca.excluirResumoCobrancaAcaoEventual(cobrancaAcaoAtividadeComando.getId(), null);

					LOGGER.info("Exclusão concluída! Comando de Cobrança: " + cobrancaAcaoAtividadeComando.getId());

					// Caso a ação de cobrança gere documento de cobrança
					if(cobrancaAcaoAtividadeComando.getCobrancaAcao().getDocumentoTipo() != null){

						LOGGER.info("Antes de consultar os Documentos de cobrança do Comando " + cobrancaAcaoAtividadeComando.getId());

						// O sistema seleciona os documentos de cobrança gerados a partir da
						// ação de cobrança
						colecaoCobrancaDocumentoParaGeracaoResumo = this.repositorioCobranca
										.pesquisarCobrancaDocumentoParaGeracaoResumoEventual(cobrancaAcaoAtividadeComando.getId());

						LOGGER.info("Consulta concluída! Comando de Cobrança: " + cobrancaAcaoAtividadeComando.getId());

						// [FS0002 - Verificar Existência de Documentos de Cobrança]
						if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoParaGeracaoResumo)){

							LOGGER.info("Antes de processar os Documentos de cobrança do Comando " + cobrancaAcaoAtividadeComando.getId());

							/*
							 * O sistema processa os documentos de cobrança selecionados
							 * [SB0001
							 * - Processar Documentos de Cobrança]
							 */
							this.processarDocumentosCobranca(colecaoCobrancaDocumentoParaGeracaoResumo, recebeuDocumentoPorParametro,
											cobrancaAcaoAtividadeComando);

							LOGGER.info("Processamento concluído! Comando de Cobrança: " + cobrancaAcaoAtividadeComando.getId());

						}else{

							/*
							 * Caso o documento tenha sido gerado a partir de um comando de ação de
							 * cobrança
							 * (CACM_ID diferente de nulo) e a data prevista para o encerramento
							 * seja igual ou menor
							 * que a data corrente
							 */
							if(cobrancaAcaoAtividadeComando.getId() != null
											&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null && cobrancaAcaoAtividadeComando
															.getDataEncerramentoPrevista().compareTo(new Date()) < 1)){

								/*
								 * O sistema atualiza a data e hora da realização da atividade
								 * encerrar ação de
								 * cobrança (CACM_DTENCERRAMENTOREALIZADA = Data e hora correntes da
								 * tabela
								 * COBRANCA_ACAO_ATIVIDADE_COMAND)
								 */
								repositorioCobranca.atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando.getId());
							}
						}
					}
				}

				LOGGER.info("Processo 80 finalizado!");

				getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

			}catch(Exception e){

				e.printStackTrace();
				getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
				throw new EJBException(e);
			}
		}else{

			try{

				// Caso a lista de Documentos de Cobrança recebida esteja preenchida
				if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){

					// Inicializa coleção caso estejam nulas
					if(Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando)){

						colecaoCobrancaAcaoAtividadeComando = new ArrayList<CobrancaAcaoAtividadeComando>();
					}

					recebeuDocumentoPorParametro = true;

					// Para cada documento de cobrança
					for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){

						// Carrega os dados do documento
						cobrancaDocumento = (CobrancaDocumento) getControladorUtil().pesquisar(cobrancaDocumento.getId(),
										CobrancaDocumento.class, false);

						// Caso o documento tenha sido gerado a partir de um comando de ação de
						// cobrança
						if(cobrancaDocumento.getCobrancaAcaoAtividadeComando() != null){

							CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) getControladorUtil()
											.pesquisar(cobrancaDocumento.getCobrancaAcaoAtividadeComando().getId(),
															CobrancaAcaoAtividadeComando.class, true);

							colecaoCobrancaAcaoAtividadeComando.add(cobrancaAcaoAtividadeComando);

						}
					}
				}

				/*
				 * Caso a lista de Comandos de Cobrança Eventuais e lista de Documentos de Cobrança
				 * recebidos estejam vazios
				 */
				if(Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando) && Util.isVazioOrNulo(colecaoCobrancaDocumento)){

					/*
					 * Caso a lista de Comandos de Cobrança Eventuais, e a lista de Documentos de
					 * Cobrança recebidos estejam vazios, o sistema seleciona os Comandos de
					 * Cobrança Eventuais executados e ainda não encerrados
					 */
					colecaoCobrancaAcaoAtividadeComando = (List<CobrancaAcaoAtividadeComando>) repositorioCobranca
									.pesquisarCobrancaAcaoAtividadeComando();

					if(!Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando)){

						// Para cada comando eventual de cobrança recebido ou selecionado
						for(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando : colecaoCobrancaAcaoAtividadeComando){

							/*
							 * O sistema exclui o resumo das ações de cobrança eventual referente ao
							 * comando de
							 * ação de cobrança que está sendo processado
							 */
							repositorioCobranca.excluirResumoCobrancaAcaoEventual(cobrancaAcaoAtividadeComando.getId(), null);

							// Caso a ação de cobrança gere documento de cobrança
							if(cobrancaAcaoAtividadeComando.getCobrancaAcao().getDocumentoTipo() != null){

								// o sistema seleciona os documentos de cobrança gerados a partir da
								// ação de cobrança
								colecaoCobrancaDocumentoParaGeracaoResumo = this.repositorioCobranca
												.pesquisarCobrancaDocumentoParaGeracaoResumoEventual(cobrancaAcaoAtividadeComando.getId());

								// [FS0002 - Verificar Existência de Documentos de Cobrança]
								if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){

									/*
									 * O sistema processa os documentos de cobrança selecionados
									 * [SB0001
									 * - Processar Documentos de Cobrança]
									 */
									this.processarDocumentosCobranca(colecaoCobrancaDocumentoParaGeracaoResumo,
													recebeuDocumentoPorParametro, cobrancaAcaoAtividadeComando);
								}else{

									/*
									 * Caso o documento tenha sido gerado a partir de um comando de
									 * ação de
									 * cobrança
									 * (CACM_ID diferente de nulo) e a data prevista para o
									 * encerramento
									 * seja igual ou menor
									 * que a data corrente
									 */
									if(cobrancaAcaoAtividadeComando.getId() != null
													&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null && cobrancaAcaoAtividadeComando
																	.getDataEncerramentoPrevista().compareTo(new Date()) < 1)){

										/*
										 * O sistema atualiza a data e hora da realização da
										 * atividade
										 * encerrar ação de
										 * cobrança (CACM_DTENCERRAMENTOREALIZADA = Data e hora
										 * correntes da
										 * tabela
										 * COBRANCA_ACAO_ATIVIDADE_COMAND)
										 */
										repositorioCobranca.atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando.getId());
									}
								}
							}
						}
					}
				}else{

					if(!Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando)){

						// Para cada comando eventual de cobrança recebido ou selecionado
						for(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando : colecaoCobrancaAcaoAtividadeComando){

							/*
							 * O sistema exclui o resumo das ações de cobrança eventual referente ao
							 * comando de
							 * ação de cobrança que está sendo processado
							 */
							repositorioCobranca.excluirResumoCobrancaAcaoEventual(cobrancaAcaoAtividadeComando.getId(), null);

							// Caso a ação de cobrança gere documento de cobrança
							if(cobrancaAcaoAtividadeComando.getCobrancaAcao().getDocumentoTipo() != null){

								// O sistema seleciona os Documentos de Cobrança
								colecaoCobrancaDocumentoParaGeracaoResumo = this.repositorioCobranca
												.pesquisarCobrancaDocumentoParaGeracaoResumoEventual(cobrancaAcaoAtividadeComando.getId());

								// [FS0002 - Verificar Existência de Documentos de Cobrança]
								if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoParaGeracaoResumo)){

									/*
									 * O sistema processa os documentos de cobrança selecionados
									 * [SB0001
									 * - Processar Documentos de Cobrança]
									 */
									this.processarDocumentosCobranca(colecaoCobrancaDocumentoParaGeracaoResumo,
													recebeuDocumentoPorParametro, cobrancaAcaoAtividadeComando);
								}else{

									/*
									 * Caso o documento tenha sido gerado a partir de um comando de
									 * ação de
									 * cobrança
									 * (CACM_ID diferente de nulo) e a data prevista para o
									 * encerramento
									 * seja igual ou menor
									 * que a data corrente
									 */
									if(cobrancaAcaoAtividadeComando.getId() != null
													&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null && cobrancaAcaoAtividadeComando
																	.getDataEncerramentoPrevista().compareTo(new Date()) < 1)){

										/*
										 * O sistema atualiza a data e hora da realização da
										 * atividade
										 * encerrar ação de
										 * cobrança (CACM_DTENCERRAMENTOREALIZADA = Data e hora
										 * correntes da
										 * tabela
										 * COBRANCA_ACAO_ATIVIDADE_COMAND)
										 */
										repositorioCobranca.atualizarCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando.getId());
									}
								}
							}
						}
					}
				}
			}catch(Exception e){

				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * [SB0001] - Processar Documentos de Cobrança
	 * 
	 * @author Anderson Italo
	 * @throws ControladorException
	 * @date 13/07/2012
	 */
	private void processarDocumentosCobranca(Collection<CobrancaDocumento> colecaoCobrancaDocumento, boolean recebeuDocumentoPorParametro,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando) throws ControladorException{

		try{

			BigDecimal valorLimitePrioridade = BigDecimal.ZERO;

			// Captura os ids de ações sem prazo de validade a partir de um parâmetro
			List<String> idsAcoesSemPrazoValidade = new ArrayList<String>();

			String[] idsAcoesSemPrazoValidadeArray = ParametroCobranca.P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE.executar().split(",");
			if(idsAcoesSemPrazoValidadeArray != null && idsAcoesSemPrazoValidadeArray.length > 0){
				idsAcoesSemPrazoValidade = Arrays.asList(idsAcoesSemPrazoValidadeArray);
			}


			// Para cada documento de cobrança selecionado o sistema
			for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){

				LOGGER.info("Processando Documento de Cobrança: " + cobrancaDocumento.getId());

				/*
				 * Determina a situação da ação de cobrança (ação pendente, ação fiscalizada, ação
				 * executada, ação cancelada ou ação cancelada por decurso de prazo de acordo com a
				 * tabela COBRANCA_ACAO_SITUACAO) [SB0002 - Determinar Situação da Ação de Cobrança]
				 */
				determinarSituacaoAcaoCobranca(recebeuDocumentoPorParametro, cobrancaAcaoAtividadeComando, cobrancaDocumento,
								idsAcoesSemPrazoValidade);

				/*
				 * para cada item selecionado identifica a situação do débito do item (de acordo
				 * com a tabela COBRANCA_DEBITO_SITUACAO) [SB0003 - Identificar Situação do
				 * Débito do Item do Documento de Cobrança]
				 */
				Collection<Object[]> colecaoSituacaoDebitoItensComandoEventual = repositorioCobranca
								.pesquisarSituacaoDebitoItensParaGeracaoResumoEventual(cobrancaDocumento.getId());

				// Caso o documento de Cobrança possua itens
				if(!Util.isVazioOrNulo(colecaoSituacaoDebitoItensComandoEventual)){

					/*
					 * Atualiza o indicador atualizado do item do documento de cobrança - Com valor
					 * igual a "não" (2)
					 */
					repositorioCobranca.atualizarIndicadorAtualizadoCobrancaDocumentoItensPorDocumento(cobrancaDocumento.getId());

					/*
					 * Determina a situação predominante do débito do documento de cobrança (de
					 * acordo com a tabela COBRANCA_DEBITO_SITUACAO), de acordo com a situação dos
					 * itens do documento de cobrança [SB0005 - Determinar Situação Predominante do
					 * Débito do Documento de Cobrança]
					 */
					determinarSituacaoPredominanteDebitoItemDocumentoCobranca(cobrancaDocumento, colecaoSituacaoDebitoItensComandoEventual,
									idsAcoesSemPrazoValidade);

					/*
					 * Caso ação de cobrança que originou o documento de cobrança seja
					 * correspondente a "cobrança administrativa"
					 */
					if(cobrancaDocumento.getCobrancaAcao() != null
									&& cobrancaDocumento.getCobrancaAcao().getId().equals(CobrancaAcao.COBRANCA_ADMINISTRATIVA)){

						// O sistema recupera os dados de remuneração
						// [SB0004] - Tratar Cobrança Administrativa
						this.tratarCobrancaAdministrativa(cobrancaAcaoAtividadeComando.getId(), cobrancaDocumento);

					}
				}else{

					/*
					 * Caso Contrário, atribuir à situação do débito do documento de cobrança o
					 * valor correspondente à "sem débito"
					 */
					CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
					cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.SEM_DEBITOS);
					cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

					// Atribuir à data da situação do débito do documento de cobrança o valor nulo
					cobrancaDocumento.setDataSituacaoDebito(null);
				}

				/*
				 * Indicador Antes Após: Atribuir o valor nulo caso a data da situação da ação de
				 * cobrança ou a data da situação do débito tenha o valor nulo;
				 * Atribuir o valor 1(um)-ANTES caso a data da situação da ação de cobrança seja
				 * anterior a data da situação do débito, caso contrário atribuir o valor
				 * 2(dois)-APÓS
				 */
				if(cobrancaDocumento.getDataSituacaoAcao() == null || cobrancaDocumento.getDataSituacaoDebito() == null){

					cobrancaDocumento.setIndicadorAntesApos(null);
				}else{

					if(cobrancaDocumento.getDataSituacaoAcao() != null
									&& cobrancaDocumento.getDataSituacaoAcao().compareTo(cobrancaDocumento.getDataSituacaoDebito()) == -1){

						cobrancaDocumento.setIndicadorAntesApos(ConstantesSistema.INDICADOR_ANTES);
					}else{

						cobrancaDocumento.setIndicadorAntesApos(ConstantesSistema.INDICADOR_APOS);
					}
				}

				if(cobrancaDocumento.getCobrancaCriterio() != null
								&& cobrancaDocumento.getCobrancaCriterio().getValorLimitePrioridade() != null){

					valorLimitePrioridade = cobrancaDocumento.getCobrancaCriterio().getValorLimitePrioridade();
				}else{

					valorLimitePrioridade = BigDecimal.ZERO;
				}

				/*
				 * Indicador Limite: Atribuir o valor 1(um)-SIM caso o valor do documento de
				 * cobrança (CBDO_VLDOCUMENTO) seja maior que o valor limite do critério de cobrança
				 * (CBCT_VLLIMITEPRIORIDADE da tabela COBRANCA_CRITERIO com CBCT_ID da tabela
				 * COBRANCA_DOCUMENTO), caso contrário atribuir o valor 2(dois)-NÃO
				 */
				if(cobrancaDocumento.getValorDocumento().compareTo(valorLimitePrioridade) == 1){

					cobrancaDocumento.setIndicadorLimite(ConstantesSistema.SIM);
				}else{

					cobrancaDocumento.setIndicadorLimite(ConstantesSistema.NAO);
				}

				/*
				 * [OC790655][UC0614][SB0001]: 1.5. Caso o tipo de documento da ação de
				 * cobrança tenha a indicação de geração de dados no histórico de manutenção da
				 * ligação de água do imóvel (DOTP_ICGERARHISTORICOIMOVEL com o valor 1 (sim) na
				 * tabela DOCUMENTO_TIPO com DOTP_ID=DOTP_ID da tabela COBRANCA_DOCUMENTO com
				 * CBAC_ID=CBAC_ID da tabela COVBRANCA_DOCUMENTO), o sistema atualiza a situação
				 * do débito e do documento - atualiza a tabela HISTORICO_MANUTENCAO_LIGACAO
				 */

				if(cobrancaDocumento.getDocumentoTipo() != null
								&& cobrancaDocumento.getDocumentoTipo().getIndicadorGerarHistoricoImovel() != null
								&& ConstantesSistema.SIM.equals(cobrancaDocumento.getDocumentoTipo().getIndicadorGerarHistoricoImovel())){

					getControladorLigacaoAgua().atualizarHistoricoManutencaoLigacao(cobrancaDocumento,
									HistoricoManutencaoLigacao.GERAR_RESUMO_ACOES_COBRANCA_EVENTUAIS);
				}
			}

			LOGGER.info("Antes de atualizar coleção de documentos de cobrança");

			// Atualiza a tabela COBRANCA_DOCUMENTO
			getControladorBatch().atualizarColecaoObjetoParaBatch((Collection) colecaoCobrancaDocumento);
			LOGGER.info("Coleção de documentos de cobrança ATUALIZADA!");

			LOGGER.info("Iniciando geração de dados do RESUMO DE COBRANÇA EVENTUAL!");

			gerarDadosResumoCobrancaAcaoEventual(cobrancaAcaoAtividadeComando.getId(), Usuario.USUARIO_BATCH, cobrancaAcaoAtividadeComando
							.getCobrancaAcao().getId(), cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista(),
							cobrancaAcaoAtividadeComando.getDataEncerramentoRealizada(), cobrancaAcaoAtividadeComando.getRealizacao(),
							idsAcoesSemPrazoValidade);

			LOGGER.info("Geração de dados do RESUMO DE COBRANÇA EVENTUAL concluída!");

		}catch(Exception e){

			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Sávio Luiz
	 * @throws ErroRepositorioException
	 * @date 19/06/2007
	 */
	private ResumoCobrancaAcaoEventual criarResumoCobrancaAcaoEventual(int idCobrancaAcaoComando, Date dataRealizacaoEmitir,
					Date dataAtividadeEncerrar, Categoria categoria, int idCobrancaAcao, Integer idCobrancaGrupo, Integer idSituacaoAcao,
					Integer idSituacaoPredominanteDebito, Integer idFiscalizacao, int indicadorCronogramaComando, Short indicadorAntesApos,
					Short indicadorAcimaLimite, BigDecimal valorDocumento, Integer idCobrancaCriterio, Integer idGerenciaRegional,
					Integer idLocalidade, Integer idSetorComercial, Integer idRota, int codigoSetorComercial, Integer idQuadra,
					int numeroQuadra, Integer idPerfilImovel, Integer idSituacaoLigacaoAgua, Integer idSituacaoLigacaoEsgoto,
					Integer idEsferaPoder, Integer quantidadeDocumentos, Empresa empresa, short indicadorDefinitivo,
					Integer idMotivoNaoEntregaDocumento, Integer idFaturamentoGrupoCronogramaMensal, Integer idUnidadeNegocio)
					throws ErroRepositorioException{

		ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual = new ResumoCobrancaAcaoEventual();

		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
		FaturamentoGrupoCronogramaMensal faturamentoGrupoCronogramaMensal = null;

		if(idCobrancaAcaoComando > 0){

			cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
			cobrancaAcaoAtividadeComando.setId(Integer.valueOf(idCobrancaAcaoComando));
			resumoCobrancaAcaoEventual.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		}else{

			faturamentoGrupoCronogramaMensal = new FaturamentoGrupoCronogramaMensal();
			faturamentoGrupoCronogramaMensal.setId(idFaturamentoGrupoCronogramaMensal);
			resumoCobrancaAcaoEventual.setFaturamentoGrupoCronogramaMensal(faturamentoGrupoCronogramaMensal);
		}

		// data e hora da realização da atividade "emitir"
		resumoCobrancaAcaoEventual.setTempoRealizacaoEmitir(dataRealizacaoEmitir);

		// data e hora presvista da atividade "encerrar"
		resumoCobrancaAcaoEventual.setTempoRealizacaoEncerrar(dataAtividadeEncerrar);

		// id do grupo de cobrança
		CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
		cobrancaGrupo.setId(idCobrancaGrupo);
		resumoCobrancaAcaoEventual.setCobrancaGrupo(cobrancaGrupo);

		if(idGerenciaRegional != null){

			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(idGerenciaRegional);

			// gerência regional
			resumoCobrancaAcaoEventual.setGerenciaRegional(gerenciaRegional);
		}

		if(idLocalidade != null){

			Localidade localidade = new Localidade();
			localidade.setId(idLocalidade);

			// localidade
			resumoCobrancaAcaoEventual.setLocalidade(localidade);
		}

		if(idSetorComercial != null){

			SetorComercial setorComercial = new SetorComercial();
			setorComercial.setId(idSetorComercial);

			// Setor Comercial
			resumoCobrancaAcaoEventual.setSetorComercial(setorComercial);
		}

		if(idRota != null){

			Rota rota = new Rota();
			rota.setId(idRota);

			// Rota
			resumoCobrancaAcaoEventual.setRota(rota);
		}

		if(idQuadra != null){

			Quadra quadra = new Quadra();
			quadra.setId(idQuadra);

			// Quadra
			resumoCobrancaAcaoEventual.setQuadra(quadra);
		}

		// Código do Setor Comercial
		resumoCobrancaAcaoEventual.setCodigoSetorcomercial(codigoSetorComercial);

		// Numero da Quadra
		resumoCobrancaAcaoEventual.setNumeroQuadra(numeroQuadra);

		if(idPerfilImovel != null){

			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(idPerfilImovel);

			// Perfil do Imovel
			resumoCobrancaAcaoEventual.setImovelPerfil(imovelPerfil);
		}

		if(idSituacaoLigacaoAgua != null){

			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(idSituacaoLigacaoAgua);

			// Situação da Ligação de Água
			resumoCobrancaAcaoEventual.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		if(idSituacaoLigacaoEsgoto != null){

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(idSituacaoLigacaoEsgoto);

			// Situação da Ligação de Esgoto
			resumoCobrancaAcaoEventual.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// categoria
		resumoCobrancaAcaoEventual.setCategoria(categoria);

		// Esfera do Poder
		if(idEsferaPoder != null){

			EsferaPoder esferaPoder = new EsferaPoder();
			esferaPoder.setId(idEsferaPoder);
			resumoCobrancaAcaoEventual.setEsferaPoder(esferaPoder);
		}

		// id da ação de cobrança
		CobrancaAcao cobrancaAcao = new CobrancaAcao();
		cobrancaAcao.setId(Integer.valueOf(idCobrancaAcao));
		resumoCobrancaAcaoEventual.setCobrancaAcao(cobrancaAcao);

		// id da situação da ação de cobrança
		CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		cobrancaAcaoSituacao.setId(idSituacaoAcao);
		resumoCobrancaAcaoEventual.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);

		// id da situação predominante de débito
		if(idSituacaoPredominanteDebito != null){

			CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(idSituacaoPredominanteDebito);
			resumoCobrancaAcaoEventual.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
		}else{

			resumoCobrancaAcaoEventual.setCobrancaDebitoSituacao(null);
		}

		// id da situação da fiscalização
		if(idFiscalizacao != null){

			FiscalizacaoSituacao fiscalizacaoSituacao = new FiscalizacaoSituacao();
			fiscalizacaoSituacao.setId(idFiscalizacao);
			resumoCobrancaAcaoEventual.setFiscalizacaoSituacao(fiscalizacaoSituacao);
		}

		// indicador antes apos
		if(indicadorAntesApos != null){

			resumoCobrancaAcaoEventual.setIndicadorAntesApos(Short.valueOf(indicadorAntesApos.shortValue()));
		}else{

			resumoCobrancaAcaoEventual.setIndicadorAntesApos(null);
		}

		// indicador acima do limite
		if(indicadorAcimaLimite != null){

			resumoCobrancaAcaoEventual.setIndicadorAcimaLimite(Short.valueOf(indicadorAcimaLimite.shortValue()));
		}else{

			resumoCobrancaAcaoEventual.setIndicadorAcimaLimite(null);
		}

		// quantidade de documentos de cobrança
		resumoCobrancaAcaoEventual.setQuantidadeDocumentos(quantidadeDocumentos);

		// valor dos documentos de cobrança
		resumoCobrancaAcaoEventual.setValorDocumentos(valorDocumento);

		// data ultima alteração
		resumoCobrancaAcaoEventual.setUltimaAlteracao(new Date());

		CobrancaCriterio cobrancaCriterio = null;
		if(idCobrancaCriterio != null){

			cobrancaCriterio = new CobrancaCriterio();
			cobrancaCriterio.setId(idCobrancaCriterio);
		}

		resumoCobrancaAcaoEventual.setCobrancaCriterio(cobrancaCriterio);

		resumoCobrancaAcaoEventual.setEmpresa(empresa);

		if(idUnidadeNegocio != null){

			resumoCobrancaAcaoEventual.setUnidadeNegocio(new UnidadeNegocio(idUnidadeNegocio));
		}

		resumoCobrancaAcaoEventual.setIndicadorDefinitivo(indicadorDefinitivo);

		// id da situação da MotivoNaoEntregaDocumento
		if(idMotivoNaoEntregaDocumento != null){

			MotivoNaoEntregaDocumento motivoNaoEntregaDocumento = new MotivoNaoEntregaDocumento();
			motivoNaoEntregaDocumento.setId(idMotivoNaoEntregaDocumento);
			resumoCobrancaAcaoEventual.setMotivoNaoEntregaDocumento(motivoNaoEntregaDocumento);
		}

		// Quantidade de imóveis marcados
		resumoCobrancaAcaoEventual.setQuantidadeImoveisMarcados(quantidadeDocumentos);

		return resumoCobrancaAcaoEventual;

	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * [SB0005] - Determinar Situação Predominante do Débito do Documento de Cobrança
	 * 
	 * @author Anderson Italo
	 * @throws ControladorException
	 * @date 13/07/2012
	 */
	private void determinarSituacaoPredominanteDebitoItemDocumentoCobranca(CobrancaDocumento cobrancaDocumento,
					Collection<Object[]> colecaoSituacaoDebitoItensComandoEventual, List<String> idsAcoesSemPrazoValidade)
					throws ControladorException{

		boolean todosItensPendentes = true;
		boolean algumItemPendente = false;
		BigDecimal valorItensPago = BigDecimal.ZERO;
		BigDecimal valorItensParcelado = BigDecimal.ZERO;
		BigDecimal valorItensCancelado = BigDecimal.ZERO;
		BigDecimal valorItensExcluido = BigDecimal.ZERO;

		BigDecimal valorItemCobrado = BigDecimal.ZERO;
		Date dataSituacaoDebito = null;

		Integer totalItensPago = 0;
		Integer totalItensParcelado = 0;
		Integer totalItensCancelado = 0;
		Integer totalItensExcluido = 0;

		Date dataSituacaoDebitoPago = null;
		Date dataSituacaoDebitoParcelado = null;
		Date dataSituacaoDebitoCancelado = null;
		Date dataSituacaoDebitoExcluido = null;

		CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();

		for(Object[] gerarResumoAcoesCobrancaEventualHelper : colecaoSituacaoDebitoItensComandoEventual){

			if(gerarResumoAcoesCobrancaEventualHelper[3] != null){
				if(!gerarResumoAcoesCobrancaEventualHelper[3].toString().equals(CobrancaDebitoSituacao.PENDENTE.toString())){

					todosItensPendentes = false;

					// Valor Item Cobrado
					if(gerarResumoAcoesCobrancaEventualHelper[2] != null
									&& !gerarResumoAcoesCobrancaEventualHelper[2].toString().equals("")){

						valorItemCobrado = new BigDecimal(gerarResumoAcoesCobrancaEventualHelper[2].toString());
					}else{

						valorItemCobrado = BigDecimal.ZERO;
					}

					// Data Situação Débito
					if(gerarResumoAcoesCobrancaEventualHelper[4] != null
									&& !gerarResumoAcoesCobrancaEventualHelper[4].toString().equals("")){

						dataSituacaoDebito = (Date) gerarResumoAcoesCobrancaEventualHelper[4];
					}

					if(gerarResumoAcoesCobrancaEventualHelper[3].toString().equals(CobrancaDebitoSituacao.PAGO.toString())){

						valorItensPago = valorItensPago.add(valorItemCobrado);
						totalItensPago = totalItensPago.intValue() + 1;
						dataSituacaoDebitoPago = dataSituacaoDebito;

					}else if(gerarResumoAcoesCobrancaEventualHelper[3].toString().equals(CobrancaDebitoSituacao.PARCELADO.toString())){

						if(gerarResumoAcoesCobrancaEventualHelper[2] != null
										&& !gerarResumoAcoesCobrancaEventualHelper[2].toString().equals("")){

							valorItemCobrado = new BigDecimal(gerarResumoAcoesCobrancaEventualHelper[2].toString());
						}else{

							valorItemCobrado = BigDecimal.ZERO;
						}

						valorItensParcelado = valorItensParcelado.add(valorItemCobrado);
						totalItensParcelado = totalItensParcelado.intValue() + 1;
						dataSituacaoDebitoParcelado = dataSituacaoDebito;
					}else if(gerarResumoAcoesCobrancaEventualHelper[3].toString().equals(CobrancaDebitoSituacao.CANCELADO.toString())){

						valorItensCancelado = valorItensCancelado.add(valorItemCobrado);
						totalItensCancelado = totalItensCancelado.intValue() + 1;
						dataSituacaoDebitoCancelado = dataSituacaoDebito;
					}else if(gerarResumoAcoesCobrancaEventualHelper[3].toString().equals(CobrancaDebitoSituacao.EXCLUIDO.toString())){

						valorItensExcluido = valorItensExcluido.add(valorItemCobrado);
						totalItensExcluido = totalItensExcluido.intValue() + 1;
						dataSituacaoDebitoExcluido = dataSituacaoDebito;
					}
				}else{
					algumItemPendente = true;
				}
			}
		}

		boolean acaoPossuiPrazoValidade = false;
		if(cobrancaDocumento.getCobrancaAcao() != null){
			acaoPossuiPrazoValidade = !idsAcoesSemPrazoValidade.contains(cobrancaDocumento.getCobrancaAcao().getId().toString());
		}

		/*
		 * 1. Caso a ação de cobrança do documento tenha prazo de validade E
		 * 1.1 Caso para o documento de cobrança todos os itens estejam na situação do
		 * débito de item "pendente"
		 * OU
		 * 2. Caso a ação de cobrança do documento não tenha prazo de validade E
		 * 2.1. Caso para o documento de cobrança algum dos itens esteja na situação do débito de
		 * item
		 * "pendente"
		 */
		if((acaoPossuiPrazoValidade && todosItensPendentes) || (!acaoPossuiPrazoValidade && algumItemPendente)){

			/*
			 * Atribuir à situação predominante do débito do documento de cobrança o
			 * valor correspondente a "pendente"
			 */
			cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);
			cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

			/*
			 * Atribuir à data da situação do débito do documento de cobrança o valor
			 * nulo
			 */
			cobrancaDocumento.setDataSituacaoDebito(null);

		}else{

			BigDecimal valorMinimoConsiderar = BigDecimal.ZERO;
			Integer quantidadeMinimaConsiderar = 0;

			if(cobrancaDocumento.getCobrancaCriterio() != null){

				/*
				 * Calcula o valor mínimo para considerar o documento pago / parcelado /
				 * cancelado = valor do documento de cobrança * (percentual mínimo em
				 * relação ao valor para considerar o documento pago/parcelado/cancelado
				 * ((CBCT_PCVLMINIMOPGPARCCANC / 100) da tabela COBRANCA_CRITERIO com
				 * CBCT_ID da tabela COBRANCA_DOCUMENTO))
				 */
				valorMinimoConsiderar = cobrancaDocumento.getValorDocumento().multiply(
								cobrancaDocumento.getCobrancaCriterio().getPercentualValorMinimoPagoParceladoCancelado()
												.divide(new BigDecimal("100")));

				/*
				 * Calcula a quantidade mínima de itens para considerar o documento pago /
				 * parcelado / cancelado = quantidade de itens do documento de cobrança *
				 * (percentual mínimo em relação à quantidade de itens para considerar o
				 * documento pago/parcelado/cancelado (CBCT_PCQTMINIMOPGPARCCANC da tabela
				 * COBRANCA_CRITERIO com CBCT_ID da tabela COBRANCA_DOCUMENTO) / 100)
				 */
				quantidadeMinimaConsiderar = (new BigDecimal(String.valueOf(colecaoSituacaoDebitoItensComandoEventual.size()))
								.divide((cobrancaDocumento.getCobrancaCriterio().getPercentualQuantidadeMinimoPagoParceladoCancelado()
												.divide(new BigDecimal("100"))))).intValue();
			}

			/*
			 * Caso o valor dos itens do documento na situação "pago" seja maior ou
			 * igual ao valor mínimo para considerar o documento pago / parcelado /
			 * cancelado ou a quantidade de itens na situação "pago" do documento seja
			 * maior ou igual à quantidade mínima de itens para considerar o documento
			 * pago / parcelado / cancelado
			 */
			if(valorItensPago.compareTo(BigDecimal.ZERO) == 1
							&& ((valorItensPago.compareTo(valorMinimoConsiderar) == 1 || valorItensPago.compareTo(valorMinimoConsiderar) == 0) || (totalItensPago
											.intValue() >= quantidadeMinimaConsiderar.intValue()))){

				/*
				 * Atribuir à situação predominante do débito do documento de cobrança o
				 * valor correspondente a "pago";
				 */
				cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
				cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PAGO);
				cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

				/*
				 * Atribuir à data da situação do débito do documento de cobrança a data
				 * da
				 * situação do débito do item do documento de cobrança correspondente a
				 * débito pago
				 */
				cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoPago);
			}else{

				/*
				 * Caso o valor dos itens do documento na situação "parcelado" seja
				 * maior ou
				 * igual ao valor mínimo para considerar o documento pago / parcelado /
				 * cancelado ou a quantidade de itens na situação "parcelado" do
				 * documento seja
				 * maior ou igual à quantidade mínima de itens para considerar o
				 * documento pago
				 * / parcelado / cancelado
				 */
				if(valorItensParcelado.compareTo(BigDecimal.ZERO) == 1
								&& ((valorItensParcelado.compareTo(valorMinimoConsiderar) == 1 || valorItensParcelado
												.compareTo(valorMinimoConsiderar) == 0) || (totalItensParcelado.intValue() >= quantidadeMinimaConsiderar
												.intValue()))){

					/*
					 * Atribuir à situação predominante do débito do documento de
					 * cobrança o
					 * valor correspondente a "parcelado"
					 */
					cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
					cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PARCELADO);
					cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

					/*
					 * Atribuir à data da situação do débito do documento de cobrança a
					 * data da
					 * situação do débito do item do documento de cobrança
					 * correspondente a
					 * débito parcelado
					 */
					cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoParcelado);
				}else{

					/*
					 * Caso o valor dos itens do documento na situação "cancelado" seja
					 * maior ou
					 * igual ao valor mínimo para considerar o documento pago /
					 * parcelado /
					 * cancelado ou a quantidade de itens na situação "cancelado" do
					 * documento seja
					 * maior ou igual à quantidade mínima de itens para considerar o
					 * documento pago
					 * / parcelado / cancelado
					 */
					if(valorItensCancelado.compareTo(BigDecimal.ZERO) == 1
									&& ((valorItensCancelado.compareTo(valorMinimoConsiderar) == 1 || valorItensCancelado
													.compareTo(valorMinimoConsiderar) == 0) || (totalItensCancelado.intValue() >= quantidadeMinimaConsiderar
													.intValue()))){

						/*
						 * Atribuir à situação predominante do débito do documento de
						 * cobrança o
						 * valor correspondente a "cancelado"
						 */
						cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
						cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.CANCELADO);
						cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

						/*
						 * Atribuir à data da situação do débito do documento de
						 * cobrança a data da
						 * situação do débito do item do documento de cobrança
						 * correspondente a
						 * débito cancelado
						 */
						cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoCancelado);
					}else{

						/*
						 * Caso o valor dos itens do documento na situação "excluído"
						 * seja maior ou
						 * igual ao valor mínimo para considerar o documento pago /
						 * parcelado /
						 * cancelado ou a quantidade de itens na situação "excluído" do
						 * documento seja
						 * maior ou igual à quantidade mínima de itens para considerar o
						 * documento pago
						 * / parcelado / cancelado
						 */
						if(valorItensExcluido.compareTo(BigDecimal.ZERO) == 1
										&& ((valorItensExcluido.compareTo(valorMinimoConsiderar) == 1 || valorItensExcluido
														.compareTo(valorMinimoConsiderar) == 0) || (totalItensExcluido.intValue() >= quantidadeMinimaConsiderar
														.intValue()))){

							/*
							 * Atribuir à situação predominante do débito do documento
							 * de cobrança o
							 * valor correspondente a "excluído";
							 */
							cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
							cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.EXCLUIDO);
							cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

							/*
							 * Atribuir à data da situação do débito do documento de
							 * cobrança a data da
							 * situação do débito do item do documento de cobrança
							 * correspondente a
							 * débito excluído
							 */
							cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoExcluido);
						}else{

							if(cobrancaDocumento.getCobrancaAcao() != null
											&& acaoCobrancaPossuiPrazoValidade(cobrancaDocumento.getCobrancaAcao().getId())){

								/*
								 * Considerar documento de cobrança pendente
								 * Atribuir à situação predominante do débito do documento
								 * de cobrança o valor correspondente a "pendente")
								 */
								cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
								cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PENDENTE);
								cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);

								/*
								 * Atribuir o valor nulo à data da situação do débito do
								 * documento de cobrança
								 */
								cobrancaDocumento.setDataSituacaoDebito(null);

							}else{

								BigDecimal maiorValor = Util.getMaiorValor(valorItensPago, valorItensParcelado, valorItensCancelado,
												valorItensExcluido);

								cobrancaDebitoSituacao = new CobrancaDebitoSituacao();

								if(maiorValor == null || maiorValor.compareTo(valorItensPago) == 0){

									cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PAGO);
									cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
									cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoPago);

								}else if(maiorValor.compareTo(valorItensParcelado) == 0){

									cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.PARCELADO);
									cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
									cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoParcelado);

								}else if(maiorValor.compareTo(valorItensCancelado) == 0){

									cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.CANCELADO);
									cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
									cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoCancelado);

								}else if(maiorValor.compareTo(valorItensExcluido) == 0){

									cobrancaDebitoSituacao.setId(CobrancaDebitoSituacao.EXCLUIDO);
									cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
									cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebitoExcluido);
								}
							}
						}
					}
				}
			}
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais
	 * [SB0002] - Determinar Situação da Ação de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 13/07/2012
	 */
	private void determinarSituacaoAcaoCobranca(boolean recebeuDocumentoPorParametro,
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, CobrancaDocumento cobrancaDocumento,
					List<String> idsAcoesSemPrazoValidade) throws ControladorException{

		try{
			// Caso não exista ordem de serviço
			Set<OrdemServico> ordensServico = cobrancaDocumento.getOrdensServico();

			if(ordensServico == null || ordensServico.isEmpty()){

				/*
				 * Caso o documento de cobrança tenha sido recebido por parâmetro e o valor da
				 * situação da ação do documento seja nulo ou "ação pendente"
				 */
				if(recebeuDocumentoPorParametro
								&& (cobrancaDocumento.getCobrancaAcaoSituacao() == null || cobrancaDocumento.getCobrancaAcaoSituacao()
												.getId().equals(CobrancaAcaoSituacao.PENDENTE))){

					/*
					 * Atribuir o valor "ação cancelada" à situação da ação de cobrança e a
					 * data/hora correntes à data da situação da ação de cobrança
					 */
					CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
					cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA);
					cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
					cobrancaDocumento.setDataSituacaoAcao(new Date());

				}else if(cobrancaDocumento.getCobrancaAcao() != null
								&& !idsAcoesSemPrazoValidade.contains(cobrancaDocumento.getCobrancaAcao().getId().toString())){

					// Caso a ação de cobrança do documento tenha prazo de validade (CBAC_ID da
					// tabela COBRANCA_DOCUMENTO não contido em PASI_VLPARAMETRO da tabela
					// PARAMETRO_SISTEMA com
					// PASI_CDPARAMETRO="P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE"):
					/*
					 * Caso a situação da ação não permita a geração de nova ação para o imóvel
					 * (CAST_ID da tabela COBRANCA_DOCUMENTO contido nos valores (nulo, 1
					 * (pendente), 6 (enviados), 8 (entregue))
					 */
					if(cobrancaDocumento.getCobrancaAcaoSituacao() == null
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.PENDENTE)
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENVIADOS)
									|| cobrancaDocumento.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.ENTREGUE)){

						boolean acaoComPrazoExpirado = false;
						/*
						 * Caso contrário, caso a data prevista para o encerramento seja igual ou
						 * menor que a data corrente
						 */
						if(cobrancaAcaoAtividadeComando != null
										&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista() != null)
										&& (cobrancaAcaoAtividadeComando.getDataEncerramentoPrevista().compareTo(new Date()) == 0 || cobrancaAcaoAtividadeComando
														.getDataEncerramentoPrevista().compareTo(new Date()) == -1)){
							acaoComPrazoExpirado = true;
						}

						// e o valor da situação da ação do documento seja nulo ou "ação pendente"
						if(acaoComPrazoExpirado
										&& (cobrancaDocumento.getCobrancaAcaoSituacao() == null || cobrancaDocumento
														.getCobrancaAcaoSituacao().getId().equals(CobrancaAcaoSituacao.PENDENTE))){

							/*
							 * Atribuir o valor "ação cancelada por decurso de prazo" à situação da
							 * ação de cobrança e a data/hora correntes à data da situação da ação
							 * de cobrança
							 */
							CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
							cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA_PRAZO);
							cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
							cobrancaDocumento.setDataSituacaoAcao(new Date());

							return;
						}

						Collection<CobrancaDocumentoItem> colecaoItensPendentesPorDocumentoCobranca = repositorioCobranca
										.pesquisarCobrancaDocumentoItemPorSituacao(cobrancaDocumento.getId(),
														CobrancaDebitoSituacao.PENDENTE);

						/*
						 * Caso o documento de cobrança não tenha mais itens pendentes (não
						 * existe ocorrência na tabela COBRANCA_DOCUMENTO_ITEM com
						 * CBDO_ID=CBDO_ID da tabela COBRANCA_DOCUMENTO e CDST_ID=CDST_ID da
						 * tabela COBRANCA_DEBITO_SITUACAO com CDST_DSSITUACAODEBITO="PENDENTE")
						 */
						if(Util.isVazioOrNulo(colecaoItensPendentesPorDocumentoCobranca)){

							/*
							 * Atribuir o valor "ação cancelada" à situação da
							 * ação de cobrança e a data/hora correntes à data da situação da
							 * ação
							 * de cobrança
							 */
							CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
							cobrancaAcaoSituacao.setId(CobrancaAcaoSituacao.CANCELADA);
							cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);
							cobrancaDocumento.setDataSituacaoAcao(new Date());
						}
					}
				}
			}else{

				// Caso contrário [SB0006 - Determinar Situação da Ordem de Serviço]
				determinarSituacaoOrdemServico(recebeuDocumentoPorParametro, cobrancaAcaoAtividadeComando, cobrancaDocumento);
			}
		}catch(Exception e){

			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}



	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * [SB0004] - Tratar Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 17/07/2012
	 */
	private void tratarCobrancaAdministrativa(Integer idCobrancaAtividadeAcaoComando, CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException, ControladorException{

		try{

			ImovelCobrancaMotivoRetirada imovelCobrancaMotivoRetirada = null;

			// 4. Caso a situação predominante do débito do documento de cobrança (CDST_ID da tabela
			// COBRANCA_DOCUMENTO) seja diferente de "pendente" e o imóvel ainda esteja com a
			// cobrança administrativa ativa (a partir da tabela IMOVEL_COBRANCA_SITUACAO com
			// IMOV_ID=(IMOV_ID da tabela COBRANCA_DOCUMENTO) e ISCB_DTRETIRADACOBRANCA igual a nulo
			// e CACM_ID = CACM_ID da tabela COBRANCA_DOCUMENTO e CBST_ID=CBST_ID da tabela
			// COBRANCA_SITUACAO com CBST_CDCONSTANTE com o valor correspondente a
			// "COBRANCA_ADMINISTRATIVA"):
			ImovelCobrancaSituacao imovelCobrancaSituacao = repositorioCobranca
.pesquisarImovelEmCobrancaAdministrativa(
cobrancaDocumento
							.getImovel().getId(), idCobrancaAtividadeAcaoComando);

			if(imovelCobrancaSituacao != null
							&& !cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.PENDENTE)){

				// 4.3. Caso a situação do débito do documento de cobrança seja "parcelado":
				// 4.4. Caso a situação do débito do documento de cobrança seja "pago":
				if(cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.PARCELADO)
								|| cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.PAGO)){
					// 4.3.1.1. Atribui "débito negociado" para o motivo da retirada (a partir da
					// tabela
					// IMOVEL_COBRANCA_MOTIVO_RETIRAD com ICMR_CDCONSTANTE = "NEGOCIADO").
					imovelCobrancaMotivoRetirada = new ImovelCobrancaMotivoRetirada(ImovelCobrancaMotivoRetirada.NEGOCIADO);

					// 4.8. Caso a situação do débito do documento de cobrança seja "parcelado" ou
					// "pago",
					// atualiza os dados referentes à adimplência (IMOVEL_COBRANCA_SITUACAO com
					// IMOV_ID=(IMOV_ID da tabela COBRANCA_DOCUMENTO)
					// e CACM_ID = CACM_ID da tabela COBRANCA_DOCUMENTO e
					// CBST_ID=CBST_ID da tabela COBRANCA_SITUACAO com CBST_CDCONSTANTE com o valor
					// correspondente a "COBRANCA_ADMINISTRATIVA"),
					// caso os dados referentes à adimplência não estejam preenchidos
					// (ISCB_DTADIMPLENCIA e ISCB_AMADIMPLENCIA com o valor nulo):
					if(imovelCobrancaSituacao.getDataAdimplencia() == null && imovelCobrancaSituacao.getAnoMesAdimplencia() == null){

						imovelCobrancaSituacao.setDataAdimplencia(cobrancaDocumento.getDataSituacaoDebito());

						// Caso a situação do débito do documento de cobrança seja "pago",
						// atribuir PGHI_AMREFERENCIAARRECADACAO da tabela PAGAMENTO_HISTORICO com
						// CNTA_ID
						// ou GPAG_ID/PGHI_NNPRESTACAO=CNTA_ID
						// ou GPAG_ID/CDIT_NNPRESTACAO da tabela COBRANCA_DOCUMENTO_ITEM
						// com CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO)
						// e CDST_ID=2 (pago) e maior data de situação de débito
						// (CDIT_DTSITUACAODEBITO).

						if(cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.PAGO)){

							Collection<Integer> colecaoSituacaoDebitoItensComandoEventual = repositorioCobranca
											.pesquisarItensPorSituacaoDebitoParaGeracaoResumoEventual(cobrancaDocumento.getId(),
															CobrancaDebitoSituacao.PAGO);

							for(Integer idCobrancaDocumentoItem : colecaoSituacaoDebitoItensComandoEventual){

								// Integer idCobrancaDocumentoItem = (Integer)
								// gerarResumoAcoesCobrancaEventualHelper[0];
								// Date maiorDataSitDebito = (Date)
								// gerarResumoAcoesCobrancaEventualHelper[1] x;

								CobrancaDocumentoItem cobrancaDocumentoItem = repositorioCobranca
												.pesquisarCobrancaDocumentoItem(idCobrancaDocumentoItem);

								if(cobrancaDocumentoItem != null){
									Collection<PagamentoHistorico> collPagamentoHistorico = null;

									if(cobrancaDocumentoItem.getContaGeral() != null){
										collPagamentoHistorico = repositorioArrecadacao
														.selecionarPagamentoHistoricoPorContaHistorico(cobrancaDocumentoItem
																		.getContaGeral().getId());

									}

									if(cobrancaDocumentoItem.getGuiaPagamentoGeral() != null){
										collPagamentoHistorico = repositorioArrecadacao
														.selecionarPagamentoHistoricoPorGuiaPagamentoHistorico(cobrancaDocumentoItem
																		.getGuiaPagamentoGeral().getId(), cobrancaDocumentoItem
																		.getNumeroDaPrestacao().intValue());
									}

									if(collPagamentoHistorico != null && !collPagamentoHistorico.isEmpty()){
										PagamentoHistorico pagamentoHistorico = (PagamentoHistorico) Util
														.retonarObjetoDeColecao(collPagamentoHistorico);

										imovelCobrancaSituacao.setAnoMesAdimplencia(pagamentoHistorico.getAnoMesReferenciaArrecadacao());
									}
								}

							}

						}
						// Caso a situação do débito do documento de cobrança seja "parcelado":
						// . Caso a forma de cobrança do parcelamento seja "Cobrança em Conta"
						// (CBFM_ID com o valor 1 na tabela PARCELAMENTO com PARC_ID=PARC_ID da
						// tabela PARCELAMENTO_ITEM com CNTA_ID ou GPAG_ID/PCIT_NNPRESTACAO=CNTA_ID
						// ou GPAG_ID/CDIT_NNPRESTACAO da tabela COBRANCA_DOCUMENTO_ITEM com
						// CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO) e CDST_ID=5 (parcelada) e
						// maior data de situação de débito (CDIT_DTSITUACAODEBITO)),
						// atribuir

						// DBAC_AMCOBRANCADEBITO ou DAHI_AMCOBRANCADEBITO da tabela DEBITO_A_COBRAR
						// ou DEBITO_A_COBRAR_HISTORICO com DCST_IDATUAL diferente de 5 (parcelado)
						// e PARC_ID=PARC_ID da tabela PARCELAMENTO.

						// . Caso contrário (CBFM_ID com o valor 2 na tabela PARCELAMENTO com
						// PARC_ID=PARC_ID da tabela PARCELAMENTO_ITEM com CNTA_ID ou
						// GPAG_ID/PCIT_NNPRESTACAO=CNTA_ID ou GPAG_ID/CDIT_NNPRESTACAO da tabela
						// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela
						// COBRANCA_DOCUMENTO) e CDST_ID=5 (parcelada) e maior data de situação de
						// débito (CDIT_DTSITUACAODEBITO)),

						// atribuir ano/mês de GPAG_DTINCLUSAO ou
						// GPHI_DTINCLUSAO da tabela GUIA_PAGAMENTO ou GUIA_PAGAMENTO_HISTORICO com
						// DCST_ID diferente de 5 (parcelado) e PARC_ID=PARC_ID da tabela
						// PARCELAMENTO.
						//
						if(cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.PARCELADO)){

							Integer anoMesCobranca = null;

							Collection<Integer> colecaoSituacaoDebitoItensComandoEventual = repositorioCobranca
											.pesquisarItensPorSituacaoDebitoParaGeracaoResumoEventual(cobrancaDocumento.getId(),
															CobrancaDebitoSituacao.PARCELADO);

							for(Integer idCobrancaDocumentoItem : colecaoSituacaoDebitoItensComandoEventual){

								// Integer idCobrancaDocumentoItem = (Integer)
								// gerarResumoAcoesCobrancaEventualHelper[0];
								// Date maiorDataSitDebito = (Date)
								// gerarResumoAcoesCobrancaEventualHelper[1];

								Collection<Object[]> retorno = null;

								Date dataInclusao = null;

								CobrancaDocumentoItem cobrancaDocumentoItem = repositorioCobranca
												.pesquisarCobrancaDocumentoItem(idCobrancaDocumentoItem);

								if(cobrancaDocumentoItem.getContaGeral() != null){
									// buscar em parcelamento e pareclamentoItem
									retorno = repositorioCobranca.pesquisarIdParcelamento(cobrancaDocumentoItem.getContaGeral().getId(),
													null, null);

								}else if(cobrancaDocumentoItem.getGuiaPagamentoGeral() != null){

									// buscar em parcelamento e pareclamentoItem
									retorno = repositorioCobranca.pesquisarIdParcelamento(null, cobrancaDocumentoItem
													.getGuiaPagamentoGeral().getId(), cobrancaDocumentoItem.getNumeroDaPrestacao()
													.intValue());

								}

								Object[] retornoObjeto = Util.retonarObjetoDeColecaoArray(retorno);
								if(retornoObjeto != null){
									Integer idParcelamento = (Integer) retornoObjeto[0];
									Integer idFormaCobranca = (Integer) retornoObjeto[1];

									if(idParcelamento != null){

										if(idFormaCobranca.equals(CobrancaForma.COBRANCA_EM_CONTA)){

											anoMesCobranca = repositorioFaturamento.pesquisarDebitoACobrarPorParcelamento(idParcelamento,
															DebitoCreditoSituacao.PARCELADA);
											if(anoMesCobranca == null){
												anoMesCobranca = repositorioFaturamento.pesquisarDebitoACobrarHistoricoPorParcelamento(
																idParcelamento, DebitoCreditoSituacao.PARCELADA);
											}
										}else{
											dataInclusao = repositorioFaturamento.pesquisarGuiaPagamentoPorParcelamento(idParcelamento,
															DebitoCreditoSituacao.PARCELADA);

											if(dataInclusao == null){
												dataInclusao = repositorioFaturamento.pesquisarGuiaPagamentoHistoricoPorParcelamento(
																idParcelamento, DebitoCreditoSituacao.PARCELADA);
											}

											if(dataInclusao != null){
												anoMesCobranca = Util.getAnoMesComoInteger(dataInclusao);
											}

										}
									}
								}


							}

							imovelCobrancaSituacao.setAnoMesAdimplencia(anoMesCobranca);

						}

					}

				}else
				// 4.5. Caso a situação do débito do documento de cobrança seja "cancelado":
				if(cobrancaDocumento.getCobrancaDebitoSituacao().getId().equals(CobrancaDebitoSituacao.CANCELADO)){
					// 4.5.1.1. Atribui "débito cancelado" para o motivo da retirada (a partir da
					// tabela IMOVEL_COBRANCA_MOTIVO_RETIRAD com ICMR_CDCONSTANTE = "NEGOCIADO").
					imovelCobrancaMotivoRetirada = new ImovelCobrancaMotivoRetirada(ImovelCobrancaMotivoRetirada.CANCELADO);

				}else{
					// 4.6.1.1. Atribui "comandado" para o motivo da retirada (a partir da tabela
					// IMOVEL_COBRANCA_MOTIVO_RETIRAD com ICMR_CDCONSTANTE = "COMANDADO").
					imovelCobrancaMotivoRetirada = new ImovelCobrancaMotivoRetirada(ImovelCobrancaMotivoRetirada.COMANDADO);
				}

				// Motivo da Retirada
				imovelCobrancaSituacao.setImovelCobrancaMotivoRetirada(imovelCobrancaMotivoRetirada);

				// Usuário
				imovelCobrancaSituacao.setUsuario(Usuario.USUARIO_BATCH);

				// Atribui data do corrente para a data da retirada
				imovelCobrancaSituacao.setDataRetiradaCobranca(new Date());

				// Atribui a situação predominante do débito do documento de cobrança
				imovelCobrancaSituacao.setCobrancaDebitoSituacao(cobrancaDocumento.getCobrancaDebitoSituacao());

				imovelCobrancaSituacao.setUltimaAlteracao(new Date());

				getControladorUtil().atualizar(imovelCobrancaSituacao);

			}

		}catch(Exception e){

			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0214] Obter Mapeamento Juros Parcelamento para conta, guias e debitos a cobrar em cobranca
	 * normal e administrativa
	 * 
	 * @author Hugo Lima
	 * @date 12/07/2012
	 * @param valorTotalJurosParcelamento
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamentoValoresHelper
	 * @param colecaoDebitoACobrar
	 * @return
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Map<Integer, BigDecimal> obterMapeamentoJurosParcelamento(BigDecimal valorTotalJurosParcelamento,
					Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper, Collection<DebitoACobrar> colecaoDebitoACobrar)
					throws ControladorException, ErroRepositorioException{

		Map<Integer, BigDecimal> retorno = new HashMap<Integer, BigDecimal>();
		int quantidadeContaGuiaCobrancaAdministrativa = 0;

		Collection<Integer> tiposDebitoCobrancaAdministrativa = getControladorParcelamento()
						.getTiposDebitoParcelamentoCobrancaAdministrativa(true);

		// Itera na lista de contas
		if(!Util.isVazioOrNulo(colecaoContaValores)){
			for(ContaValoresHelper contaValoresHelper : colecaoContaValores){

				// Só acumula se a conta estiver em cobrança administrativa
				if(contaValoresHelper.getConta().getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
					// incremenata o valor representativo para cobranca administrativa
					quantidadeContaGuiaCobrancaAdministrativa++;

				}else if(contaValoresHelper.getConta().getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.NAO)){
					// contas normais (CNTA_ICCOBRANCAADMINISTRATIVA=2 (não)) com débitos cobrados
					// realizados de parcelamento de cobrança administrativa

					// Carregando débitos cobrados do histórico
					Collection<DebitoCobradoHistorico> colecaoDebitoCobradoHistorico = repositorioFaturamento
									.pesquisarDebitosCobradosHistorico(contaValoresHelper.getConta().getId());

					for(DebitoCobradoHistorico debitoCobrado : colecaoDebitoCobradoHistorico){
						if(tiposDebitoCobrancaAdministrativa.contains(debitoCobrado.getDebitoTipo().getId())){
							// incremenata o valor representativo para cobranca administrativa
							quantidadeContaGuiaCobrancaAdministrativa++;
							break;
						}
					}

				}
			}
		}

		if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValoresHelper)){
			// Itera na lista de guias
			for(GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiaPagamentoValoresHelper){
				if(guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.SIM)){
					// incremenata o valor representativo para cobrnca administrativa
					quantidadeContaGuiaCobrancaAdministrativa++;
				}else if(guiaPagamentoValoresHelper.getIndicadorCobrancaAdministrativa().equals(ConstantesSistema.NAO)){
					// Prestações de guias de pagamento normais com tipo de débito correspondente a
					// parcelamento de cobrança administrativa

					Collection<GuiaPagamentoPrestacaoHistorico> colecaoGuiaPagamentoPrestacaoHistorico = pesquisarGuiaPagamentoPrestacoesHistorico(
									guiaPagamentoValoresHelper.getIdGuiaPagamento(), guiaPagamentoValoresHelper.getNumeroPrestacao());

					for(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico : colecaoGuiaPagamentoPrestacaoHistorico){
						if(tiposDebitoCobrancaAdministrativa.contains(guiaPagamentoPrestacaoHistorico.getDebitoTipo().getId())){
							// incremenata o valor representativo para cobranca administrativa
							quantidadeContaGuiaCobrancaAdministrativa++;
							break;
						}
					}

				}
			}
		}

		// Caso existam na lista de débitos a cobrar parcelados, débitos a cobrar de parcelamento de
		// cobrança administrativa
		if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){
			// Itera na lista de débitos a cobrar
			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){
				if(tiposDebitoCobrancaAdministrativa.contains(debitoACobrar.getDebitoTipo().getId())){
					quantidadeContaGuiaCobrancaAdministrativa++;
				}
			}
		}

		int quantidadeContaValores = !Util.isVazioOrNulo(colecaoContaValores) ? colecaoContaValores.size() : 0;
		int quantidadeGuiaPagamentoValores = !Util.isVazioOrNulo(colecaoGuiaPagamentoValoresHelper) ? colecaoGuiaPagamentoValoresHelper
						.size() : 0;

		// Define os valores totais para a base de calculo
		int quantidadeContaGuiaCobrancaNormal = quantidadeContaValores + quantidadeGuiaPagamentoValores
						- quantidadeContaGuiaCobrancaAdministrativa;

		// A quantidade normal representa as contas e guias que nao estao em cobranca administrativa
		int quantidadeTotalCobrancaNormal = quantidadeContaGuiaCobrancaNormal;

		BigDecimal valorTotalParcelamento = valorTotalJurosParcelamento.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO);
		BigDecimal totalOcorrencias = new BigDecimal(quantidadeContaValores + quantidadeGuiaPagamentoValores);
		BigDecimal totalOcorrenciasCobrancaNormal = new BigDecimal(quantidadeTotalCobrancaNormal);
		BigDecimal totalOcorrenciasCobrancaAdministrativa = new BigDecimal(quantidadeContaGuiaCobrancaAdministrativa);
		BigDecimal valorCobrancaNormal = BigDecimal.ZERO;
		BigDecimal valorCobrancaAdministrativa = BigDecimal.ZERO;

		if(totalOcorrencias.compareTo(BigDecimal.ZERO) == 0){
			totalOcorrencias = BigDecimal.ONE;
		}

		// Executa regra de tres simples para dividir o valor dos juros entre cobranca
		// administrativa e cobranca normal
		valorCobrancaNormal = totalOcorrenciasCobrancaNormal.multiply(valorTotalParcelamento)
						.divide(totalOcorrencias, Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		valorCobrancaAdministrativa = totalOcorrenciasCobrancaAdministrativa.multiply(valorTotalParcelamento)
						.divide(totalOcorrencias, Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
						.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		// Caso o (Valor dos juros do parcelamento da cobrança administrativa mais o Valor dos juros
		// do parcelamento normal)
		// seja diferente do Valor dos juros do parcelamento, ajustar o Valor dos juros do
		// parcelamento normal para mais
		// ou para menos de forma que não exista diferença entre o (Valor dos juros do parcelamento
		// da cobrança administrativa
		// mais o Valor dos juros do parcelamento normal) e o Valor dos juros do parcelamento.
		BigDecimal diferenca = valorTotalParcelamento.subtract(valorCobrancaNormal.add(valorCobrancaAdministrativa));

		// Adicionando diferença caso exista
		if(diferenca.compareTo(BigDecimal.ZERO) != 0){
			// no valor da cobrança normal.
			if(valorCobrancaNormal.compareTo(BigDecimal.ZERO) != 0){
				valorCobrancaNormal = valorCobrancaNormal.add(diferenca);
			}
			// no valor da cobranca administrativa
			else{
				if(valorCobrancaAdministrativa.compareTo(BigDecimal.ZERO) != 0){
					valorCobrancaAdministrativa = valorCobrancaAdministrativa.add(diferenca);
				}
			}
		}

		// Insere no mapeamento os respectivos valores
		if(valorCobrancaNormal.compareTo(BigDecimal.ZERO) > 0){
			retorno.put(Integer.valueOf(ParametroParcelamento.P_TIPO_DEBITO_PARCELAMENTO_JUROS_PARCELAMENTO.executar()),
							valorCobrancaNormal);
		}

		if(valorCobrancaAdministrativa.compareTo(BigDecimal.ZERO) > 0){
			retorno.put(Integer.valueOf(ParametroParcelamento.P_TIPO_DEBITO_PARCELAMENTO_JUROS_PARCELAMENTO_COBRANCA_ADMINISTRATIVA
							.executar()),
							valorCobrancaAdministrativa);
		}

		return retorno;
	}


	/**
	 * Acumular lista de Item Contábil de Acréscimos por Impontualidade de Conta
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Object[] acumularListaAcrescimos(Collection<ContaValoresHelper> colecaoContaValores,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores, boolean existeContaComoEntradaParcelamento,
					BigDecimal valorDescontoAcrescimos, String indicadorCobrancaParcelamento, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException, ErroRepositorioException{

		// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
		Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal = new HashMap<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>();



		// ******************************************************************
		// Acumula os Acréscimos da COLEÇÃO DE CONTAS
		// ******************************************************************
		valorEntradaParaDeduzir = acumularAcrescimosConta(colecaoContaValores, mapaPrincipal, valorDescontoAcrescimos,
						indicadorCobrancaParcelamento, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
						existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);

		// ******************************************************************
		// Acumula os Acréscimos da COLEÇÃO DE GUIAS DE PAGAMENTO
		// ******************************************************************
		valorEntradaParaDeduzir = acumularAcrescimosGuiaPagamento(colecaoGuiaPagamentoValores, mapaPrincipal, valorDescontoAcrescimos,
						indicadorCobrancaParcelamento, valorEntradaParaDeduzir, valorEntradaPorTipoDebito,
						existeContaComoEntradaParcelamento, indicadorTotalRemuneracaoCobrancaAdm);

		Object[] retorno = new Object[2];

		retorno[0] = mapaPrincipal;
		retorno[1] = valorEntradaParaDeduzir;

		return retorno;
	}

	/**
	 * @param colecaoContaValores
	 * @param mapaPrincipal
	 * @param valorEntradaParaDeduzir
	 * @param valorEntradaPorTipoDebito
	 * @param existeContaComoEntradaParcelamento
	 * @throws ControladorException
	 */
	private BigDecimal acumularAcrescimosConta(Collection<ContaValoresHelper> colecaoContaValores,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal,
					BigDecimal valorDescontoAcrescimos, String indicadorCobrancaParcelamento, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException{

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor;
		Integer tipoDebito;
		BigDecimal valorAcrescimos;
		BigDecimal valorAcrescimosAcumulado;
		Collection<Categoria> categoriasConta = null;
		LancamentoItemContabilParcelamentoHelper itemContabilHelper = null;
		Object[] retorno = null;

		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		// Coleção utilizada no caso de Contas NÃO marcadas como Entrada
		Collection<ContaCategoriaHistorico> colecaoContaCategoriaHistorico = null;
		// Coleção utilizada no caso de Contas marcadas como Entrada
		Collection<ContaCategoria> colecaoContaCategoria = null;

		if(!Util.isVazioOrNulo(colecaoContaValores)){
			// Acumula valores de água, esgoto e débito das contas selecionadas.
			for(ContaValoresHelper contaHelper : colecaoContaValores){
				// Recupera o indicador de cobrança administrativa

				// Itentifica o tipo de débito da conta
				retorno = getControladorParcelamento().identificarTipoDebitoAcrescimosConta(contaHelper);

				tipoDebito = (Integer) retorno[0];

				// Se o indicador TOTAL ainda não foi "ligado", considera o que foi definido para
				// este tipo de débito
				if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
					indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
				}

				indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

				itemContabilHelper = new LancamentoItemContabilParcelamentoHelper(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE,
								indicadorParcialRemuneracaoCobrancaAdm);

				// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
				mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

				// Consulta as categorias da conta
				if(contaHelper.getIndicadorContasDebito() != null && contaHelper.getIndicadorContasDebito().equals(Integer.valueOf(1))){

					colecaoContaCategoria = consultarColecaoContaCategoria(contaHelper.getConta().getId());

					if(!Util.isVazioOrNulo(colecaoContaCategoria)){
						categoriasConta = new ArrayList<Categoria>();
						for(ContaCategoria contaCategoria : colecaoContaCategoria){
							categoriasConta.add(obterCategoria(contaCategoria.getComp_id().getCategoria().getId(),
											Integer.valueOf(contaCategoria.getQuantidadeEconomia())));
						}
					}
				}else{
					colecaoContaCategoriaHistorico = consultarColecaoContaCategoriaHistorico(contaHelper.getConta().getId());

					if(!Util.isVazioOrNulo(colecaoContaCategoriaHistorico)){
						categoriasConta = new ArrayList<Categoria>();
						for(ContaCategoriaHistorico contaCategoriaHistorico : colecaoContaCategoriaHistorico){
							categoriasConta.add(obterCategoria(contaCategoriaHistorico.getComp_id().getCategoria().getId(),
											Integer.valueOf(contaCategoriaHistorico.getQuantidadeEconomia())));
						}
					}
				}

				// Se possui ContaCategoria, distribui os valores por item contábil e
				// categoria
				if(!Util.isVazioOrNulo(categoriasConta)){

					// Captura o Map (Categoria -> Valor) que já existe para o item contábil
					// ACRESCIMOS_POR_IMPONTUALIDADE. Caso não exista, cria um Map vazio
					Map<Categoria, BigDecimal> mapaCategoriaValorAcrescimos = mapaItensCategoriaValor.get(itemContabilHelper);

					if(mapaCategoriaValorAcrescimos == null){
						mapaCategoriaValorAcrescimos = new HashMap<Categoria, BigDecimal>();
					}

					valorAcrescimos = contaHelper.getValorTotalContaValoresParcelamento();

					// Obter os valores para cada categoria ordenados pelo id da categoria.
					Collection<BigDecimal> colecaoValorCategorias = getControladorImovel().obterValorPorCategoria(categoriasConta,
									valorAcrescimos);
					Iterator<BigDecimal> colecaoValorCategoriasIt = colecaoValorCategorias.iterator();

					// Para cada Categoria, será capturado o valor por item contábil
					// para ser acumulado no
					// Map (TipoDebito -> Item Contábil -> Categoria -> Valor)
					for(Categoria categoria : categoriasConta){
						valorAcrescimos = colecaoValorCategoriasIt.next();

						if(indicadorCobrancaParcelamento != null
										&& indicadorCobrancaParcelamento.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_GUIA_PAGAMENTO)
										&& valorDescontoAcrescimos.compareTo(BigDecimal.ZERO) > 0){

							if(valorAcrescimos.compareTo(valorDescontoAcrescimos) == 1){
								valorAcrescimos = valorAcrescimos.subtract(valorDescontoAcrescimos);
								valorDescontoAcrescimos = BigDecimal.ZERO;
							}else{
								valorDescontoAcrescimos = valorDescontoAcrescimos.subtract(valorAcrescimos);
								valorAcrescimos = BigDecimal.ZERO;
							}
						}

						// Caso o valor da entrada não tenha sido totalmente abatido e exista
						// saldo no valor do item após a dedução efetuada pelo SB0036, abater o
						// valor da entrada de parcelamento do Valor Item Contábil/Categoria [SB0029
						// - Abater Valor da Guia de Entrada do Parcelamento]
						if(valorEntradaParaDeduzir != null && !valorEntradaParaDeduzir.equals(BigDecimal.ZERO) && valorAcrescimos != null
										&& !valorAcrescimos.equals(BigDecimal.ZERO)){

							// Deduz o valor de entrada
							BigDecimal[] retornoDeducaoEntrada = deduzirValorEntrada(valorAcrescimos, valorEntradaParaDeduzir, tipoDebito,
											itemContabilHelper, categoria, valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);

							valorAcrescimos = retornoDeducaoEntrada[0];
							valorEntradaParaDeduzir = retornoDeducaoEntrada[1];
						}

						valorAcrescimosAcumulado = mapaCategoriaValorAcrescimos.get(categoria);

						if(valorAcrescimosAcumulado != null){
							valorAcrescimos = valorAcrescimos.add(valorAcrescimosAcumulado);
						}

						mapaCategoriaValorAcrescimos.put(categoria, valorAcrescimos);
					}

					// ******************************************************************
					// Armazena os Maps manipulados acima
					// ******************************************************************

					// Se o Map (Categoria -> Valor) para o item contábil
					// ACRESCIMOS_POR_IMPONTUALIDADE
					// estiver preenchido, guarda no
					// Map (ItemContabil -> Categoria -> Valor)
					if(!mapaCategoriaValorAcrescimos.isEmpty()){
						mapaItensCategoriaValor.put(itemContabilHelper, mapaCategoriaValorAcrescimos);
					}

					// Se o Map (ItemContabil -> Categoria -> Valor) para o tipo de débito
					// em questão estiver preenchido, guarda no
					// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
					if(!mapaItensCategoriaValor.isEmpty()){
						mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
					}
				}
			}
		}

		return valorEntradaParaDeduzir;
	}

	/**
	 * @param contaCategoriaHistorico
	 * @return
	 * @throws ControladorException
	 */
	private Categoria obterCategoria(Integer idCategoria, Integer quantidadeEconomias) throws ControladorException{

		FiltroCategoria filtroCategoria = new FiltroCategoria();
		filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.CODIGO, idCategoria));
		Categoria categoria = (Categoria) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroCategoria,
						Categoria.class.getName()));
		categoria.setQuantidadeEconomiasCategoria(quantidadeEconomias);
		return categoria;
	}

	/**
	 * @param colecaoGuiaPagamentoValores
	 * @param mapaPrincipal
	 * @throws ControladorException
	 */
	private BigDecimal acumularAcrescimosGuiaPagamento(Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal,
					BigDecimal valorDescontoAcrescimos, String indicadorCobrancaParcelamento, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException{

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor;
		Integer tipoDebito;
		BigDecimal valorAcrescimos;
		BigDecimal valorAcrescimosAcumulado;
		Collection<Categoria> categoriasGuiaPagamento;
		Collection<GuiaPagamentoCategoriaHistorico> colecaoGuiaPagamentoCategoriaHistorico = null;
		Collection<GuiaPagamentoPrestacaoHistorico> colecaoGuiaPagamentoPrestacaoHistorico = null;
		LancamentoItemContabilParcelamentoHelper itemContabilHelper = null;
		Object[] retorno = null;

		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValores)){
			// Acumula valores de acréscimos de impontualidade das guias selecionadas.
			for(GuiaPagamentoValoresHelper guiaPagamentoHelper : colecaoGuiaPagamentoValores){

				// Carregando as prestações selecionadas da guia da pagamento
				colecaoGuiaPagamentoPrestacaoHistorico = pesquisarGuiaPagamentoPrestacoesHistorico(
								guiaPagamentoHelper.getIdGuiaPagamento(), guiaPagamentoHelper.getNumeroPrestacao());

				for(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico : colecaoGuiaPagamentoPrestacaoHistorico){

					// Acumulando os valores de Itens Contábeis relacionados ao guia de pagamento:
					// ACRESCIMOS_POR_IMPONTUALIDADE
					// Os valores serão acumulados por Item Contábil e Categoria

					// Itentifica o tipo de débito da guia de pagamento
					retorno = getControladorParcelamento().identificarTipoDebitoAcrescimosGuiaPagamento(guiaPagamentoPrestacaoHistorico);

					tipoDebito = (Integer) retorno[0];

					// Se o indicador TOTAL ainda não foi "ligado", considera o que foi definido
					// para
					// este tipo de débito
					if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
						indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
					}

					indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

					itemContabilHelper = new LancamentoItemContabilParcelamentoHelper(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE,
									indicadorParcialRemuneracaoCobrancaAdm);

					// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
					mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

					// Consulta as categorias da conta
					colecaoGuiaPagamentoCategoriaHistorico = consultarColecaoGuiaPagamentoCategoriaHistorico(
									guiaPagamentoPrestacaoHistorico.getComp_id().getGuiaPagamentoId(), guiaPagamentoPrestacaoHistorico
													.getComp_id().getNumeroPrestacao(),
									LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE);

					// Se possui GuiaPagamentoCategoria, distribui os valores por item contábil e
					// categoria
					if(!Util.isVazioOrNulo(colecaoGuiaPagamentoCategoriaHistorico)){

						categoriasGuiaPagamento = new ArrayList<Categoria>();
						Categoria categoriaGuia = null;
						for(GuiaPagamentoCategoriaHistorico guiaPagamentoCategoriaHistorico : colecaoGuiaPagamentoCategoriaHistorico){
							FiltroCategoria filtroCategoria = new FiltroCategoria();
							filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.CODIGO, guiaPagamentoCategoriaHistorico
											.getComp_id().getCategoriaId()));
							categoriaGuia = (Categoria) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroCategoria,
											Categoria.class.getName()));
							categoriaGuia.setQuantidadeEconomiasCategoria(guiaPagamentoCategoriaHistorico.getQuantidadeEconomia());

							categoriasGuiaPagamento.add(categoriaGuia);
						}

						// Captura o Map (Categoria -> Valor) que já existe para o item contábil
						// ACRESCIMOS_POR_IMPONTUALIDADE. Caso não exista, cria um Map vazio
						Map<Categoria, BigDecimal> mapaCategoriaValorAcrescimos = mapaItensCategoriaValor.get(itemContabilHelper);

						if(mapaCategoriaValorAcrescimos == null){
							mapaCategoriaValorAcrescimos = new HashMap<Categoria, BigDecimal>();
						}

						valorAcrescimos = guiaPagamentoHelper.getValorAcrescimosImpontualidade();

						// Obter os valores para cada categoria ordenados pelo id da categoria.
						Collection<BigDecimal> colecaoValorCategorias = getControladorImovel().obterValorPorCategoria(
										categoriasGuiaPagamento, valorAcrescimos);
						Iterator<BigDecimal> colecaoValorCategoriasIt = colecaoValorCategorias.iterator();

						// Para cada Categoria, será capturado o valor por item contábil
						// para ser acumulado no
						// Map (TipoDebito -> Item Contábil -> Categoria -> Valor)
						for(Categoria categoria : categoriasGuiaPagamento){
							valorAcrescimos = colecaoValorCategoriasIt.next();

							if(indicadorCobrancaParcelamento != null
											&& indicadorCobrancaParcelamento
															.equals(ConstantesSistema.INDICADOR_COBRANCA_PARC_GUIA_PAGAMENTO)
											&& valorDescontoAcrescimos.compareTo(BigDecimal.ZERO) > 0){

								if(valorAcrescimos.compareTo(valorDescontoAcrescimos) == 1){
									valorAcrescimos = valorAcrescimos.subtract(valorDescontoAcrescimos);
									valorDescontoAcrescimos = BigDecimal.ZERO;
								}else{
									valorDescontoAcrescimos = valorDescontoAcrescimos.subtract(valorAcrescimos);
									valorAcrescimos = BigDecimal.ZERO;
								}
							}

							// Caso o valor da entrada não tenha sido totalmente abatido e exista
							// saldo no valor do item após a dedução efetuada pelo SB0036, abater o
							// valor da entrada de parcelamento do Valor Item Contábil/Categoria
							// [SB0029
							// - Abater Valor da Guia de Entrada do Parcelamento]
							if(valorEntradaParaDeduzir != null && !valorEntradaParaDeduzir.equals(BigDecimal.ZERO)
											&& valorAcrescimos != null && !valorAcrescimos.equals(BigDecimal.ZERO)){

								// Deduz o valor de entrada
								BigDecimal[] retornoDeducaoEntrada = deduzirValorEntrada(valorAcrescimos, valorEntradaParaDeduzir,
												tipoDebito, itemContabilHelper, categoria, valorEntradaPorTipoDebito,
												existeContaComoEntradaParcelamento);

								valorAcrescimos = retornoDeducaoEntrada[0];
								valorEntradaParaDeduzir = retornoDeducaoEntrada[1];
							}

							valorAcrescimosAcumulado = mapaCategoriaValorAcrescimos.get(categoria);

							if(valorAcrescimosAcumulado != null){
								valorAcrescimos = valorAcrescimos.add(valorAcrescimosAcumulado);
							}

							mapaCategoriaValorAcrescimos.put(categoria, valorAcrescimos);
						}

						// ******************************************************************
						// Armazena os Maps manipulados acima
						// ******************************************************************

						// Se o Map (Categoria -> Valor) para o item contábil
						// ACRESCIMOS_POR_IMPONTUALIDADE
						// estiver preenchido, guarda no
						// Map (ItemContabil -> Categoria -> Valor)
						if(!mapaCategoriaValorAcrescimos.isEmpty()){
							mapaItensCategoriaValor.put(itemContabilHelper, mapaCategoriaValorAcrescimos);
						}

						// Se o Map (ItemContabil -> Categoria -> Valor) para o tipo de débito
						// em questão estiver preenchido, guarda no
						// Map (TipoDebito -> ItemContabil -> Categoria -> Valor)
						if(!mapaItensCategoriaValor.isEmpty()){
							mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
						}
					}
				}

			}
		}

		return valorEntradaParaDeduzir;
	}

	/**
	 * Consulta as categorias de uma ContaHistorico
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Collection<ContaCategoriaHistorico> consultarColecaoContaCategoriaHistorico(Integer idConta) throws ControladorException{

		Collection<ContaCategoriaHistorico> colecaoContaCategoriaHistorico;
		FiltroContaCategoriaHistorico filtroContaCategoriaHistorico = new FiltroContaCategoriaHistorico();
		filtroContaCategoriaHistorico.adicionarParametro(new ParametroSimples(FiltroContaCategoriaHistorico.CONTA_HISTORICO_ID, idConta));
		colecaoContaCategoriaHistorico = getControladorUtil().pesquisar(filtroContaCategoriaHistorico,
						ContaCategoriaHistorico.class.getName());
		return colecaoContaCategoriaHistorico;
	}

	/**
	 * Consulta as categorias de uma Conta
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Collection<ContaCategoria> consultarColecaoContaCategoria(Integer idConta) throws ControladorException{

		Collection<ContaCategoria> colecaoContaCategoria;
		FiltroContaCategoria filtroContaCategoria = new FiltroContaCategoria();
		filtroContaCategoria.adicionarParametro(new ParametroSimples(FiltroContaCategoria.CONTA_ID, idConta));
		colecaoContaCategoria = getControladorUtil().pesquisar(filtroContaCategoria, ContaCategoria.class.getName());
		return colecaoContaCategoria;
	}



	/**
	 * Obtém o Map (ItemContabil -> Categoria -> Valor) do Map (TipoDebito -> ItemContabil ...)
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> obterMapaItensContabeis(
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaTipoDebitoItensContabeis,
					Integer tipoDebito){

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor = null;

		if(tipoDebito != null){
			mapaItensCategoriaValor = mapaTipoDebitoItensContabeis.get(tipoDebito);
		}

		// Se ainda não existe o tipo de débito no Map, cria um novo mapeamento
		// vazio para (ItemContabil -> Categoria -> Valor)
		if(mapaItensCategoriaValor == null){
			mapaItensCategoriaValor = new HashMap<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>();
		}

		return mapaItensCategoriaValor;
	}




	/**
	 * Consulta a coleção de objetos DebicoCobradoCategoriaHistorico, a partir de um
	 * debitoCobradoHistorico
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Collection<DebitoCobradoCategoriaHistorico> consultarColecaoDebitoCobradoCategoriaHistorico(
					DebitoCobradoHistorico debitoCobradoHistorico) throws ControladorException{

		FiltroDebitoCobradoCategoriaHistorico filtroDebitoCobradoCategoriaHistorico = new FiltroDebitoCobradoCategoriaHistorico();
		filtroDebitoCobradoCategoriaHistorico.adicionarParametro(new ParametroSimples(
						FiltroDebitoCobradoCategoriaHistorico.ID_DEBITO_COBRADO_HISTORICO, debitoCobradoHistorico.getId()));
		filtroDebitoCobradoCategoriaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoCobradoCategoriaHistorico.CATEGORIA);

		Collection<DebitoCobradoCategoriaHistorico> colecaoDebitoCobradoCategoriaHistorico = getControladorUtil().pesquisar(
						filtroDebitoCobradoCategoriaHistorico, DebitoCobradoCategoriaHistorico.class.getName());
		return colecaoDebitoCobradoCategoriaHistorico;
	}

	/**
	 * Consulta a coleção de objetos GuiaPagamentoCategoriaHistorico, a partir de um
	 * guiaPagamentoPrestacaoHistorico
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Collection<GuiaPagamentoCategoriaHistorico> consultarColecaoGuiaPagamentoCategoriaHistorico(Integer idGuiaPagamentoPrestacao,
					Short numeroPrestacao, Integer idLancamentoItemContabil) throws ControladorException{

		FiltroGuiaPagamentoCategoriaHistorico filtroGuiaPagamentoCategoriaHistorico = new FiltroGuiaPagamentoCategoriaHistorico();
		filtroGuiaPagamentoCategoriaHistorico.adicionarParametro(new ParametroSimples(
						FiltroGuiaPagamentoCategoriaHistorico.GUIA_PAGAMENTO_ID, idGuiaPagamentoPrestacao));
		filtroGuiaPagamentoCategoriaHistorico.adicionarParametro(new ParametroSimples(
						FiltroGuiaPagamentoCategoriaHistorico.NUMERO_PRESTACAO, numeroPrestacao));
		filtroGuiaPagamentoCategoriaHistorico.adicionarParametro(new ParametroSimples(
						FiltroGuiaPagamentoCategoriaHistorico.LANCAMENTO_ITEM_CONTABIL_ID, idLancamentoItemContabil));

		filtroGuiaPagamentoCategoriaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoCategoriaHistorico.CATEGORIA);

		Collection<GuiaPagamentoCategoriaHistorico> colecaoGuiaPagamentoCategoriaHistorico = getControladorUtil().pesquisar(
						filtroGuiaPagamentoCategoriaHistorico, GuiaPagamentoCategoriaHistorico.class.getName());
		return colecaoGuiaPagamentoCategoriaHistorico;
	}

	/**
	 * Consulta a coleção de objetos DebitoACobrarCategoriaHistorico, a partir de um
	 * guiaPagamentoPrestacaoHistorico
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Collection<DebitoACobrarCategoriaHistorico> consultarColecaoDebitoACobrarCategoriaHistorico(
					DebitoACobrarHistorico debitoACobrarHistorico) throws ControladorException{

		Collection<DebitoACobrarCategoriaHistorico> colecaoDebitoACobrarCategoriaHistorico;
		FiltroDebitoACobrarCategoriaHistorico filtroDebitoACobrarCategoriaHistorico = new FiltroDebitoACobrarCategoriaHistorico();
		filtroDebitoACobrarCategoriaHistorico.adicionarParametro(new ParametroSimples(
						FiltroDebitoACobrarCategoriaHistorico.DEBITO_A_COBRAR_HISTORICO_ID, debitoACobrarHistorico.getId()));

		filtroDebitoACobrarCategoriaHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarCategoriaHistorico.CATEGORIA);

		colecaoDebitoACobrarCategoriaHistorico = this.getControladorUtil().pesquisar(filtroDebitoACobrarCategoriaHistorico,
						DebitoACobrarCategoriaHistorico.class.getName());

		return colecaoDebitoACobrarCategoriaHistorico;
	}

	/**
	 * Este método busca o mapeamento de uma Categoria num dado Mapa (Categoria -> Valor). Se
	 * encontrar a Categoria, realiza o subflixo [SB0031] do UC0214, que mantém a maior Quantidade
	 * de Economias na Categoria que está mapeada. Se encontrar a Categoria no Mapa, o método
	 * retorna o valor mapeado para a Categoria. Se o método retornar Null, significa que não
	 * localizou a categoria no Mapa.
	 * [SB0031] - Guardar Maior Quantidade de Economias
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private BigDecimal acumularCategoriaValor(BigDecimal valorParaAcumular, BigDecimal valorEntradaParaDeduzir, Integer tipoDebito,
					LancamentoItemContabilParcelamentoHelper itemContabil, Categoria categoriaAtual,
					Map<Categoria, BigDecimal> mapaCategoriaValor,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento) throws ControladorException{

		BigDecimal valorCategoria = null;

		// Percorre as categorias já mapeadas para verificar se a
		// quantidade de economias da categoria é maior que a categoria
		// atual (SB0031). Como precisamos capturar a categoria já
		// armazenada, faz-se necessário percorrer a coleção. Se
		// encontrar, captura o valor já armazenado para a categoria
		for(Categoria categoria : mapaCategoriaValor.keySet()){

			if(categoria.equals(categoriaAtual)){
				// [SB0031] - Guardar Maior Quantidade de Economias
				if(categoria.getQuantidadeEconomiasCategoria().compareTo(categoriaAtual.getQuantidadeEconomiasCategoria()) > 0){
					categoriaAtual.setQuantidadeEconomiasCategoria(categoria.getQuantidadeEconomiasCategoria());
				}

				valorCategoria = mapaCategoriaValor.get(categoria);
			}

		}

		// Deduz o valor de entrada
		BigDecimal[] retorno = deduzirValorEntrada(valorParaAcumular, valorEntradaParaDeduzir, tipoDebito, itemContabil, categoriaAtual,
						valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);

		valorParaAcumular = retorno[0];
		valorEntradaParaDeduzir = retorno[1];

		// Caso ainda exista valor a ser acumulado após a dedução do valor de entrada
		if(valorParaAcumular != null && valorParaAcumular.compareTo(BigDecimal.ZERO) > 0){
			// Se não existe valor armazenado para a categoria, armazena o
			// próprio valor a ser acumulado. Caso exista, armazena a soma do
			// valor já armazenado com o novo valor
			if(valorCategoria == null){
				mapaCategoriaValor.put(categoriaAtual, valorParaAcumular);
			}else{
				mapaCategoriaValor.put(categoriaAtual, valorParaAcumular.add(valorCategoria));
			}
		}

		return valorEntradaParaDeduzir;
	}

	/**
	 * Deduz o valor de entrada do valor a acumular para o item contábil e categoria passados por
	 * parâmetro. Retorna o valor restante a ser acumulado após a dedução da entrada e o valor de
	 * entrada que resta ser deduzido após esta operação
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private BigDecimal[] deduzirValorEntrada(BigDecimal valorParaAcumular, BigDecimal valorEntradaParaDeduzir, Integer tipoDebito,
					LancamentoItemContabilParcelamentoHelper itemContabil, Categoria categoriaAtual,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento) throws ControladorException{

		// 2. Caso o valor da entrada seja maior que zero (parcelamento com valor da entrada):
		// 2.1. Caso não existam contas marcadas como entrada de parcelamento (EP), ou seja, a
		// entrada será cobrada por meio de uma guia de pagamento:
		if((valorParaAcumular != null) && (valorParaAcumular.compareTo(BigDecimal.ZERO) > 0) && (valorEntradaParaDeduzir != null)
						&& (valorEntradaParaDeduzir.compareTo(BigDecimal.ZERO) > 0) && !existeContaComoEntradaParcelamento){

			Integer tipoDebitoEntrada = null;

			// Recupera o Mapa de Valor de Entrada por ItemContabil
			Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> valorEntradaPorItemContabil = null;
			if(getControladorParcelamento().getTiposDebitoParcelamentoCobrancaAdministrativa(true).contains(tipoDebito)){
				tipoDebitoEntrada = DebitoTipo.ENTRADA_PARCELAMENTO_COBRANCA_ADMINISTRATIVA;

				valorEntradaPorItemContabil = obterMapaValorEntradaPorItemContabil(valorEntradaPorTipoDebito, tipoDebitoEntrada);
			}else{
				tipoDebitoEntrada = DebitoTipo.ENTRADA_PARCELAMENTO;

				valorEntradaPorItemContabil = obterMapaValorEntradaPorItemContabil(valorEntradaPorTipoDebito, tipoDebitoEntrada);
			}

			BigDecimal valorDeduzido = valorParaAcumular.subtract(valorEntradaParaDeduzir);

			// Se o valor restante do item contábil é menor ou igual a zero, significa que ainda
			// resta valor de entrada a ser deduzido e este item não deverá ser acumulado no Map de
			// itens contábeis. Caso contrário, o valor de entrada a deduzir foi esgotado e o valor
			// deve ser acumulado para o item contábil, mas com o valor reduzido, considerando a
			// subtração do valor de entrada
			if(valorDeduzido.compareTo(BigDecimal.ZERO) <= 0){
				acumularValorEntrada(valorEntradaPorItemContabil, itemContabil, categoriaAtual, valorParaAcumular);

				valorEntradaParaDeduzir = valorEntradaParaDeduzir.subtract(valorParaAcumular);
				valorParaAcumular = BigDecimal.ZERO;

				// Caso contrário, ou seja, Se o valor de entrada deduzido foi maior que o valor do
				// item contábil
			}else{
				acumularValorEntrada(valorEntradaPorItemContabil, itemContabil, categoriaAtual, valorEntradaParaDeduzir);

				valorParaAcumular = valorDeduzido;
				valorEntradaParaDeduzir = BigDecimal.ZERO;
			}

			if(valorEntradaPorItemContabil != null && !valorEntradaPorItemContabil.isEmpty()){
				valorEntradaPorTipoDebito.put(tipoDebitoEntrada, valorEntradaPorItemContabil);
			}

		}

		BigDecimal[] retorno = new BigDecimal[2];
		retorno[0] = valorParaAcumular;
		retorno[1] = valorEntradaParaDeduzir;

		return retorno;

	}

	/**
	 * Obtém o Mapa de Valor de Entrada por Item Contábil, a partir do tipo de débito de entrada
	 * passado. Se não existir ainda o Mapa e for necessário criar, este método já o acrescenta no
	 * Mapa de Valor de Entrada por TipoDebito
	 * 
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> obterMapaValorEntradaPorItemContabil(
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					Integer tipoDebitoEntrada){

		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> valorEntradaPorItemContabil = valorEntradaPorTipoDebito
						.get(tipoDebitoEntrada);

		if(valorEntradaPorItemContabil == null){
			valorEntradaPorItemContabil = new HashMap<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>();
		}

		return valorEntradaPorItemContabil;
	}





	/**
	 * Pesquisa as prestações a partir do id da guia de pagamento e o número da prestação
	 * 
	 * @param idGuiaPagamento
	 * @param numeroPrestacao
	 * @return
	 * @throws ControladorException
	 */
	private Collection<GuiaPagamentoPrestacaoHistorico> pesquisarGuiaPagamentoPrestacoesHistorico(Integer idGuiaPagamento,
					Short numeroPrestacao) throws ControladorException{

		Collection<GuiaPagamentoPrestacaoHistorico> colecaoGuiaPagamentoPrestacaoHistorico;
		FiltroGuiaPagamentoPrestacaoHistorico filtroGuiaPagamentoPrestacaoHistorico = new FiltroGuiaPagamentoPrestacaoHistorico();
		filtroGuiaPagamentoPrestacaoHistorico.adicionarParametro(new ParametroSimples(
						FiltroGuiaPagamentoPrestacaoHistorico.GUIA_PAGAMENTO_ID, idGuiaPagamento));
		filtroGuiaPagamentoPrestacaoHistorico.adicionarParametro(new ParametroSimples(
						FiltroGuiaPagamentoPrestacaoHistorico.NUMERO_PRESTACAO, numeroPrestacao));

		filtroGuiaPagamentoPrestacaoHistorico
						.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacaoHistorico.LANCAMENTO_CONTABIL);
		filtroGuiaPagamentoPrestacaoHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroGuiaPagamentoPrestacaoHistorico.DEBITO_TIPO);

		colecaoGuiaPagamentoPrestacaoHistorico = this.getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacaoHistorico,
						GuiaPagamentoPrestacaoHistorico.class.getName());
		return colecaoGuiaPagamentoPrestacaoHistorico;
	}

	/**
	 * Acumular lista de Item Contábil de Débito a Cobrar-Financiamento os valores dos débitos a
	 * cobrar de serviços que foram parcelados
	 * 
	 * @author Carlos Chrystian
	 * @date 19/07/2012
	 * @author Luciano Galvao
	 * @date 31/10/2012
	 */
	private Object[] acumularListaDebitoACobrar(Collection<DebitoACobrar> colecaoDebitoACobrar, BigDecimal valorEntradaParaDeduzir,
					Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> valorEntradaPorTipoDebito,
					boolean existeContaComoEntradaParcelamento, Short[] indicadorTotalRemuneracaoCobrancaAdm) throws ControladorException,
					ErroRepositorioException{

		// (TipoDebito -> ItemContabil -> Categoria -> Valor)
		Map<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>> mapaPrincipal = new HashMap<Integer, Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>>>();
		Map<LancamentoItemContabilParcelamentoHelper, Map<Categoria, BigDecimal>> mapaItensCategoriaValor = null;
		Object[] retorno = null;
		Integer tipoDebito = null;
		BigDecimal valorDebitoACobrar = null;
		BigDecimal valorPrestacoesPagas = BigDecimal.ZERO;
		LancamentoItemContabilParcelamentoHelper itemContabilHelper = null;

		Short indicadorParcialRemuneracaoCobrancaAdm = ConstantesSistema.NAO;

		if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){

			for(DebitoACobrar debitoACobrar : colecaoDebitoACobrar){

				FiltroDebitoACobrarHistorico filtroDebitoACobrarHistorico = new FiltroDebitoACobrarHistorico();
				filtroDebitoACobrarHistorico
								.adicionarParametro(new ParametroSimples(FiltroDebitoACobrarHistorico.ID, debitoACobrar.getId()));
				filtroDebitoACobrarHistorico.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrarHistorico.FINANCIAMENTO_TIPO);
				DebitoACobrarHistorico debitoACobrarHistorico = (DebitoACobrarHistorico) Util.retonarObjetoDeColecao(getControladorUtil()
								.pesquisar(filtroDebitoACobrarHistorico, DebitoACobrarHistorico.class.getName()));

				// Debitos A Cobrar - Serviço
				// Caso o financiamento tipo não seja de parcelamento
				// Acumula como Serviço
				if(debitoACobrarHistorico != null){

					// Itentifica o tipo de débito do débito a cobrar
					retorno = getControladorParcelamento().identificarTipoDebitoDebitoACobrar(debitoACobrarHistorico);

					tipoDebito = (Integer) retorno[0];

					// Se o indicador total de remuneração ainda não foi LIGADO, considera o
					// valor atribuído ao identificar tipo de débito
					if(indicadorTotalRemuneracaoCobrancaAdm[0].equals(ConstantesSistema.NAO)){
						indicadorTotalRemuneracaoCobrancaAdm[0] = (Short) retorno[1];
					}

					indicadorParcialRemuneracaoCobrancaAdm = (Short) retorno[2];

					if(tipoDebito != null){

						itemContabilHelper = new LancamentoItemContabilParcelamentoHelper(debitoACobrarHistorico
										.getLancamentoItemContabil().getId(), indicadorParcialRemuneracaoCobrancaAdm);

						// Captura o Map (ItemContabil -> Categoria -> Valor) do Map principal
						mapaItensCategoriaValor = obterMapaItensContabeis(mapaPrincipal, tipoDebito);

						// Consulta a coleção de GuiaPagamentoCategoriaHistorico
						Collection<DebitoACobrarCategoriaHistorico> colecaoDebitoACobrarCategoriaHistorico = consultarColecaoDebitoACobrarCategoriaHistorico(debitoACobrarHistorico);

						if(!Util.isVazioOrNulo(colecaoDebitoACobrarCategoriaHistorico)){
							// Captura o Map (Categoria -> Valor) que já existe para o item
							// contábil do debitoACobrarHistorico. Caso não exista, cria um Map
							// vazio
							Map<Categoria, BigDecimal> mapaCategoriaValorDebitoACobrar = mapaItensCategoriaValor.get(itemContabilHelper);

							if(mapaCategoriaValorDebitoACobrar == null){
								mapaCategoriaValorDebitoACobrar = new HashMap<Categoria, BigDecimal>();
							}

							// ******************************************************************
							// Percorre as Categorias do DebitoACobrarHistorico,
							// acumulando seus valores num Mapa (Categoria -> Valor)
							// ******************************************************************
							for(DebitoACobrarCategoriaHistorico debitoACobrarCategoriaHistorico : colecaoDebitoACobrarCategoriaHistorico){

								// Instancia uma Categoria apenas com o Id e com a quantidade de
								// economias desta Categoria, que pode ser alterada caso seja
								// encontrada outra conta com um número maior de economias
								Categoria categoriaAtual = new Categoria(debitoACobrarCategoriaHistorico.getCategoria().getId());

								if(debitoACobrarCategoriaHistorico.getQuantidadeEconomia() != null
												&& debitoACobrarCategoriaHistorico.getQuantidadeEconomia().intValue() > 0){
									categoriaAtual.setQuantidadeEconomiasCategoria(debitoACobrarCategoriaHistorico.getQuantidadeEconomia());
								}

								// Povoando valor de água, caso exista.
								if(debitoACobrarCategoriaHistorico.getValorCategoria() != null
												&& debitoACobrarCategoriaHistorico.getValorCategoria().compareTo(BigDecimal.ZERO) > 0){

									// DACH_VLCATEGORIA menos (DACH_VLCATEGORIA dividido por
									// DAHI_NNPRESTACAODEBITO vezes DAHI_NNPRESTACAOCOBRADAS)
									int nnPrestacaoDebito = Short.valueOf(debitoACobrarHistorico.getPrestacaoDebito()).intValue();
									int nnPrestacaoCobrada = Short.valueOf(debitoACobrarHistorico.getPrestacaoCobradas()).intValue();

									valorPrestacoesPagas = Util.dividirArredondando(debitoACobrarCategoriaHistorico.getValorCategoria(),
													new BigDecimal(nnPrestacaoDebito)).setScale(2, BigDecimal.ROUND_DOWN);

									valorPrestacoesPagas = valorPrestacoesPagas.multiply(new BigDecimal(nnPrestacaoCobrada));

									valorDebitoACobrar = debitoACobrarCategoriaHistorico.getValorCategoria().subtract(valorPrestacoesPagas);

									valorEntradaParaDeduzir = acumularCategoriaValor(valorDebitoACobrar, valorEntradaParaDeduzir,
													tipoDebito, itemContabilHelper, categoriaAtual, mapaCategoriaValorDebitoACobrar,
													valorEntradaPorTipoDebito, existeContaComoEntradaParcelamento);
								}
							}

							// ******************************************************************
							// Armazena os Maps manipulados acima
							// ******************************************************************

							// Se o Map (Categoria -> Valor) para o item contábil do
							// DebitoACobrarHistorico estiver preenchido, guarda no
							// Map (ItemContabil -> Categoria -> Valor)
							if(!mapaCategoriaValorDebitoACobrar.isEmpty()){
								mapaItensCategoriaValor.put(itemContabilHelper, mapaCategoriaValorDebitoACobrar);
							}

							// Se o Map (ItemContabil -> Categoria -> Valor) para o débito a cobrar
							// prestação histórico
							// em questão estiver preenchido, guarda no Map (TipoDebito ->
							// ItemContabil -> Categoria ->
							// Valor)
							if(!mapaItensCategoriaValor.isEmpty()){
								mapaPrincipal.put(tipoDebito, mapaItensCategoriaValor);
							}
						}
					}
				}
			}
		}

		Object[] resultado = new Object[2];
		resultado[0] = mapaPrincipal;
		resultado[1] = valorEntradaParaDeduzir;

		return resultado;
	}

	/**
	 * Acumular lista de Item Contábil de Crédito os valores dos créditos a realizar que foram
	 * parcelados
	 * 
	 * @author Carlos Chrystian
	 * @date 19/07/2012
	 * @param colecaoContaValores
	 * @param colecaoDebitoACobrar
	 * @return
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private Map<Integer, BigDecimal> acumularListaCreditoItemContabil(Collection<CreditoARealizar> colecaoCreditoARealizar,
					Collection<ContaValoresHelper> colecaoContaValores) throws ControladorException, ErroRepositorioException{

		Map<Integer, BigDecimal> mapaCreditoARealizarItemContabil = new HashMap<Integer, BigDecimal>();
		Integer chaveRegistroInserido = null;
		BigDecimal valorCreditoARealizarItemContabil = BigDecimal.ZERO;
		BigDecimal valorCreditoRealizado = BigDecimal.ZERO;
		BigDecimal valorPrestacoesPagas = BigDecimal.ZERO;

		if(!Util.isVazioOrNulo(colecaoCreditoARealizar)){
			// Acumula valores de CreditoARealizar
			for(CreditoARealizar creditoARealizar : colecaoCreditoARealizar){
				// Carregando conta histórico
				FiltroCreditoARealizarGeral filtroCreditoARealizarGeral = new FiltroCreditoARealizarGeral();
				filtroCreditoARealizarGeral.adicionarParametro(new ParametroSimples(FiltroCreditoARealizarGeral.ID, creditoARealizar
								.getId()));

				filtroCreditoARealizarGeral
								.adicionarCaminhoParaCarregamentoEntidade(FiltroCreditoARealizarGeral.CREDITO_A_REALIZAR_HISTORICO);
				filtroCreditoARealizarGeral
								.adicionarCaminhoParaCarregamentoEntidade(FiltroCreditoARealizarGeral.CREDITO_A_REALIZAR_HISTORICO_LANCAMENTO_CONTABIL);

				Collection<CreditoARealizarGeral> colecaoCreditoARealizarGeral = this.getControladorUtil().pesquisar(
								filtroCreditoARealizarGeral, CreditoARealizarGeral.class.getName());

				if(!Util.isVazioOrNulo(colecaoCreditoARealizarGeral)){
					for(CreditoARealizarGeral creditoARealizarGeral : colecaoCreditoARealizarGeral){
						chaveRegistroInserido = creditoARealizarGeral.getCreditoARealizarHistorico().getLancamentoItemContabil().getId();

						if(!mapaCreditoARealizarItemContabil.containsKey(chaveRegistroInserido)){
							if(creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito() != null
											&& creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito()
															.compareTo(BigDecimal.ZERO) > 0){
								// CRAR_VLCREDITO menos
								// (CRAR_VLCREDITO dividido por CRAR_NNPRESTACAOCREDITO vezes
								// CRAR_NNPRESTACAOREALIZADAS)
								// mais CRAR_VLRESIDUALMESANTERIOR
								int nnPrestacaoCredito = Short.valueOf(
												creditoARealizarGeral.getCreditoARealizarHistorico().getPrestacaoCredito()).intValue();
								int nnPrestacaoRealizadas = Short.valueOf(
												creditoARealizarGeral.getCreditoARealizarHistorico().getPrestacaoRealizadas()).intValue();

								valorPrestacoesPagas = Util.dividirArredondando(
												creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito(),
												new BigDecimal(nnPrestacaoCredito)).setScale(2, BigDecimal.ROUND_DOWN);

								valorPrestacoesPagas = valorPrestacoesPagas.multiply(new BigDecimal(nnPrestacaoRealizadas)).add(
												creditoARealizarGeral.getCreditoARealizarHistorico().getValorResidualMesAnterior());

								valorCreditoARealizarItemContabil = creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito()
												.subtract(valorPrestacoesPagas);

								mapaCreditoARealizarItemContabil.put(chaveRegistroInserido, valorCreditoARealizarItemContabil);
							}
						}else{
							if(creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito() != null
											&& creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito()
															.compareTo(BigDecimal.ZERO) > 0){
								// CRAR_VLCREDITO menos
								// (CRAR_VLCREDITO dividido por CRAR_NNPRESTACAOCREDITO vezes
								// CRAR_NNPRESTACAOREALIZADAS)
								// mais CRAR_VLRESIDUALMESANTERIOR
								int nnPrestacaoCredito = Short.valueOf(
												creditoARealizarGeral.getCreditoARealizarHistorico().getPrestacaoCredito()).intValue();
								int nnPrestacaoRealizadas = Short.valueOf(
												creditoARealizarGeral.getCreditoARealizarHistorico().getPrestacaoRealizadas()).intValue();

								valorPrestacoesPagas = Util.dividirArredondando(
												creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito(),
												new BigDecimal(nnPrestacaoCredito)).setScale(2, BigDecimal.ROUND_DOWN);

								valorPrestacoesPagas = valorPrestacoesPagas.multiply(new BigDecimal(nnPrestacaoRealizadas)).add(
												creditoARealizarGeral.getCreditoARealizarHistorico().getValorResidualMesAnterior());

								valorCreditoARealizarItemContabil = creditoARealizarGeral.getCreditoARealizarHistorico().getValorCredito()
												.subtract(valorPrestacoesPagas);

								valorCreditoARealizarItemContabil = valorCreditoARealizarItemContabil.add(mapaCreditoARealizarItemContabil
												.get(chaveRegistroInserido));

								mapaCreditoARealizarItemContabil.put(chaveRegistroInserido, valorCreditoARealizarItemContabil);
							}
						}
					}
				}
			}
		}

		if(!Util.isVazioOrNulo(colecaoContaValores)){
			// Acumula valores creditos realizados.
			for(ContaValoresHelper contaHelper : colecaoContaValores){
				// Carregando conta histórico
				FiltroContaHistorico filtroContaHistorico = new FiltroContaHistorico();
				filtroContaHistorico.adicionarParametro(new ParametroSimples(FiltroContaHistorico.ID, contaHelper.getConta().getId()));

				Collection<ContaHistorico> colecaoContaHistorico = this.getControladorUtil().pesquisar(filtroContaHistorico,
								ContaHistorico.class.getName());

				if(!Util.isVazioOrNulo(colecaoContaHistorico)){

					Collection<CreditoRealizadoHistorico> colecaoCreditoRealizadoHistorico = repositorioFaturamento
									.pesquisarCreditosRealizadosHistoricoPorCreditoTipo(contaHelper.getConta().getId(),
													CreditoTipo.DESCONTO_ACRESCIMOS_IMPONTUALIDADE, "<>");
					// Povoando valores dos itens contábeis dos créditos realizados.
					for(CreditoRealizadoHistorico creditoRealizadoHistorico : colecaoCreditoRealizadoHistorico){
						chaveRegistroInserido = creditoRealizadoHistorico.getLancamentoItemContabil().getId();

						if(!mapaCreditoARealizarItemContabil.containsKey(chaveRegistroInserido)){

							if(creditoRealizadoHistorico.getValorCredito() != null
											&& creditoRealizadoHistorico.getValorCredito().compareTo(BigDecimal.ZERO) > 0){
								valorCreditoRealizado = creditoRealizadoHistorico.getValorCredito().setScale(2, BigDecimal.ROUND_DOWN);

								mapaCreditoARealizarItemContabil.put(chaveRegistroInserido, valorCreditoRealizado);
							}
						}else{
							if(creditoRealizadoHistorico.getValorCredito() != null
											&& creditoRealizadoHistorico.getValorCredito().compareTo(BigDecimal.ZERO) > 0){
								valorCreditoRealizado = creditoRealizadoHistorico.getValorCredito().setScale(2, BigDecimal.ROUND_DOWN)
												.add(mapaCreditoARealizarItemContabil.get(chaveRegistroInserido));

								mapaCreditoARealizarItemContabil.put(chaveRegistroInserido, valorCreditoRealizado);
							}
						}
					}
				}
			}
		}

		return mapaCreditoARealizarItemContabil;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] - Encerrar Cobrança Administrativa do Imóvel. Item 1.
	 * 
	 * @return
	 */
	public Collection<ImovelCobrancaMotivoRetirada> consultarImovelCobrancaMotivoRetirada() throws ControladorException{

		try{
			return repositorioCobranca.consultarImovelCobrancaMotivoRetirada();

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * Acumula na tabela RESUMO_COBRANCA_ACAO_EVENTUAL os valores do documento de cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 19/06/2007
	 */
	private void gerarDadosResumoCobrancaAcaoEventual(Integer idCobrancaAtividadeAcaoComando, Usuario usuarioLogado,
					Integer idCobrancaAcao, Date dataEncerramentoPrevista, Date dataEncerramentoRealizada, Date dataRealizacao,
					List<String> idsAcoesSemPrazoValidade) throws ControladorException{

		Collection colecaoDadosCobrancaDocumentoHelper = null;

		// ResumoCobrancaAcaoEventual ->
		// (Collection<ResumoCobrancaAcaoSituacao>,Collection<ResumoCobrancaAcaoRemuneracao>)
		HashMap<ResumoCobrancaAcaoEventual, Object[]> mapResumoCobrancaAcaoEventual = null;

		ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual = null;
		ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventualExistente = null;

		try{

			LOGGER.info("Antes de Consultar dados de cobrança para geração do RESUMO EVENTUAL. Comando: " + idCobrancaAtividadeAcaoComando);

			colecaoDadosCobrancaDocumentoHelper = repositorioCobranca
							.pesquisarDadosCobrancaDocumentoGeracaoResumoEventual(idCobrancaAtividadeAcaoComando);

			LOGGER.info("Depois da Consulta para geração do RESUMO EVENTUAL. Comando: " + idCobrancaAtividadeAcaoComando);

			// Para cada conjunto de documentos documento de cobrança
			if(colecaoDadosCobrancaDocumentoHelper != null && !colecaoDadosCobrancaDocumentoHelper.isEmpty()){

				// Instancia o Mapa de ResumoCobrancaAcaoEventual
				mapResumoCobrancaAcaoEventual = new HashMap<ResumoCobrancaAcaoEventual, Object[]>();

				SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

				/*
				 * Atribuir o valor "sim" (1) caso a ação de cobrança esteja sendo encerrada, caso
				 * contrário, atribuir o valor "não" (2).
				 */
				short indicadorDefinitivo = 0;
				if(dataEncerramentoRealizada != null){

					indicadorDefinitivo = 1;
				}else{

					indicadorDefinitivo = 2;
				}

				/*
				 * Data e hora prevista da ação do encerramento da ação, caso a mesma seja maior
				 * que a data corrente, caso contrário, mover a data e hora atuais.
				 */
				Date dataAtividadeEncerrar = null;
				if(dataEncerramentoPrevista != null && dataEncerramentoPrevista.compareTo(new Date()) == 1){

					dataAtividadeEncerrar = dataEncerramentoPrevista;
				}else{

					dataAtividadeEncerrar = new Date();
				}

				Iterator iteratorColecaoCobrancaDocumentoHelper = colecaoDadosCobrancaDocumentoHelper.iterator();

				while(iteratorColecaoCobrancaDocumentoHelper.hasNext()){

					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper = (DadosCobrancaDocumentoHelper) iteratorColecaoCobrancaDocumentoHelper
									.next();



					LOGGER.info("Processando DadosCobrancaDocumentoHelper...");

					Integer idCobrancaCriterio = null;
					if(dadosCobrancaDocumentoHelper.getIdCobrancaCriterio() != null){

						idCobrancaCriterio = dadosCobrancaDocumentoHelper.getIdCobrancaCriterio();
					}

					Integer idCobrancaGrupo = null;
					if(dadosCobrancaDocumentoHelper.getIdCobrancaGrupo() != null){

						idCobrancaGrupo = dadosCobrancaDocumentoHelper.getIdCobrancaGrupo();
					}

					Integer idFiscalizacao = null;
					if(dadosCobrancaDocumentoHelper.getIdFiscalizacao() != null){

						idFiscalizacao = dadosCobrancaDocumentoHelper.getIdFiscalizacao();
					}

					Categoria categoria = null;
					if(dadosCobrancaDocumentoHelper.getIdCategoria() != null){

						categoria = new Categoria();
						categoria.setId(dadosCobrancaDocumentoHelper.getIdCategoria());

					}else{

						// Caso a categoria esteja nula preenche com a categoria do imóvel
						if(dadosCobrancaDocumentoHelper.getIdImovel() != null){

							categoria = getControladorImovel().obterPrincipalCategoriaImovel(dadosCobrancaDocumentoHelper.getIdImovel(),
											sistemaParametro.getCodigoEmpresaFebraban(), false);
						}
					}

					Empresa empresa = null;
					if(dadosCobrancaDocumentoHelper.getIdEmpresa() != null){

						empresa = new Empresa();
						empresa.setId(dadosCobrancaDocumentoHelper.getIdEmpresa());

					}

					MotivoNaoEntregaDocumento motivoNaoEntregaDocumento = null;
					if(dadosCobrancaDocumentoHelper.getIdMotivoNaoEntrega() != null){

						motivoNaoEntregaDocumento = new MotivoNaoEntregaDocumento();
						motivoNaoEntregaDocumento.setId(dadosCobrancaDocumentoHelper.getIdMotivoNaoEntrega());
					}

					// Cria o Resumo Cobrança Ação Eventual
					resumoCobrancaAcaoEventual = this.criarResumoCobrancaAcaoEventual(idCobrancaAtividadeAcaoComando, dataRealizacao,
									dataAtividadeEncerrar, categoria, idCobrancaAcao, idCobrancaGrupo,
									dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao(),
									dadosCobrancaDocumentoHelper.getIdSituacaoDebito(), idFiscalizacao, 1,
									dadosCobrancaDocumentoHelper.getIndicadorAcimaAbaixo(),
									dadosCobrancaDocumentoHelper.getIndicadorAcimaLimite(),
									dadosCobrancaDocumentoHelper.getValorDocumentos(), idCobrancaCriterio,
									dadosCobrancaDocumentoHelper.getIdGerenciaRegional(), dadosCobrancaDocumentoHelper.getIdLocalidade(),
									dadosCobrancaDocumentoHelper.getIdSetorComercial(), dadosCobrancaDocumentoHelper.getIdRota(),
									dadosCobrancaDocumentoHelper.getCodigoSetorComercial(), dadosCobrancaDocumentoHelper.getIdQuadra(),
									dadosCobrancaDocumentoHelper.getNumeroQuadra(), dadosCobrancaDocumentoHelper.getIdImovelPerfil(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoAgua(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoEsgoto(),
									dadosCobrancaDocumentoHelper.getIdEsferaPoder(),
									dadosCobrancaDocumentoHelper.getQuantidadeDocumentos(), empresa, indicadorDefinitivo,
									dadosCobrancaDocumentoHelper.getIdMotivoNaoEntrega(),
									dadosCobrancaDocumentoHelper.getIdFaturamentoGrupoCronogramaMensal(),
									dadosCobrancaDocumentoHelper.getIdUnidadeNegocio());

					// Busca um objeto ResumoCobrancaAcaoEventual existente no Map
					resumoCobrancaAcaoEventualExistente = (ResumoCobrancaAcaoEventual) Util.buscarObjetoNaColecao(
									mapResumoCobrancaAcaoEventual.keySet(), resumoCobrancaAcaoEventual);

					// Se o registro não existe no Map, insere. Caso contrário, acumula os valores
					if(resumoCobrancaAcaoEventualExistente == null){

						inserirResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventual, dadosCobrancaDocumentoHelper,
										idCobrancaAtividadeAcaoComando, idCobrancaAcao, mapResumoCobrancaAcaoEventual);
					}else{

						atualizarResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventualExistente, dadosCobrancaDocumentoHelper,
										idCobrancaAtividadeAcaoComando, idCobrancaAcao, mapResumoCobrancaAcaoEventual);
					}
				}

				if(mapResumoCobrancaAcaoEventual != null && !mapResumoCobrancaAcaoEventual.isEmpty()){

					// Persiste a coleção de ResumoCobrancaAcaoEventual
					repositorioCobranca.inserirResumoCobrancaAcaoEventualBatch(mapResumoCobrancaAcaoEventual.keySet());

					Object[] resumoDetalhes = null;

					for(ResumoCobrancaAcaoEventual resumoEventual : mapResumoCobrancaAcaoEventual.keySet()){
						resumoDetalhes = mapResumoCobrancaAcaoEventual.get(resumoEventual);

						if(resumoDetalhes != null){

							// Persiste a coleção de ResumoCobrancaAcaoSituacao
							if(!Util.isVazioOrNulo((Collection) resumoDetalhes[0])){
								repositorioBatch.inserirColecaoObjetoParaBatch((Collection) resumoDetalhes[0]);
							}

							// Persiste a coleção de ResumoCobrancaAcaoRemuneracao
							if(!Util.isVazioOrNulo((Collection) resumoDetalhes[1])){
								repositorioBatch.inserirColecaoObjetoParaBatch((Collection) resumoDetalhes[1]);
							}
						}
					}
				}
			}

			/*
			 * Caso a ação de cobrança do documento tenha prazo de validade (CBAC_ID da tabela
			 * COBRANCA_DOCUMENTO não contido em PASI_VLPARAMETRO da tabela PARAMETRO_SISTEMA com
			 * PASI_CDPARAMETRO="P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE"):
			 */
			if(!idsAcoesSemPrazoValidade.contains(idCobrancaAcao.toString())){

				/*
				 * Caso o documento tenha sido gerado a partir de um comando de ação de cobrança
				 * (CACM_ID diferente de nulo) e a data prevista para o encerramento seja igual ou
				 * menor
				 * que a data corrente
				 */
				if(idCobrancaAtividadeAcaoComando != null
								&& (dataEncerramentoPrevista != null && dataEncerramentoPrevista.compareTo(new Date()) < 1)){

					/*
					 * O sistema atualiza a data e hora da realização da atividade encerrar ação de
					 * cobrança (CACM_DTENCERRAMENTOREALIZADA = Data e hora correntes da tabela
					 * COBRANCA_ACAO_ATIVIDADE_COMAND)
					 */
					repositorioCobranca.atualizarCobrancaAcaoAtividadeComando(idCobrancaAtividadeAcaoComando);
				}
			}

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Verifica se a aão de cobrança possui prazo de validade, de acordo com o parâmetro
	 * P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE
	 * 
	 * @author Luciano Galvão
	 * @date 17/12/2012
	 */
	private boolean acaoCobrancaPossuiPrazoValidade(Integer idCobrancaAcao) throws ControladorException{

		List<String> idsAcoesSemPrazoValidadeList = new ArrayList<String>();

		String[] idsAcoesSemPrazoValidade = ParametroCobranca.P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE.executar().split(",");
		if(idsAcoesSemPrazoValidade != null && idsAcoesSemPrazoValidade.length > 0){
			idsAcoesSemPrazoValidadeList = Arrays.asList(idsAcoesSemPrazoValidade);
		}

		return (idCobrancaAcao != null && !idsAcoesSemPrazoValidadeList.contains(idCobrancaAcao.toString()));
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2012
	 */
	private void inserirResumoCobrancaAcaoEventual(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual,
					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper, Integer idCobrancaAcaoAtividadeComando,
					Integer idCobrancaAcao, Map<ResumoCobrancaAcaoEventual, Object[]> mapResumoCobrancaAcaoEventual)
					throws ControladorException{

		try{

			Integer quantidadeParcelamentos = 0;
			Integer quantidadeParcelamentosComEntrada = 0;
			BigDecimal valorEntradaParcelamento = BigDecimal.ZERO;

			/*
			 * Caso a situação da ação de cobrança seja correspondente a "ação
			 * cancelada" ou "ação cancelada por decurso de prazo"
			 */
			if(dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao() != null
							&& (dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao().equals(CobrancaAcaoSituacao.CANCELADA) || dadosCobrancaDocumentoHelper
											.getIdCobrancaAcaoSituacao().equals(CobrancaAcaoSituacao.CANCELADA_PRAZO))){

				// Quantidade de imóveis desmarcados
				resumoCobrancaAcaoEventual.setQuantidadeImoveisDesmarcados(1);
			}else{

				// Quantidade de imóveis desmarcados
				resumoCobrancaAcaoEventual.setQuantidadeImoveisDesmarcados(0);
			}

			/*
			 * Obtém a coleção de parcelamentos de guia e conta com situação
			 * "normal"
			 */
			Collection<Parcelamento> colecaoParcelamento = repositorioCobranca
							.pesquisarParcelamentosResumoCobrancaAcaoEventual(dadosCobrancaDocumentoHelper.getIdCobrancaDocumento());

			if(colecaoParcelamento != null){
				for(Parcelamento parcelamento : colecaoParcelamento){

					// Acumular quantidade de parcelamentos realizados com e sem entrada
					quantidadeParcelamentos = quantidadeParcelamentos.intValue() + 1;

					if(parcelamento.getValorEntrada() != null || parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) == 1){

						// Acumular quantidade de parcelamentos realizados com entrada
						quantidadeParcelamentosComEntrada = quantidadeParcelamentosComEntrada.intValue() + 1;

						// Acumular valor de entrada de parcelamento
						valorEntradaParcelamento = valorEntradaParcelamento.add(parcelamento.getValorEntrada());
					}
				}
			}

			// Quantidade de imóveis marcados
			resumoCobrancaAcaoEventual.setQuantidadeImoveisMarcados(1);

			// Quantidade de documentos
			resumoCobrancaAcaoEventual.setQuantidadeDocumentos(1);

			// Quantidade Parcelamentos
			resumoCobrancaAcaoEventual.setQuantidadeParcelamentos(quantidadeParcelamentos);

			// QuantidadeParcelamentos com entrada
			resumoCobrancaAcaoEventual.setQuantidadeParcelamentosComEntrada(quantidadeParcelamentosComEntrada);

			// Valor entrada parcelamentos
			resumoCobrancaAcaoEventual.setValorEntradaParcelamento(valorEntradaParcelamento);

			// ***************************************************
			// Construindo a coleção de ResumoCobrancaAcaoSituacao
			// ***************************************************
			ResumoCobrancaAcaoSituacao resumoCobrancaAcaoSituacao = null;
			Collection<ResumoCobrancaAcaoSituacao> colecaoResumoCobrancaAcaoSituacao = null;

			Collection<Object[]> colecaoSituacaoDebitoItensComandoEventual = repositorioCobranca
							.pesquisarSituacaoDebitoItensParaGeracaoResumoEventual(dadosCobrancaDocumentoHelper.getIdCobrancaDocumento());

			if(!Util.isVazioOrNulo(colecaoSituacaoDebitoItensComandoEventual)){

				colecaoResumoCobrancaAcaoSituacao = new ArrayList<ResumoCobrancaAcaoSituacao>();

				for(Object[] helperResumo : colecaoSituacaoDebitoItensComandoEventual){

					resumoCobrancaAcaoSituacao = new ResumoCobrancaAcaoSituacao();

					// Resumo das ações de cobrança eventual
					resumoCobrancaAcaoSituacao.setResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventual);

					// Documento Tipo
					if(helperResumo[0] != null && !helperResumo[0].toString().equals("")){

						resumoCobrancaAcaoSituacao.setDocumentoTipo(new DocumentoTipo(Util.obterInteger(helperResumo[0].toString())));
					}

					// Cobrança Débito Situação
					if(helperResumo[3] != null && !helperResumo[3].toString().equals("")){

						resumoCobrancaAcaoSituacao.setCobrancaDebitoSituacao(new CobrancaDebitoSituacao(Util.obterInteger(helperResumo[3]
										.toString())));
					}

					// Quantidade de Documentos
					if(helperResumo[1] != null && !helperResumo[1].toString().equals("")){

						resumoCobrancaAcaoSituacao.setQuantidadeDocumentos(Util.obterInteger(helperResumo[1].toString()));
					}else{

						resumoCobrancaAcaoSituacao.setQuantidadeDocumentos(0);
					}

					// Valor dos Documentos
					if(helperResumo[2] != null && !helperResumo[2].toString().equals("")){

						resumoCobrancaAcaoSituacao.setValorDocumentos(new BigDecimal(helperResumo[2].toString()));
					}else{

						resumoCobrancaAcaoSituacao.setValorDocumentos(BigDecimal.ZERO);
					}

					// Última Alteração
					resumoCobrancaAcaoSituacao.setUltimaAlteracao(new Date());

					// Guardando o ResumoCobrancaAcaoSituacao na coleção
					colecaoResumoCobrancaAcaoSituacao.add(resumoCobrancaAcaoSituacao);
				}
			}

			Collection<ResumoCobrancaAcaoRemuneracao> colecaoResumoCobrancaAcaoRemuneracao = null;

			/*
			 * Caso ação de cobrança que originou o documento de cobrança seja
			 * correspondente a "cobrança administrativa"
			 */
			if(idCobrancaAcao.equals(CobrancaAcao.COBRANCA_ADMINISTRATIVA)){

				// O sistema recupera os dados de remuneração
				// [SB0004] - Tratar Cobrança Administrativa
				Collection<Object[]> colecaoValoresCobrancaAdministrativa = repositorioCobranca
								.pesquisarValoresImovelCobrancaAdministrativaItem(idCobrancaAcaoAtividadeComando,
												dadosCobrancaDocumentoHelper.getIdImovel());

				// Trata os dados da remuneração da cobrança administrativa
				if(!Util.isVazioOrNulo(colecaoValoresCobrancaAdministrativa)){

					ResumoCobrancaAcaoRemuneracao resumoCobrancaAcaoRemuneracao = null;
					colecaoResumoCobrancaAcaoRemuneracao = new ArrayList<ResumoCobrancaAcaoRemuneracao>();

					for(Object[] valoresRemuneracao : colecaoValoresCobrancaAdministrativa){

						resumoCobrancaAcaoRemuneracao = new ResumoCobrancaAcaoRemuneracao();

						// Documento Tipo
						resumoCobrancaAcaoRemuneracao.setDocumentoTipo(new DocumentoTipo(
										Util.obterInteger(valoresRemuneracao[4].toString())));

						BigDecimal valorParaRemuneracao = BigDecimal.ZERO;
						BigDecimal percentualRemuneracao = BigDecimal.ZERO;

						// Caso o percentual de remuneração normal para o item esteja
						// preenchido
						if(valoresRemuneracao[5] != null && !valoresRemuneracao[5].toString().equals("")){

							// Percentual da Remuneração Normal
							percentualRemuneracao = new BigDecimal(valoresRemuneracao[5].toString());

							// Acumula o valor de remuneração correspondente
							if(valoresRemuneracao[0] != null && !valoresRemuneracao[0].toString().equals("")){

								// Valor da Remuneração Normal
								valorParaRemuneracao = new BigDecimal(valoresRemuneracao[0].toString());
							}
						}

						/*
						 * Caso o percentual de remuneração pela reincidência para o item
						 * esteja
						 * preenchido
						 */
						if(valoresRemuneracao[6] != null && !valoresRemuneracao[6].toString().equals("")){

							// Percentual da Remuneração Reincidência
							percentualRemuneracao = new BigDecimal(valoresRemuneracao[6].toString());

							// Acumula o valor de remuneração correspondente
							if(valoresRemuneracao[1] != null && !valoresRemuneracao[1].toString().equals("")){

								// Valor da Remuneração pela Reincidência
								valorParaRemuneracao = new BigDecimal(valoresRemuneracao[1].toString());
							}
						}

						/*
						 * Caso o percentual de remuneração para serviços especiais para o
						 * item
						 * esteja preenchido
						 */
						if(valoresRemuneracao[7] != null && !valoresRemuneracao[7].toString().equals("")){

							// Percentual da Remuneração Serviço Especial
							percentualRemuneracao = new BigDecimal(valoresRemuneracao[7].toString());

							// Acumula o valor de remuneração correspondente
							if(valoresRemuneracao[2] != null && !valoresRemuneracao[2].toString().equals("")){

								// Valor da Remuneração para Serviços Especiais
								valorParaRemuneracao = new BigDecimal(valoresRemuneracao[2].toString());
							}
						}

						/*
						 * Caso o percentual de remuneração para serviços de parcelamento
						 * para o
						 * item esteja preenchido
						 */
						if(valoresRemuneracao[8] != null && !valoresRemuneracao[8].toString().equals("")){

							// Percentual da Remuneração Parcelamento
							percentualRemuneracao = new BigDecimal(valoresRemuneracao[8].toString());

							// Acumula o valor de remuneração correspondente
							if(valoresRemuneracao[3] != null && !valoresRemuneracao[3].toString().equals("")){

								// Valor da Remuneração par serviços de Parcelamento
								valorParaRemuneracao = new BigDecimal(valoresRemuneracao[3].toString());
							}
						}

						// Valor da Remuneração
						resumoCobrancaAcaoRemuneracao.setValorRemuneracao(valorParaRemuneracao);

						// Percentual da Remuneração
						resumoCobrancaAcaoRemuneracao.setPercentualRemuneracao(percentualRemuneracao);

						// Última Alteração
						resumoCobrancaAcaoRemuneracao.setUltimaAlteracao(new Date());

						resumoCobrancaAcaoRemuneracao.setResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventual);

						// Adiciona o ResumoCobrancaAcaoRemuneracao à coleção
						colecaoResumoCobrancaAcaoRemuneracao.add(resumoCobrancaAcaoRemuneracao);
					}
				}
			}

			// Armazena os Resumos no Map
			Object[] resumosDetalhe = new Object[2];
			resumosDetalhe[0] = colecaoResumoCobrancaAcaoSituacao;
			resumosDetalhe[1] = colecaoResumoCobrancaAcaoRemuneracao;

			mapResumoCobrancaAcaoEventual.put(resumoCobrancaAcaoEventual, resumosDetalhe);

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2012
	 */
	private void atualizarResumoCobrancaAcaoEventual(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual,
					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper, Integer idCobrancaAcaoAtividadeComando,
					Integer idCobrancaAcao, HashMap<ResumoCobrancaAcaoEventual, Object[]> mapResumoCobrancaAcaoEventual)
					throws ControladorException{

		try{

			Integer quantidadeParcelamentos = 0;
			Integer quantidadeParcelamentosComEntrada = 0;
			BigDecimal valorEntradaParcelamento = BigDecimal.ZERO;
			/*
			 * Caso a situação da ação de cobrança seja correspondente a "ação
			 * cancelada" ou "ação cancelada por decurso de prazo"
			 */
			if(dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao() != null
							&& (dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao().equals(CobrancaAcaoSituacao.CANCELADA) || dadosCobrancaDocumentoHelper
											.getIdCobrancaAcaoSituacao().equals(CobrancaAcaoSituacao.CANCELADA_PRAZO))){

				// Quantidade de imóveis desmarcados
				resumoCobrancaAcaoEventual.setQuantidadeImoveisDesmarcados(resumoCobrancaAcaoEventual.getQuantidadeImoveisDesmarcados()
								.intValue() + 1);
			}

			/*
			 * Obtém a coleção de parcelamentos de guia e conta com situação
			 * "normal"
			 */
			Collection<Parcelamento> colecaoParcelamento = repositorioCobranca
							.pesquisarParcelamentosResumoCobrancaAcaoEventual(dadosCobrancaDocumentoHelper.getIdCobrancaDocumento());

			if(colecaoParcelamento != null){
				for(Parcelamento parcelamento : colecaoParcelamento){

					// Acumular quantidade de parcelamentos realizados com e sem entrada
					quantidadeParcelamentos = quantidadeParcelamentos.intValue() + 1;

					if(parcelamento.getValorEntrada() != null || parcelamento.getValorEntrada().compareTo(BigDecimal.ZERO) == 1){

						// Acumular quantidade de parcelamentos realizados com entrada
						quantidadeParcelamentosComEntrada = quantidadeParcelamentosComEntrada.intValue() + 1;

						// Acumular valor de entrada de parcelamento
						valorEntradaParcelamento = valorEntradaParcelamento.add(parcelamento.getValorEntrada());
					}
				}
			}

			// Quantidade de imóveis marcados
			resumoCobrancaAcaoEventual
							.setQuantidadeImoveisMarcados(resumoCobrancaAcaoEventual.getQuantidadeImoveisMarcados().intValue() + 1);

			// Quantidade de documentos
			resumoCobrancaAcaoEventual.setQuantidadeDocumentos(resumoCobrancaAcaoEventual.getQuantidadeDocumentos() + 1);

			// Quantidade Parcelamentos
			resumoCobrancaAcaoEventual.setQuantidadeParcelamentos(resumoCobrancaAcaoEventual.getQuantidadeParcelamentos().intValue()
							+ quantidadeParcelamentos);

			// QuantidadeParcelamentos com entrada
			resumoCobrancaAcaoEventual.setQuantidadeParcelamentosComEntrada(resumoCobrancaAcaoEventual
							.getQuantidadeParcelamentosComEntrada().intValue() + quantidadeParcelamentosComEntrada);

			// Valor entrada parcelamentos
			resumoCobrancaAcaoEventual.setValorEntradaParcelamento(resumoCobrancaAcaoEventual.getValorEntradaParcelamento().add(
							valorEntradaParcelamento));

			// Inserir ou Atualizar ResumoCobrancaAcaoSituacao
			inserirOuAtualizarResumoCobrancaAcaoSituacao(resumoCobrancaAcaoEventual, dadosCobrancaDocumentoHelper,
							mapResumoCobrancaAcaoEventual);

			/*
			 * Caso ação de cobrança que originou o documento de cobrança seja
			 * correspondente a "cobrança administrativa"
			 */
			Collection<Object[]> colecaoValoresCobrancaAdministrativa = null;

			if(idCobrancaAcao.equals(CobrancaAcao.COBRANCA_ADMINISTRATIVA)){

				// O sistema recupera os dados de remuneração
				// [SB0004] - Tratar Cobrança Administrativa
				colecaoValoresCobrancaAdministrativa = repositorioCobranca.pesquisarValoresImovelCobrancaAdministrativaItem(
								idCobrancaAcaoAtividadeComando, dadosCobrancaDocumentoHelper.getIdImovel());

				// Trata os dados da remuneração da cobrança administrativa
				if(!Util.isVazioOrNulo(colecaoValoresCobrancaAdministrativa)){

					// Inserir ou Atualizar ResumoCobrancaAcaoRemuneracao
					inserirOuAtualizarResumoCobrancaAcaoRemuneracao(resumoCobrancaAcaoEventual, colecaoValoresCobrancaAdministrativa,
									mapResumoCobrancaAcaoEventual);
				}
			}

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * [SB0004] - Tratar Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2012
	 */
	private void inserirOuAtualizarResumoCobrancaAcaoRemuneracao(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual,
					Collection<Object[]> colecaoValoresCobrancaAdministrativa,
					HashMap<ResumoCobrancaAcaoEventual, Object[]> mapResumoCobrancaAcaoEventual) throws ControladorException{

		ResumoCobrancaAcaoRemuneracao resumoCobrancaAcaoRemuneracao = null;
		ResumoCobrancaAcaoRemuneracao resumoCobrancaAcaoRemuneracaoExistente = null;
		Collection<ResumoCobrancaAcaoRemuneracao> colecaoResumoCobrancaAcaoRemuneracao = null;

		if(!Util.isVazioOrNulo(colecaoValoresCobrancaAdministrativa)){

			BigDecimal valorParaRemuneracao = null;
			BigDecimal percentualRemuneracao = null;

			// Recupera a coleção de ResumoCobrancaAcaoRemuneracao já existente
			Object[] retorno = mapResumoCobrancaAcaoEventual.get(resumoCobrancaAcaoEventual);
			if(retorno != null){
				colecaoResumoCobrancaAcaoRemuneracao = (Collection<ResumoCobrancaAcaoRemuneracao>) retorno[1];
			}
			if(colecaoResumoCobrancaAcaoRemuneracao == null){
				colecaoResumoCobrancaAcaoRemuneracao = new ArrayList<ResumoCobrancaAcaoRemuneracao>();
			}

			for(Object[] valoresRemuneracao : colecaoValoresCobrancaAdministrativa){

				resumoCobrancaAcaoRemuneracao = new ResumoCobrancaAcaoRemuneracao();
				resumoCobrancaAcaoRemuneracao.setResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventual);

				// Documento Tipo
				resumoCobrancaAcaoRemuneracao.setDocumentoTipo(new DocumentoTipo(Util.obterInteger(valoresRemuneracao[4].toString())));

				valorParaRemuneracao = BigDecimal.ZERO;
				percentualRemuneracao = BigDecimal.ZERO;

				// Caso o percentual de remuneração normal para o item esteja
				// preenchido
				if(valoresRemuneracao[5] != null && !valoresRemuneracao[5].toString().equals("")){

					// Percentual da Remuneração Normal
					percentualRemuneracao = new BigDecimal(valoresRemuneracao[5].toString());

					// Acumula o valor de remuneração correspondente
					if(valoresRemuneracao[0] != null && !valoresRemuneracao[0].toString().equals("")){

						// Valor da Remuneração Normal
						valorParaRemuneracao = new BigDecimal(valoresRemuneracao[0].toString());
					}
				}

				/*
				 * Caso o percentual de remuneração pela reincidência para o item
				 * esteja
				 * preenchido
				 */
				if(valoresRemuneracao[6] != null && !valoresRemuneracao[6].toString().equals("")){

					// Percentual da Remuneração Reincidência
					percentualRemuneracao = new BigDecimal(valoresRemuneracao[6].toString());

					// Acumula o valor de remuneração correspondente
					if(valoresRemuneracao[1] != null && !valoresRemuneracao[1].toString().equals("")){

						// Valor da Remuneração pela Reincidência
						valorParaRemuneracao = new BigDecimal(valoresRemuneracao[1].toString());
					}
				}

				/*
				 * Caso o percentual de remuneração para serviços especiais para o
				 * item
				 * esteja preenchido
				 */
				if(valoresRemuneracao[7] != null && !valoresRemuneracao[7].toString().equals("")){

					// Percentual da Remuneração Serviço Especial
					percentualRemuneracao = new BigDecimal(valoresRemuneracao[7].toString());

					// Acumula o valor de remuneração correspondente
					if(valoresRemuneracao[2] != null && !valoresRemuneracao[2].toString().equals("")){

						// Valor da Remuneração para Serviços Especiais
						valorParaRemuneracao = new BigDecimal(valoresRemuneracao[2].toString());
					}
				}

				/*
				 * Caso o percentual de remuneração para serviços de parcelamento
				 * para o
				 * item esteja preenchido
				 */
				if(valoresRemuneracao[8] != null && !valoresRemuneracao[8].toString().equals("")){

					// Percentual da Remuneração Parcelamento
					percentualRemuneracao = new BigDecimal(valoresRemuneracao[8].toString());

					// Acumula o valor de remuneração correspondente
					if(valoresRemuneracao[3] != null && !valoresRemuneracao[3].toString().equals("")){

						// Valor da Remuneração par serviços de Parcelamento
						valorParaRemuneracao = new BigDecimal(valoresRemuneracao[3].toString());
					}
				}

				// Percentual da Remuneração
				resumoCobrancaAcaoRemuneracao.setPercentualRemuneracao(percentualRemuneracao);

				// Busca um objeto ResumoCobrancaAcaoRemuneracao já existente na coleção
				resumoCobrancaAcaoRemuneracaoExistente = (ResumoCobrancaAcaoRemuneracao) Util.buscarObjetoNaColecao(
								colecaoResumoCobrancaAcaoRemuneracao, resumoCobrancaAcaoRemuneracao);

				if(resumoCobrancaAcaoRemuneracaoExistente == null){

					// Valor da Remuneração
					resumoCobrancaAcaoRemuneracao.setValorRemuneracao(valorParaRemuneracao);

					// Última Alteração
					resumoCobrancaAcaoRemuneracao.setUltimaAlteracao(new Date());

					// Insere o novo objeto ResumoCobrancaAcaoRemuneracao na coleção
					colecaoResumoCobrancaAcaoRemuneracao.add(resumoCobrancaAcaoRemuneracao);

				}else{

					// Valor da Remuneração
					resumoCobrancaAcaoRemuneracaoExistente.setValorRemuneracao(resumoCobrancaAcaoRemuneracaoExistente.getValorRemuneracao()
									.add(valorParaRemuneracao));

					// Última Alteração
					resumoCobrancaAcaoRemuneracaoExistente.setUltimaAlteracao(new Date());
				}
			}
		}
	}

	/**
	 * [UC0614] Gerar Resumo das Ações de Cobrança Eventuais.
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2012
	 */
	private void inserirOuAtualizarResumoCobrancaAcaoSituacao(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual,
					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper,
					HashMap<ResumoCobrancaAcaoEventual, Object[]> mapResumoCobrancaAcaoEventual) throws ControladorException{

		try{
			ResumoCobrancaAcaoSituacao resumoCobrancaAcaoSituacao = null;
			ResumoCobrancaAcaoSituacao resumoCobrancaAcaoSituacaoExistente = null;
			Collection<ResumoCobrancaAcaoSituacao> colecaoResumoCobrancaAcaoSituacao = null;

			// Consulta os dados de entrada que servirão para construir/atualizar a coleção de
			// ResumoCobrancaAcaoSituacao
			Collection<Object[]> colecaoSituacaoDebitoItensComandoEventual = repositorioCobranca
							.pesquisarSituacaoDebitoItensParaGeracaoResumoEventual(dadosCobrancaDocumentoHelper.getIdCobrancaDocumento());

			if(!Util.isVazioOrNulo(colecaoSituacaoDebitoItensComandoEventual)){

				// Recupera a coleção de ResumoCobrancaAcaoSituacao já existente
				Object[] retorno = mapResumoCobrancaAcaoEventual.get(resumoCobrancaAcaoEventual);
				if(retorno != null){
					colecaoResumoCobrancaAcaoSituacao = (Collection<ResumoCobrancaAcaoSituacao>) retorno[0];
				}
				if(colecaoResumoCobrancaAcaoSituacao == null){
					colecaoResumoCobrancaAcaoSituacao = new ArrayList<ResumoCobrancaAcaoSituacao>();
				}

				for(Object[] helperResumo : colecaoSituacaoDebitoItensComandoEventual){

					resumoCobrancaAcaoSituacao = new ResumoCobrancaAcaoSituacao();

					// Resumo das ações de cobrança eventual
					resumoCobrancaAcaoSituacao.setResumoCobrancaAcaoEventual(resumoCobrancaAcaoEventual);

					// Documento Tipo
					if(helperResumo[0] != null && !helperResumo[0].toString().equals("")){

						resumoCobrancaAcaoSituacao.setDocumentoTipo(new DocumentoTipo(Util.obterInteger(helperResumo[0].toString())));
					}

					// Cobrança Débito Situação
					if(helperResumo[3] != null && !helperResumo[3].toString().equals("")){

						resumoCobrancaAcaoSituacao.setCobrancaDebitoSituacao(new CobrancaDebitoSituacao(Util.obterInteger(helperResumo[3]
										.toString())));
					}

					// Busca um ResumoCobrancaAcaoSituacao existente
					resumoCobrancaAcaoSituacaoExistente = (ResumoCobrancaAcaoSituacao) Util.buscarObjetoNaColecao(
									colecaoResumoCobrancaAcaoSituacao, resumoCobrancaAcaoSituacao);

					// Se já existe um ResumoCobrancaAcaoSituacao, acumula as informações
					if(resumoCobrancaAcaoSituacaoExistente == null){

						// Quantidade de Documentos
						if(helperResumo[1] != null && !helperResumo[1].toString().equals("")){

							resumoCobrancaAcaoSituacao.setQuantidadeDocumentos(Util.obterInteger(helperResumo[1].toString()));
						}else{

							resumoCobrancaAcaoSituacao.setQuantidadeDocumentos(0);
						}

						// Valor dos Documentos
						if(helperResumo[2] != null && !helperResumo[2].toString().equals("")){

							resumoCobrancaAcaoSituacao.setValorDocumentos(new BigDecimal(helperResumo[2].toString()));
						}else{

							resumoCobrancaAcaoSituacao.setValorDocumentos(BigDecimal.ZERO);
						}

						// Última Alteração
						resumoCobrancaAcaoSituacao.setUltimaAlteracao(new Date());

						// Adiciona o novo ResumoCobrancaAcaoSituacao à coleção
						colecaoResumoCobrancaAcaoSituacao.add(resumoCobrancaAcaoSituacao);

					}else{

						// Quantidade de Documentos
						if(helperResumo[1] != null && !helperResumo[1].toString().equals("")){

							resumoCobrancaAcaoSituacaoExistente.setQuantidadeDocumentos(resumoCobrancaAcaoSituacaoExistente
											.getQuantidadeDocumentos().intValue()
											+ Util.obterInteger(helperResumo[1].toString()).intValue());
						}else{

							resumoCobrancaAcaoSituacaoExistente.setQuantidadeDocumentos(0);
						}

						// Valor dos Documentos
						if(helperResumo[2] != null && !helperResumo[2].toString().equals("")){

							resumoCobrancaAcaoSituacaoExistente.setValorDocumentos(resumoCobrancaAcaoSituacaoExistente.getValorDocumentos()
											.add(new BigDecimal(helperResumo[2].toString())));
						}else{

							resumoCobrancaAcaoSituacaoExistente.setValorDocumentos(BigDecimal.ZERO);
						}

						// Última Alteração
						resumoCobrancaAcaoSituacaoExistente.setUltimaAlteracao(new Date());
					}
				}
			}

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Retorna a lista de ids de contas em cobrança administrativa de um imóvel onde não existe
	 * ocorrência da empresa passada como parametro
	 * 
	 * @author Hugo Lima
	 * @date 15/08/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer> obterIdsContasCobrancaAdministrativaEmpresaDiferente(Integer idEmpresa, Integer idImovel)
					throws ControladorException{

		try{
			return repositorioCobranca.obterIdsContasCobrancaAdministrativaEmpresaDiferente(idEmpresa, idImovel);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Obter os Ids de parcelamento feitos por usuario não pertencentes a empresa passada no
	 * parametro
	 * 
	 * @author Hugo Lima
	 * @data 15/08/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer> obterIdsParcelamentoEmpresaDiferente(Integer idEmpresa, Integer idImovel) throws ControladorException{

		try{
			return repositorioCobranca.obterIdsParcelamentoEmpresaDiferente(idEmpresa, idImovel);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0252] Consultar Parcelamentos de Débitos
	 * [SB0003] - Validar autorização de acesso ao imóvel em cobrança administrativa pelos usuários
	 * da empresa contratante
	 * 
	 * @author Hugo Lima
	 * @date 23/08/2012
	 */
	public Collection<DebitoACobrar> pesquisarItensDebitosACobrarPorParcelamento(Integer idParcelamento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarItensDebitosACobrarPorParcelamento(idParcelamento);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}



	/**
	 * [UC3068] Gerar Aviso Corte Faturamento
	 * 
	 * @author Hebert Falcão
	 * @date 26/08/2012
	 */
	public void gerarAvisoCorteFaturamento(Collection<FaturamentoAtivCronRota> colecaoFaturamentoAtivCronRota,
					Integer anoMesFaturamentoGrupo, FaturamentoGrupo faturamentoGrupo, Integer idFuncionalidadeIniciada,
					FaturamentoAtividade faturamentoAtividade, FaturamentoGrupoCronogramaMensal faturamentoGrupoCronogramaMensal,
					Integer idProcessoIniciado) throws ControladorException{

		FaturamentoAtivCronRota faturamentoAtivCronRota = (FaturamentoAtivCronRota) Util
						.retonarObjetoDeColecao(colecaoFaturamentoAtivCronRota);
		Rota rota = faturamentoAtivCronRota.getRota();
		Integer idRota = rota.getId();

		int idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada, UnidadeProcessamento.ROTA,
						idRota);

		try{
			boolean executouComErro = false;

			boolean naoProcessar = false;

			boolean isFaturamentoImediato = true;

			FiltroProcessoIniciado filtroProcessoIniciadoAux = new FiltroProcessoIniciado();
			filtroProcessoIniciadoAux.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.ID, idProcessoIniciado));

			Collection<ProcessoIniciado> colecaoProcessoIniciadoAux = this.getControladorUtil().pesquisar(filtroProcessoIniciadoAux,
							ProcessoIniciado.class.getName());

			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(FiltroRota.ID_ROTA, idRota));

			Collection<Rota> colecaoRota = this.getControladorUtil().pesquisar(filtroRota, Rota.class.getName());

			if(!Util.isVazioOrNulo(colecaoProcessoIniciadoAux) && !Util.isVazioOrNulo(colecaoRota)){
				ProcessoIniciado processoIniciado = (ProcessoIniciado) Util.retonarObjetoDeColecao(colecaoProcessoIniciadoAux);

				Processo processo = processoIniciado.getProcesso();

				if(processo != null){
					Integer idProcesso = processo.getId();

					rota = (Rota) Util.retonarObjetoDeColecao(colecaoRota);

					LeituraTipo leituraTipo = rota.getLeituraTipo();

					if(idProcesso.equals(Processo.FATURAR_GRUPO_FATURAMENTO)){

						isFaturamentoImediato = false;
					}

					if(leituraTipo != null){
						Integer idLeituraTipo = leituraTipo.getId();

						if((idProcesso.equals(Processo.GERAR_DADOS_PARA_LEITURA) && idLeituraTipo.equals(LeituraTipo.CONVENCIONAL))
										|| (idProcesso.equals(Processo.FATURAR_GRUPO_FATURAMENTO) && idLeituraTipo
														.equals(LeituraTipo.LEITURA_E_ENTRADA_SIMULTANEA))){
							naoProcessar = true;
						}
					}
				}
			}

			if(!naoProcessar){
				Integer idProcessoCobrancaComandado = null;

				Integer idFaturamentoGrupo = faturamentoGrupo.getId();

				Integer idCobrancaAcaoAtividadeComando = null;

				// Título da ação eventual
				String titulo = "AVISO CORTE PARA FATURAMENTO DO MÊS " + anoMesFaturamentoGrupo + " DO GRUPO DE FATURAMENTO "
								+ idFaturamentoGrupo;

				// Verifica se já foi processado
				FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.DESCRICAO_TITULO, titulo));

				Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil().pesquisar(
								filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName());

				if(Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando)){
					// [UC0243] - Inserir Comando de Ação de Cobrança

					// Conteúdo da solicitação
					String descricaoSolicitacao = "AVISO CORTE PARA FATURAMENTO DO MÊS " + anoMesFaturamentoGrupo
									+ " DO GRUPO DE FATURAMENTO " + idFaturamentoGrupo;

					// Ação de Cobrança
					String[] cobrancaAcaoSelecionada = new String[] {CobrancaAcao.AVISO_CORTE.toString()};

					// Atividade de Cobrança
					String cobrancaAtividade = CobrancaAtividade.EMITIR.toString();

					// Prazo de Execução
					CobrancaAcao cobrancaAcao = null;
					String prazoExecucao = null;

					FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, CobrancaAcao.AVISO_CORTE));

					Collection<CobrancaAcao> colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao,
									CobrancaAcao.class.getName());

					if(!Util.isVazioOrNulo(colecaoCobrancaAcao)){
						cobrancaAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
						Short qtdDiasRealizacao = cobrancaAcao.getQtdDiasRealizacao();

						if(qtdDiasRealizacao != null){
							prazoExecucao = Integer.toString(qtdDiasRealizacao);
						}
					}

					// Indicador "Apenas para Imóveis com Débito"
					String indicadorImoveisDebito = Short.toString(ConstantesSistema.SIM);

					// Indicador "Emissão de Boletim de Cadastro"
					String indicadorGerarBoletimCadastro = Short.toString(ConstantesSistema.NAO);

					// Valor limite para emissão obrigatória
					String pValorLimiteEmissao = ParametroCobranca.P_FATOR_MULTIPLICACAO_VALOR_DEBITO_AVISO_CORTE.executar();

					// Id do usuário que efetuou a inclusão do comando
					Usuario usuario = null;

					String pUsuarioBatch = ParametroGeral.P_USUARIO_BATCH.executar();

					if(!Util.isVazioOuBranco(pUsuarioBatch)){
						FiltroUsuario filtroUsuario = new FiltroUsuario();
						filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.ID, Util.obterInteger(pUsuarioBatch)));

						Collection<Usuario> colecaoUsuario = this.getControladorUtil().pesquisar(filtroUsuario, Usuario.class.getName());

						if(!Util.isVazioOrNulo(colecaoUsuario)){
							usuario = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);
						}
					}

					// Indicador do criterio / Critério de Cobrança
					String indicadorCriterioComando = ConstantesSistema.INDICADOR_CRITERIO_COMANDO;

					CobrancaCriterio cobrancaCriterio = null;

					if(cobrancaAcao != null){
						cobrancaCriterio = cobrancaAcao.getCobrancaCriterio();

						if(cobrancaCriterio != null){
							String pIdCriterioCobranca = ParametroCobranca.P_ID_CRITERIO_COBRANCA_AVISO_CORTE_FATURAMENTO.executar();
							String idCriterioCobranca = Integer.toString(cobrancaCriterio.getId());

							if(pIdCriterioCobranca.equals(idCriterioCobranca)){
								indicadorCriterioComando = ConstantesSistema.INDICADOR_CRITERIO_ACAO;

								cobrancaCriterio = null;
							}else{
								FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
								filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(FiltroCobrancaCriterio.ID,
												pIdCriterioCobranca));

								Collection<CobrancaCriterio> colecaoCobrancaCriterio = this.getControladorUtil().pesquisar(
												filtroCobrancaCriterio, CobrancaCriterio.class.getName());

								if(!Util.isVazioOrNulo(colecaoCobrancaCriterio)){
									cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(colecaoCobrancaCriterio);
								}else{
									cobrancaCriterio = null;
								}
							}
						}
					}

					// Arquivo de Imóveis
					byte[] arquivo = null;
					Collection<Integer> colecaoImoveisFaturadosOuPreFaturadosNoGrupo = null;

					if(isFaturamentoImediato){

						colecaoImoveisFaturadosOuPreFaturadosNoGrupo = this.getControladorMicromedicao()
									.pesquisarImoveisFaturadosOuPreFaturadosNoGrupo(idFaturamentoGrupo, anoMesFaturamentoGrupo);
					}else{

						colecaoImoveisFaturadosOuPreFaturadosNoGrupo = repositorioCobranca.pesquisarMatriculasImoveisFaturadosPorGrupo(
										idFaturamentoGrupo, anoMesFaturamentoGrupo);
					}

					if(!Util.isVazioOrNulo(colecaoImoveisFaturadosOuPreFaturadosNoGrupo)){
						StringBuilder arquivoSB = new StringBuilder();

						for(Integer idImovel : colecaoImoveisFaturadosOuPreFaturadosNoGrupo){
							arquivoSB.append(idImovel);
							arquivoSB.append(System.getProperty("line.separator"));
						}

						arquivo = String.valueOf(arquivoSB).getBytes();

						// Gerar Relação dos Documentos
						String indicadorGerarRelacaoDocumento = Short.toString(ConstantesSistema.SIM);

						Collection<Integer> colecaoCobrancaAcaoAtividadeComandoId = this.concluirComandoAcaoCobranca(null, null, null,
										null, cobrancaAcaoSelecionada, cobrancaAtividade, null, null, null, null, null, null, null, null,
										indicadorCriterioComando, null, null, null, null, null, null, null, null, usuario, titulo,
										descricaoSolicitacao, prazoExecucao, null, indicadorImoveisDebito, indicadorGerarBoletimCadastro,
										null, null, pValorLimiteEmissao, arquivo, null, null, cobrancaCriterio,
										indicadorGerarRelacaoDocumento, null, null);

						// [UC0251] - Gerar Atividade de Ação de Cobrança
						Collection<Integer> idsProcessosCobrancaCronograma = new ArrayList();

						Collection<Integer> idsProcessosCobrancaEventual = new ArrayList();

						if(!Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComandoId)){
							idCobrancaAcaoAtividadeComando = (Integer) Util.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComandoId);

							idsProcessosCobrancaEventual.add(idCobrancaAcaoAtividadeComando);
						}

						Integer idFaturamentoGrupoCronogramaMensal = null;

						if(faturamentoGrupoCronogramaMensal != null){
							idFaturamentoGrupoCronogramaMensal = faturamentoGrupoCronogramaMensal.getId();
						}

						idProcessoCobrancaComandado = this.getControladorBatch().inserirProcessoIniciadoCobrancaComandado(
										idsProcessosCobrancaCronograma, idsProcessosCobrancaEventual, null, usuario, idProcessoIniciado,
										idFaturamentoGrupoCronogramaMensal);
					}else{
						// [FS0001] - Verificar seleção de imóveis
						LOGGER.warn("Nenhum imóvel foi selecionado para a geração do aviso de corte no faturamento.");
					}
				}else{
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util
									.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComando);
					idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando.getId();

					Integer idFuncionalidadeIniciadaCobrancaComandado = null;

					Collection<FuncionalidadeIniciada> colecaoFuncionalidadeIniciada = this.getControladorBatch()
									.pesquisarFuncionalidadeIniciadaPeloProcessoVinculado(idProcessoIniciado);

					if(!Util.isVazioOrNulo(colecaoFuncionalidadeIniciada)){
						ProcessoIniciado processoIniciado = null;
						FuncionalidadeSituacao funcionalidadeSituacao = null;

						Integer idFuncionalidadeSituacao = null;

						for(FuncionalidadeIniciada funcionalidadeIniciada : colecaoFuncionalidadeIniciada){
							funcionalidadeSituacao = funcionalidadeIniciada.getFuncionalidadeSituacao();
							idFuncionalidadeSituacao = funcionalidadeSituacao.getId();

							if(idFuncionalidadeSituacao != null
											&& (idFuncionalidadeSituacao == FuncionalidadeSituacao.CONCLUIDA_COM_ERRO || idFuncionalidadeSituacao == FuncionalidadeSituacao.EXECUCAO_CANCELADA
															.intValue())){
								idFuncionalidadeIniciadaCobrancaComandado = funcionalidadeIniciada.getId();

								processoIniciado = funcionalidadeIniciada.getProcessoIniciado();
								idProcessoCobrancaComandado = processoIniciado.getId();

								break;
							}
						}
					}

					if(idFuncionalidadeIniciadaCobrancaComandado != null){
						this.getControladorBatch().reiniciarFuncionalidadesIniciadas(
										new String[] {Integer.toString(idFuncionalidadeIniciadaCobrancaComandado)},
										idProcessoCobrancaComandado);
					}else{
						LOGGER.warn("Não foi possível reiniciar o processo " + idProcessoIniciado);
					}
				}

				if(idProcessoCobrancaComandado != null){
					FiltroProcessoIniciado filtroProcessoIniciado = new FiltroProcessoIniciado();
					filtroProcessoIniciado.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.ID, idProcessoCobrancaComandado));

					String tempoVerificadorStr = "60";

					if(!Util.isVazioOuBranco(ConstantesConfig.getTempoVerificador())){
						tempoVerificadorStr = ConstantesConfig.getTempoVerificador();
					}

					int tempoVerificador = new Integer(tempoVerificadorStr) * 1000;

					Collection<ProcessoIniciado> colecaoProcessoIniciado = null;

					ProcessoIniciado processoIniciado = null;

					ProcessoSituacao processoSituacao = null;

					Integer idProcessoSituacao = null;

					FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtivComando = null;
					CobrancaAcaoAtividadeComando comando = null;

					while(true){
						colecaoProcessoIniciado = this.getControladorUtil().pesquisar(filtroProcessoIniciado,
										ProcessoIniciado.class.getName());

						processoIniciado = (ProcessoIniciado) Util.retonarObjetoDeColecao(colecaoProcessoIniciado);
						processoSituacao = processoIniciado.getProcessoSituacao();
						idProcessoSituacao = processoSituacao.getId();

						if(ProcessoSituacao.CONCLUIDO == idProcessoSituacao){
							LOGGER.warn("*#*#*#* Processo " + idProcessoCobrancaComandado + ", referente ao Comando de Cobrança "
											+ idCobrancaAcaoAtividadeComando + ", finalizado em "
											+ processoIniciado.getDataHoraTermino() + ".");

							filtroCobrancaAcaoAtivComando = new FiltroCobrancaAcaoAtividadeComando();
							filtroCobrancaAcaoAtivComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID,
											idCobrancaAcaoAtividadeComando));

							comando = (CobrancaAcaoAtividadeComando) Util
											.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroCobrancaAcaoAtivComando,
															CobrancaAcaoAtividadeComando.class.getName()));

							// Verifica se a data de realização do comando de atividade de ação de
							// cobrança já foi preenchida.
							if(comando.getRealizacao() != null){

								LOGGER.warn("*#*#*#* Comando " + idCobrancaAcaoAtividadeComando + " realizado em "
												+ comando.getRealizacao() + ". O processo de Faturamento será retomado.");

								break;
							}else{

								LOGGER.warn("*#*#*#* O processo  " + idProcessoCobrancaComandado
												+ " foi concluído, mas o Comando de Cobrança " + idCobrancaAcaoAtividadeComando
												+ " não foi finalizado. Possível atraso no Commit de transações.");
							}

						}else if(ProcessoSituacao.CONCLUIDO_COM_ERRO == idProcessoSituacao){
							executouComErro = true;

							break;
						}

						LOGGER.warn("Aguardando o processo " + idProcessoCobrancaComandado + " (comando de cobrança "
										+ idCobrancaAcaoAtividadeComando + ") finalizar.");

						Thread.currentThread().sleep(tempoVerificador);
					}
				}

				if(!executouComErro && idCobrancaAcaoAtividadeComando != null && isFaturamentoImediato){
					FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
					filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(
									FiltroCobrancaDocumento.ID_COBRANCA_ACAO_ATIVIDADE_COMANDO, idCobrancaAcaoAtividadeComando));

					Collection<CobrancaDocumento> colecaoCobrancaDocumento = this.getControladorUtil().pesquisar(filtroCobrancaDocumento,
									CobrancaDocumento.class.getName());

					if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
						LOGGER.warn("*#*#*#* Quantidade de documentos do comando " + idCobrancaAcaoAtividadeComando + ": "
										+ colecaoCobrancaDocumento.size() + ".");

						Imovel imovel = null;

						Integer idImovel = null;
						Integer numeroDocumentoCobranca = null;

						FiltroMovimentoRoteiroEmpresa filtroMovimentoRoteiroEmpresa = null;

						Collection<MovimentoRoteiroEmpresa> colecaoMovimentoRoteiroEmpresa = null;
						Collection colecaoMovimentoRoteiroEmpresaAtualizar = new ArrayList();

						for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
							imovel = cobrancaDocumento.getImovel();

							if(imovel != null){
								numeroDocumentoCobranca = cobrancaDocumento.getNumeroSequenciaDocumento();
								idImovel = imovel.getId();

								filtroMovimentoRoteiroEmpresa = new FiltroMovimentoRoteiroEmpresa();
								filtroMovimentoRoteiroEmpresa.adicionarParametro(new ParametroSimples(
												FiltroMovimentoRoteiroEmpresa.FATURAMENTO_GRUPO_ID, idFaturamentoGrupo));
								filtroMovimentoRoteiroEmpresa.adicionarParametro(new ParametroSimples(
												FiltroMovimentoRoteiroEmpresa.ANO_MES_MOVIMENTO, anoMesFaturamentoGrupo));
								filtroMovimentoRoteiroEmpresa.adicionarParametro(new ParametroSimples(
												FiltroMovimentoRoteiroEmpresa.IMOVEL_ID, idImovel));

								colecaoMovimentoRoteiroEmpresa = this.getControladorUtil().pesquisar(filtroMovimentoRoteiroEmpresa,
												MovimentoRoteiroEmpresa.class.getName());

								if(!Util.isVazioOrNulo(colecaoMovimentoRoteiroEmpresa)){
									for(MovimentoRoteiroEmpresa movimentoRoteiroEmpresa : colecaoMovimentoRoteiroEmpresa){
										movimentoRoteiroEmpresa.setNumeroDocumentoCobranca(numeroDocumentoCobranca);
										movimentoRoteiroEmpresa.setUltimaAlteracao(new Date());

										colecaoMovimentoRoteiroEmpresaAtualizar.add(movimentoRoteiroEmpresa);
									}
								}else{
									LOGGER.error("*#*#*#* Não existe um MovimentoRoteiroEmpresa " + idImovel);
								}
							}
						}

						if(!Util.isVazioOrNulo(colecaoMovimentoRoteiroEmpresaAtualizar)){
							LOGGER.warn("*#*#*#* Quantidade de movimentos do comando " + idCobrancaAcaoAtividadeComando + ": "
											+ colecaoMovimentoRoteiroEmpresaAtualizar.size() + ".");

							this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoMovimentoRoteiroEmpresaAtualizar);
						}
					}else{
						// [FS0003] - Verificar seleção de avisos de corte
						LOGGER.warn("Nenhum aviso de corte foi gerado para o comando " + idCobrancaAcaoAtividadeComando);
					}
				}
			}

			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, executouComErro);
		}catch(Exception e){
			e.printStackTrace();
			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	/**
	 * [UC0617] Consultar Resumo das Ações de Cobrança Eventuais
	 * 4.2.1.5.6. Para cada percentual de remuneração (o percentual de remuneração
	 * 
	 * @author Josenildo Neves
	 * @date 31/08/2012
	 */
	public List<ResumoCobrancaAcaoRemuneracaoHelper> consultarCobrancaAcaoRemuneracao(Integer idCobrancaAcao,
					Integer idCobrancaAcaoSituacao,
					InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventualHelper)
					throws ControladorException{

		List<ResumoCobrancaAcaoRemuneracaoHelper> listaResumoCobrancaAcaoRemuneracaoHelper = null;

		try{

			listaResumoCobrancaAcaoRemuneracaoHelper = repositorioCobranca.consultarCobrancaAcaoRemuneracao(idCobrancaAcao,
							idCobrancaAcaoSituacao, informarDadosGeracaoResumoAcaoConsultaEventualHelper);

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);

		}

		return listaResumoCobrancaAcaoRemuneracaoHelper;
	}

	// =======================================================================================================

	/**
	 * Cosulta o total de remunerações de cobrança administrativa que atendam ao filtro informado.
	 * 
	 * @param parametro
	 *            {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return
	 */
	public int consultarQuantidadeRemuneracaoCobrancaAdministrativa(
					RelatorioRemuneracaoCobrancaAdministrativaHelper remuneracaoCobrancaAdministrativaHelper) throws ControladorException,
					NegocioException{

		try{
			validarCamposObrigatoriosHelperRemuneracaoCobrancaAdministrativa(remuneracaoCobrancaAdministrativaHelper);

			return repositorioCobranca.consultarQuantidadeRemuneracaoCobrancaAdministrativa(remuneracaoCobrancaAdministrativaHelper);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Valida o {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param helper
	 * @throws NegocioException
	 */
	public void validarCamposObrigatoriosHelperRemuneracaoCobrancaAdministrativa(RelatorioRemuneracaoCobrancaAdministrativaHelper helper)
					throws ControladorException, NegocioException{

		if(helper == null){
			throw new IllegalStateException("Filtro do Relatório de Remuneração de Cobrança Administrativa não pode ser NULL.");
		}

		if(helper.getPeriodoPagamentoInicial() == null || helper.getPeriodoPagamentoFinal() == null){
			throw new NegocioException(Constantes.RESOURCE_BUNDLE, "atencao.required", new String[] {"Periodo Pagamento"});
		}

		if(helper.getPeriodoPagamentoInicial().compareTo(helper.getPeriodoPagamentoFinal()) > 0){
			throw new NegocioException(Constantes.RESOURCE_BUNDLE, "atencao.data_fim_menor_inicio");
		}
	}

	/**
	 * Consulta os dados de remuneração de cobrança administrativa filtrados pelo
	 * {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param helper
	 * @return {@link List} de {@link RelatorioRemuneracaoCobrancaAdministrativaBean}
	 */
	public List<RelatorioRemuneracaoCobrancaAdministrativaBean> consultarDadosRemuneracaoCobrancaAdministrativa(
					RelatorioRemuneracaoCobrancaAdministrativaHelper helper) throws ControladorException, NegocioException{

		validarCamposObrigatoriosHelperRemuneracaoCobrancaAdministrativa(helper);
		int qtdTotalRegistros = consultarQuantidadeRemuneracaoCobrancaAdministrativa(helper);

		if(qtdTotalRegistros == 0){
			throw new ControladorException("atencao.pesquisa.nenhumresultado");
		}

		List<RelatorioRemuneracaoCobrancaAdministrativaBean> dadosConsolidados = new ArrayList<RelatorioRemuneracaoCobrancaAdministrativaBean>();

		Collection<Object[]> dadosConsulta;
		try{
			dadosConsulta = repositorioCobranca.consultarDadosRemuneracaoCobrancaAdministrativa(helper);

			int ICAI_DTPAGAMENTODOCUMENTO = 0;
			int LOCA_ID = 1;
			int STCM_CDSETORCOMERCIAL = 2;
			int IMOV_ID = 3;
			int CNTA_ID = 4;
			int GPAG_ID = 5;
			int ICAI_PCREMUNERACAO = 6;
			int ICAI_PCREMUNERACAOESPEC = 7;
			int ICAI_PCREMUNERACAOPARCEL = 8;
			int ICAI_PCREMUNERACAOREINCID = 9;
			int ICAI_VLREMUNERACAO = 10;
			int ICAI_VLREMUNERACAOESPEC = 11;
			int ICAI_VLREMUNERACAOPARCEL = 12;
			int ICAI_VLREMUNERACAOREINCID = 13;
			int DBAC_ID = 14;
			int ICAI_VLBASEREMUNERACAO = 15;
			int ICAI_VLBASEREMUNERACAOESPEC = 16;
			int ICAI_VLBASEREMUNERACAOPARCEL = 17;
			int ICAI_VLBASEREMUNERACAOREINCID = 18;
			int ICAI_NNPRESTACAO = 19;
			int ICAI_ICREMUNERACAOPAGA = 20;
			int ICAI_ID = 21;

			BigDecimal valorRemuneracao = null;
			BigDecimal valorRemuneracaoEspecial = null;
			BigDecimal valorRemuneracaoParcelamento = null;

			String refContaPrestacao = null;
			BigDecimal valorTotalDebito = null;
			BigDecimal valorTotalServicosEspeciais = null;
			BigDecimal valorTotalServicosParcelamento = null;
			BigDecimal valorTotalDebitoSemServicosEspeciaisParcelamento = null;

			Short situacaoRemuneracaoShort = null;
			String situacaoRemuneracao = null;

			BigDecimal padraoPercentual = null;
			BigDecimal padraoValor = null;
			BigDecimal servicosEspeciaisPercentual = null;
			BigDecimal servicosEspeciaisValor = null;
			BigDecimal parcelamentoPercentual = null;
			BigDecimal parcelamentoValor = null;
			BigDecimal reincidenciaPercentual = null;
			BigDecimal reincidenciaValor = null;
			BigDecimal valorTotalRemuneracao = null;

			Integer idDebitoACobrarGeral = null;

			FiltroDebitoACobrarHistorico filtroDebitoACobrarHistorico = null;
			Collection<DebitoACobrarHistorico> colecaoDebitoACobrarHistorico = null;
			DebitoACobrarHistorico debitoACobrarHistorico = null;

			FiltroDebitoACobrar filtroDebitoACobrar = null;
			Collection<DebitoACobrar> colecaoDebitoACobrar = null;
			DebitoACobrar debitoACobrar = null;

			Integer anoMesReferenciaDebito = null;
			DebitoTipo debitoTipo = null;
			Integer idDebitoTipo = null;

			String indicadorConfirmaPagamento = null;
			Integer idImovelCobrancaAdministrivaItem = null;

			FiltroImovelCobrancaAdministrivaItem filtroImovelCobrancaAdministrivaItem = null;
			Collection<ImovelCobrancaAdministrivaItem> colecaoImovelCobrancaAdministrivaItem = null;

			Collection colecaoAtualizarImovelCobrancaAdministrivaItem = new ArrayList();

			for(Object[] resultObj : dadosConsulta){
				valorRemuneracaoEspecial = BigDecimal.ZERO;
				valorTotalServicosEspeciais = BigDecimal.ZERO;

				valorRemuneracaoParcelamento = BigDecimal.ZERO;
				valorTotalServicosParcelamento = BigDecimal.ZERO;

				reincidenciaValor = BigDecimal.ZERO;
				valorTotalDebitoSemServicosEspeciaisParcelamento = BigDecimal.ZERO;

				situacaoRemuneracaoShort = null;
				situacaoRemuneracao = "";

				valorRemuneracao = BigDecimal.ZERO;

				refContaPrestacao = "";
				valorTotalDebito = BigDecimal.ZERO;

				anoMesReferenciaDebito = null;
				idDebitoTipo = null;

				padraoPercentual = BigDecimal.ZERO;
				padraoValor = BigDecimal.ZERO;

				servicosEspeciaisPercentual = BigDecimal.ZERO;
				servicosEspeciaisValor = BigDecimal.ZERO;

				parcelamentoPercentual = BigDecimal.ZERO;
				parcelamentoValor = BigDecimal.ZERO;

				reincidenciaPercentual = BigDecimal.ZERO;

				valorTotalRemuneracao = BigDecimal.ZERO;

				// LINHA 01 - ADIMPLENTES - SERV.REMUNERAÇÃO
				valorRemuneracaoEspecial = (BigDecimal) resultObj[ICAI_VLREMUNERACAOESPEC];

				if((valorRemuneracaoEspecial != null) && (valorRemuneracaoEspecial.compareTo(BigDecimal.ZERO) > 0)){
					valorTotalServicosEspeciais = recuperarValor(ICAI_VLBASEREMUNERACAOESPEC, ICAI_VLBASEREMUNERACAOESPEC, resultObj);
				}

				// LINHA 01 - ADIMPLENTES - SERV.PARCELAMENTO
				valorRemuneracaoParcelamento = (BigDecimal) resultObj[ICAI_VLREMUNERACAOPARCEL];

				if((valorRemuneracaoParcelamento != null) && (valorRemuneracaoParcelamento.compareTo(BigDecimal.ZERO) > 0)){
					valorTotalServicosParcelamento = recuperarValor(ICAI_VLBASEREMUNERACAOPARCEL, ICAI_VLBASEREMUNERACAOPARCEL, resultObj);
				}

				// LINHA 02 - Valor remunerado pelo percentual por reincidência
				reincidenciaValor = recuperarValor(ICAI_VLREMUNERACAOREINCID, ICAI_VLREMUNERACAOREINCID, resultObj);

				if((reincidenciaValor != null) && (reincidenciaValor.compareTo(BigDecimal.ZERO) > 0)){
					// LINHA 01 - ADIMPLENTES - +15 DIAS ATRASO
					valorTotalDebitoSemServicosEspeciaisParcelamento = recuperarValor(ICAI_VLBASEREMUNERACAOREINCID,
									ICAI_VLBASEREMUNERACAOREINCID, resultObj);
				}

				// LINHA 01 - SIT.
				situacaoRemuneracaoShort = (Short) resultObj[ICAI_ICREMUNERACAOPAGA];

				if(situacaoRemuneracaoShort != null){
					if(situacaoRemuneracaoShort.equals(new Short("1"))){
						situacaoRemuneracao = "PAGA";
					}else if(situacaoRemuneracaoShort.equals(new Short("2"))){
						situacaoRemuneracao = "NÃO PAGA";

						indicadorConfirmaPagamento = helper.getIndicadorConfirmaPagamento();

						if(indicadorConfirmaPagamento.equals("1")){
							idImovelCobrancaAdministrivaItem = (Integer) resultObj[ICAI_ID];

							if(idImovelCobrancaAdministrivaItem != null){
								filtroImovelCobrancaAdministrivaItem = new FiltroImovelCobrancaAdministrivaItem();
								filtroImovelCobrancaAdministrivaItem.adicionarParametro(new ParametroSimples(
												FiltroImovelCobrancaAdministrivaItem.ID, idImovelCobrancaAdministrivaItem));

								colecaoImovelCobrancaAdministrivaItem = this.getControladorUtil().pesquisar(
												filtroImovelCobrancaAdministrivaItem, ImovelCobrancaAdministrivaItem.class.getName());

								if(!Util.isVazioOrNulo(colecaoImovelCobrancaAdministrivaItem)){
									for(ImovelCobrancaAdministrivaItem imovelCobrancaAdministrivaItem : colecaoImovelCobrancaAdministrivaItem){
										imovelCobrancaAdministrivaItem.setIndicadorRemuneracaoPaga(ConstantesSistema.SIM);
										imovelCobrancaAdministrivaItem.setDataPagamentoRemuneracao(new Date());
										imovelCobrancaAdministrivaItem.setUltimaAlteracao(new Date());

										colecaoAtualizarImovelCobrancaAdministrivaItem.add(imovelCobrancaAdministrivaItem);
									}
								}
							}
						}
					}
				}

				valorRemuneracao = (BigDecimal) resultObj[ICAI_VLREMUNERACAO];

				if(resultObj[CNTA_ID] != null){
					Object[] resultadoConta = repositorioCobranca.consultarContaRemuneracaoCobrancaAdministrativa(
									(Integer) resultObj[CNTA_ID], valorRemuneracao);

					if(!Util.isVazioOrNulo(resultadoConta)){
						// Posição das informações retornadas na consulta
						int CNHI_AMREFERENCIACONTA = 0;

						// LINHA 01 -
						refContaPrestacao = Util.formatarAnoMesParaMesAno((Integer) resultadoConta[CNHI_AMREFERENCIACONTA]);

						if((valorRemuneracao != null) && (valorRemuneracao.compareTo(BigDecimal.ZERO) > 0)){
							// LINHA 01 - INADIMPLENTE - VALOR CONTA ou VALOR GUIA ou VALOR DÉBITO A
							// COBRAR
							valorTotalDebito = recuperarValor(ICAI_VLBASEREMUNERACAO, ICAI_VLBASEREMUNERACAO, resultObj);
						}
					}
				}else if(resultObj[GPAG_ID] != null && resultObj[ICAI_NNPRESTACAO] != null){
					Object[] resultadoGuia = repositorioCobranca.consultarGuiaPagamentoRemuneracaoCobrancaAdministrativa(
									(Integer) resultObj[GPAG_ID], valorRemuneracao, (Integer) resultObj[ICAI_NNPRESTACAO]);

					if(!Util.isVazioOrNulo(resultadoGuia)){
						// Posição das informações retornadas na consulta
						int GPPH_NNPRESTACAO = 0;

						// LINHA 01 -
						refContaPrestacao = resultObj[GPAG_ID] + "/" + resultadoGuia[GPPH_NNPRESTACAO];

						if((valorRemuneracao != null) && (valorRemuneracao.compareTo(BigDecimal.ZERO) > 0)){
							// LINHA 01 - INADIMPLENTE - VALOR CONTA ou VALOR GUIA ou VALOR DÉBITO A
							// COBRAR
							valorTotalDebito = recuperarValor(ICAI_VLBASEREMUNERACAO, ICAI_VLBASEREMUNERACAO, resultObj);
						}
					}
				}else if(resultObj[DBAC_ID] != null){
					idDebitoACobrarGeral = (Integer) resultObj[DBAC_ID];

					filtroDebitoACobrarHistorico = new FiltroDebitoACobrarHistorico();
					filtroDebitoACobrarHistorico.adicionarParametro(new ParametroSimples(FiltroDebitoACobrarHistorico.ID,
									idDebitoACobrarGeral));

					colecaoDebitoACobrarHistorico = this.getControladorUtil().pesquisar(filtroDebitoACobrarHistorico,
									DebitoACobrarHistorico.class.getName());

					if(!Util.isVazioOrNulo(colecaoDebitoACobrarHistorico)){
						debitoACobrarHistorico = (DebitoACobrarHistorico) Util.retonarObjetoDeColecao(colecaoDebitoACobrarHistorico);

						anoMesReferenciaDebito = debitoACobrarHistorico.getAnoMesReferenciaDebito();

						debitoTipo = debitoACobrarHistorico.getDebitoTipo();

					}else{
						filtroDebitoACobrar = new FiltroDebitoACobrar();
						filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, idDebitoACobrarGeral));

						colecaoDebitoACobrar = this.getControladorUtil().pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

						if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){
							debitoACobrar = (DebitoACobrar) Util.retonarObjetoDeColecao(colecaoDebitoACobrar);

							anoMesReferenciaDebito = debitoACobrar.getAnoMesReferenciaDebito();

							debitoTipo = debitoACobrar.getDebitoTipo();
						}
					}

					if(anoMesReferenciaDebito != null && debitoTipo != null){
						idDebitoTipo = debitoTipo.getId();

						// LINHA 01 -
						refContaPrestacao = Util.formatarAnoMesParaMesAno(anoMesReferenciaDebito) + " - " + idDebitoTipo;

						if((valorRemuneracao != null) && (valorRemuneracao.compareTo(BigDecimal.ZERO) > 0)){
							// LINHA 01 - INADIMPLENTE - VALOR CONTA ou VALOR GUIA ou VALOR DÉBITO A
							// COBRAR
							valorTotalDebito = recuperarValor(ICAI_VLBASEREMUNERACAO, ICAI_VLBASEREMUNERACAO, resultObj);
						}
					}
				}

				// LINHA 02 - Percentual padrão
				padraoPercentual = recuperarValor(ICAI_PCREMUNERACAO, ICAI_VLREMUNERACAO, resultObj).divide(new BigDecimal(100));

				// LINHA 02 - Valor remunerado pelo percentual padrão
				padraoValor = recuperarValor(ICAI_VLREMUNERACAO, ICAI_VLREMUNERACAO, resultObj);

				// LINHA 02 - Percentual para serviços especiais
				servicosEspeciaisPercentual = recuperarValor(ICAI_PCREMUNERACAOESPEC, ICAI_VLREMUNERACAOESPEC, resultObj).divide(
								new BigDecimal(100));

				// LINHA 02 - Valor remunerado pelo percentual para serviços especiais
				servicosEspeciaisValor = recuperarValor(ICAI_VLREMUNERACAOESPEC, ICAI_VLREMUNERACAOESPEC, resultObj);

				// LINHA 02 - Percentual para parcelamento
				parcelamentoPercentual = recuperarValor(ICAI_PCREMUNERACAOPARCEL, ICAI_VLREMUNERACAOPARCEL, resultObj).divide(
								new BigDecimal(100));

				// LINHA 02 - Valor remunerado pelo percentual para parcelamento
				parcelamentoValor = recuperarValor(ICAI_VLREMUNERACAOPARCEL, ICAI_VLREMUNERACAOPARCEL, resultObj);

				// LINHA 02 - Percentual por reincidência
				reincidenciaPercentual = recuperarValor(ICAI_PCREMUNERACAOREINCID, ICAI_VLREMUNERACAOREINCID, resultObj).divide(
								new BigDecimal(100));

				// LINHA 02 - Valor total da remuneração
				valorTotalRemuneracao = padraoValor.add(servicosEspeciaisValor).add(parcelamentoValor).add(reincidenciaValor);

				// FIM INICIALIZACAO

				// O registro deve ser considerado apenas se um dos valores é maior que zero
				if((valorTotalDebito != null && valorTotalDebito.compareTo(BigDecimal.ZERO) > 0)
								|| (valorTotalServicosEspeciais != null && valorTotalServicosEspeciais.compareTo(BigDecimal.ZERO) > 0)
								|| (valorTotalServicosParcelamento != null && valorTotalServicosParcelamento.compareTo(BigDecimal.ZERO) > 0)
								|| (valorTotalDebitoSemServicosEspeciaisParcelamento != null && valorTotalDebitoSemServicosEspeciaisParcelamento
												.compareTo(BigDecimal.ZERO) > 0)){

					RelatorioRemuneracaoCobrancaAdministrativaBean registroConsolidado = new RelatorioRemuneracaoCobrancaAdministrativaBean();

					// LINHA 01 - DATA PAGTO
					registroConsolidado.setDataPagamento(Util.formatarData((Date) resultObj[ICAI_DTPAGAMENTODOCUMENTO]));

					// LINHA 01 - LOCAL
					registroConsolidado.setLocalidadeId((Integer) resultObj[LOCA_ID]);

					// LINHA 01 - SETOR
					registroConsolidado.setSetor((Integer) resultObj[STCM_CDSETORCOMERCIAL]);

					// LINHA 01 - MATRÍCULA
					registroConsolidado.setMatricula(Util.retornaMatriculaImovelFormatada((Integer) resultObj[IMOV_ID]));

					// LINHA 01 -
					registroConsolidado.setReferencia(refContaPrestacao);

					// LINHA 01 - INADIMPLENTE - VALOR CONTA ou VALOR GUIA ou VALOR DÉBITO A COBRAR
					registroConsolidado.setValorTotalDebito(valorTotalDebito);

					// LINHA 01 - ADIMPLENTES - SERV.REMUNERAÇÃO
					registroConsolidado.setValorTotalServicosEspeciais(valorTotalServicosEspeciais);

					// LINHA 01 - ADIMPLENTES - SERV.PARCELAMENTO
					registroConsolidado.setValorTotalServicosParcelamento(valorTotalServicosParcelamento);

					// LINHA 01 - ADIMPLENTES - +15 DIAS ATRASO
					registroConsolidado
									.setValorTotalDebitoSemServicosEspeciaisParcelamento(valorTotalDebitoSemServicosEspeciaisParcelamento);

					// LINHA 01 - SIT.
					registroConsolidado.setSituacaoRemuneracao(situacaoRemuneracao);

					// LINHA 02 - Percentual padrão
					registroConsolidado.setPadraoPercentual(padraoPercentual);

					// LINHA 02 - Valor remunerado pelo percentual padrão
					registroConsolidado.setPadraoValor(padraoValor);

					// LINHA 02 - Percentual para serviços especiais
					registroConsolidado.setServicosEspeciaisPercentual(servicosEspeciaisPercentual);

					// LINHA 02 - Valor remunerado pelo percentual para serviços especiais
					registroConsolidado.setServicosEspeciaisValor(servicosEspeciaisValor);

					// LINHA 02 - Percentual para parcelamento
					registroConsolidado.setParcelamentoPercentual(parcelamentoPercentual);

					// LINHA 02 - Valor remunerado pelo percentual para parcelamento
					registroConsolidado.setParcelamentoValor(parcelamentoValor);

					// LINHA 02 - Percentual por reincidência
					registroConsolidado.setReincidenciaPercentual(reincidenciaPercentual);

					// LINHA 02 - Valor remunerado pelo percentual por reincidência
					registroConsolidado.setReincidenciaValor(reincidenciaValor);

					// LINHA 02 - Valor total da remuneração
					registroConsolidado.setValorTotalRemuneracao(valorTotalRemuneracao);

					dadosConsolidados.add(registroConsolidado);
				}
			}

			if(!Util.isVazioOrNulo(colecaoAtualizarImovelCobrancaAdministrivaItem)){
				this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoAtualizarImovelCobrancaAdministrivaItem);
			}

			// Se não há registros para retornar, informa que não há resultados
			if(dadosConsolidados.isEmpty()){
				throw new ControladorException("atencao.pesquisa.nenhumresultado");
			}

		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return dadosConsolidados;
	}

	private BigDecimal recuperarValor(int idxRecuperar, int idxAvaliar, Object[] resultObj){

		return (BigDecimal) (resultObj[idxAvaliar] == null || BigDecimal.ZERO.equals(resultObj[idxAvaliar]) ? BigDecimal.ZERO
						: resultObj[idxRecuperar]);
	}

	/**
	 * [UC3070] Filtrar Imóvel Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 07/09/2012
	 */
	public Collection<Empresa> pesquisarEmpresaCobrancaAdministrativa(Collection<Integer> idsEmpresa) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarEmpresaCobrancaAdministrativa(idsEmpresa);

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Imóvel Cobrança Situação pelo Id
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public ImovelCobrancaSituacao pesquisarImovelCobrancaSituacaoPeloId(Integer id) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarImovelCobrancaSituacaoPeloId(id);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0005] Validar autorização de acesso ao imóvel pelos usuários das empresas de cobrança
	 * administrativa
	 * Pesquisar Última Cobrança Administrativa do Imóvel
	 * 
	 * @author Saulo Lima
	 * @date 25/07/2013
	 */
	public CobrancaAcaoAtividadeComando pesquisarUltimaCobrancaAdministrativaImovel(Integer imovelId) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarUltimaCobrancaAdministrativaImovel(imovelId);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Totalizar Cobrança Documento Ítem filtrando pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarCobrancaDocumentoItemPeloComando(Integer idCobrancaAcaoAtividadeComando, Integer idImovel)
					throws ControladorException{

		try{
			return repositorioCobranca.totalizarCobrancaDocumentoItemPeloComando(idCobrancaAcaoAtividadeComando, idImovel);

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Contas pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<CobrancaAdministrativaContaHelper> pesquisarContasPeloComandoParaCobrancaAdministrativa(
					Integer idCobrancaAcaoAtividadeComando, Integer idImovel) throws ControladorException{

		Collection<CobrancaAdministrativaContaHelper> retorno = new ArrayList<CobrancaAdministrativaContaHelper>();

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca.pesquisarContasPeloComandoParaCobrancaAdministrativa(
							idCobrancaAcaoAtividadeComando, idImovel);

			CobrancaAdministrativaContaHelper helper = null;

			for(Object[] array : colecaoArray){
				helper = new CobrancaAdministrativaContaHelper();

				if(array[0] != null){
					helper.setReferencia((Integer) array[0]);
				}

				if(array[1] != null){
					helper.setDataVencimentoConta((Date) array[1]);
				}

				if(array[2] != null){
					helper.setValorAgua((BigDecimal) array[2]);
				}else{
					helper.setValorAgua(BigDecimal.ZERO);
				}

				if(array[3] != null){
					helper.setValorEsgoto((BigDecimal) array[3]);
				}else{
					helper.setValorEsgoto(BigDecimal.ZERO);
				}

				if(array[4] != null){
					helper.setValorDebitos((BigDecimal) array[4]);
				}else{
					helper.setValorDebitos(BigDecimal.ZERO);
				}

				if(array[5] != null){
					helper.setValorCreditos((BigDecimal) array[5]);
				}else{
					helper.setValorCreditos(BigDecimal.ZERO);
				}

				if(array[6] != null){
					helper.setValorImposto((BigDecimal) array[6]);
				}else{
					helper.setValorImposto(BigDecimal.ZERO);
				}

				if(array[7] != null){
					helper.setIdCliente((Integer) array[7]);
				}

				if(array[8] != null){
					helper.setIdSituacaoDebito((Integer) array[8]);
				}

				if(array[9] != null){
					helper.setDescricaoSituacaoDebito((String) array[9]);
				}

				if(array[10] != null){
					helper.setDataSituacaoDebito((Date) array[10]);
				}

				if(array[11] != null){
					helper.setNomeCliente((String) array[11]);
				}

				if(array[12] != null){
					helper.setValorItemCobrado((BigDecimal) array[12]);
				}else{
					helper.setValorItemCobrado(BigDecimal.ZERO);
				}

				if(array[13] != null){
					helper.setValorAcrescimos((BigDecimal) array[13]);
				}else{
					helper.setValorAcrescimos(BigDecimal.ZERO);
				}

				retorno.add(helper);
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Guias pelo Id do Comando
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<CobrancaAdministrativaGuiaHelper> pesquisarGuiasPeloComandoParaCobrancaAdministrativa(
					Integer idCobrancaAcaoAtividadeComando, Integer idImovel) throws ControladorException{

		Collection<CobrancaAdministrativaGuiaHelper> retorno = new ArrayList<CobrancaAdministrativaGuiaHelper>();

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca.pesquisarGuiasPeloComandoParaCobrancaAdministrativa(
							idCobrancaAcaoAtividadeComando, idImovel);

			CobrancaAdministrativaGuiaHelper helper = null;

			for(Object[] array : colecaoArray){
				helper = new CobrancaAdministrativaGuiaHelper();

				if(array[0] != null){
					helper.setId((Integer) array[0]);
				}

				if(array[1] != null){
					helper.setNumeroPrestacao((Integer) array[1]);
				}

				if(array[2] != null){
					helper.setDataEmissao((Date) array[2]);
				}

				if(array[3] != null){
					helper.setIdTipoDebito((Integer) array[3]);
				}

				if(array[4] != null){
					helper.setDescricaoTipoDebito((String) array[4]);
				}

				if(array[5] != null){
					helper.setValorPrestacao((BigDecimal) array[5]);
				}else{
					helper.setValorPrestacao(BigDecimal.ZERO);
				}

				if(array[6] != null){
					helper.setIdCliente((Integer) array[6]);
				}

				if(array[7] != null){
					helper.setNomeCliente((String) array[7]);
				}

				if(array[8] != null){
					helper.setIdSituacaoDebito((Integer) array[8]);
				}

				if(array[9] != null){
					helper.setDescricaoSituacaoDebito((String) array[9]);
				}

				if(array[10] != null){
					helper.setDataSituacaoDebito((Date) array[10]);
				}

				if(array[11] != null){
					helper.setValorItemCobrado((BigDecimal) array[11]);
				}else{
					helper.setValorItemCobrado(BigDecimal.ZERO);
				}

				if(array[12] != null){
					helper.setValorAcrescimos((BigDecimal) array[12]);
				}else{
					helper.setValorAcrescimos(BigDecimal.ZERO);
				}

				retorno.add(helper);
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Totalizar Imovel Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ControladorException{

		Collection<Object[]> colecaoArray = null;

		try{
			colecaoArray = repositorioCobranca.totalizarImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);

			if(!Util.isVazioOrNulo(colecaoArray)){
				for(Object[] objArray : colecaoArray){

					objArray[1] = Util.formataBigDecimal((BigDecimal) objArray[1], 2, true);

					if(objArray[2] == null){
						objArray[2] = BigDecimal.ZERO;
					}

					objArray[2] = Util.formatarMoedaReal((BigDecimal) objArray[2]);
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoArray;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imóvel Cobrança Administrativa]
	 * Pesquisar Imóvel em Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Collection<ImovelCobrancaSituacao> pesquisarImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro,
					int pageOffset) throws ControladorException{

		Collection<ImovelCobrancaSituacao> retorno = null;

		try{

			retorno = repositorioCobranca.pesquisarImovelCobrancaAdministrativa(filtro, pageOffset);

		}catch(ErroRepositorioException ex){

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Contas Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Object[] pesquisarContasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao) throws ControladorException{

		Object[] retorno = new Object[3];

		Collection<CobrancaAdministrativaContaHelper> colecaoCobrancaAdministrativaContaHelper = new ArrayList<CobrancaAdministrativaContaHelper>();
		BigDecimal valorTotalConta = BigDecimal.ZERO;
		BigDecimal valorTotalRemuneracao = BigDecimal.ZERO;

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca
							.pesquisarContasImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);

			CobrancaAdministrativaContaHelper helperPadrao = null;
			CobrancaAdministrativaContaHelper helperParcelamento = null;
			CobrancaAdministrativaContaHelper helperEspecial = null;
			CobrancaAdministrativaContaHelper helperReincidencia = null;

			Integer idContaAnterior = null;
			Integer idConta = null;
			Integer referencia = null;

			BigDecimal valorAgua = null;
			BigDecimal valorEsgoto = null;
			BigDecimal valorDebitos = null;
			BigDecimal valorCreditos = null;
			BigDecimal valorImposto = null;

			BigDecimal percentualRemuneracao = null;
			BigDecimal valorRemuneracao = null;

			for(Object[] array : colecaoArray){
				idConta = null;

				if(array[0] != null){
					idConta = (Integer) array[0];
				}

				referencia = null;

				if(array[1] != null){
					referencia = (Integer) array[1];
				}

				valorAgua = null;

				if(array[2] != null){
					valorAgua = (BigDecimal) array[2];
				}

				valorEsgoto = null;

				if(array[3] != null){
					valorEsgoto = (BigDecimal) array[3];
				}

				valorDebitos = null;

				if(array[4] != null){
					valorDebitos = (BigDecimal) array[4];
				}

				valorCreditos = null;

				if(array[5] != null){
					valorCreditos = (BigDecimal) array[5];
				}

				valorImposto = null;

				if(array[6] != null){
					valorImposto = (BigDecimal) array[6];
				}

				if(array[8] != null){
					valorRemuneracao = (BigDecimal) array[8];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperPadrao = new CobrancaAdministrativaContaHelper();

						helperPadrao.setIdConta(idConta);

						if(!idConta.equals(idContaAnterior)){
							helperPadrao.setReferencia(referencia);
							helperPadrao.setValorAgua(valorAgua);
							helperPadrao.setValorEsgoto(valorEsgoto);
							helperPadrao.setValorDebitos(valorDebitos);
							helperPadrao.setValorCreditos(valorCreditos);
							helperPadrao.setValorImposto(valorImposto);

							valorTotalConta = valorTotalConta.add(helperPadrao.getValorConta());

							idContaAnterior = idConta;
						}

						helperPadrao.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PADRAO);

						if(array[7] != null){
							percentualRemuneracao = (BigDecimal) array[7];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperPadrao.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperPadrao.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaContaHelper.add(helperPadrao);
					}
				}

				if(array[10] != null){
					valorRemuneracao = (BigDecimal) array[10];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperParcelamento = new CobrancaAdministrativaContaHelper();

						helperParcelamento.setIdConta(idConta);

						if(!idConta.equals(idContaAnterior)){
							helperParcelamento.setReferencia(referencia);
							helperParcelamento.setValorAgua(valorAgua);
							helperParcelamento.setValorEsgoto(valorEsgoto);
							helperParcelamento.setValorDebitos(valorDebitos);
							helperParcelamento.setValorCreditos(valorCreditos);
							helperParcelamento.setValorImposto(valorImposto);

							valorTotalConta = valorTotalConta.add(helperParcelamento.getValorConta());

							idContaAnterior = idConta;
						}

						helperParcelamento.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PARCELAMENTO);

						if(array[9] != null){
							percentualRemuneracao = (BigDecimal) array[9];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperParcelamento.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperParcelamento.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaContaHelper.add(helperParcelamento);
					}
				}

				if(array[12] != null){
					valorRemuneracao = (BigDecimal) array[12];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperEspecial = new CobrancaAdministrativaContaHelper();

						helperEspecial.setIdConta(idConta);

						if(!idConta.equals(idContaAnterior)){
							helperEspecial.setReferencia(referencia);
							helperEspecial.setValorAgua(valorAgua);
							helperEspecial.setValorEsgoto(valorEsgoto);
							helperEspecial.setValorDebitos(valorDebitos);
							helperEspecial.setValorCreditos(valorCreditos);
							helperEspecial.setValorImposto(valorImposto);

							valorTotalConta = valorTotalConta.add(helperEspecial.getValorConta());

							idContaAnterior = idConta;
						}

						helperEspecial.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.ESPECIAL);

						if(array[11] != null){
							percentualRemuneracao = (BigDecimal) array[11];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperEspecial.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperEspecial.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaContaHelper.add(helperEspecial);
					}
				}

				if(array[14] != null){
					valorRemuneracao = (BigDecimal) array[14];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperReincidencia = new CobrancaAdministrativaContaHelper();

						helperReincidencia.setIdConta(idConta);

						if(!idConta.equals(idContaAnterior)){
							helperReincidencia.setReferencia(referencia);
							helperReincidencia.setValorAgua(valorAgua);
							helperReincidencia.setValorEsgoto(valorEsgoto);
							helperReincidencia.setValorDebitos(valorDebitos);
							helperReincidencia.setValorCreditos(valorCreditos);
							helperReincidencia.setValorImposto(valorImposto);

							valorTotalConta = valorTotalConta.add(helperReincidencia.getValorConta());

							idContaAnterior = idConta;
						}

						helperReincidencia.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.REINCIDENCIA);

						if(array[13] != null){
							percentualRemuneracao = (BigDecimal) array[13];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperReincidencia.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperReincidencia.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaContaHelper.add(helperReincidencia);
					}
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		retorno[0] = colecaoCobrancaAdministrativaContaHelper;
		retorno[1] = Util.formatarMoedaReal(valorTotalConta);
		retorno[2] = Util.formatarMoedaReal(valorTotalRemuneracao);

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0001] Consultar Dados da Cobrança Administrativa do Imóvel
	 * Pesquisar Guias Cobrança Administrativa pelo Id da Situação de Cobrança do Imóvel
	 * 
	 * @author Hebert Falcão
	 * @date 15/09/2012
	 */
	public Object[] pesquisarGuiasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao) throws ControladorException{

		Object[] retorno = new Object[3];

		Collection<CobrancaAdministrativaGuiaHelper> colecaoCobrancaAdministrativaGuiaHelper = new ArrayList<CobrancaAdministrativaGuiaHelper>();
		BigDecimal valorTotalPrestacao = BigDecimal.ZERO;
		BigDecimal valorTotalRemuneracao = BigDecimal.ZERO;

		try{
			Collection<Object[]> colecaoArray = repositorioCobranca
							.pesquisarGuiasImovelCobrancaAdmPelaSituacaoCobranca(idImovelCobrancaSituacao);

			CobrancaAdministrativaGuiaHelper helperPadrao = null;
			CobrancaAdministrativaGuiaHelper helperParcelamento = null;
			CobrancaAdministrativaGuiaHelper helperEspecial = null;
			CobrancaAdministrativaGuiaHelper helperReincidencia = null;

			Integer idGuiaAnterior = null;
			Integer numeroPrestacaoAnterior = null;

			Integer idGuia = null;
			Integer numeroPrestacao = null;

			BigDecimal valorPrestacao = null;

			BigDecimal percentualRemuneracao = null;
			BigDecimal valorRemuneracao = null;

			for(Object[] array : colecaoArray){
				idGuia = null;

				if(array[0] != null){
					idGuia = (Integer) array[0];
				}

				numeroPrestacao = null;

				if(array[1] != null){
					numeroPrestacao = (Integer) array[1];
				}

				valorPrestacao = null;

				if(array[2] != null){
					valorPrestacao = (BigDecimal) array[2];
				}

				if(array[4] != null){
					valorRemuneracao = (BigDecimal) array[4];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperPadrao = new CobrancaAdministrativaGuiaHelper();

						helperPadrao.setId(idGuia);
						helperPadrao.setNumeroPrestacao(numeroPrestacao);
						if(!idGuia.equals(idGuiaAnterior) && !numeroPrestacao.equals(numeroPrestacaoAnterior)){
							helperPadrao.setValorPrestacao(valorPrestacao);

							valorTotalPrestacao = valorTotalPrestacao.add(helperPadrao.getValorPrestacao());

							idGuiaAnterior = idGuia;
							numeroPrestacaoAnterior = numeroPrestacao;
						}

						helperPadrao.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PADRAO);

						if(array[3] != null){
							percentualRemuneracao = (BigDecimal) array[3];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperPadrao.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperPadrao.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaGuiaHelper.add(helperPadrao);
					}
				}

				if(array[6] != null){
					valorRemuneracao = (BigDecimal) array[6];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperParcelamento = new CobrancaAdministrativaGuiaHelper();

						helperParcelamento.setId(idGuia);
						helperParcelamento.setNumeroPrestacao(numeroPrestacao);

						if(!idGuia.equals(idGuiaAnterior)){
							helperParcelamento.setValorPrestacao(valorPrestacao);

							valorTotalPrestacao = valorTotalPrestacao.add(helperParcelamento.getValorPrestacao());

							idGuiaAnterior = idGuia;
							numeroPrestacaoAnterior = numeroPrestacao;
						}

						helperParcelamento.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.PARCELAMENTO);

						if(array[5] != null){
							percentualRemuneracao = (BigDecimal) array[5];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperParcelamento.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperParcelamento.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaGuiaHelper.add(helperParcelamento);
					}
				}

				if(array[8] != null){
					valorRemuneracao = (BigDecimal) array[8];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperEspecial = new CobrancaAdministrativaGuiaHelper();

						helperEspecial.setId(idGuia);
						helperEspecial.setNumeroPrestacao(numeroPrestacao);
						if(!idGuia.equals(idGuiaAnterior)){
							helperEspecial.setValorPrestacao(valorPrestacao);

							valorTotalPrestacao = valorTotalPrestacao.add(helperEspecial.getValorPrestacao());

							idGuiaAnterior = idGuia;
							numeroPrestacaoAnterior = numeroPrestacao;
						}

						helperEspecial.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.ESPECIAL);

						if(array[7] != null){
							percentualRemuneracao = (BigDecimal) array[7];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperEspecial.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperEspecial.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaGuiaHelper.add(helperEspecial);
					}
				}

				if(array[10] != null){
					valorRemuneracao = (BigDecimal) array[10];

					if(valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){
						helperReincidencia = new CobrancaAdministrativaGuiaHelper();

						helperReincidencia.setId(idGuia);
						helperReincidencia.setNumeroPrestacao(numeroPrestacao);
						if(!idGuia.equals(idGuiaAnterior)){
							helperReincidencia.setValorPrestacao(valorPrestacao);

							valorTotalPrestacao = valorTotalPrestacao.add(helperReincidencia.getValorPrestacao());

							idGuiaAnterior = idGuia;
							numeroPrestacaoAnterior = numeroPrestacao;
						}

						helperReincidencia.setTipoRemuneracao(ImovelCobrancaAdministrivaItem.REINCIDENCIA);

						if(array[9] != null){
							percentualRemuneracao = (BigDecimal) array[9];

							if(percentualRemuneracao.compareTo(BigDecimal.ZERO) > 0){
								helperReincidencia.setPercentualRemuneracao(percentualRemuneracao);
							}
						}

						helperReincidencia.setValorRemuneracao(valorRemuneracao);

						valorTotalRemuneracao = valorTotalRemuneracao.add(valorRemuneracao);

						colecaoCobrancaAdministrativaGuiaHelper.add(helperReincidencia);
					}
				}
			}

		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		retorno[0] = colecaoCobrancaAdministrativaGuiaHelper;
		retorno[1] = Util.formatarMoedaReal(valorTotalPrestacao);
		retorno[2] = Util.formatarMoedaReal(valorTotalRemuneracao);

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imóvel Cobrança Administrativa]
	 * Pesquisar Imóvel em Cobrança Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Integer pesquisarQuantidadeImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro)
					throws ControladorException{

		Integer retorno = null;
		try{

			retorno = this.repositorioCobranca.pesquisarQuantidadeImovelCobrancaAdministrativa(filtro);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imóvel Cobrança Administrativa
	 * [SB0002] - Consultar Dados do Contrato da Empresa
	 * 
	 * @author Anderson Italo
	 * @date 17/09/2012
	 */
	public Collection<CobrancaContrato> pesquisarCobrancaContratoPorEmpresa(Integer idEmpresa) throws ControladorException{

		Collection<CobrancaContrato> retorno = null;
		try{

			retorno = this.repositorioCobranca.pesquisarCobrancaContratoPorEmpresa(idEmpresa);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Calcula os acrescimmos por Impontualidade(multa,juros de mora e atualização monetaria)
	 * 
	 * @author Hebert Falcão
	 * @date 14/09/2012
	 * @param indicadorEmissaoDocumento
	 *            Na emissão do documento o indicador que estiver como 1 no
	 *            ParametroAcrescimosEmissaoDocumento deve ser considerado, o que tiver como 2 deve
	 *            ter o valor zerado, pois não será cobrado nesse momento. Caso não seja emissão, a
	 *            lógica é invertida.
	 */
	public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidadeBancoDeDados(int anoMesReferenciaDebito,
					Date dataVencimento, Date dataPagamento, BigDecimal valorDebito, BigDecimal valorMultasCobradas, short indicadorMulta,
					String anoMesArrecadacao, Integer idConta, Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Short multa,
					Short jurosMora, Short atualizacaoTarifaria, Date dataBaseDeCalculo)
					throws ControladorException{

		// Parâmetro que identifica se a empresa emite o documento com acrescimos
		String parametroTratarAcrescimosEmissaoDocumento = ParametroArrecadacao.P_TRATAR_ACRESCIMOS_EMISSAO_DOCUMENTO.executar().toString();

		if(parametroTratarAcrescimosEmissaoDocumento.equals(Short.toString(ConstantesSistema.NAO))){
			dataEmissaoDocumento = null;
			indicadorEmissaoDocumento = null;
		}

		Object[] resultado = null;

		try{
			resultado = repositorioCobranca.calcularAcrescimoPorImpontualidadeBancoDeDados(anoMesReferenciaDebito, dataVencimento,
							dataPagamento, valorDebito, valorMultasCobradas, indicadorMulta, anoMesArrecadacao, idConta,
							dataEmissaoDocumento, indicadorEmissaoDocumento, dataBaseDeCalculo);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		if(resultado[3] != null){
			sessionContext.setRollbackOnly();
			String mensagemErro = (String) resultado[3];
			throw new ControladorException(mensagemErro);
		}

		CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = new CalcularAcrescimoPorImpontualidadeHelper();

		BigDecimal valorMulta = null;

		if(resultado[0] != null){

			valorMulta = (BigDecimal) resultado[0];
		}

		if(multa.equals(ConstantesSistema.NAO)){
			valorMulta = BigDecimal.ZERO;
		}

		calcularAcrescimoPorImpontualidade.setValorMulta(valorMulta);

		BigDecimal valorJurosMora = null;

		if(resultado[1] != null){
			valorJurosMora = (BigDecimal) resultado[1];
		}

		if(jurosMora.equals(ConstantesSistema.NAO)){
			valorJurosMora = BigDecimal.ZERO;
		}

		calcularAcrescimoPorImpontualidade.setValorJurosMora(valorJurosMora);

		BigDecimal valorAtualizacaoMonetaria = null;

		if(resultado[2] != null){
			valorAtualizacaoMonetaria = (BigDecimal) resultado[2];
		}

		String zerarValorAcrescimoAtualizacaoTarifaria = ParametroCobranca.P_ZERAR_VALOR_ACRESCIMO_ATUALIZACAO_TARIFARIA.executar();

		if(zerarValorAcrescimoAtualizacaoTarifaria.equals(ConstantesSistema.SIM.toString())
						|| atualizacaoTarifaria.equals(ConstantesSistema.NAO)){
			valorAtualizacaoMonetaria = BigDecimal.ZERO;
		}

		calcularAcrescimoPorImpontualidade.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);

		// LOGGER.info("referencia = " + anoMesReferenciaDebito + "; multa = " + valorMulta +
		// "; jurosMora = " + valorJurosMora
		// + "; atualizacaoMonetaria = " + valorAtualizacaoMonetaria);

		return calcularAcrescimoPorImpontualidade;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Consultar os parcelamentos ativos do imóvel recebido, realizados com forma de cobrança em
	 * conta e com prestações a serem cobradas de tipo de lançamento contábil diferente de Juros de
	 * Parcelamento
	 * 
	 * @author
	 * @date
	 */
	public Collection pesquisarDebitoACobrarDeParcelamento(Integer idImovel) throws ControladorException{

		Collection<Parcelamento> retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarDebitoACobrarDeParcelamento(idImovel);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Verifica se o imóvel possua multa por descumprimento para a referência do parcelamento
	 * 
	 * @author Yara Souza
	 * @date 27/09/2012
	 */
	public boolean verificarExistenciaMultaPorDescumprimentoPorDebitoACobrar(Integer anoMesReferenciaDebito, Integer idImovel)
					throws ControladorException{

		boolean retorno = false;

		try{
			retorno = repositorioCobranca.verificarExistenciaMultaPorDescumprimentoPorDebitoACobrar(anoMesReferenciaDebito, idImovel);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Selecionar as prestações que não sejam referentes ao tipo de lançamento contábil Juros de
	 * Parcelamento e que estejam vencidos
	 * 
	 * @author Yara Souza
	 * @date 27/09/2012
	 */
	private Integer obterQuantidadePrestacoesVencidasPorDebitoACobrar(Integer anoMesReferenciaDebito, Integer idImovel,
					Integer fatorReducao, Short numeroPrestacoesCobradas) throws ControladorException{

		Integer retorno = null;

		try{
			retorno = repositorioCobranca.obterQuantidadePrestacoesVencidas(anoMesReferenciaDebito, idImovel, fatorReducao,
							numeroPrestacoesCobradas);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * Pesquisar rotas dos imóveis gerados no comando precedente
	 * 
	 * @author Hebert Falcão
	 * @date 12/10/2012
	 */
	public Collection<Rota> pesquisarRotasDoComandoPrecedente(Integer idComandoCobrancaPrecedente) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarRotasDoComandoPrecedente(idComandoCobrancaPrecedente);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * Verificar se o imóvel já está em cobrança bancária
	 * 
	 * @author Hebert Falcão
	 * @date 13/10/2012
	 */
	public boolean isImovelEmCobrancaBancaria(Integer idImovel) throws ControladorException{

		try{
			return repositorioCobranca.isImovelEmCobrancaBancaria(idImovel);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3019] Identificar Cobrança Bancária com Negociação.
	 * [SB0006] - Gera Novo Boleto
	 * 
	 * @author Hebert Falcão
	 * @date 13/10/2012
	 */
	private Integer gerarNovoBoleto(Integer idArrecadador, Collection<Integer> idImoveis, Integer idProcessoIniciado)
					throws ControladorException{

		boolean executouComErro = false;

		Integer idProcessoCobrancaComandado = null;

		Integer idCobrancaAcaoAtividadeComando = null;

		// Título da ação eventual
		String dataAtualStr = Util.formatarData(new Date());

		String titulo = "COBRANCA BANCARIA PARA " + idArrecadador + " EM " + dataAtualStr;

		// Verifica se já foi processado
		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.DESCRICAO_TITULO,
						titulo));
		filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroNulo(FiltroCobrancaAcaoAtividadeComando.REALIZACAO));

		Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil().pesquisar(
						filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName());

		if(Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComando)){
			// [UC0243] - Inserir Comando de Ação de Cobrança

			// Conteúdo da solicitação
			String descricaoSolicitacao = "NOVOS BOLETOS PARA SUBSTITUICAO DE BOLETOS BAIXADOS EM RAZAO DE ALGUMA DAS CONTAS NÃO ESTAREM MAIS PENDENTES";

			// Ação de Cobrança
			Integer idCobrancaAcao = CobrancaAcao.COBRANCA_BANCARIA;
			String[] cobrancaAcaoSelecionada = new String[] {idCobrancaAcao.toString()};

			// Atividade de Cobrança
			String cobrancaAtividade = CobrancaAtividade.EMITIR.toString();

			// Prazo de Execução
			CobrancaAcao cobrancaAcao = null;
			String prazoExecucao = null;

			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));

			Collection<CobrancaAcao> colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao,
							CobrancaAcao.class.getName());

			if(!Util.isVazioOrNulo(colecaoCobrancaAcao)){
				cobrancaAcao = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
				Short qtdDiasRealizacao = cobrancaAcao.getQtdDiasRealizacao();

				if(qtdDiasRealizacao != null){
					prazoExecucao = Integer.toString(qtdDiasRealizacao);
				}
			}

			// Indicador "Apenas para Imóveis com Débito"
			String indicadorImoveisDebito = Short.toString(ConstantesSistema.SIM);

			// Indicador "Emissão de Boletim de Cadastro"
			String indicadorGerarBoletimCadastro = Short.toString(ConstantesSistema.NAO);

			// Id do usuário que efetuou a inclusão do comando
			Usuario usuario = Usuario.USUARIO_BATCH;

			// Indicador do critério
			String indicadorDoCriterio = ConstantesSistema.INDICADOR_CRITERIO_ACAO;

			CobrancaCriterio cobrancaCriterio = null;

			// Arquivo de Imóveis
			byte[] arquivo = null;

			if(!Util.isVazioOrNulo(idImoveis)){
				StringBuilder arquivoSB = new StringBuilder();

				for(Integer idImovel : idImoveis){
					arquivoSB.append(idImovel);
					arquivoSB.append(System.getProperty("line.separator"));
				}

				arquivo = String.valueOf(arquivoSB).getBytes();

				// Gerar Relação dos Documentos
				String indicadorGerarRelacaoDocumento = Short.toString(ConstantesSistema.SIM);

				String idArrecadadorStr = Integer.toString(idArrecadador);

				Collection<Integer> colecaoCobrancaAcaoAtividadeComandoId = this.concluirComandoAcaoCobranca(null, null, null, null,
								cobrancaAcaoSelecionada, cobrancaAtividade, null, null, null, null, null, null, null, null,
								indicadorDoCriterio, null, null, null, null, null, null, null, null, usuario, titulo, descricaoSolicitacao,
								prazoExecucao, null, indicadorImoveisDebito, indicadorGerarBoletimCadastro, null, null, null, arquivo,
								idArrecadadorStr, null, cobrancaCriterio, indicadorGerarRelacaoDocumento, null, null);

				// [UC0251] - Gerar Atividade de Ação de Cobrança
				Collection<Integer> idsProcessosCobrancaCronograma = new ArrayList();

				Collection<Integer> idsProcessosCobrancaEventual = new ArrayList();

				if(!Util.isVazioOrNulo(colecaoCobrancaAcaoAtividadeComandoId)){
					idCobrancaAcaoAtividadeComando = (Integer) Util.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComandoId);

					idsProcessosCobrancaEventual.add(idCobrancaAcaoAtividadeComando);
				}

				idProcessoCobrancaComandado = this.getControladorBatch().inserirProcessoIniciadoCobrancaComandado(
								idsProcessosCobrancaCronograma, idsProcessosCobrancaEventual, null, usuario, idProcessoIniciado, null);
			}else{
				LOGGER.warn("Nenhum imóvel foi selecionado para a geração do novo boleto.");
			}
		}else{
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util
							.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComando);
			idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando.getId();

			Integer idFuncionalidadeIniciadaCobrancaComandado = null;

			Collection<FuncionalidadeIniciada> colecaoFuncionalidadeIniciada = this.getControladorBatch()
							.pesquisarFuncionalidadeIniciadaPeloProcessoVinculado(idProcessoIniciado);

			if(!Util.isVazioOrNulo(colecaoFuncionalidadeIniciada)){
				ProcessoIniciado processoIniciado = null;
				FuncionalidadeSituacao funcionalidadeSituacao = null;

				Integer idFuncionalidadeSituacao = null;

				for(FuncionalidadeIniciada funcionalidadeIniciada : colecaoFuncionalidadeIniciada){
					funcionalidadeSituacao = funcionalidadeIniciada.getFuncionalidadeSituacao();
					idFuncionalidadeSituacao = funcionalidadeSituacao.getId();

					if(idFuncionalidadeSituacao != null
									&& (idFuncionalidadeSituacao == FuncionalidadeSituacao.CONCLUIDA_COM_ERRO || idFuncionalidadeSituacao == FuncionalidadeSituacao.EXECUCAO_CANCELADA
													.intValue())){
						idFuncionalidadeIniciadaCobrancaComandado = funcionalidadeIniciada.getId();

						processoIniciado = funcionalidadeIniciada.getProcessoIniciado();
						idProcessoCobrancaComandado = processoIniciado.getId();

						break;
					}
				}
			}

			if(idFuncionalidadeIniciadaCobrancaComandado != null){
				this.getControladorBatch().reiniciarFuncionalidadesIniciadas(
								new String[] {Integer.toString(idFuncionalidadeIniciadaCobrancaComandado)}, idProcessoCobrancaComandado);
			}else{
				LOGGER.warn("Não foi possível reiniciar o processo " + idProcessoIniciado);
			}
		}

		if(idProcessoCobrancaComandado != null){
			FiltroProcessoIniciado filtroProcessoIniciado = new FiltroProcessoIniciado();
			filtroProcessoIniciado.adicionarParametro(new ParametroSimples(FiltroProcessoIniciado.ID, idProcessoCobrancaComandado));

			String tempoVerificadorStr = "60";

			if(!Util.isVazioOuBranco(ConstantesConfig.getTempoVerificador())){
				tempoVerificadorStr = ConstantesConfig.getTempoVerificador();
			}

			int tempoVerificador = new Integer(tempoVerificadorStr) * 1000;

			Collection<ProcessoIniciado> colecaoProcessoIniciado = null;

			ProcessoIniciado processoIniciado = null;

			ProcessoSituacao processoSituacao = null;

			Integer idProcessoSituacao = null;

			while(true){
				colecaoProcessoIniciado = this.getControladorUtil().pesquisar(filtroProcessoIniciado, ProcessoIniciado.class.getName());

				processoIniciado = (ProcessoIniciado) Util.retonarObjetoDeColecao(colecaoProcessoIniciado);
				processoSituacao = processoIniciado.getProcessoSituacao();
				idProcessoSituacao = processoSituacao.getId();

				if(ProcessoSituacao.CONCLUIDO == idProcessoSituacao){
					break;
				}else if(ProcessoSituacao.CONCLUIDO_COM_ERRO == idProcessoSituacao){
					executouComErro = true;

					break;
				}

				LOGGER.warn("Aguardando o processo " + idProcessoCobrancaComandado + " finalizar.");

				try{
					Thread.currentThread().sleep(tempoVerificador);
				}catch(InterruptedException e){
					throw new ControladorException("erro.sistema", e);
				}
			}
		}

		if(executouComErro){
			LOGGER.error("idProcessoCobrancaComandado " + idProcessoCobrancaComandado);
			throw new ControladorException("erro.gerar.novo.boleto");
		}

		return idCobrancaAcaoAtividadeComando;
	}

	// [SB0012] - Formatar Código do Convênio
	private String formatarCodigoDoConvenio(String idBanco, ArrecadadorMovimento arrecadadorMovimento) throws ControladorException{

		StringBuilder retorno = new StringBuilder();

		String codigoConvenio = arrecadadorMovimento.getCodigoConvenio();

		// Id 1 - Banco do Brasil
		if(idBanco.equals("1")){
			codigoConvenio = Util.adicionarZerosEsquedaNumero(9, codigoConvenio);
			codigoConvenio = codigoConvenio.substring(0, 9);
			retorno.append(codigoConvenio);

			retorno.append("0014");

			retorno.append("17");

			retorno.append("027");

			retorno.append(Util.completaString("", 2));
		}else{
			retorno.append(Util.completaString(codigoConvenio, 20));
		}

		return retorno.toString();
	}

	/**
	 * Gera o débito cobrado de penalização
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * [SB0004] Gerar Débito Cobrado de Penalização
	 * 
	 * @author Luciano Galvao
	 * @created 23/10/2012
	 */
	private DebitoCobrado gerarDebitoCobradoPenalizacao(Parcelamento parcelamento, Integer idImovel, BigDecimal valorPrestacao)
					throws ControladorException{

		Imovel imovel = null;

		if(idImovel != null){
			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, idImovel));
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.QUADRA);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.SETOR_COMERCIAL);
			imovel = (Imovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName()));
		}

		// DBTP_ID - Valor do Parâmetro "P_DEBITO_TIPO_PENALIZACAO_DESCONTO"
		Integer pDebitoTipoPenalizacaoDesconto = Integer.parseInt((String) ParametroCobranca.P_DEBITO_TIPO_PENALIZACAO_DESCONTO
						.executar(ExecutorParametrosCobranca.getInstancia()));

		FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
		filtroDebitoTipo.adicionarParametro(new ParametroSimples(FiltroDebitoTipo.ID, pDebitoTipoPenalizacaoDesconto));
		filtroDebitoTipo.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoTipo.LANCAMENTO_ITEM_CONTABIL);
		filtroDebitoTipo.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoTipo.FINANCIAMENTO_TIPO);
		DebitoTipo debitoTipo = (DebitoTipo) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroDebitoTipo,
						DebitoTipo.class.getName()));

		// Recupera os parâmetros de sistema
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		// Construindo o objeto DebitoCobrado que será persistido no banco
		DebitoCobrado debitoCobrado = new DebitoCobrado();
		debitoCobrado.setDebitoTipo(debitoTipo);
		debitoCobrado.setDebitoCobrado(new Date());
		debitoCobrado.setLancamentoItemContabil(debitoTipo.getLancamentoItemContabil());

		if(imovel != null){
			debitoCobrado.setLocalidade(imovel.getLocalidade());
			debitoCobrado.setQuadra(imovel.getQuadra());
			if(imovel.getSetorComercial() != null){
				debitoCobrado.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
			}
			if(imovel.getQuadra() != null){
				debitoCobrado.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			}
			debitoCobrado.setNumeroLote(imovel.getLote());
			debitoCobrado.setNumeroSubLote(imovel.getSubLote());
		}

		debitoCobrado.setAnoMesReferenciaDebito(sistemaParametro.getAnoMesFaturamento());
		debitoCobrado.setAnoMesCobrancaDebito(sistemaParametro.getAnoMesFaturamento());
		debitoCobrado.setValorPrestacao(valorPrestacao);
		debitoCobrado.setNumeroPrestacao(Short.parseShort("1"));
		debitoCobrado.setNumeroPrestacaoDebito(Short.parseShort("1"));
		debitoCobrado.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());
		debitoCobrado.setParcelamento(parcelamento);

		return debitoCobrado;
	}

	/**
	 * Gera a coleção de DebitoCobradoCategoria, a partir do débito cobrado de penalização
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * [SB0004] Gerar Débito Cobrado de Penalização
	 * 
	 * @author Luciano Galvao
	 * @created 24/10/2012
	 */
	private Collection<DebitoCobradoCategoria> gerarDebitoCobradoCategoriaPenalizacao(Integer idImovel, BigDecimal valorTotalDebitos,
					DebitoCobrado debitoCobradoPenalizacao) throws ControladorException{

		Collection<ImovelSubcategoria> colecaoImovelSubcategorias = null;
		Collection<DebitoCobradoCategoria> colecaoDebitosCobradoCategoria = new ArrayList<DebitoCobradoCategoria>();
		Collection<Categoria> colecaoCategoriasObterValor = new ArrayList<Categoria>();
		Collection<BigDecimal> colecaoValorPorCategoria = new ArrayList<BigDecimal>();
		Iterator<Categoria> colecaoCategoriasObterValorIterator = null;
		Iterator<BigDecimal> colecaoValorPorCategoriaIterator = null;
		DebitoCobradoCategoriaPK debitoCobradoCategoriaPK = null;
		DebitoCobradoCategoria debitoCobradoCategoria = null;
		Categoria categoria = null;
		Categoria categoriaAux = null;

		// Consulta as subcategorias do imóvel
		if(idImovel != null){
			FiltroImovelSubCategoria filtroImovelSubcategoria = new FiltroImovelSubCategoria();
			filtroImovelSubcategoria.adicionarParametro(new ParametroSimples(FiltroImovelSubCategoria.IMOVEL_ID, idImovel));
			filtroImovelSubcategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelSubCategoria.CATEGORIA);
			colecaoImovelSubcategorias = (Collection<ImovelSubcategoria>) getControladorUtil().pesquisar(filtroImovelSubcategoria,
							ImovelSubcategoria.class.getName());
		}

		if(!Util.isVazioOrNulo(colecaoImovelSubcategorias)){

			// Obtém as categorias a partir das subcategorias do imóvel
			for(ImovelSubcategoria imovelSubcategoria : colecaoImovelSubcategorias){
				categoria = new Categoria();

				categoriaAux = imovelSubcategoria.getCategoria();
				Integer idCategoriaAux = categoriaAux.getId();
				categoria.setId(idCategoriaAux);

				Integer quantidadeEconomia = Integer.parseInt(imovelSubcategoria.getQuantidadeEconomias() + "");
				categoria.setQuantidadeEconomiasCategoria(quantidadeEconomia);

				colecaoCategoriasObterValor.add(categoria);
			}

			// [UC0185] Obter Valor por Categoria
			colecaoValorPorCategoria = getControladorImovel().obterValorPorCategoria(colecaoCategoriasObterValor, valorTotalDebitos);

			// Cria a coleção de DebitoCobradoCategoria
			colecaoValorPorCategoriaIterator = colecaoValorPorCategoria.iterator();
			colecaoCategoriasObterValorIterator = colecaoCategoriasObterValor.iterator();

			while(colecaoValorPorCategoriaIterator.hasNext() && colecaoCategoriasObterValorIterator.hasNext()){
				BigDecimal valorPorCategoria = (BigDecimal) colecaoValorPorCategoriaIterator.next();
				categoria = (Categoria) colecaoCategoriasObterValorIterator.next();

				Integer quantidadeEconomiasCategoria = categoria.getQuantidadeEconomiasCategoria();

				debitoCobradoCategoriaPK = new DebitoCobradoCategoriaPK();
				debitoCobradoCategoriaPK.setCategoria(categoria);
				debitoCobradoCategoriaPK.setDebitoCobrado(debitoCobradoPenalizacao);

				debitoCobradoCategoria = new DebitoCobradoCategoria();
				debitoCobradoCategoria.setComp_id(debitoCobradoCategoriaPK);
				debitoCobradoCategoria.setDebitoCobrado(debitoCobradoPenalizacao);
				debitoCobradoCategoria.setCategoria(categoria);
				debitoCobradoCategoria.setQuantidadeEconomia(quantidadeEconomiasCategoria);
				debitoCobradoCategoria.setValorCategoria(valorPorCategoria);

				colecaoDebitosCobradoCategoria.add(debitoCobradoCategoria);
			}
		}

		return colecaoDebitosCobradoCategoria;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IControladorCobranca#obterDebitoImovelContasAgenciaVirtual(int,
	 * java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date)
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelContasAgenciaVirtual(int indicadorDebito, String idImovel,
					String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito, Date anoMesInicialVencimentoDebito,
					Date anoMesFinalVencimentoDebito) throws ControladorException{

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = new ObterDebitoImovelOuClienteHelper();

		Collection colecaoIdImoveisContas = new HashSet();
		Collection colecaoContasValores = new ArrayList();
		Collection contas = null;

		if(indicadorDebito == 1){

			// contas do imovel
			try{

				contas = repositorioCobranca.pesquisarContasImovel(idImovel, DebitoCreditoSituacao.NORMAL,
								DebitoCreditoSituacao.RETIFICADA, DebitoCreditoSituacao.INCLUIDA, DebitoCreditoSituacao.PARCELADA,
								anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito, anoMesInicialVencimentoDebito,
								anoMesFinalVencimentoDebito, DebitoCreditoSituacao.PRESCRITA);

				if(contas != null && !contas.isEmpty()){

					Iterator icolecaoContas = contas.iterator();
					// dados da conta
					while(icolecaoContas.hasNext()){

						ContaValoresHelper contaValores = new ContaValoresHelper();

						Object[] contasArray = (Object[]) icolecaoContas.next();
						// Foi removido a fluxo e colocado no método abaixo.
						Conta conta = recuperarConta(contasArray);
						contaValores.setConta(conta);
						colecaoContasValores.add(contaValores);

					}

				}

				// adcionando a colecao de contas de valores
				if(colecaoContasValores != null){
					obterDebitoImovelOuClienteHelper.setColecaoContasValores(colecaoContasValores);
					obterDebitoImovelOuClienteHelper.setColecaoContasValoresImovel(colecaoContasValores);
				}

				colecaoIdImoveisContas.clear();
				colecaoIdImoveisContas = null;

			}catch(ErroRepositorioException ex){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		}

		return obterDebitoImovelOuClienteHelper;
	}

	/**
	 * Pesquisar Resolução de Diretoria Parâmetros Pagamento À Vista
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista pesquisarResolucaoDiretoriaParametrosPagamentoAVista(Integer idResolucaoDiretoria,
					Date dataPagamento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarResolucaoDiretoriaParametrosPagamentoAVista(idResolucaoDiretoria, dataPagamento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * Pesquisar mensagem para pagamento à vista
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista pesquisarMensagemExtratoParcelamentoPagamentoAVista(Integer idResolucaoDiretoria,
					Date dataEmissao) throws ControladorException{

		ResolucaoDiretoriaParametrosPagamentoAVista retorno = null;

		try{
			Object[] arrayAux = repositorioCobranca.pesquisarMensagemExtratoParcelamentoPagamentoAVista(idResolucaoDiretoria, dataEmissao);

			if(arrayAux != null){
				retorno = new ResolucaoDiretoriaParametrosPagamentoAVista();

				if(arrayAux[0] != null){
					retorno.setId((Integer) arrayAux[0]);
				}

				if(arrayAux[1] != null){
					retorno.setDescricaoMensagemExtrato((String) arrayAux[1]);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * [UC0259] - Processar Pagamento com Código de Barras
	 * Pesquisar Contas do Documento de Cobrança
	 * 
	 * @author Hebert Falcão
	 * @date 01/11/2012
	 */
	public Collection<Conta> pesquisarContasCobrancaDocumento(Integer idCobrancaDocumento) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarContasCobrancaDocumento(idCobrancaDocumento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * [UC0259] - Processar Pagamento com Código de Barras
	 * Pesquisar Guias Pagamento Prestação do Documento de Cobrança
	 * 
	 * @author Hebert Falcão
	 * @date 01/11/2012
	 */
	public Collection<GuiaPagamentoPrestacao> pesquisarGuiasPagamentoPrestacaoCobrancaDocumento(Integer idCobrancaDocumento)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarGuiasPagamentoPrestacaoCobrancaDocumento(idCobrancaDocumento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisar Resolução de Diretoria Parâmetros Valor da Entrada
	 * 
	 * @author Hebert Falcão
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosValorEntrada pesquisarResolucaoDiretoriaParametrosValorEntrada(Integer idResolucaoDiretoria,
					Date dataNegociacao) throws ControladorException{

		try{
			return repositorioCobranca.pesquisarResolucaoDiretoriaParametrosValorEntrada(idResolucaoDiretoria, dataNegociacao);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Guias de pagamento de parcelamento de cobrança bancária
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * [FS0004] - Verificar existência de guia de parcelamento de cobrança bancária
	 * 
	 * @author Josenildo Neves
	 * @date 22/11/2012
	 */
	public boolean verificarGuiaPagamentoParcelamentoCobrancaBancaria(Integer idGuiaPagamento, Short numeroPrestacoes)
					throws ControladorException{

		try{
			return repositorioCobranca.verificarGuiaPagamentoParcelamentoCobrancaBancaria(idGuiaPagamento, numeroPrestacoes);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Retornar ids de parcelamentos ativos na referência
	 * 
	 * @author Hebert Falcão
	 * @date 03/12/2012
	 */
	public Collection<Integer> retornarIdsDeParcelamentosAtivosNaReferencia(Integer idImovel, Integer anoMesFaturamentoAtual)
					throws ControladorException{

		try{
			return repositorioCobranca.retornarIdsDeParcelamentosAtivosNaReferencia(idImovel, anoMesFaturamentoAtual);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0040] Verificar existência de itens de parcelamento anterior na mesma referência
	 * 
	 * @author Hebert Falcão
	 * @date 03/12/2012
	 */
	public void verificarExistenciaDeItensDeParcelamentoAnteriorNaMesmaReferencia(Integer idImovel,
					Collection<ContaValoresHelper> colecaoContaValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper,
					Collection<DebitoACobrar> colecaoDebitoACobrar, Collection<CreditoARealizar> colecaoCreditoARealizar)
					throws ControladorException{

		Short pVerificaParcelamentoMesFatCorrente = Short.valueOf(ParametroCobranca.P_VERIFICA_PARCELAMENTO_MES_FATURAMENTO_CORRENTE
						.executar());

		if(pVerificaParcelamentoMesFatCorrente.equals(ConstantesSistema.NAO)){
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

			Integer anoMesFaturamento = sistemaParametro.getAnoMesFaturamento();

			Collection<Integer> colecaoIdsParcelamento = this.retornarIdsDeParcelamentosAtivosNaReferencia(idImovel, anoMesFaturamento);

			if(!Util.isVazioOrNulo(colecaoIdsParcelamento)){

				ArrayList<Integer> idsDebitoACobrarARemover = new ArrayList<Integer>();

				FiltroDebitoACobrar filtroDebitoACobrar = null;
				Collection<DebitoACobrar> colecaoDebitoACobrarDeParcelamento = null;
				Integer idDebitoACobrar = null;

				ArrayList<Integer> idsContaARemover = new ArrayList<Integer>();

				FiltroConta filtroConta = null;
				Collection<Conta> colecaoContaEntradaParcelamento = null;
				Integer idConta = null;

				ArrayList<Integer> idsGuiaPagamentoARemover = new ArrayList<Integer>();

				FiltroGuiaPagamento filtroGuiaPagamento = null;
				Collection<GuiaPagamento> colecaoGuiaPagamentoDeParcelamento = null;
				Collection<GuiaPagamento> colecaoGuiaPagamentoEntradaParcelamento = null;
				Integer idGuiaPagamento = null;

				ArrayList<Integer> idsCreditoARealizarARemover = new ArrayList<Integer>();

				FiltroCreditoARealizar filtroCreditoARealizar = null;
				Collection<CreditoARealizar> colecaoCreditoARealizarDeParcelamento = null;
				Integer idCreditoARealizar = null;

				for(Integer idParcelamento : colecaoIdsParcelamento){
					// Tratas os débitos a cobrar que representam as prestações do parcelamento
					filtroDebitoACobrar = new FiltroDebitoACobrar();
					filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.PARCELAMENTO_ID, idParcelamento));

					colecaoDebitoACobrarDeParcelamento = this.getControladorUtil().pesquisar(filtroDebitoACobrar,
									DebitoACobrar.class.getName());

					if(!Util.isVazioOrNulo(colecaoDebitoACobrarDeParcelamento)){
						for(DebitoACobrar debitoACobrar : colecaoDebitoACobrarDeParcelamento){
							idDebitoACobrar = debitoACobrar.getId();

							if(!idsDebitoACobrarARemover.contains(idDebitoACobrar)){
								idsDebitoACobrarARemover.add(idDebitoACobrar);
							}
						}
					}

					// Tratas as guias que representam as prestações do parcelamento
					filtroGuiaPagamento = new FiltroGuiaPagamento();
					filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, idParcelamento));

					colecaoGuiaPagamentoDeParcelamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento,
									GuiaPagamento.class.getName());

					if(!Util.isVazioOrNulo(colecaoGuiaPagamentoDeParcelamento)){
						for(GuiaPagamento guiaPagamento : colecaoGuiaPagamentoDeParcelamento){
							idGuiaPagamento = guiaPagamento.getId();

							if(!idsGuiaPagamentoARemover.contains(idGuiaPagamento)){
								idsGuiaPagamentoARemover.add(idGuiaPagamento);
							}
						}
					}

					// Tratar os créditos a realizar que são de outro parcelamento na mesma
					// referência
					filtroCreditoARealizar = new FiltroCreditoARealizar();
					filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.PARCELAMENTO_ID, idParcelamento));

					colecaoCreditoARealizarDeParcelamento = this.getControladorUtil().pesquisar(filtroCreditoARealizar,
									CreditoARealizar.class.getName());

					if(!Util.isVazioOrNulo(colecaoCreditoARealizarDeParcelamento)){
						for(CreditoARealizar creditoARealizar : colecaoCreditoARealizarDeParcelamento){
							idCreditoARealizar = creditoARealizar.getId();

							if(!idsCreditoARealizarARemover.contains(idCreditoARealizar)){
								idsCreditoARealizarARemover.add(idCreditoARealizar);
							}
						}
					}

					// Trara as contas que são entrada de parcelamento
					filtroConta = new FiltroConta();
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.CONTA_MOTIVO_REVISAO_ID,
									ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO));
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.PARCELAMENTO_ID, idParcelamento));

					colecaoContaEntradaParcelamento = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());

					if(!Util.isVazioOrNulo(colecaoContaEntradaParcelamento)){
						for(Conta conta : colecaoContaEntradaParcelamento){
							idConta = conta.getId();

							if(!idsContaARemover.contains(idConta)){
								idsContaARemover.add(idConta);
							}
						}
					}

					// Trata as guias que são entrada de parcelamento
					filtroGuiaPagamento = new FiltroGuiaPagamento();
					filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.DOCUMENTO_TIPO_ID,
									DocumentoTipo.ENTRADA_DE_PARCELAMENTO));
					filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.DEBITO_CREDITO_SITUACAO_ATUAL_ID,
									DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO));
					filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID, idParcelamento));

					colecaoGuiaPagamentoEntradaParcelamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento,
									GuiaPagamento.class.getName());

					if(!Util.isVazioOrNulo(colecaoGuiaPagamentoEntradaParcelamento)){
						for(GuiaPagamento guiaPagamento : colecaoGuiaPagamentoEntradaParcelamento){
							idGuiaPagamento = guiaPagamento.getId();

							if(!idsGuiaPagamentoARemover.contains(idGuiaPagamento)){
								idsGuiaPagamentoARemover.add(idGuiaPagamento);
							}
						}
					}
				}

				// Tratas os débitos a cobrar que representam as prestações do parcelamento
				if(!Util.isVazioOrNulo(idsDebitoACobrarARemover) && !Util.isVazioOrNulo(colecaoDebitoACobrar)){
					Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar.iterator();

					DebitoACobrar debitoACobrar = null;

					while(colecaoDebitoACobrarIterator.hasNext()){
						debitoACobrar = colecaoDebitoACobrarIterator.next();

						idDebitoACobrar = debitoACobrar.getId();

						if(idsDebitoACobrarARemover.contains(idDebitoACobrar)){
							colecaoDebitoACobrarIterator.remove();
						}
					}
				}

				// Trara as contas que são entrada de parcelamento
				if(!Util.isVazioOrNulo(idsContaARemover) && !Util.isVazioOrNulo(colecaoContaValoresHelper)){
					Iterator<ContaValoresHelper> colecaoContaIterator = colecaoContaValoresHelper.iterator();

					ContaValoresHelper contaValoresHelper = null;

					Conta conta = null;

					while(colecaoContaIterator.hasNext()){
						contaValoresHelper = colecaoContaIterator.next();

						conta = contaValoresHelper.getConta();
						idConta = conta.getId();

						if(idsContaARemover.contains(idConta)){
							colecaoContaIterator.remove();
						}
					}
				}

				// Tratas as guias que representam as prestações do parcelamento
				// Trata as guias que são entrada de parcelamento
				if(!Util.isVazioOrNulo(idsGuiaPagamentoARemover) && !Util.isVazioOrNulo(colecaoGuiaPagamentoValoresHelper)){
					Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoIterator = colecaoGuiaPagamentoValoresHelper.iterator();

					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = null;

					while(colecaoGuiaPagamentoIterator.hasNext()){
						guiaPagamentoValoresHelper = colecaoGuiaPagamentoIterator.next();

						idGuiaPagamento = guiaPagamentoValoresHelper.getIdGuiaPagamento();

						if(idsGuiaPagamentoARemover.contains(idGuiaPagamento)){
							colecaoGuiaPagamentoIterator.remove();
						}
					}
				}

				// Tratar os créditos a realizar que são de outro parcelamento na mesma
				// referência
				if(!Util.isVazioOrNulo(idsCreditoARealizarARemover) && !Util.isVazioOrNulo(colecaoCreditoARealizar)){
					Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar.iterator();

					CreditoARealizar creditoARealizar = null;

					while(colecaoCreditoARealizarIterator.hasNext()){
						creditoARealizar = colecaoCreditoARealizarIterator.next();

						idCreditoARealizar = creditoARealizar.getId();

						if(idsCreditoARealizarARemover.contains(idCreditoARealizar)){
							colecaoCreditoARealizarIterator.remove();
						}
					}
				}
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IControladorCobranca#consultarQuantidadeRegistrosDeLiquidosRecebiveis(java.
	 * util.Date, java.util.Date)
	 */
	public int consultarQuantidadeRegistrosDeLiquidosRecebiveis(Date dataPagamentoInicial, Date dataPagamentoFinal)
					throws ControladorException{

		try{
			return repositorioCobranca.consultarQuantidadeRegistrosDeLiquidosRecebiveis(dataPagamentoInicial, dataPagamentoFinal);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IControladorCobranca#consultarRegistrosDeLiquidosRecebiveisAnalitico(java.util
	 * .Date, java.util.Date)
	 */
	public List<RelatorioLiquidosRecebiveisHelper> consultarRegistrosDeLiquidosRecebiveisAnalitico(Date dataPagamentoInicial,
					Date dataPagamentoFinal) throws ControladorException{

		List<RelatorioLiquidosRecebiveisHelper> retorno = new ArrayList<RelatorioLiquidosRecebiveisHelper>();
		try{
			Collection<Object[]> recebiveisAnalitico = repositorioCobranca.consultarRegistrosDeLiquidosRecebiveisAnalitico(
							dataPagamentoInicial, dataPagamentoFinal);

			for(Object[] obj : recebiveisAnalitico){

				RelatorioLiquidosRecebiveisHelper item = new RelatorioLiquidosRecebiveisHelper();
				item.setMatricula("" + (Integer) obj[0]);
				item.setDataPagamento(Util.formatarData((Date) obj[1]));
				item.setNome((String) obj[2]);
				item.setReferencia(Util.formatarAnoMesParaMesAno((Integer) obj[3]));
				item.setValorAgua(Util.formataBigDecimal((BigDecimal) obj[4], 2, true));
				item.setValorEsgoto(Util.formataBigDecimal((BigDecimal) obj[5], 2, true));
				item.setValorServico(Util.formataBigDecimal((BigDecimal) obj[6], 2, true));
				item.setValorConta(Util.formataBigDecimal((BigDecimal) obj[7], 2, true));

				retorno.add(item);
			}

			return retorno;
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IControladorCobranca#consultarRegistrosDeLiquidosRecebiveisSintetico(java.util
	 * .Date, java.util.Date)
	 */
	public List<RelatorioLiquidosRecebiveisHelper> consultarRegistrosDeLiquidosRecebiveisSintetico(Date dataPagamentoInicial,
					Date dataPagamentoFinal) throws ControladorException{

		List<RelatorioLiquidosRecebiveisHelper> retorno = new ArrayList<RelatorioLiquidosRecebiveisHelper>();
		try{
			Collection<Object[]> recebiveisSintetico = repositorioCobranca.consultarRegistrosDeLiquidosRecebiveisSintetico(
							dataPagamentoInicial, dataPagamentoFinal);

			for(Object[] obj : recebiveisSintetico){
				RelatorioLiquidosRecebiveisHelper item = new RelatorioLiquidosRecebiveisHelper();
				String anoMesFaturamento = "" + (Integer) obj[0];
				String ano = anoMesFaturamento.substring(0, 4);
				String mes = anoMesFaturamento.substring(4, 6);
				item.setReferenciaFaturamento(Util.retornaDescricaoMes(Integer.parseInt(mes)) + "/" + ano);
				item.setQuantidadesContas("" + (Integer) obj[1]);
				item.setValorAgua(Util.formataBigDecimal((BigDecimal) obj[2], 2, true));
				item.setValorEsgoto(Util.formataBigDecimal((BigDecimal) obj[3], 2, true));
				item.setValorServico(Util.formataBigDecimal((BigDecimal) obj[4], 2, true));
				item.setValorConta(Util.formataBigDecimal((BigDecimal) obj[5], 2, true));

				retorno.add(item);

			}

			return retorno;
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0009] Verificar Contas em Cobrança Bancária
	 * Obter o mais recente boleto bancário da conta em cobrança bancária
	 * 
	 * @author Hebert Falcão
	 * @date 24/11/2012
	 */
	public BoletoBancario obterMaisRecenteBoletoBancarioDaContaEmCobrancaBancaria(Integer idConta) throws ControladorException{

		try{
			return repositorioCobranca.obterMaisRecenteBoletoBancarioDaContaEmCobrancaBancaria(idConta);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0009] Verificar Contas em Cobrança Bancária
	 * Verificar se a situação do boleto não permite a emissão do extrato
	 * 
	 * @author Hebert Falcão
	 * @date 24/11/2012
	 */
	public boolean verificarSituacaoBoletoNaoPermiteEmissaoExtrato(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.verificarSituacaoBoletoNaoPermiteEmissaoExtrato(idBoletoBancario);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0203] Consultar Débitos
	 * [SB0009] Verificar Contas em Cobrança Bancária
	 * Verificar se a situação do boleto não permite a emissão do extrato
	 * 
	 * @author Hebert Falcão
	 * @date 24/11/2012
	 */
	public Collection<BoletoBancario> pesquisarBoletoBaixadoEProtestadoPelaGuiaDePagamento(Integer idGuiaPagamento, Integer numeroPrestacao)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarBoletoBaixadoEProtestadoPelaGuiaDePagamento(idGuiaPagamento, numeroPrestacao);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0259] - Processar Pagamento com Código de Barras
	 * [SB0003] - Processar Pagamento de Documento de Cobrança
	 * Pesquisar Boletos Baixados e Protestados filtrando pelo Id
	 * 
	 * @author Hebert Falcão
	 * @date 26/11/2012
	 */
	public Collection<BoletoBancario> pesquisarBoletoBaixadoEProtestadoPeloId(Collection<Integer> idsBoletoBancario)
					throws ControladorException{

		try{
			return repositorioCobranca.pesquisarBoletoBaixadoEProtestadoPeloId(idsBoletoBancario);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0259] - Processar Pagamento com Código de Barras
	 * [SB0003] - Processar Pagamento de Documento de Cobrança
	 * Obter os boletos bancários das contas em cobrança bancária
	 * 
	 * @author Hebert Falcão
	 * @date 26/11/2012
	 */
	public Collection<Integer> obterBoletosBancariosDasContasEmCobrancaBancaria(Collection<Integer> idsConta, Integer idCobrancaDocumento,
					Date dataEmissaoDocumento) throws ControladorException{

		try{
			return repositorioCobranca
							.obterBoletosBancariosDasContasEmCobrancaBancaria(idsConta, idCobrancaDocumento, dataEmissaoDocumento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3023] Manter Boleto Bancário
	 * [SB000B] Apresentar Boletos Não Agrupados
	 * Verifica boleto agregador de contas com situação correspondente a baixado e protestado
	 * 
	 * @author Hebert Falcão
	 * @date 04/12/2012
	 */
	public boolean verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(Integer idBoletoBancario) throws ControladorException{

		try{
			return repositorioCobranca.verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(idBoletoBancario);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IControladorCobranca#obterCobrancaDocumentoGeradoAcaoCobranca(gcom.cobranca
	 * .CobrancaDocumento)
	 */
	public CobrancaDocumento obterCobrancaDocumentoGeradoAcaoCobranca(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		try{

			return repositorioCobranca.obterCobrancaDocumentoGeradoAcaoCobranca(cobrancaDocumento);

		}catch(ErroRepositorioException ex){

			throw new ControladorException("erro.sistema", ex);

		}

	}

	/**
	 * retorna uma coleção com todos os parcelamentos de um determinado imovel
	 * 
	 * @author Ítalo Almeida
	 * @date 12/12/2012
	 */
	public Collection<Parcelamento> consultarImovelParcelamentoDebito(int imovelId) throws ControladorException{

		try{
			return repositorioCobranca.consultarImovelParcelamentoDebito(imovelId);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3082] Atualizar Item Documento Cobrança
	 * 
	 * @author Hebert Falcão
	 * @date 08/12/2012
	 */
	public void atualizarItemDocumentoCobranca(Integer idConta, Integer idGuiaPagamento, Short numeroPrestacao, Integer idDebitoACobrar,
					Integer idSituacaoDeDebitoDoItem, Date dataDaSituacaoDeDebitoDoItem, Integer idSituacaoDeDebitoAtual)
					throws ControladorException{

		FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
		filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO);
		filtroCobrancaDocumentoItem
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_COMANDO);
		filtroCobrancaDocumentoItem
						.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ATIVIDADE_COMANDO_COBRANCA_ACAO);
		filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_COBRANCA_ACAO);

		if(idConta != null){
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.CONTA_GERAL_ID, idConta));
		}else if(idGuiaPagamento != null && numeroPrestacao != null){
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.GUIA_PAGAMENTO_GERAL_ID,
							idGuiaPagamento));
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.NUMERO_DA_PRESTACAO,
							numeroPrestacao));
		}else if(idDebitoACobrar != null){
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.DEBITO_A_COBRAR_GERAL_ID,
							idDebitoACobrar));
		}else{
			// Nada deve ser feito
			filtroCobrancaDocumentoItem = null;
		}

		if(filtroCobrancaDocumentoItem != null){
			Collection<CobrancaDocumentoItem> cobrancaDocumentoItens = this.getControladorUtil().pesquisar(filtroCobrancaDocumentoItem,
							CobrancaDocumentoItem.class.getName());

			// Caso o item recebido seja um item de documento de cobrança
			if(!Util.isVazioOrNulo(cobrancaDocumentoItens)){
				Collection colecaoCobrancaDocumentoItemAtualizar = new ArrayList();
				Collection<CobrancaAcao> colecaoCobrancaAcaoSucessora = null;

				CobrancaDocumento cobrancaDocumento = null;
				CobrancaDocumento cobrancaDocumentoAux = null;
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
				CobrancaAcao cobrancaAcaoPredecessora = null;
				CobrancaAcao cobrancaAcaoCorteFisico = null;
				CobrancaAcao cobrancaAcao = null;
				Imovel imovel = null;

				Integer idCobrancaAcao = null;
				Integer idCobrancaAcaoSucessora = null;
				Integer idCobrancaAcaoPredecessora = null;
				Integer idImovel = null;

				boolean acaoSemPrazoValidade = false;
				boolean itemAtualizado = false;
				boolean acaoSucessoraGerada = false;

				Date dataEmissao = null;
				Date dataCalculada = null;
				Date dataEmissaoAux = null;

				FiltroCobrancaAcao filtroCobrancaAcaoSucessora = null;

				Short numeroDiasValidade = null;
				Short numeroDiasMinimoAcaoPrecedente = null;

				if(dataDaSituacaoDeDebitoDoItem != null){
					// Tratar apenas a parte de data
					dataDaSituacaoDeDebitoDoItem = Util.formatarDataInicial(dataDaSituacaoDeDebitoDoItem);
				}

				String[] idsAcoesSemPrazoValidade = ((String) ParametroCobranca.P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE
								.executar(ExecutorParametrosCobranca.getInstancia())).split(",");

				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, CobrancaAcao.CORTE_FISICO));

				Collection<CobrancaAcao> colecaoCobrancaAcao = this.getControladorUtil().pesquisar(filtroCobrancaAcao,
								CobrancaAcao.class.getName());

				if(!Util.isVazioOrNulo(colecaoCobrancaAcao)){
					cobrancaAcaoCorteFisico = (CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
				}

				for(CobrancaDocumentoItem cobrancaDocumentoItem : cobrancaDocumentoItens){
					cobrancaDocumento = cobrancaDocumentoItem.getCobrancaDocumento();

					if(cobrancaDocumento != null){
						dataEmissao = cobrancaDocumento.getEmissao();

						if(dataEmissao != null){
							// Tratar apenas a parte de data
							dataEmissao = Util.formatarDataInicial(dataEmissao);
						}

						imovel = cobrancaDocumento.getImovel();

						if(imovel != null){
							idImovel = imovel.getId();
						}else{
							idImovel = null;
						}

						cobrancaAcaoAtividadeComando = cobrancaDocumento.getCobrancaAcaoAtividadeComando();

						// Caso o documento de cobrança esteja associado a um comando de cobrança
						if(cobrancaAcaoAtividadeComando != null){
							// [SB0001] Tratar Situação de Débito do Item conforme Validade da Ação
							// de Cobrança do Comando]

							cobrancaAcao = cobrancaDocumento.getCobrancaAcao();

							if(cobrancaAcao != null){
								idCobrancaAcao = cobrancaAcao.getId();

								if(!Util.isVazioOrNulo(idsAcoesSemPrazoValidade)){
									for(int i = 0; i < idsAcoesSemPrazoValidade.length; i++){
										if(idsAcoesSemPrazoValidade[i].equals(idCobrancaAcao.toString())){
											acaoSemPrazoValidade = true;
											break;
										}
									}
								}

								// Caso a ação de cobrança do documento não tenha prazo de validade
								if(acaoSemPrazoValidade){
									// [SB0003] Verificar Atualização da Situação de Débito do Item
									itemAtualizado = this.verificarAtualizacaoDaSituacaoDeDebitoDoItem(cobrancaDocumentoItem,
													idSituacaoDeDebitoDoItem, dataDaSituacaoDeDebitoDoItem, idSituacaoDeDebitoAtual);

									if(itemAtualizado){
										colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
									}
								}else{
									numeroDiasValidade = cobrancaAcao.getNumeroDiasValidade();

									if(dataEmissao != null && numeroDiasValidade != null && dataDaSituacaoDeDebitoDoItem != null){
										dataCalculada = Util.adicionarNumeroDiasDeUmaData(dataEmissao, numeroDiasValidade);

										// Caso a ação esteja dentro do prazo de validade
										if(dataCalculada.compareTo(dataDaSituacaoDeDebitoDoItem) >= 0){

											// Caso a ação seja uma ação do tipo precedente
											filtroCobrancaAcaoSucessora = new FiltroCobrancaAcao();
											filtroCobrancaAcaoSucessora.adicionarParametro(new ParametroSimples(
															FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID, idCobrancaAcao));

											colecaoCobrancaAcaoSucessora = this.getControladorUtil().pesquisar(filtroCobrancaAcaoSucessora,
															CobrancaAcao.class.getName());

											if(!Util.isVazioOrNulo(colecaoCobrancaAcaoSucessora)){
												acaoSucessoraGerada = true;

												for(CobrancaAcao cobrancaAcaoSucessora : colecaoCobrancaAcaoSucessora){
													idCobrancaAcaoSucessora = cobrancaAcaoSucessora.getId();

													numeroDiasMinimoAcaoPrecedente = cobrancaAcaoSucessora
																	.getNumeroDiasMinimoAcaoPrecedente();

													if(numeroDiasMinimoAcaoPrecedente != null){
														dataCalculada = Util.adicionarNumeroDiasDeUmaData(dataEmissao,
																		numeroDiasMinimoAcaoPrecedente);

														acaoSucessoraGerada = this.verificaSeAcaoSucessoraFoiGerada(
																		idCobrancaAcaoSucessora, idImovel, dataCalculada);

														if(acaoSucessoraGerada){
															break;
														}
													}
												}

												// Caso a ação sucessora não tenha sido gerada
												if(!acaoSucessoraGerada){
													// [SB0003] Verificar Atualização da Situação de
													// Débito do Item
													itemAtualizado = this.verificarAtualizacaoDaSituacaoDeDebitoDoItem(
																	cobrancaDocumentoItem, idSituacaoDeDebitoDoItem,
																	dataDaSituacaoDeDebitoDoItem, idSituacaoDeDebitoAtual);

													if(itemAtualizado){
														colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
													}
												}

											}else{
												// [SB0003] Verificar Atualização da Situação de
												// Débito do Item
												itemAtualizado = this.verificarAtualizacaoDaSituacaoDeDebitoDoItem(cobrancaDocumentoItem,
																idSituacaoDeDebitoDoItem, dataDaSituacaoDeDebitoDoItem,
																idSituacaoDeDebitoAtual);

												if(itemAtualizado){
													colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
												}
											}
										}
									}
								}
							}
						}else{
							// [SB0002] Tratar Situação de Débito do Item conforme a Ação de
							// Cobrança do Documento

							cobrancaAcao = cobrancaDocumento.getCobrancaAcao();

							if(cobrancaAcao != null){
								idCobrancaAcao = cobrancaAcao.getId();

								if(idCobrancaAcao.intValue() == CobrancaAcao.AVISO_CORTE.intValue()){

									// Caso o documento de cobrança esteja associado a uma ação de
									// aviso de corte

									if(cobrancaAcaoCorteFisico != null){
										numeroDiasMinimoAcaoPrecedente = cobrancaAcaoCorteFisico.getNumeroDiasMinimoAcaoPrecedente();

										if(dataEmissao != null && numeroDiasMinimoAcaoPrecedente != null
														&& dataDaSituacaoDeDebitoDoItem != null){
											dataCalculada = Util.adicionarNumeroDiasDeUmaData(dataEmissao, numeroDiasMinimoAcaoPrecedente);

											// Caso não tenha atingido o prazo de realização do
											// corte físico
											if(dataCalculada.compareTo(dataDaSituacaoDeDebitoDoItem) > 0){
												// [SB0003] Verificar Atualização da Situação de
												// Débito do Item
												itemAtualizado = this.verificarAtualizacaoDaSituacaoDeDebitoDoItem(cobrancaDocumentoItem,
																idSituacaoDeDebitoDoItem, dataDaSituacaoDeDebitoDoItem,
																idSituacaoDeDebitoAtual);

												if(itemAtualizado){
													colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
												}
											}
										}
									}
								}else if(idCobrancaAcao.intValue() == CobrancaAcao.CORTE_FISICO.intValue()){

									// Caso o documento de cobrança esteja associado a uma ação de
									// corte físico

									if(cobrancaAcaoCorteFisico != null){
										cobrancaAcaoPredecessora = cobrancaAcaoCorteFisico.getCobrancaAcaoPredecessora();

										if(cobrancaAcaoPredecessora != null){
											idCobrancaAcaoPredecessora = cobrancaAcaoPredecessora.getId();

											numeroDiasMinimoAcaoPrecedente = cobrancaAcaoCorteFisico.getNumeroDiasMinimoAcaoPrecedente();

											if(dataEmissao != null && numeroDiasMinimoAcaoPrecedente != null){
												dataCalculada = Util.formatarDataFinal(dataEmissao);

												cobrancaDocumentoAux = this.obterCobrancaDocumentoComDataImediatamenteMenorOuIgual(
																idCobrancaAcaoPredecessora, idImovel, dataCalculada);

												if(cobrancaDocumentoAux != null){
													dataEmissaoAux = cobrancaDocumentoAux.getEmissao();

													if(dataEmissaoAux != null){
														// Tratar apenas a parte de data
														dataEmissaoAux = Util.formatarDataInicial(dataEmissaoAux);

														dataEmissaoAux = Util.adicionarNumeroDiasDeUmaData(dataEmissaoAux,
																		numeroDiasMinimoAcaoPrecedente);

														// Caso tenha atingido o prazo de realização
														// do corte físico e o documento esteja
														// dentro do prazo de validade

														if(dataEmissaoAux.compareTo(dataDaSituacaoDeDebitoDoItem) <= 0){
															numeroDiasValidade = cobrancaAcaoCorteFisico.getNumeroDiasValidade();

															if(numeroDiasValidade != null){

																dataCalculada = Util.adicionarNumeroDiasDeUmaData(dataEmissao,
																				numeroDiasValidade);

																if(dataCalculada.compareTo(dataDaSituacaoDeDebitoDoItem) >= 0){
																	// [SB0003] Verificar
																	// Atualização da Situação de
																	// Débito do Item
																	itemAtualizado = this.verificarAtualizacaoDaSituacaoDeDebitoDoItem(
																					cobrancaDocumentoItem, idSituacaoDeDebitoDoItem,
																					dataDaSituacaoDeDebitoDoItem, idSituacaoDeDebitoAtual);

																	if(itemAtualizado){
																		colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoItemAtualizar);
				}
			}
		}
	}

	/**
	 * [UC3082] Atualizar Item Documento Cobrança
	 * [SB0003] Verificar Atualização da Situação de Débito do Item
	 * 
	 * @author Hebert Falcão
	 * @date 08/12/2012
	 */
	private boolean verificarAtualizacaoDaSituacaoDeDebitoDoItem(CobrancaDocumentoItem cobrancaDocumentoItem,
					Integer idSituacaoDeDebitoDoItem, Date dataDaSituacaoDeDebitoDoItem, Integer idSituacaoDeDebitoAtual){

		boolean itemAtualizado = false;

		if(cobrancaDocumentoItem != null){
			CobrancaDebitoSituacao cobrancaDebitoSituacao = cobrancaDocumentoItem.getCobrancaDebitoSituacao();

			if(cobrancaDebitoSituacao != null){
				Integer idCobrancaDebitoSituacao = cobrancaDebitoSituacao.getId();

				if(idSituacaoDeDebitoAtual != null && idCobrancaDebitoSituacao.intValue() == idSituacaoDeDebitoAtual.intValue()){
					CobrancaDebitoSituacao situacaoDeDebitoDoItem = new CobrancaDebitoSituacao();
					situacaoDeDebitoDoItem.setId(idSituacaoDeDebitoDoItem);

					cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDeDebitoDoItem);
					cobrancaDocumentoItem.setDataSituacaoDebito(dataDaSituacaoDeDebitoDoItem);
					cobrancaDocumentoItem.setIndicadorAtualizado(ConstantesSistema.SIM);
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					itemAtualizado = true;
				}
			}
		}

		return itemAtualizado;
	}

	/**
	 * [UC3082] Atualizar Item Documento Cobrança
	 * Obter cobrança documento com data imediatamente menor ou igual a data passada
	 * 
	 * @author Hebert Falcão
	 * @date 09/12/2012
	 */
	public CobrancaDocumento obterCobrancaDocumentoComDataImediatamenteMenorOuIgual(Integer idCobrancaAcao, Integer idImovel,
					Date dataCalculada) throws ControladorException{

		try{
			return repositorioCobranca.obterCobrancaDocumentoComDataImediatamenteMenorOuIgual(idCobrancaAcao, idImovel, dataCalculada);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3082] Atualizar Item Documento Cobrança
	 * Verifica se a ação sucessora foi gerada
	 * 
	 * @author Hebert Falcão
	 * @date 09/12/2012
	 */
	public boolean verificaSeAcaoSucessoraFoiGerada(Integer idCobrancaAcao, Integer idImovel, Date dataCalculada)
					throws ControladorException{

		try{
			return repositorioCobranca.verificaSeAcaoSucessoraFoiGerada(idCobrancaAcao, idImovel, dataCalculada);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * Obter cobrança documento de aviso de corte e corte, com ítem atualizados
	 * 
	 * @author Hebert Falcão
	 * @date 21/12/2012
	 */
	public Collection<CobrancaDocumento> obterCobrancaDocumentoDeAvisoDeCorteECorteComItemAualizado() throws ControladorException{

		try{
			return repositorioCobranca.obterCobrancaDocumentoDeAvisoDeCorteECorteComItemAualizado();
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * Verifica a existência de aviso de corte, sem comando, fora do prazo de validade, com situação
	 * da ação "entregue" e com situação do débito "pendente"
	 * 
	 * @date 28/12/2012
	 * @author Hebert Falcão
	 */
	public Collection<CobrancaDocumento> obterAvisoDeCorteSemComandoForaDoPrazoDeValidadeEntegueEPendente() throws ControladorException{

		try{
			return repositorioCobranca.obterAvisoDeCorteSemComandoForaDoPrazoDeValidadeEntegueEPendente();
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * Verifica a existência de corte, sem comando, fora do prazo de validade, com situação da ação
	 * "pendente" e com situação do débito "pendente"
	 * 
	 * @date 28/12/2012
	 * @author Hebert Falcão
	 */
	public Collection<CobrancaDocumento> obterCorteSemComandoForaDoPrazoDeValidadePendente() throws ControladorException{

		try{
			return repositorioCobranca.obterCorteSemComandoForaDoPrazoDeValidadePendente();
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * 
	 * @author Hebert Falcão
	 * @date 14/12/2012
	 */
	public void atualizarSituacaoDebitoEAcaoDosAvisosCorteECorteIndividual(int idFuncionalidadeIniciada, Integer idProcessoIniciado)
					throws ControladorException{

		int idUnidadeIniciada = this.getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try{
			// Caso exista aviso de corte e corte, sem comando e com item atualizado
			Collection<CobrancaDocumento> colecaoCobrancaDocumento = this.obterCobrancaDocumentoDeAvisoDeCorteECorteComItemAualizado();

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
				Collection<Object> colecaoCobrancaDocumentoAtualizar = new ArrayList<Object>();
				Collection<Object> colecaoCobrancaDocumentoItemAtualizar = new ArrayList<Object>();
				Collection<Object> colecaoHistoricoManutencaoLigacaoAtualizar = new ArrayList<Object>();

				Object[] retornoAtualizarSituacao = null;

				for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
					// [SB0001] Atualizar Situação do Débito do Documento
					retornoAtualizarSituacao = this.atualizarSituacaoDebitoDocumento(cobrancaDocumento);

					if(retornoAtualizarSituacao != null){
						if(retornoAtualizarSituacao[0] != null){
							colecaoCobrancaDocumentoAtualizar.add(retornoAtualizarSituacao[0]);
						}

						if(retornoAtualizarSituacao[1] != null){
							colecaoCobrancaDocumentoItemAtualizar.addAll((Collection<Object>) retornoAtualizarSituacao[1]);
						}

						if(retornoAtualizarSituacao[2] != null){
							colecaoHistoricoManutencaoLigacaoAtualizar.add(retornoAtualizarSituacao[2]);
						}
					}
				}

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoAtualizar);
				}

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItemAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoItemAtualizar);
				}

				if(!Util.isVazioOrNulo(colecaoHistoricoManutencaoLigacaoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoHistoricoManutencaoLigacaoAtualizar);
				}
			}

			// Caso exista aviso de corte, sem comando, fora do prazo de validade, com situação da
			// ação "entregue" e com situação do débito "pendente"
			colecaoCobrancaDocumento = this.obterAvisoDeCorteSemComandoForaDoPrazoDeValidadeEntegueEPendente();

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
				Collection<Object> colecaoCobrancaDocumentoAtualizar = new ArrayList<Object>();
				Collection<Object> colecaoHistoricoManutencaoLigacaoAtualizar = new ArrayList<Object>();

				Object[] retornoCancelarAcao = null;

				// [SB0003] Cancelar Ação por Decurso do Prazo
				for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
					retornoCancelarAcao = this.cancelarAcaoPorDecursoDoPrazo(cobrancaDocumento);

					if(retornoCancelarAcao[0] != null){
						colecaoCobrancaDocumentoAtualizar.add(retornoCancelarAcao[0]);
					}

					if(retornoCancelarAcao[1] != null){
						colecaoHistoricoManutencaoLigacaoAtualizar.add(retornoCancelarAcao[1]);
					}
				}

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoAtualizar);
				}

				if(!Util.isVazioOrNulo(colecaoHistoricoManutencaoLigacaoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoHistoricoManutencaoLigacaoAtualizar);
				}
			}

			// Caso exista corte, sem comando, fora do prazo de validade, com situação da ação
			// "pendente" e com situação do débito "pendente"
			colecaoCobrancaDocumento = this.obterCorteSemComandoForaDoPrazoDeValidadePendente();

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumento)){
				Collection<Object> colecaoCobrancaDocumentoAtualizar = new ArrayList<Object>();
				Collection<Object> colecaoHistoricoManutencaoLigacaoAtualizar = new ArrayList<Object>();

				Object[] retornoCancelarAcao = null;

				// [SB0003] Cancelar Ação por Decurso do Prazo
				for(CobrancaDocumento cobrancaDocumento : colecaoCobrancaDocumento){
					retornoCancelarAcao = this.cancelarAcaoPorDecursoDoPrazo(cobrancaDocumento);

					if(retornoCancelarAcao[0] != null){
						colecaoCobrancaDocumentoAtualizar.add(retornoCancelarAcao[0]);
					}

					if(retornoCancelarAcao[1] != null){
						colecaoHistoricoManutencaoLigacaoAtualizar.add(retornoCancelarAcao[1]);
					}
				}

				if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoCobrancaDocumentoAtualizar);
				}

				if(!Util.isVazioOrNulo(colecaoHistoricoManutencaoLigacaoAtualizar)){
					this.getControladorBatch().atualizarColecaoObjetoParaBatch(colecaoHistoricoManutencaoLigacaoAtualizar);
				}
			}

			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);
		}catch(Exception e){
			e.printStackTrace();
			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * [SB0001] Atualizar Situação do Débito do Documento
	 * 
	 * @author Hebert Falcão
	 * @date 27/12/2012
	 */
	private Object[] atualizarSituacaoDebitoDocumento(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		Collection<Object> colecaoCobrancaDocumentoItemAtualizar = null;

		HistoricoManutencaoLigacao historicoManutencaoLigacao = null;

		if(cobrancaDocumento != null){
			Integer idCobrancaDocumento = cobrancaDocumento.getId();

			CobrancaAcao cobrancaAcao = cobrancaDocumento.getCobrancaAcao();

			FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
			filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
							idCobrancaDocumento));
			filtroCobrancaDocumentoItem.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumentoItem.COBRANCA_DEBITO_SITUACAO);

			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = this.getControladorUtil().pesquisar(
							filtroCobrancaDocumentoItem, CobrancaDocumentoItem.class.getName());

			if(!Util.isVazioOrNulo(colecaoCobrancaDocumentoItem)){
				colecaoCobrancaDocumentoItemAtualizar = new ArrayList<Object>();

				Short indicadorAtualizado = null;

				CobrancaDebitoSituacao cobrancaDebitoSituacao = null;

				Map<Integer, Object[]> itensPorSituacao = new HashMap<Integer, Object[]>();

				Integer idCobrancaDebitoSituacao = null;

				BigDecimal valorItemCobrado = null;
				Integer quantidade = null;
				Date maiorDataSituacaoDebito = null;

				Object[] arrayAux = null;
				BigDecimal valorItemCobradoAux = null;
				Integer quantidadeAux = null;
				Date maiorDataSituacaoDebitoAux = null;

				for(CobrancaDocumentoItem cobrancaDocumentoItem : colecaoCobrancaDocumentoItem){
					indicadorAtualizado = cobrancaDocumentoItem.getIndicadorAtualizado();

					// Apenas os itens atualizados devem ser alterados
					if(indicadorAtualizado != null && indicadorAtualizado.shortValue() == ConstantesSistema.SIM.shortValue()){

						// Para cada item selecionado, atualiza o item do documento de cobrança
						cobrancaDocumentoItem.setIndicadorAtualizado(ConstantesSistema.NAO);
						cobrancaDocumentoItem.setUltimaAlteracao(new Date());

						colecaoCobrancaDocumentoItemAtualizar.add(cobrancaDocumentoItem);
					}

					cobrancaDebitoSituacao = cobrancaDocumentoItem.getCobrancaDebitoSituacao();

					if(cobrancaDebitoSituacao != null){
						idCobrancaDebitoSituacao = cobrancaDebitoSituacao.getId();

						valorItemCobrado = cobrancaDocumentoItem.getValorItemCobrado();
						quantidade = 1;
						maiorDataSituacaoDebito = cobrancaDocumentoItem.getDataSituacaoDebito();

						if(itensPorSituacao.containsKey(idCobrancaDebitoSituacao)){
							arrayAux = itensPorSituacao.get(idCobrancaDebitoSituacao);

							valorItemCobradoAux = (BigDecimal) arrayAux[0];
							quantidadeAux = (Integer) arrayAux[1];
							maiorDataSituacaoDebitoAux = (Date) arrayAux[2];

							valorItemCobrado = valorItemCobrado.add(valorItemCobradoAux);
							quantidade = quantidade + quantidadeAux;

							if(maiorDataSituacaoDebitoAux != null && maiorDataSituacaoDebito != null
											&& maiorDataSituacaoDebitoAux.after(maiorDataSituacaoDebito)){
								maiorDataSituacaoDebito = maiorDataSituacaoDebitoAux;
							}else if(maiorDataSituacaoDebito == null){
								maiorDataSituacaoDebito = maiorDataSituacaoDebitoAux;
							}
						}

						arrayAux = new Object[3];
						arrayAux[0] = valorItemCobrado;
						arrayAux[1] = quantidade;
						arrayAux[2] = maiorDataSituacaoDebito;

						itensPorSituacao.put(idCobrancaDebitoSituacao, arrayAux);
					}
				}

				// [SB0002] - Determinar Situação Predominante do Débito do Documento de Cobrança
				if(itensPorSituacao != null){
					CobrancaDebitoSituacao cobrancaDebitoSituacaoPredominante = null;
					Date dataSituacaoDebito = null;

					Integer qtdSituacoes = itensPorSituacao.size();

					if(qtdSituacoes.intValue() == 1 && itensPorSituacao.containsKey(CobrancaDebitoSituacao.PENDENTE)){
						// Caso para o documento de cobrança todos os itens estejam na situação do
						// débito de item "pendente"

						cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
						cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.PENDENTE);

						dataSituacaoDebito = null;
					}else{
						BigDecimal percentualValorMinimoPagoParceladoCancelado = BigDecimal.ZERO;
						BigDecimal percentualQuantidadeMinimoPagoParceladoCancelado = BigDecimal.ZERO;

						if(cobrancaAcao != null){
							CobrancaCriterio cobrancaCriterio = cobrancaAcao.getCobrancaCriterio();

							if(cobrancaCriterio != null){
								percentualValorMinimoPagoParceladoCancelado = cobrancaCriterio
												.getPercentualValorMinimoPagoParceladoCancelado();

								percentualQuantidadeMinimoPagoParceladoCancelado = cobrancaCriterio
												.getPercentualQuantidadeMinimoPagoParceladoCancelado();
							}
						}

						// Calcula o valor mínimo para considerar o documento pago / parcelado /
						// cancelado
						BigDecimal valorMinimo = null;

						BigDecimal valorDocumento = cobrancaDocumento.getValorDocumento();

						if(valorDocumento != null && percentualValorMinimoPagoParceladoCancelado != null){
							BigDecimal valorAux = percentualValorMinimoPagoParceladoCancelado.divide(new BigDecimal(100));

							valorMinimo = valorDocumento.multiply(valorAux);
						}

						// Calcula a quantidade mínima de itens para considerar o documento pago /
						// parcelado / cancelado
						Integer quantidadeMinima = null;

						if(percentualQuantidadeMinimoPagoParceladoCancelado != null){
							int quantidadeItens = colecaoCobrancaDocumentoItem.size();

							BigDecimal valorAux = percentualQuantidadeMinimoPagoParceladoCancelado.divide(new BigDecimal(100));
							Integer valorAuxInt = valorAux.intValue();

							quantidadeMinima = quantidadeItens * valorAuxInt;
						}

						// Situação Pago
						if(itensPorSituacao.containsKey(CobrancaDebitoSituacao.PAGO)){
							arrayAux = itensPorSituacao.get(CobrancaDebitoSituacao.PAGO);

							BigDecimal valorSituacao = (BigDecimal) arrayAux[0];
							Integer quantidadeSituacao = (Integer) arrayAux[1];
							Date maiorDataSituacao = (Date) arrayAux[2];

							if((valorSituacao != null && valorMinimo != null && valorSituacao.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacao != null && quantidadeMinima != null && quantidadeSituacao >= quantidadeMinima)){
								cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
								cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.PAGO);

								dataSituacaoDebito = maiorDataSituacao;
							}
						}

						// Situação Pacelado
						if(cobrancaDebitoSituacaoPredominante == null && itensPorSituacao.containsKey(CobrancaDebitoSituacao.PARCELADO)){
							arrayAux = itensPorSituacao.get(CobrancaDebitoSituacao.PARCELADO);

							BigDecimal valorSituacao = (BigDecimal) arrayAux[0];
							Integer quantidadeSituacao = (Integer) arrayAux[1];
							Date maiorDataSituacao = (Date) arrayAux[2];

							if((valorSituacao != null && valorMinimo != null && valorSituacao.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacao != null && quantidadeMinima != null && quantidadeSituacao >= quantidadeMinima)){
								cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
								cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.PARCELADO);

								dataSituacaoDebito = maiorDataSituacao;
							}
						}

						// Situação Cancelado
						if(cobrancaDebitoSituacaoPredominante == null && itensPorSituacao.containsKey(CobrancaDebitoSituacao.CANCELADO)){
							arrayAux = itensPorSituacao.get(CobrancaDebitoSituacao.CANCELADO);

							BigDecimal valorSituacao = (BigDecimal) arrayAux[0];
							Integer quantidadeSituacao = (Integer) arrayAux[1];
							Date maiorDataSituacao = (Date) arrayAux[2];

							if((valorSituacao != null && valorMinimo != null && valorSituacao.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacao != null && quantidadeMinima != null && quantidadeSituacao >= quantidadeMinima)){
								cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
								cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.CANCELADO);

								dataSituacaoDebito = maiorDataSituacao;
							}
						}

						// Situação Excluído
						if(cobrancaDebitoSituacaoPredominante == null && itensPorSituacao.containsKey(CobrancaDebitoSituacao.EXCLUIDO)){
							arrayAux = itensPorSituacao.get(CobrancaDebitoSituacao.EXCLUIDO);

							BigDecimal valorSituacao = (BigDecimal) arrayAux[0];
							Integer quantidadeSituacao = (Integer) arrayAux[1];
							Date maiorDataSituacao = (Date) arrayAux[2];

							if((valorSituacao != null && valorMinimo != null && valorSituacao.compareTo(valorMinimo) >= 0)
											|| (quantidadeSituacao != null && quantidadeMinima != null && quantidadeSituacao >= quantidadeMinima)){
								cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
								cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.EXCLUIDO);

								dataSituacaoDebito = maiorDataSituacao;
							}
						}

						// Caso não entre nas situações anteriores
						if(cobrancaDebitoSituacaoPredominante == null){
							cobrancaDebitoSituacaoPredominante = new CobrancaDebitoSituacao();
							cobrancaDebitoSituacaoPredominante.setId(CobrancaDebitoSituacao.PENDENTE);

							dataSituacaoDebito = null;
						}
					}

					Short indicadorAntesApos = null;

					Date dataSituacaoAcao = cobrancaDocumento.getDataSituacaoAcao();

					if(dataSituacaoAcao == null || dataSituacaoDebito == null){
						indicadorAntesApos = null;
					}else if(dataSituacaoAcao != null && dataSituacaoDebito != null && dataSituacaoAcao.before(dataSituacaoDebito)){
						indicadorAntesApos = ConstantesSistema.SIM;
					}else{
						indicadorAntesApos = ConstantesSistema.NAO;
					}

					// [SB0004] - Verificar Situação Débito Documento x Situação Ordem Serviço
					if(cobrancaDebitoSituacaoPredominante != null){
						Integer idCobrancaDebitoSituacaoPredominante = cobrancaDebitoSituacaoPredominante.getId();

						if(idCobrancaDebitoSituacaoPredominante != null
										&& idCobrancaDebitoSituacaoPredominante.intValue() != CobrancaDebitoSituacao.PENDENTE.intValue()){

							FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();
							filtroOrdemServico.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroOrdemServico.SITUACAO,
											OrdemServico.SITUACAO_ENCERRADO));
							filtroOrdemServico.adicionarParametro(new ParametroSimples(FiltroOrdemServico.COBRANCA_DOCUMENTO_ID,
											idCobrancaDocumento));
							filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.IMOVEL);
							filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.IMOVEL_LOCALIDADE);

							Collection<OrdemServico> colecaoOrdemServico = this.getControladorUtil().pesquisar(filtroOrdemServico,
											OrdemServico.class.getName());

							if(!Util.isVazioOrNulo(colecaoOrdemServico)){
								OSEncerramentoHelper ordemServicoHelper = null;

								Integer idOrdemServico = null;

								String idMotivoEncerramento = Integer.toString(AtendimentoMotivoEncerramento.ENCERRAMENTO_AUTOMATICO);

								Usuario usuarioLogado = Usuario.USUARIO_BATCH;

								Imovel imovel = null;
								Localidade localidade = null;
								Integer idLocalidade = null;
								UnidadeOrganizacional unidadeOrganizacional = null;

								for(OrdemServico ordemServico : colecaoOrdemServico){
									// [UC0457] - Encerrar Ordem de Serviço

									idOrdemServico = ordemServico.getId();

									ordemServicoHelper = new OSEncerramentoHelper();
									ordemServicoHelper.setNumeroOS(idOrdemServico);
									ordemServicoHelper.setIdMotivoEncerramento(idMotivoEncerramento);
									ordemServicoHelper.setDataExecucao(new Date());
									ordemServicoHelper.setUltimaAlteracao(new Date());

									unidadeOrganizacional = null;

									imovel = ordemServico.getImovel();

									if(imovel != null){
										localidade = imovel.getLocalidade();

										if(localidade != null){
											idLocalidade = localidade.getId();

											unidadeOrganizacional = this.getControladorUnidade().pesquisarUnidadeOrganizacionalLocalidade(
															idLocalidade);
										}
									}

									usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);

									ordemServicoHelper.setUsuarioLogado(usuarioLogado);

									this.getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
													OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);
								}
							}
						}
					}

					// Atualiza a tabela COBRANCA_DOCUMENTO
					cobrancaDocumento.setCobrancaDebitoSituacao(cobrancaDebitoSituacaoPredominante);
					cobrancaDocumento.setDataSituacaoDebito(dataSituacaoDebito);
					cobrancaDocumento.setIndicadorAntesApos(indicadorAntesApos);
					cobrancaDocumento.setUltimaAlteracao(new Date());

					if(cobrancaAcao != null){
						DocumentoTipo documentoTipo = cobrancaAcao.getDocumentoTipo();

						if(documentoTipo != null){
							Short indicadorGerarHistoricoImovel = documentoTipo.getIndicadorGerarHistoricoImovel();

							if(indicadorGerarHistoricoImovel != null
											&& indicadorGerarHistoricoImovel.shortValue() == ConstantesSistema.SIM.shortValue()){
								FiltroHistoricoManutencaoLigacao filtroHistoricoManutencaoLigacao = new FiltroHistoricoManutencaoLigacao();
								filtroHistoricoManutencaoLigacao.adicionarParametro(new ParametroSimples(
												FiltroHistoricoManutencaoLigacao.COBRANCA_DOCUMENTO_ID, idCobrancaDocumento));

								Collection<HistoricoManutencaoLigacao> colecaoHistoricoManutencaoLigacao = this.getControladorUtil()
												.pesquisar(filtroHistoricoManutencaoLigacao, HistoricoManutencaoLigacao.class.getName());

								if(!Util.isVazioOrNulo(colecaoHistoricoManutencaoLigacao)){
									historicoManutencaoLigacao = (HistoricoManutencaoLigacao) Util
													.retonarObjetoDeColecao(colecaoHistoricoManutencaoLigacao);

									historicoManutencaoLigacao.setCobrancaAcaoSituacao(cobrancaDocumento.getCobrancaAcaoSituacao());
									historicoManutencaoLigacao.setDataSituacaoDocumento(cobrancaDocumento.getDataSituacaoAcao());
									historicoManutencaoLigacao.setCobrancaDebitoSituacao(cobrancaDocumento.getCobrancaDebitoSituacao());
									historicoManutencaoLigacao.setDataSituacaoDebito(cobrancaDocumento.getDataSituacaoDebito());
									historicoManutencaoLigacao.setUltimaAlteracao(new Date());
								}
							}
						}
					}
				}
			}
		}

		Object[] retornoAtualizarSituacao = new Object[3];
		retornoAtualizarSituacao[0] = cobrancaDocumento;
		retornoAtualizarSituacao[1] = colecaoCobrancaDocumentoItemAtualizar;
		retornoAtualizarSituacao[2] = historicoManutencaoLigacao;

		return retornoAtualizarSituacao;
	}

	/**
	 * [UC3089] Atualizar Situação Débito e da Ação dos Avisos Corte e Corte Individual
	 * [SB0003] Cancelar Ação por Decurso do Prazo
	 * 
	 * @author Hebert Falcão
	 * @date 27/12/2012
	 */
	private Object[] cancelarAcaoPorDecursoDoPrazo(CobrancaDocumento cobrancaDocumento) throws ControladorException{

		HistoricoManutencaoLigacao historicoManutencaoLigacao = null;

		if(cobrancaDocumento != null){
			Integer idCobrancaDocumento = cobrancaDocumento.getId();

			CobrancaAcaoSituacao cobrancaAcaoSituacaoCanceladaPrazo = new CobrancaAcaoSituacao();
			cobrancaAcaoSituacaoCanceladaPrazo.setId(CobrancaAcaoSituacao.CANCELADA_PRAZO);

			Date dataSituacaoAcao = cobrancaDocumento.getDataSituacaoAcao();
			Date dataSituacaoDebito = cobrancaDocumento.getDataSituacaoDebito();

			Short indicadorAntesApos = null;

			if(dataSituacaoAcao == null || dataSituacaoDebito == null){
				indicadorAntesApos = null;
			}else if(dataSituacaoAcao != null && dataSituacaoDebito != null && dataSituacaoAcao.before(dataSituacaoDebito)){
				indicadorAntesApos = ConstantesSistema.SIM;
			}else{
				indicadorAntesApos = ConstantesSistema.NAO;
			}

			cobrancaDocumento.setCobrancaAcaoSituacao(cobrancaAcaoSituacaoCanceladaPrazo);
			cobrancaDocumento.setDataSituacaoAcao(new Date());
			cobrancaDocumento.setIndicadorAntesApos(indicadorAntesApos);
			cobrancaDocumento.setUltimaAlteracao(new Date());

			CobrancaAcao cobrancaAcao = cobrancaDocumento.getCobrancaAcao();

			if(cobrancaAcao != null){
				DocumentoTipo documentoTipo = cobrancaAcao.getDocumentoTipo();

				if(documentoTipo != null){
					Short indicadorGerarHistoricoImovel = documentoTipo.getIndicadorGerarHistoricoImovel();

					if(indicadorGerarHistoricoImovel != null
									&& indicadorGerarHistoricoImovel.shortValue() == ConstantesSistema.SIM.shortValue()){
						FiltroHistoricoManutencaoLigacao filtroHistoricoManutencaoLigacao = new FiltroHistoricoManutencaoLigacao();
						filtroHistoricoManutencaoLigacao.adicionarParametro(new ParametroSimples(
										FiltroHistoricoManutencaoLigacao.COBRANCA_DOCUMENTO_ID, idCobrancaDocumento));

						Collection<HistoricoManutencaoLigacao> colecaoHistoricoManutencaoLigacao = this.getControladorUtil().pesquisar(
										filtroHistoricoManutencaoLigacao, HistoricoManutencaoLigacao.class.getName());

						if(!Util.isVazioOrNulo(colecaoHistoricoManutencaoLigacao)){
							historicoManutencaoLigacao = (HistoricoManutencaoLigacao) Util
											.retonarObjetoDeColecao(colecaoHistoricoManutencaoLigacao);

							historicoManutencaoLigacao.setCobrancaAcaoSituacao(cobrancaDocumento.getCobrancaAcaoSituacao());
							historicoManutencaoLigacao.setDataSituacaoDocumento(cobrancaDocumento.getDataSituacaoAcao());
							historicoManutencaoLigacao.setCobrancaDebitoSituacao(cobrancaDocumento.getCobrancaDebitoSituacao());
							historicoManutencaoLigacao.setDataSituacaoDebito(cobrancaDocumento.getDataSituacaoDebito());
							historicoManutencaoLigacao.setUltimaAlteracao(new Date());
						}
					}
				}
			}

			// Caso exista ordem de serviço pendente associada ao documento de cobrança

			FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();
			filtroOrdemServico.adicionarParametro(new ParametroSimplesDiferenteDe(FiltroOrdemServico.SITUACAO,
							OrdemServico.SITUACAO_ENCERRADO));
			filtroOrdemServico.adicionarParametro(new ParametroSimples(FiltroOrdemServico.COBRANCA_DOCUMENTO_ID, idCobrancaDocumento));
			filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.IMOVEL);
			filtroOrdemServico.adicionarCaminhoParaCarregamentoEntidade(FiltroOrdemServico.IMOVEL_LOCALIDADE);

			Collection<OrdemServico> colecaoOrdemServico = this.getControladorUtil().pesquisar(filtroOrdemServico,
							OrdemServico.class.getName());

			if(!Util.isVazioOrNulo(colecaoOrdemServico)){
				OSEncerramentoHelper ordemServicoHelper = null;

				Integer idOrdemServico = null;

				String idMotivoEncerramento = Integer.toString(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO);

				Usuario usuarioLogado = Usuario.USUARIO_BATCH;

				Imovel imovel = null;
				Localidade localidade = null;
				Integer idLocalidade = null;
				UnidadeOrganizacional unidadeOrganizacional = null;

				for(OrdemServico ordemServico : colecaoOrdemServico){
					// [UC0457] - Encerrar Ordem de Serviço

					idOrdemServico = ordemServico.getId();

					ordemServicoHelper = new OSEncerramentoHelper();
					ordemServicoHelper.setNumeroOS(idOrdemServico);
					ordemServicoHelper.setIdMotivoEncerramento(idMotivoEncerramento);
					ordemServicoHelper.setDataExecucao(new Date());
					ordemServicoHelper.setUltimaAlteracao(new Date());

					unidadeOrganizacional = null;

					imovel = ordemServico.getImovel();

					if(imovel != null){
						localidade = imovel.getLocalidade();

						if(localidade != null){
							idLocalidade = localidade.getId();

							unidadeOrganizacional = this.getControladorUnidade().pesquisarUnidadeOrganizacionalLocalidade(idLocalidade);
						}
					}

					usuarioLogado.setUnidadeOrganizacional(unidadeOrganizacional);

					ordemServicoHelper.setUsuarioLogado(usuarioLogado);

					this.getControladorOrdemServico().encerrarOSSemExecucao(ordemServicoHelper, null,
									OrigemEncerramentoOrdemServico.ENCERRAMENTO_ORDEM_SERVICO, null);
				}
			}

		}

		Object[] retornoCancelarAcao = new Object[2];
		retornoCancelarAcao[0] = cobrancaDocumento;
		retornoCancelarAcao[1] = historicoManutencaoLigacao;

		return retornoCancelarAcao;
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Map<Categoria, BigDecimal> calcularReajustaConta(String localidade, String unidadeNegocio, String gerenciaRegional,
					boolean isFinanciamento) throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		int anoMesFaturamento = Util.subtrairMesDoAnoMes(sistemaParametro.getAnoMesFaturamento(), 1);

		Collection<Conta> contas = pesquisarContasAVencer(localidade, unidadeNegocio, gerenciaRegional, isFinanciamento);

		Map<Categoria, BigDecimal> reajustaConta = calcularReajustaConta(contas, String.valueOf(anoMesFaturamento));
		Set<Categoria> keys = reajustaConta.keySet();
		List<Categoria> listKeys = new ArrayList<Categoria>(keys);
		Collections.sort(listKeys, new Comparator<Categoria>() {

			public int compare(Categoria o1, Categoria o2){

				return o1.getId().compareTo(o2.getId());
			}
		});
		// Retorna Map com as categorias ordenadas por ID.
		Map<Categoria, BigDecimal> retorno = new HashMap<Categoria, BigDecimal>();
		for(Categoria categoria : listKeys){
			retorno.put(categoria, reajustaConta.get(categoria));
		}

		return retorno;
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioAguaEsgoto(String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional)
					throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		int anoMesFaturamento = Util.subtrairMesDoAnoMes(sistemaParametro.getAnoMesFaturamento(), 1);

		try{
			return repositorioCobranca.obterSomatorioAguaEsgoto(anoMesFaturamento, idLocalidade, idUnidadeNegocio, idGerenciaRegional);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioValorDebitosCobradosFinanciamentoOuParcelamento(String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional, boolean opcaoConsultaFinanciamento) throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		int anoMesFaturamento = Util.subtrairMesDoAnoMes(sistemaParametro.getAnoMesFaturamento(), 1);

		try{
			return repositorioCobranca.obterSomatorioValorDebitosCobradosFinanciamentoOuParcelamento(anoMesFaturamento, idLocalidade,
							idUnidadeNegocio, idGerenciaRegional, opcaoConsultaFinanciamento);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 03/01/2012
	 */
	public Collection<Object[]> obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento(String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional, boolean isFinanciado) throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		int anoMesFaturamento = Util.subtrairMesDoAnoMes(sistemaParametro.getAnoMesFaturamento(), 1);

		try{
			return repositorioCobranca.obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento(anoMesFaturamento, idLocalidade,
							idUnidadeNegocio, idGerenciaRegional, isFinanciado);
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Retorna coleção de Contas a vencer.
	 * Usado em: [UC3084] Gerar Relatório Contas A Receber Corrigido
	 * 
	 * @author André Lopes
	 * @date 28/12/2012
	 */
	private Collection<Conta> pesquisarContasAVencer(String localidade, String unidadeNegocio, String gerenciaRegional,
					boolean isFinanciamento) throws ControladorException{

		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		int anoMesFaturamento = Util.subtrairMesDoAnoMes(sistemaParametro.getAnoMesFaturamento(), 1);

		try{

			Collection<Object[]> objetos = repositorioCobranca.pesquisarContasVencidasParaReajustes(anoMesFaturamento, localidade,
							unidadeNegocio, gerenciaRegional, isFinanciamento);
			Collection<Conta> retorno = new ArrayList<Conta>();

			for(Object[] obj : objetos){
				Conta conta = new Conta();
				conta.setId((Integer) obj[0]);

				conta.setImovel(new Imovel());
				conta.getImovel().setId((Integer) obj[1]);

				conta.setDataRevisao((Date) obj[2]);
				conta.setReferencia((Integer) obj[3]);
				conta.setDataVencimentoConta((Date) obj[4]);
				conta.setValorAgua((BigDecimal) obj[5]);
				conta.setValorEsgoto((BigDecimal) obj[6]);
				conta.setDebitos((BigDecimal) obj[7]);
				conta.setValorCreditos((BigDecimal) obj[8]);
				conta.setIndicadorCobrancaMulta((Short) obj[9]);
				conta.setDataEmissao((Date) obj[10]);

				retorno.add(conta);
			}

			return retorno;

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
	}

	private Map<Categoria, BigDecimal> calcularReajustaConta(Collection<Conta> contas, String anoMesArrecadacao)
					throws ControladorException{

		String multa = ParametroCobranca.P_COBRAR_MULTA_POR_IMPONTUALIDADE.executar();
		String juros = ParametroCobranca.P_COBRAR_JUROS_POR_IMPONTUALIDADE.executar();
		String correcao = ParametroCobranca.P_COBRAR_CORRECAO_POR_IMPONTUALIDADE.executar();

		Map<Categoria, BigDecimal> mapCategoria = new HashMap<Categoria, BigDecimal>();

		for(Conta conta : contas){

			Imovel imovel = conta.getImovel();

			// Validar vai reajustar.
			Categoria categoriaPrincipal = getControladorImovel().obterPrincipalCategoriaImovel(imovel.getId());
			boolean calcularAcrescimo = true;

			if(Util.isNaoNuloBrancoZero(conta.getDataRevisao())){
				calcularAcrescimo = false;
			}else if(ConstantesSistema.NAO.equals(categoriaPrincipal.getIndicadorCobrancaAcrescimos())){
				calcularAcrescimo = false;
			}else{

				Cliente cliente = getControladorImovel().pesquisarClienteResponsavelImovel(imovel.getId());
				if(cliente != null){
					Cliente responsavel = getControladorCliente().consultarCliente(cliente.getId());
					if(ConstantesSistema.NAO.equals(responsavel.getIndicadorCobrancaAcrescimos())){
						calcularAcrescimo = false;
					}
				}
			}
			// FIM validar se vai reajustar.

			CalcularAcrescimoPorImpontualidadeHelper acrescimoPorImpontualidade = null;
			if(calcularAcrescimo){
				// Calcula o valor das multas cobradas para a conta
				BigDecimal valorMultasCobradas = getControladorFaturamento().pesquisarValorMultasCobradas(conta.getId());

				// UC0216
				acrescimoPorImpontualidade = calcularAcrescimoPorImpontualidadeBancoDeDados(conta.getReferencia(),
								conta.getDataVencimentoConta(), null, conta.getValorTotalContaSemImposto(), valorMultasCobradas,
								conta.getIndicadorCobrancaMulta(), anoMesArrecadacao, conta.getId(), conta.getDataEmissao(),
								ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

				// [UC0108] Obter Quantidade de Economias por Categoria
				Collection<Categoria> colecaoCategoriasImovel = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);

				if("1".equals(multa) && acrescimoPorImpontualidade != null
								&& acrescimoPorImpontualidade.getValorMulta().compareTo(BigDecimal.ZERO) > 0){

					// [UC0185] Obter Valor por Categoria, passando o valor da taxa
					Collection<BigDecimal> colecaoValorePorCategoria = getControladorImovel().obterValorPorCategoria(
									colecaoCategoriasImovel, acrescimoPorImpontualidade.getValorMulta());

					Iterator<BigDecimal> valorCategoriaIterator = colecaoValorePorCategoria.iterator();

					for(Categoria categoria : colecaoCategoriasImovel){
						if(mapCategoria.containsKey(categoria)){
							mapCategoria.put(categoria, mapCategoria.get(categoria).add(valorCategoriaIterator.next()));
						}else{
							mapCategoria.put(categoria, valorCategoriaIterator.next());
						}
					}
				}

				// Refatorar para os 2 tipos de impontualidades abaixo.

				if("1".equals(juros) && acrescimoPorImpontualidade != null
								&& acrescimoPorImpontualidade.getValorJurosMora().compareTo(BigDecimal.ZERO) > 0){

					// [UC0185] Obter Valor por Categoria, passando o valor da taxa
					Collection<BigDecimal> colecaoValorePorCategoria = getControladorImovel().obterValorPorCategoria(
									colecaoCategoriasImovel, acrescimoPorImpontualidade.getValorJurosMora());

					Iterator<BigDecimal> valorCategoriaIterator = colecaoValorePorCategoria.iterator();

					for(Categoria categoria : colecaoCategoriasImovel){
						if(mapCategoria.containsKey(categoria)){
							mapCategoria.put(categoria, mapCategoria.get(categoria).add(valorCategoriaIterator.next()));
						}else{
							mapCategoria.put(categoria, valorCategoriaIterator.next());
						}
					}

				}

				if("1".equals(correcao) && acrescimoPorImpontualidade != null
								&& acrescimoPorImpontualidade.getValorAtualizacaoMonetaria().compareTo(BigDecimal.ZERO) > 0){

					// [UC0185] Obter Valor por Categoria, passando o valor da taxa
					Collection<BigDecimal> colecaoValorePorCategoria = getControladorImovel().obterValorPorCategoria(
									colecaoCategoriasImovel, acrescimoPorImpontualidade.getValorAtualizacaoMonetaria());

					Iterator<BigDecimal> valorCategoriaIterator = colecaoValorePorCategoria.iterator();

					for(Categoria categoria : colecaoCategoriasImovel){
						if(mapCategoria.containsKey(categoria)){
							mapCategoria.put(categoria, mapCategoria.get(categoria).add(valorCategoriaIterator.next()));
						}else{
							mapCategoria.put(categoria, valorCategoriaIterator.next());
						}

					}
				}
			}

		} // for

		return mapCategoria;
	}

	/**
	 * [FS0041] - Verificar existência de guias correspondentes a prestações de parcelamento com
	 * concessão de desconto nos acréscimos
	 * 
	 * @author Yara Souza
	 * @date 19/01/2013
	 */
	public boolean verificarGuiaPagamentoParcelamentoComConcessaoDesconto(Integer idGuiaPagamento) throws ControladorException{

		try{
			return repositorioCobranca.verificarGuiaPagamentoParcelamentoComConcessaoDesconto(idGuiaPagamento);
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [FS0042] - Verificar existência de créditos a realizar correspondentes a desconto nos
	 * acréscimos concedido no parcelamento
	 * 
	 * @author Yara Souza
	 * @throws ControladorException
	 * @date 19/01/2013
	 */

	public Collection verificarCreditoARealiazarComConcessaoDesconto(Collection colecaoCreditoARealizar) throws ControladorException{

		// Créditos a realizar correspondentes a desconto nos acréscimos concedido no parcelamento
		// (existe ocorrência na tabela CREDITO_A_REALIZAR com CRAC_ID contido na lista de créditos
		// a realizar e PARC_ID com o valor diferente de nulo e PARC_ID=PARC_ID da tabela
		// PARCELAMENTO com PARC_VLDESCONTOACRESCIMOS com o valor diferente de nulo e de zero)

		boolean existeCreditoARealizar = false;

		Iterator it = colecaoCreditoARealizar.iterator();

		CreditoARealizar creditoARealizar = null;

		Collection colecaoCreditoARealizarRetorno = new ArrayList();

		while(it.hasNext()){
			creditoARealizar = (CreditoARealizar) it.next();

			try{
				existeCreditoARealizar = repositorioCobranca.verificarCreditoARealizarParcelamentoComConcessaoDesconto(creditoARealizar
								.getId());
			}catch(ErroRepositorioException e){
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			if(!existeCreditoARealizar){
				colecaoCreditoARealizarRetorno.add(creditoARealizar);
			}
		}

		return colecaoCreditoARealizarRetorno;
	}

	/**
	 */
	public Collection<Empresa> consultarEmpresaCobrancaAdministrativa() throws ControladorException{

		try{
			return repositorioCobranca.consultarEmpresaCobrancaAdministrativa();
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * UC3099-GerarCobrancaAdministrativa
	 * 
	 * @author Hiroshi Gonçalves
	 * @date 15/07/2013
	 * @return
	 * @throws ControladorException
	 */

	public void gerarCobrancaAdministrativa(Integer idCobrancaAcaoAtividadeComando) throws ControladorException{

		// [FS0002] - Verificar existência de itens para os documentos de cobrança
		boolean existeCobrancaDocumentoItem = false;

		FiltroSistemaParametro filtroSistemaParametro = new FiltroSistemaParametro();

		Collection colecaoSistemaParametro = getControladorUtil().pesquisar(filtroSistemaParametro, SistemaParametro.class.getName());

		SistemaParametro sistemaParametro = (SistemaParametro) colecaoSistemaParametro.iterator().next();
		CobrancaDebitoSituacao cobrancaDebitoSituacaoPendente = new CobrancaDebitoSituacao(1);

		try{

			// O sistema obtém os documentos gerados pelo comando de cobrança administrativa (a
			// partir da tabela COBRANCA_DOCUMENTO
			// com CACM_ID=CACM_ID recebido, ordenando pelo identificador do documento de cobrança
			// (CBDO_ID) )
			Collection colecaoCobrancaDocumento = RepositorioCobrancaHBM.getInstancia().obterCobrancaDocumentoPorCACM(
							idCobrancaAcaoAtividadeComando);

			// [FS0001] - Verificar existência dos documentos de cobrança administrativa
			if(colecaoCobrancaDocumento.isEmpty()){
				throw new ControladorException("atencao.documento_cobranca_administrativa.inexistente", null,
								idCobrancaAcaoAtividadeComando.toString());
			}

			Iterator itColecaoCobrancaDocumento = colecaoCobrancaDocumento.iterator();

			while(itColecaoCobrancaDocumento.hasNext()){
				// A data/hora mudará a cada documento
				Date dataAtual = new Date();
				// Para cada documento de cobrança selecionado:
				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) itColecaoCobrancaDocumento.next();

				BigDecimal percentualRemuneracao = RepositorioCobrancaHBM.getInstancia()
								.consultarPercentualRemuneracaoCobrancaAdministrativa(idCobrancaAcaoAtividadeComando,
												cobrancaDocumento.getId());

				Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = cobrancaDocumento.getCobrancaDocumentoItems();
				Iterator itColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();

				while(itColecaoCobrancaDocumentoItem.hasNext()){

					CobrancaDocumentoItem cobrancaDocumentoItem = (CobrancaDocumentoItem) itColecaoCobrancaDocumentoItem.next();

					// Para cada CONTA da lista de itens do documento de cobrança (seleciona a
					// partir da tabela
					// COBRANCA_DOCUMENTO_ITEM com CBDO_ID=CBDO_ID da tabela COBRANCA_DOCUMENTO e
					// CNTA_ID com o
					// valor diferente de nulo e DOTP_ID=DOTP_ID da tabela DOCUMENTO_TIPO para
					// DOTP_DSDOCUMENTOTIPO="CONTA",
					// caso existam itens do tipo conta):
					if(cobrancaDocumentoItem.getContaGeral() != null
									&& cobrancaDocumentoItem.getDocumentoTipo().getDescricaoDocumentoTipo().equals("CONTA")){
						existeCobrancaDocumentoItem = true;

						FiltroConta filtroConta = new FiltroConta();
						filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, cobrancaDocumentoItem.getContaGeral().getId()));

						Collection colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
						Conta conta = (Conta) Util.retonarObjetoDeColecao(colecaoConta);

						if(conta != null){
							conta.setIndicadorCobrancaAdministrativa(ConstantesSistema.SIM);
							conta.setUltimaAlteracao(dataAtual);

							this.getControladorUtil().atualizar(conta);
						}

					}
					// GUIA DE PAGAMENTO
					else if(cobrancaDocumentoItem.getGuiaPagamentoGeral() != null
									&& cobrancaDocumentoItem.getDocumentoTipo().getDescricaoDocumentoTipo().equals("GUIA DE PAGAMENTO")){
						existeCobrancaDocumentoItem = true;

						FiltroGuiaPagamentoPrestacao filtroGuiaPagamentoPrestacao = new FiltroGuiaPagamentoPrestacao();
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(
										FiltroGuiaPagamentoPrestacao.GUIA_PAGAMENTO_ID, cobrancaDocumentoItem.getGuiaPagamentoGeral()
														.getId()));
						filtroGuiaPagamentoPrestacao.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoPrestacao.NUMERO_PRESTACAO,
										cobrancaDocumentoItem.getNumeroDaPrestacao()));

						Collection colecaoGuiaPagamentoPrestacao = this.getControladorUtil().pesquisar(filtroGuiaPagamentoPrestacao,
										GuiaPagamentoPrestacao.class.getName());

						GuiaPagamentoPrestacao guiaPagamentoPrestacao = (GuiaPagamentoPrestacao) Util
										.retonarObjetoDeColecao(colecaoGuiaPagamentoPrestacao);

						if(guiaPagamentoPrestacao != null){
							guiaPagamentoPrestacao.setIndicadorCobrancaAdministrativa(ConstantesSistema.SIM);
							guiaPagamentoPrestacao.setUltimaAlteracao(dataAtual);

							this.getControladorUtil().atualizar(guiaPagamentoPrestacao);
						}
					}
				}

				// Caso a ação de cobrança administrativa corresponda a uma determinada
				// situação de cobrança (CBST_ID com o valor diferente de nulo na tabela
				// COBRANCA_ACAO com CBAC_CDCONSTANTE com o valor correspondente a
				// "COBRANCA_ADMNISTRATIVA"), inclui a nova situação de cobrança do imóvel - inclui
				// na tabela IMOVEL_COBRANCA_SITUACAO com os seguintes valores

				if(cobrancaDocumento.getCobrancaAcao().getCobrancaSituacao() != null
								&& cobrancaDocumento.getCobrancaAcao().getCodigoConstante().equals("COBRANCA_ADMINISTRATIVA")){

					ImovelCobrancaSituacao imovelCobrancaSituacao = new ImovelCobrancaSituacao();
					imovelCobrancaSituacao.setImovel(cobrancaDocumento.getImovel());
					imovelCobrancaSituacao.setDataImplantacaoCobranca(cobrancaDocumento.getEmissao());
					imovelCobrancaSituacao.setCobrancaSituacao(cobrancaDocumento.getCobrancaAcao().getCobrancaSituacao());
					imovelCobrancaSituacao.setCliente(cobrancaDocumento.getCliente());
					imovelCobrancaSituacao.setCobrancaAcaoAtividadeComando(cobrancaDocumento.getCobrancaAcaoAtividadeComando());
					imovelCobrancaSituacao.setQuantidadeDebito(cobrancaDocumento.getCobrancaDocumentoItems().size());
					imovelCobrancaSituacao.setValorDebito(cobrancaDocumento.getValorDocumento());
					imovelCobrancaSituacao.setPercentualRemuneracao(percentualRemuneracao);
					imovelCobrancaSituacao.setCobrancaDebitoSituacao(cobrancaDebitoSituacaoPendente);
					imovelCobrancaSituacao.setUltimaAlteracao(dataAtual);

					this.getControladorUtil().inserir(imovelCobrancaSituacao);

				}

			}

			// [FS0002] - Verificar existência de itens para os documentos de cobrança
			if(!existeCobrancaDocumentoItem){
				if(colecaoCobrancaDocumento.isEmpty()){
					throw new ControladorException("atencao.item_documento_cobranca_administrativa.inexistente", null,
									idCobrancaAcaoAtividadeComando.toString());
				}
			}

		}catch(ControladorException ex){
			if(ex.getMessage().equals("atencao.documento_cobranca_administrativa.inexistente")
							|| ex.getMessage().equals("atencao.item_documento_cobranca_administrativa.inexistente")){
				ex.printStackTrace();
			}else{
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Cancelar Aviso de Corte Pendente
	 * 
	 * @author Hebert Falcão
	 * @date 11/09/2013
	 */
	public void cancelarAvisoDeCortePendente(Integer idFuncionalidadeIniciada, FaturamentoGrupo faturamentoGrupo)
					throws ControladorException{

		int idUnidadeIniciada = 0;

		try{
			// Registrar o início do processamento da unidade de processamento do batch
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			Integer idFaturamentoGrupo = faturamentoGrupo.getId();
			Integer anoMesReferencia = faturamentoGrupo.getAnoMesReferencia();

			LOGGER.info("** cancelarAvisoDeCortePendente");
			LOGGER.info("** idFaturamentoGrupo - " + idFaturamentoGrupo);
			LOGGER.info("** anoMesReferencia - " + anoMesReferencia);

			Integer quantidade = repositorioCobranca.cancelarAvisoDeCortePendente(idFaturamentoGrupo, anoMesReferencia);

			LOGGER.info("** quantidade - " + quantidade);

			// Registrar o fim do processamento da unidade de processamento do batch
			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, false);

		}catch(Exception e){
			// Este catch serve para interceptar qualquer exceção que o processo batch venha a
			// lançar e garantir que a unidade de processamento do batch será atualizada com o erro
			// ocorrido
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			this.getControladorBatch().encerrarUnidadeProcessamentoBatch(idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}
	/**
	 * [UC0203][SB0010]
	 * 
	 * @author Felipe Rosacruz
	 * @param idImovel
	 * @return
	 * @date 26/09/2013
	 **/
	public String obterMsgSituacaoImovelCampanhaPremiacao(Integer idImovel) throws ControladorException{

		try{
			FiltroCampanha filtroCampanha = new FiltroCampanha(FiltroCampanha.ULTIMA_ALTERACAO + " desc");

			Collection<Campanha> colecaoCampanhas = getControladorUtil().pesquisar(filtroCampanha, Campanha.class.getName());

			if(colecaoCampanhas != null){
				Campanha ultimaCampanha = (Campanha) Util.retonarObjetoDeColecao(colecaoCampanhas);

				// 1. Caso exista campanha de premiação vigente na empresa
				if(ultimaCampanha != null && ultimaCampanha.getTmInscricaoFim().after(new Date())){

					FiltroCampanhaCadastro filtroCampanhaCadastro = new FiltroCampanhaCadastro();
					filtroCampanhaCadastro.adicionarParametro(new ParametroSimples(FiltroCampanhaCadastro.IMOVEL_ID, idImovel));

					Collection<CampanhaCadastro> colecaoCampanhaCadastro = getControladorUtil().pesquisar(filtroCampanhaCadastro,
									CampanhaCadastro.class.getName());

					// 1.1. Caso o imóvel esteja inscrito na campanha de premiação
					if(!Util.isVazioOrNulo(colecaoCampanhaCadastro)){

						CampanhaCadastro campanhaCadastro = (CampanhaCadastro) Util.retonarObjetoDeColecao(colecaoCampanhaCadastro);

						// 1.1.1. Caso o número de inscrição esteja liberado
						if(campanhaCadastro.getIndicadorComprovanteBloqueado().equals(ConstantesSistema.NAO)){

							return "Imóvel inscrito na campanha de premiação " + ultimaCampanha.getDsTituloCampanha();

						}else if(campanhaCadastro.getIndicadorComprovanteBloqueado().equals(ConstantesSistema.SIM)){

							return "Imóvel inscrito na campanha de premiação " + ultimaCampanha.getDsTituloCampanha()
											+ ", aguardando regularização do débito para a liberação do número de inscrição.";

						}

					}else{

						Integer indicadorImovelAptoinscricaoCampanhaPremiacao = verificarImovelAptoInscricaoCampanha(idImovel,
										ultimaCampanha);

						if(indicadorImovelAptoinscricaoCampanhaPremiacao == 1){
							return "Imóvel apto para inscrição na campanha de premiação " + ultimaCampanha.getDsTituloCampanha();
						}

					}

				}
			}
		}catch(Exception e){

			throw new ControladorException("erro.sistema", e);

		}
		return null;
	}
	
	/**
	 * [UC0203][SB0011]
	 * 
	 * @author Felipe Rosacruz
	 * @param idImovel
	 * @param campanha
	 * @return
	 * @date 26/09/2013
	 **/
	private Integer verificarImovelAptoInscricaoCampanha(Integer idImovel, Campanha campanha) throws ControladorException{

		Integer indicadorImovelAptoinscricaoCampanhaPremiacao = ConstantesSistema.SIM.intValue();

		Imovel imovel = getControladorImovel().consultarImovel(idImovel);

		String tipoBloqueio = getControladorCadastro().verificarInscricaoBloqueadaImovel(imovel, campanha);

		// 1.3. Caso exista bloqueio quanto à inscrição do imóvel na campanha de premiação
		if(tipoBloqueio != null){

			indicadorImovelAptoinscricaoCampanhaPremiacao = ConstantesSistema.NAO.intValue();

		}else{

			Collection<Cliente> colecaoCliente = new ArrayList<Cliente>();
			Cliente clienteTemp = getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);
			if(clienteTemp != null){
				colecaoCliente.add(clienteTemp);
			}
			clienteTemp = getControladorImovel().pesquisarClienteResponsavelImovel(idImovel);
			if(clienteTemp != null){
				colecaoCliente.add(clienteTemp);
			}

			// 1.4. Para cada cliente usuário e/ou responsável do imóvel
			for(Cliente cliente : colecaoCliente){

				Integer tipoDocumentoImpedido = getControladorCadastro().verificarDocumentoImpedido(campanha.getId(), cliente.getCpf(),
								cliente.getCnpj());

				// 1.4.1.2. Caso exista bloqueio quanto à inscrição do cliente na campanha de
				// premiação
				if(tipoDocumentoImpedido != null){
					indicadorImovelAptoinscricaoCampanhaPremiacao = ConstantesSistema.NAO.intValue();
				}

			}

		}

		return indicadorImovelAptoinscricaoCampanhaPremiacao;

	}

	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * Verifica se existem ocorrencias de um imovel em situação de cobranca
	 * 
	 * @author Anderson Italo
	 * @date 28/11/2013
	 * @throws ErroRepositorioException
	 */
	public boolean existeProcessoCobrancaImovelPorSituacaoInformada(Integer idImovel, String idsSituacaoesCobranca)
					throws ControladorException{

		boolean retorno = false;

		try{

			retorno = repositorioCobranca.existeProcessoCobrancaImovelPorSituacaoInformada(idImovel, idsSituacaoesCobranca);
		}catch(Exception e){

			throw new ControladorException("erro.sistema", e);

		}

		return retorno;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Calcula os acrescimmos por Impontualidade(multa,juros de mora e atualização monetaria)
	 * 
	 * @author Hebert Falcão
	 * @date 14/09/2012
	 * @param indicadorEmissaoDocumento
	 *            Na emissão do documento o indicador que estiver como 1 no
	 *            ParametroAcrescimosEmissaoDocumento deve ser considerado, o que tiver como 2 deve
	 *            ter o valor zerado, pois não será cobrado nesse momento. Caso não seja emissão, a
	 *            lógica é invertida.
	 */
	public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidadeBancoDeDados(int anoMesReferenciaDebito,
					Date dataVencimento, Date dataPagamento, BigDecimal valorDebito, BigDecimal valorMultasCobradas, short indicadorMulta,
					String anoMesArrecadacao, Integer idConta, Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Short multa,
					Short jurosMora, Short atualizacaoTarifaria) throws ControladorException{

		return this.calcularAcrescimoPorImpontualidadeBancoDeDados(anoMesReferenciaDebito, dataVencimento, dataPagamento, valorDebito,
						valorMultasCobradas, indicadorMulta, anoMesArrecadacao, idConta, dataEmissaoDocumento, indicadorEmissaoDocumento,
						multa, jurosMora, atualizacaoTarifaria, null);
	}


	/**
	 * [UC3044] Informar Entrega/Devolução de Documentos de Cobrança
	 * [FS0002] - Verificar existência do documento de cobrança para entrega/devolução
	 * 
	 * @author Eduardo Oliveira
	 * @data 04/02/2014
	 */
	public Integer pesquisarIdDocumentoCobrancaEntregaDevolucao(Integer idImovel, Integer idDocumentoTipo) throws ControladorException{

		try{

			return this.repositorioCobranca.pesquisarIdDocumentoCobrancaEntregaDevolucao(idImovel, idDocumentoTipo);
		}catch(ErroRepositorioException e){

			throw new ControladorException("erro.sistema", e);
		}
	}


	private boolean validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(Usuario usuario, Integer idImovel,
					ObterDebitoImovelOuClienteHelper colecaoDebitoImovel){

		boolean indicadorEmitirExtratoDebitos = false;

		Integer resposta;
		try{
			resposta = getControladorImovel().validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(usuario, idImovel,
							colecaoDebitoImovel);

			if(resposta.equals(Integer.valueOf(1)) || resposta.equals(Integer.valueOf(3))){

				indicadorEmitirExtratoDebitos = true;

			}else if(resposta.equals(Integer.valueOf(2)) || resposta.equals(Integer.valueOf(4))){
				indicadorEmitirExtratoDebitos = false;
			}

		}catch(NumberFormatException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return indicadorEmitirExtratoDebitos;

	}


		/**
	 * @param idImovel
	 * @param usuario
	 * @return
	 */
	public RelatorioExtratoDebito gerarRelatorioRelatorioExtratoDebitoParaEmissaoPorImovel(Integer idImovel, Usuario usuario){

		RelatorioExtratoDebito relatorioExtratoDebito = null;
		Imovel imovel = null;

		String referenciaInicial = "01/0001";
		String referenciaFinal = "12/9999";
		String dataVencimentoInicial = "01/01/0001";
		String dataVencimentoFinal = "31/12/9999";

		// Para auxiliar na formatação de uma data
		SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
		String mesInicial = referenciaInicial.substring(0, 2);
		String anoInicial = referenciaInicial.substring(3, referenciaInicial.length());
		String anoMesInicial = anoInicial + mesInicial;
		String mesFinal = referenciaFinal.substring(0, 2);
		String anoFinal = referenciaFinal.substring(3, referenciaFinal.length());
		String anoMesFinal = anoFinal + mesFinal;

		Date dataVencimentoDebitoI;
		Date dataVencimentoDebitoF;

		try{
			dataVencimentoDebitoI = formatoData.parse(dataVencimentoInicial);
		}catch(ParseException ex){
			dataVencimentoDebitoI = null;
		}
		try{
			dataVencimentoDebitoF = formatoData.parse(dataVencimentoFinal);
		}catch(ParseException ex){
			dataVencimentoDebitoF = null;
		}

		FiltroImovel filtroImovel = new FiltroImovel();

		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, idImovel));
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio.unidadeFederacao");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("localidade");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("ligacaoAguaSituacao");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("ligacaoEsgotoSituacao");
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade("imovelPerfil");

		// pesquisa a coleção do imovel
		Collection<Imovel> colecaoImovel;
		try{
			colecaoImovel = this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

			if(!Util.isVazioOrNulo(colecaoImovel)){
				imovel = (Imovel) ((List) colecaoImovel).get(0);
			}

		}catch(ControladorException e1){
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// seta valores constantes para chamar o metodo que consulta debitos do imovel
		Integer tipoImovel = Integer.valueOf(1);
		Integer indicadorPagamento = Integer.valueOf(1);
		Integer indicadorConta = Integer.valueOf(1);
		Integer indicadorDebito = Integer.valueOf(1);
		Integer indicadorCredito = Integer.valueOf(1);
		Integer indicadorNotas = Integer.valueOf(1);
		Integer indicadorGuias = Integer.valueOf(1);
		Integer indicadorAtualizar = Integer.valueOf(1);
		Integer tipoRelacao = null;

		// Obtendo os débitos do imovel
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel;
		try{
			colecaoDebitoImovel = this.obterDebitoImovelOuCliente(tipoImovel.intValue(), idImovel.toString(), null, tipoRelacao,
							anoMesInicial, anoMesFinal, dataVencimentoDebitoI, dataVencimentoDebitoF, indicadorPagamento.intValue(),
							indicadorConta.intValue(), indicadorDebito.intValue(), indicadorCredito.intValue(), indicadorNotas.intValue(),
							indicadorGuias.intValue(), indicadorAtualizar.intValue(), null, null, new Date(), ConstantesSistema.SIM, null,
							ConstantesSistema.SIM, ConstantesSistema.SIM, ConstantesSistema.SIM);

			Collection<ContaValoresHelper> colecaoContaValores = colecaoDebitoImovel.getColecaoContasValores();

			ContaValoresHelper dadosConta = null;

			BigDecimal valorConta = BigDecimal.ZERO;
			BigDecimal valorAcrescimo = BigDecimal.ZERO;
			BigDecimal valorAgua = BigDecimal.ZERO;
			BigDecimal valorEsgoto = BigDecimal.ZERO;
			BigDecimal valorDebito = BigDecimal.ZERO;
			BigDecimal valorCredito = BigDecimal.ZERO;
			BigDecimal valorImposto = BigDecimal.ZERO;

			if(!Util.isVazioOrNulo(colecaoContaValores)){
				java.util.Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores.iterator();
				// percorre a colecao de conta somando o valor para obter um valor
				// total
				while(colecaoContaValoresIterator.hasNext()){

					dadosConta = (ContaValoresHelper) colecaoContaValoresIterator.next();

					// só considera contas vencidas

					if(dadosConta.getConta().getDataVencimentoConta() != null
									&& Util.compararData(dadosConta.getConta().getDataVencimentoConta(), new Date()) == -1){
						valorConta = valorConta.add(dadosConta.getConta().getValorTotal());
					}

					valorAcrescimo = valorAcrescimo.add(dadosConta.getValorTotalContaValores());
					valorAgua = valorAgua.add(dadosConta.getConta().getValorAgua());
					valorEsgoto = valorEsgoto.add(dadosConta.getConta().getValorEsgoto());
					valorDebito = valorDebito.add(dadosConta.getConta().getDebitos());
					valorCredito = valorCredito.add(dadosConta.getConta().getValorCreditos());
					valorImposto = valorImposto.add(dadosConta.getConta().getValorImposto());
				}
			}

			Collection<DebitoACobrar> colecaoDebitoACobrar = colecaoDebitoImovel.getColecaoDebitoACobrar();

			BigDecimal valorDebitoACobrar = BigDecimal.ZERO;
			DebitoACobrar dadosDebito = null;

			if(!Util.isVazioOrNulo(colecaoDebitoACobrar)){
				java.util.Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar.iterator();

				// percorre a colecao de debito a cobrar somando o valor para obter um valor total
				while(colecaoDebitoACobrarIterator.hasNext()){

					dadosDebito = (DebitoACobrar) colecaoDebitoACobrarIterator.next();
					valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito.getValorTotal());
				}
			}

			Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel.getColecaoCreditoARealizar();

			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
			CreditoARealizar dadosCredito = null;

			if(!Util.isVazioOrNulo(colecaoCreditoARealizar)){
				java.util.Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar.iterator();

				// percorre a colecao de credito a realizar somando o valor para obter um valor
				// total
				while(colecaoCreditoARealizarIterator.hasNext()){

					dadosCredito = (CreditoARealizar) colecaoCreditoARealizarIterator.next();
					valorCreditoARealizar = valorCreditoARealizar.add(dadosCredito.getValorTotal());
				}
			}

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = colecaoDebitoImovel.getColecaoGuiasPagamentoValores();

			BigDecimal valorGuiaPagamento = BigDecimal.ZERO;

			if(!Util.isVazioOrNulo(colecaoGuiaPagamentoValores)){

				Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores.iterator();

				// Percorre a colecao de Prestações da Guia de Pagamento somando o valor para obter
				// o
				// total em aberto
				while(colecaoGuiaPagamentoValoresHelperIterator.hasNext()){

					GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) colecaoGuiaPagamentoValoresHelperIterator
									.next();
					valorGuiaPagamento = valorGuiaPagamento.add(dadosGuiaPagamentoValoresHelper.getValorTotalPrestacao().setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				}
			}

			// [SB0005  Validar autorização de acesso ao imóvel pelos usuários das empresas
			// de cobrança administrativa]
			// [SB0006  Validar autorização de acesso ao imóvel em cobrança administrativa
			// pelos usuários da empresa contratante]
			// if(this.validarAcessoImovelUsuarioEmpresaCobrancaAdministrativa(usuario, idImovel,
			// colecaoDebitoImovel)
			// && this.validarAcessoImovelCobrancaAdministrativaUsuarioEmpresaContratante(usuario,
			// idImovel,
			// colecaoDebitoImovel)){
			// [SB0007  Verificar Débito em Cobrança Administrativa]
			// this.verificarDebitoCobrancaAdministrativa(usuario, idImovel, colecaoContaValores,
			// colecaoGuiaPagamentoValores);

			colecaoDebitoACobrar = getControladorFaturamento().agruparDebitoACobrar(colecaoDebitoACobrar, Boolean.TRUE);
			// String valorParametro =
			// ParametroAtendimentoPublico.P_TRATAR_DEBITO_TIPO_PARCELAMENTO_AGRUPADO.executar();

			Short indicadorGeracaoTaxaCobranca = Short.valueOf("2"); // no caso do parcelamento
																		// sempre 2

			BigDecimal valorTotalSemAcrescimo = valorConta.add(valorGuiaPagamento);
			valorTotalSemAcrescimo = valorTotalSemAcrescimo.subtract(valorCreditoARealizar);

			ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this.gerarEmitirExtratoDebito(imovel, indicadorGeracaoTaxaCobranca,
							colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar, valorAcrescimo, null,
							valorTotalSemAcrescimo, colecaoCreditoARealizar, null, null, null);
			relatorioExtratoDebito = this.obterRelatorioExtratoDebito(extratoDebitoRelatorioHelper, imovel, valorDebitoACobrar,
							valorAcrescimo, valorCreditoARealizar, null, valorTotalSemAcrescimo, usuario, imovel.getInscricaoFormatada(),
							usuario.getNomeUsuario(), imovel.getId().toString(), imovel.getEnderecoFormatado(), null, null, null, null,
							null);

			// }

		}catch(ControladorException e1){
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		return relatorioExtratoDebito;

	}

	/**
	 * [SB0006]  Validar autorização de acesso ao imóvel em cobrança administrativa pelos usuários
	 * da empresa contratante
	 */
	private boolean validarAcessoImovelCobrancaAdministrativaUsuarioEmpresaContratante(Usuario usuario, Integer idImovel,
					ObterDebitoImovelOuClienteHelper colecaoDebitoImovel){

		boolean indicadorEmitirExtratoDebitos = false;

		Integer permiteAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante;
		try{
			permiteAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante = getControladorImovel()
							.validarAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante(usuario, idImovel,
											colecaoDebitoImovel);

			if(permiteAcessoImovelEmCobrancaAdministrativaUsuarioEmpresaContratante != null){
				// 1.1.2.1.1. Emitir o extrato de débitos.
				indicadorEmitirExtratoDebitos = true;

			}
		}catch(NumberFormatException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return indicadorEmitirExtratoDebitos;

	}

	/**
	 * [SB0007]  Verificar Débito em Cobrança Administrativa
	 */
	private void verificarDebitoCobrancaAdministrativa(Usuario usuario, Integer idImovel,
					Collection<ContaValoresHelper> colecaoContasValoresHelper,
					Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelper){

		try{
			this.removerContaCobrancaAdministrativaDebitoImovel(usuario, idImovel, colecaoContasValoresHelper);

			this.removerGuiaPagamentoCobrancaAdministrativaDebitoImovel(usuario, Integer.valueOf(idImovel),
							colecaoGuiaPagamentoValoresHelper);
		}catch(NumberFormatException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch(ControladorException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * @return
	 */

	public Collection pesquisarImovelEmCobrancaAdministrativaAjuste(){

		Collection retorno = null;

		try{
			retorno = repositorioCobranca.pesquisarImovelEmCobrancaAdministrativaAjuste();
		}catch(ErroRepositorioException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return retorno;

	}




}