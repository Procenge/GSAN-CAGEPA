/*
 * Copyright (C) 2007-2007 the GSAN Â– Sistema Integrado de GestÃ£o de ServiÃ§os de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place Â– Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN Â– Sistema Integrado de GestÃ£o de ServiÃ§os de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araujo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Claudio de Andrade Lira
 * Denys Guimaraes Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabiola Gomes de Araujo
 * Flavio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Junior
 * Homero Sampaio Cavalcanti
 * Ivan Sergio da Silva Junior
 * Joao Edmar de Siqueira
 * Joao Thiago Tenorio Lopes
 * Kassia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Marcio Roberto Batista da Silva
 * Maria de Fatima Sampaio Leite
 * Micaela Maria Coelho de Araujo
 * Nelson Mendocao de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Correa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araujo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Savio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *
 * Este programa Ã© software livre; voce pode redistribuÃ­-lo e/ou
 * modifica-lo sob os termos de Licenca Publica Geral GNU, conforme
 * publicada pela Free Software Foundation; versÃ£o 2 da
 * Licenca.
 * Este programa distribuÃ­do na expectativa de ser Ãºtil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implÃ­cita de
 * COMERCIALIZACAO ou de ADEQUARAO A QUALQUER PROPOSITO EM
 * PARTICULAR. Consulte a Licenca Publica Geral GNU para obter mais
 * detalhes.
 * voce deve ter recebido uma copia da Licenca Publica Geral GNU
 * junto com este programa; se nao, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */

package gcom.cobranca;

import gcom.arrecadacao.ArrecadacaoForma;
import gcom.arrecadacao.Arrecadador;
import gcom.arrecadacao.ArrecadadorContrato;
import gcom.arrecadacao.RegistroCodigo;
import gcom.arrecadacao.banco.Banco;
import gcom.arrecadacao.debitoautomatico.DebitoAutomatico;
import gcom.arrecadacao.pagamento.*;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gcom.atendimentopublico.ordemservico.OrdemServico;
import gcom.atendimentopublico.ordemservico.ServicoTipoSubgrupo;
import gcom.atendimentopublico.registroatendimento.AtendimentoMotivoEncerramento;
import gcom.atendimentopublico.registroatendimento.EspecificacaoTipoValidacao;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;
import gcom.cadastro.cliente.*;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.funcionario.Funcionario;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.FiltroBairro;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.imovel.*;
import gcom.cadastro.localidade.*;
import gcom.cobranca.bean.*;
import gcom.cobranca.campanhapremiacao.CampanhaCadastro;
import gcom.cobranca.campanhapremiacao.CampanhaPremio;
import gcom.cobranca.contrato.CobrancaContrato;
import gcom.cobranca.contrato.CobrancaContratoRemuneracaoPorSucesso;
import gcom.cobranca.opcaoparcelamento.PreParcelamento;
import gcom.cobranca.opcaoparcelamento.PreParcelamentoOpcao;
import gcom.cobranca.parcelamento.*;
import gcom.faturamento.FaturamentoAtividade;
import gcom.faturamento.GuiaPagamentoGeral;
import gcom.faturamento.conta.Conta;
import gcom.faturamento.conta.ContaGeral;
import gcom.faturamento.conta.ContaMotivoRevisao;
import gcom.faturamento.credito.*;
import gcom.faturamento.debito.*;
import gcom.financeiro.FinanciamentoTipo;
import gcom.financeiro.lancamento.LancamentoItemContabil;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaEventualHelper;
import gcom.gui.cobranca.BoletoBancarioHelper;
import gcom.gui.cobranca.BoletoBancarioTotalizadorHelper;
import gcom.gui.cobranca.ResolucaoDiretoriaGrupoHelper;
import gcom.gui.cobranca.spcserasa.NegativacaoHelper;
import gcom.gui.faturamento.bean.GuiaPagamentoPrestacaoHelper;
import gcom.interceptor.ObjetoTransacao;
import gcom.micromedicao.FiltroRota;
import gcom.micromedicao.Rota;
import gcom.micromedicao.consumo.ConsumoHistorico;
import gcom.micromedicao.consumo.LigacaoTipo;
import gcom.micromedicao.hidrometro.Hidrometro;
import gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico;
import gcom.micromedicao.medicao.MedicaoTipo;
import gcom.relatorio.cobranca.ProtocoloDocumentoCobrancaRelatorioHelper;
import gcom.relatorio.cobranca.RelatorioRemuneracaoCobrancaAdministrativaHelper;
import gcom.relatorio.cobranca.parcelamento.RelacaoParcelamentoRelatorioHelper;
import gcom.seguranca.acesso.usuario.Usuario;
import gcom.util.*;
import gcom.util.filtro.Filtro;
import gcom.util.filtro.GeradorHQLCondicional;
import gcom.util.parametrizacao.ParametroGeral;
import gcom.util.parametrizacao.ordemservico.ParametroOrdemServico;

import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.math.MathContext;
import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.CopyOnWriteArraySet;

import org.apache.commons.beanutils.PropertyUtils;
import org.hibernate.*;
import org.hibernate.criterion.*;
import org.hibernate.dialect.Dialect;

/**
 * Repositorio para cobranca
 * 
 * @author Rafael Santos
 * @since 02/01/2006
 */
public class RepositorioCobrancaHBM
				implements IRepositorioCobranca {

	/** Repositorio Cobranca Hibernate */
	private static RepositorioCobrancaHBM instancia;

	/**
	 * Construtor da classe RepositorioAcessoHBM
	 */
	protected RepositorioCobrancaHBM() {

	}

	/**
	 * Retorna o valor de instancia
	 * 
	 * @return O valor de instancia
	 */
	public static RepositorioCobrancaHBM getInstancia(){

		if(instancia == null){
			instancia = new RepositorioCobrancaHBM();
		}

		return instancia;
	}

	/**
	 * [UC3170] Informar Modelo do Documento de Cobrança
	 * 
	 * @author Gicevalter Couto
	 * @date 13/03/2015
	 * @param imovelId
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<DocumentoTipo> pesquisarDocumentoTipoModelo() throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select docTipo ")
							.append("from DocumentoTipo docTipo ")
							.append("where indicadorUso = 1 ")
							.append(" and docTipo.id IN (select documentoTipo.id from CobrancaAcao where documentoTipo.id is not null) ")
							.append(" order by docTipo.descricaoDocumentoTipo  ");

			retorno = session.createQuery(consulta.toString()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3170] Informar Modelo do Documento de Cobrança
	 * 
	 * @author Gicevalter Couto
	 * @date 13/03/2015
	 * @param imovelId
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<DocumentoTipoLayoutCobrancaAcaoHelper> pesquisarDocumentoTipoLayoutPorAcaoCobranca(Integer idAcaoCobranca,
					Short indicadorUsoDocumentoTipoLayout)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select new DocumentoTipoLayoutCobrancaAcaoHelper(docTipoLayout.id, docTipo.descricaoDocumentoTipo,  ")
					.append("		docTipoLayout.descricaoLayout, docTipoLayout.descricaoCIControleDocumento,  ")
							.append("		docTipoLayout.indicadorPadrao, docTipoLayout.indicadorUso,  ")
							.append("	cobAcao.id , cobAcao.descricaoCobrancaAcao )  ").append("from DocumentoTipoLayout docTipoLayout  ")
							.append(" inner join docTipoLayout.DocumentoTipo docTipo, ").append(" 	  CobrancaAcao cobAcao ")
							.append("where docTipoLayout.indicadorUso = :indicadorUso ").append("  and cobAcao.id = :idAcaoCobranca ")
							.append("  and docTipoLayout.documentoTipo.id = cobAcao.documentoTipo.id ")
					.append("order by cobAcao.descricaoCobrancaAcao , docTipo.descricaoDocumentoTipo ");
			
			retorno = session.createQuery(consulta.toString()).setShort("indicadorUso", indicadorUsoDocumentoTipoLayout)
							.setInteger("idAcaoCobranca", idAcaoCobranca).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0178] Religar Automaticamente Imovel Cortado Author:
	 * Rafael Santos Data: 02/01/2006 Pesquisa os imoveis cortados ha 60 dias ou
	 * mais a data do ultima dia do mes de faturamento
	 * 
	 * @return Colecao de Matriculas
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 */
	public Collection pesquisarImoveisCortados(String situacaoEsgotoLigado, String situacaoAguaCortado, Date anoMesReferenciaFaturamento)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select i.id " + "from Imovel i " + "inner join i.ligacaoAguaSituacao ligacaoAguaSituacao "
							+ "inner join i.ligacaoAgua ligacaoAgua " + "inner join i.ligacaoEsgotoSituacao ligacaoEsgotoSituacao "
							+ "inner join i.ligacaoEsgoto ligacaoEsgoto " + "where ligacaoAguaSituacao.id = :situacao and "
							+ "ligacaoAgua.dataCorte <= :anoMesReferencia and " + "((ligacaoEsgotoSituacao.id != :situacaoEsgoto)  or "
							+ "(ligacaoEsgotoSituacao.id = :situacaoEsgoto and " + "(ligacaoEsgoto.consumoMinimo = 0 or "
							+ "ligacaoEsgoto.consumoMinimo is null)))";

			retorno = session.createQuery(consulta).setInteger("situacao", Integer.valueOf(situacaoAguaCortado))
							.setDate("anoMesReferencia", anoMesReferenciaFaturamento)
							.setInteger("situacaoEsgoto", Integer.valueOf(situacaoEsgotoLigado)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0178] Religar Automaticamente Imovel Cortado Author:
	 * Rafael Santos Data: 02/01/2006 Caso o imovel possua hidrometro na Ligacao
	 * de agua e o tipo do ultimo consumo faturado tenha sido real
	 * 
	 * @param id
	 *            Matricula do Imovel
	 * @param anoMesFaturamento
	 *            Ano Mes Faturamento
	 * @param consumoTipoReal
	 *            Tipo de Consumo Real
	 * @param ligacaoTipoLigacaoAgua
	 *            Tipo de Ligacao Agua
	 * @return Consumo Historico do Imovel
	 * @throws ErroRepositorioException
	 *             Erro no Repositorio
	 */
	public String pesquisarImoveisHidrometroAguaConsumoFaturadoReal(String id, String anoMesFaturamento, String consumoTipoReal,
					String ligacaoTipoLigacaoAgua) throws ErroRepositorioException{

		String idConsumoHistorico = null;
		Object retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select ch.id from ConsumoHistorico ch " + "inner join ch.imovel im " + "inner join ch.imovel.ligacaoAgua la "
							+ "inner join la.hidrometroInstalacaoHistorico " + "inner join ch.consumoTipo ct "
							+ "inner join ch.ligacaoTipo lt " + "where la.hidrometroInstalacaoHistorico is not null "
							+ "and ct.id = :idConsumo and lt.id = :ligacaoAgua " + " and ch.referenciaFaturamento = :anoMesReferencia "
							+ " and im.id = :idImovel";

			retorno = session.createQuery(consulta).setInteger("idConsumo", Integer.valueOf(consumoTipoReal))
							.setInteger("ligacaoAgua", Integer.valueOf(ligacaoTipoLigacaoAgua))
							.setInteger("anoMesReferencia", Integer.valueOf(anoMesFaturamento)).setInteger("idImovel", Integer.valueOf(id))
							.setMaxResults(1).uniqueResult();

			if(retorno != null){

				idConsumoHistorico = ((Integer) retorno).toString();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return idConsumoHistorico;
	}

	/**
	 * [UC0178] Religar Automaticamente Imovel Cortado Auhtor: Rafael Santos
	 * Data: 03/01/2006
	 * 
	 * @param id
	 *            Matricula do Imovel
	 * @param situacaoAguaLigado
	 *            situacao Agua
	 * @param dataReligacaoAgua
	 *            Data Religacao Agua
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void religarImovelCortado(String id, String situacaoAguaLigado, Date dataReligacaoAgua) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizarImovel;
		String atualizarLigacaoAgua;

		try{
			atualizarImovel = "update gcom.cadastro.imovel.Imovel " + "set last_id = :situacaoAgua where imov_id = :id";

			session.createQuery(atualizarImovel).setInteger("situacaoAgua", Integer.valueOf(situacaoAguaLigado))
							.setInteger("id", Integer.valueOf(id)).executeUpdate();

			atualizarLigacaoAgua = "update gcom.atendimentopublico.ligacaoagua.LigacaoAgua " + "set lagu_dtreligacaoagua = :data"
							+ " where hidi_id = :id";

			session.createQuery(atualizarLigacaoAgua).setDate("data", dataReligacaoAgua).setInteger("id", Integer.valueOf(id))
							.executeUpdate();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	// /**
	// * [UC0067] Obter Debito do Imovel ou Cliente Obtem os Debitos de um
	// Imovel
	// * Author: Rafael Santos Data: 03/01/2006
	// *
	// *
	// * @param id
	// * Matricula do Imovel
	// * @param contaSituacaoNormal
	// * situacao Normal de Conta
	// * @param contaSituacaoRetificada
	// * situacao Retificada de Conta
	// * @param contaSituacaoIncluida
	// * situacao Incluida de Conta
	// * @param anoMesInicialReferenciaDebito
	// * Ano Mes Inicial Referencia Debito
	// * @param anoMesFinalReferenciaDebito
	// * Ano Mes Final Referencia Debito
	// * @param anoMesInicialVecimentoDebito
	// * Ano Mes Inicial Vencimento Debito
	// * @param anoMesFinalVencimentoDebito
	// * Ano Mes Inicial Vencimento Debito
	// * @return Colecao de Contas do Imovel
	// * @throws ErroRepositorioException
	// */
	// public Collection pesquisarContasImovel(String id,
	// String contaSituacaoNormal, String contaSituacaoRetificada,
	// String contaSituacaoIncluida, String contaSituacaoParcelada,
	// String anoMesInicialReferenciaDebito,
	// String anoMesFinalReferenciaDebito,
	// Date dataInicialVecimentoDebito, Date dataFinalVencimentoDebito)
	// throws ErroRepositorioException {
	//
	// Collection retorno = new ArrayList();
	//
	// Session session = HibernateUtil.getSession();
	// StringBuffer consulta = new StringBuffer();
	//
	// try {
	//
	// consulta.append("select c.id,") // 0
	// .append(" c.valorAgua,") // 1
	// .append(" c.valorEsgoto,") // 2
	// .append(" c.debitos, ") // 3
	// .append(" c.valorCreditos, ") // 4
	// .append(" c.dataRevisao, ") // 5
	// .append(" c.referencia, ") // 6
	// .append(" c.dataVencimentoConta, ") // 7
	// .append(" c.indicadorCobrancaMulta, ") // 8
	// .append(" debitoCreditoSituacaoAtual.id, ")// 9
	// .append(" c.digitoVerificadorConta, ") // 10
	// .append(" contaMotivoRevisao.id, ") // 11
	// .append(" c.ultimaAlteracao, ") // 12
	// .append(" imovel.id, ") // 13
	// .append(" c.consumoAgua, ") // 14
	// .append(" c.valorImposto, ") // 15
	// .append(" c.consumoEsgoto, ") // 16
	// .append(" c.creditoConsumo ") // 17
	// .append("from Conta c ")
	// .append("inner join c.imovel imovel ")
	// .append("inner join c.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
	// .append("left outer join c.contaMotivoRevisao contaMotivoRevisao ")
	// .append(" where  imovel.id = :idImovel ")
	// .append(" and (debitoCreditoSituacaoAtual.id = :situacaoNormal ")
	// .append(" or debitoCreditoSituacaoAtual.id = :situacaoRetificada ")
	// .append(" or debitoCreditoSituacaoAtual.id = :situacaoIncluida ")
	// .append(" or debitoCreditoSituacaoAtual.id = :situacaoParcelada)")
	// .append(" and (c.referencia >= :inicialReferencia ")
	// .append(" and c.referencia <= :finalReferencia) ")
	// .append(" and (c.dataVencimentoConta >=  :inicialVencimento ")
	// .append(" and c.dataVencimentoConta <= :finalVencimento) ")
	// .append(" order by c.referencia");
	//
	// retorno = session.createQuery(consulta.toString()).
	// setInteger("idImovel", Integer.valueOf(id)).
	// setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal)).
	// setInteger("situacaoRetificada",
	// Integer.valueOf(contaSituacaoRetificada)).
	// setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida)).
	// setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada)).
	// setInteger("inicialReferencia",
	// Integer.valueOf(anoMesInicialReferenciaDebito)).
	// setInteger("finalReferencia",
	// Integer.valueOf(anoMesFinalReferenciaDebito)).
	// setDate("inicialVencimento", dataInicialVecimentoDebito).
	// setDate("finalVencimento", dataFinalVencimentoDebito).list();
	//
	// //retorno.add(retornoObjeto);
	//
	// } catch (HibernateException e) {
	// // levanta a execucao para a proxima camada
	// e.printStackTrace();
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// } finally {
	// // fecha a sessao
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	/**
	 * [UC0067] Obter Debito do Imovel ou Cliente Obtem os Debitos de um Imovel
	 * Author: Rafael Santos Data: 03/01/2006
	 * 
	 * @param id
	 *            Matricula do Imovel
	 * @param contaSituacaoNormal
	 *            situacao Normal de Conta
	 * @param contaSituacaoRetificada
	 *            situacao Retificada de Conta
	 * @param contaSituacaoIncluida
	 *            situacao Incluida de Conta
	 * @param anoMesInicialReferenciaDebito
	 *            Ano Mes Inicial Referencia Debito
	 * @param anoMesFinalReferenciaDebito
	 *            Ano Mes Final Referencia Debito
	 * @param anoMesInicialVecimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @param anoMesFinalVencimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @return Colecao de Contas do Imovel
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContasImovel(String idImovel, String idCliente, Integer idClienteRelacaoTipo, Integer contaSituacaoNormal,
					Integer contaSituacaoRetificada, Integer contaSituacaoIncluida, Integer contaSituacaoParcelada,
					String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito, Date dataInicialVecimentoDebito,
					Date dataFinalVencimentoDebito, Integer contaSituacaoPrescrita, Short indicadorTituloImovel)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("select distinct cnta.cnta_id as conta, ");
				// 0
			}else{
				consulta.append("select cnta.cnta_id as conta, ");
				// 0
			}

			consulta.append("   cnta.cnta_vlagua as valorAgua, ")
			// 1
							.append("   cnta.cnta_vlesgoto as valorEsgoto,")
							// 2
							.append("   cnta.cnta_vldebitos as valorDebitos,")
							// 3
							.append("   cnta.cnta_vlcreditos as valorCreditos,")
							// 4
							.append("   cnta.cnta_dtrevisao as dataRevisao,")
							// 5
							.append("   cnta.cnta_amreferenciaconta as referencia,")
							// 6
							.append("   cnta.cnta_dtvencimentoconta as dataVencimento,")
							// 7
							.append("   cnta.cnta_iccobrancamulta as indicadorCobMulta,")
							// 8
							.append("   cnta.dcst_idatual as debCredSituacao, ")
							// 9
							.append("   cnta.cnta_dgverificadorconta as digitoVerificador,")
							// 10
							.append("   cnta.cmrv_id as contaMotRevisao,")
							// 11
							.append("   cnta.cnta_tmultimaalteracao as ultimaAlteracao,")
							// 12
							.append("   cnta.imov_id as imovel,")
							// 13
							.append("   cnta.cnta_nnconsumoagua as consumoAgua,")
							// 14
							.append("   cnta.cnta_vlimpostos as valorImpostos,")
							// 15
							.append("   cnta.cnta_nnconsumoesgoto as consumoEsgoto,")
							// 16
							.append("   cnta.cnta_nnconsumocredito as consumoCredito,")
							// 17
							.append("   dcst.dcst_dsdebitocreditosituacao as descricaoDebitoCreditoSituacao,")
							// 18
							.append("   dcst.dcst_dsabreviado as descricaoAbreviada, ")
							// 19
							.append("   cnta.cnta_icpagamento as idPagamento, ")
							// 20
							.append("   cnta.cnta_icremuneracobrancaadm as icRemuneraCobrancaAdm, ")
							// 21
							.append("   cnta.last_id as idLigacaoAguaSituacao, ")
							// 22
							.append("   cnta.lest_id as idLigacaoEsgotoSituacao, ")
							// 23
							.append("   cnta.loca_id as idLocalidade, ")
							// 24
							.append("   cnta.cnta_icdividaativa as icDividaAtiva, ")
							// 25
							.append("   cnta.cnta_icexecucaofiscal as icExecucaoFiscal, ")
							// 26
							.append("   cnta.cnta_nnprocesadmexecucaofiscal as nnProcAdmExecFiscal ")
							// 27
							.append("  from conta cnta ")

							.append("  inner join debito_credito_situacao dcst on dcst.dcst_id = cnta.dcst_idatual");

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("  inner join cliente_conta clie_cnta on clie_cnta.cnta_id = cnta.cnta_id");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  inner join cliente_imovel cliete_imovel on cliete_imovel.imov_id = cnta.imov_id");
			}

			consulta.append("  where ").append("  cnta.dcst_idatual in (").append(contaSituacaoNormal).append(", ")
							.append(contaSituacaoRetificada).append(", ").append(contaSituacaoIncluida).append(", ")
							.append(contaSituacaoParcelada).append(", ").append(contaSituacaoPrescrita).append(") and ")
							.append("  cnta.cnta_amreferenciaconta between :inicialReferencia and :finalReferencia  and ")
							.append("  cnta.cnta_dtvencimentoconta between :inicialVencimento and :finalVencimento ");

			if(idImovel != null){
				consulta.append("  and cnta.imov_id = :idImovel ");
			}

			if(idCliente != null){
				consulta.append("  and clie_cnta.CLIE_ID = :idCliente ");
			}

			if(idClienteRelacaoTipo != null){
				consulta.append("  and clie_cnta.crtp_id = :idClienteRelacaoTipo ");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  and cliete_imovel.clim_dtrelacaofim is null ");
			}

			consulta.append("  order by cnta.cnta_amreferenciaconta ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			query.addScalar("conta", Hibernate.INTEGER).addScalar("valorAgua", Hibernate.BIG_DECIMAL)
							.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL).addScalar("valorDebitos", Hibernate.BIG_DECIMAL)
							.addScalar("valorCreditos", Hibernate.BIG_DECIMAL).addScalar("dataRevisao", Hibernate.DATE)
							.addScalar("referencia", Hibernate.INTEGER).addScalar("dataVencimento", Hibernate.DATE)
							.addScalar("indicadorCobMulta", Hibernate.SHORT).addScalar("debCredSituacao", Hibernate.INTEGER)
							.addScalar("digitoVerificador", Hibernate.SHORT).addScalar("contaMotRevisao", Hibernate.INTEGER)
							.addScalar("ultimaAlteracao", Hibernate.TIMESTAMP).addScalar("imovel", Hibernate.INTEGER)
							.addScalar("consumoAgua", Hibernate.INTEGER).addScalar("valorImpostos", Hibernate.BIG_DECIMAL)
							.addScalar("consumoEsgoto", Hibernate.INTEGER).addScalar("consumoCredito", Hibernate.INTEGER)
							.addScalar("descricaoDebitoCreditoSituacao", Hibernate.STRING)
							.addScalar("descricaoAbreviada", Hibernate.STRING).addScalar("idPagamento", Hibernate.SHORT)
							.addScalar("icRemuneraCobrancaAdm", Hibernate.SHORT).addScalar("idLigacaoAguaSituacao", Hibernate.INTEGER)
							.addScalar("idLigacaoEsgotoSituacao", Hibernate.INTEGER).addScalar("idLocalidade", Hibernate.INTEGER)
							.addScalar("icDividaAtiva", Hibernate.SHORT).addScalar("icExecucaoFiscal", Hibernate.SHORT)
							.addScalar("nnProcAdmExecFiscal", Hibernate.INTEGER);

			if(idImovel != null){
				query.setInteger("idImovel", Integer.valueOf(idImovel));
			}

			if(idCliente != null){
				query.setInteger("idCliente", Integer.valueOf(idCliente));
			}

			if(idClienteRelacaoTipo != null){
				query.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
			}

			query.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
							.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito))
							.setDate("inicialVencimento", dataInicialVecimentoDebito).setDate("finalVencimento", dataFinalVencimentoDebito);
			retorno = query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Obtem os Debitos
	 * de um cliente
	 * 
	 * @author Rafael Santos
	 * @date 05/01/2006
	 * @param idsContas
	 *            Colecao de Ids das Contas
	 * @param contaSituacaoNormal
	 *            situacao Normal de Conta
	 * @param contaSituacaoRetificada
	 *            situacao Retificada de Conta
	 * @param contaSituacaoIncluida
	 *            situacao Incluida de Conta
	 * @param anoMesInicialReferenciaDebito
	 *            Ano Mes Inicial Referencia Debito
	 * @param anoMesFinalReferenciaDebito
	 *            Ano Mes Final Referencia Debito
	 * @param anoMesInicialVecimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @param anoMesFinalVencimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @return Colecao de Contas do Imovel
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContasCliente(Collection idsContas, String contaSituacaoNormal, String contaSituacaoRetificada,
					String contaSituacaoIncluida, String contaSituacaoParcelada, String anoMesInicialReferenciaDebito,
					String anoMesFinalReferenciaDebito, Date anoMesInicialVecimentoDebito, Date anoMesFinalVencimentoDebito,
					String contaSituacaoPrescrita) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		int indiceContas = 0;
		int quantidadeContas = 200;

		Iterator iterator = idsContas.iterator();

		try{

			consulta.append("select conta.id, ")
							// 0
							.append(" conta.valorAgua,")
							// 1
							.append(" conta.valorEsgoto,")
							// 2
							.append(" conta.debitos,")
							// 3
							.append(" conta.valorCreditos,")
							// 4
							.append(" conta.dataRevisao,")
							// 5
							.append(" conta.referencia,")
							// 6
							.append(" conta.dataVencimentoConta,")
							// 7
							.append(" conta.indicadorCobrancaMulta,")
							// 8
							.append("  debitoCreditoSituacaoAtual.id, ")
							// 9
							.append("  conta.digitoVerificadorConta, ")
							// 10
							.append("  contaMotivoRevisao.id, ")
							// 11
							.append("  conta.ultimaAlteracao, ")
							// 12
							.append("  imovel.id, ")
							// 13
							.append("  conta.consumoAgua, ")
							// 14
							.append("  conta.valorImposto, ")
							// 15
							.append("  conta.consumoEsgoto, ")
							// 16
							.append("  conta.creditoConsumo, ")
							// 17
							.append("  debitoCreditoSituacaoAtual.descricaoDebitoCreditoSituacao, ")
							// 18
							.append("  debitoCreditoSituacaoAtual.descricaoAbreviada, ")
							// 19
							.append("  conta.indicadorPagamento, ")
							// 20
							.append("  conta.indicadorRemuneraCobrancaAdministrativa ")
							// 21
							.append(" from Conta conta ")
							.append(" inner join conta.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append(" left outer join conta.contaMotivoRevisao contaMotivoRevisao ")
							.append(" left join conta.imovel imovel ").append(" where conta.id IN (:ids) ")
							.append("  and (debitoCreditoSituacaoAtual.id = :situacaoNormal ")
							.append("  or debitoCreditoSituacaoAtual.id = :situacaoRetificada ")
							.append("  or debitoCreditoSituacaoAtual.id = :situacaoIncluida ")
							.append("  or debitoCreditoSituacaoAtual.id = :situacaoParcelada ")
							.append("  or debitoCreditoSituacaoAtual.id = :situacaoPrescrita) ")
							.append("  and (conta.referencia >= :inicialReferencia ")
							.append("  and conta.referencia <= :finalReferencia) ")
							.append("  and (conta.dataVencimentoConta >=  :inicialVencimento ")
							.append("  and conta.dataVencimentoConta <= :finalVencimento)")
							.append("  and ((conta.valorAgua)+(conta.valorEsgoto)+(conta.debitos))-(conta.valorCreditos) <> 0.00 ")
							.append("  order by imovel.id, conta.referencia");

			Collection temp = new ArrayList();

			while(iterator.hasNext()){

				Integer id = (Integer) iterator.next();

				temp.add(id);
				indiceContas++;

				if(indiceContas % quantidadeContas == 0){

					Query query = session.createQuery(consulta.toString());
					query.setParameterList("ids", temp).setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
									.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
									.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
									.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
									.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
									.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
									.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito));

					query.setDate("inicialVencimento", anoMesInicialVecimentoDebito)
									.setDate("finalVencimento", anoMesFinalVencimentoDebito);

					retorno.addAll(query.list());
					temp.clear();

				}
			}
			if(!temp.isEmpty()){
				Query query = session.createQuery(consulta.toString());
				query.setParameterList("ids", temp).setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
								.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
								.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
								.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
								.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
								.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
								.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito));
				query.setDate("inicialVencimento", anoMesInicialVecimentoDebito).setDate("finalVencimento", anoMesFinalVencimentoDebito);
				retorno.addAll(query.list());
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// Constroi um comparador para o indice dos objetos contidos na consulta que trazem a
		// coluna
		// referencia
		if(!retorno.isEmpty()){
			final class ReferenciaComparator
							implements Comparator {

				public int compare(Object obj1, Object obj2){

					return ((Integer) ((Object[]) obj1)[6]).compareTo((Integer) ((Object[]) obj2)[6]);
				}
			}

			// Ordena a lista
			Collections.sort((List) retorno, new ReferenciaComparator());
		}

		return retorno;
	}

	// /**
	// * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Obtem o Valor
	// * Total dos Pagamentos da Conta
	// *
	// * @author Rafael Santos
	// * @date 05/01/2006
	// *
	// * @param idConta Id Conta
	// * @throws ErroRepositorioException
	// */
	// public Collection pesquisarValorTotalPagamentoMenorDataPagamento(
	// String idConta) throws ErroRepositorioException {
	// Collection retorno = null;
	//
	// Session session = HibernateUtil.getSession();
	// StringBuffer consulta = new StringBuffer();
	//
	// try {
	//
	// consulta.append("SELECT SUM(p.valorPagamento),MIN(p.dataPagamento) ")
	// .append("FROM Pagamento p ")
	// .append("WHERE p.conta.id = :id ")
	// .append("GROUP BY p.conta.id");
	//
	// retorno = session.createQuery(consulta.toString())
	// .setInteger("id", Integer.valueOf(idConta))
	// .list();
	//
	// } catch (HibernateException e) {
	// // levanta a execucao para a proxima camada
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// } finally {
	// // fecha a sessao
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Obtem o Valor
	 * Total dos Pagamentos da Conta
	 * 
	 * @author Rafael Santos
	 * @date 05/01/2006
	 * @param idConta
	 *            Id Conta
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarValorTotalPagamentoMenorDataPagamento(Integer idConta) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("SELECT SUM(p.pgmt_vlpagamento)as somaValorPagamentos, ")
							.append("MIN(p.pgmt_dtpagamento) as minDataPagamento ").append("FROM pagamento p ")
							.append("WHERE p.cnta_id = :id ").append("GROUP BY p.cnta_id");

			retorno = session.createSQLQuery(consulta.toString()).addScalar("somaValorPagamentos", Hibernate.BIG_DECIMAL)
							.addScalar("minDataPagamento", Hibernate.DATE).setInteger("id", idConta).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Obtem o Valor
	 * Total dos Pagamentos da Guia de Pagamento
	 * 
	 * @author Rafael Santos, Rafael Santos
	 * @date 07/01/2006, 21/03/2006
	 * @author eduardo henrique
	 * @date 30/04/2009 Alteracao no mapeamento do pagamento e pagamentoGeral
	 *       para apontamento para GuiaPagamentoGeral.
	 * @author Saulo Lima
	 * @date 29/06/2009 Adicionar parametro numeroPrestacao
	 * @param idGuiaPagamento
	 *            Id Guia Pagamento
	 * @param numeroPrestacao
	 *            numero da prestacao
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarValorTotalGuiaPagamentoMenorDataGuiaPagamento(Integer idGuiaPagamento, Integer numeroPrestacao)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT SUM(p.valorPagamento), MIN(p.dataPagamento) " + "FROM Pagamento p "
							// + "INNER JOIN p.guiaPagamentoGeral guiaPagamentoGeral "
							+ "WHERE p.guiaPagamentoGeral = :id " + "AND p.numeroPrestacao = :numeroPrestacao "
							+ "GROUP BY p.guiaPagamentoGeral , p.numeroPrestacao";

			retorno = session.createQuery(consulta).setInteger("id", idGuiaPagamento).setInteger("numeroPrestacao", numeroPrestacao).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006
	 * 
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param situacaoNormal
	 *            situacao de debito credito
	 * @return Colecao de Debitos A Cobrar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarImovel(String idImovel, String idCliente, Integer idClienteRelacaoTipo, String situacaoNormal,
					Integer anoMesReferenciaDebitoInicial, Integer anoMesReferenciaDebitoFinal, Short indicadorTituloImovel)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("select distinct dac, ");
			}else{
				consulta.append("select dac, ");
			}

			consulta.append("debitoTipo.descricao, debitoTipo.id, dac.financiamentoTipo.id, dac.imovel.id, parcelamento.id, financiamentoTipo.descricao ")
							.append("from DebitoACobrar dac ")
							.append("inner join dac.debitoTipo debitoTipo ").append("left join dac.parcelamento parcelamento ")
							.append("left join dac.financiamentoTipo financiamentoTipo ");

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("  inner join dac.clientesDebitoACobrar clientesDebitoACobrar");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  inner join dac.imovel imovel");
				consulta.append("  inner join imovel.clientesImovel clienteImovel");
			}

			consulta.append(" where dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
							.append("and dac.debitoCreditoSituacaoAtual = :normal ")
							.append("and not exists (select 1 from Pagamento pgmt ")
							.append(" where pgmt.debitoACobrar = dac.id) ");

			if(idImovel != null){
				consulta.append("and dac.imovel = :idImovel ");
			}

			if(idCliente != null){
				consulta.append("and clientesDebitoACobrar.cliente = :idCliente ");
			}

			if(idClienteRelacaoTipo != null){
				consulta.append("and clientesDebitoACobrar.clienteRelacaoTipo = :idClienteRelacaoTipo ");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  and clienteImovel.dataFimRelacao is null ");
			}

			if(anoMesReferenciaDebitoInicial != null && anoMesReferenciaDebitoFinal != null){
				consulta.append(" and dac.anoMesReferenciaDebito >= :anoMesReferenciaDebitoInicial ").append(
								"and dac.anoMesReferenciaDebito <= :anoMesReferenciaDebitoFinal ");

				consulta.append("order by dac.anoMesReferenciaDebito desc, debitoTipo.descricao desc ");

				Query queryDebitoACobrar = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
								.setInteger("anoMesReferenciaDebitoInicial", anoMesReferenciaDebitoInicial)
								.setInteger("anoMesReferenciaDebitoFinal", anoMesReferenciaDebitoFinal);

				if(idImovel != null){
					queryDebitoACobrar.setInteger("idImovel", Integer.valueOf(idImovel));
				}

				if(idCliente != null){
					queryDebitoACobrar.setInteger("idCliente", Integer.valueOf(idCliente));
				}

				if(idClienteRelacaoTipo != null){
					queryDebitoACobrar.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
				}

				retorno = queryDebitoACobrar.list();

			}else{

				consulta.append("order by dac.anoMesReferenciaDebito desc, debitoTipo.descricao desc ");

				Query queryDebitoACobrar = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal));

				if(idImovel != null){
					queryDebitoACobrar.setInteger("idImovel", Integer.valueOf(idImovel));
				}

				if(idCliente != null){
					queryDebitoACobrar.setInteger("idCliente", Integer.valueOf(idCliente));
				}

				if(idClienteRelacaoTipo != null){
					queryDebitoACobrar.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
				}

				retorno = queryDebitoACobrar.list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006
	 * 
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param situacaoNormal
	 *            situacao de debito credito
	 * @return Colecao de Debitos A Cobrar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarImovelSimplificado(String idImovel, String situacaoNormal,
					Integer anoMesReferenciaDebitoInicial, Integer anoMesReferenciaDebitoFinal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select dac.id, debitoTipo.descricao, debitoTipo.id, dac.valorDebito, ")
							.append("dac.numeroPrestacaoDebito, dac.numeroPrestacaoCobradas, dac.financiamentoTipo.id, dac.imovel.id, ")
							.append("dac.anoMesReferenciaDebito, dac.anoMesCobrancaDebito, dac.numeroDiasSuspensao ")
							.append("from DebitoACobrar dac ")
							// .append("inner join fetch dac.imovel imovel ")
							// .append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							// .append("inner join fetch dac.debitoTipo debitoTipo ")
							.append("inner join dac.debitoTipo debitoTipo ").append("where dac.imovel = :id ")
							.append("and dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
							.append("and dac.debitoCreditoSituacaoAtual = :normal ")
							// .append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
							.append("and not exists (select 1 from Pagamento pgmt ")
							// .append("inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
							.append(" where pgmt.debitoACobrar = dac.id) ");

			if(anoMesReferenciaDebitoInicial != null && anoMesReferenciaDebitoFinal != null){
				consulta.append(" and dac.anoMesCobrancaDebito >= :anoMesReferenciaDebitoInicial ").append(
								"and dac.anoMesCobrancaDebito <= :anoMesReferenciaDebitoFinal ");

				retorno = session.createQuery(consulta.toString()).setInteger("id", Integer.valueOf(idImovel))
								.setInteger("normal", Integer.valueOf(situacaoNormal))
								.setInteger("anoMesReferenciaDebitoInicial", anoMesReferenciaDebitoInicial)
								.setInteger("anoMesReferenciaDebitoFinal", anoMesReferenciaDebitoFinal).list();

			}else{

				retorno = session.createQuery(consulta.toString()).setInteger("id", Integer.valueOf(idImovel))
								.setInteger("normal", Integer.valueOf(situacaoNormal)).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006
	 * 
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param situacaoNormal
	 *            situacao de debito credito
	 * @return Colecao de Debitos A Cobrar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarImovel(String idImovel, String situacaoNormal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select dac,debitoTipo.descricao,debitoTipo.id  ")
							.append("from DebitoACobrar dac ")
							// .append("inner join dac.imovel imovel ")
							// .append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							// .append("inner join fetch dac.debitoTipo debitoTipo ")
							.append("inner join dac.debitoTipo debitoTipo ").append("where dac.imovel  = :id ")
							.append("and dac.numeroPrestacaoCobradas <= dac.numeroPrestacaoDebito ")
							.append("and dac.debitoCreditoSituacaoAtual = :normal ")
							// .append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
							.append("and not exists (select 1 from Pagamento pgmt ")
							// .append("inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
							.append(" where pgmt.debitoACobrar = dac.id) ");

			retorno = session.createQuery(consulta.toString()).setInteger("id", Integer.valueOf(idImovel))
							.setInteger("normal", Integer.valueOf(situacaoNormal)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006 Pesquisa os ID dos imoveis dos cliente
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIDImoveisClienteImovel(String codigoCliente, Integer relacaoTipo) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select imovel.id ").append("from ClienteImovel ci ").append("inner join ci.imovel imovel ")
							.append("inner join ci.cliente cliente ");

			if(relacaoTipo != null){
				consulta.append(" inner join ci.clienteRelacaoTipo clienteRelacaoTipo ");
			}

			consulta.append(" where cliente.id = :codigo ");

			if(relacaoTipo != null){
				consulta.append(" and clienteRelacaoTipo = :relacao ");

				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente))
								.setShort("relacao", relacaoTipo.shortValue()).list();
			}
			if(relacaoTipo == null){
				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente)).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 07/01/2006 Pesquisa os ID dos clientes contas
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return ID dos Imvoeis Cliente Conta
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIDImoveisClienteConta(String codigoCliente, Integer relacaoTipo) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "select imovel.id " + "from ClienteConta cc " + "inner join cc.conta conta " + "inner join cc.cliente cliente "
							+ "inner join conta.imovel imovel ";

			if(relacaoTipo != null){
				consulta = consulta + " inner join cc.clienteRelacaoTipo clienteRelacaoTipo ";
			}

			consulta = consulta + "where cliente.id = :codigo ";

			if(relacaoTipo != null){
				consulta = consulta + " and clienteRelacaoTipo = :relacao ";

				retorno = session.createQuery(consulta).setInteger("codigo", Integer.valueOf(codigoCliente).intValue())
								.setShort("relacao", relacaoTipo.shortValue()).list();
			}
			if(relacaoTipo == null){
				retorno = session.createQuery(consulta).setInteger("codigo", Integer.valueOf(codigoCliente)).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 06/01/2006 Colecao de Debitos a Cobrar de Cliente
	 * 
	 * @param colecaoIdImoveis
	 *            Colecao de ID dos Imoveis
	 * @param situacaoNormal
	 *            situacao Normal
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarCliente(Collection idsImoveis, String situacaoNormal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select dac, debitoTipo.descricao, debitoTipo.id, dac.financiamentoTipo.id, dac.imovel.id, parcelamento.id ")
							.append("from DebitoACobrar dac ")
							// .append("inner join dac.imovel imovel ")
							// .append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("inner join dac.debitoTipo debitoTipo ")
							.append("left join dac.parcelamento parcelamento ")
							.append("where dac.imovel.id IN (:ids) ")
							.append("and dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
							.append("and dac.debitoCreditoSituacaoAtual  = :normal ")
							// .append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
							.append("and dac.id not in (select pgmt.debitoACobrar.id from Pagamento pgmt where pgmt.debitoACobrar = dac.id)");

			Collection colecaoIdImoveisAuxiliar = new ArrayList();

			for(int i = 0; i < idsImoveis.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdImoveisAuxiliar.add(idsImoveis.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsImoveis.size() - 1))){

					if(retorno != null){
						retorno.addAll(session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
										.setParameterList("ids", colecaoIdImoveisAuxiliar.toArray()).list());
					}else{
						retorno = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
										.setParameterList("ids", colecaoIdImoveisAuxiliar.toArray()).list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdImoveisAuxiliar.clear();
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// Constroi um comparador para o indice dos objetos contidos na consulta que trazem a
		// coluna
		// referencia
		if(!retorno.isEmpty()){
			final class ReferenciaComparator
							implements Comparator {

				public int compare(Object obj1, Object obj2){

					Integer anoMesReferenciaDebito1 = ((DebitoACobrar) ((Object[]) obj1)[0]).getAnoMesReferenciaDebito();
					Integer anoMesReferenciaDebito2 = ((DebitoACobrar) ((Object[]) obj2)[0]).getAnoMesReferenciaDebito();

					return anoMesReferenciaDebito1.compareTo(anoMesReferenciaDebito2);
				}
			}

			// Ordena a lista
			Collections.sort((List) retorno, new ReferenciaComparator());
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 06/01/2006 Colecao de Debitos a Cobrar de Cliente
	 * 
	 * @param colecaoIdImoveis
	 *            Colecao de ID dos Imoveis
	 * @param situacaoNormal
	 *            situacao Normal
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarClienteSimplificado(Collection idsImoveis, String situacaoNormal)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			Object obj = null;
			if(idsImoveis != null && idsImoveis.size() > 0){
				obj = idsImoveis.iterator().next();
				if(obj instanceof Integer){

					consulta.append("select dac.id, debitoTipo.descricao, debitoTipo.id, dac.valorDebito, ")
									.append("dac.numeroPrestacaoDebito, dac.numeroPrestacaoCobradas, dac.financiamentoTipo.id, dac.imovel.id ")
									.append("from DebitoACobrar dac ")
									// .append("inner join dac.imovel imovel ")
									// .append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
									.append("inner join dac.debitoTipo debitoTipo ")
									.append("where dac.imovel.id IN(:ids) ")
									.append("and dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
									.append("and dac.debitoCreditoSituacaoAtual.id  = :normal ")
									// .append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
									.append("and dac.id not in (select pgmt.debitoACobrar.id from Pagamento pgmt where pgmt.debitoACobrar.id = dac.id)");

					retorno = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
									.setParameterList("ids", idsImoveis).list();

				}else if(obj instanceof Imovel){

					consulta.append("select dac.id, debitoTipo.descricao, debitoTipo.id, dac.valorDebito, ")
									.append("dac.numeroPrestacaoDebito, dac.numeroPrestacaoCobradas, dac.financiamentoTipo.id, dac.imovel.id ")
									.append("from DebitoACobrar dac ")
									// .append("inner join dac.imovel imovel ")
									// .append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
									.append("inner join dac.debitoTipo debitoTipo ")
									.append("where dac.imovel IN(:ids) ")
									.append("and dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
									.append("and dac.debitoCreditoSituacaoAtual.id  = :normal ")
									// .append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
									.append("and dac.id not in (select pgmt.debitoACobrar.id from Pagamento pgmt where pgmt.debitoACobrar.id = dac.id)");

					retorno = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
									.setParameterList("ids", idsImoveis).list();

				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006 Colecao de Creditos a Realizar de Cliente
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param situacaoNormal
	 *            situacao Normal
	 * @return Colecao de Creditos A Realizar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCreditosARealizarCliente(Collection idsImoveis, String situacaoNormal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select car, creditoTipo.descricao, creditoTipo.id, imovel.id ")
							.append("from CreditoARealizar car ")
							.append("inner join car.imovel imovel ")
							// .append("inner join car.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("inner join car.creditoTipo creditoTipo ").append("where car.imovel.id IN (:ids) ")
							.append("and (car.numeroPrestacaoRealizada < car.numeroPrestacaoCredito or ")
							.append("car.valorResidualMesAnterior > 0) ").append(" and car.debitoCreditoSituacaoAtual = :normal ");

			Collection colecaoIdImoveisAuxiliar = new ArrayList();

			for(int i = 0; i < idsImoveis.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdImoveisAuxiliar.add(idsImoveis.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsImoveis.size() - 1))){

					if(retorno != null){
						retorno.addAll(session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
										.setParameterList("ids", colecaoIdImoveisAuxiliar).list());
					}else{
						retorno = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
										.setParameterList("ids", colecaoIdImoveisAuxiliar).list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdImoveisAuxiliar.clear();
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// Constroi um comparador para o indice dos objetos contidos na consulta que trazem a
		// coluna
		// referencia
		if(!retorno.isEmpty()){
			final class ReferenciaComparator
							implements Comparator {

				public int compare(Object obj1, Object obj2){

					Integer anoMesReferenciaDebito1 = ((CreditoARealizar) ((Object[]) obj1)[0]).getAnoMesReferenciaCredito();
					Integer anoMesReferenciaDebito2 = ((CreditoARealizar) ((Object[]) obj2)[0]).getAnoMesReferenciaCredito();

					return anoMesReferenciaDebito1.compareTo(anoMesReferenciaDebito2);
				}
			}

			// Ordena a lista
			Collections.sort((List) retorno, new ReferenciaComparator());
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006 Colecao de Creditos a Realizar de Cliente
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param situacaoNormal
	 *            situacao Normal
	 * @return Colecao de Creditos A Realizar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCreditosARealizarClienteSimplificado(Collection idsImoveis, String situacaoNormal)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select car.id, creditoTipo.descricao, creditoTipo.id, ")
							.append("car.valorCredito, car.numeroPrestacaoCredito, ")
							.append("car.numeroPrestacaoRealizada, car.valorResidualMesAnterior, imovel.id ")
							.append("from CreditoARealizar car ")
							.append("inner join car.imovel imovel ")
							// .append("inner join car.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("inner join car.creditoTipo creditoTipo ").append("where imovel.id IN (:ids) ")
							.append("and (car.numeroPrestacaoRealizada < car.numeroPrestacaoCredito or ")
							.append("car.valorResidualMesAnterior > 0) ").append(" and car.debitoCreditoSituacaoAtual = :normal ");

			retorno = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal))
							.setParameterList("ids", idsImoveis).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006
	 * 
	 * @param idImovel
	 *            Matricula do Imovel
	 * @return Colecao de Creditos A Realizar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCreditosARealizarImovel(String idImovel, String idCliente, Integer idClienteRelacaoTipo,
					String situacaoNormal, Short indicadorTituloImovel) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("select distinct car, ");
			}else{
				consulta.append("select car, ");
			}

			consulta.append(" creditoTipo.descricao, creditoTipo.id, imovel.id ").append("from CreditoARealizar car ")
							.append("inner join car.imovel imovel ")
							.append("inner join car.creditoTipo creditoTipo ");

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta.append("  inner join car.clientesCreditoARealizar clienteCreditoARealizar ");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  inner join imovel.clientesImovel clienteImovel ");
			}

			consulta.append("where (car.numeroPrestacaoRealizada < car.numeroPrestacaoCredito or ")
							.append("car.valorResidualMesAnterior > 0) ").append(" and car.debitoCreditoSituacaoAtual = :normal ");

			if(idImovel != null){
				consulta.append(" and imovel = :idImovel ");
			}

			if(idCliente != null){
				consulta.append(" and clienteCreditoARealizar.cliente = :idCliente ");
			}

			if(idClienteRelacaoTipo != null){
				consulta.append(" and clienteCreditoARealizar.clienteRelacaoTipo = :idClienteRelacaoTipo ");
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta.append("  and clienteImovel.dataFimRelacao is null ");
			}

			Query queryCreditoARealizar = session.createQuery(consulta.toString()).setInteger("normal", Integer.valueOf(situacaoNormal));

			if(idImovel != null){
				queryCreditoARealizar.setInteger("idImovel", Integer.valueOf(idImovel));
			}

			if(idCliente != null){
				queryCreditoARealizar.setInteger("idCliente", Integer.valueOf(idCliente));
			}

			if(idClienteRelacaoTipo != null){
				queryCreditoARealizar.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
			}

			retorno = queryCreditoARealizar.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 05/01/2006
	 * 
	 * @param idImovel
	 *            Matricula do Imovel
	 * @return Colecao de Creditos A Realizar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCreditosARealizarImovelSimplificado(String idImovel, String situacaoNormal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select car.id, creditoTipo.descricao, creditoTipo.id, ")
							.append("car.valorCredito, car.numeroPrestacaoCredito, ")
							.append("car.numeroPrestacaoRealizada, car.valorResidualMesAnterior, imovel.id ")
							.append("from CreditoARealizar car ")
							.append("inner join car.imovel imovel ")
							// .append("inner join car.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("inner join car.creditoTipo creditoTipo ").append("where imovel.id = :id ")
							.append("and (car.numeroPrestacaoRealizada < car.numeroPrestacaoCredito or ")
							.append("car.valorResidualMesAnterior > 0) ").append(" and car.debitoCreditoSituacaoAtual = :normal ");

			retorno = session.createQuery(consulta.toString()).setInteger("id", Integer.valueOf(idImovel))
							.setInteger("normal", Integer.valueOf(situacaoNormal)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Rafael Santos, Rafael Santos
	 * @date 07/01/2006, 21/03/2006 Colecao de Guias de Pagamento do Cliente
	 * @author eduardo henrique
	 * @date 29/07/2008 Alteracoes na consulta devido a  mudancas na
	 *       GuiaPagamento (v0.03)
	 * @author Virginia Melo
	 * @date 07/04/2009 Alteracoes devido a  mudancas na GuiaPagamento.
	 * @author Saulo Lima
	 * @date 02/07/2009 Correcao da consulta + mudancas no retorno
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param clienteRelacaoTipo
	 *            Relacao Cliente Tipo
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Colecao de Prestacoes de Guias de Pagamento do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiasPagamentoCliente(Integer codigoCliente, Integer situacaoNormal, Integer situacaoIncluida,
					Integer situacaoRetificada, Integer situacaoEntradaParcelamento, Integer clienteRelacaoTipo,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Integer situacaoPrescrita) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta;
		//
		try{

			if(clienteRelacaoTipo != null){

				consulta = "SELECT DISTINCT guiaPagamento.id, " // 0
								+ "guiaPagamentoPrestacao.id.numeroPrestacao, " // 1
								+ "guiaPagamentoPrestacao.dataVencimento, " // 2
								+ "guiaPagamentoPrestacao.dataEmissao, " // 3
								+ "guiaPagamentoPrestacao, " // 4
								+ "'', " // 5
								+ "guiaPagamentoPrestacao.indicadorCobrancaAdministrativa, " // 6
								+ "dcstAtual.id, " // 7
								+ "dcstAtual.descricaoAbreviada, " // 8
								+ "guiaPagamentoPrestacao.debitoTipo.id, " // 9
								+ "guiaPagamentoPrestacao.indicadorDividaAtiva, " // 10
								+ "guiaPagamentoPrestacao.indicadorExecucaoFiscal " // 11
								+ "FROM GuiaPagamentoPrestacao guiaPagamentoPrestacao "
								+ "INNER JOIN guiaPagamentoPrestacao.guiaPagamento guiaPagamento "
								+ "INNER JOIN guiaPagamento.clientesGuiaPagamento cgp "
								+ "INNER JOIN cgp.cliente cliente "
								+ "INNER JOIN cgp.clienteRelacaoTipo clienteRelacaoTipo "
								+ "INNER JOIN guiaPagamento.documentoTipo documentoTipo "
								+ "INNER JOIN guiaPagamentoPrestacao.debitoCreditoSituacao dcstAtual "
								+ "INNER JOIN guiaPagamentoPrestacao.debitoTipo debitoTipo "
								+ "WHERE cliente.id = :codigo "
								+ "AND clienteRelacaoTipo.id = :relacao "
								+ "AND dcstAtual.id IN (:normal, :incluida, :entradaParcelamento, :retificada, :prescrita) "
								+ "AND guiaPagamentoPrestacao.dataVencimento >= :vencimentoInicial "
								+ "AND guiaPagamentoPrestacao.dataVencimento <= :vencimentoFinal "
								+ "ORDER BY guiaPagamento.id, guiaPagamentoPrestacao.id.numeroPrestacao, guiaPagamentoPrestacao.id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("codigo", codigoCliente).setInteger("relacao", clienteRelacaoTipo)
								.setInteger("normal", situacaoNormal).setInteger("incluida", situacaoIncluida)
								.setInteger("retificada", situacaoRetificada).setInteger("prescrita", situacaoPrescrita)
								.setInteger("entradaParcelamento", situacaoEntradaParcelamento)
								.setDate("vencimentoInicial", dataVencimentoInicial).setDate("vencimentoFinal", dataVencimentoFinal).list();
			}else{

				consulta = "SELECT DISTINCT guiaPagamento.id, " // 0
								+ "guiaPagamentoPrestacao.id.numeroPrestacao, " // 1
								+ "guiaPagamentoPrestacao.dataVencimento, " // 2
								+ "guiaPagamentoPrestacao.dataEmissao, " // 3
								+ "guiaPagamentoPrestacao, " // 4
								+ "'', " // 5
								+ "guiaPagamentoPrestacao.indicadorCobrancaAdministrativa, " // 6
								+ "dcstAtual.id, " // 7
								+ "dcstAtual.descricaoAbreviada, " // 8
								+ "guiaPagamentoPrestacao.debitoTipo.id, " // 9
								+ "guiaPagamentoPrestacao.indicadorDividaAtiva, " // 10
								+ "guiaPagamentoPrestacao.indicadorExecucaoFiscal " // 11
								+ "FROM GuiaPagamentoPrestacao guiaPagamentoPrestacao "
								+ "INNER JOIN guiaPagamentoPrestacao.guiaPagamento guiaPagamento "
								+ "INNER JOIN guiaPagamento.clientesGuiaPagamento cgp "
								+ "INNER JOIN cgp.cliente cliente "
								+ "INNER JOIN guiaPagamento.documentoTipo documentoTipo "
								+ "INNER JOIN guiaPagamento.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
								+ "INNER JOIN guiaPagamento.cliente clienteGuia "
								+ "INNER JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
								+ "INNER JOIN guiaPagamentoPrestacao.debitoTipo debitoTipo "
								+ "WHERE cliente.id = :codigo "
								+ "AND debitoCreditoSituacaoAtual IN (:normal, :incluida, :entradaParcelamento, :retificada, :prescrita) "
								+ "AND guiaPagamentoPrestacao.dataVencimento >= :vencimentoInicial "
								+ "AND guiaPagamentoPrestacao.dataVencimento <= :vencimentoFinal "
								+ "ORDER BY guiaPagamento.id, guiaPagamentoPrestacao.id.numeroPrestacao, guiaPagamentoPrestacao.id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("codigo", codigoCliente).setInteger("normal", situacaoNormal)
								.setInteger("incluida", situacaoIncluida).setInteger("retificada", situacaoRetificada)
								.setInteger("prescrita", situacaoPrescrita).setInteger("entradaParcelamento", situacaoEntradaParcelamento)
								.setDate("vencimentoInicial", dataVencimentoInicial).setDate("vencimentoFinal", dataVencimentoFinal).list();

			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Rafael Santos, Rafael Santos
	 * @date 07/01/2006, 21/03/2006 Colecao de Guias de Pagamento do Cliente
	 * @author eduardo henrique
	 * @date 29/07/2008 Alteracoes na consulta devido a  mudancas na
	 *       GuiaPagamento (v0.03)
	 * @author Virginia Melo
	 * @date 07/04/2009 Alteracoes devido a  mudancas na GuiaPagamento.
	 * @author Saulo Lima
	 * @date 02/07/2009 Correcao da consulta + mudancas no retorno
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param clienteRelacaoTipo
	 *            Relacao Cliente Tipo
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Colecao de Prestacoes de Guias de Pagamento do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiasPagamentoClienteSimplificado(String codigoCliente, String situacaoNormal, Integer clienteRelacaoTipo,
					Date dataVencimentoInicial, Date dataVencimentoFinal) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			if(clienteRelacaoTipo != null){

				consulta = "SELECT DISTINCT guiaPagamento.id, " // 0
								+ "guiaPagamentoPrestacao.id.numeroPrestacao, " // 1
								+ "guiaPagamentoPrestacao.dataVencimento, " // 2
								+ "guiaPagamentoPrestacao.dataEmissao, " // 3
								+ "guiaPagamentoPrestacao.comp_id, " // 4
								+ "guiaPagamentoPrestacao.anoMesReferenciaFaturamento, " // 5
								+ "guiaPagamentoPrestacao.dataVencimento, " // 6
								+ "guiaPagamentoPrestacao.indicadorCobrancaMulta, " // 7
								+ "guiaPagamentoPrestacao.valorPrestacao " // 8
								+ "FROM ClienteGuiaPagamento cgp "
								+ "INNER JOIN cgp.cliente cliente "
								+ "INNER JOIN cgp.clienteRelacaoTipo clienteRelacaoTipo "
								+ "INNER JOIN cgp.guiaPagamento guiaPagamento "
								+ "INNER JOIN guiaPagamento.documentoTipo documentoTipo "
								+ "INNER JOIN guiaPagamento.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
								+ "INNER JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
								+ "INNER JOIN guiaPagamentoPrestacao.debitoTipo debitoTipo "
								+ "WHERE cliente.id = :codigo "
								+ "AND clienteRelacaoTipo.id = :relacao "
								+ "AND debitoCreditoSituacaoAtual = :normal "
								+ "AND guiaPagamentoPrestacao.dataVencimento >= :vencimentoInicial "
								+ "AND guiaPagamentoPrestacao.dataVencimento <= :vencimentoFinal "
								+ "ORDER BY guiaPagamento.id, guiaPagamentoPrestacao.id.numeroPrestacao, guiaPagamentoPrestacao.id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("codigo", Integer.valueOf(codigoCliente))
								.setShort("relacao", clienteRelacaoTipo.shortValue()).setInteger("normal", Integer.valueOf(situacaoNormal))
								.setDate("vencimentoInicial", dataVencimentoInicial).setDate("vencimentoFinal", dataVencimentoFinal).list();
			}else{

				consulta = "SELECT DISTINCT guiaPagamento.id, " // 0
								+ "guiaPagamentoPrestacao.id.numeroPrestacao, " // 1
								+ "guiaPagamentoPrestacao.dataVencimento, " // 2
								+ "guiaPagamentoPrestacao.dataEmissao, " // 3
								+ "guiaPagamentoPrestacao " // 4
								+ "FROM ClienteGuiaPagamento cgp "
								+ "INNER JOIN cgp.cliente cliente "
								+ "INNER JOIN cgp.guiaPagamento guiaPagamento "
								+ "INNER JOIN guiaPagamento.documentoTipo documentoTipo "
								+ "INNER JOIN guiaPagamento.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
								+ "INNER JOIN guiaPagamento.cliente clienteGuia "
								+ "INNER JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
								+ "INNER JOIN guiaPagamentoPrestacao.debitoTipo debitoTipo "
								+ "WHERE cliente.id = :codigo "
								+ "AND debitoCreditoSituacaoAtual = :normal "
								+ "AND guiaPagamentoPrestacao.dataVencimento >= :vencimentoInicial "
								+ "AND guiaPagamentoPrestacao.dataVencimento <= :vencimentoFinal "
								+ "ORDER BY guiaPagamento.id, guiaPagamentoPrestacao.id.numeroPrestacao, guiaPagamentoPrestacao.id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("codigo", Integer.valueOf(codigoCliente))
								.setInteger("normal", Integer.valueOf(situacaoNormal)).setDate("vencimentoInicial", dataVencimentoInicial)
								.setDate("vencimentoFinal", dataVencimentoFinal).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0216] Calcular Acrescimo por Impontualidade Santos Data:
	 * 09/01/2006 Dados do Indices Acrescimo Impontualidade
	 * 
	 * @param anoMesReferenciaDebito
	 *            Ano mes de Referencia de Debito
	 * @return O Indices Acrescimos por Impontualidade
	 * @throws ErroRepositorioException
	 * @deprecated
	 */
	public IndicesAcrescimosImpontualidade pesquisarIndiceAcrescimoImpontualidade(int anoMesReferenciaDebito)
					throws ErroRepositorioException{

		IndicesAcrescimosImpontualidade retornoIndicesAcrescimosImpontualidade = null;
		Object retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select iai ").append("from IndicesAcrescimosImpontualidade iai ")
							.append("where iai.anoMesReferencia =  :anoMesReferencia");

			retorno = session.createQuery(consulta.toString()).setInteger("anoMesReferencia", Integer.valueOf(anoMesReferenciaDebito))
							.setMaxResults(1).uniqueResult();

			if(retorno != null){
				retornoIndicesAcrescimosImpontualidade = (IndicesAcrescimosImpontualidade) retorno;

			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retornoIndicesAcrescimosImpontualidade;
	}

	/**
	 * Faz parte de [UC0216] Calcular Acrescimo por Impontualidade Santos Data:
	 * 09/01/2006 Pesquisa os dados do Indices Acrescimo Impontualidade menor ao
	 * ano mes referencia
	 * 
	 * @param anoMesReferenciaDebito
	 *            Ano mes de Referencia de Debito
	 * @return O Indices Acrescimos por Impontualidade
	 * @throws ErroRepositorioException
	 */
	public IndicesAcrescimosImpontualidade pesquisarMenorIndiceAcrescimoImpontualidade(int anoMesReferenciaDebito)
					throws ErroRepositorioException{

		IndicesAcrescimosImpontualidade retornoIndicesAcrescimosImpontualidade = null;
		Object retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			// select IACI_AMREFERENCIA,IACI_PCMULTA,IACI_PCJUROSMORA,IACI_NNFATORATUALIZACAOMONETAR
			// from indices_acrescimos_imptde
			// where
			// IACI_AMREFERENCIA = (select max(IACI_AMREFERENCIA)
			// from indices_acrescimos_imptde
			// where IACI_AMREFERENCIA<=199810 )

			consulta.append("select iai ").append("from IndicesAcrescimosImpontualidade iai ")
							.append("where iai.anoMesReferencia = (select max(iai2.anoMesReferencia) ")
							.append("from IndicesAcrescimosImpontualidade iai2 where iai2.anoMesReferencia <= :anoMesReferencia)");

			retorno = session.createQuery(consulta.toString()).setInteger("anoMesReferencia", Integer.valueOf(anoMesReferenciaDebito))
							.setMaxResults(1).uniqueResult();

			if(retorno != null){
				retornoIndicesAcrescimosImpontualidade = (IndicesAcrescimosImpontualidade) retorno;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retornoIndicesAcrescimosImpontualidade;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Rafael Santos
	 * @date 07/01/2006
	 * @author eduardo henrique
	 * @date 28/07/2008 Alteracoes na entidade GuiaPagamento para v0.03
	 * @author Saulo Lima
	 * @date 22/06/2009 Alteracao para retornar Colecao de Prestacoes. Mudanca
	 *       na assinatura.
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarGuiasPagamentoImovel(String idImovel, String idCliente, Integer idClienteRelacaoTipo,
					Integer situacaoNormal, Integer situacaoIncluida, Integer situacaoRetificada, Integer situacaoParcelada,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito, Integer situacaoPrescrita, Short indicadorTituloImovel)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT distinct guia.id, " // 0
							+ " guiaPrestacao.comp_id.numeroPrestacao, " // 1
							+ " guiaPrestacao.dataVencimento, " // 2
							+ " guiaPrestacao.dataEmissao, " // 3
							+ " guiaPrestacao, " // 4
							+ " guiaPrestacao.anoMesReferenciaFaturamento, " // 5
							+ " guiaPrestacao.indicadorCobrancaAdministrativa, " // 6
							+ " dcstAtual.id, " // 7
							+ " dcstAtual.descricaoAbreviada, " // 8
							+ " guiaPrestacao.debitoTipo.id, " // 9
							+ " guiaPrestacao.indicadorDividaAtiva, " // 10
							+ " guiaPrestacao.indicadorExecucaoFiscal " // 11
							+ "FROM GuiaPagamentoPrestacao guiaPrestacao "
							+ "INNER JOIN guiaPrestacao.guiaPagamento guia "
							+ "INNER JOIN guiaPrestacao.debitoCreditoSituacao dcstAtual ";

			if(idCliente != null || idClienteRelacaoTipo != null){
				consulta = consulta + "INNER JOIN guia.clientesGuiaPagamento clientesGuiaPagamento ";
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta = consulta + "  inner join guia.imovel imovel ";
				consulta = consulta + "  inner join imovel.clientesImovel clienteImovel ";
			}

			// + "INNER JOIN guia.documentoTipo documentoTipo "
			// + "INNER JOIN guia.imovel imovel "
			// +
			// "INNER JOIN guia.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
			// + "INNER JOIN guiaPrestacao.debitoTipo debitoTipo "
			consulta = consulta + "WHERE ( dcstAtual.id = :normal " + "OR  dcstAtual.id = :incluida " + "OR  dcstAtual.id = :retificada "
							+ "OR  dcstAtual.id = :prescrita " + "OR  dcstAtual.id = :parcelada )"
							+ "AND guiaPrestacao.dataVencimento >= :vencimentoInicial "
							+ "AND guiaPrestacao.dataVencimento <= :vencimentoFinal ";

			if(idImovel != null){
				consulta = consulta + " AND guia.imovel = :idImovel ";
			}

			if(idCliente != null){
				consulta = consulta + " AND clientesGuiaPagamento.cliente = :idCliente ";
			}

			if(idClienteRelacaoTipo != null){
				consulta = consulta + " AND clientesGuiaPagamento.clienteRelacaoTipo = :idClienteRelacaoTipo ";
			}

			if(indicadorTituloImovel != null && indicadorTituloImovel.equals(ConstantesSistema.SIM)){
				consulta = consulta + "  and clienteImovel.dataFimRelacao is null ";
			}

			if(anoMesInicialReferenciaDebito != null && anoMesFinalReferenciaDebito != null){
				consulta = consulta + " and  guiaPrestacao.anoMesReferenciaFaturamento  >= :anoMesInicialReferenciaDebito "
								+ "and  guiaPrestacao.anoMesReferenciaFaturamento <= :anoMesFinalReferenciaDebito "
								+ "ORDER BY guia.id, guiaPrestacao.comp_id.numeroPrestacao, guiaPrestacao.comp_id.debitoTipoId";

				Query queryGuiaPagamento = session.createQuery(consulta).setInteger("normal", situacaoNormal)
								.setInteger("incluida", situacaoIncluida).setInteger("retificada", situacaoRetificada)
								.setInteger("prescrita", situacaoPrescrita).setInteger("parcelada", situacaoParcelada)
								.setDate("vencimentoInicial", dataVencimentoInicial).setDate("vencimentoFinal", dataVencimentoFinal)
								.setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
								.setInteger("anoMesFinalReferenciaDebito", anoMesFinalReferenciaDebito);

				if(idImovel != null){
					queryGuiaPagamento.setInteger("idImovel", Integer.valueOf(idImovel));
				}

				if(idCliente != null){
					queryGuiaPagamento.setInteger("idCliente", Integer.valueOf(idCliente));
				}

				if(idClienteRelacaoTipo != null){
					queryGuiaPagamento.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
				}

				retorno = queryGuiaPagamento.list();

			}else{
				consulta = consulta + "ORDER BY guia.id, guiaPrestacao.comp_id.numeroPrestacao, guiaPrestacao.comp_id.debitoTipoId";

				Query queryGuiaPagamento = session.createQuery(consulta).setInteger("normal", situacaoNormal)
								.setInteger("incluida", situacaoIncluida).setInteger("retificada", situacaoRetificada)
								.setInteger("parcelada", situacaoParcelada).setDate("vencimentoInicial", dataVencimentoInicial)
								.setDate("vencimentoFinal", dataVencimentoFinal);

				if(idImovel != null){
					queryGuiaPagamento.setInteger("idImovel", Integer.valueOf(idImovel));
				}

				if(idCliente != null){
					queryGuiaPagamento.setInteger("idCliente", Integer.valueOf(idCliente));
				}

				if(idClienteRelacaoTipo != null){
					queryGuiaPagamento.setInteger("idClienteRelacaoTipo", idClienteRelacaoTipo);
				}

				retorno = queryGuiaPagamento.list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Rafael Santos
	 * @date 07/01/2006
	 * @author eduardo henrique
	 * @date 28/07/2008 Alteracoes na entidade GuiaPagamento para v0.03
	 * @author Saulo Lima
	 * @date 22/06/2009 Alteracao para retornar Colecao de Prestacoes. Mudanca
	 *       na assinatura.
	 * @param idImovel
	 *            Matricula do Imovel
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarGuiasPagamentoImovelSimplificado(String idImovel, String situacaoNormal,
					Date dataVencimentoInicial, Date dataVencimentoFinal, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT DISTINCT guia.id, " // 0
							+ " guiaPrestacao.comp_id.numeroPrestacao, " // 1
							+ " guiaPrestacao.dataVencimento, " // 2
							+ " guiaPrestacao.dataEmissao, " // 3
							+ " guiaPrestacao.comp_id, " // 4
							+ " guiaPrestacao.anoMesReferenciaFaturamento, " // 5
							+ " guiaPrestacao.dataVencimento, " // 6
							+ " guiaPrestacao.indicadorCobrancaMulta, " // 7
							+ " guiaPrestacao.valorPrestacao " // 8
							+ "FROM GuiaPagamentoPrestacao guiaPrestacao "
							+ "INNER JOIN guiaPrestacao.guiaPagamento guia "
							// + "INNER JOIN guia.documentoTipo documentoTipo "
							// + "INNER JOIN guia.imovel imovel "
							// +
							// "INNER JOIN guia.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
							// + "INNER JOIN guiaPrestacao.debitoTipo debitoTipo "
							+ "WHERE guia.imovel = :idImovel "
							+ "AND guia.debitoCreditoSituacaoAtual = :normal "
							+ "AND guiaPrestacao.dataVencimento >= :vencimentoInicial "
							+ "AND guiaPrestacao.dataVencimento <= :vencimentoFinal ";

			if(anoMesInicialReferenciaDebito != null && anoMesFinalReferenciaDebito != null){
				consulta = consulta + " and  guiaPrestacao.anoMesReferenciaFaturamento  >= :anoMesInicialReferenciaDebito "
								+ "and  guiaPrestacao.anoMesReferenciaFaturamento <= :anoMesFinalReferenciaDebito "
								+ "ORDER BY guia.id, guiaPrestacao.comp_id.numeroPrestacao, guiaPrestacao.comp_id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("idImovel", Integer.valueOf(idImovel))
								.setInteger("normal", Integer.valueOf(situacaoNormal)).setDate("vencimentoInicial", dataVencimentoInicial)
								.setDate("vencimentoFinal", dataVencimentoFinal)
								.setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
								.setInteger("anoMesFinalReferenciaDebito", anoMesInicialReferenciaDebito).list();

			}else{
				consulta = consulta + "ORDER BY guia.id, guiaPrestacao.comp_id.numeroPrestacao, guiaPrestacao.comp_id.debitoTipoId";

				retorno = session.createQuery(consulta).setInteger("idImovel", Integer.valueOf(idImovel))
								.setInteger("normal", Integer.valueOf(situacaoNormal)).setDate("vencimentoInicial", dataVencimentoInicial)
								.setDate("vencimentoFinal", dataVencimentoFinal).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0200] Inserir Debito Automatico [FS0004] Verificar Data de Opcao
	 * posterior ja informada
	 * 
	 * @author Roberta Costa
	 * @created 05/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public String verificarDataOpcao(String matriculaImovel, Date dataOpcao, String identificadorCliente, String codigoAgencia)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String idDebitoAutomatico = null;
		Object retorno = null;
		String consultaDataOpcao;

		try{
			// Verifica se a Data
			consultaDataOpcao = "select deb.id " + "from DebitoAutomatico deb " + "inner join deb.imovel imovel "
							+ "inner join deb.agencia agencia " + "where imovel.id = :matricula AND "
							+ "agencia.codigoAgencia = :codigoAgencia AND " + "deb.identificacaoClienteBanco = :identificadorCliente AND "
							+ "(deb.dataExclusao is null OR deb.dataOpcaoDebitoContaCorrente >= :data)";

			retorno = session.createQuery(consultaDataOpcao).setInteger("matricula", Integer.valueOf(matriculaImovel))
							.setDate("data", dataOpcao).setString("codigoAgencia", codigoAgencia)
							.setString("identificadorCliente", identificadorCliente).setMaxResults(1).uniqueResult();

			if(retorno != null){
				idDebitoAutomatico = ((Integer) retorno).toString();
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return idDebitoAutomatico;
	}

	/**
	 * [UC0201] Excluir Debito Automatico [FS0004] Verificar Data de Opcao
	 * posterior ja informada
	 * 
	 * @author Roberta Costa
	 * @created 05/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public String verificarDataOpcaoExclusao(String matriculaImovel, Date dataOpcao, String identificadorCliente)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String idDebitoAutomatico = null;
		Object retorno = null;
		String consultaDataOpcao;

		try{
			// Verifica se a Data
			consultaDataOpcao = "select deb.id " + "from DebitoAutomatico deb " + "inner join deb.imovel imovel "
							+ "inner join deb.agencia agencia " + "where imovel.id = :matricula AND " + "deb.dataExclusao is null "
							+ "and trunc(deb.dataOpcaoDebitoContaCorrente) > :data";

			retorno = session.createQuery(consultaDataOpcao).setInteger("matricula", Integer.valueOf(matriculaImovel))
							.setDate("data", dataOpcao).setMaxResults(1).uniqueResult();

			if(retorno != null){
				idDebitoAutomatico = ((Integer) retorno).toString();
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return idDebitoAutomatico;
	}

	/**
	 * [UC0200] Inserir Debito Automatico Verificar se o Imovel ja a Debito
	 * Automatico
	 * 
	 * @author Roberta Costa
	 * @created 05/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public String verificarDebitoAutomatico(String matriculaImovel) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String idDebitoAutomatico = null;
		Object retorno = null;
		String verificaDebitoAutomatico;

		try{
			// Verifica se ja tem Debito Automatico
			verificaDebitoAutomatico = "select agencia.id " + "from DebitoAutomatico deb " + "inner join deb.imovel imovel "
							+ "inner join deb.agencia agencia " + "where imovel.id = :matricula " + "and deb.dataExclusao is null ";

			retorno = session.createQuery(verificaDebitoAutomatico).setInteger("matricula", Integer.valueOf(matriculaImovel))
							.setMaxResults(1).uniqueResult();

			if(retorno != null){
				idDebitoAutomatico = ((Integer) retorno).toString();
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return idDebitoAutomatico;
	}

	/**
	 * [UC0200] Inserir Debito Automatico Atualiza a data da Exclusao com a data
	 * corrente em Dabio Automatico
	 * 
	 * @author Roberta Costa
	 * @created 05/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarDataExclusao(String matriculaImovel) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaDataExclusao;

		try{
			// Atualiza em Debito Automatico a Data Exclusao com a data corrente
			atualizaDataExclusao = "update gcom.arrecadacao.debitoautomatico.DebitoAutomatico "
							+ "set deba_dtexclusao = :data,deba_tmultimaalteracao = :ultimaAlteracao where imov_id = :matricula";

			session.createQuery(atualizaDataExclusao).setInteger("matricula", Integer.valueOf(matriculaImovel)).setDate("data", new Date())
							.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0200] Inserir Debito Automatico
	 * 
	 * @author Roberta Costa
	 * @created 04/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @param codigoBanco
	 *            Codigo do Banco
	 * @param codigoAgencia
	 *            Codigo da Agencia
	 * @param identificacaoCliente
	 *            Identificacao do Cliente no Banco
	 * @param dataOpcao
	 *            Data da Opcao
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void inserirDebitoAutomatico(DebitoAutomatico debitoAutomatico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		try{
			// Inclui o Debito Automatico

			session.save(debitoAutomatico);
			session.flush();
			session.clear();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0200] Inserir Debito Automatico Atualiza o indicador de dabio
	 * Automatico em Imovel
	 * 
	 * @author Roberta Costa
	 * @created 05/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarIndicadorDebitoAutomatico(String matriculaImovel, Integer indicadorDebito) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaIndicadorDebitoAutomatico;

		try{
			// Atualiza em Debito Automatico a Data Exclusao com a data corrente
			atualizaIndicadorDebitoAutomatico = "update gcom.cadastro.imovel.Imovel "
							+ "set imov_icdebitoconta = :indicador,imov_tmultimaalteracao = :ultimaAlteracao where imov_id = :matricula";

			session.createQuery(atualizaIndicadorDebitoAutomatico).setInteger("matricula", Integer.valueOf(matriculaImovel))
							.setInteger("indicador", indicadorDebito).setTimestamp("ultimaAlteracao", new Date()).executeUpdate();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0201] Remover Debito Automatico Verificar se o Imovel ja a Debito
	 * Automatico para o mesmo Banco e Agencia
	 * 
	 * @author Roberta Costa
	 * @created 09/01/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public String verificarDebitoAutomaticoBancoAgencia(String codigoBanco, String codigoAgencia) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String idDebitoAutomatico = null;
		Object retorno = null;
		String verificaDebitoAutomatico;

		try{
			// Verifica se ja tem Debito Automatico
			verificaDebitoAutomatico = "select agencia.id " + "from Agencia agencia " + "inner join agencia.banco banco "
							+ "where banco.id = :codigoBanco " + "and agencia.codigoAgencia = :agencia ";

			retorno = session.createQuery(verificaDebitoAutomatico).setInteger("codigoBanco", Integer.valueOf(codigoBanco))
							.setString("agencia", codigoAgencia).setMaxResults(1).uniqueResult();

			if(retorno != null){
				idDebitoAutomatico = ((Integer) retorno).toString();
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return idDebitoAutomatico;
	}

	/**
	 * [UC0246] Executar Atividade de Acao de cobranca Pesquisa uma Colecao de
	 * CobrancaAcaoAtividadeCronograma
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	/*
	 * public Collection<CobrancaAcaoAtividadeCronograma>
	 * pesquisarCobrancaAcaoAtividadeCronograma() throws
	 * ErroRepositorioException{
	 * //cria a variavel que vai armazenar a Colecao pesquisada
	 * Collection<CobrancaAcaoAtividadeCronograma> retorno = null;
	 * //cria uma sessao com o hibernate Session session =
	 * HibernateUtil.getSession();
	 * //cria a variavel que vai conter o hql String consulta;
	 * try { //constroi o hql consulta = "select caac " + "from
	 * CobrancaAcaoAtividadeCronograma caac " + "where (caac.comando is not
	 * null) and " + "((caac.realizacao is null) or (caac.realizacao <
	 * caac.comando))";
	 * //executa o hql retorno = session.createQuery(consulta).list();
	 * //erro no hibernate } catch (HibernateException e) { // levanta a execucao
	 * para a proxima camada throw new ErroRepositorioException(e, "Erro no
	 * Hibernate"); } finally { // fecha a sessao
	 * HibernateUtil.closeSession(session); }
	 * //retorna a Colecao do resultado da pesquisa return retorno; }
	 */

	/**
	 * [UC0246] Executar Atividade de Acao de cobranca Pesquisa uma Colecao de
	 * CobrancaAcaoAtividadeComand
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	/*
	 * public Collection<CobrancaAcaoAtividadeComand>
	 * pesquisarCobrancaAcaoAtividadeComand() throws ErroRepositorioException{
	 * //cria a variavel que vai armazenar a Colecao pesquisada
	 * Collection<CobrancaAcaoAtividadeComand> retorno = null;
	 * //cria uma sessao com o hibernate Session session =
	 * HibernateUtil.getSession();
	 * //cria a variavel que vai conter o hql String consulta;
	 * try { //constroi o hql consulta = "select cacm " + "from
	 * CobrancaAcaoAtividadeComand cacm " + "where (cacm.comando is not null)
	 * and " + "((cacm.realizacao is null) or (cacm.realizacao <
	 * cacm.comando))";
	 * //executa o hql retorno = session.createQuery(consulta).list();
	 * //erro no hibernate } catch (HibernateException e) { // levanta a execucao
	 * para a proxima camada throw new ErroRepositorioException(e, "Erro no
	 * Hibernate"); } finally { // fecha a sessao
	 * HibernateUtil.closeSession(session); }
	 * //retorna a Colecao do resultado da pesquisa return retorno; }
	 */

	/**
	 * Consultar Dados do Cliente Imovel Vinculado Auhtor: Rafael Santos Data:
	 * 23/01/2006
	 * 
	 * @param inscricaoImovel
	 *            Inscricao do Imovel
	 * @return Dados do Imovel Vinculado
	 * @throws ControladorException
	 */
	public Object[] consultarDadosClienteImovelUsuario(Imovel imovel) throws ErroRepositorioException{

		Object[] retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = null;
		try{
			consulta = "select cliente.id,cliente.nome " + "from ClienteImovel clienteImovel "
							+ "inner join clienteImovel.cliente cliente " + "inner join clienteImovel.imovel imovel "
							+ "inner join clienteImovel.clienteRelacaoTipo clienteRelacaoTipo "
							+ "where imovel.id = :id and clienteRelacaoTipo.id = :usuario "
							+ "and clienteImovel.clienteImovelFimRelacaoMotivo is null";

			retorno = (Object[]) session.createQuery(consulta).setInteger("id", imovel.getId())
							.setInteger("usuario", ClienteRelacaoTipo.USUARIO).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;

	}

	/**
	 * Consultar Matriculas dos Imoveis Vinculados do Imovel condominio Auhtor:
	 * Rafael Santos Data: 23/01/2006 [UC0179] Consultar Historico Medicao
	 * Indiviualizada
	 * 
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarConsumoHistoricoImoveisVinculados(ConsumoHistorico consumoHistorico) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select imovel.id " + "from ConsumoHistorico consumo " + "inner join consumo.imovel imovel "
							+ "where consumo.consumoImovelCondominio = :id";

			retorno = session.createQuery(consulta).setInteger("id", consumoHistorico.getId()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * Consultar Consumo Tipo do Consumo Historico
	 * 
	 * @author Rafael Santos
	 * @date 23/01/2006
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return Dados do Consumo Tipo
	 * @throws ControladorException
	 */
	public Object[] consultarDadosConsumoTipoConsumoHistorico(ConsumoHistorico consumoHistorico) throws ErroRepositorioException{

		Object[] retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = null;
		try{
			consulta = "select consumo.descricaoAbreviada,consumo.id " + "from ConsumoTipo consumo " + "where consumo.id = :id";

			retorno = (Object[]) session.createQuery(consulta).setInteger("id", consumoHistorico.getConsumoTipo().getId()).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * Consultar Consumo Historico da Medicao Individualizada Auhtor: Rafael
	 * Santos Data: 23/01/2006 [UC0179] Consultar Historico Medicao
	 * Indiviualizada
	 * 
	 * @param imovel
	 *            Imovel
	 * @param ligcaoTipo
	 *            Tipo de Ligacao
	 * @param anoMesFaturamento
	 *            Ano Mes Faturamento
	 * @return
	 * @throws ControladorException
	 */
	public Object[] obterConsumoHistoricoMedicaoIndividualizada(Imovel imovel, LigacaoTipo ligacaoTipo, int anoMesFaturamento)
					throws ErroRepositorioException{

		Object[] retornoDados = null;
		Object retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = null;
		try{
			consulta = "select ch.id,ch.consumoRateio, " + "ch.numeroConsumoFaturadoMes,ch.consumoTipo "
							+ "from ConsumoHistorico ch where  " + "ch.imovel.id = :id  " + "and ch.referenciaFaturamento = :anoMes "
							+ "and ch.ligacaoTipo.id = :ligacao";

			retorno = session.createQuery(consulta).setInteger("id", imovel.getId().intValue()).setInteger("anoMes", anoMesFaturamento)
							.setInteger("ligacao", ligacaoTipo.getId()).setMaxResults(1).uniqueResult();

			if(retorno != null){
				retornoDados = (Object[]) retorno;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retornoDados;

	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em conta
	 * 
	 * @author Fernanda Karla
	 * @created 14/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idConta
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoConta(String codigoConta, int situacaoAtual, int anoMesReferenciaContabil) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoConta;

		try{
			// Atualiza em conta o DebitoCreditoSituacao
			atualizaSituacaoConta = "update gcom.faturamento.conta.Conta " + "set dcst_idatual = :situacaoAtual, dcst_idanterior = null, "
							+ "cnta_tmultimaalteracao = :ultimaAlteracao, cnta_amreferenciacontabil = :anoMesReferenciaContabil "
							+ "where cnta_id = :codigoConta";

			session.createQuery(atualizaSituacaoConta).setInteger("codigoConta", Integer.valueOf(codigoConta).intValue())
							.setInteger("situacaoAtual", Integer.valueOf(situacaoAtual).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em guia pagamento
	 * 
	 * @author Fernanda Karla
	 * @created 15/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idGuiaPagamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoGuiaPagamento(String codigoGuiaPagamento, int situacaoAtualGuia, int anoMesReferenciaContabil)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoGuiaPagamento;

		try{
			// Atualiza em guiapagamento o DebitoCreditoSituacao
			atualizaSituacaoGuiaPagamento = "update gcom.arrecadacao.pagamento.GuiaPagamento "
							+ "set dcst_idatual = :situacaoAtualGuia, dcst_idanterior = null, "
							+ "gpag_tmultimaalteracao = :ultimaAlteracao, gpag_amreferenciacontabil = :anoMesReferenciaContabil "
							+ "where gpag_id = :codigoGuiaPagamento";

			session.createQuery(atualizaSituacaoGuiaPagamento).setInteger("codigoGuiaPagamento", Integer.valueOf(codigoGuiaPagamento))
							.setInteger("situacaoAtualGuia", situacaoAtualGuia)
							.setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil).setTimestamp("ultimaAlteracao", new Date())
							.executeUpdate();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idParcelamento
	 *            motivo parcelamentoSituacao
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarParcelamento(Integer codigoParcelamento, Integer parcelamentoSituacao, String motivo)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaParcelamento;

		try{
			// Atualiza em guiapagamento o DebitoCreditoSituacao
			atualizaParcelamento = "update gcom.cobranca.parcelamento.Parcelamento "
							+ "set pcst_id = :parcelamentoSituacao, pmdz_id = :motivo, parc_tmultimaalteracao = :ultimaAlteracao  "
							+ "where parc_id = :codigoParcelamento";

			session.createQuery(atualizaParcelamento).setInteger("codigoParcelamento", Integer.valueOf(codigoParcelamento).intValue())
							.setInteger("parcelamentoSituacao", Integer.valueOf(parcelamentoSituacao).intValue())
							.setInteger("motivo", Integer.valueOf(motivo).intValue()).setTimestamp("ultimaAlteracao", new Date())
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em debito a cobrar
	 * 
	 * @author Fernanda Karla
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            iddebitoacobrar
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoDebitoACobrar(String codigoDebitoACobrar, int situacaoAtualDebito, int anoMesReferenciaContabil)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoDebitoACobrar;

		try{
			// Atualiza em debitoacobrar o DebitoCreditoSituacao
			atualizaSituacaoDebitoACobrar = "update gcom.faturamento.debito.DebitoACobrar "
							+ "set dcst_idatual = :situacaoAtualDebito, dcst_idanterior = null, "
							+ "dbac_tmultimaalteracao = :ultimaAlteracao, dbac_amreferenciacontabil =:anoMesReferenciaContabil  "
							+ "where dbac_id = :codigoDebitoACobrar";

			session.createQuery(atualizaSituacaoDebitoACobrar)
							.setInteger("codigoDebitoACobrar", Integer.valueOf(codigoDebitoACobrar).intValue())
							.setInteger("situacaoAtualDebito", Integer.valueOf(situacaoAtualDebito).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em debito a cobrar
	 * 
	 * @author Fernanda Karla
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            iddebitoacobrar
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoDebitoACobrarHistorico(String codigoDebitoACobrar, int situacaoAtualDebito, int anoMesReferenciaContabil)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoDebitoACobrar;

		try{
			// Atualiza em debitoacobrar o DebitoCreditoSituacaoHistorico
			atualizaSituacaoDebitoACobrar = "update gcom.faturamento.debito.DebitoACobrarHistorico "
							+ "set dcst_idatual = :situacaoAtualDebito, dcst_idanterior = null, "
							+ "dahi_tmultimaalteracao = :ultimaAlteracao, dahi_amreferenciacontabil =:anoMesReferenciaContabil  "
							+ "where dbac_id = :codigoDebitoACobrar";

			session.createQuery(atualizaSituacaoDebitoACobrar)
							.setInteger("codigoDebitoACobrar", Integer.valueOf(codigoDebitoACobrar).intValue())
							.setInteger("situacaoAtualDebito", Integer.valueOf(situacaoAtualDebito).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em credito a realizar
	 * 
	 * @author Fernanda Karla
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idCreditoARealizar
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoCreditoARealizar(String codigoCreditoARealizar, int situacaoAtualCredito, int anoMesReferenciaContabil)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoCreditoARealizar;

		try{
			// Atualiza em creditoarealizar o DebitoCreditoSituacao
			atualizaSituacaoCreditoARealizar = "update gcom.faturamento.credito.CreditoARealizar "
							+ "set dcst_idatual = :situacaoAtualCredito, dcst_idanterior = null, "
							+ "crar_tmultimaalteracao = :ultimaAlteracao , crar_amreferenciacontabil = :anoMesReferenciaContabil "
							+ "where crar_id = :codigoCreditoARealizar";

			session.createQuery(atualizaSituacaoCreditoARealizar)
							.setInteger("codigoCreditoARealizar", Integer.valueOf(codigoCreditoARealizar).intValue())
							.setInteger("situacaoAtualCredito", Integer.valueOf(situacaoAtualCredito).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Atualiza o debitocreditosituacao
	 * em credito a realizar
	 * 
	 * @author Fernanda Karla
	 * @created 16/02/2006
	 * @param DebitoCreditoSituacaoAtual
	 *            idCreditoARealizar
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void atualizarSituacaoCreditoARealizarHistorico(String codigoCreditoARealizarHistorico, int situacaoAtualCredito,
					int anoMesReferenciaContabil) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizaSituacaoCreditoARealizarHistorico;

		try{
			// Atualiza em creditoarealizar o DebitoCreditoSituacao
			atualizaSituacaoCreditoARealizarHistorico = "update gcom.faturamento.credito.CreditoARealizarHistorico "
							+ "set dcst_idatual = :situacaoAtualCredito, dcst_idanterior = null, "
							+ "crar_tmultimaalteracao = :ultimaAlteracao , crar_amreferenciacontabil = :anoMesReferenciaContabil "
							+ "where crar_id = :codigoCreditoARealizarHistorico";

			session.createQuery(atualizaSituacaoCreditoARealizarHistorico)
							.setInteger("codigoCreditoARealizarHistorico", Integer.valueOf(codigoCreditoARealizarHistorico).intValue())
							.setInteger("situacaoAtualCredito", Integer.valueOf(situacaoAtualCredito).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).setInteger("anoMesReferenciaContabil", anoMesReferenciaContabil)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove Debitos a cobrar referentes
	 * ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerDebitoACobrarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerDebitoACobrarDoParcelamento;
		String consulta;
		Collection collectionIdDebito = null;

		try{

			consulta = "select dac.id  " + "from DebitoACobrar dac "
							+ "where dac.imovel.id = :codigoImovel and dac.parcelamento.id = :codigoParcelamento";

			collectionIdDebito = session.createQuery(consulta).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).list();

			if(collectionIdDebito != null && !collectionIdDebito.isEmpty()){

				Iterator icolecaoDebitos = collectionIdDebito.iterator();

				while(icolecaoDebitos.hasNext()){

					String id = ((Integer) icolecaoDebitos.next()).toString();
					consulta = "delete DebitoACobrarCategoria debitoACobrarCategoria "
									+ "where debitoACobrarCategoria.debitoACobrar.id = :debito ";

					session.createQuery(consulta).setInteger("debito", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}

			// deleta cobranca documento item
			if(collectionIdDebito != null && !collectionIdDebito.isEmpty()){

				Iterator icolecaoDebitos = collectionIdDebito.iterator();

				while(icolecaoDebitos.hasNext()){

					String id = ((Integer) icolecaoDebitos.next()).toString();
					consulta = "delete CobrancaDocumentoItem cobrancaDocumentoItem "
									+ "where cobrancaDocumentoItem.debitoACobrarGeral.id = :debito ";

					session.createQuery(consulta).setInteger("debito", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}

			// deleta o debito a cobrar
			removerDebitoACobrarDoParcelamento = "delete DebitoACobrar "
							+ "where imov_id = :codigoImovel and parc_id = :codigoParcelamento ";

			session.createQuery(removerDebitoACobrarDoParcelamento).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).executeUpdate();

			if(collectionIdDebito != null && !collectionIdDebito.isEmpty()){

				Iterator icolecaoDebitos = collectionIdDebito.iterator();

				while(icolecaoDebitos.hasNext()){

					String id = ((Integer) icolecaoDebitos.next()).toString();
					consulta = "delete DebitoACobrarGeral debitoACobrarGeral " + "where debitoACobrarGeral.debitoACobrar.id = :debito ";

					session.createQuery(consulta).setInteger("debito", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove Debitos a cobrar categoria
	 * referentes ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerDebitoACobrarCategoriaDoParcelamento(Integer idDebito) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerDebitoACobrarDoParcelamento;

		try{
			// Atualiza em debitoacobrar o DebitoCreditoSituacao
			removerDebitoACobrarDoParcelamento = "delete gcom.faturamento.debito.DebitoACobrarCategoria " + "where dbac_id = :idDebito ";

			session.createQuery(removerDebitoACobrarDoParcelamento).setInteger("idDebito", idDebito.intValue()).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove Debitos a cobrar categoria
	 * referentes ao parcelamento historico
	 * 
	 * @author Vitor
	 * @created 21/08/2008
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerDebitoACobrarCategoriaDoParcelamentoHistorico(Integer idDebito) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerDebitoACobrarDoParcelamento;

		try{
			// Atualiza em debitoacobrar o DebitoCreditoSituacao
			removerDebitoACobrarDoParcelamento = "delete gcom.faturamento.debito.DebitoACobrarCategoriaHistorico "
							+ "where dbac_id = :idDebito ";

			session.createQuery(removerDebitoACobrarDoParcelamento).setInteger("idDebito", idDebito.intValue()).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Seleciona o Debito a cobrar para
	 * remover do parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<DebitoACobrar> pesquisarDebitoACobrarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<DebitoACobrar> retorno = null;
		String pesquisarDebitoACobrarDoParcelamento;

		try{
			// Atualiza em debitoacobrar o DebitoCreditoSituacao
			pesquisarDebitoACobrarDoParcelamento = "SELECT debitoACobrar FROM DebitoACobrar debitoACobrar "
							+ "WHERE debitoACobrar.imovel.id = :codigoImovel AND debitoACobrar.parcelamento.id = :codigoParcelamento ";

			retorno = session.createQuery(pesquisarDebitoACobrarDoParcelamento).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove credito a realizar
	 * referentes ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerCreditoARealizarDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerCreditoARealizarDoParcelamento;
		String consulta;
		Collection collectionIdCredito = null;

		try{

			consulta = "select car.id  " + "from CreditoARealizar car "
							+ "where car.imovel.id = :codigoImovel and car.parcelamento.id = :codigoParcelamento";

			collectionIdCredito = session.createQuery(consulta).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).list();

			if(collectionIdCredito != null && !collectionIdCredito.isEmpty()){

				Iterator icolecaoCreditos = collectionIdCredito.iterator();

				while(icolecaoCreditos.hasNext()){

					String id = ((Integer) icolecaoCreditos.next()).toString();
					consulta = "delete CreditoARealizarCategoria creditoARealizarCategoria "
									+ "where creditoARealizarCategoria.creditoARealizar.id = :credito ";

					session.createQuery(consulta).setInteger("credito", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}

			// deleta o debito a cobrar
			removerCreditoARealizarDoParcelamento = "delete CreditoARealizar "
							+ "where imov_id = :codigoImovel and parc_id = :codigoParcelamento ";

			session.createQuery(removerCreditoARealizarDoParcelamento).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).executeUpdate();

			if(collectionIdCredito != null && !collectionIdCredito.isEmpty()){

				Iterator icolecaoCreditos = collectionIdCredito.iterator();

				while(icolecaoCreditos.hasNext()){

					String id = ((Integer) icolecaoCreditos.next()).toString();
					consulta = "delete CreditoARealizarGeral creditoARealizarGeral "
									+ "where creditoARealizarGeral.creditoARealizar.id = :credito ";

					session.createQuery(consulta).setInteger("credito", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove credito a realizar
	 * referentes ao parcelamento historico
	 * 
	 * @author Vitor
	 * @created 21/08/2008
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void transferirCreditoARealizarHistoricoParaCreditoARealizar(Integer idCreditoARealizarHistorico, Integer idParcelamento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection colecaoClienteCreditoARealizar = null;
		Collection colecaoClienteCreditoARealizarHistorico = null;
		try{

			String consulta = "select dac from CreditoARealizarHistorico dac where dac.id = :idCreditoARealizarHistorico";
			CreditoARealizarHistorico creditoARealizarHistorico = (CreditoARealizarHistorico) session.createQuery(consulta)
							.setInteger("idCreditoARealizarHistorico", idCreditoARealizarHistorico.intValue()).uniqueResult();

			CreditoARealizarCategoriaHistorico creditoARealizarCategoriaHistorico = creditoARealizarHistorico
							.getCreditoARealizarCategoriasHistorico().iterator().next();

			consulta = "select pi " + "from ParcelamentoItem pi "
							+ "where pi.creditoARealizarGeral.id = :idCreditoARealizarHistorico and pi.parcelamento.id = :idParcelamento";
			ParcelamentoItem parcelamentoItem = (ParcelamentoItem) session.createQuery(consulta)
							.setInteger("idCreditoARealizarHistorico", idCreditoARealizarHistorico.intValue())
							.setInteger("idParcelamento", idParcelamento.intValue()).uniqueResult();

			CreditoARealizar creditoARealizar = null;
			CreditoARealizarCategoria creditoARealizarCategoria = null;
			Date ultimaAlt = new Date();
			if(parcelamentoItem != null){
				creditoARealizar = new CreditoARealizar();
				try{
					PropertyUtils.copyProperties(creditoARealizar, creditoARealizarHistorico);
				}catch(IllegalAccessException e){
					// TODO Auto-generated catch block
					e.printStackTrace();
				}catch(InvocationTargetException e){
					// TODO Auto-generated catch block
					e.printStackTrace();
				}catch(NoSuchMethodException e){
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				DebitoCreditoSituacao dcsAnteriorHistorico = creditoARealizarHistorico.getDebitoCreditoSituacaoAnterior();
				if(dcsAnteriorHistorico == null){
					DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
					debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);
					creditoARealizar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
				}else{
					creditoARealizar.setDebitoCreditoSituacaoAtual(dcsAnteriorHistorico);
				}

				/*
				 * Validacao para settar NULL nos atributos numericos de destino
				 * porque o metodo PropertyUtils.copyProperties(X, Y) coloca o valor
				 * 0 (zero) quando os atributos numericos da origem sa£o nulos.
				 * Obs.: Solucao para Implantacao. TODO
				 * Saulo Lima - 06/02/2009
				 */
				if(creditoARealizarHistorico.getAnoMesReferenciaCredito() == null){
					creditoARealizar.setAnoMesReferenciaCredito(null);
				}

				creditoARealizar.setDebitoCreditoSituacaoAnterior(null);
				creditoARealizar.setUltimaAlteracao(ultimaAlt);
				creditoARealizar.setGeracaoCredito(creditoARealizarHistorico.getGeracaoCreditoARealizar());
				creditoARealizar.setNumeroLote(creditoARealizarHistorico.getLote());
				creditoARealizar.setNumeroPrestacaoCredito(creditoARealizarHistorico.getPrestacaoCredito());
				creditoARealizar.setNumeroPrestacaoRealizada(creditoARealizarHistorico.getPrestacaoRealizadas());
				creditoARealizar.setNumeroSubLote(creditoARealizarHistorico.getSubLote());

				consulta = "select dac from CreditoARealizarGeral dac where dac.id = :idCreditoARealizarHistorico";
				CreditoARealizarGeral creditoARealizarGeral = (CreditoARealizarGeral) session.createQuery(consulta)
								.setInteger("idCreditoARealizarHistorico", idCreditoARealizarHistorico.intValue()).uniqueResult();
				creditoARealizarGeral.setIndicadorHistorico(ConstantesSistema.NAO);
				creditoARealizarGeral.setUltimaAlteracao(ultimaAlt);
				creditoARealizar.setCreditoARealizarGeral(creditoARealizarGeral);
				creditoARealizar.setParcelamento(null);

				creditoARealizarCategoria = new CreditoARealizarCategoria();

				creditoARealizarCategoria.setCategoria(creditoARealizarCategoriaHistorico.getCategoria());
				creditoARealizarCategoria.setCreditoARealizar(creditoARealizar);
				creditoARealizarCategoria.setUltimaAlteracao(ultimaAlt);
				creditoARealizarCategoria.setValorCategoria(creditoARealizarCategoriaHistorico.getValorCategoria());
				creditoARealizarCategoria.setQuantidadeEconomia(creditoARealizarCategoriaHistorico.getQuantidadeEconomia());

				CreditoARealizarCategoriaPK pk = new CreditoARealizarCategoriaPK();
				pk.setCategoria(creditoARealizarCategoriaHistorico.getCategoria());
				pk.setCreditoARealizar(creditoARealizar);
				creditoARealizarCategoria.setComp_id(pk);

				Set<CreditoARealizarCategoria> creditoARealizarCategorias = new HashSet<CreditoARealizarCategoria>();
				creditoARealizarCategorias.add(creditoARealizarCategoria);
				creditoARealizar.setCreditoARealizarCategoria(creditoARealizarCategorias);

				consulta = "select crh " + "from ClienteCreditoARealizarHistorico crh "
								+ "where crh.creditoARealizarHistorico.id = :idCreditoARealizarHistorico ";
				colecaoClienteCreditoARealizarHistorico = (Collection) session.createQuery(consulta)
								.setInteger("idCreditoARealizarHistorico", idCreditoARealizarHistorico).list();

				colecaoClienteCreditoARealizar = new ArrayList();
				Iterator it = colecaoClienteCreditoARealizarHistorico.iterator();
				while(it.hasNext()){
					ClienteCreditoARealizarHistorico clienteCreditoARealizarHistorico = (ClienteCreditoARealizarHistorico) it.next();

					ClienteCreditoARealizar clienteCreditoARealizar = new ClienteCreditoARealizar();
					try{
						PropertyUtils.copyProperties(clienteCreditoARealizar, clienteCreditoARealizarHistorico);
						colecaoClienteCreditoARealizar.add(clienteCreditoARealizar);
					}catch(IllegalAccessException e){
						// TODO Auto-generated catch block
						e.printStackTrace();
					}catch(InvocationTargetException e){
						// TODO Auto-generated catch block
						e.printStackTrace();
					}catch(NoSuchMethodException e){
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}

			}

			Iterator it = colecaoClienteCreditoARealizarHistorico.iterator();
			while(it.hasNext()){
				ClienteCreditoARealizarHistorico clienteCreditoARealizarHistorico = (ClienteCreditoARealizarHistorico) it.next();
				session.delete(clienteCreditoARealizarHistorico);
			}

			session.delete(creditoARealizarCategoriaHistorico);
			session.delete(creditoARealizarHistorico);

			// so insere os creditos a realizar e categoria se os mesmos ja
			// existiam antes do parcelamento ter sido efetuado
			if(creditoARealizar != null){
				session.save(creditoARealizar);
			}
			if(creditoARealizarCategoria != null){
				session.save(creditoARealizarCategoria);
			}

			Iterator itt = colecaoClienteCreditoARealizar.iterator();
			while(it.hasNext()){
				ClienteCreditoARealizar clienteCreditoARealizar = (ClienteCreditoARealizar) itt.next();
				session.save(clienteCreditoARealizar);
			}

			session.flush();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove guia pagamento referentes
	 * ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 *          Alterado por: Yara Souza Data: 13/05/2010 Foi alterada a ordem
	 *          de remoa§a£o dos registros, pois estava havendo violAcao de
	 *          constraint.
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerGuiaPagamentoDoParcelamento(Integer codigoImovel, Integer codigoParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String consulta;
		Collection collectionIdGuia = null;

		try{

			consulta = "select gui.id  " + "from GuiaPagamento gui "
							+ "where gui.imovel.id = :codigoImovel and gui.parcelamento.id = :codigoParcelamento";

			collectionIdGuia = session.createQuery(consulta).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).list();

			if(collectionIdGuia != null && !collectionIdGuia.isEmpty()){

				Iterator icolecaoGuias = collectionIdGuia.iterator();

				while(icolecaoGuias.hasNext()){

					// ------------------------------------
					// deleta guia pagemento categoria
					String id = ((Integer) icolecaoGuias.next()).toString();
					consulta = "delete GuiaPagamentoCategoria guiaPagamentoCategoria "
									+ "where guiaPagamentoCategoria.guiaPagamento.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();

					// ------------------------------------
					// deleta cobranca documento item
					consulta = "delete CobrancaDocumentoItem cobrancaDocumentoItem "
									+ "where cobrancaDocumentoItem.guiaPagamentoGeral.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();

					// Remore dados da guia pagamento prestacao
					consulta = "delete GuiaPagamentoPrestacao guiaPagamentoPrestacao "
									+ "where guiaPagamentoPrestacao.guiaPagamento.id = :guiaPrestacao ";

					session.createQuery(consulta).setInteger("guiaPrestacao", Integer.valueOf(id).intValue()).executeUpdate();

					// ------------------------------------
					// deleta a guia de pagamento
					consulta = "delete GuiaPagamento guiaPagamento " + "where guiaPagamento.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();

					// ------------------------------------
					// deleta a guia de pagamento gerencial
					consulta = "delete GuiaPagamentoGeral guiaPagamentoGeral " + "where guiaPagamentoGeral.guiaPagamento.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();

				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove guia pagamento referentes
	 * ao parcelamento historico
	 * 
	 * @author Vitor
	 * @created 21/08/2008
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerGuiaPagamentoDoParcelamentoHistorico(Integer codigoImovel, Integer codigoParcelamento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerGuiaPagamentoDoParcelamento;
		String consulta;
		Collection collectionIdGuia = null;

		try{

			consulta = "select gui.id  " + "from GuiaPagamentoHistorico gui "
							+ "where gui.imovel.id = :codigoImovel and gui.parcelamento.id = :codigoParcelamento";

			collectionIdGuia = session.createQuery(consulta).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).list();

			if(collectionIdGuia != null && !collectionIdGuia.isEmpty()){

				Iterator icolecaoGuias = collectionIdGuia.iterator();

				while(icolecaoGuias.hasNext()){

					String id = ((Integer) icolecaoGuias.next()).toString();
					consulta = "delete GuiaPagamentoCategoriaHistorico guiaPagamentoCategoria "
									+ "where guiaPagamentoCategoria.guiaPagamento.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}

			// deleta cobranca documento item
			if(collectionIdGuia != null && !collectionIdGuia.isEmpty()){

				Iterator icolecaoGuias = collectionIdGuia.iterator();

				while(icolecaoGuias.hasNext()){

					String id = ((Integer) icolecaoGuias.next()).toString();
					consulta = "delete CobrancaDocumentoItem cobrancaDocumentoItem "
									+ "where cobrancaDocumentoItem.guiaPagamentoGeral.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();
				}

			}

			// deleta o debito a cobrar
			removerGuiaPagamentoDoParcelamento = "delete GuiaPagamentoHistorico "
							+ "where imov_id = :codigoImovel and parc_id = :codigoParcelamento ";

			session.createQuery(removerGuiaPagamentoDoParcelamento).setInteger("codigoImovel", codigoImovel.intValue())
							.setInteger("codigoParcelamento", codigoParcelamento.intValue()).executeUpdate();

			if(collectionIdGuia != null && !collectionIdGuia.isEmpty()){

				Iterator icolecaoGuias = collectionIdGuia.iterator();

				while(icolecaoGuias.hasNext()){

					String id = ((Integer) icolecaoGuias.next()).toString();
					consulta = "delete GuiaPagamentoGeral guiaPagamentoGeral " + "where guiaPagamentoGeral.guiaPagamento.id = :guia ";

					session.createQuery(consulta).setInteger("guia", Integer.valueOf(id).intValue()).executeUpdate();
				}
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove guia pagamento referentes
	 * ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerGuiaPagamentoCobrancaDoParcelamento(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerGuiaPagamentoDoParcelamento;

		try{
			// remove em credito a realizar os parcelamentos
			removerGuiaPagamentoDoParcelamento = "delete gcom.arrecadacao.pagamento.GuiaPagamentoCategoria "
							+ "where gpag_id = :idGuiaPagamento ";

			session.createQuery(removerGuiaPagamentoDoParcelamento).setInteger("idGuiaPagamento", idGuiaPagamento.intValue())
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove guia pagamento referentes
	 * ao parcelamento
	 * 
	 * @author Fernanda Karla
	 * @created 20/02/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerGuiaPagamentoCobrancaDoParcelamentoHistorico(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerGuiaPagamentoDoParcelamento;

		try{
			// remove em credito a realizar os parcelamentos
			removerGuiaPagamentoDoParcelamento = "delete gcom.arrecadacao.pagamento.GuiaPagamentoCategoriaHistorico "
							+ "where gpag_id = :idGuiaPagamento ";

			session.createQuery(removerGuiaPagamentoDoParcelamento).setInteger("idGuiaPagamento", idGuiaPagamento.intValue())
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0246] Executar Atividade de Acao de cobranca Pesquisa uma Colecao de
	 * CobrancaAcaoAtividadeCronograma
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma() throws ErroRepositorioException{

		// cria a variavel que vai armazenar a Colecao pesquisada
		Collection<CobrancaAcaoAtividadeCronograma> retorno = new ArrayList();

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta;

		try{
			// constroi o hql
			consulta = "select caac " + "from CobrancaAcaoAtividadeCronograma caac " + " left join fetch caac.cobrancaAcaoCronograma cac"
							+ " left join fetch caac.cobrancaAtividade" + " left join fetch cac.cobrancaAcao"
							+ " left join fetch cac.cobrancaGrupoCronogramaMes" + " left join fetch cac.cobrancaGrupoCronogramaMes cgcm"
							+ " left join fetch cgcm.cobrancaGrupo" + "where (caac.comando is not null) and "
							+ "((caac.realizacao is null) or (caac.realizacao < caac.comando))";

			// executa o hql
			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta).list()));

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// retorna a Colecao do resultado da pesquisa
		return retorno;
	}

	/**
	 * Consultar Comando de Acao de cobranca - Cronograma
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @return Collection<CobrancaAcaoAtividadeCronograma>
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(Integer idCobrancaGrupo,
					Integer idCobrancaAcao, Integer idComando, Date dataInicial, Date dataFinal) throws ErroRepositorioException{

		// variavel que vai armazenar a Colecao pesquisada
		Collection<CobrancaAcaoAtividadeCronograma> retorno = null;

		// Recupera sessao do hibernate
		Session session = HibernateUtil.getSession();

		Map<String, Object> parametros = new HashMap<String, Object>();

		try{

			String consulta = "SELECT caac" + " FROM CobrancaAcaoAtividadeCronograma caac"
							+ " LEFT JOIN FETCH caac.cobrancaAcaoCronograma cac" + " LEFT JOIN FETCH cac.cobrancaAcao acao"
							+ " LEFT JOIN FETCH cac.cobrancaGrupoCronogramaMes cgcm" + " LEFT JOIN FETCH cgcm.cobrancaGrupo grupo"
							+ " WHERE";

			if(idCobrancaGrupo != null){
				consulta += " cac.cobrancaGrupoCronogramaMes.cobrancaGrupo.id = :idCobrancaGrupo AND";
				parametros.put("idCobrancaGrupo", idCobrancaGrupo);
			}

			if(idCobrancaAcao != null){
				consulta += " cac.cobrancaAcao.id = :idCobrancaAcao AND";
				parametros.put("idCobrancaAcao", idCobrancaAcao);
			}

			if(idComando != null){
				consulta += " caac.id = :idComando AND";
				parametros.put("idComando", idComando);
			}

			if(dataInicial != null && dataFinal != null){
				consulta += " caac.realizacao BETWEEN :dataInicial AND :dataFinal AND";
				parametros.put("dataInicial", dataInicial);
				parametros.put("dataFinal", dataFinal);
			}else if(dataInicial != null){
				consulta += " caac.realizacao >= :dataInicial AND";
				parametros.put("dataInicial", dataInicial);
			}else if(dataFinal != null){
				consulta += " caac.realizacao <= :dataFinal AND";
				parametros.put("dataFinal", dataFinal);
			}

			// Retirar os ultimas 4 caracteres da String consulta (" AND")
			consulta = Util.formatarHQL(consulta, 4);

			// Cria a Query
			Query query = session.createQuery(consulta);

			// Adiciona os parametros
			Set<String> listaChaves = parametros.keySet();
			Iterator<String> chavesIterator = listaChaves.iterator();
			while(chavesIterator.hasNext()){
				String chave = chavesIterator.next();
				query.setParameter(chave, parametros.get(chave));
			}

			// Executa o hql
			retorno = query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Consultar Comando de Acao de cobranca - Comando
	 * 
	 * @author Saulo Lima
	 * @date 25/06/2010
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @param idComando
	 * @param dataInicial
	 * @param dataFinal
	 * @param idLocalidade
	 * @param codigoSetorComercial
	 * @return Collection<CobrancaAcaoAtividadeComando>
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando(Integer idCobrancaGrupo, Integer idCobrancaAcao,
					Integer idComando, Date dataInicial, Date dataFinal, Integer idLocalidade, Integer codigoSetorComercial)
					throws ErroRepositorioException{

		// variavel que vai armazenar a Colecao pesquisada
		Collection<CobrancaAcaoAtividadeComando> retorno = null;

		// Recupera sessao do hibernate
		Session session = HibernateUtil.getSession();

		Map<String, Object> parametros = new HashMap<String, Object>();

		try{

			String consulta = "SELECT cacm" + " FROM CobrancaAcaoAtividadeComando cacm" + " LEFT JOIN FETCH cacm.cobrancaAcao acao"
							+ " WHERE";

			if(idCobrancaGrupo != null){
				consulta += " cacm.cobrancaGrupo.id = :idCobrancaGrupo AND";
				parametros.put("idCobrancaGrupo", idCobrancaGrupo);
			}

			if(idCobrancaAcao != null){
				consulta += " cacm.cobrancaAcao.id = :idCobrancaAcao AND";
				parametros.put("idCobrancaAcao", idCobrancaAcao);
			}

			if(idComando != null){
				consulta += " cacm.id = :idComando AND";
				parametros.put("idComando", idComando);
			}

			if(dataInicial != null && dataFinal != null){
				// Realiza adaptacao da data final devido a timestamp dd:mm:aaaa
				// HH:ss:mmm (23:59:999)
				dataFinal = Util.adaptarDataFinalComparacaoBetween(dataFinal);

				consulta += " cacm.realizacao BETWEEN :dataInicial AND :dataFinal AND";
				parametros.put("dataInicial", dataInicial);
				parametros.put("dataFinal", dataFinal);
			}else if(dataInicial != null){
				consulta += " cacm.realizacao >= :dataInicial AND";
				parametros.put("dataInicial", dataInicial);
			}else if(dataFinal != null){
				// Realiza adaptacao da data final devido a timestamp dd:mm:aaaa
				// HH:ss:mmm (23:59:999)
				dataFinal = Util.adaptarDataFinalComparacaoBetween(dataFinal);
				consulta += " cacm.realizacao <= :dataFinal AND";
				parametros.put("dataFinal", dataFinal);
			}

			if(idLocalidade != null){
				consulta += " (cacm.localidadeInicial IS NOT NULL OR cacm.localidadeFinal IS NOT NULL) AND";
				consulta += " (cacm.localidadeInicial IS NULL OR cacm.localidadeInicial.id <= :idLocalidade) AND";
				consulta += " (cacm.localidadeFinal IS NULL OR cacm.localidadeFinal.id >= :idLocalidade) AND";
				parametros.put("idLocalidade", idLocalidade);
			}

			if(codigoSetorComercial != null){
				consulta += " (cacm.codigoSetorComercialInicial IS NOT NULL OR cacm.codigoSetorComercialFinal IS NOT NULL) AND";
				consulta += " (cacm.codigoSetorComercialInicial IS NULL OR cacm.codigoSetorComercialInicial <= :codigoSetorComercial) AND";
				consulta += " (cacm.codigoSetorComercialFinal IS NULL OR cacm.codigoSetorComercialFinal >= :codigoSetorComercial) AND";
				parametros.put("codigoSetorComercial", codigoSetorComercial);
			}

			// Retirar os ultimas 4 caracteres da String consulta (" AND")
			consulta = Util.formatarHQL(consulta, 4);

			consulta += " order by acao.id, cacm.realizacao asc";

			// Cria a Query
			Query query = session.createQuery(consulta);

			// Adiciona os parametros
			Set<String> listaChaves = parametros.keySet();
			Iterator<String> chavesIterator = listaChaves.iterator();
			while(chavesIterator.hasNext()){
				String chave = chavesIterator.next();
				query.setParameter(chave, parametros.get(chave));
			}

			// Executa o hql
			retorno = query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0246] Executar Atividade de Acao de cobranca Pesquisa uma Colecao de
	 * CobrancaAcaoAtividadeComando
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando() throws ErroRepositorioException{

		// cria a variavel que vai armazenar a Colecao pesquisada
		Collection<CobrancaAcaoAtividadeComando> retorno = new ArrayList();

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta;

		try{
			// constroi o hql
			consulta = "select cacm " + "from CobrancaAcaoAtividadeComando cacm " + " left join fetch cacm.cobrancaAcao ca"
							+ " left join fetch cacm.cobrancaAtividade cat" + " left join fetch cacm.usuario usuario"
							+ "where (cacm.comando is not null) and " + "((cacm.realizacao is null) or (cacm.realizacao < cacm.comando))";

			// executa o hql
			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta).list()));

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// retorna a Colecao do resultado da pesquisa
		return retorno;
	}

	/**
	 * [UC0259] - Processar Pagamento com Codigo de Barras
	 * [SF0003] - Processar Pagamento de Documento de cobranca
	 * 
	 * @author Savio Luiz
	 * @created 16/02/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Object[] pesquisarParmsCobrancaDocumento(Integer idImovel, int numeroSequencialDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{

			// Verifica se ja tem Debito Automatico
			consulta = "SELECT cd.valorAcrescimos, cd.valorDesconto, cd.emissao, cd.id, cd.valorTaxa, documentoTipo.id, cd.resolucaoDiretoria.id "
							+ ", cd.valorSucumbencia, cliente.id "
							+ "FROM CobrancaDocumento cd "
							+ "LEFT JOIN cd.imovel imovel "
							+ "LEFT JOIN cd.documentoTipo documentoTipo "
							+ "LEFT JOIN cd.cliente cliente "
							+ "WHERE cd.numeroSequenciaDocumento = :numeroSequencialDocumento AND " + "imovel.id = :idImovel";

			retorno = (Object[]) session.createQuery(consulta).setInteger("numeroSequencialDocumento", numeroSequencialDocumento)
							.setInteger("idImovel", idImovel.intValue()).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0259] - Processar Pagamento com Codigo de Barras [SB0005] - Processar
	 * Recebimento de Acrescimos por Inpontualidade Autor: Savio Luiz
	 * Data:06/11/2006
	 */
	public Collection pesquisarCobrancaDocumentoItemComConta(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			// Verifica se ja tem Debito Automatico
			consulta.append("SELECT conta " + "FROM CobrancaDocumentoItem cdi ").append("LEFT JOIN cdi.cobrancaDocumento cd ")
							.append("LEFT JOIN cdi.contaGeral.conta conta ").append("WHERE conta.id is not null AND ")
							.append("cd.id = :idCobrancaDocumento ").append("ORDER BY conta.referencia ");

			retorno = session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0349] - Emitir documento de cobranca
	 * Retorna os itens de documento de cobranca ordenados pela referencia da conta
	 * 
	 * @created 11/06/2012
	 * @author Luciano Galvao
	 */
	public Collection pesquisarCobrancaDocumentoItens(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			// Verifica se ja tem Debito Automatico
			consulta.append("SELECT cdi " + "FROM CobrancaDocumentoItem cdi ").append("LEFT JOIN cdi.cobrancaDocumento cd ")
							.append("LEFT JOIN fetch cdi.contaGeral contaGeral ").append("LEFT JOIN contaGeral.conta conta ")
							.append("WHERE conta.id is not null AND ").append("cd.id = :idCobrancaDocumento ")
							.append("ORDER BY conta.referencia ");

			retorno = session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public String pesquisarMensagemDocumentoCobrancaAcao(Integer idCobrancaAcao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = new String();
		String msgDocumentoAtual = "";

		try{
			// Verifica se ja tem Debito Automatico
			consulta = "SELECT CBAC_DSMENSAGEMDOCUMENTO mesnsagemDocumento FROM cobranca_acao   ";
			consulta = consulta + " where cobranca_acao.CBAC_ID = " + idCobrancaAcao;

			Collection colecaoMsgDocumento = session.createSQLQuery(consulta).addScalar("mesnsagemDocumento", Hibernate.STRING).list();

			if(colecaoMsgDocumento.size() > 0){
				msgDocumentoAtual = (String) colecaoMsgDocumento.iterator().next();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return msgDocumentoAtual;
	}

	/**
	 * [UC0259] - Processar Pagamento com Codigo de Barras [SB0005] - Processar
	 * Recebimento de Acrescimos por Impontualidade
	 * 
	 * @author Virginia Melo
	 * @date 02/03/2009
	 */
	public Collection<Object[]> pesquisarGuiaPagamentoPrestacao(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{

			consulta = "SELECT guiaPagamentoPrestacao.comp_id.guiaPagamentoId, " + "guiaPagamentoPrestacao.comp_id.numeroPrestacao, "
							+ "guiaPagamentoPrestacao.valorPrestacao " + "FROM CobrancaDocumentoItem cdi "
							+ "LEFT JOIN cdi.cobrancaDocumento cd " + "LEFT JOIN cdi.guiaPagamentoGeral.guiaPagamento guiaPagamento "
							+ "LEFT JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
							+ "WHERE guiaPagamento.id is not null " + "AND cd.id = :idCobrancaDocumento "
							+ "AND cdi.numeroDaPrestacao = guiaPagamentoPrestacao.comp_id.numeroPrestacao";

			retorno = session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0259] - Processar Pagamento com Codigo de Barras
	 * [SF0003] - Processar Pagamento de Documento de cobranca
	 * 
	 * @author Savio Luiz
	 * @created 16/02/2006
	 * @author Saulo Lima
	 * @date 11/12/2008 Inclusao do campo de retorno numeroPestacao da Guia de
	 *       Pagamento
	 * @author eduardo henrique
	 * @date 16/12/2008 Alteracao na consulta para retirada do Tipo de Debito da
	 *       Guia Pagamento .
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection pesquisarCobrancaDocumentoItem(Integer idImovel, int numeroSequencialDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("SELECT conta.id, ")
							.append("guiaPagamento.id, ")
							.append("debitoACobrar.id, ")
							.append("cdi.valorItemCobrado, ")
							.append("conta.referencia,")
							.append("contaHistorico.anoMesReferenciaConta, ")
							.append("debitoACobrar.debitoTipo.id,")
							.append("debitoACobrarHistorico.debitoTipo.id, ")
							.append("contaHistorico.id, ")
							.append("guiaPagamentoHistorico.id, ")
							.append("debitoACobrarHistorico.id, ")
							.append("cage.id, ")
							.append("loca.id, ")
							.append("imov.id, ")
							.append("cdi.numeroDaPrestacao, ")
							// 14
							.append("cdi.valorDescontoMulta, ")
							// 15
							.append("cdi.valorDescontoValor, ")
							// 16
							.append("cdi.valorDescontoMora, ")
							// 17
							.append("cdi.valorDescontoCorrecaoMonetaria, ")
							// 18
							.append("cdi.valorDescontoDocumento, ")
							// 19
							.append("cdi.valorMulta, ")
							// 20
							.append("cdi.valorMora, ")
							// 21
							.append("cdi.valorCorrecaoMonetaria, ")
							// 22
							.append("cdi.numeroParcelaAntecipada, ")
							// 23
							.append("cdi.valorJurosParcelaAntecipada, ")
							// 24
							.append("conta.localidade.id, ")
							// 25
							.append("contaHistorico.localidade.id,")
							// 26
							.append("debitoACobrar.localidade.id, ")
							// 27
							.append("debitoACobrarHistorico.localidade.id, ")
							// 28
							.append("guiaPagamento.localidade.id, ")
							// 29
							.append("guiaPagamentoHistorico.localidade.id, ")
							// 30
							.append("cdi.valorAcrescimos ").append("FROM CobrancaDocumentoItem cdi ")
							.append("LEFT JOIN cdi.cobrancaDocumento cd ").append("LEFT JOIN cd.imovel imovel ")
							.append("LEFT JOIN cd.documentoTipo documentoTipo ").append("LEFT JOIN cdi.contaGeral.conta conta ")
							.append("LEFT JOIN cdi.contaGeral.contaHistorico contaHistorico ")
							.append("LEFT JOIN cdi.guiaPagamentoGeral.guiaPagamento guiaPagamento ")
							.append("LEFT JOIN cdi.guiaPagamentoGeral.guiaPagamentoHistorico guiaPagamentoHistorico ")
							.append("LEFT JOIN cdi.debitoACobrarGeral.debitoACobrar debitoACobrar ")
							.append("LEFT JOIN cdi.debitoACobrarGeral.debitoACobrarHistorico debitoACobrarHistorico ")
							.append("LEFT JOIN cdi.creditoARealizarGeral cage ").append("LEFT JOIN cd.localidade loca ")
							.append("LEFT JOIN cd.imovel imov ")
							.append("WHERE cd.numeroSequenciaDocumento = :numeroSequencialDocumento AND ").append("imovel.id = :idImovel ")
							.append(" order by conta.referencia, guiaPagamento.id, debitoACobrar.id, ")
							.append(" contaHistorico.anoMesReferenciaConta, guiaPagamentoHistorico.id, debitoACobrarHistorico.id ");

			// Alterado por Hebert e Alessandro 22/09/2012
			// Essa ordenacao a necessaria para que no pagamento de um documento de cobranca os
			// Debitos mais antigos sejam pago primeiro.

			retorno = session.createQuery(consulta.toString()).setInteger("numeroSequencialDocumento", numeroSequencialDocumento)
							.setInteger("idImovel", idImovel.intValue()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Inseri a cobranca situacao historico na base passando a Colecao de
	 * cobranca situacao historico
	 * [UC0177] Informar Situacao Especial de cobranca
	 * 
	 * @author Savio Luiz
	 * @date 20/03/2006
	 * @param collectionCobrancaSituacaoHistorico
	 * @return
	 */
	public void inserirCobrancaSituacaoHistorico(Collection collectionCobrancaSituacaoHistorico) throws ErroRepositorioException{

		StatelessSession session = HibernateUtil.getStatelessSession();

		try{
			Iterator iteratorFSH = collectionCobrancaSituacaoHistorico.iterator();
			// int i = 1;
			while(iteratorFSH.hasNext()){
				CobrancaSituacaoHistorico cobrancaSituacaoHistorico = (CobrancaSituacaoHistorico) iteratorFSH.next();
				session.insert(cobrancaSituacaoHistorico);
				/*
				 * if (i % 50 == 0) { // 20, same as the JDBC batch size //
				 * flush a batch of inserts and release memory: session.flush();
				 * session.clear(); } i++;
				 */
			}
			// session.flush();
			// session.clear();
		}catch(HibernateException e){
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			// session.clear();
			HibernateUtil.closeSession(session);
			// session.close();
		}

	}

	/**
	 * Atualiza o ano mes de cobranca situacao historico
	 * [UC0156] Informar Situacao Especial Faturamento
	 * 
	 * @author Savio Luiz
	 * @date 17/03/2006
	 * @param situacaoEspecialFaturamentoHelper
	 * @throws ErroRepositorioException
	 */
	public void atualizarAnoMesCobrancaSituacaoHistorico(SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper,
					Integer anoMesReferenciaFaturamentoGrupo, Integer idUsuarioExclusao) throws ErroRepositorioException{

		String consulta = "";
		Collection collectionIdImoveis = null;

		Session session = HibernateUtil.getSession();
		try{
			if(situacaoEspecialCobrancaHelper != null && !situacaoEspecialCobrancaHelper.getIdImovel().equals("")){
				consulta = "update gcom.cobranca.CobrancaSituacaoHistorico set "
								+ "cbsh_amcobrancaretirada = :anoMesReferenciaFaturamentoGrupo, cbsh_tmexclusao = :dataHoraExclusao, "
								+ "usur_exclusao = :usuarioLogadoExclusao where imov_id = :imov" + " and cbsh_amcobrancaretirada is null";

				session.createQuery(consulta).setInteger("imov", Integer.valueOf(situacaoEspecialCobrancaHelper.getIdImovel()).intValue())
								.setInteger("anoMesReferenciaFaturamentoGrupo", anoMesReferenciaFaturamentoGrupo)
								.setTimestamp("dataHoraExclusao", new Date()).setInteger("usuarioLogadoExclusao", idUsuarioExclusao)
								.executeUpdate();
			}else{
				consulta = "select im.id from Imovel im"
								+ " inner join im.localidade lo"
								+ " inner join im.setorComercial sc"
								+ " inner join im.quadra qu"
								+ " inner join im.rota rt"
								+ " inner join rt.faturamentoGrupo fg"
								+ " left join im.cobrancaSituacaoTipo cst"
								+ " where cst.id is not null and (im.indicadorExclusao <> :idExclusao OR im.indicadorExclusao is null) and ";

				String idLocalidadeOrigem = situacaoEspecialCobrancaHelper.getLocalidadeOrigemID();
				String idLocalidadeDestino = situacaoEspecialCobrancaHelper.getLocalidadeDestinoID();
				String setorComercialOrigemID = situacaoEspecialCobrancaHelper.getSetorComercialOrigemID();
				String setorComercialDestinoID = situacaoEspecialCobrancaHelper.getSetorComercialDestinoID();
				String quadraOrigemID = situacaoEspecialCobrancaHelper.getQuadraOrigemID();
				String quadraDestinoID = situacaoEspecialCobrancaHelper.getQuadraDestinoID();
				String loteOrigem = situacaoEspecialCobrancaHelper.getLoteOrigem();
				String loteDestino = situacaoEspecialCobrancaHelper.getLoteDestino();
				String subLoteOrigem = situacaoEspecialCobrancaHelper.getSubloteOrigem();
				String subLoteDestino = situacaoEspecialCobrancaHelper.getSubloteDestino();

				if(!idLocalidadeOrigem.equalsIgnoreCase("") && !idLocalidadeDestino.equalsIgnoreCase("")) consulta += " lo.id between "
								+ idLocalidadeOrigem + " and " + idLocalidadeDestino + " and ";

				if(!setorComercialOrigemID.equalsIgnoreCase("") && !setorComercialOrigemID.equalsIgnoreCase("")) consulta += "sc.id between "
								+ setorComercialOrigemID + " and " + setorComercialDestinoID + " and ";

				if(!quadraOrigemID.equalsIgnoreCase("") && !quadraOrigemID.equalsIgnoreCase("")) consulta += "qu.id between "
								+ quadraOrigemID + " and " + quadraDestinoID + " and ";

				if(!loteOrigem.equalsIgnoreCase("") && !loteOrigem.equalsIgnoreCase("")) consulta += "im.lote between " + loteOrigem
								+ " and " + loteDestino + " and ";

				if(!subLoteOrigem.equalsIgnoreCase("") && !subLoteOrigem.equalsIgnoreCase("")) consulta += "im.subLote between "
								+ subLoteOrigem + " and " + subLoteDestino + " and ";

				// System.out.println(Util.formatarHQL(consulta, 4));

				collectionIdImoveis = session.createQuery(Util.formatarHQL(consulta, 4)).setShort("idExclusao", Imovel.IMOVEL_EXCLUIDO)
								.list();

				if(collectionIdImoveis != null && !collectionIdImoveis.isEmpty()){

					Iterator icolecaoMatriculasImoveis = collectionIdImoveis.iterator();

					while(icolecaoMatriculasImoveis.hasNext()){

						String id = ((Integer) icolecaoMatriculasImoveis.next()).toString();
						consulta = "update gcom.cobranca.CobrancaSituacaoHistorico set "
										+ "cbsh_amcobrancaretirada = :anoMesReferenciaFaturamentoGrupo, "
										+ "cbsh_tmexclusao = :dataHoraExclusao, usur_exclusao = :usuarioLogadoExclusao where imov_id = :imov"
										+ " and cbsh_amcobrancaretirada is null";

						session.createQuery(consulta).setInteger("imov", Integer.valueOf(id).intValue())
										.setInteger("anoMesReferenciaFaturamentoGrupo", anoMesReferenciaFaturamentoGrupo)
										.setTimestamp("dataHoraExclusao", new Date())
										.setInteger("usuarioLogadoExclusao", idUsuarioExclusao).executeUpdate();
					}
				}
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Author: Rafael
	 * Santos Data: 30/03/2006 Pesquisa os ID das Contas dos cliente
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIDContasClienteConta(String codigoCliente, Integer relacaoTipo) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select conta.id from ClienteConta clienteConta ").append("inner join clienteConta.cliente cliente ")
							.append("inner join clienteConta.conta conta ");

			if(relacaoTipo != null){
				consulta.append(" inner join clienteConta.clienteRelacaoTipo clienteRelacaoTipo ");
			}

			consulta.append("where cliente.id = :codigo ");

			if(relacaoTipo != null){
				consulta.append(" and clienteRelacaoTipo = :relacao ");

				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente))
								.setShort("relacao", relacaoTipo.shortValue()).list();
			}

			if(relacaoTipo == null){
				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente)).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito atualizar na tabela imovel o
	 * parcelamento e reparcelamento
	 * 
	 * @author Fernanda Paiva
	 * @date 29/04/2006
	 * @param imovel
	 * @param numeroParcelamento
	 * @param numeroReparcelamento
	 * @param numeroReparcelamentoConsecutivo
	 * @throws ErroRepositorioException
	 */
	public void atualizarDadosParcelamentoImovel(Integer codigoImovel, Short numeroParcelamento, Short numeroReparcelamento,
					Short numeroReparcelamentoConsecutivo) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizarImovel;

		try{
			atualizarImovel = "update gcom.cadastro.imovel.Imovel " + "set imov_nnparcelamento = :numeroParcelamento, "
							+ "imov_nnreparcelamento = :numeroReparcelamento, "
							+ "imov_nnreparcelamentoconsecuti = :numeroReparcelamentoConsecutivo, "
							+ "imov_tmultimaalteracao = :ultimaAlteracao " + "where imov_id = :codigoImovel";

			session.createQuery(atualizarImovel).setInteger("codigoImovel", Integer.valueOf(codigoImovel).intValue())
							.setInteger("numeroParcelamento", new Short(numeroParcelamento).intValue())
							.setInteger("numeroReparcelamento", new Short(numeroReparcelamento).intValue())
							.setInteger("numeroReparcelamentoConsecutivo", new Short(numeroReparcelamentoConsecutivo).intValue())
							.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada nao Paga Author: Fernanda
	 * Paiva Data: 02/05/2006
	 * Obtem os parcelamentos de Debitos efetuados no mes de faturamento
	 * corrente e que estejam com situacao normal
	 * 
	 * @param situacaoNormal
	 *            , anoMesFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarParcelamentosSituacaoNormalNoMes(String parcelamentoSituacao, Date dataParcelamentoInicio,
					Date dataParcelamentoFim) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT parc.id, parc.parcelamento  " + "FROM DebitoACobrar dbac " + "INNER JOIN dbac.parcelamento parc "
							+ "WHERE parc.parcelamento BETWEEN :dataParcelamentoInicio AND :dataParcelamentoFim "
							+ "AND parc.parcelamentoSituacao = :parcelamentoSituacao "
							+ "AND (parc.valorEntrada IS NOT NULL AND parc.valorEntrada > 0) " + "AND dbac.numeroPrestacaoCobradas = 0 "
							+ "AND dbac.debitoCreditoSituacaoAtual = :normal ";

			retorno = session.createQuery(consulta).setInteger("parcelamentoSituacao", Integer.valueOf(parcelamentoSituacao))
							.setDate("dataParcelamentoInicio", dataParcelamentoInicio).setDate("dataParcelamentoFim", dataParcelamentoFim)
							.setInteger("normal", DebitoCreditoSituacao.NORMAL).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada nao Paga Author: Fernanda
	 * Paiva Data: 02/05/2006
	 * Obtem as guias de pagamentos dos parcelamentos de Debitos efetuados no
	 * mes de faturamento corrente e que estejam com situacao normal
	 * 
	 * @param situacaoNormal
	 *            , anoMesFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiaPagamentoDoParcelamento(String parcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT gpag.id, gpag.dataVencimento  " + "FROM GuiaPagamento gpag " + "WHERE gpag.parcelamento = :parcelamento ";

			retorno = session.createQuery(consulta).setInteger("parcelamento", Integer.valueOf(parcelamento)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada nao Paga Author: Raphael
	 * Rossiter Data: 28/12/2006
	 * Obtem as contas dos parcelamentos de Debitos efetuados no mes de
	 * faturamento corrente e que estejam com situacao normal
	 * 
	 * @param situacaoNormal
	 *            , anoMesFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContaDoParcelamento(Integer parcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT cnta.id " + "FROM Conta cnta " + "WHERE cnta.parcelamento.id = :parcelamento ";

			retorno = session.createQuery(consulta).setInteger("parcelamento", parcelamento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarContaDoParcelamentoPorItem(java.lang.Integer)
	 */
	public Collection pesquisarContaDoParcelamentoPorItem(Integer parcelamento) throws ErroRepositorioException{

		Collection<Conta> retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = " SELECT cnta FROM Conta cnta " + " WHERE cnta.id in( "
							+ " SELECT item.contaGeral.id FROM ParcelamentoItem item WHERE item.parcelamento.id = :idParcelamento "
							+ " and item.contaGeral is not null)";

			retorno = session.createQuery(consulta).setInteger("idParcelamento", parcelamento).list();

			for(Conta conta : retorno){
				Hibernate.initialize(conta.getContaCategorias());
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada nao Paga Author: Fernanda
	 * Paiva Data: 02/05/2006
	 * Obtem os pagamentos para a guia de pagamentos dos parcelamentos de
	 * Debitos efetuados no mes de faturamento corrente e que estejam com
	 * situacao normal
	 * 
	 * @param situacaoNormal
	 *            , anoMesFaturamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarPagamentoParaGuiaPagamentoDoParcelamento(String pagamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT pgmt.id  " + "FROM Pagamento pgmt " + "WHERE pgmt.guiaPagamento = :pagamento ";

			retorno = session.createQuery(consulta).setInteger("pagamento", Integer.valueOf(pagamento)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0314] - Desfazer Parcelamentos por Entrada nao Paga Author: Raphael
	 * Rossiter Data: 28/12/2006
	 * Obtem os pagamentos para a conta dos parcelamentos de Debitos efetuados
	 * no mes de faturamento corrente e que estejam com situacao normal
	 * 
	 * @param conta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarPagamentoParaContaDoParcelamento(String idConta) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT pgmt.id  " + "FROM Pagamento pgmt " + "WHERE pgmt.conta = :conta ";

			retorno = session.createQuery(consulta).setInteger("conta", Integer.valueOf(idConta)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0317] Manter criterio de cobranca
	 * Este caso de uso remove as linhas da cobranca criterio passando a colecao
	 * de cobranca criterio
	 * [SB0002] Excluir criterio de cobranca
	 * 
	 * @author Savio luiz
	 * @created 11/05/2006
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerCobrancaCriterioLinha(String[] idscobrancaCriterio) throws ErroRepositorioException{

		String remocao = null;

		/*
		 * Collection colecaoCobrancaCriterio = new ArrayList(); for(int
		 * i=0;i<idscobrancaCriterio.length;i++ ){ CobrancaCriterio
		 * cobrancaCriterio = new CobrancaCriterio(); cobrancaCriterio.setId(new
		 * Integer(idscobrancaCriterio[i]));
		 * colecaoCobrancaCriterio.add(cobrancaCriterio); }
		 */

		Session session = HibernateUtil.getSession();

		try{

			remocao = "delete gcom.cobranca.CobrancaCriterioLinha " + "where cbct_id IN(:idscobrancaCriterio)";

			session.createQuery(remocao).setParameterList("idscobrancaCriterio", idscobrancaCriterio).executeUpdate();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	private StringBuilder formarQueryPrincipalRelacaoDebitos(){

		StringBuilder consulta = new StringBuilder();

		consulta.append(" select distinct gerenciaRegional.id, ");
		consulta.append("                 gerenciaRegional.nomeAbreviado, ");
		consulta.append("                 localidade.id, ");
		consulta.append("                 localidade.descricao, ");
		consulta.append("                 imovel.id, ");
		consulta.append("                 imovel.quantidadeEconomias, ");
		consulta.append("                 setorComercial.codigo, ");
		consulta.append("                 quadra.numeroQuadra, ");
		consulta.append("                 imovel.lote, ");
		consulta.append("                 imovel.subLote, ");
		consulta.append("                 ligacaoAguaSituacao.descricao, ");
		consulta.append("                 ligacaoEsgotoSituacao.descricao, ");
		consulta.append("                 ligacaoEsgoto.percentual, ");
		consulta.append("                 ligacaoAgua.dataCorte, ");
		consulta.append("                 gerenciaRegional.nome, ");
		consulta.append("                 clienteUsuario.nome, ");
		consulta.append("                 clienteResposanvel.nome , categoria , faturamentoGrupo    ");

		consulta.append(" from ImovelSubcategoria imovelSubcategoria ");
		consulta.append(" inner join  imovelSubcategoria.comp_id.imovel imovel ");
		consulta.append(" inner join imovel.localidade localidade ");
		consulta.append(" inner join localidade.gerenciaRegional gerenciaRegional ");
		consulta.append(" inner join imovel.setorComercial setorComercial ");
		consulta.append(" inner join imovel.quadra quadra ");
		consulta.append(" left join imovelSubcategoria.comp_id.subcategoria subcategoria ");
		consulta.append(" left join subcategoria.categoria categoria ");
		consulta.append(" left join imovel.rota.faturamentoGrupo faturamentoGrupo ");
		consulta.append(" left join imovel.contas c ");

		return consulta;

	}

	/**
	 * Gerar Relacao de Debitos
	 * [UC0227] Gerar Relacao de Debitos
	 * 
	 * @author Rafael Santos
	 * @date 12/06/2006
	 */
	public Collection gerarRelacaoDebitos(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, int quantidadeImovelInicio, String indicadorOrdenacao,
					String idUnidadeNegocio, String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal,
					String indicadorOpcaoAgrupamento, String indicadorOrdenacaoAscDesc) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		consulta = formarQueryPrincipalRelacaoDebitos();

		try{

			boolean fezJoinComBairro = false;

			if(bairro != null && !bairro.equals("")
							&& !bairro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.logradouroBairro logradouroBairro ");
				consulta.append(" left join logradouroBairro.bairro bairro ");

				fezJoinComBairro = true;
			}

			if(municipio != null && !municipio.equals("")
							&& !municipio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				if(!fezJoinComBairro){
					consulta.append(" left join imovel.logradouroBairro logradouroBairro ");
					consulta.append(" left join logradouroBairro.bairro bairro ");

					fezJoinComBairro = true;
				}

				consulta.append(" left join bairro.municipio municipio ");
			}

			boolean fezJoinComLogradouroCep = false;

			if(cep != null && !cep.equals("")
							&& !cep.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.logradouroCep logradouroCep ");
				consulta.append(" left join logradouroCep.cep cep ");

				fezJoinComLogradouroCep = true;
			}

			if(logradouro != null && !logradouro.equals("")
							&& !logradouro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				if(!fezJoinComLogradouroCep){
					consulta.append(" left join imovel.logradouroCep logradouroCep ");
					consulta.append(" left join logradouroCep.cep cep ");

					fezJoinComLogradouroCep = true;
				}

				consulta.append(" left join logradouroCep.logradouro logradouro ");
			}

			if(idImovelCondominio != null
							&& !idImovelCondominio.equals("")
							&& !idImovelCondominio.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.imovelCondominio imovelCondominio ");
			}

			if(idImovelPrincipal != null
							&& !idImovelPrincipal.equals("")
							&& !idImovelPrincipal.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.imovelPrincipal imovelPrincipal ");
			}

			consulta.append(" left join imovel.ligacaoAguaSituacao ligacaoAguaSituacao ");
			consulta.append(" left join imovel.ligacaoAgua ligacaoAgua ");
			consulta.append(" left join imovel.ligacaoEsgotoSituacao ligacaoEsgotoSituacao ");
			consulta.append(" left join imovel.ligacaoEsgoto ligacaoEsgoto ");

			if(idImovelPerfil != null && !idImovelPerfil.equals("")
							&& !idImovelPerfil.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.imovelPerfil imovelPerfil ");
			}

			if(idPocoTipo != null && !idPocoTipo.equals("")
							&& !idPocoTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.pocoTipo pocoTipo ");
			}

			if(idFaturamentoSituacaoTipo != null
							&& !idFaturamentoSituacaoTipo.equals("")
							&& !idFaturamentoSituacaoTipo.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.faturamentoTipo faturamentoTipo ");
			}

			if(idCobrancaSituacaoTipo != null
							&& !idCobrancaSituacaoTipo.equals("")
							&& !idCobrancaSituacaoTipo.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.cobrancaSituacaoTipo cobrancaSituacaoTipo ");
			}

			if(idFaturamentoSituacaoTipo != null
							&& !idFaturamentoSituacaoTipo.equals("")
							&& !idFaturamentoSituacaoTipo.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.faturamentoSituacaoTipo faturamentoSituacaoTipo ");
			}

			if(idEloAnormalidade != null
							&& !idEloAnormalidade.equals("")
							&& !idEloAnormalidade.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.eloAnormalidade eloAnormalidade ");
			}

			if(idCadastroOcorrencia != null
							&& !idCadastroOcorrencia.equals("")
							&& !idCadastroOcorrencia.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.cadastroOcorrencia cadastroOcorrencia ");
			}

			if(idAreaConstruidaFaixa != null
							&& !idAreaConstruidaFaixa.equals("")
							&& !idAreaConstruidaFaixa.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.areaConstruidaFaixa areaConstruidaFaixa ");
			}

			if(idConsumoTarifa != null && !idConsumoTarifa.equals("")
							&& !idConsumoTarifa.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.consumoTarifa consumoTarifa ");
			}

			if(indicadorMedicao != null){

				consulta.append(" left join ligacaoAgua.hidrometroInstalacaoHistorico hidrometroInstalacaoHistorico ");
				consulta.append(" left join imovel.hidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoImovel ");
			}

			if((intervaloMediaMinimaHidrometroInicial != null && !intervaloMediaMinimaHidrometroInicial.equals("") && !intervaloMediaMinimaHidrometroInicial
							.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
							&& (intervaloMediaMinimaHidrometroFinal != null && !intervaloMediaMinimaHidrometroFinal.equals("") && !intervaloMediaMinimaHidrometroFinal
											.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){

				consulta.append(" left join imovel.medicaoHistoricos medicaoHistorico ");
			}

			boolean fezJoinComClienteImoveis = false;

			if(idClienteRelacaoTipo != null
							&& !idClienteRelacaoTipo.equals("")
							&& !idClienteRelacaoTipo.trim().equalsIgnoreCase(
											Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				consulta.append(" left join imovel.clienteImoveis clienteImoveis ");
				consulta.append(" left join clienteImoveis.clienteRelacaoTipo clienteRelacaoTipo ");

				fezJoinComClienteImoveis = true;
			}

			boolean fezJoinComCliente = false;

			if(idCliente != null && !idCliente.equals("")
							&& !idCliente.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				if(!fezJoinComClienteImoveis){
					consulta.append(" left join imovel.clienteImoveis clienteImoveis ");
					consulta.append(" left join clienteImoveis.clienteRelacaoTipo clienteRelacaoTipo ");

					fezJoinComClienteImoveis = true;
				}

				consulta.append(" left join clienteImoveis.cliente cliente ");

				fezJoinComCliente = true;
			}

			if(idClienteTipo != null && !idClienteTipo.equals("")
							&& !idClienteTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				if(!fezJoinComClienteImoveis){
					consulta.append(" left join imovel.clienteImoveis clienteImoveis ");
					consulta.append(" left join clienteImoveis.clienteRelacaoTipo clienteRelacaoTipo ");

					fezJoinComClienteImoveis = true;
				}

				if(!fezJoinComCliente){
					consulta.append(" left join clienteImoveis.cliente cliente ");

					fezJoinComCliente = true;
				}

				consulta.append(" left join cliente.clienteTipo clienteTipo ");
			}

			consulta.append(" left outer join imovel.clienteImoveis clienteImoveisUsuario with (clienteImoveisUsuario.clienteRelacaoTipo.id = "
							+ ClienteRelacaoTipo.USUARIO.toString()
							+ ") and clienteImoveisUsuario.dataFimRelacao is null "
							+ " left outer join clienteImoveisUsuario.cliente clienteUsuario ");

			consulta.append(" left outer join imovel.clienteImoveis clienteImoveisReposanvel with (clienteImoveisReposanvel.clienteRelacaoTipo.id = "
							+ ClienteRelacaoTipo.RESPONSAVEL.toString()
							+ ") and clienteImoveisReposanvel.dataFimRelacao is null "
							+ " left outer join clienteImoveisReposanvel.cliente clienteResposanvel ");

			if((intervaloMediaMinimaImovelInicial != null && !intervaloMediaMinimaImovelInicial.equals("") && !intervaloMediaMinimaImovelInicial
							.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
							&& (intervaloMediaMinimaImovelFinal != null && !intervaloMediaMinimaImovelFinal.equals("") && !intervaloMediaMinimaImovelFinal
											.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){

				consulta.append(" left join imovel.consumosHistoricos consumosHistorico ");
			}

			consulta.append(montarCondicaoWhereFiltrarImovelOutrosCriterio(idImovelCondominio, idImovelPrincipal, idNomeConta,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto, consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal, intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial, intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional,
							idLocalidadeInicial, idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria,
							idCategoria, quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal));

			incrementarOpcoesAgrupamento(consulta, indicadorOpcaoAgrupamento);

			String consultaAux = consulta.toString();

			if(indicadorOrdenacao != null && !indicadorOrdenacao.equals("")){
				if(indicadorOrdenacao.equals("1")){
					consultaAux = consultaAux.concat(" order by col_3_0_, col_6_0_, col_7_0_, col_8_0_, col_9_0_");
				}else if(indicadorOrdenacao.equals("2")){
					consultaAux = consultaAux.concat(" order by col_4_0_");
				}else if(indicadorOrdenacao.equals("3")){
					consultaAux = consultaAux.concat(" order by col_15_0_");
				}

				if(indicadorOrdenacaoAscDesc != null && !indicadorOrdenacao.equals("4")){
					consultaAux = consultaAux.concat(" " + indicadorOrdenacaoAscDesc);
				}
			}

			Query query = session.createQuery(consultaAux);

			informarDadosQueryFiltrarImovelOutrosCriterio(query, idImovelCondominio, idImovelPrincipal, idNomeConta, idSituacaoLigacaoAgua,
							consumoMinimoInicialAgua, consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto, consumoMinimoInicialEsgoto,
							consumoMinimoFinalEsgoto, intervaloValorPercentualEsgotoInicial, intervaloValorPercentualEsgotoFinal,
							intervaloMediaMinimaImovelInicial, intervaloMediaMinimaImovelFinal, intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal, idImovelPerfil, idPocoTipo, idFaturamentoSituacaoTipo,
							idCobrancaSituacaoTipo, idSituacaoEspecialCobranca, idEloAnormalidade, areaConstruidaInicial,
							areaConstruidaFinal, idCadastroOcorrencia, idConsumoTarifa, idGerenciaRegional, idLocalidadeInicial,
							idLocalidadeFinal, setorComercialInicial, setorComercialFinal, quadraInicial, quadraFinal, loteOrigem,
							loteDestno, cep, logradouro, bairro, municipio, idTipoMedicao, indicadorMedicao, idSubCategoria, idCategoria,
							quantidadeEconomiasInicial, quantidadeEconomiasFinal, diaVencimento, idCliente, idClienteTipo,
							idClienteRelacaoTipo, numeroPontosInicial, numeroPontosFinal, numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa, idUnidadeNegocio, consumoFixadoEsgotoPocoInicial, consumoFixadoEsgotoPocoFinal);

			retorno = query.setFirstResult(quantidadeImovelInicio).setMaxResults(500).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		OpcaoAgrupamento opcaoAgrupamento = OpcaoAgrupamento.valuesOf(indicadorOpcaoAgrupamento);

		if(opcaoAgrupamento.equals(OpcaoAgrupamento.PERIODO_ANUAL) || opcaoAgrupamento.equals(OpcaoAgrupamento.PERIODO_MENSAL)){

			List retornoAgrupamento = new ArrayList();

			for(Object objetos : retorno){
				Object[] obj = (Object[]) objetos;

				Integer idImovel = Integer.valueOf(obj[4].toString());

				Collection colecaoContas = pesquisarContaAgrupado(Arrays.asList(new Integer[] {idImovel}));

				for(Object contas : colecaoContas){

					Object[] conta = (Object[]) contas;

					Object[] novo = new Object[obj.length + 1];

					for(int indice = 0; indice < obj.length; indice++){
						novo[indice] = obj[indice];
					}

					novo[obj.length] = conta[0];

					retornoAgrupamento.add(novo);

				}

			}

			return retornoAgrupamento;

		}

		return retorno;
	}

	public Collection pesquisarContaAgrupado(List<Integer> idsImoveis){

		Session session = HibernateUtil.getSession();

		StringBuilder stringBuilder = new StringBuilder();

		stringBuilder.append("select distinct c.referencia , c.imovel.id from Conta c where c.imovel.id in( "
						+ idsImoveis.toString().replace("[", "").replace("]", "") + " ) ");

		stringBuilder.append(" group by c.referencia , c.imovel.id");

		Query query = session.createQuery(stringBuilder.toString());

		return query.list();
	}

	private static final Map<OpcaoAgrupamento, String[]> mapAgrupamento = new HashMap<OpcaoAgrupamento, String[]>();

	static{

		StringBuilder consulta = new StringBuilder();

		consulta.append(" select CAMPO from ImovelSubcategoria imovelSubcategoria ");
		consulta.append(" inner join  imovelSubcategoria.comp_id.imovel imovel ");
		consulta.append(" inner join imovel.localidade localidade ");
		consulta.append(" inner join localidade.gerenciaRegional gerenciaRegional ");
		consulta.append(" inner join imovel.setorComercial setorComercial ");
		consulta.append(" inner join imovel.quadra quadra ");
		consulta.append(" left join imovelSubcategoria.comp_id.subcategoria subcategoria ");
		consulta.append(" left join subcategoria.categoria categoria ");
		consulta.append(" group by CAMPO ");

		StringBuilder consultaContas = new StringBuilder();

		consultaContas.append(" select CAMPO from Conta c ");
		consultaContas.append(" group by CAMPO ");

		String[] array = new String[2];
		array[0] = "categoria.id";
		array[1] = consulta.toString().replace("CAMPO", array[0]);

		mapAgrupamento.put(OpcaoAgrupamento.CATEGORIA, array);

		array = new String[4];
		array[0] = "gerenciaRegional.id";
		array[1] = consulta.toString().replace("CAMPO", array[0]);
		array[2] = "localidade.id";
		array[3] = consulta.toString().replace("CAMPO", array[2]);

		mapAgrupamento.put(OpcaoAgrupamento.GERENCIA_REGIONAL_LOCALIDADE, array);

		array = new String[2];
		array[0] = "imovel.rota.faturamentoGrupo.id";
		array[1] = consulta.toString().replace("CAMPO", array[0]);

		mapAgrupamento.put(OpcaoAgrupamento.GRUPO_FATURAMENTO, array);

	}

	private void incrementarOpcoesAgrupamento(StringBuilder query, String indicadorOpcaoAgrupamento){

		OpcaoAgrupamento agrupamento = OpcaoAgrupamento.valuesOf(indicadorOpcaoAgrupamento);

		if(agrupamento.equals(OpcaoAgrupamento.PERIODO_ANUAL) || agrupamento.equals(OpcaoAgrupamento.PERIODO_MENSAL)){
			return;
		}

		if(agrupamento.equals(OpcaoAgrupamento.GERENCIA_REGIONAL_LOCALIDADE)){
			query.append("  and " + mapAgrupamento.get(agrupamento)[0] + " in (" + mapAgrupamento.get(agrupamento)[1] + " ) and "
							+ mapAgrupamento.get(agrupamento)[2] + " in ( " + mapAgrupamento.get(agrupamento)[3] + " ) ");
		}else{
			query.append("  and " + mapAgrupamento.get(agrupamento)[0] + " in (" + mapAgrupamento.get(agrupamento)[1] + " ) ");
		}

	}

	/**
	 * Monta a condicao do where
	 * [UC0227] Gerar Relacao de Debitos
	 * 
	 * @author Rafael Santos
	 * @date 12/06/2006
	 */
	private String montarCondicaoWhereFiltrarImovelOutrosCriterio(String idImovelCondominio, String idImovelPrincipal, String idNomeConta,
					String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		String consulta = "";
		/*
		 * ## CONDIa‡a•ES ##
		 */
		consulta = consulta + " where ";

		// cliente
		if(idCliente != null && !idCliente.equals("")
						&& !idCliente.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " cliente.id = :idCliente  and  ";
		}

		// cliente tipo
		if(idClienteTipo != null && !idClienteTipo.equals("")
						&& !idClienteTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " clienteTipo.id = :idClienteTipo  and  ";
		}

		// cliente relacao tipo
		if(idClienteRelacaoTipo != null
						&& !idClienteRelacaoTipo.equals("")
						&& !idClienteRelacaoTipo.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " clienteRelacaoTipo.id = :idClienteRelacaoTipo  and  ";
		}

		// gerencia regional
		if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
						&& !idGerenciaRegional.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " gerenciaRegional.id = :idGerenciaRegional  and  ";
		}

		if(idUnidadeNegocio != null && !idUnidadeNegocio.equals("")
						&& !idUnidadeNegocio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " localidade.unidadeNegocio.id = :idUnidadeNegocio  and  ";
		}

		// localidade inicial e final
		if(((idLocalidadeInicial != null && !idLocalidadeInicial.equals("") && !idLocalidadeInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) && (idLocalidadeFinal != null
						&& !idLocalidadeFinal.equals("") && !idLocalidadeFinal.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())))){
			consulta = consulta + " localidade.id >= :idLocalidadeInicial and localidade.id <= :idLocalidadeFinal  and  ";
		}
		// setor comercial inicial e final
		if(((setorComercialInicial != null && !setorComercialInicial.equals("") && !setorComercialInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) && (setorComercialFinal != null
						&& !setorComercialFinal.equals("") && !setorComercialFinal.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())))){
			consulta = consulta
							+ " setorComercial.codigo >= :setorComercialInicial and setorComercial.codigo <= :setorComercialFinal  and  ";
		}
		// quadra
		if((quadraInicial != null && !quadraInicial.equals("") && !quadraInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (quadraFinal != null && !quadraFinal.equals("") && !quadraFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta + " quadra.numeroQuadra >= :quadraInicial and quadra.numeroQuadra <= :quadraFinal  and  ";
		}
		// lote
		if((loteOrigem != null && !loteOrigem.equals("") && !loteOrigem.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (loteDestno != null && !loteDestno.equals("") && !loteDestno.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta + " imovel.lote >= :loteOrigem  and  imovel.lote <= :loteDestino  and  ";
		}

		// cep
		if(cep != null && !cep.equals("")
						&& !cep.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " cep.codigo = :cep  and  ";
		}
		// logradouro
		if(logradouro != null && !logradouro.equals("")
						&& !logradouro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " logradouro.id = :logradouro  and  ";
		}
		// bairro
		if(bairro != null && !bairro.equals("")
						&& !bairro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " bairro.codigo = :bairro  and  ";
		}
		// municipio
		if(municipio != null && !municipio.equals("")
						&& !municipio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " municipio.id = :municipio  and  ";
		}
		// consumo minimo agua inicial e final
		if((consumoMinimoInicialAgua != null && !consumoMinimoInicialAgua.equals("") && !consumoMinimoInicialAgua.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (consumoMinimoFinalAgua != null && !consumoMinimoFinalAgua.equals("") && !consumoMinimoFinalAgua.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ "ligacaoAgua.numeroConsumoMinimoAgua >= :consumoMinimoInicialAgua and ligacaoAgua.numeroConsumoMinimoAgua <= :consumoMinimoFinalAgua  and  ";
		}
		// consumo minimo esgoto inicial e final
		if((consumoMinimoInicialEsgoto != null && !consumoMinimoInicialEsgoto.equals("") && !consumoMinimoInicialEsgoto.trim()
						.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (consumoMinimoFinalEsgoto != null && !consumoMinimoFinalEsgoto.equals("") && !consumoMinimoFinalEsgoto.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ "ligacaoEsgoto.consumoMinimo >= :consumoMinimoInicialEsgoto and ligacaoEsgoto.consumoMinimo <= :consumoMinimoFinalEsgoto  and  ";
		}

		// consumo fixado de esgoto do poço inicial e final
		if(consumoFixadoEsgotoPocoInicial != null && !consumoFixadoEsgotoPocoInicial.equals("") && consumoFixadoEsgotoPocoFinal != null
						&& !consumoFixadoEsgotoPocoFinal.equals("")){

			consulta += "ligacaoEsgoto.numeroConsumoFixoPoco >= :consumoFixadoEsgotoPocoInicial and ligacaoEsgoto.numeroConsumoFixoPoco <= :consumoFixadoEsgotoPocoFinal  and  ";
		}

		// percentual esgoto inicial e final
		if((intervaloValorPercentualEsgotoInicial != null && !intervaloValorPercentualEsgotoInicial.equals("") && !intervaloValorPercentualEsgotoInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloValorPercentualEsgotoFinal != null && !intervaloValorPercentualEsgotoFinal.equals("") && !intervaloValorPercentualEsgotoFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){

			consulta = consulta
							+ "ligacaoEsgoto.percentual >= :intervaloValorPercentualEsgotoInicial and ligacaoEsgoto.percentual <= :intervaloValorPercentualEsgotoFinal  and  ";
		}
		// indicador Medicao
		if(indicadorMedicao != null && indicadorMedicao.equals("comMedicao")){
			// tipo medicao
			if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.LIGACAO_AGUA.toString())){
				consulta = consulta + "hidrometroInstalacaoHistorico.id is not null  and  ";
			}else if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.POCO.toString())){
				consulta = consulta + "hidrometroInstalacaoHistoricoImovel.id is not null  and  ";
			}else{
				consulta = consulta + "(hidrometroInstalacaoHistorico.id is not null or ";
				consulta = consulta + "hidrometroInstalacaoHistoricoImovel.id is not null)  and  ";
			}
		}else if(indicadorMedicao != null && indicadorMedicao.equals("semMedicao")){
			consulta = consulta + "(hidrometroInstalacaoHistorico.id is null and ";
			consulta = consulta + "hidrometroInstalacaoHistoricoImovel.id is null)  and  ";
		}
		// imovel condominio
		if(idImovelCondominio != null && !idImovelCondominio.equals("")
						&& !idImovelCondominio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " imovelCondominio.id = :idImovelCondominio  and  ";
		}
		// imovel principal
		if(idImovelPrincipal != null && !idImovelPrincipal.equals("")
						&& !idImovelPrincipal.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " imovelPrincipal.id = :idImovelPrincipal  and  ";
		}

		// situacao da Ligacao de agua
		if(idSituacaoLigacaoAgua != null && !idSituacaoLigacaoAgua.equals("")){
			// consulta = consulta + " ligacaoAguaSituacao.id = :idSituacaoLigacaoAgua  and  ";

			consulta = consulta + " ligacaoAguaSituacao.id IN(:idSituacaoLigacaoAgua)  and  ";
		}
		// situacao Ligacao de esgoto
		if(idSituacaoLigacaoEsgoto != null && !idSituacaoLigacaoEsgoto.equals("")){
			// consulta = consulta + " ligacaoEsgotoSituacao.id = :idSituacaoLigacaoEsgoto  and  ";

			consulta = consulta + " ligacaoEsgotoSituacao.id IN(:idSituacaoLigacaoEsgoto) and  ";
		}

		// imovel Perfil
		if(idImovelPerfil != null && !idImovelPerfil.equals("")
						&& !idImovelPerfil.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " imovelPerfil.id = :idImovelPerfil  and  ";
		}
		// Poco tipo
		if(idPocoTipo != null && !idPocoTipo.equals("")
						&& !idPocoTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " pocoTipo.id = :idPocoTipo  and  ";
		}
		// faturamento situacao tipo
		if(idFaturamentoSituacaoTipo != null
						&& !idFaturamentoSituacaoTipo.equals("")
						&& !idFaturamentoSituacaoTipo.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " faturamentoTipo.id = :idFaturamentoSituacaoTipo  and  ";
		}
		// cobranca situacao tipo
		if(idCobrancaSituacaoTipo != null
						&& !idCobrancaSituacaoTipo.equals("")
						&& !idCobrancaSituacaoTipo.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " cobrancaSituacaoTipo.id = :idCobrancaSituacaoTipo  and  ";
		}
		// Situacao Especial Cobranca
		if(idSituacaoEspecialCobranca != null
						&& !idSituacaoEspecialCobranca.equals("")
						&& !idSituacaoEspecialCobranca.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " faturamentoSituacaoTipo.id = :idSituacaoEspecialCobranca  and  ";
		}

		// elo anormalidade
		if(idEloAnormalidade != null && !idEloAnormalidade.equals("")
						&& !idEloAnormalidade.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + "eloAnormalidade.id = :idEloAnormalidade  and  ";
		}
		// cadastro ocorrencia
		if(idCadastroOcorrencia != null
						&& !idCadastroOcorrencia.equals("")
						&& !idCadastroOcorrencia.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " cadastroOcorrencia.id = :idCadastroOcorrencia  and  ";
		}
		// area construida inicial e final
		if((areaConstruidaInicial != null && !areaConstruidaInicial.equals("") && !areaConstruidaInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (areaConstruidaFinal != null && !areaConstruidaFinal.equals("") && !areaConstruidaFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ " imovel.areaConstruida >= :areaConstruidaInicial and imovel.areaConstruida <= :areaConstruidaFinal  and  ";
		}
		// consumo tarifa
		if(idConsumoTarifa != null && !idConsumoTarifa.equals("")
						&& !idConsumoTarifa.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " consumoTarifa.id = :idConsumoTarifa   and  ";
		}
		// intervalo Media Minima Imovel Inicial e Final
		if((intervaloMediaMinimaImovelInicial != null && !intervaloMediaMinimaImovelInicial.equals("") && !intervaloMediaMinimaImovelInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloMediaMinimaImovelFinal != null && !intervaloMediaMinimaImovelFinal.equals("") && !intervaloMediaMinimaImovelFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ " consumosHistorico.consumoMedio >= :intervaloMediaMinimaImovelInicial and consumosHistorico.consumoMedio <= :intervaloMediaMinimaImovelFinal  and  ";
		}
		// intervalo MediaMinima Hidrometro Inicial e Final
		if((intervaloMediaMinimaHidrometroInicial != null && !intervaloMediaMinimaHidrometroInicial.equals("") && !intervaloMediaMinimaHidrometroInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloMediaMinimaHidrometroFinal != null && !intervaloMediaMinimaHidrometroFinal.equals("") && !intervaloMediaMinimaHidrometroFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ " medicaoHistorico.consumoMedioHidrometro >= :intervaloMediaMinimaHidrometroInicial and medicaoHistorico.consumoMedioHidrometro <= :intervaloMediaMinimaHidrometroFinal  and  ";
		}
		// categoria
		if(idCategoria != null && !idCategoria.equals("")
						&& !idCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " categoria.id = :idCategoria  and  ";
		}
		// sub categoria
		if(idSubCategoria != null && !idSubCategoria.equals("")
						&& !idSubCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " subcategoria.id = :idSubCategoria  and  ";
		}
		// quantidade economias inicial e final
		if((quantidadeEconomiasInicial != null && !quantidadeEconomiasInicial.equals("") && !quantidadeEconomiasInicial.trim()
						.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (quantidadeEconomiasFinal != null && !quantidadeEconomiasFinal.equals("") && !quantidadeEconomiasFinal.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ "imovelSubcategoria.quantidadeEconomias >= :quantidadeEconomiasInicial and imovelSubcategoria.quantidadeEconomias <= :quantidadeEconomiasFinal  and  ";
		}

		// dia Vencimento
		if(diaVencimento != null && !diaVencimento.equals("")
						&& !diaVencimento.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			if(diaVencimento.equals("1")){// sim
				consulta = consulta + " imovel.diaVencimento  is not null  and  ";
			}
		}

		// numero prontos inicial e final
		if((numeroPontosInicial != null && !numeroPontosInicial.equals("") && !numeroPontosInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (numeroPontosFinal != null && !numeroPontosFinal.equals("") && !numeroPontosFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ " imovel.numeroPontosUtilizacao >= :numeroPontosInicial and imovel.numeroPontosUtilizacao <= :numeroPontosFinal  and  ";
		}

		// numero moradores inicial e final
		if((numeroMoradoresInicial != null && !numeroMoradoresInicial.equals("") && !numeroMoradoresInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (numeroMoradoresFinal != null && !numeroMoradoresFinal.equals("") && !numeroMoradoresFinal.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			consulta = consulta
							+ " imovel.numeroMorador >= :numeroMoradoresInicial and imovel.numeroMorador <= :numeroMoradoresFinal  and  ";
		}
		// area construida faixa
		if(idAreaConstruidaFaixa != null
						&& !idAreaConstruidaFaixa.equals("")
						&& !idAreaConstruidaFaixa.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			consulta = consulta + " areaConstruidaFaixa.id = :idAreaConstruidaFaixa  and  ";
		}

		StringBuilder stringRetorno = new StringBuilder(consulta);

		stringRetorno.deleteCharAt(stringRetorno.toString().lastIndexOf("a"));
		stringRetorno.deleteCharAt(stringRetorno.toString().lastIndexOf("n"));
		stringRetorno.deleteCharAt(stringRetorno.toString().lastIndexOf("d"));

		return stringRetorno.toString();
	}

	/**
	 * Seta os valores na condicao do where
	 * [UC0227] Gerar Relacao de Debitos
	 * 
	 * @author Rafael Santos
	 * @date 12/06/2006
	 */
	private void informarDadosQueryFiltrarImovelOutrosCriterio(Query query, String idImovelCondominio, String idImovelPrincipal,
					String idNomeConta, String[] idSituacaoLigacaoAgua, String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
					String[] idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
					String intervaloValorPercentualEsgotoInicial, String intervaloValorPercentualEsgotoFinal,
					String intervaloMediaMinimaImovelInicial, String intervaloMediaMinimaImovelFinal,
					String intervaloMediaMinimaHidrometroInicial, String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
					String idPocoTipo, String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
					String idEloAnormalidade, String areaConstruidaInicial, String areaConstruidaFinal, String idCadastroOcorrencia,
					String idConsumoTarifa, String idGerenciaRegional, String idLocalidadeInicial, String idLocalidadeFinal,
					String setorComercialInicial, String setorComercialFinal, String quadraInicial, String quadraFinal, String loteOrigem,
					String loteDestno, String cep, String logradouro, String bairro, String municipio, String idTipoMedicao,
					String indicadorMedicao, String idSubCategoria, String idCategoria, String quantidadeEconomiasInicial,
					String quantidadeEconomiasFinal, String diaVencimento, String idCliente, String idClienteTipo,
					String idClienteRelacaoTipo, String numeroPontosInicial, String numeroPontosFinal, String numeroMoradoresInicial,
					String numeroMoradoresFinal, String idAreaConstruidaFaixa, String idUnidadeNegocio,
					String consumoFixadoEsgotoPocoInicial, String consumoFixadoEsgotoPocoFinal){

		// gerencia regional
		if(idGerenciaRegional != null && !idGerenciaRegional.equals("")
						&& !idGerenciaRegional.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idGerenciaRegional", Integer.valueOf(idGerenciaRegional).intValue());
		}

		if(idUnidadeNegocio != null && !idUnidadeNegocio.equals("")
						&& !idUnidadeNegocio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idUnidadeNegocio", Integer.valueOf(idUnidadeNegocio).intValue());
		}

		// localidade inicial e final
		if(((idLocalidadeInicial != null && !idLocalidadeInicial.equals("") && !idLocalidadeInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) && (idLocalidadeFinal != null
						&& !idLocalidadeFinal.equals("") && !idLocalidadeFinal.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())))){
			query.setInteger("idLocalidadeInicial", Integer.valueOf(idLocalidadeInicial).intValue());
			query.setInteger("idLocalidadeFinal", Integer.valueOf(idLocalidadeFinal).intValue());
		}
		// setor comercial inicial e final
		if(((setorComercialInicial != null && !setorComercialInicial.equals("") && !setorComercialInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) && (setorComercialFinal != null
						&& !setorComercialFinal.equals("") && !setorComercialFinal.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())))){
			query.setInteger("setorComercialInicial", Integer.valueOf(setorComercialInicial).intValue());
			query.setInteger("setorComercialFinal", Integer.valueOf(setorComercialFinal).intValue());
		}
		// quadra inicial e final
		if((quadraInicial != null && !quadraInicial.equals("") && !quadraInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (quadraFinal != null && !quadraFinal.equals("") && !quadraFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("quadraInicial", Integer.valueOf(quadraInicial).intValue());
			query.setInteger("quadraFinal", Integer.valueOf(quadraFinal).intValue());
		}
		// lote
		if((loteOrigem != null && !loteOrigem.equals("") && !loteOrigem.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (loteDestno != null && !loteDestno.equals("") && !loteDestno.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("loteOrigem", Integer.valueOf(loteOrigem).intValue());
			query.setInteger("loteDestino", Integer.valueOf(loteDestno).intValue());
		}
		// cep
		if(cep != null && !cep.equals("")
						&& !cep.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("cep", Integer.valueOf(cep).intValue());
		}
		// logradouro
		if(logradouro != null && !logradouro.equals("")
						&& !logradouro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("logradouro", Integer.valueOf(logradouro).intValue());
		}
		// bairro
		if(bairro != null && !bairro.equals("")
						&& !bairro.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("bairro", Integer.valueOf(bairro).intValue());
		}
		// municipio
		if(municipio != null && !municipio.equals("")
						&& !municipio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("municipio", Integer.valueOf(municipio).intValue());
		}
		// consumo minimo agua inicial e final
		if((consumoMinimoInicialAgua != null && !consumoMinimoInicialAgua.equals("") && !consumoMinimoInicialAgua.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (consumoMinimoFinalAgua != null && !consumoMinimoFinalAgua.equals("") && !consumoMinimoFinalAgua.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("consumoMinimoInicialAgua", Integer.valueOf(consumoMinimoInicialAgua).intValue());
			query.setInteger("consumoMinimoFinalAgua", Integer.valueOf(consumoMinimoFinalAgua).intValue());
		}
		// consumo minimo esgoto inicial e final
		if((consumoMinimoInicialEsgoto != null && !consumoMinimoInicialEsgoto.equals("") && !consumoMinimoInicialEsgoto.trim()
						.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (consumoMinimoFinalEsgoto != null && !consumoMinimoFinalEsgoto.equals("") && !consumoMinimoFinalEsgoto.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("consumoMinimoInicialEsgoto", Integer.valueOf(consumoMinimoInicialEsgoto).intValue());
			query.setInteger("consumoMinimoFinalEsgoto", Integer.valueOf(consumoMinimoFinalEsgoto).intValue());
		}

		if(consumoFixadoEsgotoPocoInicial != null && !consumoFixadoEsgotoPocoInicial.equals("") && consumoFixadoEsgotoPocoFinal != null
						&& !consumoFixadoEsgotoPocoFinal.equals("")){

			query.setInteger("consumoFixadoEsgotoPocoInicial", Integer.valueOf(consumoFixadoEsgotoPocoInicial).intValue());
			query.setInteger("consumoFixadoEsgotoPocoFinal", Integer.valueOf(consumoFixadoEsgotoPocoFinal).intValue());
		}

		// percentual esgoto inicial e final
		if((intervaloValorPercentualEsgotoInicial != null && !intervaloValorPercentualEsgotoInicial.equals("") && !intervaloValorPercentualEsgotoInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloValorPercentualEsgotoFinal != null && !intervaloValorPercentualEsgotoFinal.equals("") && !intervaloValorPercentualEsgotoFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("intervaloValorPercentualEsgotoInicial", new BigDecimal(intervaloValorPercentualEsgotoInicial).intValue());
			query.setInteger("intervaloValorPercentualEsgotoFinal", new BigDecimal(intervaloValorPercentualEsgotoFinal).intValue());
		}
		// imovel condominio
		if(idImovelCondominio != null && !idImovelCondominio.equals("")
						&& !idImovelCondominio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idImovelCondominio", Integer.valueOf(idImovelCondominio).intValue());
		}
		// imovel principal
		if(idImovelPrincipal != null && !idImovelPrincipal.equals("")
						&& !idImovelPrincipal.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idImovelPrincipal", Integer.valueOf(idImovelPrincipal).intValue());
		}

		// nome conta
		// if (idNomeConta != null
		// && !idNomeConta.equals("")
		// && !idNomeConta.trim().equalsIgnoreCase(
		// new Integer(ConstantesSistema.NUMERO_NAO_INFORMADO)
		// .toString())) {
		// query
		// .setInteger("idNomeConta", new Integer(idNomeConta)
		// .intValue());
		// }
		// Situacao Ligacao Agua

		if(idSituacaoLigacaoAgua != null && !idSituacaoLigacaoAgua.equals("")){
			Collection collIdSituacaoLigacaoAgua = new ArrayList();
			for(int i = 0; i < idSituacaoLigacaoAgua.length; i++){
				collIdSituacaoLigacaoAgua.add(new Integer(idSituacaoLigacaoAgua[i]));
			}
			query.setParameterList("idSituacaoLigacaoAgua", collIdSituacaoLigacaoAgua);
		}
		// situacao Ligacao de esgoto
		if(idSituacaoLigacaoEsgoto != null && !idSituacaoLigacaoEsgoto.equals("")){
			Collection collIdSituacaoLigacaoEsgoto = new ArrayList();
			for(int i = 0; i < idSituacaoLigacaoEsgoto.length; i++){
				collIdSituacaoLigacaoEsgoto.add(new Integer(idSituacaoLigacaoEsgoto[i]));
			}
			query.setParameterList("idSituacaoLigacaoEsgoto", collIdSituacaoLigacaoEsgoto);
		}

		// imovel Perfil
		if(idImovelPerfil != null && !idImovelPerfil.equals("")
						&& !idImovelPerfil.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idImovelPerfil", Integer.valueOf(idImovelPerfil).intValue());
		}
		// Poco tipo
		if(idPocoTipo != null && !idPocoTipo.equals("")
						&& !idPocoTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idPocoTipo", Integer.valueOf(idPocoTipo).intValue());
		}
		// faturamento situacao tipo
		if(idFaturamentoSituacaoTipo != null
						&& !idFaturamentoSituacaoTipo.equals("")
						&& !idFaturamentoSituacaoTipo.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idFaturamentoSituacaoTipo", Integer.valueOf(idFaturamentoSituacaoTipo).intValue());
		}
		// cobranca situacao tipo
		if(idCobrancaSituacaoTipo != null
						&& !idCobrancaSituacaoTipo.equals("")
						&& !idCobrancaSituacaoTipo.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idCobrancaSituacaoTipo", Integer.valueOf(idCobrancaSituacaoTipo).intValue());
		}
		// Situacao Especial Cobranca
		if(idSituacaoEspecialCobranca != null
						&& !idSituacaoEspecialCobranca.equals("")
						&& !idSituacaoEspecialCobranca.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idSituacaoEspecialCobranca", Integer.valueOf(idSituacaoEspecialCobranca).intValue());
		}
		// elo anormalidade
		if(idEloAnormalidade != null && !idEloAnormalidade.equals("")
						&& !idEloAnormalidade.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idEloAnormalidade", Integer.valueOf(idEloAnormalidade).intValue());
		}
		// cadastro ocorrencia
		if(idCadastroOcorrencia != null && !idCadastroOcorrencia.equals("")
						&& !idEloAnormalidade.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idCadastroOcorrencia", Integer.valueOf(idCadastroOcorrencia).intValue());
		}
		// area construida inicial e final
		if((areaConstruidaInicial != null && !areaConstruidaInicial.equals("") && !areaConstruidaInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (areaConstruidaFinal != null && !areaConstruidaFinal.equals("") && !areaConstruidaFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setBigDecimal("areaConstruidaInicial", Util.formatarMoedaRealparaBigDecimal(areaConstruidaInicial));
			query.setBigDecimal("areaConstruidaFinal", Util.formatarMoedaRealparaBigDecimal(areaConstruidaFinal));
		}
		// consumo tarifa
		if(idConsumoTarifa != null && !idConsumoTarifa.equals("")
						&& !idConsumoTarifa.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idConsumoTarifa", Integer.valueOf(idConsumoTarifa).intValue());
		}
		// intervalo Media Minima Imovel Inicial e Final
		if((intervaloMediaMinimaImovelInicial != null && !intervaloMediaMinimaImovelInicial.equals("") && !intervaloMediaMinimaImovelInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloMediaMinimaImovelFinal != null && !intervaloMediaMinimaImovelFinal.equals("") && !intervaloMediaMinimaImovelFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("intervaloMediaMinimaImovelInicial", Integer.valueOf(intervaloMediaMinimaImovelInicial).intValue());
			query.setInteger("intervaloMediaMinimaImovelFinal", Integer.valueOf(intervaloMediaMinimaImovelFinal).intValue());
		}
		// intervalo MediaMinima Hidrometro Inicial e Final
		if((intervaloMediaMinimaHidrometroInicial != null && !intervaloMediaMinimaHidrometroInicial.equals("") && !intervaloMediaMinimaHidrometroInicial
						.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (intervaloMediaMinimaHidrometroFinal != null && !intervaloMediaMinimaHidrometroFinal.equals("") && !intervaloMediaMinimaHidrometroFinal
										.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setInteger("intervaloMediaMinimaHidrometroInicial", Integer.valueOf(intervaloMediaMinimaHidrometroInicial).intValue());
			query.setInteger("intervaloMediaMinimaHidrometroFinal", Integer.valueOf(intervaloMediaMinimaHidrometroFinal).intValue());
		}

		// quantidade economias inicial e final
		if((quantidadeEconomiasInicial != null && !quantidadeEconomiasInicial.equals("") && !quantidadeEconomiasInicial.trim()
						.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (quantidadeEconomiasFinal != null && !quantidadeEconomiasFinal.equals("") && !quantidadeEconomiasFinal.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setShort("quantidadeEconomiasInicial", new Short(quantidadeEconomiasInicial).shortValue());
			query.setShort("quantidadeEconomiasFinal", new Short(quantidadeEconomiasFinal).shortValue());
		}

		// categoria
		if(idCategoria != null && !idCategoria.equals("")
						&& !idCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idCategoria", Integer.valueOf(idCategoria).intValue());
		}

		// sub categoria
		if(idSubCategoria != null && !idSubCategoria.equals("")
						&& !idSubCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idSubCategoria", Integer.valueOf(idSubCategoria).intValue());
		}

		// numero prontos inicial e final
		if((numeroPontosInicial != null && !numeroPontosInicial.equals("") && !numeroPontosInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (numeroPontosFinal != null && !numeroPontosFinal.equals("") && !numeroPontosFinal.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setShort("numeroPontosInicial", new Short(numeroPontosInicial).shortValue());
			query.setShort("numeroPontosFinal", new Short(numeroPontosFinal).shortValue());
		}

		// numero moradores inicial e final
		if((numeroMoradoresInicial != null && !numeroMoradoresInicial.equals("") && !numeroMoradoresInicial.trim().equalsIgnoreCase(
						Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))
						&& (numeroMoradoresFinal != null && !numeroMoradoresFinal.equals("") && !numeroMoradoresFinal.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){
			query.setShort("numeroMoradoresInicial", new Short(numeroMoradoresInicial).shortValue());
			query.setShort("numeroMoradoresFinal", new Short(numeroMoradoresFinal).shortValue());
		}
		// area construida faixa
		if(idAreaConstruidaFaixa != null
						&& !idAreaConstruidaFaixa.equals("")
						&& !idAreaConstruidaFaixa.trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idAreaConstruidaFaixa", Integer.valueOf(idAreaConstruidaFaixa).intValue());
		}

		// cliente
		if(idCliente != null && !idCliente.equals("")
						&& !idCliente.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idCliente", Integer.valueOf(idCliente).intValue());
		}

		// cliente tipo
		if(idClienteTipo != null && !idClienteTipo.equals("")
						&& !idClienteTipo.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idClienteTipo", Integer.valueOf(idClienteTipo).intValue());
		}

		// cliente relacao tipo
		if(idClienteRelacaoTipo != null
						&& !idClienteRelacaoTipo.equals("")
						&& !idClienteRelacaoTipo.trim()
										.equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
			query.setInteger("idClienteRelacaoTipo", Integer.valueOf(idClienteRelacaoTipo).intValue());
		}
	}

	/**
	 * @deprecated
	 */

	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoParaEmitirJuridico(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Date dataEmissao, Integer idCobrancaAcao) throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cbdo ")
							.append("FROM CobrancaDocumento cbdo ")
							// imovel
							.append("LEFT JOIN fetch cbdo.imovel imovel ").append("LEFT JOIN fetch imovel.setorComercial setorComercial ")
							.append("LEFT JOIN fetch imovel.quadra quadra ")
							.append("LEFT JOIN fetch imovel.logradouroBairro logradouroBairro ")
							.append("LEFT JOIN fetch imovel.clienteImoveis clienteImovel ")
							.append("LEFT JOIN fetch imovel.logradouroCep logradouroCep ")
							.append("LEFT JOIN fetch imovel.ligacaoAgua ligacaoAgua ").append("LEFT JOIN fetch imovel.imovelPerfil ")
							.append("LEFT JOIN fetch imovel.ligacaoAguaSituacao ligacaoAguaSituacao ")
							.append("LEFT JOIN fetch imovel.imovelSubcategorias imovelSubcategoria ")
							.append("LEFT JOIN fetch imovelSubcategoria.comp_id.subcategoria subcategoria ")
							.append("LEFT JOIN fetch imovel.enderecoReferencia enderecoReferencia ")
							.append("LEFT JOIN fetch subcategoria.categoria categoria ").append("LEFT JOIN fetch imovel.rota rota ")
							.append("LEFT JOIN fetch clienteImovel.cliente cliente ")
							.append("LEFT JOIN fetch cliente.clienteEnderecos clienteEndereco ")
							.append("LEFT JOIN fetch cliente.clienteFones clienteFone ")
							.append("LEFT JOIN fetch clienteFone.foneTipo foneTipo ")
							.append("LEFT JOIN fetch logradouroBairro.bairro bairro ")
							.append("LEFT JOIN fetch logradouroBairro.logradouro logradouro ")
							.append("LEFT JOIN fetch logradouroCep.cep cep ")
							.append("LEFT JOIN fetch logradouro.logradouroTitulo logradouroTitulo ")
							.append("LEFT JOIN fetch logradouro.logradouroTipo logradouroTipo ")
							.append("LEFT JOIN fetch bairro.municipio municipio ").append("LEFT JOIN fetch municipio.unidadeFederacao uf ")
							.append("LEFT JOIN fetch clienteEndereco.enderecoReferencia enderecoReferencia1 ")
							.append("LEFT JOIN fetch ligacaoAgua.hidrometroInstalacaoHistorico hidrometroInstalacaoHistorico ")
							// cobrancaDocumentoItem
							.append("LEFT JOIN fetch cbdo.cobrancaDocumentoItems cdi ")
							// Ordem servico
							.append("LEFT JOIN fetch cbdo.ordensServico ")

							.append("LEFT JOIN fetch cbdo.empresa empresa ")

							.append("LEFT JOIN fetch cbdo.localidade localidade ")

							.append("WHERE ");

			if(idCobrancaAcaoCronograma != null && !idCobrancaAcaoCronograma.equals("")){
				consulta.append("cbdo.cobrancaAcaoAtividadeCronograma.id = ").append(idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null && !idCobrancaAcaoComando.equals("")){
				consulta.append("cbdo.cobrancaAcaoAtividadeComando.id = ").append(idCobrancaAcaoComando);
			}
			consulta.append(" AND cbdo.emissao = :dataEmissao AND ").append(" cbdo.cobrancaAcao.id = :idCorteAdministrativoOUFisico ")
							.append("ORDER BY empresa.id, localidade.id, cbdo.codigoSetorComercial, cbdo.numeroQuadra, ")
							.append("imovel.lote, imovel.subLote, cbdo.id");

			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCorteAdministrativoOUFisico", idCobrancaAcao).setTimestamp("dataEmissao", dataEmissao).list()));

			// System.out.println("tam: "+retorno.size());
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarTodosCobrancaDocumentoParaEmitirJuridico(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando,
					Date dataEmissao, Integer idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cbdo.id, ")
							// 0
							.append(" imov.id, ")
							// 1
							.append("cbdo.numeroSequenciaDocumento, ")
							// 2
							.append("cbdo.documentoTipo.id, ")
							// 3
							.append("imov.lote, ")
							// 4
							.append("imov.subLote, ")
							// 5
							.append("imov.numeroImovel, ")
							// 6
							.append("imov.complementoEndereco, ")
							// 7
							.append("imov.numeroSequencialRota, ")
							// 8
							.append("imov.setorComercial.id, ")
							// 9
							.append("imov.localidade.id, ")
							// 10
							.append("bairro.nome, ")
							// 11
							.append("logr.id, ")
							// 12
							.append("logr.nome, ")
							// 13
							.append("qdra.id, ")
							// 14
							.append("rota.id, ")
							// 15
							.append("enderRef.descricao, ")
							// 16
							.append("logrTipo.descricao, ")
							// 17
							.append("logrTitulo.descricao, ")
							// 18
							.append("hih.numeroHidrometro, ")
							// 19

							.append("cbdo.valorDocumento, ")
							// 20
							.append("rota.cobrancaGrupo.id, ")
							// 21
							.append("cep.codigo, ")
							// 22
							.append("last.descricaoAbreviado, ")
							// 23
							.append("imov.imovelPerfil.id, ")
							// 24
							.append("lagu.dataLigacao, ")
							// 25
							.append("cbdo.emissao, ")
							// 26
							.append("hih.id, ")
							// 27
							.append("imov.imovelContaEnvio.id, ")
							// 28
							.append("imov.indicadorDebitoConta, ")
							// 29
							.append("cliente.id, ")
							// 30
							.append("cliente.nome, ")
							// 31
							.append("cliente.rg, ")
							// 32
							.append("cliente.cpf, ")
							// 33
							.append("cliente.cnpj ")
							// 34

							.append("FROM CobrancaDocumento cbdo ").append(" INNER JOIN cbdo.imovel imov ")
							.append(" INNER JOIN imov.logradouroBairro.bairro bairro ")
							.append(" INNER JOIN imov.logradouroCep.logradouro logr ").append(" LEFT JOIN imov.logradouroCep.cep cep ")
							.append(" INNER JOIN imov.quadra qdra ").append(" INNER JOIN imov.rota rota ")
							.append(" LEFT JOIN imov.enderecoReferencia enderRef ").append(" LEFT JOIN logr.logradouroTipo logrTipo ")
							.append(" LEFT JOIN logr.logradouroTitulo logrTitulo ").append(" LEFT JOIN imov.ligacaoAgua lagu ")
							.append(" LEFT JOIN imov.ligacaoAguaSituacao last ")
							.append(" LEFT JOIN lagu.hidrometroInstalacaoHistorico hih ").append(" LEFT JOIN cbdo.cliente cliente ")
							.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			//
			consulta.append(" AND cbdo.emissao = :dataEmissao ").append(" AND cbdo.cobrancaAcao = :idCorteAdministrativoOUFisico ")
							.append("ORDER BY cbdo.empresa, cbdo.localidade, cbdo.codigoSetorComercial, cbdo.numeroQuadra, ")
							.append(" imov.lote, imov.subLote, cbdo.id ");
			//
			Query query = session.createQuery(consulta.toString()).setInteger("idCorteAdministrativoOUFisico", idCobrancaAcao)
							.setTimestamp("dataEmissao", dataEmissao);

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	public Collection pesquisarTodosCobrancaDocumentoParaEmitir(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando,
					Date dataEmissao, Integer idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		

		try{
			consulta.append("SELECT cbdo.id, cbdo.numeroSequenciaDocumento, cbdo.documentoTipo.id, imov.id, imov.lote, ")
							.append(" imov.subLote, imov.numeroImovel, imov.complementoEndereco, imov.numeroSequencialRota, ")
							.append(" setorComercial.id, imov.localidade.id, bairro.nome, logr.id, logr.nome, qdra.id, rota.id, ")
							.append(" qdra.numeroQuadra, enderRef.descricao, logrTipo.descricao, logrTitulo.descricao, hih.numeroHidrometro, ")
							.append(" setorComercial.codigo, rotaImovel.id, imov.numeroSegmento, cep.codigo, cliente.id, cliente.nome ")
							.append("FROM CobrancaDocumento cbdo ")
							.append(" INNER JOIN cbdo.imovel imov ")
							.append(" LEFT JOIN imov.logradouroBairro.bairro bairro ")
							.append(" LEFT JOIN imov.logradouroCep.logradouro logr ").append(" LEFT JOIN imov.quadra qdra ")
							.append(" LEFT JOIN imov.rota rota ").append(" LEFT JOIN imov.setorComercial setorComercial ")
							.append(" LEFT JOIN imov.enderecoReferencia enderRef ")
							.append(" LEFT JOIN logr.logradouroTipo logrTipo ")
							.append(" LEFT JOIN logr.logradouroTitulo logrTitulo ")
							.append(" LEFT JOIN imov.ligacaoAgua.hidrometroInstalacaoHistorico hih ")
							.append(" LEFT JOIN imov.rota rotaImovel ").append(" LEFT JOIN imov.logradouroCep.cep cep ")
							.append(" LEFT JOIN cbdo.cliente cliente ").append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			consulta.append(" AND cbdo.emissao > :dataEmissaoInicial  AND cbdo.emissao > :dataEmissaoFinal")
							.append(" AND cbdo.cobrancaAcao = :idCorteAdministrativoOUFisico ")
							.append("ORDER BY cbdo.empresa, cbdo.localidade, cbdo.codigoSetorComercial, cbdo.numeroQuadra, ")
							.append(" imov.lote, imov.subLote, cbdo.id ");

			Query query = session.createQuery(consulta.toString())
							.setInteger("idCorteAdministrativoOUFisico", idCobrancaAcao)
							.setTimestamp("dataEmissaoInicial", Util.formatarDataInicial(dataEmissao))
							.setTimestamp("dataEmissaoFinal", Util.formatarDataInicial(dataEmissao));

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0349] Emitir Documento de cobranca
	 * Aviso de corte Aquivo TXT
	 * Seleciona os setores comerciais em documento de cobranca
	 * Ordenar pelo setor comercial
	 * 
	 * @author Carlos Chrsytian
	 * @data 23/12/2011
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection pesquisarSetorComercialCobrancaDocumento(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		boolean ordenarLocalidadeSetorComercial = permiteOrdenarPorInscricaoModeloAntigo();

		try{
			consulta.append("SELECT DISTINCT setorComercial.id, cbdo.codigoSetorComercial ");
			if(ordenarLocalidadeSetorComercial){
				consulta.append(", localidade.id ");
			}
			consulta.append("FROM CobrancaDocumento cbdo ");
			consulta.append("LEFT JOIN cbdo.imovel imov ");
			consulta.append("LEFT JOIN imov.localidade localidade ");
			consulta.append("LEFT JOIN imov.setorComercial setorComercial ");
			consulta.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}
			consulta.append("ORDER BY ");
			if(ordenarLocalidadeSetorComercial){
				consulta.append(" localidade.id, ");
			}
			consulta.append(" cbdo.codigoSetorComercial ");

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/** Modelo= LOCAL.SETOR.ROTA.SEGMENTO.LOTE.SUBLOTE */
	private boolean permiteOrdenarPorInscricaoModeloAntigo(){

		String ordenacaoInscricaoAntiga = null;
		try{
			ordenacaoInscricaoAntiga = ParametroOrdemServico.P_ORDENACAO_INSCRICAO.executar();
		}catch(ControladorException e){
			e.printStackTrace();
		}
		boolean ordenarLocalidadeSetorComercial = false;
		if(Util.isNaoNuloBrancoZero(ordenacaoInscricaoAntiga)
						&& ordenacaoInscricaoAntiga.equals("" + ConstantesSistema.INDICADOR_USO_ATIVO)){
			ordenarLocalidadeSetorComercial = true;
		}
		return ordenarLocalidadeSetorComercial;
	}

	/**
	 * [UC0349] Emitir Documento de cobranca
	 * Aviso de corte Arquivo TXT
	 * Seleciona os ids dos documentos de cobranca para a gerAcao Modelo 3
	 * 
	 * @return Collection<Integer>
	 */
	public Collection pesquisarCobrancaDocumentoIds(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT DISTINCT cbdo.id ");
			consulta.append("FROM CobrancaDocumento cbdo ");
			consulta.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0349] Emitir Documento de cobranca
	 * Aviso de corte Aquivo TXT
	 * Seleciona os documento de cobranca
	 * Ordenar por quadra, lote e sublote
	 * 
	 * @author Carlos Chrsytian
	 * @data 23/12/2011
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection pesquisarCobrancaDocumentoArquivoTXT(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando,
					Integer idSetorComercial) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		boolean ordenarInscricaoModeloAntigo = permiteOrdenarPorInscricaoModeloAntigo();

		try{
			consulta.append("SELECT cbdo.id, cbdo.codigoSetorComercial, cbdo.documentoTipo.id, cbdo.numeroSequenciaDocumento, ");
			consulta.append("cbdo.numeroQuadra, cbdo.emissao, cbdo.valorDocumento, empresa.id, ");
			consulta.append("loc.id, loc.descricao, imov.id, imov.lote, imov.subLote, imov.numeroSegmento, rota.codigo, ");
			consulta.append("hih.numeroHidrometro, gerencia.nomeAbreviado, bairro.nome, cep.codigo, municipio.id, municipio.nome, ");
			consulta.append("cliente.id, cliente.nome ");
			consulta.append("FROM CobrancaDocumento cbdo ");
			consulta.append("LEFT JOIN cbdo.empresa empresa ");
			consulta.append("LEFT JOIN cbdo.imovel imov ");
			consulta.append("LEFT JOIN cbdo.cliente cliente ");
			consulta.append("LEFT JOIN imov.rota rota ");
			consulta.append("LEFT JOIN imov.setorComercial setorComercial ");
			consulta.append("LEFT JOIN imov.localidade loc ");
			consulta.append("LEFT JOIN loc.municipio municipio ");
			consulta.append("LEFT JOIN loc.gerenciaRegional gerencia ");
			consulta.append("LEFT JOIN imov.logradouroBairro logbairro ");
			consulta.append("LEFT JOIN logbairro.bairro bairro ");
			consulta.append("LEFT JOIN imov.logradouroCep logcep ");
			consulta.append("LEFT JOIN logcep.cep cep");
			consulta.append("LEFT JOIN imov.ligacaoAgua ligagua ");
			consulta.append("LEFT JOIN ligagua.hidrometroInstalacaoHistorico hih ");
			consulta.append("LEFT JOIN logcep.cep cep ");
			consulta.append("LEFT JOIN cbdo.cobrancaAcao ca ");
			consulta.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			if(idSetorComercial != null){
				consulta.append("AND setorComercial.id = :idSetorComercial ");
			}

			if(ordenarInscricaoModeloAntigo){
				// LOCAL.SETOR.ROTA.SEGMENTO.LOTE.SUBLOTE
				consulta.append(" ORDER BY cbdo.localidade, ");
				consulta.append(" cbdo.codigoSetorComercial, ");
				consulta.append(" rota.codigo, ");
				consulta.append(" imov.numeroSegmento, ");
				consulta.append(" imov.lote, ");
				consulta.append(" imov.subLote ");

			}else{
				consulta.append("ORDER BY cbdo.empresa, cbdo.localidade, cbdo.codigoSetorComercial, cbdo.numeroQuadra, ").append(
								" imov.lote, imov.subLote ");

			}

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			if(idSetorComercial != null){
				query.setInteger("idSetorComercial", idSetorComercial);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0476] Emitir Documento de cobranca - Ordem Corte Modelo 3
	 * 
	 * @author Hugo Lima
	 * @data 07/06/2012
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection pesquisarCobrancaDocumentoArquivoTXTModelo3(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		String sqlConnector = "";

		try{
			consulta.append(" select cbdo.id, ");// 0 - CBDO_ID
			consulta.append(" imov.id, ");// 1 - IMOV_ID
			consulta.append(" cbdo.emissao, ");// 2 - CBDO_TMEMISSAO
			consulta.append(" cacm.quantidadeDiasRealizacao, ");// 3 - CACM_QTDIASREALIZACAO
			consulta.append(" cbac.qtdDiasRealizacao, ");// 4 - CBAC_QTDIASREALIZACAO
			consulta.append(" cbdo.numeroSequenciaDocumento, ");// 5 - CBDO_NNSEQUENCIADOCUMENTO
			consulta.append(" imov.nomeImovel, ");// 6 - IMOV_NMIMOVEL
			consulta.append(" loc.id, ");// 7 - LOCA_ID
			consulta.append(" loc.descricao, ");// 8 - LOCA_NMLOCALIDADE
			consulta.append(" cbdo.codigoSetorComercial, ");// 9 - CBDO_CDSETORCOMERCIAL
			consulta.append(" cbdo.numeroQuadra, ");// 10 - CBDO_NNQUADRA
			consulta.append(" imov.lote, ");// 11 - IMOV_NNLOTE
			consulta.append(" imov.quantidadeEconomias, ");// 12 - IMOV_QTECONOMIA
			consulta.append(" cbdo.valorDocumento, ");// 13 - CBDO_VLDOCUMENTO
			consulta.append(" hih.numeroHidrometro, ");// 14 - HIDR_NNHIDROMETRO
			consulta.append(" hih.dataRetirada, ");// 15 - HIDI_DTRETIRADAHIDROMETRO
			consulta.append(" iper.descricao, ");// 16 - IPER_DSIMOVELPERFIL
			consulta.append(" crgt.descricao, ");// 17 - CRGT_DSCORTEREGISTROTIPO
			consulta.append(" gerencia.id, ");// 18 - GREG_ID
			consulta.append(" iper.id, ");// 19 - IPER_ID
			consulta.append(" crgt.id, ");// 20 - CRGT_ID
			consulta.append(" imov.subLote, ");// 21 - IMOV_NNSUBLOTE
			consulta.append(" cacm.id, ");// 22 - CACM_ID
			consulta.append(" os.id, ");// 23 - ORSE_ID
			consulta.append(" cliente.id, ");// 24 - CLIE_ID
			consulta.append(" cliente.nome ");// 25 - CLIE_NOME

			consulta.append(" from CobrancaDocumento cbdo ");
			consulta.append(" left join cbdo.cobrancaAcaoAtividadeComando cacm ");
			consulta.append(" left join cbdo.cobrancaAcao cbac ");
			consulta.append(" left join cbdo.imovel imov ");
			consulta.append(" left join cbdo.cliente cliente ");
			consulta.append(" left join cbdo.imovelPerfil iper ");
			consulta.append(" left join cbdo.ordensServico os ");
			consulta.append(" left join imov.localidade loc ");
			consulta.append(" left join loc.gerenciaRegional gerencia ");
			consulta.append(" left join imov.ligacaoAgua ligagua ");
			consulta.append(" left join ligagua.hidrometroInstalacaoHistorico hih ");
			consulta.append(" left join ligagua.corteRegistroTipo crgt ");

			if(idCobrancaAcaoCronograma != null || idCobrancaAcaoComando != null){
				consulta.append(" where ");
			}

			if(idCobrancaAcaoCronograma != null){
				consulta.append(sqlConnector + " cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
				sqlConnector = " and ";
			}
			if(idCobrancaAcaoComando != null){
				consulta.append(sqlConnector + " cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
				sqlConnector = " and ";
			}

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}



	/**
	 * [UC0349] Emitir Documento de cobranca
	 * Seleciona os itens do documento de cobranca correspondentes a conta e
	 * ordenar por ano/mes de referencia da conta
	 * 
	 * @author Raphael Rossiter
	 * @data 26/05/2006
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection<CobrancaDocumentoItem> selecionarCobrancaDocumentoItemReferenteConta(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ");
			consulta.append("  FROM CobrancaDocumentoItem cdit ");
			consulta.append("  LEFT JOIN fetch cdit.contaGeral cntaGeral ");
			consulta.append("  LEFT JOIN fetch cntaGeral.conta  cnta ");
			consulta.append(" WHERE cdit.cobrancaDocumento.id = :idCobrancaDocumento ");
			consulta.append(" AND cnta.id IS NOT NULL ");
			consulta.append(" ORDER BY cnta.referencia");

			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0XXX] Emitir Aviso de cobranca
	 * Seleciona os itens do documento de cobranca correspondentes a guia
	 * pagamento
	 * 
	 * @author Savio Luiz
	 * @data 09/04/2007
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection<Object[]> selecionarDadosCobrancaDocumentoItemReferenteGuiaPagamento(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit.valorItemCobrado, cdit.valorAcrescimos ").append("FROM CobrancaDocumentoItem cdit ")
							// .append("LEFT JOIN cdit.guiaPagamentoGeral guia ")
							.append("WHERE cdit.cobrancaDocumento = :idCobrancaDocumento AND ")
							.append("cdit.guiaPagamentoGeral IS NOT NULL ");

			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Retorna o count do resultado da pesquisa de Cobranca Cronograma
	 * pesquisarCobrancaCronogramaCount
	 * 
	 * @author Flavio Cordeiro
	 * @date 14/06/2006
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarCobrancaCronogramaCount(Filtro filtro) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		// String consulta = null;

		try{
			filtro.limparCamposOrderBy();
			// filtro.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes");
			retorno = ((Number) GeradorHQLCondicional.gerarCondicionalQuery(
							filtro,
							"gcom.cobranca.CobrancaAcaoAtividadeCronograma",
							"objeto",
							"select count(distinct objeto.cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.id) "
											+ "	from gcom.cobranca.CobrancaAcaoAtividadeCronograma objeto ", session).uniqueResult())
							.intValue();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public void removerCobrancaCronograma(Integer idGrupoCronogramaMes) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String remover = null;
		try{
			remover = "delete CobrancaAcaoAtividadeCronograma objeto"
							+ "	where objeto.cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.id =" + idGrupoCronogramaMes;

			session.createQuery(remover).executeUpdate();

			remover = "delete CobrancaAcaoCronograma objeto " + "	where objeto.cobrancaGrupoCronogramaMes.id = " + idGrupoCronogramaMes;

			session.createQuery(remover).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

	}

	/**
	 * Consultar Relacao de Debitos do Imovel Consulta o Consumo Medio do Imovel
	 * [UC0227] - Gerar Relacao de Debitos
	 * 
	 * @author Rafael Santos
	 * @date 15/06/2006
	 * @param imovelId
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarConsumoMedioConsumoHistoricoImovel(Integer imovelId) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		String consulta = null;

		try{
			consulta = "select consumoHistorico.consumoMedio " + "from ConsumoHistorico consumoHistorico "
							+ "inner join consumoHistorico.imovel imovel " + "inner join consumoHistorico.ligacaoTipo   ligacaoTipo "
							+ "where imovel.id = :imovelId "
							+ "and ligacaoTipo.id = :ligacaoTipo and consumoHistorico.referenciaFaturamento = ( "
							+ "select max(consumoHistorico2.referenciaFaturamento) " + "from ConsumoHistorico consumoHistorico2 "
							+ "inner join consumoHistorico2.imovel imovel2 " + "inner join consumoHistorico2.ligacaoTipo ligacaoTipo2 "
							+ "where imovel2.id = :imovelId and ligacaoTipo2.id = :ligacaoTipo) ";

			Object resultado = session.createQuery(consulta).setInteger("imovelId", imovelId.intValue())
							.setInteger("ligacaoTipo", LigacaoTipo.LIGACAO_AGUA.intValue()).uniqueResult();

			if(resultado != null){
				retorno = (Integer) resultado;
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Gerar relatorio de criterio de cobranca
	 * Pesquisa as linhas de criterio de cobranca atravas do id do criterio de
	 * cobranca
	 * 
	 * @author Rafael Correia
	 * @data 09/08/2006
	 */
	public Collection pesquisarCobrancaCriterioLinha(Integer idCriterioCobranca) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT " + "imovelPerfil.descricao, " + "categoria.descricao, " + "ccl.valorMinimoDebito, "
							+ "ccl.valorMaximoDebito, " + "ccl.quantidadeMinimaContas, " + "ccl.quantidadeMaximaContas, "
							+ "ccl.valorMinimoContaMes, " + "ccl.valorMinimoDebitoDebitoAutomatico, "
							+ "ccl.quantidadeMinimaContasDebitoAutomatico " + "FROM CobrancaCriterioLinha ccl "
							+ "inner join ccl.imovelPerfil imovelPerfil " + "inner join ccl.categoria categoria "
							+ "WHERE ccl.cobrancaCriterio.id = :idCriterioCobranca " + "order by imovelPerfil.id, categoria.id";

			retorno = session.createQuery(consulta).setInteger("idCriterioCobranca", idCriterioCobranca).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Gerar relatorio de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Antiguidade atravas do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Correia
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoAntiguidade(Integer idParcelamentoPerfil) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{

			consulta = "SELECT antiguidade.id, " + "antiguidade.quantidadeMinimaMesesDebito, "
							+ "antiguidade.percentualDescontoSemRestabelecimento, " + "antiguidade.percentualDescontoComRestabelecimento, "
							+ "antiguidade.percentualDescontoAtivo " + "FROM ParcelamentoDescontoAntiguidade antiguidade "
							+ "INNER JOIN antiguidade.parcelamentoPerfil perfil " + "WHERE perfil.id = :idParcelamentoPerfil "
							+ "ORDER BY antiguidade.quantidadeMinimaMesesDebito";

			retorno = session.createQuery(consulta).setInteger("idParcelamentoPerfil", idParcelamentoPerfil).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Gerar relatorio de Perfil de Parcelamento
	 * Pesquisa os Parcelamentos Desconto Inatividade atravas do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Correia
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoInatividade(Integer idParcelamentoPerfil) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{

			consulta = "SELECT inatividade.id, " + "inatividade.quantidadeMaximaMesesInatividade, "
							+ "inatividade.percentualDescontoSemRestabelecimento, " + "inatividade.percentualDescontoComRestabelecimento "
							+ "FROM ParcelamentoDescontoInatividade inatividade " + "INNER JOIN inatividade.parcelamentoPerfil perfil "
							+ "WHERE perfil.id = :idParcelamentoPerfil " + " ORDER BY inatividade.quantidadeMaximaMesesInatividade";

			retorno = session.createQuery(consulta).setInteger("idParcelamentoPerfil", idParcelamentoPerfil).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Gerar relatorio de Perfil de Parcelamento
	 * Pesquisa os Reparcelamentos Consecutivos atravas do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Correia
	 * @data 22/08/2006
	 */
	public Collection pesquisarReparcelamentoConsecutivo(Integer idParcelamentoPerfil) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT reparcelamento.id, " + "reparcelamento.quantidadeMaximaReparcelamento, "
							+ "prestacao.id, prestacao.quantidadeMaximaPrestacao, "
							+ "prestacao.taxaJuros, prestacao.percentualMinimoEntrada " + "FROM ParcelamentoQuantidadePrestacao prestacao "
							+ "INNER JOIN prestacao.parcelamentoQuantidadeReparcelamento reparcelamento "
							+ "INNER JOIN reparcelamento.parcelamentoPerfil perfil " + "WHERE perfil.id = :idParcelamentoPerfil "
							+ "ORDER BY reparcelamento.quantidadeMaximaReparcelamento, " + "prestacao.quantidadeMaximaPrestacao";

			retorno = session.createQuery(consulta).setInteger("idParcelamentoPerfil", idParcelamentoPerfil).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobranca previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de cobranca do sistema
	 * [SB0002] - Iniciar Process de cobranca Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @author eduardo henrique
	 * @date 12/11/2008 Alteracao de metodo para nao utilizar palavra-chave
	 *       'now'
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados()
					throws ErroRepositorioException{

		Collection<CobrancaAcaoAtividadeCronograma> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "FROM CobrancaAcaoAtividadeCronograma cob "
							+ " left join fetch cob.cobrancaAcaoCronograma cobAcaoCron "
							+ " left join fetch cobAcaoCron.cobrancaGrupoCronogramaMes cobGrupoCronoMes"
							+ " left join fetch cobAcaoCron.cobrancaAcao cobAcao"
							+ " left join fetch cob.cobrancaAtividade cobAtiv"
							+ " WHERE cob.comando is not null and (cobAtiv.id = :cobrancaAtividadeEmitir or cobAtiv.id = :cobrancaAtividadeSimular) and (cob.realizacao is null and cob.dataPrevista <= :dataAtual) "
							+ " order by cobGrupoCronoMes.anoMesReferencia, cobGrupoCronoMes.cobrancaGrupo.descricao, cobAcao.ordemRealizacao"; // or
			// cob.realizacao
			// <
			// cob.comando
			// cobAtiv.id = :cobrancaAtividade and
			// 'A
			// pedido
			// de
			// Ana
			// Breda'

			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta)
							.setInteger("cobrancaAtividadeEmitir", CobrancaAtividade.EMITIR)
							.setInteger("cobrancaAtividadeSimular", CobrancaAtividade.SIMULAR).setDate("dataAtual", new Date()).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobranca previdamento comandados e processos mensais ou eventuais
	 * [UC0001] - Iniciar Processo
	 * Este subfluxo inicia os processo batch de cobranca do sistema
	 * [SB0002] - Iniciar Process de cobranca Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados()
					throws ErroRepositorioException{

		Collection<CobrancaAcaoAtividadeComando> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "FROM CobrancaAcaoAtividadeComando cob "
							+ "left join fetch cob.cobrancaAtividade cobAtiv "

							+ "left join fetch cob.cobrancaAcao cobAcao "
							+ "left join fetch cob.usuario "
							+ "WHERE cob.comando is not null and (cobAtiv.id = :cobrancaAtividadeEmitir or cobAtiv.id = :cobrancaAtividadeSimular) and (cob.realizacao is null ) ";
			// + " order by cob.anoMesReferenciaContaInicial,
			// cob.cobrancaGrupo.descricao, cobAcao.ordemRealizacao"; // or;*/
			// //
			// or
			// cob.realizacao
			// <
			// cob.comando

			retorno = session.createQuery(consulta).setInteger("cobrancaAtividadeEmitir", CobrancaAtividade.EMITIR)
							.setInteger("cobrancaAtividadeSimular", CobrancaAtividade.SIMULAR).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0476] Emitir Documento de cobranca
	 * O sistema ordena a lista de documentos de cobranca por empresa (EMPR_ID
	 * da tabela DOCUMENTO_COBRANCA), localidade (LOCA_ID), setor
	 * (CBDO_CDSETORCOMERCIAL), quadra (CBDO_NNQUADRA), lote e sublote
	 * (IMOV_NNLOTE e IMOV_SUBLOTE da tabela IMOVEL com IMOV_ID da tabela
	 * DOCUMENTO_COBRANCA)
	 * 
	 * @author Ana Maria
	 * @data 07/09/2006
	 * @param Collection
	 *            <CobrancaDocumento>
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection<EmitirDocumentoCobrancaHelper> pesquisarCobrancaDocumentoOrdemCorte(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Date dataEmissao, Integer idCobrancaAcao, int quantidadeCobrancaDocumentoInicio)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append(" select ").append(" new ").append(EmitirDocumentoCobrancaHelper.class.getName())
							.append(" (cbdo.id, loca.id, loca.descricao, ").append("  cbdo.codigoSetorComercial,cbdo.numeroQuadra,")
							.append("  imov.lote, imov.subLote,").append("  imov.id, cbac.numeroDiasValidade,").append("  orse.id,")
							.append("  iper.descricao, cbdo.emissao,").append("  rota.cobrancaGrupo.id, cbdo.valorDocumento,")
							.append("  empr.id, empr.descricao,").append("  greg.nomeAbreviado, greg.nome,").append("  last.id, lest.id,")
							.append("  greg.id, imov.ultimaAlteracao,").append("  last.descricao, lest.descricao,")
							.append("  ltan.id, ltan.descricao, cliente.id, cliente.nome )").append("  from OrdemServico orse ")
							.append("  left join orse.cobrancaDocumento cbdo ").append("  left join cbdo.empresa empr")
							.append("  left join cbdo.localidade loca").append("  left join cbdo.imovel imov")
							.append("  left join imov.ligacaoAguaSituacao last").append("  left join imov.ligacaoEsgotoSituacao lest")
							.append("  left join imov.leituraAnormalidade ltan").append("  left join cbdo.cobrancaAcao cbac")
							.append("  left join cbdo.imovelPerfil iper").append("  left join cbdo.quadra qdra")
							.append("  left join qdra.rota rota").append("  left join loca.gerenciaRegional greg")
							.append("  left join cbdo.cliente cliente").append(" where ");
			if(idCobrancaAcaoCronograma != null && !idCobrancaAcaoCronograma.equals("")){
				consulta.append("cbdo.cobrancaAcaoAtividadeCronograma.id = ").append(idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null && !idCobrancaAcaoComando.equals("")){
				consulta.append("cbdo.cobrancaAcaoAtividadeComando.id = ").append(idCobrancaAcaoComando);
			}
			//
			consulta.append(" AND cbdo.emissao = :dataEmissao ").append(" AND cbdo.cobrancaAcao.id = :idAvisoCorte ")
							.append(" order by empr.id,greg.id ,loca.id, cbdo.codigoSetorComercial, cbdo.numeroQuadra, ")
							.append(" imov.lote, imov.subLote,cbdo.id");

			//
			retorno = session.createQuery(consulta.toString())
.setTimestamp("dataEmissao", dataEmissao)
							.setInteger("idAvisoCorte", idCobrancaAcao)
							.setFirstResult(quantidadeCobrancaDocumentoInicio).setMaxResults(1000)
							.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0582] Emitir Boletim de Cadastro
	 * O sistema ordena a lista de documentos de cobranca por empresa (EMPR_ID
	 * da tabela DOCUMENTO_COBRANCA), localidade (LOCA_ID), setor
	 * (CBDO_CDSETORCOMERCIAL), quadra (CBDO_NNQUADRA), lote e sublote
	 * (IMOV_NNLOTE e IMOV_SUBLOTE da tabela IMOVEL com IMOV_ID da tabela
	 * DOCUMENTO_COBRANCA)
	 * 
	 * @author Rafael Correia
	 * @data 16/05/2007
	 * @param Collection
	 *            <CobrancaDocumento>
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection<EmitirDocumentoCobrancaBoletimCadastroHelper> pesquisarCobrancaDocumentoBoletimCadastro(
					Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando, Date dataEmissao, Integer idCobrancaAcao,
					int quantidadeCobrancaDocumentoInicio) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = " select " + " new "
							+ EmitirDocumentoCobrancaBoletimCadastroHelper.class.getName()
							+ " (cbdo.id, loca.id, " // 0, 1
							+ " cbdo.codigoSetorComercial, cbdo.numeroQuadra," // 2, 3
							+ " imov.lote, imov.subLote," // 4, 5
							+ " imov.id, rota.cobrancaGrupo.id, " // 6, 7
							+ " last.id, lest.id," // 8, 9
							+ " imov.numeroMorador, imov.areaConstruida, logr.id, " // 10,
							// 11,
							// 12
							+ " cep.codigo, bairro.codigo, imov.enderecoReferencia.id, imov.numeroImovel, " // 13,
							// 14 ,
							// 15,
							// 16
							+ " imov.complementoEndereco, imov.reservatorioVolumeFaixaInferior.id, " // 17,
							// 18
							+ " imov.reservatorioVolumeFaixaSuperior.id, imov.piscinaVolumeFaixa.id, " // 19,
							// 20
							+ " imov.indicadorJardim, imov.pavimentoRua.id, imov.pavimentoCalcada.id, " // 21,
							// 22,
							// 23
							+ " imov.numeroPontosUtilizacao, imov.imovelPerfil.id, imov.despejo.id, " // 24,
							// 25,
							// 26
							+ " imov.pocoTipo.id, imov.fonteAbastecimento.id, imov.numeroIptu, imov.numeroCelpe)" // 27,
							// 28,
							// 29,
							// 30
							+ " from OrdemServico orse " + " inner join orse.cobrancaDocumento cbdo " + " inner join cbdo.localidade loca"
							+ " inner join cbdo.imovel imov" + " inner join imov.quadra qdrImovel " + " inner join qdrImovel.rota rota "
							+ " inner join rota.empresaCobranca empreCobranca " + " inner join cbdo.imovelPerfil iper"
							+ " inner join loca.gerenciaRegional greg" + " left join cbdo.empresa empr"
							+ " left join imov.ligacaoAguaSituacao last" + " left join imov.ligacaoEsgotoSituacao lest"
							+ " left join imov.leituraAnormalidade ltan" + " left join imov.logradouroCep logrCep"
							+ " left join logrCep.logradouro logr" + " left join logrCep.cep cep"
							+ " left join imov.logradouroBairro logrBairro" + " left join logrBairro.bairro bairro"
							+ " left join cbdo.cobrancaAcao cbac" + " left join cbdo.quadra qdra" + " left join qdra.rota rota" + " where ";
			if(idCobrancaAcaoCronograma != null && !idCobrancaAcaoCronograma.equals("")){
				consulta = consulta + "cbdo.cobrancaAcaoAtividadeCronograma.id = " + idCobrancaAcaoCronograma
								+ " AND empreCobranca.indicadorEmpresaPrincipal <> " + Empresa.INDICADOR_EMPRESA_PRINCIPAL + " AND ";
			}
			if(idCobrancaAcaoComando != null && !idCobrancaAcaoComando.equals("")){
				consulta = consulta + " cbdo.cobrancaAcaoAtividadeComando.id = " + idCobrancaAcaoComando + " AND ";
			}

			consulta = Util.formatarHQL(consulta, 4);
			consulta = consulta + " AND cbdo.emissao = :dataEmissao AND " + " cbdo.cobrancaAcao.id = :idAvisoCorte "
							+ " order by empr.id,greg.id ,loca.id, cbdo.codigoSetorComercial, cbdo.numeroQuadra, "
							+ " imov.lote, imov.subLote,cbdo.id";

			retorno = session.createQuery(consulta).setInteger("idAvisoCorte", idCobrancaAcao).setTimestamp("dataEmissao", dataEmissao)
							.setFirstResult(quantidadeCobrancaDocumentoInicio).setMaxResults(500).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta os
	 * documentos de cobranca do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection consultarImovelDocumentosCobranca(Integer idImovel, Integer numeroPagina) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT distinct cobrancaAcao.descricaoCobrancaAcao, "
							+ // 0
							"cobrancaDocumento.emissao,"
							+ // 1
							"documentoEmissaoForma.descricaoDocumentoEmissaoForma,"
							+ // 2
							"documentoTipo.descricaoDocumentoTipo,"
							+ // 3
							"cobrancaDocumento.valorDocumento,"
							+ // 4
							"cobrancaDocumento.id, "
							+ // 5
							"documentoEmissaoForma.id, "
							+ // 6
							"cobrancaAcaoCronograma.descricaoCobrancaAcao, "
							+ // 7
							"cobrancaAcaoComando.descricaoCobrancaAcao, "
							+ // 8
							"cobrancaDocumento.numeroSequenciaDocumento, "
							+ // 9
							"cobrancaAcaoSituacao.id, "
							+ // 10
							"cobrancaAcaoSituacao.descricao, "
							+ // 11
							"documentoTipo.id "
							+ // 12
							"FROM CobrancaDocumento cobrancaDocumento "
							+ "left JOIN cobrancaDocumento.cobrancaAcaoAtividadeCronograma acaoCronograma "
							+ "left JOIN acaoCronograma.cobrancaAcaoCronograma cobrancaAcaoAtividadeCronograma "
							+ "left JOIN cobrancaAcaoAtividadeCronograma.cobrancaAcao cobrancaAcaoCronograma "
							+ "left JOIN cobrancaDocumento.cobrancaAcaoAtividadeComando acaoAtividadeComando "
							+ "left JOIN acaoAtividadeComando.cobrancaAcao cobrancaAcaoComando "
							+ "left JOIN cobrancaDocumento.cobrancaAcao cobrancaAcao "
							+ "left JOIN cobrancaDocumento.documentoEmissaoForma documentoEmissaoForma "
							+ "left JOIN cobrancaDocumento.documentoTipo documentoTipo "
							+ "left JOIN cobrancaDocumento.cobrancaAcaoSituacao cobrancaAcaoSituacao "
							+ "where cobrancaDocumento.imovel.id = :idImovel and cobrancaDocumento.imovel.indicadorExclusao != 1 ";

			retorno = session.createQuery(consulta).setInteger("idImovel", idImovel.intValue()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de cobranca do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosCobranca(Integer idImovel) throws ErroRepositorioException{

		Integer retorno = null;
		Object resultadoConsulta = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT count(distinct cobrancaDocumento.id) "
							+ // 0
							"FROM CobrancaDocumento cobrancaDocumento "
							+ "where cobrancaDocumento.imovel.id = :idImovel and cobrancaDocumento.imovel.indicadorExclusao != 1 ";

			resultadoConsulta = session.createQuery(consulta).setInteger("idImovel", idImovel.intValue()).uniqueResult();

			if(resultadoConsulta != null){
				retorno = ((Number) resultadoConsulta).intValue();
			}else{
				retorno = Integer.valueOf(0);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de itens de cobranca do imovel
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosItemCobranca(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Integer retorno = null;
		Object resultadoConsulta = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT count(distinct cobrancaDocumentoItem.id) "
							+ // 0
							"FROM CobrancaDocumentoItem cobrancaDocumentoItem "
							+ "where cobrancaDocumentoItem.cobrancaDocumento.id = :idCobrancaDocumento";

			resultadoConsulta = session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento.intValue())
							.uniqueResult();

			if(resultadoConsulta != null){
				retorno = ((Number) resultadoConsulta).intValue();
			}else{
				retorno = Integer.valueOf(0);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa os dados do parcelamento necessa¡rios para o relatorio atravas do
	 * id do parcelamento
	 * 
	 * @author Rafael Correia
	 * @date 25/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarParcelamentoRelatorio(Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			consulta = "SELECT imov.imov_id, "
							+ // 0
							"mun.muni_nmmunicipio, "
							+ // 1
							"parc.parc_tmparcelamento, "
							+ // 2
							"parc.parc_vlconta, "
							+ // 3
							"parc.parc_vlservicosacobrar, "
							+ // 4
							"parc.parc_vlatualizacaomonetaria, "
							+ // 5
							"parc.parc_vljurosmora, "
							+ // 6
							"parc.parc_vlmulta, "
							+ // 7
							"parc.parc_vlguiapapagamento, "
							+ // 8
							"parc.parc_vlparcelamentosacobrar, "
							+ // 9
							"parc.parc_vldescontoacrescimos, "
							+ // 10
							"parc.parc_vldescontoantiguidade, "
							+ // 11
							"parc.parc_vldescontoinatividade, "
							+ // 12
							"parc.parc_vlcreditoarealizar, "
							+ // 13
							"parc.parc_vldebitoatualizado, "
							+ // 14
							"parc.parc_vlentrada, "
							+ // 15
							"parc.parc_nnprestacoes, "
							+ // 16
							"parc.parc_vlprestacao, "
							+ // 17
							"parc.parc_icrestabelecimento, "
							+ // 18
							"parc.func_id, "
							+ // 19
							"clie.clie_nmcliente, "
							+ // 20
							"clie.clie_nncpf, "
							+ // 21
							"clie.clie_nncnpj, "
							+ // 22
							"parc.parc_txjuros, "
							+ // 23
							"parc.parc_vldescontosancao, "
							+ // 24
							"parc.parc_vldescontotarsoc, "
							+ // 25
							"func.func_id, "
							+ // 26
							"loca.loca_nmlocalidade, "
							+ // 27
							"imov.imov_ddvencimento, "
							+ // 28
							"clie.clie_id, "
							+ // 29
							"parc.parc_tmentradaparcelamento, "
							+ // 30
							"ftgr.ftgr_nndiavencimento, "
							+ // 31
							"parc.parc_vljurosparcelamento, "
							+ // 32
							"parc_amreferenciadebitoinicial, "
							+ // 33
							"parc_amreferenciadebitofinal, "
							+ // 34
							"cltp_icpessoafisicajuridica, "
							+ // 35
							"cep_nmmunicipio, "
							+ // 36
							"PARC_VLATUALIZMONETSUCUMBANT, "
							+ // 37
							"PARC_VLJUROSMORASUCUMBANT, "
							+ // 38
							"PARC_VLSUCUMBENCIAANTERIOR, "
							+ // 39
							"PARC_VLSUCUMBENCIAATUAL, "
							+ // 40
							"PARC_NNPARCELASSUCUMBENCIA, "
							+ // 41
							"parc.cbfm_id  "
							+ // 42
							"FROM parcelamento parc " + "LEFT JOIN cliente clie ON parc.clie_id = clie.clie_id "
							+ "INNER JOIN cliente_tipo cltp ON clie.cltp_id = cltp.cltp_id "
							+ "INNER JOIN imovel imov ON parc.imov_id = imov.imov_id "
							+ "LEFT JOIN usuario usur ON usur.usur_id = parc.usur_id "
							+ "LEFT JOIN funcionario func ON func.func_id = usur.func_id "
							+ "LEFT JOIN logradouro_bairro lgbr ON imov.lgbr_id = lgbr.lgbr_id "
							+ "LEFT JOIN bairro bair ON lgbr.bair_id = bair.bair_id "
							+ "LEFT JOIN municipio mun ON bair.muni_id = mun.muni_id "
							+ "left join logradouro_cep lgcp on imov.lgcp_id = lgcp.lgcp_id "
							+ "left join cep cep on cep.cep_id = lgcp.cep_id "
							+ "INNER JOIN localidade loca ON parc.loca_id = loca.loca_id "
							+ "INNER JOIN rota rota ON imov.rota_id = rota.rota_id "
							+ "inner join faturamento_grupo ftgr on rota.ftgr_id = ftgr.ftgr_id " + "WHERE parc.parc_id = :idParcelamento ";

			retorno = session.createSQLQuery(consulta).setInteger("idParcelamento", idParcelamento.intValue()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * Pesquisa os itens do parcelamento necessa¡rios para o relatorio atravas do
	 * id do parcelamento
	 * 
	 * @author Rafael Correia
	 * @date 25/09/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarParcelamentoItemPorIdParcelamentoRelatorio(Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{

			/*
			 * consulta = "select conta.referencia, conta.valorAgua, " // 0,1 +
			 * "conta.valorEsgoto, conta.debitos, " // 2,3 +
			 * "conta.valorCreditos, gpag.id, " // 4,5 +
			 * "dtgpag.descricao, gpag.valorDebito, " // 6,7 +
			 * "dtdbac.id, dtdbac.descricao, " // 8,9 +
			 * "dbac.numeroPrestacaoDebito, dbac.numeroPrestacaoCobradas, " //
			 * 10,11 + "dbac.valorDebito, ctcrar.id, " // 12,13 +
			 * "ctcrar.descricao, crar.numeroPrestacaoCredito, " // 14,15 +
			 * "crar.numeroPrestacaoRealizada, crar.valorCredito " // 16,17 +
			 * "from ParcelamentoItem parcItem " +
			 * "inner join parcItem.parcelamento parc " +
			 * "left join parcItem.contaGeral cg " + "left join cg.conta conta "
			 * + "left join parcItem.guiaPagamentoGeral gpg " +
			 * "left join gpg.guiaPagamento gpag " +
			 * "left join gpag.debitoTipo dtgpag " +
			 * "left join parcItem.debitoACobrarGeral dacg " +
			 * "left join dacg.debitoACobrar dbac " +
			 * "left join dbac.debitoTipo dtdbac " +
			 * "left join parcItem.creditoARealizarGeral carg " +
			 * "left join carg.creditoARealizar crar " +
			 * "left join crar.creditoTipo ctcrar " +
			 * "where parc.id = :idParcelamento " +
			 * "group by conta.referencia, conta.valorAgua, " +
			 * "conta.valorEsgoto, conta.debitos, " +
			 * "conta.valorCreditos, gpag.id, " +
			 * "dtgpag.descricao, gpag.valorDebito, " +
			 * "dtdbac.id, dtdbac.descricao, " +
			 * "dbac.numeroPrestacaoDebito, dbac.numeroPrestacaoCobradas, " +
			 * "dbac.valorDebito, ctcrar.id, " +
			 * "ctcrar.descricao, crar.numeroPrestacaoCredito, " +
			 * "crar.numeroPrestacaoRealizada, crar.valorCredito " +
			 * "order by conta.referencia, gpag.id, " + "dtdbac.id, ctcrar.id";
			 */
			consulta = "select  conta.referencia, " + "conta.valorAgua, " + "conta.valorEsgoto, " + "conta.debitos, "
							+ "conta.valorCreditos, " + "guiaPagamento.id, "

							+ "debitoTipoDebitoACobrar.descricao, "

							+ "guiaPagamento.valorDebito, " + "debitoTipoDebitoACobrar.id, " + "debitoTipoDebitoACobrar.descricao, "
							+ "debitoACobrar.numeroPrestacaoDebito, " + "debitoACobrar.numeroPrestacaoCobradas, "
							+ "debitoACobrar.valorDebito, " + "creditoTipoCreditoARealizar.id, "
							+ "creditoTipoCreditoARealizar.descricao, " + "creditoARealizar.numeroPrestacaoCredito, "
							+ "creditoARealizar.numeroPrestacaoRealizada, " + "creditoARealizar.valorCredito "

							+ "from ParcelamentoItem parcelamentoItem " + "inner join parcelamentoItem.parcelamento parcelamento "
							+ "left join parcelamentoItem.contaGeral contaGeral " + "left join contaGeral.conta conta "
							+ "left join parcelamentoItem.guiaPagamentoGeral guiaPagamentoGeral "
							+ "left join guiaPagamentoGeral.guiaPagamento guiaPagamento "
							+ "left join guiaPagamento.guiasPagamentoPrestacao guiasPagamentoPrestacao "
							+ "left join parcelamentoItem.debitoACobrarGeral debitoACobrarGeral "
							+ "left join debitoACobrarGeral.debitoACobrar debitoACobrar "
							+ "left join debitoACobrar.debitoTipo debitoTipoDebitoACobrar "
							+ "left join parcelamentoItem.creditoARealizarGeral creditoARealziarGeral "
							+ "left join creditoARealziarGeral.creditoARealizar creditoARealizar "
							+ "left join creditoARealizar.creditoTipo creditoTipoCreditoARealizar "

							+ "where parcelamento.id = :idParcelamento "

							+ "order by conta.referencia, " + "guiaPagamento.id, " + " debitoTipoDebitoACobrar.id, "
							+ "creditoTipoCreditoARealizar.id ";

			retorno = session.createQuery(consulta).setInteger("idParcelamento", idParcelamento.intValue()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * Obtem os percentuais de desconto por tempo de inatividade
	 * [UC0214] - Efetuar Parcelamento de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @date 2/10/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ParcelamentoDescontoInatividade obterPercentualDescontoInatividade(Integer idPerfilParc, int qtdeMeses)
					throws ErroRepositorioException{

		ParcelamentoDescontoInatividade retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "SELECT pdin " + "FROM ParcelamentoDescontoInatividade pdin " + "WHERE pdin.parcelamentoPerfil.id = :idPerfilParc "
							+ "AND pdin.quantidadeMaximaMesesInatividade IN (SELECT min(p.quantidadeMaximaMesesInatividade)"
							+ "FROM ParcelamentoDescontoInatividade p WHERE p.quantidadeMaximaMesesInatividade >= :qtdeMeses "
							+ "and p.parcelamentoPerfil.id = pdin.parcelamentoPerfil.id)";

			retorno = (ParcelamentoDescontoInatividade) session.createQuery(consulta).setInteger("idPerfilParc", idPerfilParc.intValue())
							.setInteger("qtdeMeses", qtdeMeses).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Consultar Servicos/AtualizAcoes do documento de Cobranca
	 * [UC0349] - Emitir Documento de cobranca - Ordem de Fiscalizacao
	 * 
	 * @author Ana Maria
	 * @date 18/10/2006
	 * @param idDocumentoCobranca
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarServioAtualizacao(Integer idDocumentoCobranca) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		BigDecimal retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append(" select sum(cdit.valorItemCobrado) ").append(" from CobrancaDocumentoItem cdit ")
							.append(" inner join cdit.cobrancaDocumento cbdo ")
							.append(" left join cdit.guiaPagamentoGeral.guiaPagamento gpag ")
							.append(" left join cdit.debitoACobrarGeral.debitoACobrar dbac ")
							.append(" where cbdo.id = :idDocumentoCobranca and (gpag.id is not null or dbac.id is not null) ");

			Object resultado = session.createQuery(consulta.toString()).setInteger("idDocumentoCobranca", idDocumentoCobranca.intValue())
							.uniqueResult();

			if(resultado != null){
				retorno = (BigDecimal) resultado;
			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @created 23/10/2006
	 * @param conta
	 * @throws ErroRepositorioException
	 */
	public void associarContaParcelamento(Conta conta) throws ErroRepositorioException{

		String update;
		Session session = HibernateUtil.getSession();

		try{
			// Atualiza PARC_ID da tabela CONTA com o id do parcelamento
			update = "UPDATE gcom.faturamento.conta.Conta SET " + "parc_id = :idParcelamento, ";

			if(conta.getIndicadorRemuneraCobrancaAdministrativa() != null){
				update = update + "cnta_icremuneracobrancaadm = :indicadorRemuneraCobrancaAdm, ";
			}

			update = update + "cnta_tmultimaalteracao = :dataUltimaAlteracao " + "WHERE cnta_id = :idConta ";

			Query query = session.createQuery(update).setInteger("idParcelamento", conta.getParcelamento().getId());

			if(conta.getIndicadorRemuneraCobrancaAdministrativa() != null){
				query.setShort("indicadorRemuneraCobrancaAdm", conta.getIndicadorRemuneraCobrancaAdministrativa());
			}

			query.setTimestamp("dataUltimaAlteracao", conta.getUltimaAlteracao()).setInteger("idConta", conta.getId()).executeUpdate();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Retorna os CBCM_ID da tabela COBRANCA_GRUPO_CRONOGRAMA_MES
	 * 
	 * @author Rafael Santos
	 * @date 16/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaGrupoCronogramaMes() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaGrupoCronogramaMes.id,cobrancaGrupoCronogramaMes.anoMesReferencia,cobrancaGrupoCronogramaMes.cobrancaGrupo.id from CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes";

			retorno = session.createQuery(consulta).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Retorna os CBCR_ID da tabela COBRANCA_ACAO_CRONOGRAMA com CBCM_ID da
	 * tabela COBRANCA_GRUPO_CRONOGRAMA_MES
	 * 
	 * @author Rafael Santos
	 * @date 16/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaAcaoCronograma(int idCobrancaGrupoCronogramaMes) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaAcaoCronograma.id,cobrancaAcaoCronograma.cobrancaAcao.id from CobrancaAcaoCronograma cobrancaAcaoCronograma "
							+ "where cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.id = :idCobrancaGrupoCronogramaMes";

			retorno = session.createQuery(consulta).setInteger("idCobrancaGrupoCronogramaMes", idCobrancaGrupoCronogramaMes).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Retorna CAAC_TMREALIZACAO do COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Rafael Santos
	 * @date 16/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(int idCobrancaAcaoCronograma, int idCobrancaAtividade)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaAtividadeAcaoCronograma.id, "
							+ "cobrancaAtividadeAcaoCronograma.realizacao, "
							+ "cobrancaAtividadeAcaoCronograma.dataPrevista,"
							+ "cobrancaAtividadeAcaoCronograma.comando from CobrancaAcaoAtividadeCronograma cobrancaAtividadeAcaoCronograma "
							+ "where cobrancaAtividadeAcaoCronograma.cobrancaAcaoCronograma.id = :idCobrancaAcaoCronograma and "
							+ "cobrancaAtividadeAcaoCronograma.cobrancaAtividade.id = :idCobrancaAtividade ";

			retorno = session.createQuery(consulta).setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma)
							.setInteger("idCobrancaAtividade", idCobrancaAtividade).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Retorna os DOTP_ID da tabela COBRANCA_ACAO com CBAC_ID de
	 * COBRANCA_ACAO_CRONOGRAMA
	 * 
	 * @author Rafael Santos
	 * @date 16/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaAcao(int idCobrancaAcao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaAcao.documentoTipo.id,cobrancaAcao.servicoTipo.id from CobrancaAcao cobrancaAcao "
							+ "where cobrancaAcao.id = :idCobrancaAcao";

			retorno = session.createQuery(consulta).setInteger("idCobrancaAcao", idCobrancaAcao).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0001] - Processar Documentos cobranca
	 * Retorna os CBDO_ID da tabela COBRANCA_DOCUMENTO com CAAC_ID da tabela
	 * COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006,28/05/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection<DadosPesquisaCobrancaDocumentoHelper> pesquisarCobrancaDocumento(int idCobrancaAtividadeAcaoCronograma)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select new gcom.cobranca.bean.DadosPesquisaCobrancaDocumentoHelper(cobrancaDocumento.id,"
							+ "cobrancaDocumento.emissao, " + "cobrancaDocumento.imovel.id, " + "cobrancaDocumento.valorDocumento, "
							+ "cobCrit.percentualValorMinimoPagoParceladoCancelado, "
							+ "cobCrit.percentualQuantidadeMinimoPagoParceladoCancelado, " + "cobCrit.valorLimitePrioridade)  "
							+ "from CobrancaDocumento cobrancaDocumento " + "left join cobrancaDocumento.cobrancaCriterio cobCrit "
							+ "where cobrancaDocumento.cobrancaAcaoAtividadeCronograma.id = :idCobrancaAtividadeAcaoCronograma "
							+ "order by cobrancaDocumento.id";

			retorno = session.createQuery(consulta).setInteger("idCobrancaAtividadeAcaoCronograma", idCobrancaAtividadeAcaoCronograma)
							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0002] - Determinar situacao da Acao de cobranca
	 * Retorna os ORSE_ID da tabela ORDEM_SERVICO com CBDO_ID da tabela
	 * COBRANCA_DOCUMENTO
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006,28/05/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarOrdemServico(int idCobrancaAtividadeAcaoCronogramaEmitir) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		String consulta = null;

		try{

			consulta = "select orse.orse_id as idOS," + " orse.orse_cdsituacao as codigoOS,"
							+ " orse.orse_dtfiscalizacaosituacao as dataFiscalizacao," + " orse.orse_tmencerramento as dataEncerramento,"
							+ " cob.cbdo_id as idCobDocumento," + " cob.cbdo_vldocumento as valorDocumento,"
							+ " cobCrit.cbct_pcvlminimopgparccanc as pec," + " cobCrit.cbct_pcqtminimopgparccanc as qdt,"
							+ " cobCrit.cbct_vllimiteprioridade as valorLimite," + " orse.fzst_id as idFiscalizacaoSit,"
							+ " atMotEnc.amen_icexecucao as indicadorExecucao," + " imov.imov_id as idImovel,"
							+ " imov.loca_id as idLocalidade, " + " atMotEnc.amen_id as idMotivoEncerramento " + "from ordem_servico orse "
							+ "inner join cobranca_documento cob on cob.cbdo_id = orse.cbdo_id "
							+ "    and cob.caac_id = :idCobrancaAtividadeAcaoCronogramaEmitir " + "left join cobranca_criterio cobCrit "
							+ "     on cobCrit.cbct_id = cob.cbct_id " + "left join imovel imov " + "      on imov.imov_id = orse.imov_id "
							+ "left join  atendimento_motivo_encrto atMotEnc " + "      on atMotEnc.amen_id = orse.amen_id ";

			retorno = session.createSQLQuery(consulta).addScalar("idOS", Hibernate.INTEGER).addScalar("codigoOS", Hibernate.SHORT)
							.addScalar("dataFiscalizacao", Hibernate.DATE).addScalar("dataEncerramento", Hibernate.DATE)
							.addScalar("idCobDocumento", Hibernate.INTEGER).addScalar("valorDocumento", Hibernate.BIG_DECIMAL)
							.addScalar("pec", Hibernate.BIG_DECIMAL).addScalar("qdt", Hibernate.BIG_DECIMAL)
							.addScalar("valorLimite", Hibernate.BIG_DECIMAL).addScalar("idFiscalizacaoSit", Hibernate.INTEGER)
							.addScalar("indicadorExecucao", Hibernate.SHORT).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("idLocalidade", Hibernate.INTEGER).addScalar("idMotivoEncerramento", Hibernate.INTEGER)
							.setInteger("idCobrancaAtividadeAcaoCronogramaEmitir", idCobrancaAtividadeAcaoCronogramaEmitir)

							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<OrdemServico> pesquisarOrdemServicoCobrancaAtividadeAcao(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		String consulta = null;
		Integer idCobrancaAtividadeAcaoComandoEmitir = null;
		Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;
		if(cobrancaAcaoAtividadeCronograma == null){
			idCobrancaAtividadeAcaoComandoEmitir = cobrancaAcaoAtividadeComando.getId();
		}else{
			idCobrancaAtividadeAcaoCronogramaEmitir = cobrancaAcaoAtividadeCronograma.getId();
		}
		try{

			consulta = "select orse " + "from OrdemServico orse " + "inner join fetch orse.cobrancaDocumento cobDoc "
							+ "left join cobDoc.cobrancaCriterio crit " + "left join cobDoc.cobrancaAcao acao "
							+ "left join cobDoc.cobrancaAcaoAtividadeComando comando "
							+ "left join cobDoc.cobrancaAcaoAtividadeCronograma cronograma " + "left join fetch orse.imovel imovel "
							+ "left join orse.atendimentoMotivoEncerramento " + "left join fetch orse.servicoTipo svtp "
							+ "left join fetch svtp.ordemServicoLayout layout " + "where ";
			if(idCobrancaAtividadeAcaoComandoEmitir != null){
				consulta += "comando.id = :idComandoEventual ";
			}else{
				consulta += "cronograma.id = :idComandoCronograma ";

			}

			if(idCobrancaAtividadeAcaoComandoEmitir != null){
				retorno = session.createQuery(consulta).setInteger("idComandoEventual", idCobrancaAtividadeAcaoComandoEmitir).list();
			}else{
				retorno = session.createQuery(consulta).setInteger("idComandoCronograma", idCobrancaAtividadeAcaoCronogramaEmitir).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0007] - Determinar situacao da Ordem de Servico
	 * Retorna os AMEN_ICEXECUCAO da tabela ATENDIMENTO_MOTIVO_ENCERRAMENTO com
	 * AMEN_ID da tabela ORDEM_SERVIa‡O
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarAtendimentoMotivoEncerramento(int idAtendimentoMotivoEncerramento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select atendimentoMotivoEncerramento.indicadorExecucao from AtendimentoMotivoEncerramento atendimentoMotivoEncerramento "
							+ "where atendimentoMotivoEncerramento.id = :idAtendimentoMotivoEncerramento";

			retorno = session.createQuery(consulta).setInteger("idAtendimentoMotivoEncerramento", idAtendimentoMotivoEncerramento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os CNTA_ID,GPAG_ID,DBAC_ID da tabela COBRANCA_DOCUMENTO_ITEM com
	 * CBDO_ID da tabela COBRANCA_DOCUMENTO
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaDocumentoItem(int idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaDocumentoItem.contaGeral.id, " + "cobrancaDocumentoItem.guiaPagamentoGeral.id, "
							+ "cobrancaDocumentoItem.debitoACobrarGeral.id, " + "cobrancaDocumentoItem.id,"
							+ "cobrancaDocumentoItem.valorItemCobrado " + "from CobrancaDocumentoItem cobrancaDocumentoItem "
							+ "where cobrancaDocumentoItem.cobrancaDocumento.id = :idCobrancaDocumento";

			retorno = session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os CNTG_ID da tabela COBRANCA_GERAL com CNTA_ID da tabela
	 * COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContaGeral(int idConta) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select contaGeral.id " + "from ContaGeral contaGeral "
							+ "where contaGeral.conta.id = :idConta and contaGeral.indicadorHistorico = :valorIndicador";

			retorno = session.createQuery(consulta).setInteger("idConta", idConta).setInteger("valorIndicador", 1).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,CNHI_DTCANCELAMENTO da tabela CONTA_HISTORICO com
	 * CNTA_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarContaHistorico(int idContaHistorico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select contaHistorico.debitoCreditoSituacaoAtual.id," + "contaHistorico.dataCancelamento "
							+ "from ContaHistorico contaHistorico " + "where contaHistorico.id = :idContaHistorico";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idContaHistorico", idContaHistorico).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,CNTA_DTCANCELAMENTO da tabela CONTA com CNTA_ID
	 * da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006,01/06/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarConta(int idConta) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select conta.debitoCreditoSituacaoAtual.id," + "conta.dataCancelamento " + "from Conta conta "
							+ "where conta.id = :idConta";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idConta", idConta).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os PARC_TM_PARCELAMENTO da tabela PARCELAMENTO com CNTA_ID da
	 * tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarParcelamentoConta(int idConta, int idParcelamentoSituacao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Date retorno = null;
		String consulta = null;

		try{
			consulta = "select tabelaParcelamento.parcelamento " + " from ParcelamentoItem parcelamentoItem "
							+ " inner join parcelamentoItem.parcelamento tabelaParcelamento "
							+ " where parcelamentoItem.contaGeral.id = :idConta and "
							+ " tabelaParcelamento.parcelamentoSituacao = :idParcelamentoSituacao ";

			// consulta = "select tabelaParcelamento.parcelamento "
			// + "from Parcelamento tabelaParcelamento "
			// + " inner join tabelaParcelamento."
			// + "where tabelaParcelamento.id =(select
			// parcelamentoItem.parcelamento.id from ParcelamentoItem "
			// + "parcelamentoItem where parcelamentoItem.contaGeral.id =
			// :idConta) and "
			// + "tabelaParcelamento.parcelamentoSituacao =
			// :idParcelamentoSituacao ";

			retorno = (Date) session.createQuery(consulta).setInteger("idConta", idConta)
							.setInteger("idParcelamentoSituacao", idParcelamentoSituacao).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os GPGE_ID da tabela GUIA_PAGAMENTO_GERAL com GPAG_ID da tabela
	 * COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiaPagamentoGeral(int idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select guiaPagamentoGeral.id "
							+ "from GuiaPagamentoGeral guiaPagamentoGeral "
							+ "where guiaPagamentoGeral.guiaPagamento.id = :idGuiaPagamento and guiaPagamentoGeral.indicadorHistorico = :valorIndicador";

			retorno = session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).setInteger("valorIndicador", 1).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,GPGE_DTCANCELAMENTO da tabela
	 * GUIA_PAGAMENTO_HISTORICO com GPAG_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarGuiaPagamentoHistorico(int idGuiaPagamentoHistorico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select guiaPagamentoHistorico.debitoCreditoSituacaoByDcstIdatual.id," + "guiaPagamentoHistorico.ultimaAlteracao "
							+ "from GuiaPagamentoHistorico guiaPagamentoHistorico "
							+ "where guiaPagamentoHistorico.id = :idGuiaPagamentoHistorico";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idGuiaPagamentoHistorico", idGuiaPagamentoHistorico)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,GPAG_DTCANCELAMENTO da tabela GUIA_PAGAMENTO com
	 * GPAG_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarGuiaPagamento(int idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select guiaPagamento.debitoCreditoSituacaoAtual.id," + "guiaPagamento.ultimaAlteracao "
							+ "from GuiaPagamento guiaPagamento " + "where guiaPagamento.id = :idGuiaPagamento";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os PARC_TM_PARCELAMENTO da tabela PARCELAMENTO com GPAG_ID da
	 * tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006,29/05/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarParcelamentoGuiaPagamento(int idGuiaPagamento, int idParcelamentoSituacao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Date retorno = null;
		String consulta = null;

		try{
			consulta = "select tabelaParcelamento.parcelamento " + " from ParcelamentoItem parcelamentoItem "
							+ " inner join parcelamentoItem.parcelamento tabelaParcelamento "
							+ " where parcelamentoItem.guiaPagamentoGeral.id = :idGuiaPagamento and "
							+ " tabelaParcelamento.parcelamentoSituacao = :idParcelamentoSituacao ";

			retorno = (Date) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento)
							.setInteger("idParcelamentoSituacao", idParcelamentoSituacao).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DAGE_ID da tabela DEBITO_A_COBRAR_GERAL com DBAC_ID da tabela
	 * COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitoACobrarGeral(int idDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select debitoACobrarGeral.id " + "from DebitoACobrarGeral debitoACobrarGeral "
							+ "where debitoACobrarGeral.id = :idDebitoACobrar "
							+ "and debitoACobrarGeral.indicadorHistorico = :valorIndicador";

			retorno = session.createQuery(consulta).setInteger("idDebitoACobrar", idDebitoACobrar)
							.setInteger("valorIndicador", ConstantesSistema.SIM).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,DAGE_DTCANCELAMENTO da tabela
	 * DEBITO_A_COBRAR_HISTORICO com DBAC_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDebitoACobrarHistorico(int idDebitoACobrarHistorico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select debitoACobrarHistorico.debitoCreditoSituacaoAtual.id," + "debitoACobrarHistorico.ultimaAlteracao "
							+ "from DebitoACobrarHistorico debitoACobrarHistorico "
							+ "where debitoACobrarHistorico.id = :idDebitoACobrarHistorico";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idDebitoACobrarHistorico", idDebitoACobrarHistorico)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os DCST_IDATUAL,GPAG_DTCANCELAMENTO da tabela DEBITO_A_COBRAR com
	 * DBAC_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDebitoACobrar(int idDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;
		String consulta = null;

		try{
			consulta = "select debitoACobrar.debitoCreditoSituacaoAtual.id," + "debitoACobrar.ultimaAlteracao "
							+ "from DebitoACobrar debitoACobrar " + "where debitoACobrar.id = :idDebitoACobrar";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idDebitoACobrar", idDebitoACobrar).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna os PARC_TM_PARCELAMENTO da tabela PARCELAMENTO com DBAC_ID da
	 * tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos,Savio Luiz
	 * @date 17/10/2006,29/05/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarParcelamentoDebitoACobrar(int idDebitoACobrar, int idParcelamentoSituacao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Date retorno = null;
		String consulta = null;

		try{
			consulta = "select tabelaParcelamento.parcelamento " + " from ParcelamentoItem parcelamentoItem "
							+ " inner join parcelamentoItem.parcelamento tabelaParcelamento "
							+ " where parcelamentoItem.creditoARealizarGeral.id = :idDebitoACobrar and "
							+ " tabelaParcelamento.parcelamentoSituacao = :idParcelamentoSituacao ";

			// consulta = "select tabelaParcelamento.parcelamento "
			// + "from Parcelamento tabelaParcelamento "
			// + "where tabelaParcelamento.id =(select
			// parcelamentoItem.parcelamento.id from ParcelamentoItem
			// parcelamentoItem "
			// + "where parcelamentoItem.debitoACobrar.id = :idDebitoACobrar)
			// and "
			// + "tabelaParcelamento.parcelamentoSituacao =
			// :idParcelamentoSituacao ";

			retorno = (Date) session.createQuery(consulta).setInteger("idDebitoACobrar", idDebitoACobrar)
							.setInteger("idParcelamentoSituacao", idParcelamentoSituacao).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGHI_DTPAGAMENTO da tabela PAGAMENTO_HISTORICO com
	 * CNTA_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosContaHistorico(int idContaHistorico) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamentoHistorico.dataPagamento) " + "from PagamentoHistorico pagamentoHistorico "
							+ "where pagamentoHistorico.conta.id = :idContaHistorico";

			Object retornoObj = session.createQuery(consulta).setInteger("idContaHistorico", idContaHistorico).uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGMT_DTPAGAMENTO da tabela PAGAMENTO com CNTA_ID da
	 * tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosConta(int idConta) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamento.dataPagamento) " + "from Pagamento pagamento " + "where conta.id = :idConta";

			Object retornoObj = session.createQuery(consulta).setInteger("idConta", idConta).uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGHI_DTPAGAMENTO da tabela PAGAMENTO_HISTORICO com
	 * GPAG_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosGuiaPagamentoHistorico(int idGuiaPagamentoHistorico) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamentoHistorico.dataPagamento) " + "from PagamentoHistorico pagamentoHistorico "
							+ "where pagamentoHistorico.guiaPagamentoGeral.id = :idGuiaPagamentoHistorico";

			Object retornoObj = session.createQuery(consulta).setInteger("idGuiaPagamentoHistorico", idGuiaPagamentoHistorico)
							.uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGMT_DTPAGAMENTO da tabela PAGAMENTO com GPAG_ID da
	 * tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosGuiaPagamento(int idGuiaPagamento) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamento.dataPagamento) " + "from Pagamento pagamento " + "where guiaPagamento.id = :idGuiaPagamento";

			Object retornoObj = session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGHI_DTPAGAMENTO da tabela PAGAMENTO_HISTORICO com
	 * DBAC_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosDebitoACobrarHistorico(int idDebitoACobrarHistorico) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamentoHistorico.dataPagamento) " + "from PagamentoHistorico pagamentoHistorico "
							+ "where pagamentoHistorico.debitoACobrar.id = :idDebitoACobrarHistorico";

			Object retornoObj = session.createQuery(consulta).setInteger("idDebitoACobrarHistorico", idDebitoACobrarHistorico)
							.uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0003] - Determinar situacao do Debito do Item do Documento de cobranca
	 * Retorna o Menor PGMT_DTPAGAMENTO da tabela PAGAMENTO_HISTORICO com
	 * DBAC_ID da tabela COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentosDebitoACobrar(int idDebitoACobrar) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select min(pagamento.dataPagamento) " + "from Pagamento pagamento " + "where debitoACobrar.id = :idDebitoACobrar";

			Object retornoObj = session.createQuery(consulta).setInteger("idDebitoACobrar", idDebitoACobrar).uniqueResult();

			if(retornoObj != null){
				retorno = (Date) retornoObj;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0005] - Determinar situacao Predominante do Debito do Documento de
	 * cobranca
	 * Retorna o CBCT_PCVLMINIMOPGPARCCANC, CBCBT_PCQTMINIMOPGPARCCANC da tabela
	 * COBRANCA_CRITERIO com CBCT_ID da tabela COBRANCA_DOCUMENTO
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaCriterio(int idCobrancaCriterio) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			// Menor Data de Pagamento
			consulta = "select cobrancaCriterio.percentualValorMinimoPagoParceladoCancelado, "
							+ "cobrancaCriterio.percentualQuantidadeMinimoPagoParceladoCancelado, "
							+ "cobrancaCriterio.valorLimitePrioridade " + "from CobrancaCriterio cobrancaCriterio "
							+ "where cobrancaCriterio.id = :idCobrancaCriterio";

			retorno = session.createQuery(consulta).setInteger("idCobrancaCriterio", idCobrancaCriterio).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0004] - Atualizar item do documento de cobranca
	 * Atualizar os COBRANCA_DOCUMENTO_ITEM
	 * 
	 * @author Rafael Santos
	 * @date 19/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public void atualizarCobrancaDocumentoItem(Collection colecaoCobrancaDocumentoItem) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizar;

		// posicao do array com os dados que serao atualizados na cobranca
		// documento item
		final byte POSICAO_ID_COBRANCA_DOCUMENTO = 0;
		final byte POSICAO_ID_COBRANCA_DOCUMENTO_ITEM = 1;
		final byte POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM = 2;
		final byte POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM = 3;

		try{

			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();

			while(iteratorColecaoCobrancaDocumentoItem.hasNext()){

				Object[] cobrancaDocumentoItemParaAtualizar = (Object[]) iteratorColecaoCobrancaDocumentoItem.next();

				atualizar = "update gcom.cobranca.CobrancaDocumentoItem "
								+ " set cdst_id = :idSituacaoDebitoItem, cdit_dtsituacaodebito = :dataSituacaoDebito,cdit_tmultimaalteracao = :ultimaAlteracao "
								+ " where cbdo_id = :idCobrancaDocumento and cdit_id = :idCobrancaDocumentoItem ";

				session.createQuery(atualizar)
								.setInteger("idSituacaoDebitoItem",
												((Integer) cobrancaDocumentoItemParaAtualizar[POSICAO_ID_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM]))
								.setDate("dataSituacaoDebito",
												((Date) cobrancaDocumentoItemParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO_COBRANCA_DOCUMENTO_ITEM]))
								.setInteger("idCobrancaDocumento",
												((Integer) cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]))
								.setInteger("idCobrancaDocumentoItem",
												((Integer) cobrancaDocumentoItemParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO_ITEM]))
								.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();
			}
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0004] - Processar Documento de cobranca
	 * Atualizar os COBRANCA_DOCUMENTO
	 * 
	 * @author Rafael Santos
	 * @date 19/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public void atualizarCobrancaDocumento(Collection colecaoCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizar;

		// posicao do array com os dados que serao atualizados
		final byte POSICAO_ID_COBRANCA_DOCUMENTO = 0;
		final byte POSICAO_ID_SITUACAO_ACAO = 1;
		final byte POSICAO_DATA_SITUACAO_ACAO = 2;
		final byte POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA = 3;
		final byte POSICAO_DATA_SITUACAO_DEBITO = 4;
		final byte POSICAO_ID_CATEGORIA = 5;
		final byte POSICAO_ID_ESFERA_PODER = 6;
		final byte POSICAO_ID_FISCALIZACAO = 7;
		final byte POSICAO_INDICADOR_ACIMA_ABIAXO = 8;
		final byte POSICAO_INDICADOR_ACIMA_LIMITE = 9;

		try{

			Iterator iteratorColecaoCobrancaDocumento = colecaoCobrancaDocumento.iterator();

			while(iteratorColecaoCobrancaDocumento.hasNext()){

				Object[] cobrancaDocumentoParaAtualizar = (Object[]) iteratorColecaoCobrancaDocumento.next();

				// System.out.println("INICIALIZANDO DADOS");

				Integer idSituacaoDebito = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA];

				Integer idFiscalizacao = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_FISCALIZACAO];
				Integer idEsferaPoder = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER];
				Short indAntesApos = (Short) cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_ABIAXO];
				Date dataSituacaoAcao = (Date) cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO];
				Date dataSituacaoDebito = (Date) cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_DEBITO];

				// System.out.println("FIM INICIALIZANDO DADOS");

				atualizar = "update gcom.cobranca.CobrancaDocumento " + " set cast_id = :idSituacaoAcao,";
				if(dataSituacaoAcao != null && !dataSituacaoAcao.equals("")){
					atualizar += " cbdo_dtsituacaoacao = :dataSituacaoAcao, ";
				}
				if(dataSituacaoDebito != null && !dataSituacaoDebito.equals("")){
					atualizar += " cbdo_dtsituacaodebito = :dataSituacaoDebito, ";
				}
				atualizar += " cbdo_tmultimaalteracao = :ultimaAlteracao, " + " catg_id = :idCategoria, "
								+ " cbdo_icacimalimite = :icAcimaLimite ";

				if(idSituacaoDebito != null && !idSituacaoDebito.equals("")){
					atualizar = atualizar + " ,cdst_id = " + idSituacaoDebito;
				}else{
					atualizar = atualizar + " ,cdst_id = null";
				}
				if(idFiscalizacao != null && !idFiscalizacao.equals("")){
					atualizar = atualizar + " ,fzst_id = " + idFiscalizacao;
				}else{
					atualizar = atualizar + " ,fzst_id = null";
				}
				if(idEsferaPoder != null && !idEsferaPoder.equals("")){
					atualizar = atualizar + " ,epod_id = " + idEsferaPoder;
				}else{
					atualizar = atualizar + " ,epod_id = null";
				}
				if(indAntesApos != null && !indAntesApos.equals("")){
					atualizar = atualizar + " ,cbdo_icantesapos = " + indAntesApos;
				}else{
					atualizar = atualizar + " ,cbdo_icantesapos = null";
				}

				atualizar = atualizar + " where cbdo_id = :idCobrancaDocumento";
				if(dataSituacaoAcao != null && !dataSituacaoAcao.equals("") && dataSituacaoDebito != null && !dataSituacaoDebito.equals("")){

					session.createQuery(atualizar)
									.setInteger("idSituacaoAcao", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO]))
									.setDate("dataSituacaoAcao", dataSituacaoAcao)
									.setDate("dataSituacaoDebito", dataSituacaoDebito)
									.setInteger("idCobrancaDocumento",
													((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]))
									.setInteger("idCategoria", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA]))
									.setShort("icAcimaLimite", ((Short) cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE]))

									.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();
				}else{
					if(dataSituacaoAcao != null && !dataSituacaoAcao.equals("")){
						session.createQuery(atualizar)
										.setInteger("idSituacaoAcao", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO]))
										.setDate("dataSituacaoAcao", dataSituacaoAcao)
										.setInteger("idCobrancaDocumento",
														((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]))
										.setInteger("idCategoria", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA]))
										.setShort("icAcimaLimite", ((Short) cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE]))

										.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();
					}else{
						if(dataSituacaoDebito != null && !dataSituacaoDebito.equals("")){
							session.createQuery(atualizar)
											.setInteger("idSituacaoAcao",
															((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO]))

											.setDate("dataSituacaoDebito", dataSituacaoDebito)
											.setInteger("idCobrancaDocumento",
															((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]))
											.setInteger("idCategoria", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA]))
											.setShort("icAcimaLimite",
															((Short) cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE]))

											.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();

						}else{
							session.createQuery(atualizar)
											.setInteger("idSituacaoAcao",
															((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO]))

											.setInteger("idCobrancaDocumento",
															((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO]))
											.setInteger("idCategoria", ((Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA]))
											.setShort("icAcimaLimite",
															((Short) cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE]))

											.setTimestamp("ultimaAlteracao", new Date()).executeUpdate();

						}
					}
				}

			}
		}catch(Exception e){
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0001] - Processar Documentos de cobranca
	 * Retorna os dados do Imovel
	 * 
	 * @author Rafael Santos
	 * @date 19/10/2006
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosImovel(int idImovel) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select distinct imovel.ligacaoAguaSituacao.id, " // 0
							+ "imovel.ligacaoEsgotoSituacao.id, "// 1
							+ "imovel.localidade.id, "// 2
							+ "imovel.quadra.id, "// 3
							+ "imovel.quadra.numeroQuadra, "// 4
							+ "imovel.setorComercial.id, "// 5
							+ "imovel.setorComercial.codigo, "// 6
							+ "imovel.localidade.gerenciaRegional.id, "// 7
							+ "imovel.rota.id,  "// 8
							+ "imovel.imovelPerfil.id, "// 9
							+ "esferaPoder.id, "// 10
							+ "clienteResposanvel.id "// 11
							+ "from Imovel imovel  "
							+ "left outer join imovel.clienteImoveis clienteImoveisReposanvel with (clienteImoveisReposanvel.clienteRelacaoTipo.id = "
							+ ClienteRelacaoTipo.RESPONSAVEL.toString()
							+ " ) "
							+ "and clienteImoveisReposanvel.dataFimRelacao is null  "
							+ "left outer join clienteImoveisReposanvel.cliente clienteResposanvel "
							+ "left outer join clienteResposanvel.clienteTipo clienteTipo "
							+ "left outer join clienteTipo.esferaPoder esferaPoder " + "where imovel.id = :idImovel";
			retorno = session.createQuery(consulta).setInteger("idImovel", idImovel).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0001] - Processar Documentos de cobranca
	 * Retorna os dados do Imovel
	 * 
	 * @author Savio Luiz
	 * @date 11/06/2007
	 * @return Date retorno
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosImovelPorOS(int idOrdemServico) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select ordemServ.imovel.id, " + "ordemServ.imovel.localidade.id " + "from OrdemServico ordemServ "
							+ "where ordemServ.id = :idOrdemServico";
			retorno = (Object[]) session.createQuery(consulta).setInteger("idOrdemServico", idOrdemServico).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0001] - Processar Documento de cobranca
	 * Atualizar os COBRANCA_ACAO_ATIVIDADE_CRONOGRAMA
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 * @throws ErroRepositorioException
	 */
	public void atualizarCobrancaAcaoAtividadeCronograma(int idCobrancaAcaoAtividadeCrongrama) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizar;

		try{
			atualizar = "update gcom.cobranca.CobrancaAcaoAtividadeCronograma "
							+ " set caac_tmrealizacao = :dataRealizacao,caac_tmultimaalteracao = :dataAtual "
							+ " where caac_id = :idCobrancaAcaoAtividadeCronograma";

			session.createQuery(atualizar).setInteger("idCobrancaAcaoAtividadeCronograma", idCobrancaAcaoAtividadeCrongrama)
							.setDate("dataRealizacao", new Date()).setTimestamp("dataAtual", new Date()).executeUpdate();

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
			// } catch (HibernateException e) {
			// levanta a execucao para a proxima camada
			// throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0006] - Processar Acao com Ordens de Servico
	 * Retorna os ORSE_ID da tabela ORDEM_SERVICO com SVTP_ID da tabela
	 * COBRANCA_ACAO e ORSE_TMGERACAO entre CAAC_DTPREVISTA do Emitir e do
	 * Encerrar
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarOrdemServicos(int idServicoTipo, Date dataPrevistaAtividadeEncerrar, Date dataPrevistaAtividadeEmitir,
					int indice) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select ordemServico.id," + "ordemServico.situacao," + "ordemServico.fiscalizacaoSituacao.id,"
							+ "ordemServico.dataFiscalizacaoSituacao," + "ordemServico.dataEncerramento,"
							+ "atendimentoMotivoEncerramento.id,  " + "imov.id,loc.id from OrdemServico ordemServico "
							+ "inner join ordemServico.atendimentoMotivoEncerramento atendimentoMotivoEncerramento "
							+ "left join ordemServico.imovel imov " + "left join imov.localidade loc "
							+ "where ordemServico.servicoTipo.id = :idServicoTipo and "
							+ " ordemServico.dataGeracao >= :dataPrevistaAtividadeEmitir and"
							+ " ordemServico.dataGeracao <= :dataPrevistaAtividadeEncerrar ";

			retorno = session.createQuery(consulta).setInteger("idServicoTipo", idServicoTipo)
							.setDate("dataPrevistaAtividadeEmitir", dataPrevistaAtividadeEmitir)
							.setDate("dataPrevistaAtividadeEncerrar", dataPrevistaAtividadeEncerrar).setFirstResult(indice)
							.setMaxResults(500).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * retorna o objeto ParcelamentoFaixaValor com o valor do debito(valorFaixa)
	 * com desconto maior q o da faixa e menor que proxima faixa
	 * [UC0214] - Efetuar Parcelamento de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @date 31/10/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ParcelamentoFaixaValor obterParcelamentoFaixaValor(Integer idParcelamentoQtdePrestacao, BigDecimal valorFaixa,
					Short indicadorPercentualFaixaValor) throws ErroRepositorioException{

		ParcelamentoFaixaValor retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "SELECT pfvl " + "FROM ParcelamentoFaixaValor pfvl "
							+ "WHERE pfvl.parcelamentoQuantidadePrestacao.id = :idParcelamentoQtdePrestacao "
							+ "AND pfvl.indicadorPercentualFaixaValor = :indicadorPercentualFaixaValor " + "AND pfvl.valorFaixa IN ("
							+ "SELECT max(p.valorFaixa) FROM ParcelamentoFaixaValor p WHERE p.valorFaixa <= :valorFaixa)";

			retorno = (ParcelamentoFaixaValor) session.createQuery(consulta)
							.setInteger("idParcelamentoQtdePrestacao", idParcelamentoQtdePrestacao.intValue())
							.setShort("indicadorPercentualFaixaValor", indicadorPercentualFaixaValor)
							.setBigDecimal("valorFaixa", valorFaixa).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Atualizar Guia Pagamento Prestacao
	 * 
	 * @author Virginia Melo
	 * @date 02/03/2009
	 * @param guiaPagamentoPrestacoes
	 * @param dataVencimento
	 * @throws ErroRepositorioException
	 */
	public void atualizarGuiaPagamentoPrestacao(Collection<Object[]> guiaPagamentoPrestacoes, Date dataVencimento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizarGuiaPagamentoPrestacao;
		try{

			for(Object[] guiaPagamentoPrestacao : guiaPagamentoPrestacoes){

				Integer guiaId = (Integer) guiaPagamentoPrestacao[0];
				Short numPrestacao = (Short) guiaPagamentoPrestacao[1];

				atualizarGuiaPagamentoPrestacao = "UPDATE GuiaPagamentoPrestacao gpp SET " + "gpp.dataVencimento = :dataVencimento, "
								+ "gpp.indicadorCobrancaMulta = :idCobrancaMulta, " + "gpp.ultimaAlteracao = :dataAtual  "
								+ "WHERE gpp.comp_id.guiaPagamentoId = :guiaId " + "AND gpp.comp_id.numeroPrestacao = :numPrestacao ";

				session.createQuery(atualizarGuiaPagamentoPrestacao).setDate("dataVencimento", dataVencimento)
								.setShort("idCobrancaMulta", ConstantesSistema.SIM).setTimestamp("dataAtual", new Date())
								.setInteger("guiaId", guiaId).setShort("numPrestacao", numPrestacao).executeUpdate();
			}

		}catch(Exception e){
			// System.out.println("Erro");
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das Acoes de cobranca com a
	 * atividade emitir ja realizada e a atividade encerrar ainda nao realizada
	 * e realizar a atividade encerrar das Acoes que estejam comandadas.
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * O sistema exclui o resumo das Acoes de cobranca correspondente ao
	 * cronograma de Acao de cobranca que esta sendo processado
	 * 
	 * @author Rafael Santos
	 * @date 08/11/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public void deletarResumoCobrancaAcao(int idCobrancaAcaoCronograma) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String consulta;

		try{
			consulta = "delete ResumoCobrancaAcao resumoCobrancaAcao "
							+ "where resumoCobrancaAcao.cobrancaAcaoCronograma.id = :idCobrancaAcaoCronograma ";

			session.createQuery(consulta).setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

	}

	/**
	 * retorna uma colecao de ResolucaoDiretoria
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(Collection<Integer> idsGrupoUsuario)
					throws ErroRepositorioException{

		Collection retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select distinct rd ");
			consulta.append("from ResolucaoDiretoria rd ");
			consulta.append("left join rd.resolucaoDiretoriaGrupos rdgr ");
			consulta.append("where rd.indicadorUtilizacaoLivre = :indicadorUtilizacaoLivre ");
			consulta.append("  and (rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual) ");
			consulta.append("  and (rd.dataVigenciaInicio <= :dataAtual) ");

			if(idsGrupoUsuario != null){
				consulta.append("  and (rdgr.grupo.id in (:idsGrupoUsuario)  or (rdgr.grupo.id is null))");
			}

			// consulta.append("order by rd.dataVigenciaInicio, rd.id ");
			consulta.append(" order by rd.numeroResolucaoDiretoria ");
			// TODO Hebert Falcao - Checagem temporaria, pois esse metodo sempre deve tratar os
			// grupos de usuario da RD
			if(idsGrupoUsuario != null){
				retorno = (Collection) session.createQuery(consulta.toString()).setDate("dataAtual", new Date())
								.setShort("indicadorUtilizacaoLivre", ConstantesSistema.SIM)
								.setParameterList("idsGrupoUsuario", idsGrupoUsuario).list();
			}else{
				retorno = (Collection) session.createQuery(consulta.toString()).setDate("dataAtual", new Date())
								.setShort("indicadorUtilizacaoLivre", ConstantesSistema.SIM).list();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * retorna uma colecao de ResolucaoDiretoria
	 * [UC0214] - Efetuar Parcelamento de Debitos
	 * 
	 * @author Bruno Ferreira dos Santos
	 * @date 24/03/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioComEntrada() throws ErroRepositorioException{

		Collection retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "select distinct rd " + "from ParcelamentoQuantidadePrestacao pqp "
							+ "inner join pqp.parcelamentoQuantidadeReparcelamento pqr " + "inner join pqr.parcelamentoPerfil pp "
							+ "inner join pp.resolucaoDiretoria rd " + "where rd.indicadorUtilizacaoLivre = :indicadorUtilizacaoLivre "
							+ "and (rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual) "
							+ "and (rd.dataVigenciaInicio <= :dataAtual) "
							+ "and (pqp.percentualMinimoEntrada <> 0 or pqp.percentualMinimoEntrada is not null) "
							+ "order by rd.dataVigenciaInicio, rd.id  ";

			retorno = (Collection) session.createQuery(consulta).setDate("dataAtual", new Date())
							.setShort("indicadorUtilizacaoLivre", ConstantesSistema.SIM).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	// /**
	// * retorna uma colecao de ResolucaoDiretoria
	// *
	// * [UC0214] - Efetuar Parcelamento de Debitos
	// *
	// * @author Vivianne Sousa
	// * @date 08/11/2006
	// *
	// * @return
	// * @throws ErroRepositorioException
	// */
	// public Collection<ResolucaoDiretoria>
	// pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio()
	// throws ErroRepositorioException {
	//
	// Collection retorno;
	// Session session = HibernateUtil.getSession();
	// String consulta = "";
	//
	// try {
	//
	// consulta = "select rd "
	// + "from ResolucaoDiretoria rd "
	// + "where rd.indicadorUtilizacaoLivre = :indicadorUtilizacaoLivre "
	// + "and (rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual) "
	// + "order by rd.dataVigenciaInicio ";
	//
	// retorno = (Collection) session.createQuery(consulta).
	// setDate("dataAtual", new Date()).
	// setShort("indicadorUtilizacaoLivre",ConstantesSistema.SIM).list();
	//
	// } catch (HibernateException e) {
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// } finally {
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	/**
	 * Obtem a condicao referente a  qtde de reparcelamentos consecutivos ja
	 * realizadas para o perfil do parcelamento para o Imovel
	 * a partir da tabela PARCELAMENTO_QUANTIDADE_REPARCELAMENTO com
	 * PCPF_ID=PCPF_ID da tabela PARCELAMENTO_PERFIL e
	 * PQTR_QTMAXIMAREPARCELAMENTO igual ou menor que
	 * IMOV_NNREPARCELAMENTOCONSECUTVOS, caso mais de uma ocorrencia seja
	 * selecionada, escolher a que tiver o maior valor de
	 * PQTR_QTMAXIMAREPARCELAMENTO
	 * [UC0214] - Efetuar Parcelamento de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2006
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ParcelamentoQuantidadeReparcelamento obterQtdeReparcelamentoPerfil(Integer idPerfilParc, Short numeroReparcelamentoConsecutivos)
					throws ErroRepositorioException{

		ParcelamentoQuantidadeReparcelamento retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "SELECT parcelamentoQtdeReparcel " + "FROM ParcelamentoQuantidadeReparcelamento parcelamentoQtdeReparcel "
							+ "WHERE parcelamentoQtdeReparcel.parcelamentoPerfil.id = :idPerfilParc "
							+ "AND parcelamentoQtdeReparcel.quantidadeMaximaReparcelamento IN ( "
							+ "SELECT max(p.quantidadeMaximaReparcelamento) " + "FROM ParcelamentoQuantidadeReparcelamento p "
							+ "WHERE p.quantidadeMaximaReparcelamento <= :numeroReparcelamentoConsecutivos "
							+ "and p.parcelamentoPerfil.id = :idPerfilParc)";

			retorno = (ParcelamentoQuantidadeReparcelamento) session.createQuery(consulta)
							.setInteger("idPerfilParc", idPerfilParc.intValue())
							.setShort("numeroReparcelamentoConsecutivos", numeroReparcelamentoConsecutivos).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove ClienteGuiaPagamento
	 * referentes ao parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @created 28/11/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerClienteGuiaPagamentoDoParcelamento(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerClienteGuiaPagamentoDoParcelamento;

		try{
			// remove em credito a realizar os parcelamentos
			removerClienteGuiaPagamentoDoParcelamento = "delete gcom.cadastro.cliente.ClienteGuiaPagamento "
							+ "where gpag_id = :idGuiaPagamento ";

			session.createQuery(removerClienteGuiaPagamentoDoParcelamento).setInteger("idGuiaPagamento", idGuiaPagamento.intValue())
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debitos Remove ClienteGuiaPagamento
	 * referentes ao parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @created 28/11/2006
	 * @param idImovel
	 *            idParcelamento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public void removerClienteGuiaPagamentoDoParcelamentoHistorico(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String removerClienteGuiaPagamentoDoParcelamento;

		try{
			// remove em credito a realizar os parcelamentos
			removerClienteGuiaPagamentoDoParcelamento = "delete gcom.cadastro.cliente.ClienteGuiaPagamentoHistorico "
							+ "where gpag_id = :idGuiaPagamento ";

			session.createQuery(removerClienteGuiaPagamentoDoParcelamento).setInteger("idGuiaPagamento", idGuiaPagamento.intValue())
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Pesquisa o criterio de cobranca linha definido para a rota
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0001] Gerar Atividade de
	 * Acao de cobranca para os Imoveis do Cliente
	 * 
	 * @author Leonardo Vieira
	 * @created 12/12/2006
	 * @param idRota
	 * @param idCobrancaAcao
	 * @return
	 * @throws ErroRepositorioException
	 */
	public CobrancaCriterio pesquisarCriterioCobrancaRota(Integer idRota, Integer idCobrancaAcao) throws ErroRepositorioException{

		CobrancaCriterio retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append("select cc from RotaAcaoCriterio rac ").append("inner join rac.cobrancaCriterio cc ")
							.append("where rac.comp_id.rotaId = :idRota and rac.cobrancaAcao = :idCobrancaAcao");

			// consulta.append("select cc from RotaAcaoCriterio rac ")
			// .append("inner join rac.cobrancaAcao ca ")
			// .append("inner join rac.cobrancaCriterio cc ")
			// .append("where rac.comp_id.rotaId = :idRota and ca.id = :idCobrancaAcao");

			retorno = (CobrancaCriterio) session.createQuery(consulta.toString()).setInteger("idRota", idRota)
							.setInteger("idCobrancaAcao", idCobrancaAcao).setMaxResults(1).uniqueResult();
			if(retorno != null){
				retorno.setCriteriosSituacaoCobranca(new HashSet(this.pesquisarCobrancaCriterioSituacaoCobranca(retorno.getId())));
				retorno.setCriteriosSituacaoLigacaoAgua(new HashSet(this.pesquisarCobrancaCriterioSituacaoLigacaoAgua(retorno.getId())));
				retorno.setCriteriosSituacaoLigacaoEsgoto(new HashSet(this.pesquisarCobrancaCriterioSituacaoLigacaoEsgoto(retorno.getId())));
			}

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Pesquisa o criterio de situacao de cobranca definido para o criterio de
	 * cobranca
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0001] Gerar Atividade de
	 * Acao de cobranca para os Imoveis do Cliente
	 * 
	 * @author Francisco do Nascimento
	 * @created 10/06/2008
	 * @param idCobrancaCriterio
	 * @return
	 * @throws ErroRepositorioException
	 */
	private Collection<CriterioSituacaoCobranca> pesquisarCobrancaCriterioSituacaoCobranca(Integer idCobrancaCriterio)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select csc from CriterioSituacaoCobranca csc " + "inner join csc.comp_id.cobrancaCriterio cc "
							+ " where cc.id = :idCobrancaCriterio ";

			retorno = (Collection) session.createQuery(consulta).setInteger("idCobrancaCriterio", idCobrancaCriterio).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Pesquisa o criterio de situacao de ligacao de agua definido para o
	 * criterio de cobranca
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0001] Gerar Atividade de
	 * Acao de cobranca para os Imoveis do Cliente
	 * 
	 * @author Francisco do Nascimento
	 * @created 10/06/2008
	 * @param idCobrancaCriterio
	 * @return
	 * @throws ErroRepositorioException
	 */
	private Collection<CriterioSituacaoLigacaoAgua> pesquisarCobrancaCriterioSituacaoLigacaoAgua(Integer idCobrancaCriterio)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuilder consulta = new StringBuilder();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select csla from CriterioSituacaoLigacaoAgua csla ").append("inner join csla.comp_id.cobrancaCriterio cc ")
							.append(" where cc.id = :idCobrancaCriterio ");

			retorno = (Collection) session.createQuery(consulta.toString()).setInteger("idCobrancaCriterio", idCobrancaCriterio).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Pesquisa o criterio de situacao de ligacao de esgoto definido para o
	 * criterio de cobranca
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0001] Gerar Atividade de
	 * Acao de cobranca para os Imoveis do Cliente
	 * 
	 * @author Francisco do Nascimento
	 * @created 10/06/2008
	 * @param idCobrancaCriterio
	 * @return
	 * @throws ErroRepositorioException
	 */
	private Collection<CriterioSituacaoLigacaoEsgoto> pesquisarCobrancaCriterioSituacaoLigacaoEsgoto(Integer idCobrancaCriterio)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuilder consulta = new StringBuilder();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select csle from CriterioSituacaoLigacaoEsgoto csle ").append("inner join csle.comp_id.cobrancaCriterio cc ")
							.append(" where cc.id = :idCobrancaCriterio ");

			retorno = (Collection) session.createQuery(consulta.toString()).setInteger("idCobrancaCriterio", idCobrancaCriterio).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Pesquisa o criterio de cobranca linha definido para o criterio de
	 * cobranca
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0001] Gerar Atividade de
	 * Acao de cobranca para os Imoveis do Cliente
	 * 
	 * @author Leonardo Vieira
	 * @created 12/12/2006
	 * @param idCobrancaCriterio
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaCriterioLinha> pesquisarCobrancaCriterioLinhaCriterio(Integer idCobrancaCriterio)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select ccl from CobrancaCriterioLinha ccl ").append(" inner join fetch ccl.cobrancaCriterio cc ")
							.append(" where ccl.cobrancaCriterio = :idCobrancaCriterio ");

			retorno = (Collection) session.createQuery(consulta.toString()).setInteger("idCobrancaCriterio", idCobrancaCriterio).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public CobrancaCriterio pesquisarCobrancaCriterioIdCriterio(Integer idCobrancaCriterio) throws ErroRepositorioException{

		CobrancaCriterio retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select cc from cobrancaCriterio cc " + " where cc.id = :idCobrancaCriterio ";

			retorno = (CobrancaCriterio) session.createQuery(consulta).setInteger("idCobrancaCriterio", idCobrancaCriterio)
							.setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public Integer pesquisarOrdemServicoAcaoPrecedente(Integer idImovel, Integer idServicoTipo, Short indicadorExecucao,
					Date dataEncerramento) throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select os.id from OrdemServico os " + "inner join os.servicoTipo st " + "inner join os.imovel im "
							+ "inner join os.atendimentoMotivoEncerramento ame " + "where os.dataEncerramento is not null "
							+ "and im.id = :idImovel and st.id = :idServicoTipo and ame.indicadorExecucao = :indicadorExecucao  "
							+ "and os.dataEncerramento <= :dataEncerramento";

			retorno = (Integer) session.createQuery(consulta).setInteger("idImovel", idImovel).setInteger("idServicoTipo", idServicoTipo)
							.setShort("indicadorExecucao", indicadorExecucao).setDate("dataEncerramento", dataEncerramento)
							.setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	public Integer pesquisarDocumentoCobrancaRelativoAcaoPrecedente(Integer idImovel, Integer idDocTipoAcaoCobrancaPrecedente,
					Integer idAcaoCobranca, Date dataEmissao, Date dataEmissaoValidade) throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select cbdo.cbdo_id as idCobrancaDocumento ");
			consulta.append(" from cobranca_documento cbdo ");
			consulta.append(" left join documento_nao_entregue done on done.cbdo_id = cbdo.cbdo_id ");
			consulta.append(" where cbdo.imov_id = :idImovel and cbdo.dotp_id = :idDocTipoAcaoCobrancaPrecedente ");
			consulta.append(" and (done.dotp_id is null or done.dotp_id <> cbdo.dotp_id) ");
			consulta.append(" and cbdo.cbdo_tmemissao <= :dataEmissao and cbdo.cbdo_tmemissao >= :dataEmissaoValidade ");
			consulta.append(" and (cbdo.cast_id is null or (    cbdo.cast_id <> " + CobrancaAcaoSituacao.CANCELADA_PRAZO);
			consulta.append("                               and cbdo.cast_id <> " + CobrancaAcaoSituacao.NAO_ENTREGUE);
			consulta.append("                               and cbdo.cast_id <> " + CobrancaAcaoSituacao.CANCELADA);
			consulta.append("                               and cbdo.cast_id <> " + CobrancaAcaoSituacao.PENDENTE + ")) ");
			consulta.append(" and cbdo.cdst_id = " + CobrancaDebitoSituacao.PENDENTE);
			consulta.append(" and not exists (select * from cobranca_documento cbdoSucessor ");
			consulta.append("                 left join cobranca_acao cbac on cbac.cbac_id = :idAcaoCobranca ");
			consulta.append("                 where cbdoSucessor.imov_id = cbdo.imov_id ");
			consulta.append("                 and cbdoSucessor.dotp_id = cbac.dotp_id ");
			consulta.append("                 and ((cbac.cbac_nndiasminimoacaoprecedent is not null ");
			consulta.append("                      and cbdoSucessor.cbdo_tmemissao >= (cbdo.cbdo_tmemissao + cbac.cbac_nndiasminimoacaoprecedent)) ");
			consulta.append("                      or (cbac.cbac_nndiasminimoacaoprecedent is null ");
			consulta.append("                      and cbdoSucessor.cbdo_tmemissao >= cbdo.cbdo_tmemissao)) ");
			consulta.append("                 and ((cbac.cbac_nndiasvalidade is not null ");
			consulta.append("                      and (cbdoSucessor.cbdo_tmemissao + cbac.cbac_nndiasvalidade) >= current_timestamp) ");
			consulta.append("                      or (cbac.cbac_nndiasvalidade is null ");
			consulta.append("                          and cbdoSucessor.cbdo_tmemissao >= current_timestamp))) ");

			retorno = (Integer) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumento", Hibernate.INTEGER)
							.setInteger("idImovel", idImovel)
							.setInteger("idDocTipoAcaoCobrancaPrecedente", idDocTipoAcaoCobrancaPrecedente)
							.setTimestamp("dataEmissao", dataEmissao).setTimestamp("dataEmissaoValidade", dataEmissaoValidade)
							.setInteger("idAcaoCobranca", idAcaoCobranca).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	public Object[] pesquisarIdDocumentoCobranca(Integer idImovel, Integer idDocumentoTipo, Date dataEmissao)
					throws ErroRepositorioException{

		Object[] retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select cd.cbdo_id as idCobrancaDocumento, cd.cast_id as idCobrancaAcaoSituacao from cobranca_documento cd ")
							.append("where cd.imov_id = :idImovel and cd.dotp_id = :idDocumentoTipo ")
							.append("and cd.cbdo_tmemissao > :dataEmissao and cd.CDST_ID <> ").append(CobrancaDebitoSituacao.CANCELADO);

			retorno = (Object[]) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumento", Hibernate.INTEGER)
							.addScalar("idCobrancaAcaoSituacao", Hibernate.INTEGER).setInteger("idImovel", idImovel)
							.setInteger("idDocumentoTipo", idDocumentoTipo).setDate("dataEmissao", dataEmissao).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	public Object[] pesquisarDocumentoCobrancaValido(Integer idImovel, Integer idDocumentoTipo, Short numeroDiasValidade,
					boolean restringirSituacaoDebito) throws ErroRepositorioException{

		Object[] retorno = null;
		Query query = null;

		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();
		//
		Date data = Util.subtrairNumeroDiasDeUmaData(new Date(), numeroDiasValidade);

		try{

			consulta.append(" select cbdo.id as idCobrancaDocumento, cbdo.emissao as dataEmissao ");
			consulta.append(" from CobrancaDocumento cbdo");
			consulta.append(" where cbdo.imovel.id = :idImovel");
			consulta.append(" and cbdo.documentoTipo.id = :idDocumentoTipo");

			consulta.append(" and  cbdo.emissao >= :data");
			// consulta.append(" and  cbdo.emissao + interval ':numeroDiasValidade day' >= current_timestamp");
			consulta.append(" and cbdo.cobrancaAcaoSituacao.id in (:pendente, :entregue, :enviados)");

			if(restringirSituacaoDebito){
				consulta.append(" and cbdo.cobrancaDebitoSituacao.id = :situacaoDebitoPendente");
			}
			if(numeroDiasValidade == null){
				numeroDiasValidade = Short.valueOf("1");
			}
			query = session.createQuery(consulta.toString()).setInteger("idImovel", idImovel)
							.setInteger("idDocumentoTipo", idDocumentoTipo).setDate("data", data)
							.setInteger("pendente", CobrancaAcaoSituacao.PENDENTE).setInteger("entregue", CobrancaAcaoSituacao.ENTREGUE)
							.setInteger("enviados", CobrancaAcaoSituacao.ENVIADOS);

			if(restringirSituacaoDebito){
				query.setInteger("situacaoDebitoPendente", CobrancaDebitoSituacao.PENDENTE);
			}

			retorno = (Object[]) query.setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	public List pesquisarDocumentoCobrancaSucessor(Integer idImovel, Collection<Integer> acoesSucessorasIdDocTipo,
					Date dataEmissaoAcaoPredecessora) throws ErroRepositorioException{

		List retorno = null;
		Query query = null;

		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select cbdosucessor.cbdo_tmemissao as dataEmissao, ");
			consulta.append(" cbacsucessor.cbac_nndiasvalidade as diasValidade, ");
			consulta.append(" cbdosucessor.cast_id as idCobrancaAcaoSituacao ");
			consulta.append(" from cobranca_documento cbdosucessor ");
			consulta.append(" inner join cobranca_acao cbacsucessor on cbacsucessor.cbac_id = cbdosucessor.cbac_id ");
			consulta.append(" where cbdosucessor.imov_id = :idImovel ");
			consulta.append(" and cbdosucessor.dotp_id in (:acoesSucessorasIdDocTipo) ");
			consulta.append(" and cbdosucessor.cbdo_tmemissao >= :dataEmissaoAcaoPredecessora + cbacsucessor.cbac_nndiasminimoacaoprecedent ");

			query = session.createSQLQuery(consulta.toString()).addScalar("dataEmissao", Hibernate.DATE)
							.addScalar("diasValidade", Hibernate.SHORT).addScalar("idCobrancaAcaoSituacao", Hibernate.INTEGER)
							.setInteger("idImovel", idImovel).setParameterList("acoesSucessorasIdDocTipo", acoesSucessorasIdDocTipo)
							.setDate("dataEmissaoAcaoPredecessora", dataEmissaoAcaoPredecessora);

			retorno = query.list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public Integer pesquisarDocumentoCobrancaSucessorValido(Integer idImovel, Collection<Integer> acoesSucessorasIdDocTipo)
					throws ErroRepositorioException{

		Integer retorno = null;
		Query query = null;

		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select cbdosucessor.cbdo_id as idCobrancaDocumento ");
			consulta.append(" from cobranca_documento cbdosucessor ");
			consulta.append(" inner join cobranca_acao cbacsucessor on cbacsucessor.cbac_id = cbdosucessor.cbac_id ");
			consulta.append(" where cbdosucessor.imov_id = :idImovel ");
			consulta.append(" and cbdosucessor.dotp_id in (:acoesSucessorasIdDocTipo) ");
			consulta.append(" and cbdosucessor.cbdo_tmemissao + cbacsucessor.cbac_nndiasvalidade >= current_timestamp ");
			consulta.append(" and cbdosucessor.cast_id in (:pendente, :entregue, :enviados) ");

			query = session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumento", Hibernate.INTEGER)
							.setInteger("idImovel", idImovel).setParameterList("acoesSucessorasIdDocTipo", acoesSucessorasIdDocTipo)
							.setInteger("pendente", CobrancaAcaoSituacao.PENDENTE).setInteger("entregue", CobrancaAcaoSituacao.ENTREGUE)
							.setInteger("enviados", CobrancaAcaoSituacao.ENVIADOS);

			retorno = (Integer) query.setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	public Integer pesquisarExistenciaImovelCobracaSituacao(Integer idImovel) throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select im.id from ImovelCobrancaSituacao ics " + "inner join ics.imovel im "
							+ "where im.id = :idImovel and ics.dataRetiradaCobranca is null ";

			retorno = (Integer) session.createQuery(consulta).setInteger("idImovel", idImovel).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	public DebitoTipo pesquisarDebitoTipo(Integer idDebitoTipo) throws ErroRepositorioException{

		DebitoTipo retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select debitoTipo from DebitoTipo debitoTipo ").append("where debitoTipo.id = :idDebitoTipo");

			retorno = (DebitoTipo) session.createQuery(consulta.toString()).setInteger("idDebitoTipo", idDebitoTipo).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;

	}

	public CobrancaAcaoAtividadeCronograma pesquisarCobrancaAcaoAtividadeCronograma(Integer idCronogramaAtividadeAcaoCobranca)
					throws ErroRepositorioException{

		CobrancaAcaoAtividadeCronograma retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select caac from CobrancaAcaoAtividadeCronograma caac " + "where caac.id = :idCronogramaAtividadeAcaoCobranca";

			retorno = (CobrancaAcaoAtividadeCronograma) session.createQuery(consulta)
							.setInteger("idCronogramaAtividadeAcaoCobranca", idCronogramaAtividadeAcaoCobranca).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public CobrancaAcaoAtividadeComando pesquisarCobrancaAcaoAtividadeComando(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		CobrancaAcaoAtividadeComando retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select caac from CobrancaAcaoAtividadeComando caac " + "where caac.id = :idCobrancaAcaoAtividadeComando";

			retorno = (CobrancaAcaoAtividadeComando) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public Collection pesquisarCobrancaDocumentoItemContaGuiaPagamentoDebitoACobrar(Integer idCobrancaDocumento)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			// consulta.append("select cdi from CobrancaDocumentoItem cdi ")
			// .append("left join  cdi.contaGeral ctg ")
			// .append("left join  ctg.conta ct ")
			// .append("left join  cdi.guiaPagamentoGeral gpg ")
			// .append("left join  gpg.guiaPagamento gp ")
			// .append("left join  cdi.debitoACobrarGeral dacg ")
			// .append("left join  dacg.debitoACobrar dac ")
			// .append("where cdi.cobrancaDocumento = :idCobrancaDocumento ");

			consulta.append("select cdi.contaGeral.id, ")
							// 0
							.append("cdi.guiaPagamentoGeral.id,")
							// 1
							.append("cdi.debitoACobrarGeral.id  ")
							// 2
							.append("from CobrancaDocumentoItem cdi  ").append("left join cdi.contaGeral ctg ")
							.append("left join ctg.conta ct ").append("left join cdi.guiaPagamentoGeral gpg ")
							.append("left join gpg.guiaPagamento gp ").append("left join cdi.debitoACobrarGeral dacg ")
							.append("left join dacg.debitoACobrar dac ").append("where cdi.cobrancaDocumento = :idCobrancaDocumento ");

			// retorno = (Collection)
			// session.createQuery(consulta.toString()).setInteger(
			// "idCobrancaDocumento", idCobrancaDocumento).list();

			Query query = session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento);

			retorno = query.list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public Collection pesquisarCobrancaDocumento(Integer idImovel, Integer idDocumentoTipo) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select cd.emissao, cd.cobrancaAcaoSituacao.id from CobrancaDocumento cd ")
							.append("where cd.imovel.id = :idImovel ").append("and cd.documentoTipo.id = :idDocumentoTipo ")
							.append("order by cd.emissao desc");

			Query query = session.createQuery(consulta.toString()).setInteger("idImovel", idImovel)
							.setInteger("idDocumentoTipo", idDocumentoTipo);

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Pesquisa o Documento de cobranca pelo ID
	 * 
	 * @author Saulo Lima
	 * @date 20/05/2009
	 * @param idCobrancaDocumento
	 * @return CobrancaDocumento
	 * @throws ErroRepositorioException
	 */
	public CobrancaDocumento pesquisarCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		CobrancaDocumento retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{
			consulta = "SELECT cd FROM CobrancaDocumento cd " + //
							" left join fetch cd.cobrancaDocumentoItems cdi " + //
							" left join fetch cd.localidade loc " + //
							" left join fetch cd.imovel i " + //
							" left join fetch cd.cliente cl " + //
							" left join fetch cd.faturamentoGrupoCronogramaMensal ft " + //
							" left join cd.cobrancaAcao ca " + //
							" WHERE cd.id = :idCobrancaDocumento ";

			Query query = session.createQuery(consulta);
			query.setFetchSize(2);
			retorno = (CobrancaDocumento) query.setInteger("idCobrancaDocumento", idCobrancaDocumento).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public CobrancaAcaoAtividadeCronograma pesquisarCobrancaAcaoAtividadeCronogramaId(Integer idCobrancaAcaoAtividadeCronograma)
					throws ErroRepositorioException{

		CobrancaAcaoAtividadeCronograma retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select caac from CobrancaAcaoAtividadeCronograma caac " + "inner join fetch caac.cobrancaAcaoCronograma cac "
							+ "inner join fetch cac.cobrancaAcao ca " + "left join fetch ca.cobrancaAcaoPredecessora coAcPred "
							+ "left join fetch coAcPred.servicoTipo servicoTipo " + "left join fetch ca.ligacaoAguaSituacao "
							+ "left join fetch ca.ligacaoEsgotoSituacao " + "left join fetch ca.documentoTipo "
							+ "left join fetch caac.cobrancaAtividade cat " + "left join fetch cat.processo "
							+ "left join fetch cac.cobrancaGrupoCronogramaMes cgcm " + "left join fetch cgcm.cobrancaGrupo "
							+ "left join fetch ca.servicoTipo " + "left join fetch ca.cobrancaCriterio "
							+ "where caac.id = :idCobrancaAcaoAtividadeCronograma ";

			retorno = (CobrancaAcaoAtividadeCronograma) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeCronograma", idCobrancaAcaoAtividadeCronograma).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * verifica de conta tem debito cobrado (CNTA_ID ocorre na tabela
	 * DEBITO_COBRADO)
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Conta verificarContaDebitoCobrado(Integer idConta) throws ErroRepositorioException{

		Conta retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select distinct conta " + "from DebitoCobrado db " + "where db.conta.id = :idConta ";

			retorno = (Conta) session.createQuery(consulta).setInteger("idConta", idConta).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * obtem o consumo madio do imovel CSHI_NNCONSUMOCONSUMOMEDIO da tabla
	 * CONSUMO_HISTORICO com IMOV_ID = IMOV_ID da tabela CONTA e o maior mes/ano
	 * de consumo(CSHI_AMFATURAMENTO)
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterConsumoMedioImovel(Integer idImovel) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select consumoHistorico.consumoMedio " + "from ConsumoHistorico consumoHistorico "
							+ "where consumoHistorico.imovel.id = :idImovel " + "order by consumoHistorico.referenciaFaturamento desc";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * (DBTP_ID da tabela DEBITO_COBRADO com CNTA_ID = CNTA_ID da conta a ser
	 * parcelada ocorrendo na tabela FISCALIZACAO_SITUACAO_SERVICO_A_COBRAR)
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterIdDebitoTipoDeFiscalizacaoSituacaoServicoACobrar(Integer idConta) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select fiscalizacao.debitoTipo.id " + "from FiscalizacaoSituacaoServicoACobrar fiscalizacao "
							+ "where fiscalizacao.debitoTipo.id in " + "(select debitoCobrado.debitoTipo "
							+ "from DebitoCobrado debitoCobrado " + "where debitoCobrado.conta.id = :idConta)";

			retorno = (Collection) session.createQuery(consulta).setInteger("idConta", idConta).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * DBCB_NNPRESTACAO da tabela DEBITO_COBRADO com CNTA_ID = CNTA_ID da conta
	 * e DBTP_ID da tabela DEBITO_COBRADO com CNTA_ID = CNTA_ID ocorrendo na
	 * tabela FISCALIZACAO_SITUACAO_SERVICO_A_COBRAR
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterNumeroPrestacaoDebitoCobrado(Integer idConta) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select debitoCobrado.numeroPrestacao " + "from DebitoCobrado debitoCobrado  "
							+ "where debitoCobrado.conta.id = :idConta " + "and  " + "(select distinct(fiscalizacao.debitoTipo.id) "
							+ "from FiscalizacaoSituacaoServicoACobrar fiscalizacao " + "where fiscalizacao.debitoTipo.id in "
							+ "(select debitoCobrado.debitoTipo " + "from DebitoCobrado debitoCobrado "
							+ "where debitoCobrado.conta.id = :idConta)) is not null";

			retorno = (Collection) session.createQuery(consulta).setInteger("idConta", idConta).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Metodo criado para pesquisar os parcelamentos q tenham juros e nao tenha
	 * criado o debito dos juros DBTP_ID = 44
	 * 
	 * @author Flavio Cordeiro
	 * @date 23/02/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarParcelamentosSemDebitos() throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		String sql = "select distinct(parc.parc_id) as idParcelamento," + " parc.parc_nnprestacoes as numeroPrestacao,"
						+ " parc.parc_txjuros as taxaJuros," + " imovel.loca_id as idLocalidade," + " quadra.qdra_id as idQuadra,"
						+ " quadra.qdra_nnquadra as numeroQuadra," + " setorComercial.stcm_id as idSetor,"
						+ " setorComercial.stcm_cdsetorcomercial as codigoSetor," + " imovel.imov_nnlote as lote,"
						+ " imovel.imov_nnsublote as subLote," + " parc.parc_vljurosparcelamento as valorJurosParcelamento,"
						+ " imovel.imov_id as idImovel" + " from parcelamento parc"
						+ " left join debito_a_cobrar debitoCobrar on debitoCobrar.parc_id = parc.parc_id"
						+ " inner join imovel imovel on imovel.imov_id = parc.imov_id"
						+ " inner join setor_comercial setorComercial on setorComercial.stcm_id = imovel.stcm_id"
						+ " inner join quadra quadra on imovel.qdra_id = quadra.qdra_id"
						+ " where (parc.parc_tmparcelamento between :inicio and :fim)" + " and parc.parc_vljurosparcelamento <> 0.00"
						+ " and parc.parc_id " + " not in " + " (select parc.parc_id" + " from parcelamento parc"
						+ " left join debito_a_cobrar debitoCobrar on debitoCobrar.parc_id = parc.parc_id"
						+ " where (parc.parc_tmparcelamento between :inicio and :fim)" + " and parc.parc_vljurosparcelamento <> 0.00"
						+ " and debitoCobrar.dbtp_id = 44)";

		try{
			retorno = session.createSQLQuery(sql).addScalar("idParcelamento", Hibernate.INTEGER)
							// 0
							.addScalar("numeroPrestacao", Hibernate.SHORT)
							// 1
							.addScalar("taxaJuros", Hibernate.BIG_DECIMAL)
							// 2
							.addScalar("idLocalidade", Hibernate.INTEGER)
							// 3
							.addScalar("idQuadra", Hibernate.INTEGER)
							// 4
							.addScalar("numeroQuadra", Hibernate.INTEGER)
							// 5
							.addScalar("idSetor", Hibernate.INTEGER)
							// 6
							.addScalar("codigoSetor", Hibernate.INTEGER)
							// 7
							.addScalar("lote", Hibernate.SHORT)
							// 8
							.addScalar("subLote", Hibernate.SHORT)
							// 9
							.addScalar("valorJurosParcelamento", Hibernate.BIG_DECIMAL)
							// 10
							.addScalar("idImovel", Hibernate.INTEGER)
							// 11
							.setDate("inicio", Util.converteStringParaDate("22/02/2007"))
							.setDate("fim", Util.converteStringParaDate("24/02/2007")).list();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa a colecao de Acao de cobranca passando o id da acao precedente
	 * perf.
	 * 
	 * @author Savio Luiz
	 * @created 27/02/2007
	 * @param idCobracaoAcao
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesqsuisarAcaoCobrancaPelaPrecedente(Integer idCobracaoAcao) throws ErroRepositorioException{

		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();
		Session session = HibernateUtil.getSession();

		try{

			consulta.append("select cobAcao.documentoTipo.id,cobAcao.numeroDiasValidade ").append("from CobrancaAcao cobAcao  ")
			// .append("inner join cobAcao.documentoTipo docTipo ")
			// .append("left join cobAcao.cobrancaAcaoPredecessora cobAcaoPrede ")
			// .append("where cobAcaoPrede.id = :idCobracaoAcao ");
							.append("where cobAcao.cobrancaAcaoPredecessora = :idCobracaoAcao ");

			retorno = (Collection) session.createQuery(consulta.toString()).setInteger("idCobracaoAcao", idCobracaoAcao).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Obtem a menor data de pagamento para as guias de pagamento
	 * [UC0302] Gerar Debitos a Cobrar de Acrescimos por Impontualidade
	 * 
	 * @author Pedro Alexandre
	 * @date 19/03/2007
	 * @param idGuiaPagamento
	 * @param idImovel
	 * @param idDebitoTipo
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Date pesquisarMenorDataPagamentoGuiaPagamento(Integer idGuiaPagamento, Integer idImovel, Integer idDebitoTipo)
					throws ErroRepositorioException{

		Date retorno = null;
		Date data1 = null;
		Date data2 = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT MIN(pgmt.dataPagamento) " + "FROM Pagamento pgmt " + "INNER JOIN pgmt.guiaPagamento gpag "
							+ "INNER JOIN gpag.imovel imov " + "WHERE gpag.id = :idGuiaPagamento ";

			data1 = (Date) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).uniqueResult();

			consulta = "SELECT MIN(pgmt.dataPagamento) " + "FROM Pagamento pgmt " + "INNER JOIN pgmt.guiaPagamento gpag "
							+ "INNER JOIN gpag.imovel imov " + "WHERE pgmt.imovel.id= :idImovel and pgmt.debitoTipo.id = :idDebitoTipo";

			data2 = (Date) session.createQuery(consulta).setInteger("idImovel", idImovel).setInteger("idDebitoTipo", idDebitoTipo)
							.uniqueResult();

			if(data2 == null){
				retorno = data1;
			}else{
				if(data1 == null){
					retorno = data2;
				}else{
					if(data1.before(data2)){
						retorno = data1;
					}else{
						retorno = data2;
					}
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * obtem o numero de Consumo Faturado Mes CSHI_NNCONSUMOFATURADOMES da
	 * tabela CONSUMO_HISTORICO com IMOV_ID = IMOV_ID da tabela CONTA e o maior
	 * mes/ano de consumo(CSHI_AMFATURAMENTO)
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 19/03/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterNumeroConsumoFaturadoMes(Integer idImovel) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select consumoHistorico.numeroConsumoFaturadoMes " + "from ConsumoHistorico consumoHistorico "
							+ "where consumoHistorico.imovel.id = :idImovel " + "order by consumoHistorico.referenciaFaturamento desc";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * verificar se a(s) conta(s) parceladas ja estao no historico [UC0252]
	 * Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 09/04/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection verificarContaHistoricoParcelamento(Integer idImovel, Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select distinct(parcItem.id) " + "from " + "ParcelamentoItem parcItem "
							+ "inner join parcItem.contaGeral cntaGeral " + "left join cntaGeral.contaHistorico cntaHist "
							+ "where cntaHist.imovel.id = :idImovel and " + "parcItem.parcelamento.id = :idParcelamento ";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("idParcelamento", idParcelamento).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * verificar se a(s) debito(s) a cobrar parcelados ja estao no historico
	 * [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 09/04/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection verificarDebitoACobrarHistoricoParcelamento(Integer idImovel, Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select distinct(parcItem.id) " + "from " + "ParcelamentoItem parcItem "
							+ "inner join parcItem.debitoACobrarGeral dbacGeral " + "left join dbacGeral.debitoACobrarHistorico dbacHist "
							+ "where dbacHist.imovel.id = :idImovel " + "and parcItem.parcelamento.id = :idParcelamento ";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("idParcelamento", idParcelamento).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * verificar se a(s) credito(s) a realizar utilizados no parcelados ja estao
	 * no historico [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 09/04/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection verificarCreditoARealizarHistoricoParcelamento(Integer idImovel, Integer idParcelamento)
					throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select distinct(parcItem.id) " + "from " + "ParcelamentoItem parcItem "
							+ "inner join parcItem.creditoARealizarGeral cdarGeral "
							+ "left join cdarGeral.creditoARealizarHistorico cdarHist " + "where cdarHist.imovel.id = :idImovel "
							+ "and parcItem.parcelamento.id = :idParcelamento ";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("idParcelamento", idParcelamento).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * retorna referenciaContabil da conta cancelada por retificAcao [UC0252]
	 * Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 13/04/2007
	 * @param idImovel
	 * @param anoMesReferencia
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContaCanceladaRetificacao(Integer idImovel, int anoMesReferencia) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select contaHistorico.anoMesReferenciaContabil " + "from ContaHistorico contaHistorico "
							+ "where contaHistorico.imovel = :idImovel and "
							+ "contaHistorico.anoMesReferenciaContabil = :anoMesReferencia and "
							+ "contaHistorico.debitoCreditoSituacaoAtual.id = :debitoCreditoSituacaoAtual ";

			retorno = session.createQuery(consulta).setInteger("idImovel", idImovel).setInteger("anoMesReferencia", anoMesReferencia)
							.setInteger("debitoCreditoSituacaoAtual", DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * retorna o objeto ParcelamentoFaixaValor com o valor do debito(valorFaixa)
	 * com desconto maior q o da faixa e menor que proxima faixa
	 * [UC0575] - Emitir Parcelamento em Atraso
	 * 
	 * @author Savio Luiz
	 * @date 14/04/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosParcelamentoComMaiorTimestemp(Integer idImovel) throws ErroRepositorioException{

		Object[] retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "SELECT parc.parcelamento, "// 0
							+ "parc.valorConta, "// 1
							+ "parc.valorServicosACobrar, "// 2
							+ "parc.valorAtualizacaoMonetaria, "// 3
							+ "parc.valorJurosMora, "// 4
							+ "parc.valorMulta, "// 5
							+ "parc.valorDescontoAcrescimos, "// 6
							+ "parc.valorDescontoAntiguidade, "// 7
							+ "parc.valorDescontoInatividade, "// 8
							+ "parc.valorEntrada, "// 9
							+ "parc.numeroPrestacoes, "// 10
							+ "parc.valorPrestacao, "// 11
							+ "parc.valorJurosParcelamento "// 12
							+ "FROM Parcelamento parc " + "INNER JOIN parc.imovel imov "
							+ "INNER JOIN parc.parcelamentoSituacao parcSit "
							+ "WHERE imov.id = :idImovel AND parcSit.id = :parcNormal " + "ORDER BY parc.parcelamento desc ";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("parcNormal", ParcelamentoSituacao.NORMAL).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0458] - Imprimir Ordem de Servico
	 * [SB9002] A Obter Dados ašltimos Consumos
	 * 
	 * @author Carlos Chrystian
	 * @date 11/04/2013
	 * @param ordemServico
	 * @return
	 */
	public Collection<Object[]> obterDadosUltimosConsumos(Integer idImovel, Integer referenciaInicial, Integer referenciaFinal)
					throws ErroRepositorioException{

		Collection retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{
			consulta += "SELECT ch.cshi_amfaturamento, "; // 0
			consulta += "ch.cshi_nnconsumofaturadomes, "; // 1
			consulta += "me.mdhi_nnleituraatualfaturamento "; // 2
			consulta += "FROM consumo_historico ch  ";
			consulta += "LEFT JOIN medicao_historico me ";
			consulta += "ON me.lagu_id = ch.imov_id AND me.mdhi_amleitura = ch.cshi_amfaturamento ";
			consulta += "WHERE ch.imov_id = :idImovel ";
			consulta += "AND (ch.cshi_amfaturamento BETWEEN :referenciaInicial AND :referenciaFinal)";

			retorno = (Collection) session.createSQLQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("referenciaInicial", referenciaInicial).setInteger("referenciaFinal", referenciaFinal).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0259] - Processar Pagamento com Codigo de Barras
	 * [SF0003] - Processar Pagamento de Documento de cobranca
	 * 
	 * @author Ana Maria
	 * @created 13/04/2007
	 * @author Saulo Lima
	 * @date 11/12/2008 Inclusao do campo de retorno numeroPestacao da Guia de
	 *       Pagamento
	 * @author Saulo Lima
	 * @date 25/09/2009 Inclusao dos retornos para antecipacao de DebitoACobrar
	 * @param idCliente
	 * @param numeroSequencialDocumento
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection pesquisarCobrancaDocumentoItemCliente(Integer idCliente, int numeroSequencialDocumento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = null;

		try{

			String consulta = "SELECT conta.id, " // 0
							+ "guiaPagamento.id, " // 1
							+ "debitoACobrar.id, " // 2
							+ "cdi.valorItemCobrado, " // 3
							+ "conta.referencia, " // 4
							+ "contaHistorico.anoMesReferenciaConta, " // 5
							+ "guiaPagamentoPrestacao.debitoTipo.id, " // 6
							+ "guiaPagamentoPrestacaoHistorico.debitoTipo.id, " // 7
							+ "debitoACobrar.debitoTipo.id, " // 8
							+ "debitoACobrarHistorico.debitoTipo.id, " // 9
							+ "contaHistorico.id, " // 10
							+ "guiaPagamentoHistorico.id, " // 11
							+ "debitoACobrarHistorico.id, " // 12
							+ "imov.id, " // 13
							+ "imovGuia.id, " // 14
							+ "imovDebito.id, " // 15
							+ "imov.localidade.id, " // 16
							+ "imovGuia.localidade.id, " // 17
							+ "imovDebito.localidade.id, " // 18
							+ "cdi.numeroDaPrestacao, " // 19
							+ "cdi.numeroParcelaAntecipada, " // 20
							+ "cdi.valorJurosParcelaAntecipada, " // 21
							+ "cd.id, " // 22
							+ "conta.localidade.id, " // 23
							+ "contaHistorico.localidade.id," // 24
							+ "debitoACobrar.localidade.id, " // 25
							+ "debitoACobrarHistorico.localidade.id, " // 26
							+ "guiaPagamento.localidade.id, " // 27
							+ "guiaPagamentoHistorico.localidade.id, " // 28
							+ "cd.valorAcrescimos, " // 29
							+ "cdi.valorAcrescimos, " // 30
							+ "cd.emissao " // 31
							+ "FROM CobrancaDocumentoItem cdi "
							+ "LEFT JOIN cdi.cobrancaDocumento cd "
							+ "LEFT JOIN cd.cliente clie "
							+ "LEFT JOIN cd.documentoTipo documentoTipo "
							+ "LEFT JOIN cdi.contaGeral.conta conta "
							+ "LEFT JOIN conta.imovel imov "
							+ "LEFT JOIN cdi.contaGeral.contaHistorico contaHistorico "
							+ "LEFT JOIN cdi.guiaPagamentoGeral.guiaPagamento guiaPagamento "
							+ "LEFT JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
							+ "LEFT JOIN guiaPagamento.imovel imovGuia "
							+ "LEFT JOIN cdi.guiaPagamentoGeral.guiaPagamentoHistorico guiaPagamentoHistorico "
							+ "LEFT JOIN guiaPagamentoHistorico.guiasPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico "
							+ "LEFT JOIN cdi.debitoACobrarGeral.debitoACobrar debitoACobrar "
							+ "LEFT JOIN debitoACobrar.imovel imovDebito "
							+ "LEFT JOIN cdi.debitoACobrarGeral.debitoACobrarHistorico debitoACobrarHistorico "
							+ "WHERE cd.numeroSequenciaDocumento = :numeroSequencialDocumento AND "
							+ "clie.id = :idCliente "
							+ " order by conta.referencia, guiaPagamento.id, debitoACobrar.id, "
							+ " contaHistorico.anoMesReferenciaConta, guiaPagamentoHistorico.id, debitoACobrarHistorico.id ";

			// Alterado por Hebert e Alessandro 22/09/2012
			// Essa ordenacao a necessaria para que no pagamento de um documento de cobranca os
			// Debitos mais antigos sejam pago primeiro.

			retorno = session.createQuery(consulta).setInteger("numeroSequencialDocumento", numeroSequencialDocumento)
							.setInteger("idCliente", idCliente.intValue()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Consulta o id e a situacao da ordem de Servico associada ao documento de
	 * cobranca passado como parametro
	 * 
	 * @author Savio Luiz
	 * @created 13/04/2007
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Object[] pesquisarDadosOrdemServicoDocumentoCobranca(Integer idDocumentoCobranca) throws ErroRepositorioException{

		Object[] retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select os.id,os.situacao from OrdemServico os " + "inner join os.cobrancaDocumento cobrancaDoc "
							+ "where cobrancaDoc.id = :idDocumentoCobranca ";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idDocumentoCobranca", idDocumentoCobranca).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC0394] - Gerar Debitos a Cobrar de DoAcoes
	 * 
	 * @author Savio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            , Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIdsParcelamentosItemDebitoACobrar(Collection idsDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select parcelamentoItem.id" + " from ParcelamentoItem parcelamentoItem "
							+ " where parcelamentoItem.debitoACobrarGeral.id in (:idsDebitoACobrar)";

			retorno = session.createQuery(consulta).setParameterList("idsDebitoACobrar", idsDebitoACobrar).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0394] - Gerar Debitos a Cobrar de DoAcoes
	 * 
	 * @author Savio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            , Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIdsCobrancaDocumentoItemDebitoACobrar(Collection idsDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaDocumentoItem.id" + " from CobrancaDocumentoItem cobrancaDocumentoItem "
							+ " where cobrancaDocumentoItem.debitoACobrarGeral.id in (:idsDebitoACobrar)";

			retorno = session.createQuery(consulta).setParameterList("idsDebitoACobrar", idsDebitoACobrar).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0394] - Gerar Debitos a Cobrar de DoAcoes
	 * 
	 * @author Savio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            , Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void deletarCobrancaDocumentoItemDebitoACobrar(Collection idsDocumentoItemDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		try{
			String consulta = "delete CobrancaDocumentoItem cobrancaDocumentoItem "
							+ "where cobrancaDocumentoItem.id in (:idsDocumentoItemDebitoACobrar) ";

			session.createQuery(consulta).setParameterList("idsDocumentoItemDebitoACobrar", idsDocumentoItemDebitoACobrar).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0394] - Gerar Debitos a Cobrar de DoAcoes
	 * 
	 * @author Savio Luiz
	 * @date 09/05/2007
	 * @param colecaoRotas
	 *            , Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void atualizarParcelamentosItemDebitoACobrar(Collection idsParcelamentosItemDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		try{
			String atualizarImovel = "update gcom.cobranca.parcelamento.ParcelamentoItem "
							+ "set dbac_id = null where pcit_id in (:idsParcelamentosItemDebitoACobrar)";

			session.createQuery(atualizarImovel).setParameterList("idsParcelamentosItemDebitoACobrar", idsParcelamentosItemDebitoACobrar)
							.executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Pesquisa os dados de cobranca documento agrupado para pegar a quantidade
	 * e o valor dos documentos
	 * 
	 * @author Savio Luiz
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosCobrancaDocumentoAgrupadoPorDataPrevista(int idCobrancaAtividadeAcaoCronograma)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select new gcom.cobranca.bean.DadosCobrancaDocumentoHelper(fiscSituacao.id,"
							+ "cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite,"
							+ "cobAcaoSit.id,cobDebSit.id,"
							+ "categ.id,esfPoder.id,cobCrit.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo,"
							+ "imovPerfil.id,ligAguaSit.id,ligEsgSit.id,emp.id,cast(count(cobrancaDocumento.id) as int),sum(cobrancaDocumento.valorDocumento),unidadeNegocio.id) "
							+ "from CobrancaDocumento cobrancaDocumento "
							+ "left join cobrancaDocumento.fiscalizacaoSituacao fiscSituacao "
							+ "left join cobrancaDocumento.esferaPoder esfPoder "
							+ "left join cobrancaDocumento.cobrancaAcaoSituacao cobAcaoSit "
							+ "left join cobrancaDocumento.cobrancaDebitoSituacao cobDebSit "
							+ "left join cobrancaDocumento.categoria categ "
							+ "left join cobrancaDocumento.cobrancaAcaoAtividadeCronograma cobAcaoAtivCron "
							+ "left join cobAcaoAtivCron.cobrancaAcaoCronograma cobAcaoCronog "
							+ "left join cobAcaoCronog.cobrancaAcao cobAcao "
							+ "left join cobAcaoCronog.cobrancaGrupoCronogramaMes cobGrupCronogramaMes "
							+ "left join cobGrupCronogramaMes.cobrancaGrupo cobGrupo "
							+ "left join cobrancaDocumento.cobrancaCriterio cobCrit " + "left join cobrancaDocumento.imovel imov "
							+ "left join imov.localidade loc " + "left join loc.unidadeNegocio unidadeNegocio "
							+ "left join loc.gerenciaRegional gerenReg " + "left join imov.setorComercial setComercial "
							+ "left join imov.quadra quad " + "left join quad.rota rot " + "left join imov.imovelPerfil imovPerfil "
							+ "left join imov.ligacaoEsgotoSituacao ligEsgSit " + "left join imov.ligacaoAguaSituacao ligAguaSit "
							+ "left join cobrancaDocumento.empresa emp " + "where cobAcaoAtivCron.id = :idCobrancaAtividadeAcaoCronograma "
							+ "group by fiscSituacao.id,cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite,"
							+ "cobAcaoSit.id,cobDebSit.id,categ.id,cobGrupCronogramaMes.anoMesReferencia,cobAcaoCronog.id,"
							+ "cobAcaoAtivCron.dataPrevista,cobCrit.id,cobGrupo.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo,imovPerfil.id,ligAguaSit.id,ligEsgSit.id,esfPoder.id,"
							+ "cobAcao.id,emp.id,unidadeNegocio.id " + "order by fiscSituacao.id,"
							+ "cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite," + "cobAcaoSit.id,cobDebSit.id,"
							+ "categ.id,esfPoder.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo," + "imovPerfil.id,ligAguaSit.id,ligEsgSit.id ";

			retorno = session.createQuery(consulta).setInteger("idCobrancaAtividadeAcaoCronograma", idCobrancaAtividadeAcaoCronograma)
							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Pesquisa os dados de cobranca documento agrupado para pegar a quantidade
	 * e o valor dos documentos
	 * 
	 * @author Savio Luiz
	 * @date 17/10/2006
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando(int idCobrancaAtividadeAcaoCronograma)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select new gcom.cobranca.bean.DadosCobrancaDocumentoHelper(fiscSituacao.id,"
							+ "cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite,"
							+ "cobAcaoSit.id,cobDebSit.id,"
							+ "categ.id,esfPoder.id,cobCrit.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo,"
							+ "imovPerfil.id,ligAguaSit.id,ligEsgSit.id,emp.id,count(cobrancaDocumento.id),sum(cobrancaDocumento.valorDocumento), unidadeNegocio.id) "
							+ "from CobrancaDocumento cobrancaDocumento "
							+ "left join cobrancaDocumento.fiscalizacaoSituacao fiscSituacao "
							+ "left join cobrancaDocumento.esferaPoder esfPoder "
							+ "left join cobrancaDocumento.cobrancaAcaoSituacao cobAcaoSit "
							+ "left join cobrancaDocumento.cobrancaDebitoSituacao cobDebSit "
							+ "left join cobrancaDocumento.categoria categ "
							+ "left join cobrancaDocumento.cobrancaAcaoAtividadeCronograma cobAcaoAtivCron "
							+ "left join cobAcaoAtivCron.cobrancaAcaoCronograma cobAcaoCronog "
							+ "left join cobAcaoCronog.cobrancaAcao cobAcao "
							+ "left join cobAcaoCronog.cobrancaGrupoCronogramaMes cobGrupCronogramaMes "
							+ "left join cobGrupCronogramaMes.cobrancaGrupo cobGrupo "
							+ "left join cobrancaDocumento.cobrancaCriterio cobCrit "
							+ "left join cobrancaDocumento.imovel imov "
							+ "left join imov.localidade loc "
							+ "left join loc.unidadeNegocio unidadeNegocio "
							+ "left join loc.gerenciaRegional gerenReg "
							+ "left join imov.setorComercial setComercial "
							+ "left join imov.quadra quad "
							+ "left join quad.rota rot "
							+ "left join imov.imovelPerfil imovPerfil "
							+ "left join imov.ligacaoEsgotoSituacao ligEsgSit "
							+ "left join imov.ligacaoAguaSituacao ligAguaSit "
							+ "left join cobrancaDocumento.empresa emp "
							+ "where cobAcaoAtivCron.id = :idCobrancaAtividadeAcaoCronograma "
							+ "group by fiscSituacao.id,cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite,"
							+ "cobAcaoSit.id,cobDebSit.id,categ.id,cobGrupCronogramaMes.anoMesReferencia,cobAcaoCronog.id,"
							+ "cobAcaoAtivCron.comando,cobCrit.id,cobGrupo.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo,cobAcaoAtivCron.dataPrevista,imovPerfil.id,ligAguaSit.id,ligEsgSit.id,esfPoder.id,"
							+ "cobAcao.id,emp.id,unidadeNegocio.id  " + "order by fiscSituacao.id,"
							+ "cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite," + "cobAcaoSit.id,cobDebSit.id,"
							+ "categ.id,esfPoder.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo," + "imovPerfil.id,ligAguaSit.id,ligEsgSit.id";
			retorno = session.createQuery(consulta).setInteger("idCobrancaAtividadeAcaoCronograma", idCobrancaAtividadeAcaoCronograma)
							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * atualiza o sequencial de documento de cobranca
	 * 
	 * @author Savio Luiz
	 * @date 18/05/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void atualizarSequencialCobrancaDocumentoImpressao(Map<Integer, Integer> mapAtualizaSequencial) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer("update gcom.cobranca.CobrancaDocumento ").append(
						"set cbdo_nnsequencialimpressao =:sequencialCobrancaDocumento ,cbdo_tmultimaalteracao = :dataAtual ").append(
						"where cbdo_id = :idCobrancaDocumento ");
		if(mapAtualizaSequencial != null && !mapAtualizaSequencial.isEmpty()){
			Iterator iteMapAtualizaSequencia = mapAtualizaSequencial.keySet().iterator();

			try{
				while(iteMapAtualizaSequencia.hasNext()){
					Integer idCobrancaDocumento = (Integer) iteMapAtualizaSequencia.next();
					Integer sequencialCobrancaDocumento = mapAtualizaSequencial.get(idCobrancaDocumento);
					session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento)
									.setInteger("sequencialCobrancaDocumento", sequencialCobrancaDocumento)
									.setDate("dataAtual", new Date()).executeUpdate();
				}
			}catch(HibernateException e){
				throw new ErroRepositorioException(e, "Erro no Hibernate");
			}finally{
				HibernateUtil.closeSession(session);

			}
		}

	}

	/**
	 * Pesquisar Relacao de protocolos de documentos de cobranca do cronograma
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaCronograma(Integer idCobrancaAcaoAtividadeCronograma)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select "
							+ " new "
							+ ProtocoloDocumentoCobrancaRelatorioHelper.class.getName()
							+ " ( "
							+ "greg.id, greg.nomeAbreviado, greg.nome, loca.id, loca.descricao, "
							+ "cbdo.codigoSetorComercial, count(*), sum(cbdo.valorDocumento), "
							+ "min(cbdo.sequencialImpressao), max(cbdo.sequencialImpressao),"
							+ "empr.descricao) "
							+ "from CobrancaDocumento cbdo "
							+ "inner join cbdo.cobrancaAcaoAtividadeCronograma caac "
							+ "inner join caac.cobrancaAcaoCronograma cbcr "
							+ "inner join cbcr.cobrancaAcao cbac"
							+ "inner join cbdo.localidade loca "
							+ "inner join loca.gerenciaRegional greg "
							+ "inner join cbcr.cobrancaGrupoCronogramaMes cbcm "
							+ "inner join cbdo.empresa empr "
							+ "where caac.id = :idCobrancaAcaoAtividadeCronograma "
							+ "group by greg.id, greg.nomeAbreviado, greg.nome, loca.id, loca.descricao, cbdo.codigoSetorComercial, empr.descricao "
							+ "order by greg.id, loca.id, cbdo.codigoSetorComercial";

			retorno = session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeCronograma", idCobrancaAcaoAtividadeCronograma.intValue()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Relacao de protocolos de documentos de cobranca do cronograma
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaEventual(Integer idCobrancaAcaoAtividadeComand) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "select "
							+ " new "
							+ ProtocoloDocumentoCobrancaRelatorioHelper.class.getName()
							+ " ( "
							+ "greg.id, greg.nomeAbreviado, greg.nome, loca.id, loca.descricao, "
							+ "cbdo.codigoSetorComercial, count(*), sum(cbdo.valorDocumento), "
							+ "min(cbdo.sequencialImpressao), max(cbdo.sequencialImpressao),"
							+ "empr.descricao) "
							+ "from CobrancaDocumento cbdo "
							+ "inner join cbdo.cobrancaAcaoAtividadeComando cacm "
							+ "inner join cacm.cobrancaAcao cbac"
							+ "inner join cbdo.localidade loca "
							+ "inner join loca.gerenciaRegional greg "
							+ "inner join cbdo.empresa empr "
							+ "where cacm.id = :idCobrancaAcaoAtividadeComand "
							+ "group by greg.id, greg.nomeAbreviado, greg.nome, loca.id, loca.descricao, cbdo.codigoSetorComercial, empr.descricao "
							+ "order by greg.id, loca.id, cbdo.codigoSetorComercial";

			retorno = session.createQuery(consulta).setInteger("idCobrancaAcaoAtividadeComand", idCobrancaAcaoAtividadeComand.intValue())
							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Recupera a Colecao de OS para o encerramento
	 * [UC0478] - Gerar Resumo das Acoes de cobranca do Cronograma
	 * [SB0007] - Determinar situacao da Ordem de Servico
	 * 
	 * @author Savio Luiz
	 * @date 28/05/2007
	 * @throws ControladorException
	 */
	public void atualizarParmsOS(Collection colecaoIdsOS, Integer idMotivoEncerramento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		try{

			String atualizarOS = "";

			atualizarOS = "update gcom.atendimentopublico.ordemservico.OrdemServico " + "set orse_tmultimaalteracao = :ultimaAlteracao, "
							+ "amen_id = :idMotivoEncerramento, " + "orse_cdsituacao = :encerrado, "
							+ "orse_tmencerramento = :dataEncerramento ";

			atualizarOS = atualizarOS + " where orse_id in (:idsOrdemServico)";

			session.createQuery(atualizarOS).setParameterList("idsOrdemServico", colecaoIdsOS).setTimestamp("ultimaAlteracao", new Date())
							.setInteger("idMotivoEncerramento", idMotivoEncerramento)
							.setShort("encerrado", OrdemServico.SITUACAO_ENCERRADO).setTimestamp("dataEncerramento", new Date())
							.executeUpdate();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Recupera os dados de documento item
	 * 
	 * @author Savio Luiz
	 * @created 29/05/2006
	 * @param matriculaImovel
	 *            Matriculado Imovel
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection pesquisarDadosCobrancaDocumentoItem(Integer idDocumentoCobranca) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			// Verifica se ja tem Debito Automatico
			consulta = "SELECT "
							+ " contaG.indicadorHistorico,"// 0
							+ " guiaPagamentoG.indicadorHistorico,"// 1
							+ " debitoACobrarG.indicadorHistorico,"// 2
							+ " cdi.id,"// 3
							+ " cdi.valorItemCobrado,"// 4
							+ " contaG.id,"// 5
							+ " guiaPagamentoG.id,"// 6
							+ " debitoACobrarG.id "// 7
							+ "FROM CobrancaDocumentoItem cdi " + "LEFT JOIN cdi.cobrancaDocumento cd "
							+ "LEFT JOIN cdi.contaGeral contaG " + "LEFT JOIN cdi.guiaPagamentoGeral guiaPagamentoG "
							+ "LEFT JOIN cdi.debitoACobrarGeral  debitoACobrarG " + "WHERE cd.id = :idDocumentoCobranca ";

			retorno = session.createQuery(consulta).setInteger("idDocumentoCobranca", idDocumentoCobranca).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [FS0004] Validar Registro Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @created 05/06/2007
	 * @param idRA
	 * @exception ErroRepositorioException
	 */
	public Object[] pesquisarRegistroAtendimentoTransferenciaDebitoCredito(Integer idRA) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Object[] retorno = null;

		String consulta = null;

		try{

			consulta = "SELECT "
							+ " rgat.id," // 0
							+ " step.id,"// 1
							+ " step.descricao,"// 2
							+ " imov.id," // 3
							+ " rgat.codigoSituacao " // 4
							+ "FROM RegistroAtendimento rgat " + "INNER JOIN rgat.solicitacaoTipoEspecificacao step "
							+ "LEFT JOIN rgat.imovel imov " + "WHERE rgat.id = :idRA AND imov.indicadorExclusao <> :imovelExclusao ";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idRA", idRA).setShort("imovelExclusao", Imovel.IMOVEL_EXCLUIDO)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * [FS0004] Validar Registro Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @created 05/06/2007
	 * @param idSolicitacaoTipoEspecificacao
	 * @exception ErroRepositorioException
	 */
	public EspecificacaoTipoValidacao pesquisarEspecificacaoTipoValidacaoTransferenciaDebitoCredito(Integer idSolicitacaoTipoEspecificacao)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		EspecificacaoTipoValidacao retorno = null;

		String consulta = null;

		try{

			consulta = "SELECT "
							+ " estv " // 0
							+ "FROM EspecificacaoTipoValidacao estv " + "INNER JOIN estv.solicitacaoTipoEspecificacao step "
							+ "WHERE step.id = :idSolicitacaoTipoEspecificacao AND " + " estv.codigoConstante = :transferenciaDebito ";

			retorno = (EspecificacaoTipoValidacao) session.createQuery(consulta)
							.setInteger("idSolicitacaoTipoEspecificacao", idSolicitacaoTipoEspecificacao)
							.setCharacter("transferenciaDebito", EspecificacaoTipoValidacao.TRANSFERENCIA_DEBITO).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Relacao de parcelamento
	 * 
	 * @author Ana Maria
	 * @date 01/06/2007
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection<RelacaoParcelamentoRelatorioHelper> pesquisarRelacaoParcelamento(
					FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento) throws ErroRepositorioException{

		Collection<RelacaoParcelamentoRelatorioHelper> retorno = null;
		Collection<Object[]> retornoConsulta = new ArrayList();

		Session session = HibernateUtil.getSession();
		String consulta;

		Query query = null;

		Map parameters = new HashMap();

		try{
			consulta = " select pst.pcst_dsparcelamentosituacao AS situacao,"// 0
							+ " to_char(p.loca_id,'0000')||' - '||l.loca_nmlocalidade AS localidade,"// 1
							+ " UPPER(c.clie_nmcliente)AS cliente,"// 2
							+ " cf.cfon_cdddd AS ddd,"// 3
							+ " cf.cfon_nnfone AS fone,"// 4
							+ " substr(to_char(p.imov_id,'00000000'),1,8) ||'.'|| substr(to_char(p.imov_id,'00000000'),9,1) AS matricula,"// 5
							+ " p.parc_id AS idParcelamento,"// 6
							+ " p.parc_tmparcelamento AS dataParcelamento,"// 7
							// +
							// " date_part('day', cnta.cnta_dtvencimentoconta)AS vencimento,"//
							// 8
							// + " extract(day from cnta.cnta_dtvencimentoconta)AS vencimento,"// 8
							+ " p.parc_vldebitoatualizado AS valorDebito,"// 8
							+ " p.parc_vlentrada AS entrada,"// 9
							+ " p.parc_vlprestacao AS valorPrestacao,"// 10
							+ " p.parc_nnprestacoes AS numeroPrestacao,"// 11
							+ " p.loca_id as idLocalidade,"// 12
							+ " greg.greg_id as idGerencia, greg.greg_nmabreviado as gerencia,"// 13,14
							+ " unid.unid_dsunidade as unidade"// 15
							+ " from parcelamento p"
							// +
							// " inner join conta cnta ON p.imov_id = cnta.imov_id and p.parc_amreferenciafaturamento = cnta.cnta_amreferenciaconta"
							+ " inner join cliente c ON c.clie_id = p.clie_id"
							+ " left join usuario usur ON usur.usur_id = p.usur_id"
							+ " left join unidade_organizacional unid ON usur.unid_id = unid.unid_id"
							+ " inner join localidade l ON p.loca_id = l.loca_id"
							+ " inner join gerencia_regional greg on l.greg_id = greg.greg_id"
							+ " inner join unidade_negocio uneg on l.uneg_id = uneg.uneg_id"
							+ " inner join parcelamento_situacao pst ON p.pcst_id = pst.pcst_id"
							+ " left join cliente_fone cf ON c.clie_id = cf.clie_id and cf.cfon_icfonepadrao = 1" + " where 1=1";

			if(filtrarRelacaoParcelamento.getParcelamento().getParcelamentoSituacao().getId() != null){
				consulta += " and p.pcst_id = :situacao ";
				parameters.put("situacao", filtrarRelacaoParcelamento.getParcelamento().getParcelamentoSituacao().getId());
			}

			if(filtrarRelacaoParcelamento.getParcelamento().getLocalidade() != null){
				consulta += " and p.loca_id = :idLocalidade ";
				parameters.put("idLocalidade", filtrarRelacaoParcelamento.getParcelamento().getLocalidade().getId());
			}

			if(filtrarRelacaoParcelamento.getParcelamento().getCodigoSetorComercial() != null){
				consulta += " and p.parc_cdsetorcomercial = :codigoSetorComercial ";
				parameters.put("codigoSetorComercial", filtrarRelacaoParcelamento.getParcelamento().getCodigoSetorComercial());
			}

			if(filtrarRelacaoParcelamento.getParcelamento().getNumeroQuadra() != null){
				consulta += " and p.parc_nnquadra = :numeroQuadra ";
				parameters.put("numeroQuadra", filtrarRelacaoParcelamento.getParcelamento().getNumeroQuadra());
			}

			if(filtrarRelacaoParcelamento.getDataParcelamentoInicial() != null
							&& filtrarRelacaoParcelamento.getDataParcelamentoFinal() != null){
				consulta += " and p.parc_tmparcelamento between (:dataParcelamentoInicial) and (:dataParcelamentoFinal) ";
				parameters.put("dataParcelamentoInicial", filtrarRelacaoParcelamento.getDataParcelamentoInicial());
				parameters.put("dataParcelamentoFinal", filtrarRelacaoParcelamento.getDataParcelamentoFinal());
			}

			if(filtrarRelacaoParcelamento.getValorDebitoInicial() != null && filtrarRelacaoParcelamento.getValorDebitoFinal() != null){
				consulta += " and p.parc_vldebitoatualizado between (:valorDebitoInicial) and (:valorDebitoFinal) ";
				parameters.put("valorDebitoInicial", filtrarRelacaoParcelamento.getValorDebitoInicial());
				parameters.put("valorDebitoFinal", filtrarRelacaoParcelamento.getValorDebitoFinal());
			}

			if(filtrarRelacaoParcelamento.getIdGerencia() != null){
				consulta += " and greg.greg_id = :idGerencia ";
				parameters.put("idGerencia", filtrarRelacaoParcelamento.getIdGerencia());
			}

			if(filtrarRelacaoParcelamento.getIdUnidadeNegocio() != null){
				consulta += " and uneg.uneg_id in (:idUnidadeNegocio) ";
				parameters.put("idUnidadeNegocio", filtrarRelacaoParcelamento.getIdUnidadeNegocio());
			}

			if(filtrarRelacaoParcelamento.getIdsMotivoDesfazimento() != null
							&& !filtrarRelacaoParcelamento.getIdsMotivoDesfazimento().isEmpty()){
				consulta += " and p.pmdz_id in (:idsMotivoDesfazimento) ";
				parameters.put("idsMotivoDesfazimento", filtrarRelacaoParcelamento.getIdsMotivoDesfazimento());
			}
			consulta += "group by p.parc_id, p.loca_id, l.loca_nmlocalidade, c.clie_nmcliente, pst.pcst_dsparcelamentosituacao, "
							+ "p.imov_id, p.parc_tmparcelamento, p.parc_vldebitoatualizado, p.parc_vlentrada, "
							+ "p.parc_vlprestacao, p.parc_nnprestacoes, cf.cfon_cdddd, cf.cfon_nnfone, greg.greg_id, greg.greg_nmabreviado, unid.unid_dsunidade "
							+ "order by greg.greg_id, l.loca_nmlocalidade, " + "valorDebito DESC, cliente, numeroPrestacao ASC ";

			// query = session.createQuery(consulta);

			query = session.createSQLQuery(consulta).addScalar("situacao", Hibernate.STRING).addScalar("localidade", Hibernate.STRING)
							.addScalar("cliente", Hibernate.STRING).addScalar("ddd", Hibernate.STRING).addScalar("fone", Hibernate.STRING)
							.addScalar("matricula", Hibernate.STRING).addScalar("idParcelamento", Hibernate.INTEGER)
							.addScalar("dataParcelamento", Hibernate.TIMESTAMP).addScalar("valorDebito", Hibernate.BIG_DECIMAL)
							.addScalar("entrada", Hibernate.BIG_DECIMAL).addScalar("valorPrestacao", Hibernate.BIG_DECIMAL)
							.addScalar("numeroPrestacao", Hibernate.SHORT).addScalar("idLocalidade", Hibernate.INTEGER)
							.addScalar("idGerencia", Hibernate.INTEGER).addScalar("gerencia", Hibernate.STRING)
							.addScalar("unidade", Hibernate.STRING);

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Set){
					Set setList = (HashSet) parameters.get(key);
					query.setParameterList(key, setList);
				}else if(parameters.get(key) instanceof Collection){
					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else{
					query.setParameter(key, parameters.get(key));
				}

			}

			retornoConsulta = query.list();

			if(retornoConsulta.size() > 0){
				retorno = new ArrayList();
				RelacaoParcelamentoRelatorioHelper helper = null;
				for(Iterator iter = retornoConsulta.iterator(); iter.hasNext();){
					Object[] element = (Object[]) iter.next();
					helper = new RelacaoParcelamentoRelatorioHelper();
					helper.setSituacao((String) element[0]);
					helper.setLocalidade((String) element[1]);
					helper.setCliente((String) element[2]);
					if(element[3] != null){
						helper.setDdd((String) element[3]);
						helper.setTelefone((String) element[4]);
					}
					helper.setMatricula((String) element[5]);
					helper.setParcelamento((Integer) element[6]);
					helper.setDataParcelamento((Date) element[7]);
					// helper.setVencimento((String) element[8]);
					helper.setDebitoTotal((BigDecimal) element[8]);
					helper.setValorEntrada((BigDecimal) element[9]);
					helper.setValorParcelamento((BigDecimal) element[10]);
					helper.setNumeroParcelamento((Short) element[11]);
					helper.setIdLocalidade((Integer) element[12]);
					helper.setIdGerencia((Integer) element[13]);
					helper.setGerencia((String) element[14]);
					if(element[15] != null){
						helper.setUnidade((String) element[15]);
					}

					retorno.add(helper);
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0XXXX] Gerar Resumo das Acoes de cobranca Eventuais
	 * 
	 * @author Savio Luiz
	 * @created 15/06/2006
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoAtividadeComandoSemRealizacao(String idsAcoesSemPrazoValidade,
					Date dataUltimoProcessamentoResumo) throws ErroRepositorioException{

		// cria a variavel que vai armazenar a Colecao pesquisada
		Collection<Object[]> retorno = new ArrayList();

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta;
		String condicao1;
		String condicao2;

		try{

			// condicao1 = " cacm.dataEncerramentoRealizada is null and ca.id not in (" +
			// idsAcoesSemPrazoValidade + ") ";

			condicao1 = " ca.id not in (" + idsAcoesSemPrazoValidade + ") and  exists (" + " select cd2.id from CobrancaDocumento cd2 " //
							+ " inner join cd2.cobrancaAcaoAtividadeComando cacm2 " //
							+ " inner join cd2.cobrancaAcao ca2 " //
							+ " where cacm2.id = cacm.id " //
							+ " and (((cd2.emissao + ca2.numeroDiasValidade)  >= :dataCorrente) " //
							+ "  or (((cd2.emissao + ca2.numeroDiasValidade)  < :dataCorrente) " //
							+ "      and (:dataUltimoProcessamentoResumo < (cd2.emissao + ca2.numeroDiasValidade)))))";

			// condicao - CBAC_ID contido em PASI_VLPARAMETRO da tabela PARAMETRO_SISTEMA com
			// PASI_CDPARAMETRO="P_LISTA_ACOES_COBRANCA_SEM_PRAZO_VALIDADE" e [há documento pendente
			// para o comando (existe ocorrência na tabela COBRANCA_DOCUMENTO com CACM_ID=(CACM_ID
			// da tabela COBRANCA_ACAO_ATIVIDADE_COMAND) e CDST_ID=(CDST_ID da tabela
			// COBRANCA_DEBITO_SITUACAO com CDST_DSSITUACAODEBITO="PENDENTE")) ou há documento nao
			// retirado da cobrança administrativa (existe ocorrência na tabela COBRANCA_DOCUMENTO
			// com CBAC_ID=(CBAC_ID da tabela COBRANCA_ACAO com
			// CBAC_CDCONSTANTE='COBRANCA_ADMINISTRATIVA') e CACM_ID=(CACM_ID da tabela
			// IMOVEL_COBRANCA_SITUACAO com CBST_ID=(CBST_ID da tabela COBRANCA_SITUACAO com
			// COBRANCA_ADMINISTRATIVA='COBRANCA_ADMINISTRATIVA' e ISCB_DTRETIRADACOBRANCA com o
			// valor nulo) ) ]

			condicao2 = " ca.id in ("
							+ idsAcoesSemPrazoValidade
							+ ") and ( exists(" //
							+ " select cd1.id from CobrancaDocumento cd1 " //
							+ " inner join cd1.cobrancaAcaoAtividadeComando cacm1 " //
							+ " inner join cd1.cobrancaDebitoSituacao cds1 " //
							+ " where cacm1.id = cacm.id and cds1.id =:idSituacaoDebito)  OR"
							+ " exists( select cd3 from CobrancaDocumento cd3 "
							+ " inner join cd3.cobrancaAcao ca3 "
							+ " where ca3.id =:idCobracaAcaoCobAdministrativa "
							+ " and cd3.cobrancaAcao.id =:idCobracaAcaoCobAdministrativa "
							+ " and cd3.cobrancaAcaoAtividadeComando.id in (select ics.cobrancaAcaoAtividadeComando.id from ImovelCobrancaSituacao ics where ics.cobrancaSituacao.id =:idCobrancaSituacao and ics.dataRetiradaCobranca is null )"
							+ ")" + " )";

			// constroi o hql
			consulta = "select cacm.id,ca.id,servTipo.id,doctipo.id,cacm.dataEncerramentoPrevista,cacm.realizacao "
							+ " from CobrancaAcaoAtividadeComando cacm  inner join cacm.cobrancaAcao ca"
							+ " left join ca.servicoTipo servTipo left join ca.documentoTipo doctipo "
							+ " where cacm.realizacao is not null and ((" + condicao1 + ") or (" + condicao2 + "))";

			// executa o hql
			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta).setDate("dataCorrente", new Date())
							.setDate("dataUltimoProcessamentoResumo", dataUltimoProcessamentoResumo)
							.setInteger("idSituacaoDebito", CobrancaDebitoSituacao.PENDENTE)
							.setInteger("idCobracaAcaoCobAdministrativa", CobrancaAcao.COBRANCA_ADMINISTRATIVA)
							.setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA).list()));

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// retorna a Colecao do resultado da pesquisa
		return retorno;
	}

	/**
	 * Este caso de uso permite gerar os resumos das Acoes de cobranca
	 * eventuais.
	 * [UC0XXXX] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0001] - Processar Documentos cobranca
	 * Retorna os CBDO_ID da tabela COBRANCA_DOCUMENTO com CAAC_ID da tabela
	 * COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Savio Luiz
	 * @date 18/06/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarOrdemServicoEventual(int idCobrancaAtividadeAcaoComando) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		String consulta = null;

		try{

			consulta = "select orse.orse_id as idOS," + " orse.orse_cdsituacao as codigoOS,"
							+ " orse.orse_dtfiscalizacaosituacao as dataFiscalizacao," + " orse.orse_tmencerramento as dataEncerramento,"
							+ " cob.cbdo_id as idCobDocumento," + " cob.cbdo_vldocumento as valorDocumento,"
							+ " cobCrit.cbct_pcvlminimopgparccanc as pec," + " cobCrit.cbct_pcqtminimopgparccanc as qdt,"
							+ " cobCrit.cbct_vllimiteprioridade as valorLimite," + " orse.fzst_id as idFiscalizacaoSit,"
							+ " atMotEnc.amen_icexecucao as indicadorExecucao," + " imov.imov_id as idImovel,"
							+ " imov.loca_id as idLocalidade, " + " atMotEnc.amen_id as idMotivoEncerramento " + "from ordem_servico orse "
							+ "inner join cobranca_documento cob on cob.cbdo_id = orse.cbdo_id "
							+ "    and cob.cacm_id = :idCobrancaAtividadeAcaoComando " + "left join cobranca_criterio cobCrit "
							+ "     on cobCrit.cbct_id = cob.cbct_id " + "left join imovel imov " + "      on imov.imov_id = orse.imov_id "
							+ "left join  atendimento_motivo_encrto atMotEnc " + "      on atMotEnc.amen_id = orse.amen_id ";

			retorno = session.createSQLQuery(consulta).addScalar("idOS", Hibernate.INTEGER).addScalar("codigoOS", Hibernate.SHORT)
							.addScalar("dataFiscalizacao", Hibernate.DATE).addScalar("dataEncerramento", Hibernate.DATE)
							.addScalar("idCobDocumento", Hibernate.INTEGER).addScalar("valorDocumento", Hibernate.BIG_DECIMAL)
							.addScalar("pec", Hibernate.BIG_DECIMAL).addScalar("qdt", Hibernate.BIG_DECIMAL)
							.addScalar("valorLimite", Hibernate.BIG_DECIMAL).addScalar("idFiscalizacaoSit", Hibernate.INTEGER)
							.addScalar("indicadorExecucao", Hibernate.SHORT).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("idLocalidade", Hibernate.INTEGER).addScalar("idMotivoEncerramento", Hibernate.INTEGER)
							.setInteger("idCobrancaAtividadeAcaoComando", idCobrancaAtividadeAcaoComando)

							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0614] Gerar Resumo das Acoes de cobranca Eventuais
	 * O sistema exclui o resumo das Acoes de cobranca eventual referente ao comando de Acao de
	 * cobranca ou o comando de faturamento que esta sendo processado.
	 * 
	 * @author Anderson Italo
	 * @date 12/07/2012
	 */
	public void excluirResumoCobrancaAcaoEventual(Integer idCobrancaAcaoAtividadeComando, Integer idFaturamentoGrupoCronogramaMensal)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			if(idCobrancaAcaoAtividadeComando != null){

				consulta.append("delete from resumo_cobranca_acao_remunerac resumoRemuneracao ");
				consulta.append("where exists (select resumoEventual.rcbe_id from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.cacm_id = :idCobrancaAcaoAtividadeComando ");
				consulta.append("and resumoEventual.rcbe_id = resumoRemuneracao.rcbe_id) ");

				session.createSQLQuery(consulta.toString()).setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando)
								.executeUpdate();
				consulta.delete(0, consulta.length());

				consulta.append("delete from resumo_cobranca_acao_situacao resumoSituacao ");
				consulta.append("where exists (select resumoEventual.rcbe_id from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.cacm_id = :idCobrancaAcaoAtividadeComando ");
				consulta.append("and resumoEventual.rcbe_id = resumoSituacao.rcbe_id) ");

				session.createSQLQuery(consulta.toString()).setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando)
								.executeUpdate();
				consulta.delete(0, consulta.length());

				consulta.append("delete from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.cacm_id = :idCobrancaAcaoAtividadeComando ");

				session.createSQLQuery(consulta.toString()).setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando)
								.executeUpdate();
			}else{

				consulta.append("delete from resumo_cobranca_acao_remunerac resumoRemuneracao ");
				consulta.append("where exists (select resumoEventual.rcbe_id from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.ftcm_id = :idFaturamentoGrupoCronogramaMensal ");
				consulta.append("and resumoEventual.rcbe_id = resumoRemuneracao.rcbe_id) ");

				session.createSQLQuery(consulta.toString())
								.setInteger("idFaturamentoGrupoCronogramaMensal", idFaturamentoGrupoCronogramaMensal).executeUpdate();
				consulta.delete(0, consulta.length());

				consulta.append("delete from resumo_cobranca_acao_situacao resumoSituacao ");
				consulta.append("where exists (select resumoEventual.rcbe_id from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.ftcm_id = :idFaturamentoGrupoCronogramaMensal ");
				consulta.append("and resumoEventual.rcbe_id = resumoSituacao.rcbe_id) ");

				session.createSQLQuery(consulta.toString())
								.setInteger("idFaturamentoGrupoCronogramaMensal", idFaturamentoGrupoCronogramaMensal).executeUpdate();
				consulta.delete(0, consulta.length());

				consulta.append("delete from resumo_cobranca_acao_eventual resumoEventual ");
				consulta.append("where resumoEventual.ftcm_id = :idFaturamentoGrupoCronogramaMensal ");

				session.createSQLQuery(consulta.toString())
								.setInteger("idFaturamentoGrupoCronogramaMensal", idFaturamentoGrupoCronogramaMensal).executeUpdate();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

	}

	/**
	 * [UC0478] Gerar Resumo das Acoes de cobranca do Cronograma
	 * Pesquisa os dados de cobranca documento para gerAcao dos dados da tabela de
	 * RESUMO_COBRANCA_ACAO_EVENTUAL
	 * 
	 * @author Savio Luiz
	 * @date 19/10/2006
	 */
	public Collection pesquisarDadosCobrancaDocumentoGeracaoResumoEventual(Integer idCobrancaAtividadeAcaoComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{
			consulta = "select new gcom.cobranca.bean.DadosCobrancaDocumentoHelper(fiscSituacao.id,"
							+ "cobrancaDocumento.indicadorAntesApos,cobrancaDocumento.indicadorLimite,cobAcaoSit.id,cobDebSit.id,"
							+ "categ.id,esfPoder.id,cobCrit.id,cobGrupo.id,gerenReg.id,loc.id,setComercial.id,rot.id,"
							+ "quad.id,quad.numeroQuadra,setComercial.codigo,"
							+ "imovPerfil.id,ligAguaSit.id,ligEsgSit.id,emp.id,cobrancaDocumento.id,"
							+ "cobrancaDocumento.valorDocumento,une.id,motivoNaoEntregaDocumento.id, imov.id, faturamentoGrupoCronMes.id, 'resumoEventual') "
							+ "from CobrancaDocumento cobrancaDocumento "
							+ "left join cobrancaDocumento.fiscalizacaoSituacao fiscSituacao "
							+ "left join cobrancaDocumento.esferaPoder esfPoder "
							+ "left join cobrancaDocumento.cobrancaAcaoSituacao cobAcaoSit "
							+ "left join cobrancaDocumento.cobrancaDebitoSituacao cobDebSit "
							+ "left join cobrancaDocumento.categoria categ " + "left join cobrancaDocumento.cobrancaCriterio cobCrit "
							+ "left join cobrancaDocumento.imovel imov left join imov.localidade loc "
							+ "left join loc.unidadeNegocio une left join loc.gerenciaRegional gerenReg "
							+ "left join imov.setorComercial setComercial left join imov.quadra quad left join imov.rota rot "
							+ "left join rot.cobrancaGrupo cobGrupo left join imov.imovelPerfil imovPerfil "
							+ "left join imov.ligacaoEsgotoSituacao ligEsgSit left join imov.ligacaoAguaSituacao ligAguaSit "
							+ "left join cobrancaDocumento.empresa emp "
							+ "left join cobrancaDocumento.motivoNaoEntregaDocumento motivoNaoEntregaDocumento "
							+ "left join cobrancaDocumento.faturamentoGrupoCronogramaMensal faturamentoGrupoCronMes "
							+ "where cobrancaDocumento.cobrancaAcaoAtividadeComando.id = :idComando ";

			retorno = session.createQuery(consulta).setInteger("idComando", idCobrancaAtividadeAcaoComando).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Este caso de uso permite gerar os resumos das Acoes de cobranca
	 * eventuais.
	 * [UC0XXXX] Gerar Resumo das Acoes de cobranca Eventuais
	 * 
	 * @author Savio Luiz
	 * @date 19/06/2007
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public void atualizarCobrancaAcaoAtividadeComando(int idCobrancaAtividadeAcaoComando) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizar;

		try{
			atualizar = "update gcom.cobranca.CobrancaAcaoAtividadeComando "
							+ " set cacm_dtencerramentorealizada = :dataRealizacao,cacm_tmultimaalteracao = :dataAtual "
							+ " where cacm_id = :idCobrancaAtividadeAcaoComando";

			session.createQuery(atualizar).setInteger("idCobrancaAtividadeAcaoComando", idCobrancaAtividadeAcaoComando)
							.setDate("dataRealizacao", new Date()).setTimestamp("dataAtual", new Date()).executeUpdate();

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
			// } catch (HibernateException e) {
			// levanta a execucao para a proxima camada
			// throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Gerar Curva ABC de Debitos
	 * [UC0621] Gerar Curva ABC de Debitos
	 * 
	 * @author Ivan Sergio
	 * @date 01/08/2007
	 */
	public Collection gerarCurvaAbcDebitos(String classificacao, String indicadorImovelMedicaoIndividualizada,
					String indicadorImovelParalizacaoFaturamentoCobranca, String idGerenciaRegional, String idUnidadeNegocio,
					String idLocalidadeInicial, String idLocalidadeFinal, String idSetorComercialInicial, String idSetorComercialFinal,
					String[] situacaoLigacaoAgua, String[] situacaoLigacaoEsgoto, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria) throws ErroRepositorioException{

		List retorno = null;
		Session session = HibernateUtil.getSession();
		String hqlAux = "";
		String orderBy = "";
		boolean finaliza = false;

		try{
			String hql = "select distinct" + "	imovel.id, " + "	ligacaoAguaSituacao.id, " + "	ligacaoAgua.dataCorte, "
							+ "	ligacaoAgua.dataSupressao, " + "	gerenciaRegional.id, " + "	gerenciaRegional.nomeAbreviado, "
							+ "	gerenciaRegional.nome, " + "	localidade.id, " + "	localidade.descricao, " + "	setorComercial.id, "
							+ "	setorComercial.codigo, " + "	setorComercial.descricao, " + "	categoria.descricao, "
							+ "	subcategoria.descricao, " + "	unidadeNegocio.id, " + "	unidadeNegocio.nome " +

							"from " + "	ImovelSubcategoria imovelSubcategoria " + "	inner join imovelSubcategoria.comp_id.imovel imovel "
							+ "	left  join imovelSubcategoria.comp_id.subcategoria subcategoria "
							+ "	left  join subcategoria.categoria categoria " + " 	inner join imovel.localidade localidade "
							+ " 	inner join localidade.gerenciaRegional gerenciaRegional "
							+ "	inner join imovel.setorComercial setorComercial " + " 	left join localidade.unidadeNegocio unidadeNegocio "
							+ "	left  join imovel.ligacaoAguaSituacao ligacaoAguaSituacao "
							+ " 	left  join imovel.ligacaoAgua ligacaoAgua "
							+ " 	left  join imovel.ligacaoEsgotoSituacao ligacaoEsgotoSituacao "
							+ " 	left  join imovel.ligacaoEsgoto ligacaoEsgoto "
							+ "	left  join ligacaoAgua.hidrometroInstalacaoHistorico hidrometroInstalacaoHistorico "
							+ " 	left  join imovel.hidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoImovel "
							+ " 	left  join imovel.imovelPerfil imovelPerfil " + "   Where ";

			// Aplica as Condicoes da consulta
			// **************************************

			// Classificacao
			if(classificacao.trim().equalsIgnoreCase("ESTADO")){
				orderBy = "";
			}else if(classificacao.trim().equalsIgnoreCase("REGIONAL")){
				orderBy = " Order By gerenciaRegional.id ";
			}else if(classificacao.trim().equalsIgnoreCase("UNIDADE")){
				orderBy = " Order By unidadeNegocio.id ";
			}else if(classificacao.trim().equalsIgnoreCase("LOCAL")){
				orderBy = " Order By localidade.id ";
			}else if(classificacao.trim().equalsIgnoreCase("SETORCOMERCIAL")){
				orderBy = " Order By setorComercial.id ";
			}

			// gerenciaRegional
			if(!Util.isVazioOuBranco(idGerenciaRegional)){
				if(!idGerenciaRegional.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "gerenciaRegional.id = " + idGerenciaRegional + " and ";
					finaliza = true;
				}
			}

			// Unidade de negocio
			if(!Util.isVazioOuBranco(idUnidadeNegocio)){
				if(!idUnidadeNegocio.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "unidadeNegocio.id = " + idUnidadeNegocio + " and ";
					finaliza = true;
				}
			}

			// Localidade
			if((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
							&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){

				hql += "localidade.id >= " + idLocalidadeInicial + " and " + "localidade.id <= " + idLocalidadeFinal + " and ";
				finaliza = true;
			}

			// Setor Comercial Inicial e Final
			if((idSetorComercialInicial != null && !idSetorComercialInicial.equals(""))
							&& (idSetorComercialFinal != null && !idSetorComercialFinal.equals(""))){

				hql += "setorComercial.id >= " + idSetorComercialInicial + " and " + "setorComercial.id <= " + idSetorComercialFinal
								+ " and ";
				finaliza = true;
			}

			// Imoveis com Medicao Individualizada
			if(indicadorImovelMedicaoIndividualizada.equals("1")){
				hql += "imovel.imovelCondominio is not null and ";
				finaliza = true;
			}

			// Imoveis com Paralizacao de Faturamento/Cobranca
			if(indicadorImovelParalizacaoFaturamentoCobranca.equals("1")){
				hql += "( (imovel.faturamentoSituacaoTipo.id in (1, 4, 5)) or ";
				hql += "(imovel.cobrancaSituacao.id in (5, 7, 8, 9)) ) and ";
				finaliza = true;
			}

			// Situacao da Ligacao de Agua
			if((situacaoLigacaoAgua != null) && (situacaoLigacaoAgua.length > 0)){
				if(situacaoLigacaoAgua.length == 1
								&& !situacaoLigacaoAgua[0].trim().equalsIgnoreCase(
												Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "ligacaoAguaSituacao.id = " + situacaoLigacaoAgua[0] + " and ";
					finaliza = true;
				}else{
					for(int i = 0; i < situacaoLigacaoAgua.length; i++){
						if(!situacaoLigacaoAgua[i].trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

							hqlAux += situacaoLigacaoAgua[i].toString() + ",";
						}
					}

					if(!hqlAux.equals("")){
						hql += "ligacaoAguaSituacao.id in (" + hqlAux;
						hqlAux = "";

						// Retira a ultima virgula e finaliza a condicao
						hql = hql.substring(0, hql.length() - 1) + ") and ";
						finaliza = true;
					}
				}
			}

			// Situacao da Ligacao de Esgoto
			if((situacaoLigacaoEsgoto != null) && (situacaoLigacaoEsgoto.length > 0)){
				if(situacaoLigacaoEsgoto.length == 1
								&& !situacaoLigacaoEsgoto[0].trim().equalsIgnoreCase(
												Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "ligacaoEsgotoSituacao.id = " + situacaoLigacaoEsgoto[0] + " and ";
					finaliza = true;
				}else{
					for(int i = 0; i < situacaoLigacaoEsgoto.length; i++){
						if(!situacaoLigacaoEsgoto[i].trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

							hqlAux += situacaoLigacaoEsgoto[i].toString() + ",";
						}
					}

					if(!hqlAux.equals("")){
						hql += "ligacaoEsgotoSituacao.id in (" + hqlAux;
						hqlAux = "";

						// Retira a ultima virgula e finaliza a condicao
						hql = hql.substring(0, hql.length() - 1) + ") and ";
						finaliza = true;
					}
				}
			}

			// Intervalo de Consumo Minimo Fixado de Esgoto
			if((intervaloConsumoMinimoFixadoEsgotoInicial != null) && (!intervaloConsumoMinimoFixadoEsgotoInicial.equals(""))
							&& (intervaloConsumoMinimoFixadoEsgotoFinal != null) && (!intervaloConsumoMinimoFixadoEsgotoFinal.equals(""))){

				hql += "ligacaoEsgoto.consumoMinimo >= " + intervaloConsumoMinimoFixadoEsgotoInicial + " and ";
				hql += "ligacaoEsgoto.consumoMinimo <= " + intervaloConsumoMinimoFixadoEsgotoFinal + " and ";
				finaliza = true;
			}

			// indicador Medicao
			if(indicadorMedicao != null && indicadorMedicao.equals("comMedicao")){
				// tipo medicao
				// [SF0001 - Selecionar os Imoveis por Tipo de Medicao]
				if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.LIGACAO_AGUA.toString())){
					hql += "hidrometroInstalacaoHistorico.id is not null and ";
					finaliza = true;
				}else if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.POCO.toString())){
					hql += "hidrometroInstalacaoHistoricoImovel.id is not null and ";
					finaliza = true;
				}else{
					hql += "(hidrometroInstalacaoHistorico.id is not null or ";
					hql += "hidrometroInstalacaoHistoricoImovel.id is not null) and ";
					finaliza = true;
				}
			}else if(indicadorMedicao != null && indicadorMedicao.equals("semMedicao")){
				hql += "(hidrometroInstalacaoHistorico.id is null and ";
				hql += "hidrometroInstalacaoHistoricoImovel.id is null) and ";
				finaliza = true;
			}

			// imovel Perfil
			if(idPerfilImovel != null && !idPerfilImovel.equals("")
							&& !idPerfilImovel.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				hql += "imovelPerfil.id = " + idPerfilImovel + " and ";
				finaliza = true;
			}

			// categoria
			if(categoria == null){
				if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PARTICULAR){
					hql += "( (categoria.id = " + Categoria.RESIDENCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.COMERCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.INDUSTRIAL_INT + ") ) and ";
					finaliza = true;
				}else if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PUBLICO){
					hql += "categoria.id = " + Categoria.PUBLICO_INT + " and ";
					finaliza = true;
				}
			}else if((categoria.length == 1)
							&& (categoria[0].trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){

				if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PARTICULAR){
					hql += "( (categoria.id = " + Categoria.RESIDENCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.COMERCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.INDUSTRIAL_INT + ") ) and ";
					finaliza = true;
				}else if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PUBLICO){
					hql += "categoria.id = " + Categoria.PUBLICO_INT + " and ";
					finaliza = true;
				}
			}else{
				for(int i = 0; i < categoria.length; i++){
					if(!categoria[i].trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

						hqlAux += categoria[i].toString() + ",";
					}
				}

				if(!hqlAux.equals("")){
					hql += "categoria.id in (" + hqlAux;
					hqlAux = "";

					// Retira a ultima virgula e finaliza a condicao
					hql = hql.substring(0, hql.length() - 1) + ") and ";
					finaliza = true;
				}
			}

			// SubCategoria
			if(idSubCategoria != null && !idSubCategoria.equals("")
							&& !idSubCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
				hql += "subcategoria.id = " + idSubCategoria + " and ";
				finaliza = true;
			}else if(idTipoCategoria != null && !idTipoCategoria.equals("")
							&& !idTipoCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				hql += "subcategoria.categoria.id = categoria.id and ";
				hql += "subcategoria.id = imovelSubcategoria.comp_id.subcategoria.id and ";
				finaliza = true;
			}

			// Finaliza a condicao
			if(finaliza){
				hql = hql.substring(0, hql.length() - 5) + orderBy;
			}else{
				hql = hql.substring(0, hql.length() - 9) + orderBy;
			}

			retorno = session.createQuery(hql).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Ana Maria Data: 08/07/2007 Pesquisa os ID dos Imovais pelo Cliente
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @return Colecao de Ids dos Imoveis
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIdsImoveisCliente(String codigoCliente) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "select imov.id " + "from ClienteImovel clieImov " + "inner join clieImov.imovel imov "
							+ "inner join clieImov.cliente clie " + "where clie.id = :codigoCliente";

			retorno = session.createQuery(consulta).setInteger("codigoCliente", Integer.valueOf(codigoCliente).intValue()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * [UC0067] Obter Debito do Imovel ou Cliente Obtem os Debitos dos Imoveis
	 * 
	 * @author Ana Maria
	 * @date 28/06/2006
	 * @param idsImoveis
	 *            Matriculas dos Imoveis
	 * @param contaSituacaoNormal
	 *            situacao Normal de Conta
	 * @param contaSituacaoRetificada
	 *            situacao Retificada de Conta
	 * @param contaSituacaoIncluida
	 *            situacao Incluida de Conta
	 * @param anoMesInicialReferenciaDebito
	 *            Ano Mes Inicial Referencia Debito
	 * @param anoMesFinalReferenciaDebito
	 *            Ano Mes Final Referencia Debito
	 * @param anoMesInicialVecimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @param anoMesFinalVencimentoDebito
	 *            Ano Mes Inicial Vencimento Debito
	 * @return Colecao de Contas do Imovel
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContasImoveis(Collection idsImoveis, String contaSituacaoNormal, String contaSituacaoRetificada,
					String contaSituacaoIncluida, String contaSituacaoParcelada, String anoMesInicialReferenciaDebito,
					String anoMesFinalReferenciaDebito, Date anoMesInicialVecimentoDebito, Date anoMesFinalVencimentoDebito,
					String contaSituacaoPrescrita) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select c.id,")
							// 0
							.append(" c.valorAgua,")
							// 1
							.append(" c.valorEsgoto,")
							// 2
							.append(" c.debitos, ")
							// 3
							.append(" c.valorCreditos, ")
							// 4
							.append(" c.dataRevisao, ")
							// 5
							.append(" c.referencia, ")
							// 6
							.append(" c.dataVencimentoConta, ")
							// 7
							.append(" c.indicadorCobrancaMulta, ")
							// 8
							.append(" debitoCreditoSituacaoAtual.id, ")
							// 9
							.append(" c.digitoVerificadorConta, ")
							// 10
							.append(" contaMotivoRevisao.id, ")
							// 11
							.append(" c.ultimaAlteracao, ")
							// 12
							.append(" imovel.id, ")
							// 13
							.append(" c.consumoAgua, ")
							// 14
							.append(" c.valorImposto, ")
							// 15
							.append(" c.consumoEsgoto,")
							// 16
							.append(" c.creditoConsumo, ")
							// 17
							.append(" debitoCreditoSituacaoAtual.descricaoDebitoCreditoSituacao, ")
							// 18
							.append(" debitoCreditoSituacaoAtual.descricaoAbreviada, ")
							// 19
							.append(" c.indicadorPagamento, ")
							// 20
							.append(" c.indicadorRemuneraCobrancaAdministrativa ")
							// 21
							.append("from Conta c ").append("inner join c.imovel imovel ")
							.append("inner join c.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("left outer join c.contaMotivoRevisao contaMotivoRevisao ").append(" where imovel.id in(:idsImoveis) ")
							.append(" and (debitoCreditoSituacaoAtual.id = :situacaoNormal ")
							.append(" or debitoCreditoSituacaoAtual.id = :situacaoRetificada ")
							.append(" or debitoCreditoSituacaoAtual.id = :situacaoIncluida ")
							.append(" or debitoCreditoSituacaoAtual.id = :situacaoParcelada ")
							.append(" or debitoCreditoSituacaoAtual.id = :situacaoPrescrita)")
							.append(" and (c.referencia >= :inicialReferencia ").append(" and c.referencia <= :finalReferencia) ")
							.append(" and (c.dataVencimentoConta >=  :inicialVencimento ")
							.append(" and c.dataVencimentoConta <= :finalVencimento) order by imovel.id, c.referencia");

			Collection colecaoIdImoveisAuxiliar = new ArrayList();

			for(int i = 0; i < idsImoveis.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdImoveisAuxiliar.add(idsImoveis.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsImoveis.size() - 1))){

					if(retorno != null){
						Query query = session.createQuery(consulta.toString());
						query.setParameterList("idsImoveis", colecaoIdImoveisAuxiliar)
										.setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
										.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
										.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
										.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
										.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
										.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
										.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito))
										.setDate("inicialVencimento", anoMesInicialVecimentoDebito);
						query.setDate("finalVencimento", anoMesFinalVencimentoDebito);
						retorno.addAll(query.list());
					}else{
						Query query = session.createQuery(consulta.toString());
						query.setParameterList("idsImoveis", colecaoIdImoveisAuxiliar)
										.setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
										.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
										.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
										.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
										.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
										.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
										.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito))
										.setDate("inicialVencimento", anoMesInicialVecimentoDebito);
						query.setDate("finalVencimento", anoMesFinalVencimentoDebito);
						retorno = query.list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdImoveisAuxiliar.clear();
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Ana Maria
	 * @date 08/08/2007
	 * @author eduardo henrique
	 * @date 29/07/2008 Alteracoes na consulta devido a  mudancas na
	 *       GuiaPagamento (v0.03)
	 * @author Virginia Melo
	 * @date 07/04/2009 Adicionado valor da prestacao.
	 * @author Saulo Lima
	 * @date 25/06/2009 Alteracao para retornar Colecao de Prestacoes. Mudanca
	 *       na assinatura.
	 * @param idsImoveis
	 *            Matriculas dos Imoveis
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Colecao de Prestacoes das Guias de Pagamentos
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiasPagamentoIdsImoveis(Collection idsImoveis, Integer situacaoNormal, Integer situacaoIncluida,
					Integer situacaoRetificada, Integer situacaoParcelada, Date dataVencimentoInicial, Date dataVencimentoFinal,
					Integer situacaoPrescrita) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT DISTINCT guia.id, " // 0
							+ "guiaPrestacao.id.numeroPrestacao, " // 1
							+ "guiaPrestacao.dataVencimento, " // 2
							+ "guiaPrestacao.dataEmissao, " // 3
							+ "guiaPrestacao, " // 4
							+ "'', " // 5
							+ "guiaPrestacao.indicadorCobrancaAdministrativa, " // 6
							+ "dcstAtual.id, " // 7
							+ "dcstAtual.descricaoAbreviada, " // 8
							+ "guiaPrestacao.debitoTipo.id, " // 9
							+ "guiaPrestacao.indicadorDividaAtiva, " // 10
							+ "guiaPrestacao.indicadorExecucaoFiscal " // 11
							+ "FROM GuiaPagamentoPrestacao guiaPrestacao "
							+ "INNER JOIN guiaPrestacao.guiaPagamento guia"
							+ "INNER JOIN guia.documentoTipo documentoTipo"
							+ "INNER JOIN guia.imovel imovel "
							+ "INNER JOIN guiaPrestacao.debitoCreditoSituacao dcstAtual "
							+ "INNER JOIN guiaPrestacao.debitoTipo debitoTipo "
							+ "WHERE imovel.id in (:idsImoveis) "
							+ "AND ( dcstAtual.id = :normal "
							+ "OR dcstAtual.id = :incluida "
							+ "OR dcstAtual.id = :retificada "
							+ "OR dcstAtual.id = :prescrita  "
							+ "OR dcstAtual.id = :parcelada ) "
							+ "AND guiaPrestacao.dataVencimento >= :vencimentoInicial "
							+ "AND guiaPrestacao.dataVencimento <= :vencimentoFinal "
							+ "ORDER BY guia.id, guiaPrestacao.id.numeroPrestacao, guiaPrestacao.id.debitoTipoId";

			Collection colecaoIdImoveisAuxiliar = new ArrayList();

			for(int i = 0; i < idsImoveis.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdImoveisAuxiliar.add(idsImoveis.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsImoveis.size() - 1))){

					if(retorno != null){
						retorno.addAll(session.createQuery(consulta).setParameterList("idsImoveis", colecaoIdImoveisAuxiliar)
										.setInteger("normal", situacaoNormal).setInteger("incluida", situacaoIncluida)
										.setInteger("retificada", situacaoRetificada).setInteger("prescrita", situacaoPrescrita)
										.setInteger("parcelada", situacaoParcelada).setDate("vencimentoInicial", dataVencimentoInicial)
										.setDate("vencimentoFinal", dataVencimentoFinal).list());
					}else{
						retorno = session.createQuery(consulta).setParameterList("idsImoveis", colecaoIdImoveisAuxiliar)
										.setInteger("normal", situacaoNormal).setInteger("incluida", situacaoIncluida)
										.setInteger("retificada", situacaoRetificada).setInteger("parcelada", situacaoParcelada)
										.setDate("vencimentoInicial", dataVencimentoInicial)
										.setDate("vencimentoFinal", dataVencimentoFinal).list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdImoveisAuxiliar.clear();
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		// Constroi um comparador para o indice dos objetos contidos na consulta que trazem a
		// coluna
		// referencia
		if(!retorno.isEmpty()){
			final class ReferenciaComparator
							implements Comparator {

				public int compare(Object obj1, Object obj2){

					Integer numeroPrestacao1 = new Integer(((Short) ((Object[]) obj1)[1]).toString());
					Integer numeroPrestacao2 = new Integer(((Short) ((Object[]) obj2)[1]).toString());

					return numeroPrestacao1.compareTo(numeroPrestacao2);
				}
			}

			// Ordena a lista
			Collections.sort((List) retorno, new ReferenciaComparator());
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Ana Maria
	 * @date 08/08/2007
	 * @author eduardo henrique
	 * @date 29/07/2008 Alteracoes na consulta devido a  mudancas na
	 *       GuiaPagamento (v0.03)
	 * @author Virginia Melo
	 * @date 07/04/2009 Adicionado valor da prestacao.
	 * @author Saulo Lima
	 * @date 25/06/2009 Alteracao para retornar Colecao de Prestacoes. Mudanca
	 *       na assinatura.
	 * @param idsImoveis
	 *            Matriculas dos Imoveis
	 * @param situacaoNormal
	 *            situacao Normal
	 * @param dataVencimentoInicial
	 *            Data Vencimento Inicial
	 * @param dataVencimentoFinal
	 *            Data Vecimento Final
	 * @return Colecao de Prestacoes das Guias de Pagamentos
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiasPagamentoIdsImoveisSimplificado(Collection idsImoveis, String situacaoNormal,
					Date dataVencimentoInicial, Date dataVencimentoFinal) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT DISTINCT guia.id, " // 0
							+ "guiaPrestacao.id.numeroPrestacao, " // 1
							+ "guiaPrestacao.dataVencimento, " // 2
							+ "guiaPrestacao.dataEmissao, " // 3
							+ "guiaPrestacao.comp_id, " // 4
							+ "guiaPrestacao.anoMesReferenciaFaturamento, " // 5
							+ "guiaPrestacao.dataVencimento, " // 6
							+ "guiaPrestacao.indicadorCobrancaMulta, " // 7
							+ "guiaPrestacao.valorPrestacao " // 8
							+ "FROM GuiaPagamentoPrestacao guiaPrestacao "
							+ "INNER JOIN guiaPrestacao.guiaPagamento guia "
							+ "INNER JOIN guia.documentoTipo documentoTipo "
							+ "INNER JOIN guia.imovel imovel "
							+ "INNER JOIN guia.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
							+ "INNER JOIN guiaPrestacao.debitoTipo debitoTipo "
							+ "WHERE imovel.id in (:idsImoveis) "
							+ "AND debitoCreditoSituacaoAtual = :normal "
							+ "AND guiaPrestacao.dataVencimento >= :vencimentoInicial "
							+ "AND guiaPrestacao.dataVencimento <= :vencimentoFinal "
							+ "ORDER BY guia.id, guiaPrestacao.id.numeroPrestacao, guiaPrestacao.id.debitoTipoId";

			retorno = session.createQuery(consulta).setParameterList("idsImoveis", idsImoveis)
							.setInteger("normal", Integer.valueOf(situacaoNormal)).setDate("vencimentoInicial", dataVencimentoInicial)
							.setDate("vencimentoFinal", dataVencimentoFinal).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Pesquisa os ID
	 * dos imoveis dos cliente sem ralAcao fim
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIdImoveisClienteSemRelacaoFim(String codigoCliente, Integer relacaoTipo) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select imovel.id ").append("from ClienteImovel ci ").append("inner join ci.imovel imovel ")
							.append("inner join ci.cliente cliente ");

			if(relacaoTipo != null){
				consulta.append("inner join ci.clienteRelacaoTipo clienteRelacaoTipo ");
			}

			consulta.append("where cliente.id = :codigo and ci.dataFimRelacao is null ");

			if(relacaoTipo != null){
				consulta.append("and clienteRelacaoTipo = :relacao ");

				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente))
								.setShort("relacao", relacaoTipo.shortValue()).list();
			}
			if(relacaoTipo == null){
				retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente)).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Pesquisa os ID
	 * dos imoveis dos cliente sem ralAcao fim
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarIdImoveisClienteSuperiorSemRelacaoFim(String codigoCliente) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select imovel.id ").append("from ClienteImovel ci ").append("inner join ci.imovel imovel ")
							.append("inner join ci.cliente cliente ")
							.append("where (cliente.id =:codigo or cliente.cliente.id = :codigo) and ci.dataFimRelacao is null");

			retorno = session.createQuery(consulta.toString()).setInteger("codigo", Integer.valueOf(codigoCliente)).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Pesquisa os ID
	 * dos imoveis dos cliente sem ralAcao fim
	 * 
	 * @param codigoCliente
	 *            Codigo Cliente
	 * @param relacaoTipo
	 *            Relacao Tipo Cliente Imovel
	 * @return Colecao de Debitos A Cobrar do Cliente
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosClienteResumido(String codigoCliente, String tipoRelacao, String anoMesInicial, String anoMesFinal,
					Date dataVencimentoDebitoInicial, Date dataVencimentoDebitoFinal) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" SELECT imov.imov_id as idImovel, ")
							.append(" sum( ")
							.append(" CASE ")
							.append(" WHEN pagtoConta.pgmt_id is null and conta.cnta_id is not null ")
							.append(" THEN conta.cnta_vlagua + conta.cnta_vlesgoto + conta.cnta_vldebitos - conta.cnta_vlcreditos - conta.cnta_vlimpostos ")
							.append(" END ")
							.append(" ) as valorDebito, 'CONTA' as tipoDebito ")
							.append(" FROM imovel imov ")
							.append(" inner join cliente_imovel clieImovUsuario ")
							.append(" on imov.imov_id = clieImovUsuario.imov_id and clieImovUsuario.crtp_id = ")
							.append(ClienteRelacaoTipo.USUARIO.toString())
							.append(" left outer join cliente_imovel clieImovResponsavel ")
							.append(" on imov.imov_id = clieImovResponsavel.imov_id and clieImovResponsavel.crtp_id = ")
							.append(ClienteRelacaoTipo.RESPONSAVEL.toString())
							.append(" left outer join cliente_imovel clieImovProprietario ")
							.append(" on imov.imov_id = clieImovProprietario.imov_id and clieImovProprietario.crtp_id = ")
							.append(ClienteRelacaoTipo.PROPRIETARIO.toString())
							.append(" inner join cliente clieUsuario ")
							.append(" on clieUsuario.clie_id = clieImovUsuario.clie_id ")
							.append(" left outer join cliente clieResponsavel ")
							.append(" on clieResponsavel.clie_id = clieImovResponsavel.clie_id ")
							.append(" left outer join cliente clieProprietario ")
							.append(" on clieProprietario.clie_id = clieImovProprietario.clie_id ")
							.append(" inner join ligacao_agua_situacao ligAguaSit ")
							.append(" on imov.last_id = ligAguaSit.last_id ")
							.append(" inner join ligacao_esgoto_situacao ligEsgSit ")
							.append(" on imov.lest_id = ligEsgSit.lest_id ")
							.append(" left outer join conta conta ")
							.append(" on conta.imov_id = imov.imov_id and (conta.dcst_idatual = ")
							.append(DebitoCreditoSituacao.NORMAL.toString())
							.append(" or conta.dcst_idatual = ")
							.append(DebitoCreditoSituacao.RETIFICADA.toString())
							.append(" or conta.dcst_idatual = ")
							.append(DebitoCreditoSituacao.INCLUIDA.toString())
							.append(" or conta.dcst_idatual = ")
							.append(DebitoCreditoSituacao.PARCELADA.toString())
							.append(" ) ")
							.append(" left outer join pagamento pagtoConta ")
							.append(" on conta.cnta_id = pagtoConta.cnta_id ")
							.append(" where ")
							.append(" (clieProprietario.clie_id = :codigo or clieUsuario.clie_id = :codigo or clieResponsavel.clie_id = :codigo) ")
							.append(" group by idImovel, tipoDebito ")
							.append(" UNION ")
							.append(" SELECT imov.imov_id as idImovel, ")
							.append(" sum(dbac.dbac_vldebito - round(round(dbac.dbac_vldebito/dbac.dbac_nnprestacaodebito, 2)*dbac.dbac_nnprestacaocobradas, 2)) as valorDebito, ")
							.append(" 'DEBITO A COBRAR' as tipoDebito ")
							.append(" from imovel imov ")
							.append(" inner join cliente_imovel clieImovUsuario ")
							.append(" on imov.imov_id = clieImovUsuario.imov_id and clieImovUsuario.crtp_id = ")
							.append(ClienteRelacaoTipo.USUARIO.toString())
							.append(" left outer join cliente_imovel clieImovResponsavel ")
							.append(" on imov.imov_id = clieImovResponsavel.imov_id and clieImovResponsavel.crtp_id = ")
							.append(ClienteRelacaoTipo.RESPONSAVEL.toString())
							.append(" left outer join cliente_imovel clieImovProprietario ")
							.append(" on imov.imov_id = clieImovProprietario.imov_id and clieImovProprietario.crtp_id = ")
							.append(ClienteRelacaoTipo.PROPRIETARIO.toString())
							.append(" inner join cliente clieUsuario ")
							.append(" on clieUsuario.clie_id = clieImovUsuario.clie_id ")
							.append(" left outer join cliente clieResponsavel ")
							.append(" on clieResponsavel.clie_id = clieImovResponsavel.clie_id ")
							.append(" left outer join cliente clieProprietario ")
							.append(" on clieProprietario.clie_id = clieImovProprietario.clie_id ")
							.append(" inner join ligacao_agua_situacao ligAguaSit ")
							.append(" on imov.last_id = ligAguaSit.last_id ")
							.append(" inner join ligacao_esgoto_situacao ligEsgSit ")
							.append(" on imov.lest_id = ligEsgSit.lest_id ")
							.append(" left outer join debito_a_cobrar dbac ")
							.append(" on dbac.imov_id = imov.imov_id ")
							.append(" where ")
							.append(" (clieProprietario.clie_id = :codigo or clieUsuario.clie_id = :codigo or clieResponsavel.clie_id = :codigo) ")
							.append(" group by idImovel, tipoDebito ")
							.append(" UNION ")
							.append(" SELECT imov.imov_id as idImovel, ")
							.append(" sum( ")
							.append(" CASE ")
							.append(" WHEN pagtoGuia.pgmt_id is null and gpag.gpag_id is not null ")
							.append(" THEN gpag.gpag_vldebito ")
							.append(" END ")
							.append(" ) as valorDebito, 'GUIA DE PAGAMENTO' as tipoDebito ")
							.append(" from imovel imov ")
							.append(" inner join cliente_imovel clieImovUsuario ")
							.append(" on imov.imov_id = clieImovUsuario.imov_id and clieImovUsuario.crtp_id = ")
							.append(ClienteRelacaoTipo.USUARIO.toString())
							.append(" left outer join cliente_imovel clieImovResponsavel ")
							.append(" on imov.imov_id = clieImovResponsavel.imov_id and clieImovResponsavel.crtp_id = ")
							.append(ClienteRelacaoTipo.RESPONSAVEL.toString())
							.append(" left outer join cliente_imovel clieImovProprietario ")
							.append(" on imov.imov_id = clieImovProprietario.imov_id and clieImovProprietario.crtp_id = ")
							.append(ClienteRelacaoTipo.PROPRIETARIO.toString())
							.append(" inner join cliente clieUsuario ")
							.append(" on clieUsuario.clie_id = clieImovUsuario.clie_id ")
							.append(" left outer join cliente clieResponsavel ")
							.append(" on clieResponsavel.clie_id = clieImovResponsavel.clie_id ")
							.append(" left outer join cliente clieProprietario ")
							.append(" on clieProprietario.clie_id = clieImovProprietario.clie_id ")
							.append(" inner join ligacao_agua_situacao ligAguaSit ")
							.append(" on imov.last_id = ligAguaSit.last_id ")
							.append(" inner join ligacao_esgoto_situacao ligEsgSit ")
							.append(" on imov.lest_id = ligEsgSit.lest_id ")
							.append(" left outer join guia_pagamento gpag ")
							.append(" on gpag.imov_id = imov.imov_id ")
							.append(" left outer join pagamento pagtoGuia ")
							.append(" on gpag.gpag_id = pagtoGuia.gpag_id ")
							.append(" where ")
							.append(" (clieProprietario.clie_id = :codigo or clieUsuario.clie_id = :codigo or clieResponsavel.clie_id = :codigo) ")
							.append(" group by idImovel, tipoDebito ")
							.append(" UNION ")
							.append(" SELECT imov.imov_id as idImovel, ")
							.append(" sum(crar.crar_vlcredito - round(round(crar.crar_vlcredito/crar.crar_nnprestacaocredito, 2)*crar.crar_nnprestacaorealizadas, 2)) as valorDebito, ")
							.append(" 'CRE‰DITO A REALIZAR' as tipoDebito ")
							.append(" from imovel imov ")
							.append(" inner join cliente_imovel clieImovUsuario ")
							.append(" on imov.imov_id = clieImovUsuario.imov_id and clieImovUsuario.crtp_id = ")
							.append(ClienteRelacaoTipo.USUARIO.toString())
							.append(" left outer join cliente_imovel clieImovResponsavel ")
							.append(" on imov.imov_id = clieImovResponsavel.imov_id and clieImovResponsavel.crtp_id = ")
							.append(ClienteRelacaoTipo.RESPONSAVEL.toString())
							.append(" left outer join cliente_imovel clieImovProprietario ")
							.append(" on imov.imov_id = clieImovProprietario.imov_id and clieImovProprietario.crtp_id = ")
							.append(ClienteRelacaoTipo.PROPRIETARIO.toString())
							.append(" inner join cliente clieUsuario ")
							.append(" on clieUsuario.clie_id = clieImovUsuario.clie_id ")
							.append(" left outer join cliente clieResponsavel ")
							.append(" on clieResponsavel.clie_id = clieImovResponsavel.clie_id ")
							.append(" left outer join cliente clieProprietario ")
							.append(" on clieProprietario.clie_id = clieImovProprietario.clie_id ")
							.append(" inner join ligacao_agua_situacao ligAguaSit ")
							.append(" on imov.last_id = ligAguaSit.last_id ")
							.append(" inner join ligacao_esgoto_situacao ligEsgSit ")
							.append(" on imov.lest_id = ligEsgSit.lest_id ")
							.append(" left outer join credito_a_realizar crar ")
							.append(" on crar.imov_id = imov.imov_id ")
							.append(" where ")
							.append(" (clieProprietario.clie_id = :codigo or clieUsuario.clie_id = :codigo or clieResponsavel.clie_id = :codigo) ")
							.append(" group by idImovel, tipoDebito ").append(" order by idImovel, tipoDebito ");

			retorno = session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("valorDebito", Hibernate.BIG_DECIMAL).addScalar("tipoDebito", Hibernate.STRING)
							.setInteger("codigo", Integer.valueOf(codigoCliente))
							.setInteger("anoMesInicial", Integer.valueOf(anoMesInicial))
							.setInteger("anoMesFinal", Integer.valueOf(anoMesFinal))
							.setDate("dataVencimentoDebitoInicial", dataVencimentoDebitoInicial)
							.setDate("dataVencimentoDebitoInicial", dataVencimentoDebitoFinal).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0630] - Solicitar Emissa£o do Extrato de Debitos Author: Vivianne Sousa
	 * Data: 22/08/2007
	 * Obtem os parcelamentos de Debitos efetuados que estejam com situacao
	 * normal
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Parcelamento> pesquisarParcelamentosSituacaoNormal(Integer idImovel) throws ErroRepositorioException{

		Collection<Parcelamento> colecaoParcelamentos = new ArrayList<Parcelamento>();

		Session session = HibernateUtil.getSession();
		String consultaDebitoACobrar;
		String consultaGuiaPagamento;
		try{

			consultaDebitoACobrar = "SELECT distinct parc.id, parc.parcelamento, parc.anoMesReferenciaFaturamento, parc.valorConta, parc.valorServicosACobrar, "
							+ " parc.valorAtualizacaoMonetaria, parc.valorJurosMora, parc.valorMulta, parc.valorDebitoAtualizado, parc.valorDescontoAcrescimos,  "
							+ " parc.valorEntrada, parc.valorJurosParcelamento, parc.numeroPrestacoes, parc.valorPrestacao, parc.valorDescontoAntiguidade,  "
							+ " parc.indicadorDebitoACobrar, parc.valorDescontoInatividade, parc.percentualDescontoAcrescimos, parc.indicadorAcrescimosImpontualdade,  "
							+ " parc.valorGuiaPapagamento, parc.percentualDescontoAntiguidade, parc.percentualDescontoInatividade, parc.codigoSetorComercial,  "
							+ " parc.indicadorContasRevisao, parc.indicadorGuiasPagamento, parc.indicadorCreditoARealizar, parc.taxaJuros, parc.valorDescontoSancao,  "
							+ " parc.parcelamentoTipo.id , parc.parcelamentoSituacao.id, parc.registroAtendimento.id, parc.imovel.id, parc.ligacaoEsgotoSituacao.id,  "
							+ " parc.parcelamentoPerfil.id , parc.imovelPerfil.id, parc.cobrancaForma.id , parc.quadra.id , parc.localidade.id , "
							+ " parc.parcelamentoMotivoDesfazer.id , parc.ligacaoAguaSituacao.id , parc.funcionario.id , parc.indicadorConfirmacaoParcelamento, "
							+ " parc.cliente.id, parc.usuario.id , parc.resolucaoDiretoria.id , parc.cobrancaDocumento.id ,  "
							+ " parc.valorDescontoTarifaSocial, parc.dataEntradaParcelamento,   "
							+ " parc.numeroQuadra, parc.ultimaAlteracao, parc.valorCreditoARealizar, parc.valorParcelamentosACobrar, parc.indicadorRestabelecimento ,  "
							+ " parc.anoMesReferenciaDebitoInicial, parc.anoMesReferenciaDebitoFinal, parc.percentualDescontoJurosMora, parc.percentualDescontoMulta,   "
							+ " parc.percentualDescontoCorrecaoMonetaria, parc.valorAtualizacaoMonetariaSucumbenciaAnterior, parc.valorJurosMoraSucumbenciaAnterior,    "
							+ " parc.valorSucumbenciaAnterior, parc.valorSucumbenciaAtual, parc.valorDiligencias, parc.numeroParcelasSucumbencia "
							+ "FROM DebitoACobrar dbac "
							+ "INNER JOIN dbac.parcelamento parc "
							+ "WHERE parc.imovel.id = :idImovel "
							+ "AND parc.parcelamentoSituacao = :parcelamentoSituacao "
							+ "AND dbac.numeroPrestacaoCobradas < dbac.numeroPrestacaoDebito  "
							+ "AND dbac.debitoCreditoSituacaoAtual = :normal ";

			consultaGuiaPagamento = "SELECT distinct parc.id, parc.parcelamento, parc.anoMesReferenciaFaturamento, parc.valorConta, parc.valorServicosACobrar, "
							+ " parc.valorAtualizacaoMonetaria, parc.valorJurosMora, parc.valorMulta, parc.valorDebitoAtualizado, parc.valorDescontoAcrescimos,  "
							+ " parc.valorEntrada, parc.valorJurosParcelamento, parc.numeroPrestacoes, parc.valorPrestacao, parc.valorDescontoAntiguidade,  "
							+ " parc.indicadorDebitoACobrar, parc.valorDescontoInatividade, parc.percentualDescontoAcrescimos, parc.indicadorAcrescimosImpontualdade,  "
							+ " parc.valorGuiaPapagamento, parc.percentualDescontoAntiguidade, parc.percentualDescontoInatividade, parc.codigoSetorComercial,  "
							+ " parc.indicadorContasRevisao, parc.indicadorGuiasPagamento, parc.indicadorCreditoARealizar, parc.taxaJuros, parc.valorDescontoSancao,  "
							+ " parc.parcelamentoTipo.id , parc.parcelamentoSituacao.id, parc.registroAtendimento.id, parc.imovel.id, parc.ligacaoEsgotoSituacao.id,  "
							+ " parc.parcelamentoPerfil.id , parc.imovelPerfil.id, parc.cobrancaForma.id , parc.quadra.id , parc.localidade.id , "
							+ " parc.parcelamentoMotivoDesfazer.id , parc.ligacaoAguaSituacao.id , parc.funcionario.id , parc.indicadorConfirmacaoParcelamento, "
							+ " parc.cliente.id, parc.usuario.id , parc.resolucaoDiretoria.id , parc.cobrancaDocumento.id ,  "
							+ " parc.valorDescontoTarifaSocial, parc.dataEntradaParcelamento,   "
							+ " parc.numeroQuadra, parc.ultimaAlteracao, parc.valorCreditoARealizar, parc.valorParcelamentosACobrar, parc.indicadorRestabelecimento ,  "
							+ " parc.anoMesReferenciaDebitoInicial, parc.anoMesReferenciaDebitoFinal, parc.percentualDescontoJurosMora, parc.percentualDescontoMulta,   "
							+ " parc.percentualDescontoCorrecaoMonetaria, parc.valorAtualizacaoMonetariaSucumbenciaAnterior, parc.valorJurosMoraSucumbenciaAnterior,    "
							+ " parc.valorSucumbenciaAnterior, parc.valorSucumbenciaAtual, parc.valorDiligencias, parc.numeroParcelasSucumbencia "
							+ "FROM GuiaPagamento gpag "
							+ "INNER JOIN gpag.parcelamento parc "
							+ "WHERE parc.imovel.id = :idImovel "
							+ "AND parc.parcelamentoSituacao = :parcelamentoSituacao "
							+ "AND gpag.debitoCreditoSituacaoAtual = :normal ";

			Collection<Object[]> colecaoParcelamentosPesqDebACob = session.createQuery(consultaDebitoACobrar)
							.setInteger("parcelamentoSituacao", ParcelamentoSituacao.NORMAL)
							.setInteger("normal", DebitoCreditoSituacao.NORMAL).setInteger("idImovel", idImovel).list();

			Collection<Object[]> colecaoParcelamentosPesqGuiaPag = session.createQuery(consultaGuiaPagamento)
							.setInteger("parcelamentoSituacao", ParcelamentoSituacao.NORMAL)
							.setInteger("normal", DebitoCreditoSituacao.NORMAL).setInteger("idImovel", idImovel).list();

			// evita inserir o mesmo parcelamento mais de uma vez
			Collection<Object[]> auxDebACob = new ArrayList<Object[]>(colecaoParcelamentosPesqDebACob);
			L1: for(Object[] guiaPag : colecaoParcelamentosPesqGuiaPag){

				for(Object[] debACob : auxDebACob){

					if(guiaPag[0].equals(debACob[0])){
						continue L1;
					}
				}
				colecaoParcelamentosPesqDebACob.add(guiaPag);
			}

			if(colecaoParcelamentosPesqDebACob != null && !colecaoParcelamentosPesqDebACob.isEmpty()){
				Iterator<Object[]> icolecaoParcelamentos = colecaoParcelamentosPesqDebACob.iterator();

				while(icolecaoParcelamentos.hasNext()){
					Object[] parcelamentosArray = icolecaoParcelamentos.next();

					Parcelamento parcelamento = new Parcelamento();

					parcelamento.setId((Integer) parcelamentosArray[0]);

					if(parcelamentosArray[1] != null){
						DateFormat dataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

						try{
							parcelamento.setParcelamento((Date) dataFormat.parse(parcelamentosArray[1].toString().substring(0, 19)));
						}catch(ParseException e){
							throw new ErroRepositorioException(e, "Erro no Repositorio");
						}
					}

					if(parcelamentosArray[2] != null){
						parcelamento.setAnoMesReferenciaFaturamento(new Integer(parcelamentosArray[2].toString()));
					}

					if(parcelamentosArray[3] != null){
						parcelamento.setValorConta(new BigDecimal(parcelamentosArray[3].toString()));
					}

					if(parcelamentosArray[4] != null){
						parcelamento.setValorServicosACobrar(new BigDecimal(parcelamentosArray[4].toString()));
					}

					if(parcelamentosArray[5] != null){
						parcelamento.setValorAtualizacaoMonetaria(new BigDecimal(parcelamentosArray[5].toString()));
					}

					if(parcelamentosArray[6] != null){
						parcelamento.setValorJurosMora(new BigDecimal(parcelamentosArray[6].toString()));
					}

					if(parcelamentosArray[7] != null){
						parcelamento.setValorMulta(new BigDecimal(parcelamentosArray[7].toString()));
					}

					if(parcelamentosArray[8] != null){
						parcelamento.setValorDebitoAtualizado(new BigDecimal(parcelamentosArray[8].toString()));
					}

					if(parcelamentosArray[9] != null){
						parcelamento.setValorDescontoAcrescimos(new BigDecimal(parcelamentosArray[9].toString()));
					}

					if(parcelamentosArray[10] != null){
						parcelamento.setValorEntrada(new BigDecimal(parcelamentosArray[10].toString()));
					}

					if(parcelamentosArray[11] != null){
						parcelamento.setValorJurosParcelamento(new BigDecimal(parcelamentosArray[11].toString()));
					}

					if(parcelamentosArray[12] != null){
						parcelamento.setNumeroPrestacoes(Short.valueOf(parcelamentosArray[12].toString()));
					}

					if(parcelamentosArray[13] != null){
						parcelamento.setValorPrestacao(new BigDecimal(parcelamentosArray[13].toString()));
					}

					if(parcelamentosArray[14] != null){
						parcelamento.setValorDescontoAntiguidade(new BigDecimal(parcelamentosArray[14].toString()));
					}

					if(parcelamentosArray[15] != null){
						parcelamento.setIndicadorDebitoACobrar(Short.valueOf(parcelamentosArray[15].toString()));
					}

					if(parcelamentosArray[16] != null){
						parcelamento.setValorDescontoInatividade(new BigDecimal(parcelamentosArray[16].toString()));
					}

					if(parcelamentosArray[17] != null){
						parcelamento.setPercentualDescontoAcrescimos(new BigDecimal(parcelamentosArray[17].toString()));
					}

					if(parcelamentosArray[18] != null){
						parcelamento.setIndicadorAcrescimosImpontualdade(Short.valueOf(parcelamentosArray[18].toString()));
					}

					if(parcelamentosArray[19] != null){
						parcelamento.setValorGuiaPapagamento(new BigDecimal(parcelamentosArray[19].toString()));
					}

					if(parcelamentosArray[20] != null){
						parcelamento.setPercentualDescontoAntiguidade(new BigDecimal(parcelamentosArray[20].toString()));
					}

					if(parcelamentosArray[21] != null){
						parcelamento.setPercentualDescontoInatividade(new BigDecimal(parcelamentosArray[21].toString()));
					}

					if(parcelamentosArray[22] != null){
						parcelamento.setCodigoSetorComercial(Integer.valueOf(parcelamentosArray[22].toString()));
					}

					if(parcelamentosArray[23] != null){
						parcelamento.setIndicadorContasRevisao(Short.valueOf(parcelamentosArray[23].toString()));
					}

					if(parcelamentosArray[24] != null){
						parcelamento.setIndicadorGuiasPagamento(Short.valueOf(parcelamentosArray[24].toString()));
					}

					if(parcelamentosArray[25] != null){
						parcelamento.setIndicadorCreditoARealizar(Short.valueOf(parcelamentosArray[25].toString()));
					}

					if(parcelamentosArray[26] != null){
						parcelamento.setTaxaJuros(new BigDecimal(parcelamentosArray[26].toString()));
					}

					if(parcelamentosArray[27] != null){
						parcelamento.setValorDescontoSancao(new BigDecimal(parcelamentosArray[27].toString()));
					}

					if(parcelamentosArray[28] != null){
						ParcelamentoTipo parcelamentoTipo = new ParcelamentoTipo();
						parcelamentoTipo.setId(Integer.valueOf(parcelamentosArray[28].toString()));

						parcelamento.setParcelamentoTipo(parcelamentoTipo);
					}

					if(parcelamentosArray[29] != null){
						ParcelamentoSituacao parcelamentoSituacao = new ParcelamentoSituacao();
						parcelamentoSituacao.setId(Integer.valueOf(parcelamentosArray[29].toString()));

						parcelamento.setParcelamentoSituacao(parcelamentoSituacao);
					}

					if(parcelamentosArray[30] != null){
						RegistroAtendimento registroAtendimento = new RegistroAtendimento();
						registroAtendimento.setId(Integer.valueOf(parcelamentosArray[30].toString()));

						parcelamento.setRegistroAtendimento(registroAtendimento);
					}

					if(parcelamentosArray[31] != null){
						Imovel imovel = new Imovel();
						imovel.setId(Integer.valueOf(parcelamentosArray[31].toString()));

						parcelamento.setImovel(imovel);
					}

					if(parcelamentosArray[32] != null){
						LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						ligacaoEsgotoSituacao.setId(Integer.valueOf(parcelamentosArray[32].toString()));

						parcelamento.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					}

					if(parcelamentosArray[33] != null){
						ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();
						parcelamentoPerfil.setId(Integer.valueOf(parcelamentosArray[33].toString()));

						parcelamento.setParcelamentoPerfil(parcelamentoPerfil);
					}

					if(parcelamentosArray[34] != null){
						ImovelPerfil imovelPerfil = new ImovelPerfil();
						imovelPerfil.setId(Integer.valueOf(parcelamentosArray[34].toString()));

						parcelamento.setImovelPerfil(imovelPerfil);
					}

					if(parcelamentosArray[35] != null){
						CobrancaForma cobrancaForma = new CobrancaForma();
						cobrancaForma.setId(Integer.valueOf(parcelamentosArray[35].toString()));

						parcelamento.setCobrancaForma(cobrancaForma);
					}

					if(parcelamentosArray[36] != null){
						Quadra quadra = new Quadra();
						quadra.setId(Integer.valueOf(parcelamentosArray[36].toString()));

						parcelamento.setQuadra(quadra);
					}

					if(parcelamentosArray[37] != null){
						Localidade localidade = new Localidade();
						localidade.setId(Integer.valueOf(parcelamentosArray[37].toString()));

						parcelamento.setLocalidade(localidade);
					}

					if(parcelamentosArray[38] != null){
						ParcelamentoMotivoDesfazer parcelamentoMotivoDesfazer = new ParcelamentoMotivoDesfazer();
						parcelamentoMotivoDesfazer.setId(Integer.valueOf(parcelamentosArray[38].toString()));

						parcelamento.setParcelamentoMotivoDesfazer(parcelamentoMotivoDesfazer);
					}

					if(parcelamentosArray[39] != null){
						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
						ligacaoAguaSituacao.setId(Integer.valueOf(parcelamentosArray[39].toString()));

						parcelamento.setLigacaoAguaSituacao(ligacaoAguaSituacao);
					}

					if(parcelamentosArray[40] != null){
						Funcionario funcionario = new Funcionario();
						funcionario.setId(Integer.valueOf(parcelamentosArray[40].toString()));

						parcelamento.setFuncionario(funcionario);
					}

					if(parcelamentosArray[41] != null){
						parcelamento.setIndicadorConfirmacaoParcelamento(Short.valueOf(parcelamentosArray[41].toString()));
					}

					if(parcelamentosArray[42] != null){
						Cliente cliente = new Cliente();
						cliente.setId(Integer.valueOf(parcelamentosArray[42].toString()));

						parcelamento.setCliente(cliente);
					}

					if(parcelamentosArray[43] != null){
						Usuario usuario = new Usuario();
						usuario.setId(Integer.valueOf(parcelamentosArray[43].toString()));

						parcelamento.setUsuario(usuario);
					}

					if(parcelamentosArray[44] != null){
						ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
						resolucaoDiretoria.setId(Integer.valueOf(parcelamentosArray[44].toString()));

						parcelamento.setResolucaoDiretoria(resolucaoDiretoria);
					}

					if(parcelamentosArray[45] != null){
						CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
						cobrancaDocumento.setId(Integer.valueOf(parcelamentosArray[45].toString()));

						parcelamento.setCobrancaDocumento(cobrancaDocumento);
					}

					if(parcelamentosArray[46] != null){
						parcelamento.setValorDescontoTarifaSocial(new BigDecimal(parcelamentosArray[46].toString()));
					}

					if(parcelamentosArray[47] != null){
						DateFormat dataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

						try{
							parcelamento.setDataEntradaParcelamento((Date) dataFormat.parse(parcelamentosArray[47].toString().substring(0,
											19)));
						}catch(ParseException e){
							throw new ErroRepositorioException(e, "Erro no Repositorio");
						}
					}

					if(parcelamentosArray[48] != null){
						parcelamento.setNumeroQuadra(Integer.valueOf(parcelamentosArray[48].toString()));
					}

					if(parcelamentosArray[49] != null){
						DateFormat dataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

						try{
							parcelamento.setUltimaAlteracao((Date) dataFormat.parse(parcelamentosArray[49].toString().substring(0, 19)));
						}catch(ParseException e){
							throw new ErroRepositorioException(e, "Erro no Repositorio");
						}
					}

					if(parcelamentosArray[50] != null){
						parcelamento.setValorCreditoARealizar(new BigDecimal(parcelamentosArray[50].toString()));
					}

					if(parcelamentosArray[51] != null){
						parcelamento.setValorParcelamentosACobrar(new BigDecimal(parcelamentosArray[51].toString()));
					}

					if(parcelamentosArray[52] != null){
						parcelamento.setIndicadorRestabelecimento(Short.valueOf(parcelamentosArray[52].toString()));
					}

					if(parcelamentosArray[53] != null){
						parcelamento.setAnoMesReferenciaDebitoInicial(Integer.valueOf(parcelamentosArray[53].toString()));
					}

					if(parcelamentosArray[54] != null){
						parcelamento.setAnoMesReferenciaDebitoFinal(Integer.valueOf(parcelamentosArray[54].toString()));
					}

					if(parcelamentosArray[55] != null){
						parcelamento.setPercentualDescontoJurosMora(new BigDecimal(parcelamentosArray[55].toString()));
					}

					if(parcelamentosArray[56] != null){
						parcelamento.setPercentualDescontoMulta(new BigDecimal(parcelamentosArray[56].toString()));
					}

					if(parcelamentosArray[57] != null){
						parcelamento.setPercentualDescontoCorrecaoMonetaria(new BigDecimal(parcelamentosArray[57].toString()));
					}

					if(parcelamentosArray[58] != null){
						parcelamento.setValorAtualizacaoMonetariaSucumbenciaAnterior(new BigDecimal(parcelamentosArray[58].toString()));
					}

					if(parcelamentosArray[59] != null){
						parcelamento.setValorJurosMoraSucumbenciaAnterior(new BigDecimal(parcelamentosArray[59].toString()));
					}

					if(parcelamentosArray[60] != null){
						parcelamento.setValorSucumbenciaAnterior(new BigDecimal(parcelamentosArray[60].toString()));
					}

					if(parcelamentosArray[61] != null){
						parcelamento.setValorSucumbenciaAtual(new BigDecimal(parcelamentosArray[61].toString()));
					}

					if(parcelamentosArray[62] != null){
						parcelamento.setValorDiligencias(new BigDecimal(parcelamentosArray[62].toString()));
					}

					if(parcelamentosArray[63] != null){
						parcelamento.setNumeroParcelasSucumbencia(Short.valueOf(parcelamentosArray[63].toString()));
					}

					colecaoParcelamentos.add(parcelamento);

				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return colecaoParcelamentos;
	}

	/**
	 * [UC0630] - Solicitar Emissa£o do Extrato de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @date 22/08/2007
	 * @author Saulo Lima
	 * @date 09/09/2009 Alteracao para retornar os juros do parcelamento
	 * @param idParcelamento
	 * @return Colecao de Debitos A Cobrar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitosACobrarImovelParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select dac  ")
							.append("from DebitoACobrar dac ")
							.append("inner join dac.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual ")
							.append("inner join fetch dac.debitoTipo debitoTipo ")
							.append("inner join dac.parcelamento parcelamento ")
							.append("where parcelamento.id = :idParcelamento ")
							.append("and dac.numeroPrestacaoCobradas < dac.numeroPrestacaoDebito ")
							.append("and dac.debitoCreditoSituacaoAtual = :normal ")
							.append("and dac.id not in (select dbac.id from Pagamento pgmt inner join pgmt.debitoACobrar dbac where dbac.id = dac.id)");
			// + "and debitoTipo.id <> :debitoTipo ";

			retorno = session.createQuery(consulta.toString()).setInteger("normal", DebitoCreditoSituacao.NORMAL)
			// .setInteger("debitoTipo", DebitoTipo.JUROS_SOBRE_PARCELAMENTO)
							.setInteger("idParcelamento", idParcelamento).list();

		}catch(HibernateException e){
			// levanta a ea§a£eçao para aa³próxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0630] - Solicitar Emissa£o do Extrato de Debitos Author: Vivianne Sousa
	 * Data: 22/08/2007
	 * 
	 * @param idParcelamento
	 * @return Colecao de Creditos A Realizar
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCreditosARealizarParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "select car,creditoTipo.descricao, creditoTipo.id " + "from CreditoARealizar car "
							+ "inner join car.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
							+ "inner join car.creditoTipo creditoTipo " + "inner join car.parcelamento parcelamento "
							+ "where parcelamento.id = :idParcelamento "
							+ "and (car.numeroPrestacaoRealizada < car.numeroPrestacaoCredito or " + "car.valorResidualMesAnterior > 0) "
							+ " and car.debitoCreditoSituacaoAtual = :normal ";

			retorno = session.createQuery(consulta).setInteger("normal", DebitoCreditoSituacao.NORMAL)
							.setInteger("idParcelamento", idParcelamento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Debitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/09/2007
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer verificarRDUtilizadaPeloImovel(Integer idRD, Integer idImovel) throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "select parc.id " + "from Parcelamento parc " + "left join parc.resolucaoDiretoria rd "
							+ "where parc.imovel.id = :idImovel " + "and rd.id = :idRD "
							+ "and rd.indicadorParcelamentoUnico = :indicadorParcelamentoUnico "
							+ "and parc.parcelamentoSituacao = :parcelamentoSituacao ";

			retorno = (Integer) session.createQuery(consulta).setInteger("idImovel", idImovel).setInteger("idRD", idRD)
							.setShort("indicadorParcelamentoUnico", ConstantesSistema.SIM)
							.setInteger("parcelamentoSituacao", ParcelamentoSituacao.NORMAL).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * (DBTP_ID da tabela DEBITO_COBRADO com CNTA_ID = CNTA_ID da conta a ser
	 * parcelada ocorrendo na tabela FISCALIZACAO_SITUACAO_SERVICO_A_COBRAR)
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar ašnica Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterDebitoTipoDeFiscalizacaoSituacaoServicoACobrar(Integer idConta) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select fiscalizacao.debitoTipo.id " + "from FiscalizacaoSituacaoServicoACobrar fiscalizacao "
							+ "where fiscalizacao.debitoTipo.id in " + "(select debitoCobrado.debitoTipo "
							+ "from DebitoCobrado debitoCobrado " + "where debitoCobrado.conta.id = :idConta)";

			retorno = (Collection) session.createQuery(consulta).setInteger("idConta", idConta).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 01/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoACobrarSancoes(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ErroRepositorioException{

		BigDecimal retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select sum (dbac.dbac_vldebito) as valorDebito" + " from debito_a_cobrar  dbac where dbac.imov_id = :idImovel and"
							+ " (dbac.dbtp_id = :sancoesRegulamentares or " + " dbac.dbtp_id = :multaPorInfracao or "
							+ " dbac.dbtp_id = :instalSubstHidrometro or " + " dbac.dbtp_id = :consumoNaoContabilizado) "
							+ " and dbac.dbac_nnprestacaocobradas < dbac.dbac_nnprestacaodebito " + " and dbac.dcst_idatual = :normal "
							+ " and dbac.dbac_amreferenciadebito >= :anoMesInicialReferenciaDebito "
							+ " and dbac.dbac_amreferenciadebito <= :anoMesFinalReferenciaDebito ";

			retorno = (BigDecimal) session.createSQLQuery(consulta).addScalar("valorDebito", Hibernate.BIG_DECIMAL)
							.setInteger("idImovel", idImovel).setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
							.setInteger("anoMesFinalReferenciaDebito", anoMesFinalReferenciaDebito)
							.setInteger("sancoesRegulamentares", DebitoTipo.SANCOES_REGULAMENTARES)
							.setInteger("multaPorInfracao", DebitoTipo.MULTA_POR_INFRACAO)
							.setInteger("consumoNaoContabilizado", DebitoTipo.CONSUMO_NAO_CONTABILIZADO)
							.setInteger("instalSubstHidrometro", DebitoTipo.INSTAL_SUBST_HIDROMETRO)
							.setInteger("normal", DebitoCreditoSituacao.NORMAL).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 06/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoACobrar(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ErroRepositorioException{

		BigDecimal retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select sum (dbac.dbac_vldebito) as valorDebito" + " from debito_a_cobrar  dbac where dbac.imov_id = :idImovel and"
							+ " (dbac.dbtp_id = :atualizacaoMonetaria or " + " dbac.dbtp_id = :jurosMora or "
							+ " dbac.dbtp_id = :multaImpontualidade or " + " dbac.dbtp_id = :acrescImpontualidade )"
							+ " and dbac.dbac_nnprestacaocobradas < dbac.dbac_nnprestacaodebito " + " and dbac.dcst_idatual = :normal "
							+ " and dbac.dbac_amreferenciadebito >= :anoMesInicialReferenciaDebito "
							+ " and dbac.dbac_amreferenciadebito <= :anoMesFinalReferenciaDebito ";

			retorno = (BigDecimal) session.createSQLQuery(consulta).addScalar("valorDebito", Hibernate.BIG_DECIMAL)
							.setInteger("idImovel", idImovel).setInteger("atualizacaoMonetaria", DebitoTipo.ATUALIZACAO_MONETARIA)
							.setInteger("jurosMora", DebitoTipo.JUROS_MORA)
							.setInteger("multaImpontualidade", DebitoTipo.MULTA_IMPONTUALIDADE)
							.setInteger("acrescImpontualidade", DebitoTipo.ACRESCIMOS_POR_IMPONTUALIDADE)
							.setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
							.setInteger("anoMesFinalReferenciaDebito", anoMesFinalReferenciaDebito)
							.setInteger("normal", DebitoCreditoSituacao.NORMAL).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * Faz parte de [UC0067] Obter Debito do Imovel ou Cliente Obtem os Debitos
	 * total de um cliente
	 */
	public Collection pesquisarDebitosCliente(Collection idsContas, Collection idsImoveis, String contaSituacaoNormal,
					String contaSituacaoRetificada, String contaSituacaoIncluida, String contaSituacaoParcelada,
					String anoMesInicialReferenciaDebito, String anoMesFinalReferenciaDebito, Date anoMesInicialVecimentoDebito,
					Date anoMesFinalVencimentoDebito, String contaSituacaoPrescrita) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Collection retornoContas = new ArrayList();
		Collection retornoImoveis = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		StringBuffer consultaImoveis = new StringBuffer();

		try{

			consulta.append(" (select conta.cnta_id as idConta, conta.cnta_vlagua as valorAgua,")
							.append(" conta.cnta_vlesgoto as valorEsgoto, conta.cnta_vldebitos as debitos,")
							.append(" conta.cnta_vlcreditos as valorCreditos, conta.cnta_dtrevisao as dataRevisao,")
							.append(" conta.cnta_amreferenciaconta as referencia, conta.cnta_dtvencimentoconta as dataVencimentoConta,")
							.append(" conta.cnta_iccobrancamulta as indicadorCobrancaMulta, debitocred.dcst_id as debitoCreditoSituacaoAtual,")
							.append(" conta.cnta_dgverificadorconta as digitoVerificadorConta,contamotiv.cmrv_id as idContaMotivoRevisao,")
							.append(" conta.cnta_tmultimaalteracao as ultimaAlteracao, imovel.imov_id as idImovel,")
							.append(" conta.cnta_nnconsumoagua as consumoAgua, conta.cnta_vlimpostos as valorImposto,")
							.append(" conta.cnta_nnconsumoesgoto as consumoEsgoto, conta.cnta_nnconsumocredito as creditoConsumo,")
							.append(" debitocred.dcst_dsdebitocreditosituacao as descricaoDebitoCreditoSituacao, ")
							.append(" debitocred.dcst_dsabreviado as descricaoAbreviada, ")
							.append(" conta.cnta_icpagamento as indicadorPagamento, ")
							.append(" conta.cnta_icremuneracobrancaadm as indicadorRemuneraCobrancaAdm ")
							.append(" from conta conta")
							.append(" inner join debito_credito_situacao debitocred on conta.dcst_idatual=debitocred.dcst_id")
							.append(" left outer join conta_motivo_revisao contamotiv on conta.cmrv_id=contamotiv.cmrv_id")
							.append(" left outer join imovel imovel on conta.imov_id=imovel.imov_id")
							.append(" where conta.cnta_id IN(:ids)")
							.append(" and (debitocred.dcst_id = :situacaoNormal")
							.append(" or debitocred.dcst_id = :situacaoRetificada")
							.append(" or debitocred.dcst_id = :situacaoIncluida")
							.append(" or debitocred.dcst_id = :situacaoPrescrita")
							.append(" or debitocred.dcst_id = :situacaoParcelada)")
							.append(" and (conta.cnta_amreferenciaconta >= :inicialReferencia")
							.append(" and conta.cnta_amreferenciaconta <= :finalReferencia)")
							.append(" and (conta.cnta_dtvencimentoconta >=  :inicialVencimento")
							.append(" and conta.cnta_dtvencimentoconta <= :finalVencimento)")
							.append(" and ((conta.cnta_vlagua)+(conta.cnta_vlesgoto)+(conta.cnta_vldebitos))-(conta.cnta_vlcreditos) <> 0.00)");

			consultaImoveis.append(" (select conta.cnta_id as idConta, conta.cnta_vlagua as valorAgua,")
							.append(" conta.cnta_vlesgoto as valorEsgoto, conta.cnta_vldebitos as debitos,")
							.append(" conta.cnta_vlcreditos as valorCreditos, conta.cnta_dtrevisao as dataRevisao,")
							.append(" conta.cnta_amreferenciaconta as referencia, conta.cnta_dtvencimentoconta as dataVencimentoConta,")
							.append(" conta.cnta_iccobrancamulta as indicadorCobrancaMulta, debitocred.dcst_id as debitoCreditoSituacaoAtual,")
							.append(" conta.cnta_dgverificadorconta as digitoVerificadorConta,contamotiv.cmrv_id as idContaMotivoRevisao,")
							.append(" conta.cnta_tmultimaalteracao as ultimaAlteracao, imovel.imov_id as idImovel,")
							.append(" conta.cnta_nnconsumoagua as consumoAgua, conta.cnta_vlimpostos as valorImposto,")
							.append(" conta.cnta_nnconsumoesgoto as consumoEsgoto, conta.cnta_nnconsumocredito as creditoConsumo,")
							.append(" debitocred.dcst_dsdebitocreditosituacao as descricaoDebitoCreditoSituacao, ")
							.append(" debitocred.dcst_dsabreviado as descricaoAbreviada, ")
							.append(" conta.cnta_icpagamento as indicadorPagamento, ")
							.append(" conta.cnta_icremuneracobrancaadm as indicadorRemuneraCobrancaAdm ").append(" from conta conta")
							.append(" inner join imovel imovel on conta.imov_id=imovel.imov_id")
							.append(" inner join debito_credito_situacao debitocred on conta.dcst_idatual=debitocred.dcst_id")
							.append(" left outer join conta_motivo_revisao contamotiv on conta.cmrv_id=contamotiv.cmrv_id ")
							.append(" where imovel.imov_id in(:idsImoveis)").append(" and (debitocred.dcst_id = :situacaoNormal")
							.append(" or debitocred.dcst_id = :situacaoRetificada").append(" or debitocred.dcst_id = :situacaoIncluida")
							.append(" or debitocred.dcst_id = :situacaoParcelada ").append(" or debitocred.dcst_id = :situacaoPrescrita)")
							.append(" and (conta.cnta_amreferenciaconta >= :inicialReferencia")
							.append(" and conta.cnta_amreferenciaconta <= :finalReferencia)")
							.append(" and (conta.cnta_dtvencimentoconta >=  :inicialVencimento")
							.append(" and conta.cnta_dtvencimentoconta <= :finalVencimento)) ").append(" order by idImovel, referencia");

			Collection colecaoIdContasAuxiliar = new ArrayList();
			// Consulta os registros de contas
			for(int i = 0; i < idsContas.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdContasAuxiliar.add(idsContas.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsContas.size() - 1))){

					SQLQuery query = session.createSQLQuery(consulta.toString());
					query.addScalar("idConta", Hibernate.INTEGER).addScalar("valorAgua", Hibernate.BIG_DECIMAL)
									.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL).addScalar("debitos", Hibernate.BIG_DECIMAL)
									.addScalar("valorCreditos", Hibernate.BIG_DECIMAL).addScalar("dataRevisao", Hibernate.DATE)
									.addScalar("referencia", Hibernate.INTEGER).addScalar("dataVencimentoConta", Hibernate.DATE)
									.addScalar("indicadorCobrancaMulta", Hibernate.SHORT)
									.addScalar("debitoCreditoSituacaoAtual", Hibernate.INTEGER)
									.addScalar("digitoVerificadorConta", Hibernate.SHORT)
									.addScalar("idContaMotivoRevisao", Hibernate.INTEGER).addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)
									.addScalar("idImovel", Hibernate.INTEGER).addScalar("consumoAgua", Hibernate.INTEGER)
									.addScalar("valorImposto", Hibernate.BIG_DECIMAL).addScalar("consumoEsgoto", Hibernate.INTEGER)
									.addScalar("creditoConsumo", Hibernate.INTEGER)
									.addScalar("descricaoDebitoCreditoSituacao", Hibernate.STRING)
									.addScalar("descricaoAbreviada", Hibernate.STRING).addScalar("indicadorPagamento", Hibernate.SHORT)
									.addScalar("indicadorRemuneraCobrancaAdm", Hibernate.SHORT);

					query.setParameterList("ids", colecaoIdContasAuxiliar)
									.setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
									.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
									.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
									.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
									.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
									.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
									.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito))
									.setDate("inicialVencimento", anoMesInicialVecimentoDebito)
									.setDate("finalVencimento", anoMesFinalVencimentoDebito);

					if(retornoContas != null){
						retornoContas.addAll(query.list());
					}else{
						retornoContas = query.list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdContasAuxiliar.clear();
				}
			}

			Collection colecaoIdImoveisAuxiliar = new ArrayList();
			// Consulta os registros de imoveis
			for(int i = 0; i < idsImoveis.size(); i++){
				// Adiciona em uma lista auxiliar de 10 em 10 registros a serem consultados
				colecaoIdImoveisAuxiliar.add(idsImoveis.toArray()[i]);

				if(((i + 1) % 10 == 0) || (i == (idsImoveis.size() - 1))){

					SQLQuery query = session.createSQLQuery(consultaImoveis.toString());
					query.addScalar("idConta", Hibernate.INTEGER).addScalar("valorAgua", Hibernate.BIG_DECIMAL)
									.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL).addScalar("debitos", Hibernate.BIG_DECIMAL)
									.addScalar("valorCreditos", Hibernate.BIG_DECIMAL).addScalar("dataRevisao", Hibernate.DATE)
									.addScalar("referencia", Hibernate.INTEGER).addScalar("dataVencimentoConta", Hibernate.DATE)
									.addScalar("indicadorCobrancaMulta", Hibernate.SHORT)
									.addScalar("debitoCreditoSituacaoAtual", Hibernate.INTEGER)
									.addScalar("digitoVerificadorConta", Hibernate.SHORT)
									.addScalar("idContaMotivoRevisao", Hibernate.INTEGER).addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)
									.addScalar("idImovel", Hibernate.INTEGER).addScalar("consumoAgua", Hibernate.INTEGER)
									.addScalar("valorImposto", Hibernate.BIG_DECIMAL).addScalar("consumoEsgoto", Hibernate.INTEGER)
									.addScalar("creditoConsumo", Hibernate.INTEGER)
									.addScalar("descricaoDebitoCreditoSituacao", Hibernate.STRING)
									.addScalar("descricaoAbreviada", Hibernate.STRING).addScalar("indicadorPagamento", Hibernate.SHORT)
									.addScalar("indicadorRemuneraCobrancaAdm", Hibernate.SHORT);

					query.setParameterList("idsImoveis", colecaoIdImoveisAuxiliar)
									.setInteger("situacaoNormal", Integer.valueOf(contaSituacaoNormal))
									.setInteger("situacaoRetificada", Integer.valueOf(contaSituacaoRetificada))
									.setInteger("situacaoIncluida", Integer.valueOf(contaSituacaoIncluida))
									.setInteger("situacaoParcelada", Integer.valueOf(contaSituacaoParcelada))
									.setInteger("situacaoPrescrita", Integer.valueOf(contaSituacaoPrescrita))
									.setInteger("inicialReferencia", Integer.valueOf(anoMesInicialReferenciaDebito))
									.setInteger("finalReferencia", Integer.valueOf(anoMesFinalReferenciaDebito))
									.setDate("inicialVencimento", anoMesInicialVecimentoDebito)
									.setDate("finalVencimento", anoMesFinalVencimentoDebito);

					if(retornoImoveis != null){
						retornoImoveis.addAll(query.list());
					}else{
						retornoImoveis = query.list();
					}

					// Reinicializa a lista auxiliar
					colecaoIdImoveisAuxiliar.clear();
				}
			}

			// Realiza o UNION ALL unindo as duas listas de retorno obtidas
			retorno.addAll(retornoContas);
			retorno.addAll(retornoImoveis);

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 14/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoCobradoContas(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ErroRepositorioException{

		BigDecimal retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = "select sum(dbcb_vlprestacao) as valorDebito" + " from debito_cobrado dbcb" + " where dbcb.cnta_id in "
							+ "    (select cnta_id from conta where imov_id = :idImovel and"
							+ " 	cnta_amreferenciaconta >= :anoMesInicialReferenciaDebito "
							+ "     and cnta_amreferenciaconta <= :anoMesFinalReferenciaDebito"
							+ "     and(dcst_idatual = :situacaoNormal " + "     or dcst_idatual = :situacaoRetificada "
							+ "     or dcst_idatual = :situacaoIncluida ))"
							+ " and (dbcb.dbtp_id = :atualizacaoMonetaria or dbcb.dbtp_id = :jurosMora or "
							+ "dbcb.dbtp_id = :multaImpontualidade or dbcb.dbtp_id = :acrescImpontualidade )";

			retorno = (BigDecimal) session.createSQLQuery(consulta).addScalar("valorDebito", Hibernate.BIG_DECIMAL)
							.setInteger("idImovel", idImovel).setInteger("atualizacaoMonetaria", DebitoTipo.ATUALIZACAO_MONETARIA)
							.setInteger("jurosMora", DebitoTipo.JUROS_MORA)
							.setInteger("multaImpontualidade", DebitoTipo.MULTA_IMPONTUALIDADE)
							.setInteger("acrescImpontualidade", DebitoTipo.ACRESCIMOS_POR_IMPONTUALIDADE)
							.setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
							.setInteger("anoMesFinalReferenciaDebito", anoMesFinalReferenciaDebito)
							.setInteger("situacaoNormal", DebitoCreditoSituacao.NORMAL)
							.setInteger("situacaoRetificada", DebitoCreditoSituacao.RETIFICADA)
							.setInteger("situacaoIncluida", DebitoCreditoSituacao.INCLUIDA).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 20/09/2007
	 * @param idImovel
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoCobradoSancoes(Integer idImovel, Integer anoMesInicialReferenciaDebito,
					Integer anoMesFinalReferenciaDebito) throws ErroRepositorioException{

		BigDecimal retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = " select sum(dbcb_vlprestacao) as valorDebito " + " from debito_cobrado dbcb " + " where dbcb.cnta_id in "
							+ " (select cnta_id from conta where imov_id = :idImovel and "
							+ " cnta_amreferenciaconta >= :anoMesInicialReferenciaDebito "
							+ " and cnta_amreferenciaconta <= :anoMesFinalReferenciaDebito " + " and (dcst_idatual = :situacaoNormal "
							+ " or dcst_idatual = :situacaoRetificada " + " or dcst_idatual = :situacaoIncluida ) ) "
							+ " and (dbcb.dbtp_id = :sancoesRegulamentares or " + " dbcb.dbtp_id = :multaPorInfracao or "
							+ " dbcb.dbtp_id = :consumoNaoContabilizado or " + " dbcb.dbtp_id = :instalSubstHidrometro) ";

			retorno = (BigDecimal) session.createSQLQuery(consulta).addScalar("valorDebito", Hibernate.BIG_DECIMAL)
							.setInteger("idImovel", idImovel).setInteger("anoMesInicialReferenciaDebito", anoMesInicialReferenciaDebito)
							.setInteger("anoMesFinalReferenciaDebito", anoMesFinalReferenciaDebito)
							.setInteger("sancoesRegulamentares", DebitoTipo.SANCOES_REGULAMENTARES)
							.setInteger("multaPorInfracao", DebitoTipo.MULTA_POR_INFRACAO)
							.setInteger("consumoNaoContabilizado", DebitoTipo.CONSUMO_NAO_CONTABILIZADO)
							.setInteger("instalSubstHidrometro", DebitoTipo.INSTAL_SUBST_HIDROMETRO)
							.setInteger("situacaoNormal", DebitoCreditoSituacao.NORMAL)
							.setInteger("situacaoRetificada", DebitoCreditoSituacao.RETIFICADA)
							.setInteger("situacaoIncluida", DebitoCreditoSituacao.INCLUIDA).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * [UC0701] Informar indices dos Acrescimos de Impontualidade
	 * 
	 * @author Savio Luiz
	 * @created 26/09/2007
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade() throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		String consulta;
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta = " select max(anoMesReferencia)  " + " from IndicesAcrescimosImpontualidade ";

			retorno = ((Number) session.createQuery(consulta).setMaxResults(1).uniqueResult()).intValue();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * Retorna uma colecao de Debitos por Faixa de Valores dos Imoveis
	 * 
	 * @author Ivan Sergio
	 * @created 20/09/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitoImovelPorFaixaValores(String idImovel, String valorMinimoDebito, String anoMesReferenciaInicial,
					String anoMesReferenciaFinal, String classificacao) throws ErroRepositorioException{

		String sql;
		String orderBy;
		Session session = HibernateUtil.getSession();
		Collection retorno = null;

		try{
			sql = "SELECT " + "	dfv.dfvl_vlfaixainicio as faixaInicial, " + "	dfv.dfvl_vlfaixafim as faixaFinal, "
							+ "	dfv.dfvl_id as idFaixa, " + "	count( temp.idImovel ) as quantidadeLigacoes, "
							+ "	sum( temp.totalDebitos ) as total, " + "	sum( temp.qtdeDebitos ) as qtdeDocumentos, "
							+ "	temp.idGerencia as idGerencia, " + "	temp.nomeGerencia as nomeGerencia, "
							+ "	temp.idLocalidade as idLocalidade, " + "	temp.nomeLocalidade as nomeLocalidade, "
							+ "	temp.idSetor as idSetor, " + "	temp.codigoSetor as codigoSetor, " + "	temp.nomeSetor as nomeSetor "
							+ "FROM " + "	debito_faixa_valores dfv " + "	LEFT OUTER JOIN( " + "		SELECT	debitos.idImovel, "
							+ "			    gerencia.greg_id as idGerencia, " + "				gerencia.greg_nmabreviado as nomeGerencia, "
							+ "				loca.loca_id as idLocalidade, " + "				loca.loca_nmlocalidade as nomeLocalidade, "
							+ "				setor.stcm_id as idSetor, " + "				setor.stcm_cdsetorcomercial as codigoSetor, "
							+ "				setor.stcm_nmsetorcomercial as nomeSetor, " + "				sum( debitos.valorDebitos ) as totalDebitos, "
							+ "				sum( debitos.qtdeDebitos )  as qtdeDebitos " + "		FROM (" + "			SELECT imov.imov_id as idImovel, "
							+ "					'CONTA' as tipoDebito, " + "					sum( "
							+ "						CASE WHEN pagtoConta.pgmt_id is null and conta.cnta_id is not null THEN "
							+ "							conta.cnta_vlagua + " + "							conta.cnta_vlesgoto + " + "							conta.cnta_vldebitos - "
							+ "							conta.cnta_vlcreditos - " + "							coalesce( conta.cnta_vlimpostos, 0 ) " + "						ELSE "
							+ "							0.00 " + "						END " + "					) as valorDebitos, " + "					count( "
							+ "						CASE WHEN pagtoConta.pgmt_id is null and conta.cnta_id is not null THEN " + "							conta.cnta_id "
							+ "						END " + "					) as qtdeDebitos " + "			FROM " + "				imovel imov "
							+ "				LEFT OUTER JOIN conta conta " + "					on conta.imov_id = imov.imov_id and "
							+ "					conta.dcst_idatual in ( 0, 1, 2 ) " + "				LEFT OUTER JOIN pagamento pagtoConta "
							+ "					on conta.cnta_id = pagtoConta.cnta_id " + "			WHERE " + "				(conta.cnta_amreferenciaconta >= "
							+ anoMesReferenciaInicial
							+ " and "
							+ "				conta.cnta_amreferenciaconta <= "
							+ anoMesReferenciaFinal
							+ ") and "
							+ "				imov.imov_id in ( "
							+ idImovel
							+ " ) "
							+ "			GROUP BY "
							+ "					imov.imov_id"
							// + "				idImovel, "
							// + "				tipoDebito "
							+

							"			UNION "
							+

							"			SELECT "
							+ "				imov.imov_id as idImovel, "
							+ "				'GUIA' as tipoDebito, "
							+ "				sum( "
							+ "					CASE WHEN pagtoGuia.pgmt_id is null and gpag.gpag_id is not null THEN "
							+ "						gpag.gpag_vldebito "
							+ "					ELSE "
							+ "						0.00 "
							+ "					END "
							+ "				) as valorDebitos, "
							+ "				count( "
							+ "					CASE WHEN pagtoGuia.pgmt_id is null and gpag.gpag_id is not null THEN "
							+ "						gpag.gpag_id "
							+ "					END "
							+ "				) as qtdeDebitos "
							+ "			FROM "
							+ "				imovel imov "
							+ "				LEFT OUTER JOIN guia_pagamento gpag "
							+ "					on gpag.imov_id = imov.imov_id "
							+ "				LEFT OUTER JOIN pagamento pagtoGuia "
							+ "					on gpag.gpag_id = pagtoGuia.gpag_id "
							+ "				LEFT OUTER JOIN guia_pagamento_prestacao gppr "
							+ "				on gppr.gpag_id = gpag.gpag_id "
							+ "			WHERE "
							+ "				(gppr.gppr_amreferenciafaturamento >= "
							+ anoMesReferenciaInicial
							+ " and "
							+ "				gppr.gppr_amreferenciafaturamento <= "
							+ anoMesReferenciaFinal
							+ ") and "
							+ "				imov.imov_id in ( "
							+ idImovel
							+ " ) "
							+ "			GROUP BY "
							+ "					imov.imov_id"
							// + "				idImovel, "
							// + "				tipoDebito "
							+ "		) debitos "
							+ "		INNER JOIN imovel imov "
							+ "			on debitos.idImovel = imov.imov_id "
							+ "		INNER JOIN setor_comercial setor "
							+ "			on imov.stcm_id = setor.stcm_id "
							+ "		INNER JOIN localidade loca "
							+ "			on imov.loca_id = loca.loca_id "
							+ "		INNER JOIN gerencia_regional gerencia "
							+ "			on loca.greg_id = gerencia.greg_id "
							+ "		WHERE "
							+ "			debitos.valorDebitos is null or "
							+ "			debitos.valorDebitos > 0 "
							+ "		GROUP BY "
							+ "			debitos.idImovel, "
							+ "			gerencia.greg_id, "
							+ "			gerencia.greg_nmabreviado, "
							+ "			loca.loca_id, "
							+ "			loca.loca_nmlocalidade, "
							+ "			setor.stcm_id, "
							+ "			setor.stcm_cdsetorcomercial, "
							+ "			setor.stcm_nmsetorcomercial "
							+ "		) temp "
							+ "	on temp.totalDebitos between dfv.dfvl_vlfaixainicio and dfv.dfvl_vlfaixafim "
							+ "WHERE "
							+ "	temp.totalDebitos > "
							+ valorMinimoDebito
							+ " "
							+ "GROUP BY "
							+ "	temp.idGerencia, "
							+ "	temp.nomeGerencia, "
							+ "	temp.idLocalidade, "
							+ "	temp.nomeLocalidade, "
							+ "	temp.idSetor, "
							+ "	temp.codigoSetor, "
							+ "	temp.nomeSetor, "
							+ "	dfv.dfvl_vlfaixainicio, "
							+ "	dfv.dfvl_vlfaixafim, "
							+ "	dfv.dfvl_id " + "ORDER BY ";

			// Classificacao
			orderBy = "";
			if(classificacao.trim().equalsIgnoreCase("ESTADO")){
				orderBy = "	dfv.dfvl_id, " + "	temp.idGerencia, " + "	temp.idLocalidade, " + "	temp.idSetor";

			}else if(classificacao.trim().equalsIgnoreCase("REGIONAL")){
				orderBy = "	temp.idGerencia, " + "	dfv.dfvl_id, " + "	temp.idLocalidade, " + "	temp.idSetor";

			}else if(classificacao.trim().equalsIgnoreCase("LOCAL")){
				orderBy = "	temp.idGerencia, " + "	temp.idLocalidade, " + "	dfv.dfvl_id, " + "	temp.idSetor";
			}else if(classificacao.trim().equalsIgnoreCase("SETORCOMERCIAL")){
				orderBy = "	temp.idGerencia, " + "	temp.idLocalidade, " + "	temp.idSetor, " + "	dfv.dfvl_id";
			}

			sql += orderBy;

			retorno = session.createSQLQuery(sql).addScalar("faixaInicial", Hibernate.BIG_DECIMAL)
							.addScalar("faixaFinal", Hibernate.BIG_DECIMAL).addScalar("idFaixa", Hibernate.INTEGER)
							.addScalar("quantidadeLigacoes", Hibernate.INTEGER).addScalar("total", Hibernate.BIG_DECIMAL)
							.addScalar("qtdeDocumentos", Hibernate.INTEGER).addScalar("idGerencia", Hibernate.INTEGER)
							.addScalar("nomeGerencia", Hibernate.STRING).addScalar("idLocalidade", Hibernate.INTEGER)
							.addScalar("nomeLocalidade", Hibernate.STRING).addScalar("idSetor", Hibernate.INTEGER)
							.addScalar("codigoSetor", Hibernate.INTEGER).addScalar("nomeSetor", Hibernate.STRING).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * 
	 * @autor: Raphael Rossiter
	 *         Pesquisa os dados do Indices Acrescimo Impontualidade menor ao
	 *         ano mes referencia
	 * @param anoMesReferenciaDebito
	 * @return O Indices Acrescimos por Impontualidade
	 * @throws ErroRepositorioException
	 */
	public IndicesAcrescimosImpontualidade pesquisarMenorIndiceAcrescimoImpontualidade() throws ErroRepositorioException{

		IndicesAcrescimosImpontualidade retornoIndicesAcrescimosImpontualidade = null;
		Object retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select iai ").append("from IndicesAcrescimosImpontualidade iai ")
							.append("where iai.anoMesReferencia = (select min(iai2.anoMesReferencia) ")
							.append("from IndicesAcrescimosImpontualidade iai2)");

			retorno = session.createQuery(consulta.toString()).setMaxResults(1).uniqueResult();

			if(retorno != null){
				retornoIndicesAcrescimosImpontualidade = (IndicesAcrescimosImpontualidade) retorno;

			}
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retornoIndicesAcrescimosImpontualidade;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotas(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		StringBuffer consulta = new StringBuffer();
		try{

			consulta.append("select distinct(rota.id) from RotaAcaoCriterio rotaCriterio ").append(" inner join rotaCriterio.rota rota")
							.append(" inner join rota.setorComercial setor ").append(" inner join setor.localidade localidade")
							.append(" inner join rotaCriterio.cobrancaAcao cobrancaAcao ")
							.append(" where cobrancaAcao.id = :idCobrancaAcao").append(" and rota.id between :rotaInicial and :rotaFinal ")
							.append(" and setor.codigo = :setorComercial ").append(" and localidade.id = :idLocalidade");

			StringBuffer consultaSemCriterio = new StringBuffer("select distinct(rotaAcao.id) from RotaAcaoCriterio rotaCriterioAcao ")
							.append(" inner join rotaCriterioAcao.rota rotaAcao").append(" inner join rotaAcao.setorComercial setorAcao ")
							.append(" inner join setorAcao.localidade localidade")
							.append(" inner join rotaCriterioAcao.cobrancaAcao cobranca ").append(" where").append(" rotaAcao.id not in (")
							.append(consulta.toString()).append(") and setorAcao.codigo = :setorComercial ")
							.append(" and localidade.id = :idLocalidade").append(" and rotaAcao.id between :rotaInicial and :rotaFinal ");

			retorno = session.createQuery(consultaSemCriterio.toString()).setInteger("idLocalidade", Integer.valueOf(idLocalidade))
							.setInteger("setorComercial", Integer.valueOf(codigoSetorComercial))
							.setInteger("rotaInicial", Integer.valueOf(rotaInicial)).setInteger("rotaFinal", Integer.valueOf(rotaFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade"
							+ " where setor.codigo between :codigoSetorComercialInicial and :codigoSetorComercialFinal "
							+ " and localidade.id = :idLocalidade";

			String consultaSemCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao " + " where"
							+ " cobrancaAcao.id <> :idCobrancaAcao"
							+ " and setor.codigo between :codigoSetorComercialInicial and :codigoSetorComercialFinal "
							+ " and localidade.id = :idLocalidade and" + " rota.id in (" + consulta + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idLocalidade", Integer.valueOf(idLocalidade))
							.setInteger("codigoSetorComercialInicial", Integer.valueOf(codigoSetorComercialInicial))
							.setInteger("codigoSetorComercialFinal", Integer.valueOf(codigoSetorComercialFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal, String idCobrancaAcao)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade"
							+ " where localidade.id between :idLocalidadeInicial and :idLocalidadeFinal ";

			String consultaSemCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao " + " where"
							+ " cobrancaAcao.id <> :idCobrancaAcao"
							+ " and localidade.id between :idLocalidadeInicial and :idLocalidadeFinal" + " and rota.id in (" + consulta
							+ ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idLocalidadeInicial", Integer.valueOf(idLocalidadeInicial))
							.setInteger("idLocalidadeFinal", Integer.valueOf(idLocalidadeFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " inner join unidadeNegocio.gerenciaRegional gerenciaRegional"
							+ " where gerenciaRegional.id = :idGerenciaRegional ";

			String consultaSemCriterio = "select distinct(rotaAcao.id) from RotaAcaoCriterio rotaCriterioAcao "
							+ " inner join rotaCriterioAcao.rota rotaAcao" + " inner join rotaAcao.setorComercial setorAcao "
							+ " inner join setorAcao.localidade localidadeAcao"
							+ " inner join localidadeAcao.unidadeNegocio unidadeNegocioAcao"
							+ " inner join rotaCriterioAcao.cobrancaAcao cobrancaAcao "
							+ " inner join unidadeNegocioAcao.gerenciaRegional gerenciaRegionalAcao" + " where"
							+ " cobrancaAcao.id <> :idCobrancaAcao" + " and gerenciaRegionalAcao.id = :idGerenciaRegional"
							+ " and rotaAcao.id in (" + consulta + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idGerenciaRegional", Integer.valueOf(idGerenciaRegional))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join rota.cobrancaGrupo cobrancaGrupo" + " where cobrancaGrupo.id = :idGrupoCobranca";

			String consultaSemCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.cobrancaGrupo cobrancaGrupo"
							+ " left join rotaCriterio.cobrancaAcao cobrancaAcao " + " where " + " cobrancaAcao.id <> :idCobrancaAcao"
							+ " and cobrancaGrupo.id = :idGrupoCobranca" + " and rota.id in (" + consulta + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idGrupoCobranca", Integer.valueOf(idGrupoCobranca))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Flavio Cordeiro
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " where unidadeNegocio.id = :idUnidadeNegocio";

			String consultaSemCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio "
							+ " left join rotaCriterio.cobrancaAcao cobrancaAcao " + " where cobrancaAcao.id <> :idCobrancaAcao"
							+ " and unidadeNegocio.id = :idUnidadeNegocio" + " and rota.id in (" + consulta + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idUnidadeNegocio", Integer.valueOf(idUnidadeNegocio))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterio(String codigoSetorComercial, String rotaInicial, String rotaFinal, String idLocalidade,
					String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consultaSemCriterio;
		try{

			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao "
							+ " where cobrancaAcao.id = :idCobrancaAcao" + " and rota.id between :rotaInicial and :rotaFinal "
							+ " and setor.codigo = :setorComercial " + " and localidade.id = :idLocalidade";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " where rota.id between :rotaInicial and :rotaFinal "
							+ " and setor.codigo = :setorComercial " + " and localidade.id = :idLocalidade" + " and rota.id not in" + " ("
							+ consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idLocalidade", Integer.valueOf(idLocalidade))
							.setInteger("setorComercial", Integer.valueOf(codigoSetorComercial))
							.setInteger("rotaInicial", Integer.valueOf(rotaInicial)).setInteger("rotaFinal", Integer.valueOf(rotaFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterioIntervaloSetor(String codigoSetorComercialInicial, String codigoSetorComercialFinal,
					String idLocalidade, String idCobrancaAcao) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consultaSemCriterio;
		try{
			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao "
							+ " where cobrancaAcao.id = :idCobrancaAcao"
							+ " and setor.codigo between :codigoSetorComercialInicial and :codigoSetorComercialFinal "
							+ " and localidade.id = :idLocalidade";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade"
							+ " where setor.codigo between :codigoSetorComercialInicial and :codigoSetorComercialFinal "
							+ " and localidade.id = :idLocalidade" + " and rota.id not in" + " (" + consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idLocalidade", Integer.valueOf(idLocalidade))
							.setInteger("codigoSetorComercialInicial", Integer.valueOf(codigoSetorComercialInicial))
							.setInteger("codigoSetorComercialFinal", Integer.valueOf(codigoSetorComercialFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterioIntervaloLocalidade(String idLocalidadeInicial, String idLocalidadeFinal,
					String idCobrancaAcao) throws ErroRepositorioException{

		String consultaSemCriterio;

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql

		try{

			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio"
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor"
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao"
							+ " where cobrancaAcao.id = :idCobrancaAcao"
							+ " and localidade.id between :idLocalidadeInicial and :idLocalidadeFinal";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota" + " inner join rota.setorComercial setor"
							+ " inner join setor.localidade localidade"
							+ " where localidade.id between :idLocalidadeInicial and :idLocalidadeFinal" + " and rota.id not in" + " ("
							+ consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idLocalidadeInicial", Integer.valueOf(idLocalidadeInicial))
							.setInteger("idLocalidadeFinal", Integer.valueOf(idLocalidadeFinal))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterioIntervaloGerencia(String idGerenciaRegional, String idCobrancaAcao)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consultaSemCriterio;
		try{

			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join rotaCriterio.cobrancaAcao cobrancaAcao "
							+ " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " inner join unidadeNegocio.gerenciaRegional gerenciaRegional"
							+ " inner join rotaCriterio.cobrancaAcao cobrancaAcao " + " where cobrancaAcao.id = :idCobrancaAcao"
							+ " and gerenciaRegional.id = :idGerenciaRegional";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota " + " inner join rota.setorComercial setor "
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " inner join unidadeNegocio.gerenciaRegional gerenciaRegional"
							+ " where gerenciaRegional.id = :idGerenciaRegional" + " and rota.id not in" + " (" + consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idGerenciaRegional", Integer.valueOf(idGerenciaRegional))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterioIntervaloGrupo(String idGrupoCobranca, String idCobrancaAcao)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consultaSemCriterio;
		try{

			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio"
							+ " inner join rotaCriterio.rota rota" + " inner join rota.cobrancaGrupo cobrancaGrupo"
							+ " inner join rotaCriterio.cobrancaAcao cobrancaAcao" + " where cobrancaAcao.id = :idCobrancaAcao"
							+ " and cobrancaGrupo.id = :idGrupoCobranca";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota" + " inner join rota.setorComercial setor"
							+ " inner join rota.cobrancaGrupo cobrancaGrupo" + " where cobrancaGrupo.id = :idGrupoCobranca"
							+ " and rota.id not in" + " (" + consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idGrupoCobranca", Integer.valueOf(idGrupoCobranca))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	// Saulo Lima
	// caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasSemCriterioIntervaloUnidadeNegocio(String idUnidadeNegocio, String idCobrancaAcao)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consultaSemCriterio;
		try{

			String consultaComCriterio = "select distinct(rota.id) from RotaAcaoCriterio rotaCriterio "
							+ " inner join rotaCriterio.rota rota" + " inner join rota.setorComercial setor"
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " inner join rotaCriterio.cobrancaAcao cobrancaAcao " + " where cobrancaAcao.id = :idCobrancaAcao"
							+ " and unidadeNegocio.id = :idUnidadeNegocio";

			consultaSemCriterio = "select distinct(rota.id) from Rota rota" + " inner join rota.setorComercial setor"
							+ " inner join setor.localidade localidade" + " inner join localidade.unidadeNegocio unidadeNegocio"
							+ " where unidadeNegocio.id = :idUnidadeNegocio" + " and rota.id not in" + " (" + consultaComCriterio + ")";

			retorno = session.createQuery(consultaSemCriterio).setInteger("idUnidadeNegocio", Integer.valueOf(idUnidadeNegocio))
							.setInteger("idCobrancaAcao", Integer.valueOf(idCobrancaAcao)).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC0067] Obter Debito do Imovel ou Cliente
	 * 
	 * @author Raphael Rossiter
	 *         Verifica se existe uma Devolucao associada ao credito
	 * @param creditoARealizar
	 * @return boolean
	 * @throws ErroRepositorioException
	 */
	public boolean existeDevolucao(CreditoARealizar creditoARealizar) throws ErroRepositorioException{

		Integer retornoHQL = null;
		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT devl.id " + "FROM Devolucao devl " + "INNER JOIN devl.creditoARealizarGeral crar "
							+ "WHERE crar.id = :idCreditoARealizar ";

			retornoHQL = (Integer) session.createQuery(consulta).setInteger("idCreditoARealizar", creditoARealizar.getId())
							.setMaxResults(1).uniqueResult();

			if(retornoHQL != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0067] Inserir Comando Negativacao
	 * 
	 * @autor: Ana Maria
	 *         [FS0019] Verificar existencia de Parcelamento
	 * @param idImovel
	 * @return Cliente
	 * @throws ErroRepositorioException
	 */
	public Cliente pesquisarClienteResponsavelParcelamento(Integer idImovel) throws ErroRepositorioException{

		Cliente retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "select clie " + "from Parcelamento parc " + "inner join parc.cliente clie " + "where parc.imovel.id = :idImovel "
							+ "order by parc.parcelamento desc ";

			retorno = (Cliente) session.createQuery(consulta).setInteger("idImovel", idImovel).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @author Deyverson Santos
	 * @date 17.11.2008
	 * @author Saulo Lima, eduardo henrique
	 * @date 18/07/2009 Inclusao do JOIN com debitoTipo e clausulas FETCH
	 *       Inclusao de Join Fetch com debitoTipo do debito a cobrar historico
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 * @throws ErroHirbenateException
	 */
	public Collection<CobrancaDocumentoItem> pesquisarDocumentoItem(CobrancaDocumento cobrancaDocumento) throws ErroRepositorioException{

		Collection colecaoCobrancaDocumentoItem = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "SELECT DISTINCT cobraDocItem " + "FROM CobrancaDocumentoItem cobraDocItem "
							+ "LEFT JOIN FETCH cobraDocItem.contaGeral contaGeral " + "LEFT JOIN FETCH contaGeral.conta conta "
							+ "LEFT JOIN FETCH conta.debitoCreditoSituacaoAtual contaDebCredSitAtual "
							+ "LEFT JOIN FETCH contaGeral.contaHistorico contaHistorico "
							+ "LEFT JOIN FETCH contaHistorico.debitoCreditoSituacaoAtual contaHistDebCredSitAtual "
							+ "LEFT JOIN FETCH cobraDocItem.debitoACobrarGeral debitoACobrarGeral "
							+ "LEFT JOIN FETCH debitoACobrarGeral.debitoACobrar debACobrar "
							+ "LEFT JOIN FETCH debACobrar.debitoTipo debitoTipoDebACobrar "
							+ "LEFT JOIN FETCH debitoACobrarGeral.debitoACobrarHistorico debHistACobrar "
							+ "LEFT JOIN FETCH debHistACobrar.debitoTipo debitoTipoDebACobrarHistorico "
							+ "LEFT JOIN FETCH cobraDocItem.guiaPagamentoGeral guiaPagamentoGeral "
							+ "LEFT JOIN FETCH guiaPagamentoGeral.guiaPagamento guiaPagamento "
							+ "LEFT JOIN FETCH guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao "
							+ "LEFT JOIN FETCH guiaPagamentoPrestacao.debitoTipo debitoTipoPrestacao "
							+ "LEFT JOIN FETCH cobraDocItem.documentoTipo docTipo "
							+ "WHERE cobraDocItem.cobrancaDocumento.id = :idCobrancaDocumento "
							+ "ORDER BY conta.referencia, contaHistorico.anoMesReferenciaConta";

			colecaoCobrancaDocumentoItem = session.createQuery(consulta).setInteger("idCobrancaDocumento", cobrancaDocumento.getId())
							.list();

		}catch(HibernateException he){
			throw new ErroRepositorioException(he, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
		return colecaoCobrancaDocumentoItem;
	}

	/**
	 * Remove "Contrato Cobranca" de acordo com os ids passados.
	 * 
	 * @author Virginia Melo
	 * @created 04/12/2008
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerContratoCobranca(Integer[] idsContratoCobranca) throws ErroRepositorioException{

		String remocao = null;

		Session session = HibernateUtil.getSession();

		try{

			remocao = "delete gcom.cobranca.contrato.CobrancaContrato cobrancaContrato "
							+ "where cobrancaContrato.id IN(:idsContratoCobranca)";

			session.createQuery(remocao).setParameterList("idsContratoCobranca", idsContratoCobranca).executeUpdate();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	public void removerDebitosACobrarECreditosARealizarDoParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		try{

			Collection<Object> entidadesParaRemover = new ArrayList<Object>();

			String consulta = "select dacc from CreditoARealizarCategoria dacc where dacc.comp_id.creditoARealizar.id in (select dac.id from CreditoARealizar dac where dac.parcelamento.id = :idParcelamento)";
			Collection<CreditoARealizarCategoria> creditosARealizarCategoria = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(creditosARealizarCategoria);

			consulta = "select dacc from ClienteCreditoARealizar dacc where dacc.creditoARealizar.id in (select dac.id from CreditoARealizar dac where dac.parcelamento.id = :idParcelamento)";
			Collection<ClienteCreditoARealizar> clientesCreditoARealizar = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(clientesCreditoARealizar);

			consulta = "select dac from CreditoARealizar dac where dac.parcelamento.id = :idParcelamento";
			Collection<CreditoARealizar> creditosARealizar = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(creditosARealizar);

			consulta = "select dacc from CreditoARealizarCategoriaHistorico dacc where dacc.creditoARealizarHistorico.id in (select dac.id from CreditoARealizarHistorico dac where dac.parcelamento.id = :idParcelamento)";
			Collection<CreditoARealizarCategoriaHistorico> creditoACobrarCategoriaHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(creditoACobrarCategoriaHistorico);

			consulta = "select dacc from ClienteCreditoARealizarHistorico dacc where dacc.creditoARealizarHistorico.id in (select dac.id from CreditoARealizarHistorico dac where dac.parcelamento.id = :idParcelamento)";
			Collection<ClienteCreditoARealizarHistorico> clientesCreditoARealizarHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(clientesCreditoARealizarHistorico);

			consulta = "select dac from CreditoARealizarHistorico dac where dac.parcelamento.id = :idParcelamento";
			Collection<CreditoARealizarHistorico> creditosARealizarHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(creditosARealizarHistorico);

			consulta = "select dacc from DebitoACobrarCategoria dacc where dacc.comp_id.debitoACobrar.id in (select dac.id from DebitoACobrar dac where dac.parcelamento.id = :idParcelamento)";
			Collection<DebitoACobrarCategoria> debitosACobrarCategoria = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(debitosACobrarCategoria);

			consulta = "select dacc from ClienteDebitoACobrar dacc where dacc.debitoACobrar.id in (select dac.id from DebitoACobrar dac where dac.parcelamento.id = :idParcelamento)";
			Collection<ClienteDebitoACobrar> clientesDebitoACobrar = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(clientesDebitoACobrar);

			consulta = "select dac from DebitoACobrar dac where dac.parcelamento.id = :idParcelamento";
			Collection<DebitoACobrar> debitosACobrar = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(debitosACobrar);

			consulta = "select dacc from DebitoACobrarCategoriaHistorico dacc where dacc.comp_id.debitoACobrarHistorico.id in (select dac.id from DebitoACobrarHistorico dac where dac.parcelamento.id = :idParcelamento)";
			Collection<DebitoACobrarCategoriaHistorico> debitosACobrarCategoriaHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(debitosACobrarCategoriaHistorico);

			consulta = "select dacc from ClienteDebitoACobrarHistorico dacc where dacc.debitoACobrarHistorico.id in (select dac.id from DebitoACobrarHistorico dac where dac.parcelamento.id = :idParcelamento)";
			Collection<ClienteDebitoACobrarHistorico> clientesDebitoACobrarHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(clientesDebitoACobrarHistorico);

			consulta = "select dac from DebitoACobrarHistorico dac where dac.parcelamento.id = :idParcelamento";
			Collection<DebitoACobrarHistorico> debitosACobrarHistorico = session.createQuery(consulta)
							.setInteger("idParcelamento", idParcelamento.intValue()).list();
			entidadesParaRemover.addAll(debitosACobrarHistorico);

			if(entidadesParaRemover != null && entidadesParaRemover.size() > 0){
				for(Object entidade : entidadesParaRemover){
					session.delete(entidade);
				}
			}

			session.flush();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

	}

	/**
	 * Pesquisar Feriado Municipal
	 * 
	 * @author eduardo henrique
	 * @date 15/07/2009
	 * @param dataFeriado
	 * @returns FeriadoMunicipal
	 * @throws ErroRepositorioException
	 */
	public Collection<MunicipioFeriado> pesquisarFeriadoMunicipal(Municipio municipio, Date dataFeriado) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<MunicipioFeriado> colecaoFeriadoMunicipal = null;
		try{

			Criteria criteria = session.createCriteria(MunicipioFeriado.class).setCacheable(true).setCacheRegion("MunicipioFeriado");

			if(municipio != null){
				criteria.add(Restrictions.eq("municipio", municipio));
			}

			if(dataFeriado != null){
				criteria.add(Restrictions.eq("dataFeriado", dataFeriado));
			}

			colecaoFeriadoMunicipal = criteria.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
		return colecaoFeriadoMunicipal;
	}

	/**
	 * Pesquisar Feriado Nacional
	 * 
	 * @author eduardo henrique
	 * @date 15/07/2009
	 * @param dataFeriado
	 * @returns FeriadoNacional
	 * @throws ErroRepositorioException
	 */
	public Collection<NacionalFeriado> pesquisarFeriadoNacional(Date dataFeriado) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<NacionalFeriado> colecaoFeriadoNacional = null;
		try{

			Criteria criteria = session.createCriteria(NacionalFeriado.class).setCacheable(true).setCacheRegion("NacionalFeriado");

			if(dataFeriado != null){
				criteria.add(Restrictions.eq("data", dataFeriado));
			}

			colecaoFeriadoNacional = criteria.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
		return colecaoFeriadoNacional;
	}

	/**
	 * Pesquisa o documento de cobranca da acao precedente (2.3.1)
	 * [UC0251] Gerar Atividade de Acao de cobranca [SB0003] Gerar Atividade de
	 * Acao de cobranca o Imovel
	 * 
	 * @author Francisco do Nascimento
	 * @date 22/12/2008
	 * @param idImovel
	 * @param idServicoTipo
	 * @param indicadorExecucao
	 * @param dataEncerramento
	 * @return Id do documento de cobranca
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarDocumentoCobrancaAcaoPrecedente(Integer idImovel, Integer idServicoTipo, Short indicadorExecucao,
					Date dataEncerramento) throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select os.cobrancaDocumento.id from OrdemServico os ")
							// .append("inner join os.servicoTipo st ")
							// .append("inner join os.imovel im ")
							.append("inner join os.atendimentoMotivoEncerramento ame ")
							.append("where os.dataEncerramento is not null ")
							.append("and os.imovel.id = :idImovel and os.servicoTipo.id = :idServicoTipo and ame.indicadorExecucao = :indicadorExecucao  ")
							.append("and os.dataEncerramento <= :dataEncerramento");

			// if (idImovel.equals(1579185)) {
			// System.out.println("###-TOSCK-Imovle-1### " +
			// consulta.toString());
			// }

			retorno = (Integer) session.createQuery(consulta.toString()).setInteger("idImovel", idImovel)
							.setInteger("idServicoTipo", idServicoTipo).setShort("indicadorExecucao", indicadorExecucao)
							.setTimestamp("dataEncerramento", dataEncerramento).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		return retorno;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneraveis por cobranca Administrativa
	 * Consulta os imoveis marcados na cobranca administrativa (a partir da tabela
	 * IMOVEL_COBRANCA_SITUACAO com CBST_ID=4 e ISCB_DTRETIRADACOBRANCA com o valor nulo)
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public Collection<ImovelCobrancaSituacao> pesquisarImovelCobrancaSituacaoPorCobrancaSituacaoId(Integer cobrancaSituacaoId, Integer qtd)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select iscb from ImovelCobrancaSituacao iscb ") //
							.append(" where cobrancaSituacao.id = :cobrancaSituacaoId and dataRetiradaCobranca is null ");

			retorno = (Collection) session.createQuery(consulta.toString()).setInteger("cobrancaSituacaoId", cobrancaSituacaoId)
							.setMaxResults(qtd).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneraveis por cobranca Administrativa
	 * Consulta os itens de cobranca administrativa pendente (ocorrencias na tabela
	 * COBRANCA_DOCUMENTO_ITEM com CDST_ID=1 (pendente) e CBDO_ID=(CBDO_ID da tabela
	 * COBRANCA_DOCUMENTO com IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e
	 * CACM_ID=(CACM_ID da tabela IMOVEL_COBRANCA_SITUACAO)))
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public Collection pesquisarCobrancaDocumentoItensEmCobrancaAdmPendente(Integer imovelId, Integer cobrancaAcaoAtividadeComandoId)
					throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		String consulta = "";
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta = " select cdi.cdit_id, cdi.cdit_dtsituacaodebito from cobranca_documento_item cdi " //
							+ " inner join cobranca_documento cd on cd.cbdo_id = cdi.cbdo_id " //
							+ " where cdi.cdst_id = :situacao " //
							+ " and cd.imov_id = :imovelId " //
							+ " and cd.cacm_id = :cobrancaAcaoAtividadeComandoId ";

			retorno = (Collection) session.createSQLQuery(consulta).addScalar("cdit_id", Hibernate.INTEGER)
							.addScalar("cdit_dtsituacaodebito", Hibernate.DATE).setInteger("situacao", CobrancaDebitoSituacao.PENDENTE)
							.setInteger("imovelId", imovelId).setInteger("cobrancaAcaoAtividadeComandoId", cobrancaAcaoAtividadeComandoId)
							.list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneraveis por cobranca Administrativa
	 * Obtem a maior data de situacao do Debito (CDIT_DTSITUACAODEBITO) da tabela
	 * COBRANCA_DOCUMENTO_ITEM com CBDO_ID=(CBDO_ID da tabela COBRANCA_DOCUMENTO com
	 * IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO) e CACM_ID=(CACM_ID da tabela
	 * IMOVEL_COBRANCA_SITUACAO)))
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public Date obterMaiorDataSituacaoDebitoCobrancaDocumentoItem(Integer imovelId, Integer cobrancaAcaoAtividadeComandoId)
					throws ErroRepositorioException{

		Date maiorDataSituacaoDebito = null;
		// Query
		String consulta = "";
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta = " select max(cdi.cdit_dtsituacaodebito) from cobranca_documento_item cdi " //
							+ " inner join cobranca_documento cd on cd.cbdo_id = cdi.cbdo_id " //
							+ " where cd.imov_id = :imovelId " //
							+ " and cd.cacm_id = :cobrancaAcaoAtividadeComandoId ";

			maiorDataSituacaoDebito = (Date) session.createSQLQuery(consulta).setInteger("imovelId", imovelId)
							.setInteger("cobrancaAcaoAtividadeComandoId", cobrancaAcaoAtividadeComandoId).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return maiorDataSituacaoDebito;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneraveis por cobranca Administrativa
	 * Consulta as Prestacoes historico de guias de pagamento a partir da tabela
	 * GUIA_PAGAMENTO_PRESTACAO_HIST com GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO com
	 * GPAG_DTINCLUSAO maior ou igual a  1/02/2013 e IMOV_ID=(IMOV_ID da tabela
	 * IMOVEL_COBRANCA_SITUACAO)) E a partir da tabela GUIA_PAGAMENTO_PRESTACAO_HIST com
	 * GPAG_ID=(GPAG_ID da tabela GUIA_PAGAMENTO_HISTORICO com GPHI_DTINCLUSAO maior ou igual a 
	 * 1/02/2013 e IMOV_ID=(IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO)))
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public Collection<GuiaPagamentoPrestacaoHistorico> pesquisarGuiaPagamentoPrestacaoHistParaRemunerarCobrancaAdm(Integer imovelId,
					Date dataInclusao) throws ErroRepositorioException{

		Collection<Object[]> retornoConsulta = null;
		Collection<GuiaPagamentoPrestacaoHistorico> colecaoPrestacoes = null;

		// Query
		String consulta = "";

		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta = " select ph.gpag_id, ph.gpph_nnprestacao, ph.dbtp_id, ph.lict_id, ph.gpph_nnprocesadmexecucaofiscal, " //
							+ " ph.dcst_id, g.gpag_dtinclusao, gh.gphi_dtinclusao " //
							+ " from guia_pagamento_prestacao_hist ph " //
							+ " left join guia_pagamento g on ph.gpag_id = g.gpag_id " //
							+ " left join guia_pagamento_historico gh on ph.gpag_id = gh.gpag_id " //
							+ " where " //
							+ " ph.gpag_id in " //
							+ "  (select g.gpag_id from guia_pagamento g " //
							+ "   where g.imov_id = :imovelId " //
							+ "   and g.gpag_dtinclusao >= :dataInclusao) " //
							+ " or ph.gpag_id in " //
							+ "  (select gh.gpag_id from guia_pagamento_historico gh " //
							+ "   where gh.imov_id = :imovelId " //
							+ "   and gh.gphi_dtinclusao >= :dataInclusao)";

			retornoConsulta = (Collection) session.createSQLQuery(consulta) //
							.addScalar("gpag_id", Hibernate.INTEGER) // 0
							.addScalar("gpph_nnprestacao", Hibernate.SHORT) // 1
							.addScalar("dbtp_id", Hibernate.INTEGER) // 2
							.addScalar("lict_id", Hibernate.INTEGER) // 3
							.addScalar("dcst_id", Hibernate.INTEGER) // 4
							.addScalar("gpag_dtinclusao", Hibernate.DATE) // 5
							.addScalar("gphi_dtinclusao", Hibernate.DATE) // 6
							.setInteger("imovelId", imovelId) //
							.setDate("dataInclusao", dataInclusao) //
							.list();

			if(!Util.isVazioOrNulo(retornoConsulta)){

				// Variaveis utilizadas na construcao das Prestacoes
				colecaoPrestacoes = new ArrayList<GuiaPagamentoPrestacaoHistorico>();
				GuiaPagamentoPrestacaoHistorico prestacao = null;
				GuiaPagamentoPrestacaoHistoricoPK prestacaoPK = null;
				GuiaPagamento guiaPagamento = null;
				DebitoTipo debitoTipo = null;
				DebitoCreditoSituacao debitoCreditoSituacao = null;
				LancamentoItemContabil lancamentoItemContabil = null;

				// Para cada resultado da consulta, constroi o objeto
				// GuiaPagamentoPrestacaoHistorico
				for(Object[] dados : retornoConsulta){

					// Chave primaria da prestacao historico
					prestacaoPK = new GuiaPagamentoPrestacaoHistoricoPK((Integer) dados[0], (Short) dados[1], (Integer) dados[2],
									(Integer) dados[3], (Integer) dados[4]);

					// Tipo de Debito
					debitoTipo = new DebitoTipo();
					debitoTipo.setId((Integer) dados[2]);

					// Item de lancamento contabil
					lancamentoItemContabil = new LancamentoItemContabil((Integer) dados[3]);

					// situacao de Debito/Credito
					debitoCreditoSituacao = new DebitoCreditoSituacao((Integer) dados[5]);

					// Guia de pagamento, que pode ser normal ou historico
					guiaPagamento = new GuiaPagamento((Integer) dados[0]);
					if(dados[6] != null){
						guiaPagamento.setDataInclusao((Date) dados[6]);
					}else if(dados[7] != null){
						guiaPagamento.setDataInclusao((Date) dados[7]);
					}

					// Constroi a prestacao (objeto do tipo GuiaPagamentoPrestacaoHistorico)
					prestacao = new GuiaPagamentoPrestacaoHistorico();
					prestacao.setComp_id(prestacaoPK);
					prestacao.setDebitoTipo(debitoTipo);
					prestacao.setLancamentoItemContabil(lancamentoItemContabil);
					prestacao.setDebitoCreditoSituacao(debitoCreditoSituacao);
					prestacao.setGuiaPagamento(guiaPagamento);

					// Adiciona a  Colecao
					colecaoPrestacoes.add(prestacao);
				}
			}

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		// retorna a Colecao de Prestacoes historico
		return colecaoPrestacoes;
	}

	/**
	 * Rotina batch: Marcar Itens Remuneraveis por cobranca Administrativa
	 * Atualiza o indicador remunera cobranca administrativa da entidade
	 * GuiaPagamentoPrestacaoHistorico
	 * 
	 * @author Luciano Galvao
	 * @date 22/05/2013
	 */
	public void atualizarIndicadorRemuneraCobrancaAdm(GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String comandoUpdate;

		try{
			// Atualiza em Debito Automatico a Data Exclusao com a data corrente
			comandoUpdate = "update guia_pagamento_prestacao_hist " //
							+ " set gpph_icremuneracobrancaadm = :indicadorRemuneraCobrancaAdm " //
							+ " where gpag_id = :guiaPagamentoId "
							+ " and gpph_nnprestacao = :numeroPrestacao "
							+ " and dbtp_id = :debitoTipoId " + " and lict_id = :itemLancamentoContabilId";

			if(guiaPagamentoPrestacaoHistorico != null && guiaPagamentoPrestacaoHistorico.getComp_id() != null
							&& guiaPagamentoPrestacaoHistorico.getComp_id().getGuiaPagamentoId() != null
							&& guiaPagamentoPrestacaoHistorico.getComp_id().getNumeroPrestacao() != null
							&& guiaPagamentoPrestacaoHistorico.getComp_id().getDebitoTipoId() != null
							&& guiaPagamentoPrestacaoHistorico.getComp_id().getItemLancamentoContabilId() != null){

				session.createSQLQuery(comandoUpdate)
								.setShort("indicadorRemuneraCobrancaAdm",
												guiaPagamentoPrestacaoHistorico.getIndicadorRemuneraCobrancaAdministrativa())
								.setInteger("guiaPagamentoId", guiaPagamentoPrestacaoHistorico.getComp_id().getGuiaPagamentoId())
								.setShort("numeroPrestacao", guiaPagamentoPrestacaoHistorico.getComp_id().getNumeroPrestacao())
								.setInteger("debitoTipoId", guiaPagamentoPrestacaoHistorico.getComp_id().getDebitoTipoId())
								.setInteger("itemLancamentoContabilId",
												guiaPagamentoPrestacaoHistorico.getComp_id().getItemLancamentoContabilId()).executeUpdate();

			}else{
				throw new ErroRepositorioException("Chave primária não informada para atualização do GuiaPagamentoPrestacaoHistorico");
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * perf.
	 */

	public Collection pesquisarImovelCobrancaSituacao(Integer idImovel) throws ErroRepositorioException{

		Collection retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{
			consulta.append("select cbst_id as idCobrancaSituacao from imovel_cobranca_situacao ics ").append(
							"where ics.imov_id = :idImovel and ics.iscb_dtretiradacobranca is null ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaSituacao", Hibernate.INTEGER)
							.setInteger("idImovel", idImovel).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * Pesquisa a quantidade de Rotas que nao possui um Criterio definido para
	 * cada uma das Acoes de Cobrancas passadas no filtro
	 * 
	 * @author Victor Cisneiros
	 * @date 10/12/2008
	 * @author Virginia Melo
	 * @date 11/08/2009 Correcao da consulta.
	 */
	public Integer pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro)
					throws ErroRepositorioException{

		Integer retorno = 0;
		Session session = HibernateUtil.getSession();

		String where = "";
		if(filtro.getIdGrupoCobranca() != null){
			where += " AND r.cbgr_id = :idGrupoCobranca ";
		}
		if(filtro.getIdsRotas() != null && filtro.getIdsRotas().size() > 0){
			where += " AND r.rota_id IN ( :idsRotas ) ";
		}

		try{

			String consulta = "SELECT "
							+ "  count(*) as contador "
							+ "FROM ( "
							+ "select distinct (r.rota_id ) , (SELECT count(*) FROM rota_acao_criterio rac WHERE rac.rota_id = r.rota_id AND rac.cbac_id IN (:idsAcoesCobranca)) as existe_criterio "
							+ "from rota r "
							+ "where 1 = 1 "
							+ where
							+ "group by r.rota_id "
							+ "having (SELECT count(*) FROM rota_acao_criterio rac WHERE rac.rota_id = r.rota_id AND rac.cbac_id IN (:idsAcoesCobranca))  < "
							+ filtro.getIdsAcoesCobranca().size() + ")";

			/*
			 * String consulta = "SELECT count(*) as count FROM ( " + "SELECT "
			 * + "r.rota_id, " +
			 * "( SELECT count(*) FROM rota_acao_criterio rac WHERE rac.rota_id = r.rota_id AND rac.cbac_id IN (:idsAcoesCobranca) ) as existe_criterio "
			 * + "FROM rota r WHERE 1 = 1 " + where +
			 * ") as numero_criterios_por_rotas WHERE existe_criterio < " +
			 * filtro.getIdsAcoesCobranca().size();
			 */

			SQLQuery q = session.createSQLQuery(consulta);

			q.addScalar("contador", Hibernate.INTEGER);

			if(filtro.getIdGrupoCobranca() != null){
				q.setInteger("idGrupoCobranca", filtro.getIdGrupoCobranca());
			}
			if(filtro.getIdsRotas() != null && filtro.getIdsRotas().size() > 0){
				q.setParameterList("idsRotas", filtro.getIdsRotas());
			}
			q.setParameterList("idsAcoesCobranca", filtro.getIdsAcoesCobranca());

			retorno = (Integer) q.uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0676] - Consultar Resumo da Negativacao
	 * Pesquisa resumo Negativacao
	 * 
	 * @author Marcio Roberto
	 * @date 28/02/2008
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection consultarNegativacao(DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper, int tipo)
					throws ErroRepositorioException{

		Collection<NegativacaoHelper> retorno = new ArrayList<NegativacaoHelper>();

		Session session = HibernateUtil.getSession();

		String consulta = "";

		try{

			switch(tipo){
				case 1:
					// [SB0001] - Seleciona quantidade de negativacoes
					// incluidas.
					consulta = " select neg.id, " + " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " where 1 = 1 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper) + " group by neg.id "
									+ " order by neg.id ";
					break;
				case 2:
					// [SB0002] - Seleciona quantidade de negativacoes incluidas
					// por situacao do Debito
					consulta = " select stcb.id, stcb.descricao, "
									+ " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " inner join re.cobrancaDebitoSituacao stcb " + " where 1 = 1 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper)
									+ " group by stcb.id, stcb.descricao " + " order by stcb.id, stcb.descricao ";
					break;

				case 3:
					// [SB0003] - Seleciona quantidade de negativacoes por
					// situacao de NegativAcao - RNEG_ICNEGATIVCONFIRMADA = 1.
					consulta = " select neg.id, " + " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " where 1 = 1 " + " and re.indicadorNegativacaoConfirmada = 1 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper) + " group by neg.id "
									+ " order by neg.id ";
					break;

				case 4:
					// [SB0003] - Seleciona quantidade de negativacoes por
					// situacao de NegativAcao - RNEG_ICNEGATIVCONFIRMADA = 2.
					consulta = " select neg.id, " + " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " where 1 = 1 " + " and re.indicadorNegativacaoConfirmada = 2 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper) + " group by neg.id "
									+ " order by neg.id ";
					break;

				case 5:
					// [SB0004] - Seleciona quantidade de negativacoes por
					// situacao de NegativAcao e cobranca do Debito.
					// [SB0002] - Seleciona quantidade de negativacoes incluidas
					// por situacao do Debito
					consulta = " select stcb.id, stcb.descricao, "
									+ " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " inner join re.cobrancaDebitoSituacao stcb " + " where 1 = 1 "
									+ " and re.indicadorNegativacaoConfirmada = 1 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper)
									+ " group by stcb.id, stcb.descricao " + " order by stcb.id, stcb.descricao ";
					break;
				case 6:
					// [SB0002] - Seleciona quantidade de negativacoes incluidas
					// por situacao do Debito
					consulta = " select stcb.id, stcb.descricao, "
									+ " sum(re.quantidadeInclusoes),sum(re.valorDebito), sum(re.valorPendente), "
									+ " sum(re.valorPago), sum(re.valorParcelado), sum(re.valorCancelado) " + " from ResumoNegativacao re "
									+ " inner join re.negativador neg " + " inner join re.cobrancaDebitoSituacao stcb " + " where 1 = 1 "
									+ " and re.indicadorNegativacaoConfirmada = 2 "
									+ this.criarCondicionaisResumosHQL(dadosConsultaNegativacaoHelper)
									+ " group by stcb.id, stcb.descricao " + " order by stcb.id, stcb.descricao ";
					break;
				default:
					break;
			}

			if(tipo == 2){
				// tipo 2

			}else if(tipo == 1){
				// tipo 1

			}

			List<Object[]> lista = session.createQuery(consulta).list();

			for(Object obj : lista){
				Object[] array = (Object[]) obj;

				NegativacaoHelper negativacao = null;

				if(tipo == 2 || tipo == 5 || tipo == 6){

					negativacao = new NegativacaoHelper(Integer.valueOf(array[0].toString()), array[1].toString(), Integer.valueOf(array[2]
									.toString()), new BigDecimal(Double.valueOf(array[3].toString())), new BigDecimal(
									Double.valueOf(array[4].toString())), new BigDecimal(Double.valueOf(array[5].toString())),
									new BigDecimal(Double.valueOf(array[6].toString())),
									new BigDecimal(Double.valueOf(array[7].toString())));

				}else{

					negativacao = new NegativacaoHelper(Integer.valueOf(array[0].toString()), Integer.valueOf(array[1].toString()),
									new BigDecimal(Double.valueOf(array[2].toString())),
									new BigDecimal(Double.valueOf(array[3].toString())),
									new BigDecimal(Double.valueOf(array[4].toString())),
									new BigDecimal(Double.valueOf(array[5].toString())),
									new BigDecimal(Double.valueOf(array[6].toString())));

				}

				retorno.add(negativacao);

			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public String criarCondicionaisResumosHQL(DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper){

		String sql = " ";
		String restricao = "";
		/*
		 * A partir daqui sera montanda a parte dos condicionais da query estas
		 * condicionais serao usadas se necessarias, o q determina seus usos sa£o
		 * os parametros que veem carregados no objeto
		 * InformarDadosGeracaoRelatorioConsultaHelper que a recebido do caso de
		 * uso [UC0304] Informar Dados para Geracao de Relatorio ou Consulta
		 */
		if(dadosConsultaNegativacaoHelper != null){

			// Inicio Parametros simples
			if(dadosConsultaNegativacaoHelper.getIdNegativador() != null){
				sql = sql + " and re.negativador.id = " + dadosConsultaNegativacaoHelper.getIdNegativador();
			}

			// if
			// (dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoInicio()
			// != null) {
			// if
			// (dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoFim()
			// != null) {
			// sql = sql
			// +
			// " and (re.dataProcessamentoEnvio >= '"+Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper
			// .getPeriodoEnvioNegativacaoInicio())+"'"
			// +
			// " and re.dataProcessamentoEnvio <= '"+Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper
			// .getPeriodoEnvioNegativacaoFim())+"'"
			// + ")";
			// }
			//
			// }

			if(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoInicio() != null
							&& dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoFim() != null){
				sql = sql + " and (re.dataProcessamentoEnvio >= '"
								+ Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoInicio())
								+ "'" + " and re.dataProcessamentoEnvio <= '"
								+ Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoFim()) + "'"
								+ ")";

			}else{
				if(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoInicio() != null){
					sql = sql + " and re.dataProcessamentoEnvio >= '"
									+ Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoInicio())
									+ "'";
				}
				if(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoFim() != null){
					sql = sql + " and re.dataProcessamentoEnvio <= '"
									+ Util.formatarDataComTracoAAAAMMDD(dadosConsultaNegativacaoHelper.getPeriodoEnvioNegativacaoFim())
									+ "'";
				}
			}

			if(dadosConsultaNegativacaoHelper.getNumeroExecucaoResumoNegativacao() != null){
				sql = sql + " and re.numeroExecucaoResumoNegativacao = "
								+ dadosConsultaNegativacaoHelper.getNumeroExecucaoResumoNegativacao();
			}

			if(dadosConsultaNegativacaoHelper.getColecaoCobrancaGrupo() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoCobrancaGrupo().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoCobrancaGrupo().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoCobrancaGrupo().iterator();
					while(it.hasNext()){
						CobrancaGrupo obj = (CobrancaGrupo) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoCobrancaGrupo().iterator();
					CobrancaGrupo cobrancaGrupo = null;
					restricao = restricao + " and re.cobrancaGrupo.id in (";
					while(iterator.hasNext()){
						cobrancaGrupo = (CobrancaGrupo) iterator.next();
						restricao = restricao + cobrancaGrupo.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoGerenciaRegional() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoGerenciaRegional().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoGerenciaRegional().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoGerenciaRegional().iterator();
					while(it.hasNext()){
						GerenciaRegional gerReg = (GerenciaRegional) it.next();
						if(gerReg != null && gerReg.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoGerenciaRegional().iterator();
					GerenciaRegional gerenciaRegional = null;
					restricao = restricao + " and re.gerenciaRegional.id in (";
					while(iterator.hasNext()){
						gerenciaRegional = (GerenciaRegional) iterator.next();
						restricao = restricao + gerenciaRegional.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoUnidadeNegocio() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoUnidadeNegocio().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoUnidadeNegocio().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoUnidadeNegocio().iterator();
					while(it.hasNext()){
						UnidadeNegocio obj = (UnidadeNegocio) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoUnidadeNegocio().iterator();
					UnidadeNegocio unidadeNegocio = null;
					restricao = restricao + " and re.unidadeNegocio.id in (";
					while(iterator.hasNext()){
						unidadeNegocio = (UnidadeNegocio) iterator.next();
						restricao = restricao + unidadeNegocio.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";

				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoCategoria() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoCategoria().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoCategoria().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoCategoria().iterator();
					while(it.hasNext()){
						Categoria obj = (Categoria) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoCategoria().iterator();
					Categoria categoria = null;
					restricao = restricao + " and re.categoria.id in (";
					while(iterator.hasNext()){
						categoria = (Categoria) iterator.next();
						restricao = restricao + categoria.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoClienteTipo() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoClienteTipo().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoClienteTipo().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoClienteTipo().iterator();
					while(it.hasNext()){
						ClienteTipo obj = (ClienteTipo) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoClienteTipo().iterator();
					ClienteTipo clienteTipo = null;
					restricao = restricao + " and re.clienteTipo.id in (";
					while(iterator.hasNext()){
						clienteTipo = (ClienteTipo) iterator.next();
						restricao = restricao + clienteTipo.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoEsferaPoder() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoEsferaPoder().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoEsferaPoder().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoEsferaPoder().iterator();
					while(it.hasNext()){
						EsferaPoder obj = (EsferaPoder) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoEsferaPoder().iterator();
					EsferaPoder esferaPoder = null;
					restricao = restricao + " and re.esferaPoder.id  in (";
					while(iterator.hasNext()){
						esferaPoder = (EsferaPoder) iterator.next();
						restricao = restricao + esferaPoder.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getColecaoImovelPerfil() != null
							&& !dadosConsultaNegativacaoHelper.getColecaoImovelPerfil().isEmpty()){
				boolean consulta = true;
				if(dadosConsultaNegativacaoHelper.getColecaoImovelPerfil().size() == 1){
					Iterator it = dadosConsultaNegativacaoHelper.getColecaoImovelPerfil().iterator();
					while(it.hasNext()){
						ImovelPerfil obj = (ImovelPerfil) it.next();
						if(obj != null && obj.getId() == -1){
							consulta = false;
						}
					}
				}
				if(consulta){
					Iterator iterator = dadosConsultaNegativacaoHelper.getColecaoImovelPerfil().iterator();
					ImovelPerfil imovelPerfil = null;
					restricao = restricao + " and re.imovelPerfil.id  in (";
					while(iterator.hasNext()){
						imovelPerfil = (ImovelPerfil) iterator.next();
						restricao = restricao + imovelPerfil.getId() + ",";
					}
					restricao = Util.removerUltimosCaracteres(restricao, 1);
					restricao = restricao + ") ";
				}
			}

			if(dadosConsultaNegativacaoHelper.getIdEloPolo() != null){
				sql = sql + " and re.localidade.localidade.id = " + dadosConsultaNegativacaoHelper.getIdEloPolo();
			}

			if(dadosConsultaNegativacaoHelper.getIdLocalidade() != null){
				sql = sql + " and re.localidade.id = " + dadosConsultaNegativacaoHelper.getIdLocalidade();
			}

			if(dadosConsultaNegativacaoHelper.getIdSetorComercial() != null){
				sql = sql + " and re.setorComercial.id = " + dadosConsultaNegativacaoHelper.getIdSetorComercial();
			}

			if(dadosConsultaNegativacaoHelper.getIdQuadra() != null){
				sql = sql + " and re.quadra.id = " + dadosConsultaNegativacaoHelper.getIdQuadra();
			}

			// if (dadosConsultaNegativacaoHelper.getIdGrupoCobranca() != null)
			// {
			// sql = sql
			// + " and re.cobrancaGrupo.id = "
			// + dadosConsultaNegativacaoHelper
			// .getIdGrupoCobranca();
			// }
			//
			// if (dadosConsultaNegativacaoHelper.getIdGerenciaRegional() !=
			// null) {
			// sql = sql
			// + " and re.gerenciaRegional.id = "
			// + dadosConsultaNegativacaoHelper
			// .getIdGerenciaRegional();
			// }
			//
			// if (dadosConsultaNegativacaoHelper.getIdImovelPerfil() != null) {
			// sql = sql
			// + " and re.imovelPerfil.id = "
			// + dadosConsultaNegativacaoHelper
			// .getIdImovelPerfil();
			// }
			//
			// if (dadosConsultaNegativacaoHelper.getIdCategoria() != null) {
			// sql = sql
			// + " and re.categoria.id = "
			// + dadosConsultaNegativacaoHelper
			// .getIdCategoria();
			// }
			//
			// if (dadosConsultaNegativacaoHelper.getIdEsferaPoder() != null) {
			// sql = sql
			// + " and re.esferaPoder.id = "
			// + dadosConsultaNegativacaoHelper
			// .getIdEsferaPoder();
			// }
		}

		String retorno = sql + restricao;

		return retorno;
	}

	/**
	 * Pesquisa os debitos a cobrar pelo documento de cobranca
	 * 
	 * @param cobrancaDocumento
	 * @return CobrancaDocumentoItem
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumentoItem> selecionarCobrancaDocumentoItemReferenteDebitoACobrar(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ").append("FROM CobrancaDocumentoItem cdit ")
							.append("INNER JOIN FETCH cdit.debitoACobrarGeral dage ")
							.append("INNER JOIN FETCH dage.debitoACobrar debACob ")
							.append("WHERE cdit.cobrancaDocumento = :idCobrancaDocumento ")
							.append("ORDER BY debACob.anoMesReferenciaDebito ");

			colecaoCobrancaDocumentoItem = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return colecaoCobrancaDocumentoItem;
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 *         Pesquisa os pre-parcelamentos pelo documento de cobranca
	 * @param cobrancaDocumento
	 * @return CobrancaDocumentoItem
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumentoItem> obterCobrancaDocumentoItemPrePacelamento(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = new ArrayList();

		Collection colecao = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit, debACob, conta, guia, credARea ").append("FROM CobrancaDocumentoItem cdit ")
							.append("LEFT JOIN cdit.debitoACobrarGeral debACob ").append("LEFT JOIN cdit.contaGeral conta ")
							.append("LEFT JOIN cdit.guiaPagamentoGeral guia ").append("LEFT JOIN cdit.creditoARealizarGeral credARea ")
							.append("WHERE cdit.cobrancaDocumento = :idCobrancaDocumento ");

			colecao = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list()));

			Iterator it = colecao.iterator();

			while(it.hasNext()){
				Object[] obj = (Object[]) it.next();

				for(int i = 1; i < obj.length; i++){
					if(obj[i] instanceof ContaGeral){
						((CobrancaDocumentoItem) obj[0]).setContaGeral((ContaGeral) obj[i]);
						break;
					}else if(obj[i] instanceof DebitoACobrarGeral){
						((CobrancaDocumentoItem) obj[0]).setDebitoACobrarGeral((DebitoACobrarGeral) obj[i]);
						break;
					}else if(obj[i] instanceof GuiaPagamentoGeral){
						((CobrancaDocumentoItem) obj[0]).setGuiaPagamentoGeral((GuiaPagamentoGeral) obj[i]);
						if(((CobrancaDocumentoItem) obj[0]).getGuiaPagamentoGeral().getGuiaPagamento() != null){
							Set<GuiaPagamentoPrestacao> guiaPagtoPrest = pesquisarGuiaPagamentoPrestacao(((CobrancaDocumentoItem) obj[0])
											.getGuiaPagamentoGeral());
							if(guiaPagtoPrest.isEmpty()){
								((CobrancaDocumentoItem) obj[0]).getGuiaPagamentoGeral().getGuiaPagamento()
												.setGuiasPagamentoPrestacao(new TreeSet<GuiaPagamentoPrestacao>());
							}else{
								((CobrancaDocumentoItem) obj[0]).getGuiaPagamentoGeral().getGuiaPagamento()
												.setGuiasPagamentoPrestacao(guiaPagtoPrest);
							}
						}
						break;
					}else if(obj[i] instanceof CreditoARealizarGeral){
						((CobrancaDocumentoItem) obj[0]).setCreditoARealizarGeral((CreditoARealizarGeral) obj[i]);
						break;
					}
				}
				colecaoCobrancaDocumentoItem.add((CobrancaDocumentoItem) obj[0]);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return colecaoCobrancaDocumentoItem;
	}

	private Set<GuiaPagamentoPrestacao> pesquisarGuiaPagamentoPrestacao(GuiaPagamentoGeral guia) throws ErroRepositorioException{

		Set<GuiaPagamentoPrestacao> colecaoGuiaPagamentoPrestacao = new TreeSet<GuiaPagamentoPrestacao>(new TreeSet(new Comparator() {

			public int compare(Object a, Object b){

				String chave1 = ((GuiaPagamentoPrestacao) a).getComp_id().toString();
				String chave2 = ((GuiaPagamentoPrestacao) b).getComp_id().toString();

				return chave1.compareTo(chave2);

			}
		}));

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			if(guia.getGuiaPagamento() != null){
				consulta.append("SELECT guiaPagtoPrest ").append("FROM GuiaPagamentoPrestacao guiaPagtoPrest ")
								.append("where guiaPagtoPrest.guiaPagamento.id = :guiaPrestacao ");

				colecaoGuiaPagamentoPrestacao.addAll(session.createQuery(consulta.toString())
								.setInteger("guiaPrestacao", guia.getGuiaPagamento().getId()).list());
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return colecaoGuiaPagamentoPrestacao;
	}

	/**
	 * Retorno um objeto AcaoCobrancaEfeito do ID informado
	 * 
	 * @author anishimura
	 * @date 22/04/2010
	 */
	public AcaoCobrancaEfeito pesquisarAcaoCobrancaEfeitoPorId(String idAcaoCobrancaEfeito) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		AcaoCobrancaEfeito acaoCobrancaEfeito = null;
		try{
			Criteria criteria = session.createCriteria(AcaoCobrancaEfeito.class);
			criteria.add(Restrictions.eq("id", Integer.valueOf(idAcaoCobrancaEfeito)));
			acaoCobrancaEfeito = (AcaoCobrancaEfeito) criteria.uniqueResult();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
		return acaoCobrancaEfeito;

	}

	/**
	 * @author: Andre Nishimura
	 * @date: 23/04/2010 Metodo para pesquisar todos os CobrancaDocumentos a
	 *        partir de uma conta.
	 */
	public Collection<Object[]> pesquisarDocumentoCobrancaConta(Integer idConta) throws ErroRepositorioException{

		// TODO Auto-generated method stub

		Collection<Object[]> colecaoCobrancaDocumento = new ArrayList<Object[]>();
		Session session = HibernateUtil.getSession();

		StringBuffer consulta1 = new StringBuffer();
		StringBuffer consulta2 = new StringBuffer();

		consulta1.append(" SELECT cd.cbdo_id, cd.cbac_id ");
		consulta1.append(" FROM cobranca_documento cd ");
		consulta1.append(" INNER JOIN cobranca_documento_item items ON cd.cbdo_id = items.cbdo_id ");
		consulta1.append(" LEFT JOIN conta conta ON items.cnta_id = conta.cnta_id ");
		consulta1.append(" WHERE items.cnta_id = :idConta ");

		consulta2.append(" SELECT cd.cbdo_id, cd.cbdo_tmemissao, cd.imov_id, cd.cbac_id, ");
		consulta2.append("  items.cdit_id, items.cnta_id, conta.cnta_id id_cnta, ");
		consulta2.append(" conta.cnta_amreferenciaconta as referencia, ");
		consulta2.append(" conta.cnta_vlagua as vlAgua, ");
		consulta2.append(" conta.cnta_vlesgoto as vlEsgoto, ");
		consulta2.append(" conta.cnta_vldebitos as vlDebitos, ");
		consulta2.append(" conta.cnta_vlcreditos as vlCreditos, ");
		consulta2.append(" conta.cnta_vlimpostos as vlImpostos ");
		consulta2.append(" FROM cobranca_documento cd ");
		consulta2.append(" INNER JOIN cobranca_documento_item items ON cd.cbdo_id = items.cbdo_id ");
		consulta2.append(" LEFT JOIN conta conta ON items.cnta_id = conta.cnta_id ");
		consulta2.append(" WHERE cd.cbdo_id = :idCobrDoc ");

		try{

			Collection<Object[]> colecaoTemporaria = session.createSQLQuery(consulta1.toString()).addScalar("cbdo_id", Hibernate.INTEGER)
							.addScalar("cbac_id", Hibernate.INTEGER).setInteger("idConta", idConta).list();

			Query query = session.createSQLQuery(consulta2.toString()).addScalar("cbdo_id", Hibernate.INTEGER)
							.addScalar("cbdo_tmemissao", Hibernate.DATE).addScalar("imov_id", Hibernate.INTEGER)
							.addScalar("cbac_id", Hibernate.INTEGER).addScalar("cdit_id", Hibernate.INTEGER)
							.addScalar("cnta_id", Hibernate.INTEGER).addScalar("id_cnta", Hibernate.INTEGER)
							.addScalar("referencia", Hibernate.INTEGER).addScalar("vlAgua", Hibernate.BIG_DECIMAL)
							.addScalar("vlEsgoto", Hibernate.BIG_DECIMAL).addScalar("vlDebitos", Hibernate.BIG_DECIMAL)
							.addScalar("vlCreditos", Hibernate.BIG_DECIMAL).addScalar("vlImpostos", Hibernate.BIG_DECIMAL);

			int[][] arrayIdsCobrAcao = new int[][] {new int[] {3, 5}, // Corte
			// e
			// Supressao
			new int[] {33}, // SPC-SP
			new int[] {34}, // Serasa
			new int[] {35}}; // SPC-BRASIL

			for(int i = 0; i < arrayIdsCobrAcao.length; i++){

				int idCobrDocMax = -1;
				int[] idsCobrAcao = arrayIdsCobrAcao[i];

				for(Iterator iterator = colecaoTemporaria.iterator(); iterator.hasNext();){

					Object[] campo = (Object[]) iterator.next();

					Integer idCobrDoc = (Integer) campo[0];
					Integer idCobrAcao = (Integer) campo[1];

					if(idCobrAcao == null || Arrays.binarySearch(idsCobrAcao, idCobrAcao) < 0){ // cbac_id
						// in
						// (3,
						// 5)
						continue;
					}
					if(idCobrDoc > idCobrDocMax){
						idCobrDocMax = idCobrDoc;
					}
				}

				if(idCobrDocMax > -1){
					colecaoCobrancaDocumento.addAll(query.setInteger("idCobrDoc", idCobrDocMax).list());
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta1 = null;
			consulta2 = null;
		}

		return colecaoCobrancaDocumento;
	}

	public Collection<EmissaoOSCobrancaHelper> pesquisarOS(Integer idComando, CobrancaAcaoAtividade tipoComandoAcaoCobranca){

		List<EmissaoOSCobrancaHelper> listaOS = new ArrayList<EmissaoOSCobrancaHelper>();

		StringBuffer hql = new StringBuffer("select l.id, s.codigo, q.numeroQuadra, count(distinct os.id) from OrdemServico os")
						.append("   join os.imovel im ").append("   join im.quadra q ").append("   join q.setorComercial s ")
						.append("   join s.localidade l").append("   join os.cobrancaDocumento dc")
						.append("   join dc.cobrancaDocumentoItems dci").append("   join dci.contaGeral cg")
						.append(" where os.dataEmissao is null").append("  and os.situacao = 1").append("  and cg.indicadorHistorico = 2");

		switch(tipoComandoAcaoCobranca){
			case CRONOGRAMA:
				hql.append(" and os.cobrancaAcaoAtividadeCronograma.id = :idComando");
				break;
			case COMANDO:
				hql.append(" and os.cobrancaAcaoAtividadeComando.id = :idComando");
				break;
		}

		hql.append(" group by l.id, s.codigo, q.numeroQuadra");

		Query qry = HibernateUtil.getSession().createQuery(hql.toString()).setInteger("idComando", idComando);

		List<Object[]> listaResultado = qry.list();

		if(listaResultado != null){
			for(Object[] item : listaResultado){
				EmissaoOSCobrancaHelper emissaoOS = new EmissaoOSCobrancaHelper();
				emissaoOS.setLocalidade((Integer) item[0]);
				emissaoOS.setSetor((Integer) item[1]);
				EmissaoOSCobrancaQuadraHelper quadras = new EmissaoOSCobrancaQuadraHelper();
				quadras.setNumeroQuadra((Integer) item[2]);
				quadras.setQuantidadeOS(new Long(item[3].toString()));
				quadras.setLocSetorQuadra(emissaoOS.getLocalidade().toString() + "-" + emissaoOS.getSetor().toString() + "-"
								+ String.valueOf(quadras.getNumeroQuadra()) + "-" + quadras.getQuantidadeOS());
				if(listaOS.contains(emissaoOS)){
					EmissaoOSCobrancaHelper _emissaoOS = listaOS.get(listaOS.indexOf(emissaoOS));
					_emissaoOS.getQuadras().add(quadras);
					listaOS.set(listaOS.indexOf(emissaoOS), _emissaoOS);
				}else{
					emissaoOS.getQuadras().add(quadras);
					listaOS.add(emissaoOS);
				}
			}
		}

		return listaOS;
	}

	public Collection<CobrancaSucesso> filtrarRelatorioFechamentoCobranca(Date periodoInicio, Date periodoFim, CobrancaAcao acao,
					Empresa empresa, CobrancaAcaoAtividadeComando acaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma acaoAtividadeCronograma, String stringComandoTipo) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Criteria criteria = session.createCriteria(CobrancaSucesso.class);
		if(acao != null){
			criteria.add(Restrictions.eq("cobrancaAcao", acao));
		}
		if(empresa != null){
			criteria.add(Restrictions.eq("empresa", empresa));
		}
		if(periodoInicio != null){
			criteria.add(Restrictions.between("dataVencimentoConta", periodoInicio, periodoFim));
		}

		if(stringComandoTipo != null){
			if(stringComandoTipo.equals("1")){
				if(acaoAtividadeCronograma != null){
					criteria.add(Restrictions.eq("comandoAcaoCronograma.id", acaoAtividadeCronograma.getId()));
				}else{
					criteria.add(Restrictions.isNotNull("comandoAcaoCronograma.id"));
				}

			}else if(stringComandoTipo.equals("2")){
				if(acaoAtividadeComando != null){
					criteria.add(Restrictions.eq("comandoAcaoEventual.id", acaoAtividadeComando.getId()));
				}else{
					criteria.add(Restrictions.isNotNull("comandoAcaoEventual.id"));
				}
			}
		}

		criteria.addOrder(Order.asc("cobrancaAcao"));
		criteria.addOrder(Order.asc("comandoAcaoEventual"));
		criteria.addOrder(Order.asc("comandoAcaoCronograma"));

		Collection<CobrancaSucesso> colecaoCobrancaSucesso = (Collection<CobrancaSucesso>) criteria.list();

		return colecaoCobrancaSucesso;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	public Collection<CobrancaAcaoAtividadeComando> filtrarComandosRelatorioEficienciaCobranca(Date dataInicial, Date dataFinal,
					CobrancaAcao acao, Empresa empresa, String[] setores, String[] grupos) throws ErroRepositorioException{

		// converter grupos
		Integer[] gruposInteger = null;
		if(grupos != null && grupos.length > 0){
			gruposInteger = new Integer[grupos.length];
			for(int i = 0; i < grupos.length; i++){
				if(!"".equals(grupos[i])){
					gruposInteger[i] = Integer.valueOf(grupos[i]);
				}
			}
		}
		Session hibernateSession = HibernateUtil.getSession();
		List<CobrancaAcaoAtividadeComando> retorno = null;

		try{
			Criteria criteria = hibernateSession.createCriteria(CobrancaAcaoAtividadeComando.class);
			criteria.createCriteria("cobrancaAcao", "ca");

			criteria.add(Restrictions.between("realizacao", dataInicial, dataFinal));

			if(acao != null){
				criteria.add(Restrictions.eq("ca.id", acao.getId()));
			}

			if(empresa != null){
				criteria.add(Restrictions.eq("empresa.id", empresa.getId()));
			}

			if(setores != null && setores.length > 0){
				for(int i = 0; i < setores.length; i++){
					if(!"".equals(setores[i])){
						criteria.add(Restrictions.or(Restrictions.ge("codigoSetorComercialInicial", Integer.valueOf(setores[i])),
										Restrictions.le("codigoSetorComercialFinal", Integer.valueOf(setores[i]))));
					}
				}
			}

			if(gruposInteger != null && gruposInteger.length > 0){
				criteria.add(Restrictions.in("cobrancaGrupo.id", gruposInteger));
			}

			criteria.addOrder(Order.asc("ca.id"));

			retorno = criteria.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(hibernateSession);
		}

		return retorno;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> filtrarCronogramasRelatorioEficienciaCobranca(Date dataInicial, Date dataFinal,
					CobrancaAcao acao, Empresa empresa, String[] setores, String[] grupos) throws ErroRepositorioException{

		// converter grupos
		Integer[] gruposInteger = null;
		if(grupos != null && grupos.length > 0){
			gruposInteger = new Integer[grupos.length];
			for(int i = 0; i < grupos.length; i++){
				if(!"".equals(grupos[i])){
					gruposInteger[i] = Integer.valueOf(grupos[i]);
				}
			}
		}

		Session hibernateSession = HibernateUtil.getSession();
		List<CobrancaAcaoAtividadeCronograma> retorno = null;

		try{
			Criteria criteria = hibernateSession.createCriteria(CobrancaAcaoAtividadeCronograma.class);
			criteria.add(Restrictions.between("realizacao", dataInicial, dataFinal));

			criteria.createCriteria("cobrancaAcaoCronograma", "cac");
			criteria.createCriteria("cac.cobrancaGrupoCronogramaMes", "cgcm");
			criteria.createCriteria("cgcm.cobrancaGrupo", "cg");
			criteria.createCriteria("cac.cobrancaAcao", "ca");

			if(acao != null){
				criteria.add(Restrictions.eq("ca.id", acao.getId()));
			}

			if(empresa != null){
				criteria.add(Restrictions.eq("empresa.id", empresa.getId()));
			}

			if(gruposInteger != null && gruposInteger.length > 0){
				criteria.add(Restrictions.in("cg.id", gruposInteger));
			}

			criteria.addOrder(Order.asc("ca.id"));
			retorno = criteria.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(hibernateSession);
		}

		return retorno;
	}

	/*
	 * RelatorioEficienciaCobranca
	 */
	public EficienciaCobrancaRelatorioHelper calcularRecuperacaoDividaRelatorioEficienciaCobranca(EficienciaCobrancaRelatorioHelper helper,
					String tipoComando) throws ErroRepositorioException{

		Session hibernateSession = HibernateUtil.getSession();

		try{
			Integer totalClientesRecuperacaoDivida = 0;
			Integer totalDebitosRecuperacaoDivida = 0;
			BigDecimal totalDividaRecuperada = BigDecimal.ZERO;

			// SUCESSO --------------------------------
			// QTD_CLIENTES = CSUC_QTCONTAS + CSUC_QTPARCELAS
			// QTD_DEBITOS = CSUC_QTCONTAS + CSUC_QTPARCELAS
			// DIVIDA RECUPERADA = CSUC_VLCONTAS + CSUC_VLPARCELAS
			Criteria criteriaSucesso = hibernateSession.createCriteria(CobrancaSucesso.class);

			// verifica qual o tipo do helper para fazer a restricao
			if(tipoComando.equals(EficienciaCobrancaRelatorioHelper.TIPO_COMANDO)){
				criteriaSucesso.add(Restrictions.eq("comandoAcaoEventual.id", helper.getIdComando()));
			}else if(tipoComando.equals(EficienciaCobrancaRelatorioHelper.TIPO_CRONOGRAMA)){
				criteriaSucesso.add(Restrictions.eq("comandoAcaoCronograma.id", helper.getIdComando()));
			}

			List<CobrancaSucesso> cobrancasSucesso = criteriaSucesso.list();

			for(Iterator iteratorCobrancasSucesso = cobrancasSucesso.iterator(); iteratorCobrancasSucesso.hasNext();){
				int cobrancaSucessoQuantidadeContas = 0;
				int cobrancaSucessoQuantidadeParcelas = 0;
				BigDecimal cobrancaSucessoValorContas = BigDecimal.ZERO;
				BigDecimal cobrancaSucessoValorParcelas = BigDecimal.ZERO;
				CobrancaSucesso cobrancaSucesso = (CobrancaSucesso) iteratorCobrancasSucesso.next();

				if(cobrancaSucesso.getQuantidadeParcelas() != null){
					cobrancaSucessoQuantidadeParcelas = cobrancaSucesso.getQuantidadeParcelas();
				}
				if(cobrancaSucesso.getQuantidadeContas() != null){
					cobrancaSucessoQuantidadeContas = cobrancaSucesso.getQuantidadeContas();
				}
				if(cobrancaSucesso.getValorContas() != null){
					cobrancaSucessoValorContas = cobrancaSucesso.getValorContas();
				}
				if(cobrancaSucesso.getValorParcelas() != null){
					cobrancaSucessoValorParcelas = cobrancaSucesso.getValorParcelas();
				}

				totalClientesRecuperacaoDivida += (cobrancaSucessoQuantidadeContas + cobrancaSucessoQuantidadeParcelas);
				totalDebitosRecuperacaoDivida += (cobrancaSucessoQuantidadeContas + cobrancaSucessoQuantidadeParcelas);
				totalDividaRecuperada = totalDividaRecuperada.add(cobrancaSucessoValorContas);
				totalDividaRecuperada = totalDividaRecuperada.add(cobrancaSucessoValorParcelas);
			}

			// PRODUTIVIDADE --------------------------------
			// QTD_CLIENTES = CPRO_QTCLIENTES
			// QTD_DEBITOS = CPRO_QTCONTAS
			// DIVIDA RECUPERADA = CPRO_VLDOCTOS
			Criteria criteriaProdutividade = hibernateSession.createCriteria(CobrancaProdutividade.class);
			// verifica qual o tipo do helper para fazer a restricao
			if(tipoComando.equals(EficienciaCobrancaRelatorioHelper.TIPO_COMANDO)){
				criteriaProdutividade.add(Restrictions.eq("comandoAcaoEventual.id", helper.getIdComando()));
			}else if(tipoComando.equals(EficienciaCobrancaRelatorioHelper.TIPO_CRONOGRAMA)){
				criteriaProdutividade.add(Restrictions.eq("comandoAcaoCronograma.id", helper.getIdComando()));
			}

			List<CobrancaProdutividade> cobrancasProdutividade = criteriaProdutividade.list();

			for(Iterator iteratorCobrancasProdutividade = cobrancasProdutividade.iterator(); iteratorCobrancasProdutividade.hasNext();){
				int cobrancaProdutividadeQuantidadeClientes = 0;
				int cobrancaProdutividadeQuantidadeContas = 0;
				BigDecimal cobrancaProdutividadeValorDocumentos = BigDecimal.ZERO;

				CobrancaProdutividade cobrancaProdutividade = (CobrancaProdutividade) iteratorCobrancasProdutividade.next();

				if(cobrancaProdutividade.getQuantidadeClientes() != null){
					cobrancaProdutividadeQuantidadeClientes = cobrancaProdutividade.getQuantidadeClientes();
				}
				if(cobrancaProdutividade.getQuantidadeContas() != null){
					cobrancaProdutividadeQuantidadeContas = cobrancaProdutividade.getQuantidadeContas();
				}
				if(cobrancaProdutividade.getValorDocumentos() != null){
					cobrancaProdutividadeValorDocumentos = cobrancaProdutividade.getValorDocumentos();
				}

				totalClientesRecuperacaoDivida += cobrancaProdutividadeQuantidadeClientes;
				totalDebitosRecuperacaoDivida += cobrancaProdutividadeQuantidadeContas;
				totalDividaRecuperada = totalDividaRecuperada.add(cobrancaProdutividadeValorDocumentos);
			}

			BigDecimal dividaCobrada = helper.getDividaCobradaInicioCobranca();
			if(dividaCobrada != null && !dividaCobrada.equals(BigDecimal.ZERO)){
				helper.setPorcentagemRecuperada((totalDividaRecuperada.multiply(BigDecimal.valueOf(100))).divide(dividaCobrada,
								MathContext.DECIMAL32));
			}

			helper.setQuantidadeClientesRecuperacaoDivida(totalClientesRecuperacaoDivida);
			helper.setQuantidadeDebitosRecuperacaoDivida(totalDebitosRecuperacaoDivida);
			helper.setDividaRecuperada(totalDividaRecuperada);
			helper.getDividaCobradaInicioCobranca();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(hibernateSession);
		}

		return helper;
	}

	public List<Integer> associarAgenteOS(Empresa empresa, Integer local, Integer setor, Integer[] quadras,
					CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando){

		Session session = HibernateUtil.getSession();

		StringBuffer listaIds = new StringBuffer("select distinct os.id from OrdemServico os ").append("   join os.imovel im")
						.append("   join im.quadra q").append("   join q.setorComercial setor").append("   join setor.localidade loc")
						.append("   join os.cobrancaDocumento dc").append("   join dc.cobrancaDocumentoItems dci")
						.append("   join dci.contaGeral cg").append("  where loc.id = :idLocalidade")
						.append("     and setor.codigo = :codigoSetor").append("     and os.dataEmissao is null")
						.append("     and os.situacao = 1").append("     and cg.indicadorHistorico = 2");

		switch(tipoComandoAcaoCobranca){
			case CRONOGRAMA:
				listaIds.append(" and os.cobrancaAcaoAtividadeCronograma.id = :idComando");
				break;
			case COMANDO:
				listaIds.append(" and os.cobrancaAcaoAtividadeComando.id = :idComando");
				break;
		}

		listaIds.append(" and q.numeroQuadra in(:idsQuadras)");

		Query qryConsulta = session.createQuery(listaIds.toString());
		qryConsulta.setParameterList("idsQuadras", quadras);
		qryConsulta.setInteger("idComando", idComando);
		qryConsulta.setInteger("idLocalidade", local);
		qryConsulta.setInteger("codigoSetor", setor);

		List<Integer> result = qryConsulta.list();

		int qtdBlocosConsultas = Util.dividirArredondarResultado(result.size(),
						ConstantesSistema.QUANTIDADE_ASSOCIAR_AGENTES_ORDEM_SERVICO, BigDecimal.ROUND_UP);
		for(int i = 0; i < qtdBlocosConsultas; i++){
			List<Integer> blocoIds = new ArrayList<Integer>();
			blocoIds.addAll(Util.obterSubListParaPaginacao(result, i, ConstantesSistema.QUANTIDADE_ASSOCIAR_AGENTES_ORDEM_SERVICO));

			Integer[] arrayIds = new Integer[blocoIds.size()];
			blocoIds.toArray(arrayIds);

			associaOrdemEmpresa(arrayIds, empresa, session);
			atualizarEmpresaDocumentoCobranca(arrayIds, empresa, session);
			session.flush();
			session.clear();
		}

		session.close();
		return result;
	}

	public void associaOrdemEmpresa(Integer[] idsOrdens, Empresa empresa, Session session){

		StringBuffer hqlUpdate = new StringBuffer("update OrdemServico as os set os.agente = :empresa, os.dataEmissao = :dataEmissao")
						.append(" where os.id in (:idsOs) ");

		Query qry = session.createQuery(hqlUpdate.toString()).setEntity("empresa", empresa)
						.setTimestamp("dataEmissao", new Timestamp(new Date().getTime())).setParameterList("idsOs", idsOrdens);
		qry.executeUpdate();
	}

	public void atualizarEmpresaDocumentoCobranca(Integer[] idsOrdens, Empresa empresa, Session session){

		StringBuffer hql = new StringBuffer("select distinct cd.id from OrdemServico os").append(" join os.cobrancaDocumento cd ").append(
						" where os.id in (:idsOs)) ");

		Query qry = session.createQuery(hql.toString()).setParameterList("idsOs", idsOrdens);

		List<Integer> result = qry.list(); // Ids Documento Cobranca

		StringBuffer hqlUpdate = new StringBuffer(
						"update CobrancaDocumento cd set cd.empresa = :empresa where cd.id in(:idsDocumentoCobranca)");

		Query qryUpdate = session.createQuery(hqlUpdate.toString()).setEntity("empresa", empresa)
						.setParameterList("idsDocumentoCobranca", result);

		qryUpdate.executeUpdate();
	}

	public List<OrdemServico> getOsCancelar(CobrancaAcaoAtividade tipoComandoAcaoCobranca, Integer idComando){

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		hql.append("select o from OrdemServico o").append("      where o.dataEmissao is null");
		// .append("        and o.situacao = 1");

		switch(tipoComandoAcaoCobranca){
			case CRONOGRAMA:
				hql.append(" and o.cobrancaAcaoAtividadeCronograma.id = :idComando");
				break;
			case COMANDO:
				hql.append(" and o.cobrancaAcaoAtividadeComando.id = :idComando");
				break;
		}

		hql.append(" and (select count(cg.id) from CobrancaDocumentoItem cdi join cdi.contaGeral cg")
						.append(" where cdi.cobrancaDocumento.id = o.cobrancaDocumento.id and cg.indicadorHistorico = 1) ")
						.append(" = ")
						.append(" (select count(*) from CobrancaDocumentoItem x where x.cobrancaDocumento.id = o.cobrancaDocumento.id and x.contaGeral.id is not null) ");

		Query qry = session.createQuery(hql.toString()).setInteger("idComando", idComando);
		List<OrdemServico> ordensCancelar = qry.list();
		session.close();

		return ordensCancelar;
	}

	public Integer somatorioQtdContaCobrancaSucesso(CobrancaAcaoAtividadeComando cacm, CobrancaAcaoAtividadeCronograma caac,
					Integer qtdDiasVencidosMin, Integer qtdDiasVencidosMax) throws ErroRepositorioException{

		Integer retorno = 0;
		Session sessao = HibernateUtil.getSession();
		try{
			Criteria criteria = sessao.createCriteria(CobrancaSucesso.class);
			if(qtdDiasVencidosMax == 0){
				criteria.add(Restrictions.gt("diasVencidos", 180));
			}else{
				criteria.add(Restrictions.between("diasVencidos", qtdDiasVencidosMin, qtdDiasVencidosMax));
			}
			if(cacm != null){
				criteria.add(Restrictions.eq("comandoAcaoCronograma.id", cacm.getId()));

			}else{
				criteria.add(Restrictions.eq("comandoAcaoEventual.id", caac.getId()));
			}
			criteria.add(Restrictions.isNotNull("valorContas"));
			criteria.setProjection(Projections.projectionList().add(Projections.sum("quantidadeContas")));
			retorno = (Integer) criteria.uniqueResult();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	public BigDecimal somatorioValorContaCobrancaSucesso(CobrancaAcaoAtividadeComando cacm, CobrancaAcaoAtividadeCronograma caac,
					Integer qtdDiasVencidosMin, Integer qtdDiasVencidosMax) throws ErroRepositorioException{

		BigDecimal retorno = BigDecimal.ZERO;
		Session sessao = HibernateUtil.getSession();
		try{
			Criteria criteria = sessao.createCriteria(CobrancaSucesso.class);
			if(qtdDiasVencidosMax == 0){
				criteria.add(Restrictions.gt("diasVencidos", 180));
			}else{
				criteria.add(Restrictions.between("diasVencidos", qtdDiasVencidosMin, qtdDiasVencidosMax));
			}
			if(cacm != null){
				criteria.add(Restrictions.eq("comandoAcaoCronograma.id", cacm.getId()));

			}else{
				criteria.add(Restrictions.eq("comandoAcaoEventual.id", caac.getId()));
			}
			criteria.setProjection(Projections.projectionList().add(Projections.sum("valorContas")));
			retorno = (BigDecimal) criteria.uniqueResult();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	public Collection pesquisarBairroPorGrupoEmQuadraRota(Integer grupo) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();
		Collection retorno = null;
		try{
			Criteria criteria = sessao.createCriteria(Rota.class);
			criteria.add(Restrictions.eq(FiltroRota.COBRANCA_GRUPO_ID, grupo));
			criteria.createCriteria("quadras", "quadra");
			// criteria.createCriteria("quadra.bairro","bairro");
			criteria.createAlias("quadra.bairro", "bairro");
			criteria.setProjection(Projections.groupProperty("quadra.bairro"));
			criteria.setProjection(Projections.groupProperty("bairro.id"));
			retorno = criteria.list();
			if(retorno != null && !retorno.isEmpty()){
				Criteria criteria2 = sessao.createCriteria(Bairro.class);
				criteria2.add(Restrictions.in(FiltroBairro.ID, retorno));
				criteria2.addOrder(Order.asc(FiltroBairro.NOME));
				retorno = criteria2.list();
			}
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	public Collection filtrarAcompanhamentoExecucaoServicoCobranca(Integer comandoTipo, Integer comandoCronograma, Integer comandoEventual,
					Integer cobrancaAcao, Date periodoInicial, Date periodoFinal, Integer situacao, Integer religado, Integer servico,
					Integer localidade, Integer grupo, String[] bairro, String[] setorComercial) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();
		List<CobrancaDocumento> retorno = null;
		String hql = "select cbdo from CobrancaDocumento cbdo " + "inner join fetch cbdo.ordensServico orse ";
		/*
		 * "left join fetch orse.imovel imov " +
		 * "left join fetch imov.ligacaoAgua lagu " +
		 * "left join fetch lagu.corteTipo corteTipo "+
		 * "left join fetch lagu.supressaoTipo supressaoTipo "+
		 * "left join fetch imov.setorComercial setor "+
		 * "left join fetch imov.quadra quadra "+
		 * "left join fetch imov.rota rota "+
		 * "left join fetch rota.cobrancaGrupo grupo "+
		 * "left join fetch lagu.hidrometroInstalacaoHistorico hidi " +
		 * "left join fetch imov.clienteImoveis clim " +
		 * "left join fetch clim.cliente clie " +
		 * "left join fetch clie.clienteFones cfon " +
		 * "left join fetch imov.logradouroBairro.bairro bair " +
		 * "left join fetch bair.municipio municipio "+
		 * "left join fetch municipio.unidadeFederacao uf "+
		 * "left join fetch imov.enderecoReferencia endRef "+
		 * "left join fetch imov.logradouroCep logCep "+
		 * "left join fetch logCep.cep "+
		 * "left join fetch logCep.logradouro logradouro "+
		 * "left join fetch logradouro.logradouroTitulo tit "+
		 * "left join fetch logradouro.logradouroTipo logTipo "+
		 * "left join fetch orse.atendimentoMotivoEncerramento amen "; if
		 * (comandoTipo != null) { if (comandoTipo == 1) { hql = hql +
		 * "left join fetch cbdo.cobrancaAcaoAtividadeComando.cobrancaGrupo cbgr1 "
		 * ; } else if (comandoTipo == 2) { hql = hql +
		 * "left join fetch cbdo.cobrancaAcaoAtividadeCronograma.cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.cobrancaGrupo cbgr2 "
		 * ; } else if (comandoTipo == 3) { hql = hql +
		 * "left join fetch cbdo.cobrancaAcaoAtividadeComando.cobrancaGrupo cbgr1 "
		 * +
		 * "left join fetch cbdo.cobrancaAcaoAtividadeCronograma.cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.cobrancaGrupo cbgr2 "
		 * ; } }
		 */
		hql = hql + "where ";

		if(comandoCronograma != null){
			hql = hql + " cbdo.cobrancaAcaoAtividadeCronograma.id = :comandoCronograma and ";

		}else if(comandoEventual != null){
			hql = hql + " cbdo.cobrancaAcaoAtividadeComando.id = :comandoEventual and ";
		}
		if(grupo != null){
			hql = hql + " orse.imovel.rota.cobrancaGrupo.id = :grupo and ";
		}
		if(cobrancaAcao != null){
			hql = hql + " cbdo.cobrancaAcao.id = :cobrancaAcao and ";
		}
		if(situacao != null){
			if(situacao == 1){ // Ordem Servico Pendente
				hql = hql + " orse.situacao <> 2 and orse.dataEncerramento is null and ";
			}else if(situacao == 2){ // Ordem Servico Encerrada
				hql = hql + " orse.situacao = 2 and orse.dataEncerramento is not null and ";
			}
		}
		if(religado != null){
			if(religado == 1){ // imovel religado
				hql = hql + " orse.imovel.ligacaoAguaSituacao = 3 and orse.imovel.ligacaoAgua.dataReligacao is not null and ";
			}else if(religado == 2){ // imovel ainda nao religado
				hql = hql + " orse.imovel.ligacaoAguaSituacao <> 3 and ";
			}
		}
		if(servico != null){
			hql = hql + " orse.servicoTipo.id = :servico and ";
		}
		if(localidade != null){
			hql = hql + " orse.imovel.localidade.id = :localidade and ";
		}
		if(bairro != null && bairro.length > 0){
			hql = hql + " orse.imovel.logradouroBairro.bairro.id in (:bairro) and ";
		}

		if(setorComercial != null && setorComercial.length > 0){
			hql = hql + " orse.imovel.setorComercial.id in (:setorComercial) and ";
		}
		if(periodoFinal != null && periodoInicial != null){
			hql = hql + "cbdo.emissao >= :periodoInicial and cbdo.emissao <= :periodoFinal and ";
		}
		hql = hql.substring(0, (hql.length() - 4));
		hql = hql + " order by cbdo.imovel.id ";
		try{

			Query qry = sessao.createQuery(hql);

			if(comandoCronograma != null){
				qry.setInteger("comandoCronograma", comandoCronograma);
			}
			if(comandoEventual != null){
				qry.setInteger("comandoEventual", comandoEventual);
			}
			if(grupo != null){
				qry.setInteger("grupo", grupo);
			}
			if(cobrancaAcao != null){
				qry.setInteger("cobrancaAcao", cobrancaAcao);
			}
			if(servico != null){
				qry.setInteger("servico", servico);
			}
			if(localidade != null){
				qry.setInteger("localidade", localidade);
			}
			if(periodoFinal != null && periodoInicial != null){
				qry.setDate("periodoInicial", periodoInicial);
				qry.setDate("periodoFinal", periodoFinal);
			}
			if(bairro != null && bairro.length > 0){
				qry.setParameterList("bairro", bairro);
			}
			if(setorComercial != null && setorComercial.length > 0){
				qry.setParameterList("setorComercial", setorComercial);
			}
			System.out.println(qry.getQueryString());
			retorno = qry.list();

			if(retorno != null && !retorno.isEmpty()){
				for(Object ret : retorno){
					CobrancaDocumento c = (CobrancaDocumento) ret;
					Hibernate.initialize(c.getImovel());
					Hibernate.initialize(c.getImovel().getLigacaoAgua());
					if(c.getImovel().getLigacaoAgua() != null){
						Hibernate.initialize(c.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico());
						Hibernate.initialize(c.getImovel().getLigacaoAgua().getCorteTipo());
						Hibernate.initialize(c.getImovel().getLigacaoAgua().getSupressaoTipo());
					}
					Hibernate.initialize(c.getImovel().getClienteImoveis());
					Hibernate.initialize(c.getImovel().getClienteImoveis().iterator().next().getCliente());
					Hibernate.initialize(c.getImovel().getClienteImoveis().iterator().next().getCliente().getClienteFones());
					Hibernate.initialize(c.getImovel().getQuadra());
					Hibernate.initialize(c.getImovel().getSetorComercial());
					Hibernate.initialize(c.getImovel().getRota());
					Hibernate.initialize(c.getImovel().getRota().getCobrancaGrupo());
					Hibernate.initialize(c.getImovel().getLogradouroBairro());
					Hibernate.initialize(c.getImovel().getLogradouroCep());
					Hibernate.initialize(c.getImovel().getEnderecoReferencia());
					Hibernate.initialize(c.getImovel().getLogradouroCep().getCep());
					Hibernate.initialize(c.getImovel().getLogradouroCep().getLogradouro());
					Hibernate.initialize(c.getImovel().getLogradouroCep().getLogradouro().getLogradouroTipo());
					Hibernate.initialize(c.getImovel().getLogradouroCep().getLogradouro().getLogradouroTitulo());
					Hibernate.initialize(c.getImovel().getLogradouroBairro().getBairro());
					Hibernate.initialize(c.getImovel().getLogradouroBairro().getBairro().getMunicipio());
					Hibernate.initialize(c.getImovel().getLogradouroBairro().getBairro().getMunicipio().getUnidadeFederacao());
					Hibernate.initialize(c.getImovel().getLogradouroBairro());
					Hibernate.initialize(c.getOrdensServico());
				}
			}
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	public Integer consultarQtdeDocumentosItensPorCobrancaDocumento(CobrancaDocumento cobrancaDocumento) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();
		Integer retorno = null;
		try{
			Criteria criteria = sessao.createCriteria(CobrancaDocumentoItem.class);
			criteria.add(Restrictions.eq("cobrancaDocumento", cobrancaDocumento));
			criteria.setProjection(Projections.count("id"));
			retorno = (Integer) criteria.uniqueResult();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	public Collection filtrarRelatorioImovelPorAcaoCobranca(String comando, String idCobrancaAcaoAtividadeComando,
					String idCobrancaAcaoAtividadeCronograma, String[] acao, Date dataInicial, Date dataFinal, String grupo,
					String[] setorComercial, String[] bairro, String[] categoria, String localidade) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();

		// Criteria criteria = sessao.createCriteria(CobrancaDocumento.class);
		StringBuffer hql = new StringBuffer();
		hql.append("Select cbdo from CobrancaDocumento cbdo ");
		hql.append("left join fetch cbdo.ordensServico orse ");
		hql.append("left join fetch cbdo.imovel imov ");
		hql.append("left join fetch imov.imovelSubcategorias imsb ");
		hql.append("left join fetch imsb.comp_id.subcategoria subc ");
		hql.append("left join fetch subc.categoria cat ");
		hql.append("left join fetch orse.atendimentoMotivoEncerramento amen ");
		hql.append("left join fetch orse.agente empr ");
		hql.append("left join fetch cbdo.cobrancaAcao cbac ");
		hql.append("left join fetch imov.setorComercial stcm ");
		hql.append("left join fetch imov.quadra quadra ");
		hql.append("left join fetch imov.rota rota ");
		hql.append("left join fetch rota.cobrancaGrupo cbgr ");
		hql.append("where ");
		if(comando.equals("1")){
			if(idCobrancaAcaoAtividadeCronograma == null || idCobrancaAcaoAtividadeCronograma.equals("")){
				hql.append("cbdo.cobrancaAcaoAtividadeCronograma is not null and ");
			}else{
				hql.append("cbdo.cobrancaAcaoAtividadeCronograma.id = :idCobrancaAcaoAtividadeCronograma and ");
			}
		}
		if(comando.equals("2")){
			if(idCobrancaAcaoAtividadeComando == null || idCobrancaAcaoAtividadeComando.equals("")){
				hql.append("cbdo.cobrancaAcaoAtividadeComando is not null and ");
			}else{
				hql.append("cbdo.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando and ");
			}
		}
		if(comando.equals("3")){
			hql.append("(cbdo.cobrancaAcaoAtividadeComando is not null or cbdo.cobrancaAcaoAtividadeCronograma is not null) and ");
		}

		Collection<Integer> acaoId = new ArrayList();
		if(acao != null && acao.length > 0){
			for(String t1 : acao){
				if(!t1.equals("")) acaoId.add(Integer.valueOf(t1));
			}
			if(!acaoId.isEmpty()) hql.append("cbdo.cobrancaAcao.id in (:acaoId) and ");
		}

		if(grupo != null && !grupo.equals("")){
			hql.append("imov.rota.cobrancaGrupo.id = :grupo and ");
		}
		Collection<Integer> setorId = new ArrayList();
		if(setorComercial != null && setorComercial.length > 0){
			for(String t2 : setorComercial){
				if(!t2.equals("")) setorId.add(Integer.valueOf(t2));
			}
			if(!setorId.isEmpty()) hql.append("imov.setorComercial.id in (:setorId) and ");
		}

		Collection<Integer> bairroId = new ArrayList();
		if(bairro != null && bairro.length > 0){
			for(String t3 : bairro){
				if(!t3.equals("")) bairroId.add(Integer.valueOf(t3));
			}
			if(!bairroId.isEmpty()) hql.append("imov.logradouroBairro.bairro.id in (:bairroId) and ");
		}

		Collection<Integer> categoriaId = new ArrayList();
		if(categoria != null && categoria.length > 0){
			for(String t4 : categoria){
				if(!t4.equals("")) categoriaId.add(Integer.valueOf(t4));
			}
			if(!categoriaId.isEmpty()) hql.append("cat.id in (:categoriaId) and ");

		}

		if(dataInicial != null && dataFinal != null){
			hql.append("cbdo.emissao between :dataInicial and :dataFinal and ");

		}

		if(localidade != null && !localidade.equals("")){
			hql.append("cbdo.localidade.id = :localidade and ");
		}

		String consulta = hql.substring(0, hql.length() - 4);

		Query query = sessao.createQuery(consulta);

		if(idCobrancaAcaoAtividadeCronograma != null && !idCobrancaAcaoAtividadeCronograma.equals("")){
			query.setInteger("idCobrancaAcaoAtividadeCronograma", Integer.valueOf(idCobrancaAcaoAtividadeCronograma));
		}

		if(idCobrancaAcaoAtividadeComando != null && !idCobrancaAcaoAtividadeComando.equals("")){
			query.setInteger("idCobrancaAcaoAtividadeComando", Integer.valueOf(idCobrancaAcaoAtividadeComando));
		}

		if(acaoId != null && !acaoId.isEmpty()){
			query.setParameterList("acaoId", (acaoId));
		}

		if(grupo != null && !grupo.equals("")){
			query.setInteger("grupo", Integer.valueOf(grupo));
		}

		if(setorId != null && !setorId.isEmpty()){
			query.setParameterList("setorId", setorId);
		}

		if(bairroId != null && !bairroId.isEmpty()){
			query.setParameterList("bairroId", bairroId);
		}

		if(categoriaId != null && !categoriaId.isEmpty()){
			query.setParameterList("categoriaId", categoriaId);
		}

		if(dataInicial != null && dataFinal != null){
			query.setTimestamp("dataInicial", dataInicial).setTimestamp("dataFinal", dataFinal);
		}
		if(localidade != null && !localidade.equals("")){
			query.setInteger("localidade", Integer.valueOf(localidade));
		}

		Collection<CobrancaDocumento> colecao = query.list();

		return colecao;
	}

	public Integer filtrarRelatorioImovelPorAcaoCobrancaCount(String comando, String idCobrancaAcaoAtividadeComando,
					String idCobrancaAcaoAtividadeCronograma, String[] acao, Date dataInicial, Date dataFinal, String grupo,
					String[] setorComercial, String[] bairro, String[] categoria, String localidade) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();

		StringBuffer hql = new StringBuffer();
		hql.append("Select count(cbdo) from CobrancaDocumento cbdo left join cbdo.imovel imov left join imov.imovelSubcategorias imsb ");
		hql.append("where ");
		if(comando.equals("1")){
			if(idCobrancaAcaoAtividadeCronograma == null || idCobrancaAcaoAtividadeCronograma.equals("")){
				hql.append("cbdo.cobrancaAcaoAtividadeCronograma is not null and ");
			}else{
				hql.append("cbdo.cobrancaAcaoAtividadeCronograma.id = :idCobrancaAcaoAtividadeCronograma and ");
			}
		}
		if(comando.equals("2")){
			if(idCobrancaAcaoAtividadeComando == null || idCobrancaAcaoAtividadeComando.equals("")){
				hql.append("cbdo.cobrancaAcaoAtividadeComando is not null and ");
			}else{
				hql.append("cbdo.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando and ");
			}
		}
		if(comando.equals("3")){
			hql.append("(cbdo.cobrancaAcaoAtividadeComando is not null or cbdo.cobrancaAcaoAtividadeCronograma is not null) and ");
		}

		Collection<Integer> acaoId = new ArrayList();
		if(acao != null && acao.length > 0){
			for(String t1 : acao){
				if(!t1.equals("")) acaoId.add(Integer.valueOf(t1));
			}
			if(!acaoId.isEmpty()) hql.append("cbdo.cobrancaAcao.id in (:acaoId) and ");
		}

		if(grupo != null && !grupo.equals("")){
			hql.append("cbdo.imovel.rota.cobrancaGrupo.id = :grupo and ");
		}

		Collection<Integer> setorId = new ArrayList();
		if(setorComercial != null && setorComercial.length > 0){
			for(String t2 : setorComercial){
				if(!t2.equals("")) setorId.add(Integer.valueOf(t2));
			}
			if(!setorId.isEmpty()) hql.append("cbdo.imovel.setorComercial.id in (:setorId) and ");
		}

		Collection<Integer> bairroId = new ArrayList();
		if(bairro != null && bairro.length > 0){
			for(String t3 : bairro){
				if(!t3.equals("")) bairroId.add(Integer.valueOf(t3));
			}
			if(!bairroId.isEmpty()) hql.append("cbdo.imovel.logradouroBairro.bairro.id in (:bairroId) and ");
		}

		Collection<Integer> categoriaId = new ArrayList();
		if(categoria != null && categoria.length > 0){
			for(String t4 : categoria){
				if(!t4.equals("")) categoriaId.add(Integer.valueOf(t4));
			}
			if(!categoriaId.isEmpty()) hql.append("imsb.comp_id.subcategoria.categoria.id in (:categoriaId) and ");

		}

		if(dataInicial != null && dataFinal != null){
			hql.append("cbdo.emissao between :dataInicial and :dataFinal and ");

		}

		if(localidade != null && !localidade.equals("")){
			hql.append("cbdo.localidade.id = :localidade and ");
		}

		String consulta = hql.substring(0, hql.length() - 4);

		Query query = sessao.createQuery(consulta);

		if(comando != null && comando.equals("1") && idCobrancaAcaoAtividadeCronograma != null
						&& !idCobrancaAcaoAtividadeCronograma.equals("")){
			query.setInteger("idCobrancaAcaoAtividadeCronograma", Integer.valueOf(idCobrancaAcaoAtividadeCronograma));
		}

		if(comando != null && comando.equals("2") && idCobrancaAcaoAtividadeComando != null && !idCobrancaAcaoAtividadeComando.equals("")){
			query.setInteger("idCobrancaAcaoAtividadeComando", Integer.valueOf(idCobrancaAcaoAtividadeComando));
		}

		if(acaoId != null && !acaoId.isEmpty()){
			query.setParameterList("acaoId", (acaoId));
		}

		if(grupo != null && !grupo.equals("")){
			query.setInteger("grupo", Integer.valueOf(grupo));
		}

		if(setorId != null && !setorId.isEmpty()){
			query.setParameterList("setorId", setorId);
		}

		if(bairroId != null && !bairroId.isEmpty()){
			query.setParameterList("bairroId", bairroId);
		}

		if(categoriaId != null && !categoriaId.isEmpty()){
			query.setParameterList("categoriaId", categoriaId);
		}

		if(dataInicial != null && dataFinal != null){
			query.setTimestamp("dataInicial", dataInicial).setTimestamp("dataFinal", dataFinal);
		}
		if(localidade != null && !localidade.equals("")){
			query.setInteger("localidade", Integer.valueOf(localidade));
		}

		Integer retorno = ((Number) query.uniqueResult()).intValue();

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#consultarOrdensServico(boolean,
	 * boolean, java.util.Date, java.util.Date, java.util.Collection,
	 * java.lang.Integer, java.util.Collection, java.util.Collection,
	 * java.util.Collection, java.util.Collection, java.lang.Integer,
	 * java.lang.Integer)
	 */
	public Collection<OrdemServico> consultarOrdensServico(boolean comandoCronograma, boolean comandoEventual, Date dataInicio,
					Date dataFim, Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca, Collection<Integer> idsSetorComercial,
					Collection<Integer> idsBairro, Collection<Integer> idsCategoria, Collection<Integer> idsServicoTipo,
					Integer idComandoCronograma, Integer idComandoEventual) throws ErroRepositorioException{

		Session session = null;

		try{

			session = HibernateUtil.getSession();

			StringBuffer sb = new StringBuffer();
			sb.append("select os from OrdemServico os ");
			sb.append("inner join os.servicoTipo svtp ");
			sb.append("inner join svtp.servicoTipoSubgrupo stsg ");
			sb.append("inner join os.ordemServicoVinculada orsev ");
			sb.append(" where");

			// FIXO
			sb.append(" stsg.id = :idSubgrupoServicoReligacao ");

			if(comandoCronograma){
				if(idComandoCronograma == null){
					sb.append(" and orsev.cobrancaAcaoAtividadeCronograma is not null");
				}else{
					sb.append(" and orsev.cobrancaAcaoAtividadeCronograma.id = :idComandoCronograma");
				}
			}else if(comandoEventual){
				if(idComandoEventual == null){
					sb.append(" and orsev.cobrancaAcaoAtividadeComando is not null");
				}else{
					sb.append(" and orsev.cobrancaAcaoAtividadeComando.id = :idComandoEventual");
				}
			}else{
				sb.append(" and (orsev.cobrancaAcaoAtividadeCronograma is not null or orsev.cobrancaAcaoAtividadeComando is not null)");
			}

			if(dataInicio != null && dataFim != null){
				sb.append(" and os.dataGeracao between :dataInicio and :dataFim");
			}

			if(idsAcaoCobranca != null && !idsAcaoCobranca.isEmpty()){
				sb.append(" and os.cobrancaDocumento.cobrancaAcao.id in (:idsAcaoCobranca)");
			}

			if(idGrupoCobranca != null){
				sb.append(" and os.imovel.rota.cobrancaGrupo.id = :idGrupoCobranca");
			}

			if(idsSetorComercial != null && !idsSetorComercial.isEmpty()){
				sb.append(" and os.imovel.setorComercial.id in (:idsSetorComercial)");
			}

			if(idsBairro != null && !idsBairro.isEmpty()){
				sb.append(" and os.imovel.quadra.bairro.id in (:idsBairro)");
			}

			if(idsCategoria != null && !idsCategoria.isEmpty()){
				sb.append(" and os.imovel.id in (select isub.comp_id.imovel.id from ImovelSubcategoria isub where isub.comp_id.subcategoria.categoria.id in (:idsCategoria))");
			}

			if(idsServicoTipo != null && !idsServicoTipo.isEmpty()){
				sb.append(" and os.servicoTipo.id in (:idsServicoTipo)");
			}

			Query query = session.createQuery(sb.toString());

			query.setParameter("idSubgrupoServicoReligacao", Integer.parseInt(ServicoTipoSubgrupo.RELIGACAO.toString()));

			if(comandoCronograma){
				if(idComandoCronograma != null){
					query.setParameter("idComandoCronograma", idComandoCronograma);
				}
			}else if(comandoEventual){
				if(idComandoEventual != null){
					query.setParameter("idComandoEventual", idComandoEventual);
				}
			}

			if(dataInicio != null && dataFim != null){

				SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
				SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");

				String stringDataInicio = df2.format(dataInicio);
				String stringDataFim = df2.format(dataFim);

				dataInicio = df.parse(stringDataInicio + " 00:00:00");
				dataFim = df.parse(stringDataFim + " 23:59:59");

				query.setParameter("dataInicio", dataInicio);
				query.setParameter("dataFim", dataFim);

			}

			if(idsAcaoCobranca != null && !idsAcaoCobranca.isEmpty()){
				query.setParameterList("idsAcaoCobranca", idsAcaoCobranca);
			}

			if(idGrupoCobranca != null){
				query.setParameter("idGrupoCobranca", idGrupoCobranca);
			}

			if(idsSetorComercial != null && !idsSetorComercial.isEmpty()){
				query.setParameterList("idsSetorComercial", idsSetorComercial);
			}

			if(idsBairro != null && !idsBairro.isEmpty()){
				query.setParameterList("idsBairro", idsBairro);
			}

			if(idsCategoria != null && !idsCategoria.isEmpty()){
				query.setParameterList("idsCategoria", idsCategoria);
			}

			if(idsServicoTipo != null && !idsServicoTipo.isEmpty()){
				query.setParameterList("idsServicoTipo", idsServicoTipo);
			}

			Collection<OrdemServico> ordensServico = query.list();

			if(ordensServico != null){

				for(OrdemServico os : ordensServico){

					Hibernate.initialize(os.getAtendimentoMotivoEncerramento());
					Hibernate.initialize(os.getAgente());
					Hibernate.initialize(os.getServicoTipo());
					Hibernate.initialize(os.getImovel());
					Hibernate.initialize(os.getImovel().getImovelSubcategorias());
					Hibernate.initialize(os.getImovel().getQuadra());
					Hibernate.initialize(os.getImovel().getRota());
					Hibernate.initialize(os.getImovel().getRota().getCobrancaGrupo());
					Hibernate.initialize(os.getImovel().getSetorComercial());
					Hibernate.initialize(os.getCobrancaDocumento());

					if(os.getImovel().getImovelSubcategorias() != null){

						for(ImovelSubcategoria imovelSubcategoria : (Set<ImovelSubcategoria>) os.getImovel().getImovelSubcategorias()){

							Hibernate.initialize(imovelSubcategoria.getComp_id());
							Hibernate.initialize(imovelSubcategoria.getComp_id().getSubcategoria());
							Hibernate.initialize(imovelSubcategoria.getComp_id().getSubcategoria().getCategoria());

						}

					}

					// Caso a ordem de Servico nao esteja vinculada a um
					// documento de cobranca, enta£o obter o documento de
					// cobranca mais recente relacionado ao imovel vinculado a
					// ordem de Servico
					if(os.getCobrancaDocumento() == null){

						sb = new StringBuffer();
						sb.append("from CobrancaDocumento cd ");
						sb.append("where ");
						sb.append("cd.id = ");
						sb.append("(select max(cdoc.id) from CobrancaDocumento cdoc where cdoc.imovel.id = :idImovel)");

						query = session.createQuery(sb.toString());
						query.setParameter("idImovel", os.getImovel().getId());

						os.setCobrancaDocumento((CobrancaDocumento) query.uniqueResult());

					}
				}
			}

			return ordensServico;

		}catch(Exception e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#consultarQuantidadeOrdensServico(boolean
	 * , boolean, java.util.Date, java.util.Date, java.util.Collection,
	 * java.lang.Integer, java.util.Collection, java.util.Collection,
	 * java.util.Collection, java.util.Collection, java.lang.Integer,
	 * java.lang.Integer)
	 */
	public Integer consultarQuantidadeOrdensServico(boolean comandoCronograma, boolean comandoEventual, Date dataInicio, Date dataFim,
					Collection<Integer> idsAcaoCobranca, Integer idGrupoCobranca, Collection<Integer> idsSetorComercial,
					Collection<Integer> idsBairro, Collection<Integer> idsCategoria, Collection<Integer> idsServicoTipo,
					Integer idComandoCronograma, Integer idComandoEventual) throws ErroRepositorioException{

		Session session = null;

		try{

			session = HibernateUtil.getSession();

			StringBuffer sb = new StringBuffer();
			sb.append("select count(os.id)");
			sb.append(" from OrdemServico os ");
			sb.append(" inner join os.ordemServicoVinculada orsev ");
			sb.append(" where");

			if(comandoCronograma){
				if(idComandoCronograma == null){
					sb.append(" orsev.cobrancaAcaoAtividadeCronograma is not null");
				}else{
					sb.append(" orsev.cobrancaAcaoAtividadeCronograma.id = :idComandoCronograma");
				}
			}else if(comandoEventual){
				if(idComandoEventual == null){
					sb.append(" orsev.cobrancaAcaoAtividadeComando is not null");
				}else{
					sb.append(" orsev.cobrancaAcaoAtividadeComando.id = :idComandoEventual");
				}
			}else{
				sb.append(" (orsev.cobrancaAcaoAtividadeCronograma is not null or orsev.cobrancaAcaoAtividadeComando is not null)");
			}

			if(dataInicio != null && dataFim != null){
				sb.append(" and os.dataGeracao between :dataInicio and :dataFim");
			}

			if(idsAcaoCobranca != null && !idsAcaoCobranca.isEmpty()){
				sb.append(" and os.cobrancaDocumento.cobrancaAcao.id in (:idsAcaoCobranca)");
			}

			if(idGrupoCobranca != null){
				sb.append(" and os.imovel.rota.cobrancaGrupo.id = :idGrupoCobranca");
			}

			if(idsSetorComercial != null && !idsSetorComercial.isEmpty()){
				sb.append(" and os.imovel.setorComercial.id in (:idsSetorComercial)");
			}

			if(idsBairro != null && !idsBairro.isEmpty()){
				sb.append(" and os.imovel.quadra.bairro.id in (:idsBairro)");
			}

			if(idsCategoria != null && !idsCategoria.isEmpty()){
				sb.append(" and os.imovel.id in (select isub.comp_id.imovel.id from ImovelSubcategoria isub where isub.comp_id.subcategoria.categoria.id in (:idsCategoria))");
			}

			if(idsServicoTipo != null && !idsServicoTipo.isEmpty()){
				sb.append(" and os.servicoTipo.id in (:idsServicoTipo)");
			}

			Query query = session.createQuery(sb.toString());

			if(comandoCronograma){
				if(idComandoCronograma != null){
					query.setParameter("idComandoCronograma", idComandoCronograma);
				}
			}else if(comandoEventual){
				if(idComandoEventual != null){
					query.setParameter("idComandoEventual", idComandoEventual);
				}
			}

			if(dataInicio != null && dataFim != null){

				SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
				SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");

				String stringDataInicio = df2.format(dataInicio);
				String stringDataFim = df2.format(dataFim);

				dataInicio = df.parse(stringDataInicio + " 00:00:00");
				dataFim = df.parse(stringDataFim + " 23:59:59");

				query.setParameter("dataInicio", dataInicio);
				query.setParameter("dataFim", dataFim);

			}

			if(idsAcaoCobranca != null && !idsAcaoCobranca.isEmpty()){
				query.setParameterList("idsAcaoCobranca", idsAcaoCobranca);
			}

			if(idGrupoCobranca != null){
				query.setParameter("idGrupoCobranca", idGrupoCobranca);
			}

			if(idsSetorComercial != null && !idsSetorComercial.isEmpty()){
				query.setParameterList("idsSetorComercial", idsSetorComercial);
			}

			if(idsBairro != null && !idsBairro.isEmpty()){
				query.setParameterList("idsBairro", idsBairro);
			}

			if(idsCategoria != null && !idsCategoria.isEmpty()){
				query.setParameterList("idsCategoria", idsCategoria);
			}

			if(idsServicoTipo != null && !idsServicoTipo.isEmpty()){
				query.setParameterList("idsServicoTipo", idsServicoTipo);
			}

			Integer quatidadeOrdensServico = ((Number) query.uniqueResult()).intValue();

			return quatidadeOrdensServico;

		}catch(Exception e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}
	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IRepositorioCobranca#pesquisarProdutividadeMensalExecucaoServico()
	 */
	public Object[] obterQuantidadeOrdensPeriodo(String tipoComando, String idCobrancaAcaoComando, String idCobrancaAcaoCronograma,
					String padraoPeriodo, String periodoInicio, String periodoFim, String periodoMesInicio, String periodoMesFim,
					String periodoAnoInicio, String periodoAnoFim, String localidade, Integer acaoSelecionada, Integer empresa,
					Integer[] grupos, Integer[] setores, Integer[] bairros, Integer[] grupoServicos, Integer[] subGrupoServicos,
					Integer[] servicos, Integer[] tiposCorte, Integer[] tiposSupressao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		Object[] retorno = new Object[3];
		List<Object[]> retornoConsulta = null;

		Map<String, Integer> totalOsSituacaoPendentes = new TreeMap<String, Integer>();
		Map<String, Integer> totalOsSituacaoCanceladas = new TreeMap<String, Integer>();
		Map<String, Integer> totalOsSituacaoExecutadas = new TreeMap<String, Integer>();

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		// **************************
		Date dataInicial = null;
		Date dataFinal = null;

		if("1".equalsIgnoreCase(padraoPeriodo)){
			// Periodo de 30 dias
			dataInicial = Util.converteStringParaDate(periodoInicio);
			dataFinal = Util.converteStringParaDate(periodoFim);
		}else{
			// Periodo de 6 meses
			try{
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				dataInicial = sdf.parse("01/" + periodoMesInicio + "/" + periodoAnoInicio);
				dataFinal = sdf.parse(Util.obterUltimoDiaMes(Integer.valueOf(periodoMesFim), Integer.valueOf(periodoAnoFim)) + "/"
								+ periodoMesFim + "/" + periodoAnoFim);
			}catch(ParseException e){
				throw new ErroRepositorioException(e, "Erro no Hibernate");
			}
		}

		dataInicial = Util.formatarDataSemHora(dataInicial);
		dataFinal = Util.adaptarDataFinalComparacaoBetween(dataFinal);

		Collection<Short> situacoesOs = new ArrayList<Short>();
		situacoesOs.add(OrdemServico.SITUACAO_PENDENTE);
		situacoesOs.add(OrdemServico.SITUACAO_ENCERRADO);
		situacoesOs.add(OrdemServico.SITUACAO_EXECUCAO_EM_ANDAMENTO);

		// **************************

		try{

			hql.append("select os.dataGeracao, os.situacao, os.atendimentoMotivoEncerramento.id ");

			hql.append("from OrdemServico os ");

			// Where
			hql.append(" where ");

			// Situacoes
			hql.append(" os.situacao in (:situacoesOs) and ");
			parameters.put("situacoesOs", situacoesOs);

			// Comando
			if(!Util.isVazioOuBranco(tipoComando)){
				if(tipoComando.equals("1")){
					if(!Util.isVazioOuBranco(idCobrancaAcaoCronograma)){
						hql.append(" os.cobrancaAcaoAtividadeCronograma.id = :idComandoAcaoCronograma and ");
						parameters.put("idComandoAcaoCronograma", Integer.valueOf(idCobrancaAcaoCronograma));
					}else{
						hql.append(" os.cobrancaAcaoAtividadeCronograma.id is not null ");
					}

				}else if(tipoComando.equals("2")){
					if(!Util.isVazioOuBranco(idCobrancaAcaoComando)){
						hql.append(" os.cobrancaAcaoAtividadeComando.id = :idComandoAcaoEventual and ");
						parameters.put("idComandoAcaoEventual", Integer.valueOf(idCobrancaAcaoComando));
					}else{
						hql.append(" os.cobrancaAcaoAtividadeComando.id is not null and ");
					}
				}else if(tipoComando.equals("3")){
					hql.append(" (os.cobrancaAcaoAtividadeComando.id is not null or os.cobrancaAcaoAtividadeCronograma.id is not null) and ");
				}
			}

			if(!Util.isVazioOuBranco(acaoSelecionada)){
				hql.append(" os.cobrancaDocumento.cobrancaAcao.id  = :idAcao and ");
				parameters.put("idAcao", acaoSelecionada);
			}

			// Empresas
			if(!Util.isVazioOuBranco(empresa)){
				hql.append(" os.agente.id  = :idEmpresa and ");
				parameters.put("idEmpresa", empresa);
			}

			// *********************************************
			// Periodo de Atendimento
			if(dataInicial != null && dataFinal != null){

				hql.append(" os.dataGeracao between :periodoInicial AND :periodoFinal and ");

				parameters.put("periodoInicial", dataInicial);
				parameters.put("periodoFinal", dataFinal);
			}
			// *********************************************

			// Localidade
			if(!Util.isVazioOuBranco(localidade)){
				hql.append(" os.imovel.localidade.id  = :idLocalidade and ");
				parameters.put("idLocalidade", Integer.valueOf(localidade));
			}

			// Grupo
			if(!Util.isVazioOuBranco(grupos) && grupos.length != 0){
				hql.append(" os.imovel.rota.cobrancaGrupo.id  in (:idCobrancaGrupo) and ");
				parameters.put("idCobrancaGrupo", grupos);
			}

			// SetorComercial
			if(!Util.isVazioOuBranco(setores) && setores.length != 0){
				hql.append(" os.imovel.setorComercial.id  in (:idSetorComercial) and ");
				parameters.put("idSetorComercial", setores);
			}

			// Bairro
			if(!Util.isVazioOuBranco(bairros) && bairros.length != 0){
				hql.append(" os.imovel.quadra.bairro.id  in (:idBairro) and ");
				parameters.put("idBairro", bairros);
			}

			// Grupo de Servico
			if(!Util.isVazioOuBranco(grupoServicos) && grupoServicos.length != 0){
				hql.append(" os.servicoTipo.servicoTipoSubgrupo.servicoTipoGrupo.id  in (:idServicoTipoGrupos) and ");
				parameters.put("idServicoTipoGrupos", grupoServicos);
			}

			// Subgrupo de Servico
			if(!Util.isVazioOuBranco(subGrupoServicos) && subGrupoServicos.length != 0){
				hql.append(" os.servicoTipo.servicoTipoSubgrupo.id  in (:idServicoTipoSubGrupos) and ");
				parameters.put("idServicoTipoSubGrupos", subGrupoServicos);
			}

			// Servico
			if(!Util.isVazioOuBranco(servicos) && servicos.length != 0){
				hql.append(" os.servicoTipo.id  in (:idServicoTipo) and ");
				parameters.put("idServicoTipo", servicos);
			}

			// Tipo Supressao
			if(!Util.isVazioOuBranco(tiposSupressao) && tiposSupressao.length != 0){
				hql.append(" os.supressaoTipo.id  in (:idSupressoes) and ");
				parameters.put("idSupressoes", tiposSupressao);
			}

			// Tipo Cortes
			if(!Util.isVazioOuBranco(tiposCorte) && tiposCorte.length != 0){
				hql.append(" os.corteTipo.id  in (:idCorte) and ");
				parameters.put("idCorte", tiposCorte);
			}

			hql = new StringBuffer(hql.substring(0, hql.length() - 4));

			hql.append(" group by os.dataGeracao, os.situacao, os.atendimentoMotivoEncerramento.id");

			query = session.createQuery(hql.toString());

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();

			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Set){
					Set setList = (HashSet) parameters.get(key);
					query.setParameterList(key, setList);
				}else if(parameters.get(key) instanceof Collection){
					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer[]){
					Integer[] collection = (Integer[]) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer){
					Integer parametroInteger = (Integer) parameters.get(key);
					query.setParameter(key, parametroInteger);
				}else if(parameters.get(key) instanceof String){
					String parametroString = (String) parameters.get(key);
					query.setParameter(key, parametroString);
				}else if(parameters.get(key) instanceof Date){
					Date parametroDate = (Date) parameters.get(key);
					query.setParameter(key, parametroDate);
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			retornoConsulta = query.list();

			SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");

			for(Object[] obj : retornoConsulta){
				String dataGeracao = df2.format((Date) obj[0]);
				Short situacao = (Short) obj[1];
				Integer idMotivoEncerramento = (Integer) obj[2];

				if(situacao.equals(OrdemServico.SITUACAO_PENDENTE) || situacao.equals(OrdemServico.SITUACAO_EXECUCAO_EM_ANDAMENTO)){
					// Pendente
					this.addValorMap(totalOsSituacaoPendentes, dataGeracao);

				}else if(situacao.equals(OrdemServico.SITUACAO_ENCERRADO)){

					if(idMotivoEncerramento != null){

						if(idMotivoEncerramento.intValue() == AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO){
							// Executada
							this.addValorMap(totalOsSituacaoExecutadas, dataGeracao);

						}else{
							// Cancelada
							this.addValorMap(totalOsSituacaoCanceladas, dataGeracao);
						}
					}
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		retorno[0] = new TreeMap<String, Integer>();
		retorno[1] = new TreeMap<String, Integer>();
		retorno[2] = new TreeMap<String, Integer>();

		retorno[0] = totalOsSituacaoPendentes;
		retorno[1] = totalOsSituacaoCanceladas;
		retorno[2] = totalOsSituacaoExecutadas;

		return retorno;
	}

	/**
	 * @author isilva
	 * @param mapa
	 * @param chave
	 */
	private void addValorMap(Map<String, Integer> mapa, String chave){

		if(mapa.get(chave) != null){
			Integer quantidade = mapa.get(chave);
			quantidade++;
			mapa.remove(chave);
			mapa.put(chave, quantidade);
		}else{
			mapa.put(chave, 1);
		}
	}

	/**
	 * @author isilva
	 * @param idEmpresa
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaContratoRemuneracaoPorSucesso> pesquisarCobrancaContratoRemuneracaoVencimentoPorContratoVigente(
					Integer idEmpresa) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		Collection<CobrancaContratoRemuneracaoPorSucesso> retorno = null;

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		try{

			hql.append("from CobrancaContratoRemuneracaoVencimento ccVencimento ");

			// Where
			hql.append("where ");

			hql.append("ccVencimento.cobrancaContratoRemuneracao.cobrancaContrato.dataInicial = ");
			hql.append("(select max(cobrancaContr.dataInicial) ");
			hql.append("from CobrancaContrato cobrancaContr ");

			// Empresa
			if(!Util.isVazioOuBranco(idEmpresa)){
				hql.append("where cobrancaContr.empresa.id = :idEmpresa) ");
				parameters.put("idEmpresa", idEmpresa);
			}else{
				hql.append(") ");
			}

			hql.append("order by ccVencimento.id asc");

			query = session.createQuery(hql.toString());

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();

			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer){
					Integer parametroInteger = (Integer) parameters.get(key);
					query.setParameter(key, parametroInteger);
				}
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @author isilva
	 * @param idEmpresa
	 * @param tipoComando
	 * @param acaoSelecionada
	 * @param empresa
	 * @param periodoInicio
	 * @param periodoFim
	 * @param idCobrancaAcaoAtividadeComando
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @param diasAteAnterior
	 * @param diasAte
	 * @return <br>
	 * <br>
	 *         <i> idCobrancaAcao, <br>
	 *         descricaoCobrancaAcao, <br>
	 *         quantidadeContas, <br>
	 *         quantidadeParcelas, <br>
	 *         valorContas, <br>
	 *         valorParcelas </i>
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoEmFaixa(Integer idEmpresa, String tipoComando, String acaoSelecionada, String empresa,
					String periodoInicio, String periodoFim, String idCobrancaAcaoAtividadeComando,
					String idCobrancaAcaoAtividadeCronograma, Integer diasVencidosAnterior, Integer diasAte)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		Collection<Object[]> retorno = null;

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		try{

			Date dataInicial = Util.converteStringParaDate(periodoInicio);
			Date dataFinal = Util.converteStringParaDate(periodoFim);

			hql.append("select ");
			hql.append("cs.cobrancaAcao.id, ");
			hql.append("cs.cobrancaAcao.descricaoCobrancaAcao, ");
			hql.append("sum(cs.quantidadeContas), ");
			hql.append("sum(cs.quantidadeParcelas), ");
			hql.append("sum(cs.valorContas), ");
			hql.append("sum(cs.valorParcelas) ");

			// From
			hql.append("from CobrancaSucesso cs ");

			// Where
			hql.append("where ");

			// Comando
			if(!Util.isVazioOuBranco(tipoComando)){
				if(tipoComando.equals("1")){
					if(!Util.isVazioOuBranco(idCobrancaAcaoAtividadeCronograma)){
						hql.append(" cs.comandoAcaoCronograma.id = :idComandoAcaoCronograma and ");
						parameters.put("idComandoAcaoCronograma", Integer.valueOf(idCobrancaAcaoAtividadeCronograma));
					}
				}else if(tipoComando.equals("2")){
					if(!Util.isVazioOuBranco(idCobrancaAcaoAtividadeComando)){
						hql.append(" cs.comandoAcaoEventual.id = :idComandoAcaoEventual and ");
						parameters.put("idComandoAcaoEventual", Integer.valueOf(idCobrancaAcaoAtividadeComando));
					}
				}else if(tipoComando.equals("3")){
					hql.append(" (cs.comandoAcaoEventual.id is not null or cs.comandoAcaoCronograma.id is not null) and ");
				}
			}

			// Acao
			if(!Util.isVazioOuBranco(acaoSelecionada)){
				hql.append("cs.cobrancaAcao.id = :idCobrancaAcao and ");
				parameters.put("idCobrancaAcao", Integer.valueOf(acaoSelecionada));
			}

			// Empresa
			if(!Util.isVazioOuBranco(idEmpresa)){
				hql.append("cs.empresa.id = :idEmpresa and ");
				parameters.put("idEmpresa", Integer.valueOf(idEmpresa));
			}

			// Data Vencimento
			if(!Util.isVazioOuBranco(dataInicial) && !Util.isVazioOuBranco(dataFinal)){
				hql.append("cs.dataVencimentoConta between :periodoInicial and :periodoFinal and ");
				parameters.put("periodoInicial", dataInicial);
				parameters.put("periodoFinal", dataFinal);
			}

			// Dias Atras
			if(!Util.isVazioOuBranco(diasVencidosAnterior) && !Util.isVazioOuBranco(diasAte)){
				hql.append("cs.diasVencidos > :diasVencidosInicio and cs.diasVencidos <= :diasVencidosFim ");
				parameters.put("diasVencidosInicio", diasVencidosAnterior);
				parameters.put("diasVencidosFim", diasAte);
			}else if(!Util.isVazioOuBranco(diasAte)){
				hql.append("cs.diasVencidos <= :diasVencidosInicio ");
				parameters.put("diasVencidosInicio", diasAte);
			}else if(!Util.isVazioOuBranco(diasVencidosAnterior)){
				hql.append("cs.diasVencidos > :diasVencidosFim ");
				parameters.put("diasVencidosFim", diasVencidosAnterior);
			}

			hql.append("group by cs.cobrancaAcao.id, cs.cobrancaAcao.descricaoCobrancaAcao");

			query = session.createQuery(hql.toString());

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();

			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer){
					Integer parametroInteger = (Integer) parameters.get(key);
					query.setParameter(key, parametroInteger);
				}else if(parameters.get(key) instanceof Date){
					Date parametroDate = (Date) parameters.get(key);
					query.setParameter(key, parametroDate);
				}
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IRepositorioCobranca#relacaoImovelReligacaoEspecialDiaCount(java.lang.Integer,
	 *      java.util.Date, java.util.Date, java.lang.Integer, java.lang.String[],
	 *      java.lang.String[], java.lang.String[])
	 */
	public Integer relacaoImovelReligacaoEspecialDiaCount(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		Integer retornoConsulta = 0;

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		try{

			hql.append("select count(distinct os.id) ");
			hql.append("from OrdemServico os ");
			hql.append("left join os.imovel imov ");
			hql.append("left join os.ordemServicoUnidades osunidade ");
			hql.append("left join osunidade.unidadeOrganizacional unidOrg ");

			// Where
			hql.append(" where ");

			if(!Util.isVazioOuBranco(idUnidade)){
				hql.append(" unidOrg.id = :idOSU and ");
				parameters.put("idOSU", idUnidade);
			}

			hql.append(" osunidade.atendimentoRelacaoTipo.id = 1 and ");

			// *********************************************

			Date periodoFinal = Util.adaptarDataFinalComparacaoBetween(periodoFim);

			// Periodo de Atendimento
			if(periodoInicio != null && periodoFinal != null){

				hql.append(" os.dataGeracao between :periodoInicial and :periodoFinal and ");

				parameters.put("periodoInicial", periodoInicio);
				parameters.put("periodoFinal", periodoFinal);
			}
			// *********************************************

			// Grupo
			if(!Util.isVazioOuBranco(idGrupo)){
				hql.append(" os.imovel.rota.cobrancaGrupo.id  = :idCobrancaGrupo and ");
				parameters.put("idCobrancaGrupo", idGrupo);
			}

			// SetorComercial
			if(!Util.isVazioOuBranco(setores) && setores.length != 0){
				hql.append(" os.imovel.setorComercial.id  in (:idSetorComercial) and ");
				parameters.put("idSetorComercial", setores);
			}

			// Bairro
			if(!Util.isVazioOuBranco(bairros) && bairros.length != 0){
				hql.append(" os.imovel.logradouroBairro.bairro.id  in (:idBairro) and ");
				parameters.put("idBairro", bairros);
			}

			// Servico
			if(!Util.isVazioOuBranco(tiposServico) && tiposServico.length != 0){
				hql.append(" os.servicoTipo.id  in (:idServicoTipo) and ");
				parameters.put("idServicoTipo", tiposServico);
			}

			hql = new StringBuffer(hql.substring(0, hql.length() - 4));

			query = session.createQuery(hql.toString());

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();

			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Set){
					Set setList = (HashSet) parameters.get(key);
					query.setParameterList(key, setList);
				}else if(parameters.get(key) instanceof Collection){
					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer[]){
					Integer[] collection = (Integer[]) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer){
					Integer parametroInteger = (Integer) parameters.get(key);
					query.setParameter(key, parametroInteger);
				}else if(parameters.get(key) instanceof String[]){
					String[] collection = (String[]) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof String){
					String parametroString = (String) parameters.get(key);
					query.setParameter(key, parametroString);
				}else if(parameters.get(key) instanceof Date){
					Date parametroDate = (Date) parameters.get(key);
					query.setParameter(key, parametroDate);
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			retornoConsulta = ((Number) query.uniqueResult()).intValue();

		}catch(HibernateException e){
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * @author isilva
	 * @see gcom.cobranca.IRepositorioCobranca#relacaoImovelReligacaoEspecialDia(java.lang.Integer,
	 *      java.util.Date, java.util.Date, java.lang.Integer, java.lang.String[],
	 *      java.lang.String[], java.lang.String[])
	 */
	public Collection<Object[]> relacaoImovelReligacaoEspecialDia(Integer idUnidade, Date periodoInicio, Date periodoFim, Integer idGrupo,
					String[] setores, String[] bairros, String[] tiposServico) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		Collection<Object[]> retornoConsulta = null;

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		try{

			hql.append("select os, setorCom.id ");

			hql.append("from OrdemServico os ");

			hql.append("left join fetch os.imovel imov ");
			hql.append("left join fetch imov.quadra qd ");
			hql.append("left join fetch imov.logradouroBairro logBairro ");
			hql.append("left join fetch logBairro.bairro bair ");
			hql.append("left join fetch imov.rota rt ");
			hql.append("left join fetch rt.cobrancaGrupo cg ");
			hql.append("left join fetch imov.setorComercial setorCom ");
			hql.append("left join fetch os.agente ag ");
			hql.append("left join fetch os.registroAtendimento ra ");
			hql.append("left join fetch os.servicoTipo servTipo ");
			hql.append("left join fetch os.ordemServicoUnidades osunidade ");
			hql.append("left join fetch osunidade.unidadeOrganizacional unidOrg ");
			hql.append("left join fetch osunidade.atendimentoRelacaoTipo atenRelTipo ");

			// Where
			hql.append(" where ");

			if(!Util.isVazioOuBranco(idUnidade)){
				hql.append(" unidOrg.id = :idOSU and ");
				parameters.put("idOSU", idUnidade);
			}

			hql.append(" atenRelTipo.id = 1 and ");

			// *********************************************

			Date periodoFinal = Util.adaptarDataFinalComparacaoBetween(periodoFim);

			// Periodo de Atendimento
			if(periodoInicio != null && periodoFinal != null){

				hql.append(" os.dataGeracao between :periodoInicial and :periodoFinal and ");

				parameters.put("periodoInicial", periodoInicio);
				parameters.put("periodoFinal", periodoFinal);
			}
			// *********************************************

			// Grupo
			if(!Util.isVazioOuBranco(idGrupo)){
				hql.append(" cg.id  = :idCobrancaGrupo and ");
				parameters.put("idCobrancaGrupo", idGrupo);
			}

			// SetorComercial
			if(!Util.isVazioOuBranco(setores) && setores.length != 0){
				hql.append(" setorCom.id  in (:idSetorComercial) and ");
				parameters.put("idSetorComercial", setores);
			}

			// Bairro
			if(!Util.isVazioOuBranco(bairros) && bairros.length != 0){
				hql.append(" bair.id  in (:idBairro) and ");
				parameters.put("idBairro", bairros);
			}

			// Servico
			if(!Util.isVazioOuBranco(tiposServico) && tiposServico.length != 0){
				hql.append(" servTipo.id  in (:idServicoTipo) and ");
				parameters.put("idServicoTipo", tiposServico);
			}

			hql = new StringBuffer(hql.substring(0, hql.length() - 4));

			hql.append(" order by os.dataGeracao");

			query = session.createQuery(hql.toString());

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();

			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Set){
					Set setList = (HashSet) parameters.get(key);
					query.setParameterList(key, setList);
				}else if(parameters.get(key) instanceof Collection){
					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer[]){
					Integer[] collection = (Integer[]) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof Integer){
					Integer parametroInteger = (Integer) parameters.get(key);
					query.setParameter(key, parametroInteger);
				}else if(parameters.get(key) instanceof String[]){
					String[] collection = (String[]) parameters.get(key);
					query.setParameterList(key, collection);
				}else if(parameters.get(key) instanceof String){
					String parametroString = (String) parameters.get(key);
					query.setParameter(key, parametroString);
				}else if(parameters.get(key) instanceof Date){
					Date parametroDate = (Date) parameters.get(key);
					query.setParameter(key, parametroDate);
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			retornoConsulta = query.list();

		}catch(HibernateException e){
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	public void pesquisasql(String string){

		Session sessao = HibernateUtil.getSession();
		Query query = sessao.createQuery(string);
		query.list();
	}

	public Collection<CriterioSituacaoLigacaoAgua> pesquisarCobrancaCriterioSituacaoLigacaoAgua(Integer idCobrancaCriterio,
					Integer idSituacaoAguaLigacao) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();

		Collection<CriterioSituacaoLigacaoAgua> colecaoCriterioSituacaoLigacaoAgua = null;

		try{

			StringBuffer query = new StringBuffer();
			query.append(" select csla from CriterioSituacaoLigacaoAgua csla ");
			query.append(" where csla.comp_id.cobrancaCriterio.id = :idCobrancaCriterio and ");
			query.append("       csla.comp_id.ligacaoAguaSituacao.id = :idSituacaoAguaLigacao");

			colecaoCriterioSituacaoLigacaoAgua = (Collection<CriterioSituacaoLigacaoAgua>) sessao.createQuery(query.toString())
							.setInteger("idCobrancaCriterio", idCobrancaCriterio)
							.setInteger("idSituacaoAguaLigacao", idSituacaoAguaLigacao).list();

		}catch(HibernateException ex){
			ex.printStackTrace();
			throw new ErroRepositorioException(ex, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return colecaoCriterioSituacaoLigacaoAgua;
	}

	public Collection<CriterioSituacaoLigacaoEsgoto> pesquisarCobrancaCriterioSituacaoLigacaoEsgoto(Integer idCobrancaCriterio,
					Integer idSituacaoEsgotoLigacao) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();

		Collection<CriterioSituacaoLigacaoEsgoto> colecaoCriterioSituacaoLigacaoEsgoto = null;
		try{

			StringBuffer query = new StringBuffer();
			query.append(" select csle from CriterioSituacaoLigacaoEsgoto csle ");
			query.append(" where csle.comp_id.cobrancaCriterio.id = :idCobrancaCriterio and ");
			query.append("       csle.comp_id.ligacaoEsgotoSituacao.id = :idSituacaoEsgotoLigacao");

			colecaoCriterioSituacaoLigacaoEsgoto = sessao.createQuery(query.toString())
							.setInteger("idCobrancaCriterio", idCobrancaCriterio)
							.setInteger("idSituacaoEsgotoLigacao", idSituacaoEsgotoLigacao).list();

		}catch(HibernateException ex){
			ex.printStackTrace();
			throw new ErroRepositorioException(ex, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return colecaoCriterioSituacaoLigacaoEsgoto;

	}

	/**
	 * 
	 */
	public Collection pesquisarRotasPorSetorComercial(Integer idSetorComercial) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		StringBuilder consulta = new StringBuilder();
		try{
			consulta.append("select rota from Rota rota " + " where rota.setorComercial.id = :idSetorComercial ");
			retorno = session.createQuery(consulta.toString()).setInteger("idSetorComercial", idSetorComercial).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * @author Saulo Lima
	 * @date 01/10/2010
	 * @param idSetorComercial
	 * @param idCobrancaGrupo
	 * @return Collection<Rota>
	 * @throws ErroRepositorioException
	 */
	public Collection<Rota> pesquisarRotasPorSetorComercialCobrancaGrupo(Integer idSetorComercial, Integer idCobrancaGrupo)
					throws ErroRepositorioException{

		Collection<Rota> retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		String consulta;
		try{

			consulta = "select rota from Rota rota where rota.setorComercial.id = :idSetorComercial and rota.cobrancaGrupo.id = :idCobrancaGrupo";

			retorno = session.createQuery(consulta).setInteger("idSetorComercial", idSetorComercial)
							.setInteger("idCobrancaGrupo", idCobrancaGrupo).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * 
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentosComAcaoContraEfeitoPorImovel(Integer idImovel)
					throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();
		Collection<CobrancaDocumento> retorno = null;
		try{
			StringBuilder hql = new StringBuilder();

			hql.append(" Select cbdo from CobrancaDocumento cbdo ").append(" inner join fetch cbdo.cobrancaAcao cbac ")
							.append(" where cbdo.imovel.id = :idImovel order by cbdo.emissao desc ");

			retorno = sessao.createQuery(hql.toString()).setInteger("idImovel", idImovel).list();
			if(retorno != null && !retorno.isEmpty()){
				for(CobrancaDocumento objeto : retorno){
					Hibernate.initialize(objeto.getCobrancaDocumentoItems());
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}
		return retorno;
	}

	/**
	 * @param idCobrancaDocumentoItem
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection pesquisarContasDeCobrancaDocumentoItem(Integer idCobrancaDocumentoItem) throws ErroRepositorioException{

		Collection retorno = null;
		// Cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// Cria a variavel que vai conter o hql
		StringBuilder consulta = new StringBuilder();
		try{
			consulta.append("select cg.conta from CobrancaDocumentoItem cdi ").append("inner join cdi.contaGeral  cg")
							.append(" where cg.indicadorHistorico <> :indicadorHistorico ")
							.append(" and cdi.cobrancaDocumento.id = :idCobrancaDocumentoItem ");
			retorno = session.createQuery(consulta.toString()).setInteger("indicadorHistorico", ContaGeral.INDICADOR_HISTORICO)
							.setInteger("idCobrancaDocumentoItem", idCobrancaDocumentoItem).list();

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaAcaoComando
	 * @param dataEmissao
	 * @param idCobrancaAcao
	 * @param quantidadeCobrancaDocumentoInicio
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoPorCobrancaAcao(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Date dataEmissao, Integer idCobrancaAcao, int quantidadeCobrancaDocumentoInicio)
					throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		// ---------------------------------------------------------------------------------------------------------------
		// Manutencao performance : Por Yara Souza 04/10/2010
		// ---------------------------------------------------------------------------------------------------------------
		try{
			consulta.append("SELECT cbdo ").append("FROM CobrancaDocumento cbdo LEFT JOIN cbdo.cliente cliente ").append("WHERE ");

			if(idCobrancaAcaoCronograma != null && !idCobrancaAcaoCronograma.equals("")){
				consulta.append(" cbdo.cobrancaAcaoAtividadeCronograma.id = ").append(idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null && !idCobrancaAcaoComando.equals("")){
				consulta.append(" cbdo.cobrancaAcaoAtividadeComando.id = ").append(idCobrancaAcaoComando);
			}

			//
			consulta.append(" AND cbdo.emissao = :dataEmissao ").append(" AND cbdo.cobrancaAcao.id = :idCobrancaAcao ");

			//
			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setInteger("idCobrancaAcao", idCobrancaAcao).setTimestamp("dataEmissao", dataEmissao)
							.setFirstResult(quantidadeCobrancaDocumentoInicio).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param idImovel
	 * @param idCobrancaAcaoAtividadeCronograma
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Boolean verificaNegativacao(Integer idImovel, Integer idCobrancaAcaoAtividadeCronograma, Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Boolean retorno = false;
		Integer quantidade = 0;

		StringBuffer hql = new StringBuffer();
		Session session = HibernateUtil.getSession();
		Query query = null;
		try{

			hql.append(" select count(negImovel.id) ");
			hql.append(" from gcom.cobranca.NegativacaoImovei negImovel ");

			if(idCobrancaAcaoAtividadeComando != null){

				hql.append(" left join negImovel.cobrancaAcaoAtividadeComando  comando");
				hql.append(" where negImovel.indicadorExcluido <> 1 ");
				hql.append(" and negImovel.dataExclusao is null ");
				hql.append(" and negImovel.imovel.id = ");
				hql.append(idImovel);
				hql.append(" and comando.id = ");
				hql.append(idCobrancaAcaoAtividadeComando);

			}else if(idCobrancaAcaoAtividadeCronograma != null){

				hql.append(" left join negImovel.cobrancaAcaoAtividadeCronograma  cronograma");
				hql.append(" where negImovel.indicadorExcluido <> 1 ");
				hql.append(" and negImovel.dataExclusao is null ");
				hql.append(" and negImovel.imovel.id = ");
				hql.append(idImovel);
				hql.append(" and cronograma.id = ");
				hql.append(idCobrancaAcaoAtividadeCronograma);
			}
			query = session.createQuery(hql.toString());
			quantidade = ((Number) query.uniqueResult()).intValue();
			if(quantidade > 0){
				retorno = true;
			}

			// Erro no hibernate
		}catch(HibernateException e){
			// Levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// Fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param idContaHistorico
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosImovelPorContaHistorico(Integer idContaHistorico) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append(" select ")
							.append(" ch.cnta_id as idConta, ")
							// 0
							.append(" i.imov_id as idImovel, ")
							// 1
							.append(" l.lagu_id as idLigacaoAgua, ")
							// 2
							.append(" i.last_id as idSitLigacaoAgua, ")
							// 3

							.append(" l.lagd_id as idLigacaoAguaDiametro, ")
							// 4
							.append(" l.lagm_id as idLigacaoAguaMaterial, ")
							// 5
							.append(" l.cotp_id as idCorteTipo, ")
							// 6
							.append(" l.mtco_id as idMotivoCorte, ")
							// 7
							.append(" l.stip_id as idSupressaoTipo, ")
							// 8
							.append(" l.spmt_id as idSupressaoMotivo ")
							// 9

							.append("from conta_historico ch ").append("inner join imovel i on i.imov_id = ch.imov_id ")
							.append("inner join ligacao_agua l on l.lagu_id = i.imov_id ").append("where ch.cnta_id = ")
							.append(idContaHistorico);
			retorno = (Object[]) session.createSQLQuery(consulta.toString()).addScalar("idConta", Hibernate.INTEGER)
							.addScalar("idImovel", Hibernate.INTEGER).addScalar("idLigacaoAgua", Hibernate.INTEGER)
							.addScalar("idSitLigacaoAgua", Hibernate.INTEGER)

							.addScalar("idLigacaoAguaDiametro", Hibernate.INTEGER).addScalar("idLigacaoAguaMaterial", Hibernate.INTEGER)
							.addScalar("idCorteTipo", Hibernate.INTEGER).addScalar("idMotivoCorte", Hibernate.INTEGER)
							.addScalar("idSupressaoTipo", Hibernate.INTEGER).addScalar("idSupressaoMotivo", Hibernate.INTEGER)

							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param idLigacaoAgua
	 * @return
	 * @throws ErroRepositorioException
	 * @deprecated
	 */
	public Object[] pesquisarContraAcaoPorCorteTipo(Integer idLigacaoAgua) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" select ")
							.append(" contraAcao.id, ")
							// 0
							.append(" contraAcao.servicoTipoContraAcao.id, ")
							// 1
							.append(" contraAcao.unidadeOrganizacional.id ")
							// 2
							.append("from gcom.cobranca.ContraAcao contraAcao ").append("inner join contraAcao.corteTipo corteTipo ")
							.append("where corteTipo.id in ( ")
							.append(" select corteTipo.id from gcom.atendimentopublico.ligacaoagua.LigacaoAgua  ligacaoagua")
							.append(" inner join ligacaoagua.corteTipo ").append(" where ligacaoagua.id = :idLigacaoAgua ").append(")");

			retorno = (Object[]) session.createQuery(consulta.toString()).setInteger("idLigacaoAgua", idLigacaoAgua).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param idServicoTipo
	 * @param dataEmissaoDocumentoCobranca
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarOSEncOuPenDoDocCobranca(Integer idServicoTipo, Date dataEmissaoDocumentoCobranca, Integer idImovel)
					throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" select count(*) ").append(" from gcom.atendimentopublico.ordemservico.OrdemServico orse  ")
							.append(" inner join orse.servicoTipo svtp  ").append(" left join orse.atendimentoMotivoEncerramento mote  ")
							.append(" where ").append(" svtp.id = :idServicoTipo ").append(" AND ").append(" orse.imovel.id = :idImovel ")
							.append(" AND ").append(" (orse.situacao = ").append(OrdemServico.SITUACAO_PENDENTE)
							.append(" OR ( orse.situacao = ").append(OrdemServico.SITUACAO_ENCERRADO).append(" AND mote.id = ")
							.append(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)
							.append(" AND orse.dataEncerramento >= :dataEmissaoDocumentoCobranca").append(" ))");

			retorno = ((Number) session.createQuery(consulta.toString()).setInteger("idServicoTipo", idServicoTipo)
							.setInteger("idImovel", idImovel).setTimestamp("dataEmissaoDocumentoCobranca", dataEmissaoDocumentoCobranca)
							.uniqueResult()).intValue();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param idLigacaoAgua
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarContraAcaoPorSupressaoTipo(Integer idLigacaoAgua) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" select ")
							.append(" contraAcao.id, ")
							// 0
							.append(" contraAcao.servicoTipoContraAcao.id, ")
							// 1
							.append(" contraAcao.unidadeOrganizacional.id ")
							// 2
							.append("from gcom.cobranca.ContraAcao contraAcao ")
							.append("inner join contraAcao.supressaoTipo supressaoTipo ").append("where supressaoTipo.id in ( ")
							.append(" select supressaoTipo.id from gcom.atendimentopublico.ligacaoagua.LigacaoAgua  ligacaoagua")
							.append(" inner join ligacaoagua.supressaoTipo ").append(" where ligacaoagua.id = :idLigacaoAgua ").append(")");

			retorno = (Object[]) session.createQuery(consulta.toString()).setInteger("idLigacaoAgua", idLigacaoAgua).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * perf.
	 */

	public Collection pesquisarCobrancaSituacaoPorCobrancaCriterio(Integer idCobrancaCriterio) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select cbst_id as cobrancaSituacao ").append("FROM criterio_situacao_cobranca cbst ")
							.append("WHERE cbct_id = :id ");

			retorno = session.createSQLQuery(consulta.toString()).addScalar("cobrancaSituacao", Hibernate.INTEGER)
							.setInteger("id", idCobrancaCriterio).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * perf.
	 */
	public DebitoCreditoSituacao pesquisarDebitoCreditoSituacao(Integer idDebitoCreditoSituacaoAtual) throws ErroRepositorioException{

		Session sessao = HibernateUtil.getSession();
		DebitoCreditoSituacao retorno = null;
		StringBuilder hql = new StringBuilder();
		try{

			hql.append(" select dcst from DebitoCreditoSituacao dcst ").append(" where dcst.id = :idDebitoCreditoSituacaoAtual ");

			retorno = (DebitoCreditoSituacao) sessao.createQuery(hql.toString())
							.setInteger("idDebitoCreditoSituacaoAtual", idDebitoCreditoSituacaoAtual).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
			hql = null;
		}
		return retorno;
	}

	public void atualizarNumeroSequenciaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizar;

		try{
			atualizar = "update cobranca_documento " + "set cbdo_nnsequenciadocumento = :idCobrancaDocumento where cbdo_id = :id";

			session.createQuery(atualizar).setInteger("idCobrancaDocumento", idCobrancaDocumento).setInteger("id", idCobrancaDocumento)
							.executeUpdate();

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

	}

	/**
	 * @author isilva
	 * @param PerfilParcelamento
	 * @param idRD
	 * @param idImovelSituacaoTipo
	 * @param idImovelPerfil
	 * @param idSubcategoria
	 * @param valorMinimoDebitoParcelar
	 * @param valorMaximoDebitoParcelar
	 * @param tipoPesquisa
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarExstenciaPerfilParcelamento(Integer idPerfilParcelamento, Integer idRD, Integer idImovelSituacaoTipo,
					Integer idImovelPerfil, Integer idSubcategoria, BigDecimal valorMinimoDebitoParcelar,
					BigDecimal valorMaximoDebitoParcelar, String tipoPesquisa) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		Query query = null;

		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();

		try{

			hql.append("select pp ");
			hql.append("from ParcelamentoPerfil pp ");
			// hql.append("left join fetch pp.resolucaoDiretoria rd ");
			// hql.append("left join fetch pp.imovelSituacaoTipo imt ");

			// if(idImovelPerfil != null) {
			// hql.append("left join fetch pp.imovelPerfil ip ");
			// }

			// if(idSubcategoria != null) {
			// hql.append("left join fetch pp.subcategoria sc ");
			// }

			hql.append("where ");

			if(idSubcategoria == null){
				hql.append("pp.subcategoria is null and ");
			}else{
				hql.append("pp.subcategoria.id = :idSubcategoria and ");
				parameters.put("idSubcategoria", idSubcategoria);
			}

			if(idImovelPerfil == null){
				hql.append("pp.imovelPerfil is null and ");
			}else{
				hql.append("pp.imovelPerfil.id = :idImovelPerfil and ");
				parameters.put("idImovelPerfil", idImovelPerfil);
			}

			// if (valorMinimoDebitoParcelar != null &&
			// valorMaximoDebitoParcelar != null) {
			// hql.append("(( :valorMinimoDebitoParcelar >= pp.valorMinimoDebitoAParcelarFaixaDebito and :valorMinimoDebitoParcelar <= pp.valorMaximoDebitoAParcelarFaixaDebito ) or ");
			// hql.append("( :valorMaximoDebitoParcelar >= pp.valorMinimoDebitoAParcelarFaixaDebito and :valorMaximoDebitoParcelar <= pp.valorMaximoDebitoAParcelarFaixaDebito )) and ");
			// parameters.put("valorMinimoDebitoParcelar",
			// valorMinimoDebitoParcelar);
			// parameters.put("valorMaximoDebitoParcelar",
			// valorMaximoDebitoParcelar);
			// }

			hql.append("pp.imovelSituacaoTipo.id = :idImovelSituacaoTipo and ");
			parameters.put("idImovelSituacaoTipo", idImovelSituacaoTipo);

			hql.append("pp.resolucaoDiretoria.id = :idRD and ");
			parameters.put("idRD", idRD);

			if(!Util.isVazioOuBranco(tipoPesquisa) && tipoPesquisa.equalsIgnoreCase("ALTERAR")){
				if(idPerfilParcelamento != null){
					hql.append("pp.id != :idPerfilParcelamento and ");
					parameters.put("idPerfilParcelamento", idPerfilParcelamento);
				}
			}

			// retira o " and " q fica sobrando no final da query
			hql = new StringBuffer(hql.substring(0, hql.length() - 4));

			query = session.createQuery(hql.toString());
			query = Util.configuraParamentrosEmQuery(query, parameters);

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Remove os ParcelamentoQuantidadePrestacao e seus ParcelamentoFaixaValor
	 * se existir.
	 * 
	 * @author isilva
	 * @created 10/11/2010
	 * @param idParcelamentoQuantidadeReparcelamento
	 * @throws ErroRepositorioException
	 */
	public void removerParcelamentoQuantidadePrestacaoEParcelamentoFaixaValor(Integer idParcelamentoQuantidadeReparcelamento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		try{

			Collection<ParcelamentoQuantidadePrestacao> parcelamentoQuantidadePrestacaoRemover = new ArrayList<ParcelamentoQuantidadePrestacao>();

			String consulta = "select pqp from ParcelamentoQuantidadePrestacao pqp where pqp.parcelamentoQuantidadeReparcelamento.id = :idParcelamentoQuantidadeReparcelamento";
			Collection<ParcelamentoQuantidadePrestacao> parcelamentoQuantidadePrestacao = (ArrayList<ParcelamentoQuantidadePrestacao>) session
							.createQuery(consulta)
							.setInteger("idParcelamentoQuantidadeReparcelamento", idParcelamentoQuantidadeReparcelamento).list();
			parcelamentoQuantidadePrestacaoRemover.addAll(parcelamentoQuantidadePrestacao);

			if(parcelamentoQuantidadePrestacaoRemover != null && parcelamentoQuantidadePrestacaoRemover.size() > 0){
				for(ParcelamentoQuantidadePrestacao quantidadePrestacaoRemover : parcelamentoQuantidadePrestacaoRemover){

					Collection<ParcelamentoFaixaValor> parcelamentoFaixaValorRemover = new ArrayList<ParcelamentoFaixaValor>();

					consulta = "select pfv from ParcelamentoFaixaValor pfv where pfv.parcelamentoQuantidadePrestacao.id = :idParcelamentoQuantidadePrestacao";
					Collection<ParcelamentoFaixaValor> parcelamentoFaixaValor = (ArrayList<ParcelamentoFaixaValor>) session
									.createQuery(consulta)
									.setInteger("idParcelamentoQuantidadePrestacao", quantidadePrestacaoRemover.getId()).list();
					parcelamentoFaixaValorRemover.addAll(parcelamentoFaixaValor);

					if(parcelamentoFaixaValorRemover != null && parcelamentoFaixaValorRemover.size() > 0){
						for(ParcelamentoFaixaValor faixaValorRemover : parcelamentoFaixaValorRemover){
							// Remove ParcelamentoFaixaValor
							session.delete(faixaValorRemover);
						}
					}

					// Remove ParcelamentoQuantidadePrestacao
					session.delete(quantidadePrestacaoRemover);
				}
			}

			session.flush();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Remove os ParcelamentoQuantidadePrestacao e seus ParcelamentoFaixaValor
	 * se existir.
	 * 
	 * @author isilva
	 * @created 11/11/2010
	 * @param idsParcelamentoQuantidadePrestacao
	 * @throws ErroRepositorioException
	 */
	public void removerParcelamentoQuantidadePrestacaoEParcelamentoFaixaValor(Collection<Integer> idsParcelamentoQuantidadePrestacao)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		try{

			Collection<ParcelamentoQuantidadePrestacao> parcelamentoQuantidadePrestacaoRemover = new ArrayList<ParcelamentoQuantidadePrestacao>();

			String consulta = "select pqp from ParcelamentoQuantidadePrestacao pqp where pqp.id in (:idsParcelamentoQuantidadePrestacao)";
			Collection<ParcelamentoQuantidadePrestacao> parcelamentoQuantidadePrestacao = (ArrayList<ParcelamentoQuantidadePrestacao>) session
							.createQuery(consulta)
							.setParameterList("idsParcelamentoQuantidadePrestacao", idsParcelamentoQuantidadePrestacao).list();
			parcelamentoQuantidadePrestacaoRemover.addAll(parcelamentoQuantidadePrestacao);

			if(parcelamentoQuantidadePrestacaoRemover != null && parcelamentoQuantidadePrestacaoRemover.size() > 0){
				for(ParcelamentoQuantidadePrestacao quantidadePrestacaoRemover : parcelamentoQuantidadePrestacaoRemover){

					Collection<ParcelamentoFaixaValor> parcelamentoFaixaValorRemover = new ArrayList<ParcelamentoFaixaValor>();

					consulta = "select pfv from ParcelamentoFaixaValor pfv where pfv.parcelamentoQuantidadePrestacao.id = :idParcelamentoQuantidadePrestacao";
					Collection<ParcelamentoFaixaValor> parcelamentoFaixaValor = (ArrayList<ParcelamentoFaixaValor>) session
									.createQuery(consulta)
									.setInteger("idParcelamentoQuantidadePrestacao", quantidadePrestacaoRemover.getId()).list();
					parcelamentoFaixaValorRemover.addAll(parcelamentoFaixaValor);

					if(parcelamentoFaixaValorRemover != null && parcelamentoFaixaValorRemover.size() > 0){
						for(ParcelamentoFaixaValor faixaValorRemover : parcelamentoFaixaValorRemover){
							// Remove ParcelamentoFaixaValor
							session.delete(faixaValorRemover);
						}
					}

					// Remove ParcelamentoQuantidadePrestacao
					session.delete(quantidadePrestacaoRemover);
				}
			}

			session.flush();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaAcaoComando
	 * @param dataEmissao
	 * @param idCobrancaAcao
	 * @param quantidadeCobrancaDocumentoInicio
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoNaoNegativado(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando, Date dataEmissao) throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		// ---------------------------------------------------------------------------------------------------------------
		// Manutencao performance : Por Yara Souza 04/10/2010
		// ---------------------------------------------------------------------------------------------------------------
		try{
			consulta.append("SELECT cbdo ").append("FROM CobrancaDocumento cbdo ").append("WHERE ");

			if(idCobrancaAcaoCronograma != null && !idCobrancaAcaoCronograma.equals("")){
				consulta.append(" cbdo.cobrancaAcaoAtividadeCronograma.id = ").append(idCobrancaAcaoCronograma);
			}
			if(idCobrancaAcaoComando != null && !idCobrancaAcaoComando.equals("")){
				consulta.append(" cbdo.cobrancaAcaoAtividadeComando.id = ").append(idCobrancaAcaoComando);
			}
			consulta.append(" AND cbdo.emissao = :dataEmissao AND ")
							.append(" cbdo.imovel.id not in (select imovel.id from NegativacaoImovei where indicadorExcluido = 2 and dataExclusao is not null)");

			retorno = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
							.setTimestamp("dataEmissao", dataEmissao).list()));

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Hidrometro getHidrometro(String numeroHidrometro) throws ErroRepositorioException{

		StringBuffer query = new StringBuffer();
		Session session = HibernateUtil.getSession();
		Hidrometro hidrometro = null;

		try{
			query.append("SELECT hidro FROM Hidrometro hidro  ");
			query.append("LEFT JOIN FETCH hidro.hidrometroDiametro ");
			query.append("WHERE hidro.numero = :numeroHidrometro ");

			hidrometro = (Hidrometro) session.createQuery(query.toString()).setString("numeroHidrometro", numeroHidrometro).uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return hidrometro;
	}

	public HidrometroInstalacaoHistorico getHidrometroInstalacaoHistorico(String numeroHidrometro) throws ErroRepositorioException{

		StringBuffer query = new StringBuffer();
		Session session = HibernateUtil.getSession();
		HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = null;

		try{
			query.append("SELECT hih FROM HidrometroInstalacaoHistorico hih ");
			query.append("LEFT JOIN FETCH hih.hidrometroLocalInstalacao hli ");
			query.append("WHERE hih.numeroHidrometro = :numeroHidrometro ");
			query.append("AND hih.dataRetirada IS NULL ");

			hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) session.createQuery(query.toString())
							.setString("numeroHidrometro", numeroHidrometro).uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return hidrometroInstalacaoHistorico;
	}

	/**
	 * [UC1100] Pesquisa Parcelamento com quantidade maxima de Prestacoes
	 * 
	 * @param idResolucaoDiretoria
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ParcelamentoQuantidadePrestacao pesquisarParcelamentoQuantidadePrestacaoMaximaParcela(Integer idResolucaoDiretoria)
					throws ErroRepositorioException{

		ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = null;
		Object retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select pqp ").append("from ParcelamentoQuantidadePrestacao pqp ")
							.append("inner join pqp.parcelamentoQuantidadeReparcelamento pqr ")
							.append("inner join pqr.parcelamentoPerfil pp ").append("where pp.resolucaoDiretoria.id = :resolucao ")
							.append("and pqp.quantidadeMaximaPrestacao = ").append("(select max(pqp1.quantidadeMaximaPrestacao) ")
							.append("from ParcelamentoQuantidadePrestacao pqp1 ")
							.append("inner join pqp1.parcelamentoQuantidadeReparcelamento pqr1 ")
							.append("inner join pqr1.parcelamentoPerfil pp1 ").append("where pp1.resolucaoDiretoria.id = :resolucao ) ");

			retorno = session.createQuery(consulta.toString()).setInteger("resolucao", idResolucaoDiretoria).setMaxResults(1)
							.uniqueResult();

			if(retorno != null){
				parcelamentoQuantidadePrestacao = (ParcelamentoQuantidadePrestacao) retorno;
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return parcelamentoQuantidadePrestacao;
	}

	public PreParcelamentoHelper obterPreParcelamento(CobrancaDocumento documentoCobranca) throws ErroRepositorioException{

		PreParcelamento retPreParcelamento = null;

		Collection<PreParcelamentoOpcao> colPreParcelamentoOpcao = new ArrayList<PreParcelamentoOpcao>();

		PreParcelamentoHelper preParcelamentoHelper = new PreParcelamentoHelper();

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();
		try{

			consulta.append("select pp ").append("from PreParcelamento pp ").append("where pp.documentoCobranca.id = :documento ");

			retPreParcelamento = (PreParcelamento) session.createQuery(consulta.toString())
							.setInteger("documento", documentoCobranca.getId()).setMaxResults(1).uniqueResult();

			if(retPreParcelamento != null){
				preParcelamentoHelper.setPreParcelamento(retPreParcelamento);
				consulta = new StringBuilder();
				consulta.append("select ppo ").append("from PreParcelamentoOpcao ppo ")
								.append("where ppo.preParcelamento.id = :pre order by ppo.posicaoOpcao ");

				colPreParcelamentoOpcao = new ArrayList(new CopyOnWriteArraySet(session.createQuery(consulta.toString())
								.setInteger("pre", retPreParcelamento.getId()).list()));

				preParcelamentoHelper.setColecaoPreParcelamentoOpcao(colPreParcelamentoOpcao);
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return preParcelamentoHelper;
	}

	/**
	 * 
	 */
	public Integer pesquisarQuantidadeCobrancaDocumentoItem(int idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select count(*) ").append("from CobrancaDocumentoItem cobrancaDocumentoItem ")
							.append("where cobrancaDocumentoItem.cobrancaDocumento = :idCobrancaDocumento");

			retorno = ((Number) session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.uniqueResult()).intValue();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarOrdemServicoPorDocumentoCobranca(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();

		String consulta = null;

		try{

			consulta = "select orse from OrdemServico orse left join fetch orse.imovel imov "
							+ "where orse.cobrancaDocumento = :idCobrancaDocumento";

			retorno = (ArrayList) session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 */
	public PreParcelamentoOpcao obterCobrancaDocumentoPreParcelamentoOpcao(Integer seguencialDocCobrancao, Integer idPreParcelamentoOpcao)
					throws ErroRepositorioException{

		PreParcelamentoOpcao preParcelamentoOpcao = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();
		try{

			consulta.append("SELECT ppo ").append("FROM PreParcelamentoOpcao ppo ").append("INNER JOIN FETCH ppo.preParcelamento pp ")
							.append("INNER JOIN FETCH pp.documentoCobranca cd ").append("INNER JOIN FETCH cd.imovel im ")
							.append("WHERE cd.numeroSequenciaDocumento = :nn ").append("AND ppo.id                        = :id ");

			preParcelamentoOpcao = (PreParcelamentoOpcao) session.createQuery(consulta.toString()).setInteger("nn", seguencialDocCobrancao)
							.setInteger("id", idPreParcelamentoOpcao).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return preParcelamentoOpcao;
	}

	/**
	 * retorna uma colecao de ResolucaoDiretoria
	 * 
	 * @author Anderson Italo
	 * @date 07/04/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaDataVigenciaFimMaiorIgualDataAtual() throws ErroRepositorioException{

		Collection retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "select rd " + "from ResolucaoDiretoria rd "
							+ "where (rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual) "
							+ "and (rd.dataVigenciaInicio <= :dataAtual) " + "order by rd.numeroResolucaoDiretoria ";

			retorno = (Collection) session.createQuery(consulta).setDate("dataAtual", new Date()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Object[] pesquisarContraAcao(ContraAcao contraAcao, Integer idCobrancaDocumento) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" select ")
							.append(" contraAcao.id, ")
							// 0
							.append(" contraAcao.servicoTipoContraAcao.id, ")
							// 1
							.append(" contraAcao.unidadeOrganizacional.id, ")
							// 2
							.append(" contraAcao.servicoTipoAcao.id ")
							// 3
							.append("from gcom.cobranca.ContraAcao contraAcao ")

							.append(" inner join contraAcao.servicoTipoContraAcao servicoTipoContraAcao ")
							// .append( idCobrancaDocumento)
							// .append(" and os.servicoTipo = contraAcao.servicoTipoAcao)")
							.append(" where  ")

							.append(" contraAcao.servicoTipoAcao.id in ( ")
							.append(" select servicoTipo.id from gcom.atendimentopublico.ordemservico.OrdemServico os ")
							.append(" where os.cobrancaDocumento = ").append(idCobrancaDocumento)
							.append(" and os.atendimentoMotivoEncerramento = ").append(AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)
							.append(" ) ")

							.append(" and contraAcao.acaoCobrancaEfeito = ").append(contraAcao.getAcaoCobrancaEfeito().getId())
							.append(" and contraAcao.indicadorUso = ").append(ConstantesSistema.SIM)
							.append(" and servicoTipoContraAcao.indicadorUso = ").append(ConstantesSistema.SIM);

			if(contraAcao.getLigacaoAguaSituacao() != null){
				consulta.append(" and (contraAcao.ligacaoAguaSituacao = ").append(contraAcao.getLigacaoAguaSituacao().getId())
								.append(" or contraAcao.ligacaoAguaSituacao is null) ");

			}
			if(contraAcao.getLigacaoAguaDiametro() != null){
				consulta.append(" and (contraAcao.ligacaoAguaDiametro = ").append(contraAcao.getLigacaoAguaDiametro().getId())
								.append(" or contraAcao.ligacaoAguaDiametro is null) ");
			}
			if(contraAcao.getLigacaoAguaMaterial() != null){
				consulta.append(" and (contraAcao.ligacaoAguaMaterial = ").append(contraAcao.getLigacaoAguaMaterial().getId())
								.append(" or contraAcao.ligacaoAguaMaterial is null) ");
			}
			if(contraAcao.getCorteTipo() != null){
				consulta.append(" and (contraAcao.corteTipo = ").append(contraAcao.getCorteTipo().getId())
								.append(" or contraAcao.corteTipo is null) ");
			}
			if(contraAcao.getMotivoCorte() != null){
				consulta.append(" and (contraAcao.motivoCorte = ").append(contraAcao.getMotivoCorte().getId())
								.append(" or contraAcao.motivoCorte is null) ");
			}
			if(contraAcao.getSupressaoTipo() != null){
				consulta.append(" and (contraAcao.supressaoTipo = ").append(contraAcao.getSupressaoTipo().getId())
								.append(" or contraAcao.supressaoTipo is null) ");
			}
			if(contraAcao.getSupressaoMotivo() != null){
				consulta.append(" and (contraAcao.supressaoMotivo = ").append(contraAcao.getSupressaoMotivo().getId())
								.append(" or contraAcao.supressaoMotivo is null) ");
			}

			consulta.append(" order by contraAcao.ligacaoAguaSituacao.id,contraAcao.ligacaoAguaDiametro.id,contraAcao.ligacaoAguaMaterial.id,");
			consulta.append(" contraAcao.corteTipo.id, contraAcao.motivoCorte.id,contraAcao.supressaoTipo.id,contraAcao.supressaoMotivo.id ");

			retorno = (Object[]) session.createQuery(consulta.toString()).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public List consultarTotalizadoresAcaoCobrancaAtividade(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma) throws ErroRepositorioException{

		List retorno = null;
		Session sessao = HibernateUtil.getSession();
		try{
			String consulta = "select count(IMOV_ID) as qtdDocumentos ,sum(CAAI_VLDOCUMENTOS) as valorTotalDocumentos ,sum(CAAI_QTDDOCUMENTOITEM) as qtdDocumentoItens from COBRANCA_ACAO_ATIV_IMOVEL where ";
			if(cobrancaAcaoAtividadeComando != null){
				consulta += "cacm_id = :cacm ";
				retorno = (List) ((SQLQuery) sessao.createSQLQuery(consulta).setInteger("cacm", cobrancaAcaoAtividadeComando.getId()))
								.addScalar("qtdDocumentos", Hibernate.INTEGER).addScalar("valorTotalDocumentos", Hibernate.BIG_DECIMAL)
								.addScalar("qtdDocumentoItens", Hibernate.INTEGER).list();
			}else if(cobrancaAcaoAtividadeCronograma != null){
				consulta += "caac_id = :caac ";
				retorno = (List) ((SQLQuery) sessao.createSQLQuery(consulta).setInteger("caac", cobrancaAcaoAtividadeCronograma.getId()))
								.addScalar("qtdDocumentos", Hibernate.INTEGER).addScalar("valorTotalDocumentos", Hibernate.BIG_DECIMAL)
								.addScalar("qtdDocumentoItens", Hibernate.INTEGER).list();
			}

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return retorno;
	}

	/**
	 * @author Bruno Ferreira dos Santos
	 * @param id
	 * @return
	 * @throws ErroRepositorioException
	 */
	public PreParcelamentoOpcao obterPreParcelamentoOpcao(Integer id) throws ErroRepositorioException{

		PreParcelamentoOpcao retPreParcelamentoOpcao = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();
		try{

			consulta.append("select ppo ").append("from PreParcelamentoOpcao ppo ").append("INNER JOIN FETCH ppo.preParcelamento pp ")
							.append("INNER JOIN FETCH pp.documentoCobranca cd ").append("where ppo.id = :id ");

			retPreParcelamentoOpcao = (PreParcelamentoOpcao) session.createQuery(consulta.toString()).setInteger("id", id).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retPreParcelamentoOpcao;
	}

	/**
	 * @deprecated
	 */
	public Integer consultarTotalizadoresAcaoCobrancaAtividadeItens(CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma) throws ErroRepositorioException{

		Integer retorno = null;
		Session sessao = HibernateUtil.getSession();
		try{
			String consulta = "select count(*) as count from cobranca_documento_item a inner join cobranca_documento b on a.cbdo_id = b.cbdo_id where ";
			if(cobrancaAcaoAtividadeComando != null){
				consulta += "b.cacm_id = :cacm ";
				retorno = (Integer) ((SQLQuery) sessao.createSQLQuery(consulta).setInteger("cacm", cobrancaAcaoAtividadeComando.getId()))
								.addScalar("count", Hibernate.INTEGER).uniqueResult();
			}else if(cobrancaAcaoAtividadeCronograma != null){
				consulta += "b.caac_id = :caac ";
				retorno = (Integer) ((SQLQuery) sessao.createSQLQuery(consulta).setInteger("caac", cobrancaAcaoAtividadeCronograma.getId()))
								.addScalar("count", Hibernate.INTEGER).uniqueResult();
			}

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return retorno;
	}

	public Integer obterSequenceInfracaoPerfil() throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = null;

		try{
			Dialect dialect = Dialect.getDialect();

			consulta = dialect.getSequenceNextValString("sq_infracao_perfil");

			Number retornoConsulta = (Number) session.createSQLQuery(consulta).uniqueResult();

			if(retornoConsulta != null){
				retorno = retornoConsulta.intValue();
			}
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Integer obterIdAcaoCobrancaEfeitoPelaCobrancaAcao(Integer idCbac) throws ErroRepositorioException{

		Integer retorno;
		Session session = HibernateUtil.getSession();

		String consulta = "select acef_id from cobranca_acao where cbac_id = :idCbac ";

		try{
			retorno = (Integer) session.createSQLQuery(consulta).addScalar("acef_id", Hibernate.INTEGER).setInteger("idCbac", idCbac)
							.uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	public Collection pesquisarOrdemServicoPorDocumentoCobranca(Integer idCobrancaDocumento, Integer idServicoTipoAcao)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();

		String consulta = null;

		try{

			consulta = "select orse " + "from OrdemServico orse " + "where orse.cobrancaDocumento = :idCobrancaDocumento "
							+ " and  orse.servicoTipo = :idServicoTipoAcao" + " order by orse.dataGeracao desc ";

			retorno = session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.setInteger("idServicoTipoAcao", idServicoTipoAcao).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<CobrancaSituacaoHistorico> pesquisarCobrancaSituacaoHistorico(Integer idImovel, Integer anoMesFinal)
					throws ErroRepositorioException{

		Collection<CobrancaSituacaoHistorico> retorno = new ArrayList<CobrancaSituacaoHistorico>();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select cbsh ");
			consulta.append("from CobrancaSituacaoHistorico cbsh ");
			consulta.append("where cbsh.imovel = :idImovel ");
			consulta.append("  and cbsh.anoMesCobrancaSituacaoFim >= :anoMesFinal ");
			consulta.append("  and cbsh.cobrancaSituacaoMotivo.id in (4, 5) ");
			consulta.append("  and cbsh.anoMesCobrancaRetirada is null ");

			retorno = session.createQuery(consulta.toString()).setInteger("idImovel", idImovel).setInteger("anoMesFinal", anoMesFinal)
							.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Integer pesquisarDebitosACobrarDeParcelamentoEmAberto(Integer idImovel, Integer anoMesReferencia,
					Collection<Integer> idsDebitoTipo) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		Integer situacaoNormal = DebitoCreditoSituacao.NORMAL;

		String idsDebitoTipoString = "";
		StringBuilder idsDebitoTipoStringBuilder = new StringBuilder();

		if(!Util.isVazioOrNulo(idsDebitoTipo)){
			for(Integer idDebitoTipo : idsDebitoTipo){
				idsDebitoTipoStringBuilder.append(idDebitoTipo);
				idsDebitoTipoStringBuilder.append(',');
			}

			idsDebitoTipoString = idsDebitoTipoStringBuilder.toString();

			// Removendo ultima virgula
			idsDebitoTipoString = idsDebitoTipoString.substring(0, idsDebitoTipoString.length() - 1);
		}

		try{
			consulta.append(" select count(*) as count");
			consulta.append(" from debito_a_cobrar dbac ");
			consulta.append(" left join parcelamento_item pcit on pcit.parc_id = dbac.parc_id ");
			consulta.append(" left join conta_historico cnhi on cnhi.cnta_id = pcit.cnta_id ");
			consulta.append(" where dbac.imov_id = " + idImovel);
			consulta.append("   and dbac.dcst_idatual = " + situacaoNormal);
			consulta.append("   and dbac.dbac_nnprestacaocobradas < dbac.dbac_nnprestacaodebito ");
			consulta.append("   and dbac.dbtp_id in (" + idsDebitoTipoString + ") ");
			consulta.append("   and cnhi.cnhi_amreferenciaconta <= " + anoMesReferencia);
			consulta.append("   and not exists (select 1 ");
			consulta.append("                   from pagamento pgmt ");
			consulta.append("                   where pgmt.dbac_id = dbac.dbac_id) ");

			retorno = (Integer) session.createSQLQuery(consulta.toString()).addScalar("count", Hibernate.INTEGER).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	public Collection<BoletoBancario> pesquisarBoletoBancario(BoletoBancarioHelper boletoBancarioHelper, boolean desconsiderarParametros,
					boolean verificarDocumentoCobranca, boolean verificarNumeroBoletoCartaCobranca, int pageOffset)
					throws ErroRepositorioException{

		List retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();
		Query query = null;

		try{
			hql.append(" select bb ");
			hql.append(" from BoletoBancario bb ");
			hql.append(" inner join fetch bb.imovel imovel ");
			hql.append(" inner join fetch bb.arrecadador arrecadador ");
			hql.append(" inner join fetch arrecadador.cliente  ");
			hql.append(" inner join fetch bb.documentoTipo dt ");
			hql.append(" inner join fetch bb.boletoBancarioSituacao bbs ");
			hql.append(" left join fetch bb.boletoBancarioMotivoCancelamento bbmc ");
			hql.append(" left join fetch bb.documentoCobranca dc ");
			hql.append(" where ");

			if(!desconsiderarParametros){

				if(boletoBancarioHelper.getImovel() != null){
					hql.append(" bb.imovel = :imovel and ");
					parameters.put("imovel", boletoBancarioHelper.getImovel());
				}

				if(boletoBancarioHelper.getCliente() != null){
					hql.append(" bb.cliente = :cliente and ");
					parameters.put("cliente", boletoBancarioHelper.getCliente());
				}

				if(boletoBancarioHelper.getDataInicialVencimento() != null && boletoBancarioHelper.getDataFinalVencimento() != null){
					hql.append(" bb.dataVencimento >= :dataInicialVencimento and bb.dataVencimento <= :dataFinalVencimento  and ");

					parameters.put("dataInicialVencimento", boletoBancarioHelper.getDataInicialVencimento());
					parameters.put("dataFinalVencimento", boletoBancarioHelper.getDataFinalVencimento());
				}

				if(boletoBancarioHelper.getDataInicialCancelamento() != null && boletoBancarioHelper.getDataFinalCancelamento() != null){
					hql.append(" bb.dataCancelamento >= :dataInicialCancelamento and bb.dataCancelamento <= :dataFinalCancelamento  and ");

					parameters.put("dataInicialCancelamento", boletoBancarioHelper.getDataInicialCancelamento());
					parameters.put("dataFinalCancelamento", boletoBancarioHelper.getDataFinalCancelamento());
				}

				if(boletoBancarioHelper.getDataInicialPagamento() != null && boletoBancarioHelper.getDataFinalPagamento() != null){
					hql.append(" bb.dataPagamento >= :dataInicialPagamento and bb.dataPagamento <= :dataFinalPagamento  and ");

					parameters.put("dataInicialPagamento", boletoBancarioHelper.getDataInicialPagamento());
					parameters.put("dataFinalPagamento", boletoBancarioHelper.getDataFinalPagamento());
				}

				if(boletoBancarioHelper.getDataInicialCredito() != null && boletoBancarioHelper.getDataFinalCredito() != null){
					hql.append(" bb.dataCredito >= :dataInicialCredito and bb.dataCredito <= :dataFinalCredito  and ");

					parameters.put("dataInicialCredito", boletoBancarioHelper.getDataInicialCredito());
					parameters.put("dataFinalCredito", boletoBancarioHelper.getDataFinalCredito());
				}

				String[] idsBoletoBancarioSituacao = boletoBancarioHelper.getIdsBoletoBancarioSituacao();

				if(idsBoletoBancarioSituacao != null && idsBoletoBancarioSituacao.length > 0){
					hql.append(" bbs.id in (:colecaoSituacao) and ");
					parameters.put("colecaoSituacao", converterArrayStringArrayInteger(idsBoletoBancarioSituacao));
				}

				String[] idsTipoDocumento = boletoBancarioHelper.getIdsTipoDocumento();

				if(idsTipoDocumento != null && idsTipoDocumento.length > 0){
					hql.append("  dt.id in (:colecaoDocumentoTipo) and ");
					parameters.put("colecaoDocumentoTipo", converterArrayStringArrayInteger(idsTipoDocumento));
				}

				String[] idsMotivoCancelamento = boletoBancarioHelper.getIdsMotivoCancelamento();

				if(idsMotivoCancelamento != null && idsMotivoCancelamento.length > 0){
					hql.append("  bbmc.id in (:colecaoMotivoCancelamento) and ");
					parameters.put("colecaoMotivoCancelamento", converterArrayStringArrayInteger(idsMotivoCancelamento));
				}

				if(verificarDocumentoCobranca){
					hql.append(" bb.documentoCobranca is not null and ");
				}

				if(boletoBancarioHelper.getDataInicialEntrada() != null && boletoBancarioHelper.getDataFinalEntrada() != null){

					hql.append(" bb.id in ( ");
					hql.append(" select bbsh.boletoBancario ");
					hql.append(" from BoletoBancarioSituacaoHistorico bbsh ");
					hql.append(" where  bbsh.dataEntrada >= :dataInicialEntrada ");
					hql.append(" and bbsh.dataEntrada <= :dataFinalEntrada ");
					hql.append(" and bbsh.boletoBancarioSituacao.id = :situacaoBoletoBancario) and ");

					parameters.put("dataInicialEntrada", boletoBancarioHelper.getDataInicialEntrada());
					parameters.put("dataFinalEntrada", boletoBancarioHelper.getDataFinalEntrada());

					parameters.put("situacaoBoletoBancario", BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO);
				}

				if(verificarNumeroBoletoCartaCobranca){
					hql.append(" bb.idOriginal in ");
					hql.append(" ( select bbaux.id  ");
					hql.append(" 	from BoletoBancario bbaux ");
					hql.append("   where  bbaux.numeroSequencial = :numSequencial and ");
					hql.append("   bbaux.arrecadador = :idArrecadador) ");

					parameters.put("idArrecadador", boletoBancarioHelper.getArrecadador());
					parameters.put("numSequencial", boletoBancarioHelper.getNumeroSequencial());
				}

			}

			if(boletoBancarioHelper.getArrecadador() != null && !verificarNumeroBoletoCartaCobranca){

				hql.append(" bb.arrecadador = :arrecadador and ");
				parameters.put("arrecadador", boletoBancarioHelper.getArrecadador());
			}

			if(boletoBancarioHelper.getNumeroSequencial() != null && !verificarNumeroBoletoCartaCobranca){
				hql.append(" bb.numeroSequencial = :numeroSequencial  ");
				parameters.put("numeroSequencial", boletoBancarioHelper.getNumeroSequencial());
			}

			String hqlAux = hql.substring(hql.length() - 4, hql.length());
			String orderBy = "";

			if(pageOffset < 0){
				// ordenacao necessaria para a quebra do relatorio
				orderBy = " order by bb.arrecadador.codigoAgente, bbs.id ";
			}else{
				// ordenacao necessaria para a paginacao da tela de manter boleto bancario
				orderBy = " order by bb.arrecadador.codigoAgente, bb.imovel.id, bb.numeroSequencial ";
			}

			if(hqlAux.equals("and ")){
				query = session.createQuery(hql.substring(0, hql.length() - 4) + orderBy);
			}else{
				hqlAux = "";
				hqlAux = hql.substring(hql.length() - 6, hql.length());
				if(hqlAux.equals("where ")){
					query = session.createQuery(hql.substring(0, hql.length() - 6) + orderBy);
				}else{
					query = session.createQuery(hql.toString() + orderBy);
				}
			}

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){

					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);

				}else if(parameters.get(key) instanceof Integer){
					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof String){
					query.setParameter(key, parameters.get(key));
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			if(pageOffset < 0){
				retorno = (List) query.list();
			}else{
				retorno = (List) query.setFirstResult(10 * pageOffset).setMaxResults(10).list();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	private Integer[] converterArrayStringArrayInteger(String[] arrayString){

		Integer[] arrayInteger = new Integer[arrayString.length];

		for(int i = 0; i < arrayString.length; i++){
			arrayInteger[i] = Integer.parseInt(arrayString[i]);
		}
		return arrayInteger;
	}

	public Collection<CobrancaDocumentoItem> obterCobrancaDocumentoItem(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ");
			consulta.append("FROM CobrancaDocumentoItem cdit ");
			consulta.append("WHERE cdit.cobrancaDocumento.id = :idCobrancaDocumento ");

			colecaoCobrancaDocumentoItem = session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return colecaoCobrancaDocumentoItem;
	}

	/**
	 * @author Carlos Chrystian
	 * @date 28/12/2011
	 * @param cobrancaDocumento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumentoItem> obterCobrancaDocumentoItemComConta(CobrancaDocumento cobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ");
			consulta.append("FROM CobrancaDocumentoItem cdit ");
			consulta.append("JOIN FETCH cdit.contaGeral cntageral ");
			consulta.append("JOIN FETCH cntageral.conta conta ");
			consulta.append("WHERE cdit.cobrancaDocumento.id = :idCobrancaDocumento ");
			consulta.append("ORDER BY conta.referencia ");

			colecaoCobrancaDocumentoItem = session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", cobrancaDocumento.getId()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return colecaoCobrancaDocumentoItem;
	}

	public BoletoBancario obterBoletoBancarioDebito(ObjetoTransacao debito) throws ErroRepositorioException{

		Collection<BoletoBancario> colecaoBoletoBancario = new ArrayList();

		BoletoBancario boletoBancario = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" SELECT bbm.boletoBancario ");
			consulta.append(" FROM BoletoBancarioMovimentacao bbm, ");
			consulta.append("   CobrancaDocumentoItem cdi ");
			consulta.append(" WHERE bbm.boletoBancarioLancamentoEnvio.id   IS NOT NULL ");
			consulta.append(" AND (bbm.arrecadadorMovimentoItem.id         IS NULL ");
			consulta.append(" OR (bbm.arrecadadorMovimentoItem.id          IS NOT NULL ");
			consulta.append(" AND bbm.boletoBancarioMovimentacaoRetorno.id IS NULL)) ");
			consulta.append(" AND (cdi.cobrancaDocumento.id                 = bbm.boletoBancario.documentoCobranca.id ");
			if(debito instanceof Conta){
				consulta.append(" AND cdi.contaGeral.id                         = :id) ");
			}else if(debito instanceof GuiaPagamento){
				consulta.append(" AND cdi.guiaPagamentoGeral.id                         = :id) ");
			}else if(debito instanceof DebitoACobrar){
				consulta.append(" AND cdi.debitoACobrarGeral.id                         = :id) ");
			}

			Query query = session.createQuery(consulta.toString());

			if(debito instanceof Conta){
				query.setInteger("id", ((Conta) debito).getId());
			}else if(debito instanceof GuiaPagamento){
				query.setInteger("id", ((GuiaPagamento) debito).getId());
			}else if(debito instanceof DebitoACobrar){
				query.setInteger("id", ((DebitoACobrar) debito).getId());
			}

			colecaoBoletoBancario = query.list();

			if(colecaoBoletoBancario.iterator().hasNext()){
				boletoBancario = colecaoBoletoBancario.iterator().next();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return boletoBancario;
	}

	/**
	 * [UC3018] Gerar TXT Cartas cobranca Bancaria.
	 * Metodo que vai retornar o id dos Documentos de cobranca que vao gerar o arquivo TXt com as
	 * cartas que serao enviadas com o aviso de cobranca.
	 * 
	 * @author Ailton Sousa
	 * @date 12/10/2011
	 * @param idComandoCobranca
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDocumentosCobrancaBancaria(Integer idComandoCobranca) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "select cd.cbdo_id cobDoc from cobranca_documento cd "
							+ "inner join cobranca_acao_atividade_comand caac on caac.cacm_id = cd.cacm_id "
							+ "inner join cobranca_acao ca on ca.cbac_id = caac.cbac_id "
							+ "inner join boleto_bancario bo on bo.cbdo_id = cd.cbdo_id and bbco_dtgeracaocarta is null and bbmc_id is null "
							+ "inner join imovel i on i.imov_id = bo.imov_id " + "inner join quadra q on q.qdra_id = i.qdra_id "
							+ "inner join rota r on r.rota_id = q.rota_id "
							+ "where cd.cacm_id = :idComandoCobranca "
							+ "and cbdo_tmemissao + cbac_nndiasvalidade >= current_date "
							+ "and ( cd.cast_id <> :idCobrancaSituacao "
							// REVER COM FATIMA A LINHA ABAIXO
							+ "or cd.cast_id is NULL ) "
							+ "order by cd.loca_id, cd.cbdo_cdsetorcomercial, r.rota_cdrota, i.imov_nnsequencialrota, i.imov_nnlote, i.imov_nnsublote ";

			SQLQuery query = session.createSQLQuery(consulta);

			query.addScalar("cobDoc", Hibernate.INTEGER);

			retorno = (Collection) query.setInteger("idComandoCobranca", idComandoCobranca)
							.setInteger("idCobrancaSituacao", CobrancaAcaoSituacao.CANCELADA_PRAZO).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa CobrancaDocumentoItem pelo CobrancaDocumento e Pela Conta.
	 * 
	 * @author Ailton Sousa
	 * @date 13/10/2011
	 * @param idCobrancaDocumento
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public CobrancaDocumentoItem pesquisarCobrancaDocumentoItemPelaConta(Integer idCobrancaDocumento, Integer idConta)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		CobrancaDocumentoItem retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdi " + "FROM CobrancaDocumentoItem cdi ").append("LEFT JOIN cdi.cobrancaDocumento cd ")
							.append("LEFT JOIN cdi.contaGeral.conta conta ").append("WHERE cd.id = :idCobrancaDocumento AND ")
							.append("conta.id = :idConta ");

			retorno = (CobrancaDocumentoItem) session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).setInteger("idConta", idConta).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa o Valor do Debito do Boleto bancario pelo Documento de cobranca.
	 * 
	 * @author Ailton Sousa
	 * @date 13/10/2011
	 * @param idCobrancaDocumento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BoletoBancario pesquisarBoletoBancarioPorCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		BoletoBancario retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT bb " + "FROM BoletoBancario bb ").append("LEFT JOIN bb.documentoCobranca dc ")
							.append("LEFT JOIN dc.cliente cli ")
							.append("WHERE dc.id = :idCobrancaDocumento ");

			retorno = (BoletoBancario) session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa a Quantidade de Dias de Validade da CobrancaAcao.
	 * 
	 * @author Ailton Sousa
	 * @date 13/10/2011
	 * @param idCobrancaAcao
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarNumeroDiasVencimentoCobrancaAcao(Integer idCobrancaAcao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT ca.numeroDiasVencimento " + "FROM CobrancaAcao ca ").append("WHERE ca.id = :idCobrancaAcao ");

			retorno = (Integer) session.createQuery(consulta.toString()).setInteger("idCobrancaAcao", idCobrancaAcao).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisa o Codigo do Agente Arrecadador pelo ID da COBRANCA_ACAO_ATIVIDADE_COMAND.
	 * 
	 * @author Ailton Sousa
	 * @date 13/10/2011
	 * @param idComandoCobranca
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Short pesquisarCodigoAgenteArrecadadorPorComandoCobranca(Integer idComandoCobranca) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Short retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT ar.codigoAgente " + "FROM CobrancaAcaoAtividadeComando caac ").append("LEFT JOIN caac.arrecadador ar ")
							.append("WHERE caac.id = :idComandoCobranca AND ar.id IS NOT NULL ");

			retorno = (Short) session.createQuery(consulta.toString()).setInteger("idComandoCobranca", idComandoCobranca).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3021] A Processar Pagamento com Boleto bancario
	 * [SB0001] A Processar Pagamento de Documento de cobranca
	 * Este metodo Obtem informacoes sobre os itens do documento de cobranca para
	 * posteriormente ser
	 * gerado o pagamento para esses itens
	 * 
	 * @author Anderson Lima
	 * @date 06/10/2011
	 */
	public Collection pesquisarItensCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("SELECT conta.id, "); // 0
			consulta.append("guiaPagamento.id, "); // 1
			consulta.append("debitoACobrar.id, "); // 2
			consulta.append("cdi.valorItemCobrado, "); // 3
			consulta.append("conta.referencia, "); // 4
			consulta.append("contaHistorico.anoMesReferenciaConta, "); // 5
			consulta.append("guiaPagamentoPrestacao.debitoTipo.id, "); // 6
			consulta.append("guiaPagamentoPrestacaoHistorico.debitoTipo.id, "); // 7
			consulta.append("debitoACobrar.debitoTipo.id, "); // 8
			consulta.append("debitoACobrarHistorico.debitoTipo.id, "); // 9
			consulta.append("contaHistorico.id, "); // 10
			consulta.append("guiaPagamentoHistorico.id, "); // 11
			consulta.append("debitoACobrarHistorico.id, "); // 12
			consulta.append("conta.imovel.id, "); // 13
			consulta.append("guiaPagamento.imovel.id, "); // 14
			consulta.append("debitoACobrar.imovel.id, ");// 15
			consulta.append("conta.localidade.id, "); // 16
			consulta.append("guiaPagamento.localidade.id, "); // 17
			consulta.append("debitoACobrar.localidade.id, "); // 18
			consulta.append("cdi.numeroDaPrestacao, "); // 19
			consulta.append("cdi.numeroParcelaAntecipada, "); // 20
			consulta.append("cdi.valorAcrescimos, "); // 21
			consulta.append("contaGeral.id, "); // 22
			consulta.append("contaGeral.indicadorHistorico, "); // 23
			consulta.append("guiaPagamentoGeral.id, "); // 24
			consulta.append("guiaPagamentoGeral.indicadorHistorico, "); // 25
			consulta.append("debitoACobrarGeral.id, "); // 26
			consulta.append("debitoACobrarGeral.indicadorHistorico, "); // 27
			consulta.append("contaHistorico.localidade.id, "); // 28
			consulta.append("guiaPagamentoHistorico.localidade.id, "); // 29
			consulta.append("debitoACobrarHistorico.localidade.id, "); // 30
			consulta.append("imovel.localidade.id, "); // 31
			consulta.append("contaHistorico.imovel.id, "); // 32
			consulta.append("guiaPagamentoHistorico.imovel.id, "); // 33
			consulta.append("debitoACobrarHistorico.imovel.id "); // 34
			consulta.append("FROM CobrancaDocumentoItem cdi ");
			consulta.append("LEFT JOIN cdi.cobrancaDocumento cd ");
			consulta.append("LEFT JOIN cd.imovel imovel ");
			consulta.append("LEFT JOIN cd.cliente clie ");
			consulta.append("LEFT JOIN cd.documentoTipo documentoTipo ");
			consulta.append("LEFT JOIN cdi.contaGeral contaGeral ");
			consulta.append("LEFT JOIN contaGeral.conta conta ");
			consulta.append("LEFT JOIN contaGeral.contaHistorico contaHistorico ");
			consulta.append("LEFT JOIN cdi.guiaPagamentoGeral guiaPagamentoGeral ");
			consulta.append("LEFT JOIN guiaPagamentoGeral.guiaPagamento guiaPagamento ");
			consulta.append("LEFT JOIN guiaPagamento.guiasPagamentoPrestacao guiaPagamentoPrestacao ");
			consulta.append("LEFT JOIN guiaPagamentoGeral.guiaPagamentoHistorico guiaPagamentoHistorico ");
			consulta.append("LEFT JOIN guiaPagamentoHistorico.guiasPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico ");
			consulta.append("LEFT JOIN cdi.debitoACobrarGeral debitoACobrarGeral ");
			consulta.append("LEFT JOIN debitoACobrarGeral.debitoACobrar debitoACobrar ");
			consulta.append("LEFT JOIN debitoACobrarGeral.debitoACobrarHistorico debitoACobrarHistorico ");
			consulta.append("WHERE cd.id = :idCobrancaDocumento AND cdi.creditoARealizarGeral.id is null ");
			consulta.append("and (((guiaPagamentoPrestacao.comp_id.numeroPrestacao = cdi.numeroDaPrestacao) ");
			consulta.append("or (guiaPagamentoPrestacaoHistorico.comp_id.numeroPrestacao = cdi.numeroDaPrestacao)) ");
			consulta.append("or cdi.numeroDaPrestacao is null) ");

			retorno = session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca bancaria com Negociacao.
	 * Retorna as guias de pagamento prestacao que tera£o a data de vencimento da primeira
	 * prestacao
	 * atualizadas.
	 * 
	 * @author Ailton Sousa
	 * @date 19/10/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiaPagamentoPrestacaoComNegociacao() throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT gp.GPAG_ID AS guiaPagamento, gp.GPPR_NNPRESTACAO AS numeroPrestacao, "
							+ " b.bbco_nnsequencial AS numeroSequencial, b.bbco_id AS idBoletoBancario, b.bbst_idatual AS idSituacaoAtual, "
							+ " gp.DBTP_ID AS debitoTipo, " + " gp.LICT_ID AS itemLancamento " + " FROM guia_pagamento_prestacao gp "
							+ " JOIN guia_pagamento g ON g.gpag_id=gp.gpag_id " + " JOIN boleto_bancario b ON b.parc_id=g.parc_id "
							+ " AND b.cbdo_id IS NOT NULL " + " AND b.parc_id IS NOT NULL " + " AND b.bbco_idoriginal IS NULL "
							+ " WHERE NOT EXISTS " + " (SELECT * FROM boleto_bancario b1 WHERE b1.bbco_idoriginal=b.bbco_id ) "
							+ " AND EXISTS " + " (SELECT * " + " FROM guia_pagamento_prestacao g1 " + " WHERE g1.gpag_id =g.gpag_id "
							+ " AND g1.gppr_nnprestacao =1 " + " AND g1.GPPR_DTVENCIMENTO < " + " CURRENT_DATE - (select ACTF_NNDIAFLOAT "
							+ " from ARRECADADOR_CONTRATO_TARIFA x " + " join ARRECADADOR_CONTRATO y on y.ARCT_ID=x.ARCT_ID "
							+ " and y.ARCT_CDCONVENIOBOLETO is not null " + " and y.ARCT_DTCONTRATOENCERRAMENTO is null " + " where "
							+ " ARFM_ID=" + ArrecadacaoForma.COBRANCA_BANCARIA + " and y.ARRC_ID=b.ARRC_ID) " + " AND NOT EXISTS "
							+ " (SELECT * " + " FROM pagamento_historico pg " + " WHERE pg.gpag_id=g1.gpag_id "
							+ " AND pg.pghi_nnprestacao=1) " + " AND NOT EXISTS " + " (SELECT * " + " FROM pagamento p "
							+ " WHERE p.gpag_id=g1.gpag_id " + " AND p.pgmt_nnprestacao=1) " + " ) " + " AND gp.gppr_nnprestacao = 1 "
							+ " ORDER BY gp.gpag_id, " + " gp.gppr_nnprestacao";

			SQLQuery query = session.createSQLQuery(consulta);

			query.addScalar("guiaPagamento", Hibernate.INTEGER).addScalar("numeroPrestacao", Hibernate.SHORT)
							.addScalar("numeroSequencial", Hibernate.INTEGER).addScalar("idBoletoBancario", Hibernate.INTEGER)
							.addScalar("idSituacaoAtual", Hibernate.INTEGER).addScalar("debitoTipo", Hibernate.INTEGER)
							.addScalar("itemLancamento", Hibernate.INTEGER);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca bancaria com Negociacao.
	 * 
	 * @author Ailton Sousa
	 * @date 19/10/2011
	 * @param idGuiaPagamento
	 * @param numeroPrestacao
	 * @param idDebitoTipo
	 * @param idItemLancamento
	 * @return GuiaPagamentoPrestacao
	 * @throws ErroRepositorioException
	 */
	public GuiaPagamentoPrestacao obterGuiaPagamentoPrestacao(Integer idGuiaPagamento, Short numeroPrestacao, Integer idDebitoTipo,
					Integer idItemLancamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		GuiaPagamentoPrestacao retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT gpp " + "FROM GuiaPagamentoPrestacao gpp ")
							.append("WHERE gpp.comp_id.guiaPagamentoId = :idGuiaPagamento ")
							.append("AND gpp.comp_id.numeroPrestacao = :numeroPrestacao ")
							.append("AND gpp.comp_id.debitoTipoId = :idDebitoTipo ")
							.append("AND gpp.comp_id.itemLancamentoContabilId = :idItemLancamento ");

			retorno = (GuiaPagamentoPrestacao) session.createQuery(consulta.toString()).setInteger("idGuiaPagamento", idGuiaPagamento)
							.setShort("numeroPrestacao", numeroPrestacao).setInteger("idDebitoTipo", idDebitoTipo)
							.setInteger("idItemLancamento", idItemLancamento).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna uma CobrancaAcaoAtividadeComando para o seu id.
	 * 
	 * @date 13/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return CobrancaAcaoAtividadeComando
	 * @throws ErroRepositorioException
	 */
	public CobrancaAcaoAtividadeComando pesquisarCobrancaAcaoAtividadeComando(int idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		CobrancaAcaoAtividadeComando retorno = null;
		String consulta = null;

		try{
			consulta = "select cobrancaAcaoAtividadeComando from CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando "
							+ "where cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando";

			retorno = (CobrancaAcaoAtividadeComando) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna ArrecadadorContrato dado um idCobrancaAcaoAtividadeComando.
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public ArrecadadorContrato pesquisarContratoArrecadadorPorCobrancaAtividadeComando(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		ArrecadadorContrato retorno = null;
		String consulta = null;

		try{
			consulta = " SELECT ac FROM ArrecadadorContrato ac LEFT JOIN ac.arrecadador arrecadador WHERE arrecadador.id = "
							+ "(SELECT caac.arrecadador.id FROM CobrancaAcaoAtividadeComando caac where caac.id = :idCobrancaAcaoAtividadeComando) "
							+ "and (ac.dataContratoEncerramento is null or ac.dataContratoFim >= current_date())";

			retorno = (ArrecadadorContrato) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna ultima Sequencial boleto bancario.
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return Ultimo sequencial
	 * @throws ErroRepositorioException
	 */
	public Integer retornaUltimoSequencialBoleto(Integer idCobrancaAcaoAtividadeComando) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		String consulta = null;
		try{
			consulta = " SELECT max(bb.numeroSequencial) FROM BoletoBancario bb WHERE bb.documentoCobranca.id in "
							+ "(SELECT cd.id FROM CobrancaDocumento cd WHERE cd.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando) ";

			retorno = (Integer) session.createQuery(consulta).setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna os documentos de cobranca vigentes gerados pelo comando de cobranca bancaria e sem
	 * boleto bancario gerado
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return CobrancaDocumento
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> retornaCobrancaDocumentoVigentesGeradosComandoCobranca(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<CobrancaDocumento> retorno = null;
		String consulta = null;
		String consultaData = null;
		try{

			consultaData = "SELECT ca.numeroDiasValidade FROM CobrancaAcao ca WHERE ca.id = (SELECT caac.cobrancaAcao.id FROM CobrancaAcaoAtividadeComando caac WHERE caac.id = :idCobrancaAcaoAtividadeComando)";

			Integer dias = ((Number) session.createQuery(consultaData)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult())
							.intValue();

			consulta = " SELECT cd FROM CobrancaDocumento cd LEFT JOIN cd.cliente cliente  WHERE cd.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando "
							+ "AND (cd.emissao + :dias >= current_date()) "
							+ "AND (cd.cobrancaAcaoSituacao is null or cd.cobrancaAcaoSituacao.id <> :cancelado) "
							+ "AND cd.id not in (SELECT bb.documentoCobranca.id FROM BoletoBancario bb WHERE bb.documentoCobranca IS NOT NULL)";

			retorno = (Collection<CobrancaDocumento>) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setInteger("dias", dias)
							.setInteger("cancelado", CobrancaAcaoSituacao.CANCELADA).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Para cada conta da lista de itens do documento de cobranca
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaDocumento
	 * @return Collection<Conta>
	 * @throws ErroRepositorioException
	 */
	public Collection<Conta> recuperarContasCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<Conta> retorno = null;
		String consulta = null;
		try{
			consulta = " SELECT conta FROM CobrancaDocumentoItem cdi JOIN cdi.contaGeral contaGeral JOIN contaGeral.conta conta "
							+ "LEFT JOIN conta.ligacaoEsgotoSituacao ligacaoEsgotoSituacao LEFT JOIN conta.ligacaoAguaSituacao ligacaoAguaSituacao LEFT JOIN conta.creditoRealizados creditoRealizados "
							+ "LEFT JOIN conta.contaCategorias contaCategorias LEFT JOIN conta.debitoCobrados debitoCobrados "
							+ "LEFT JOIN conta.contaMotivoRevisao contaMotivoRevisao "
							+ "LEFT JOIN conta.debitoCreditoSituacaoAtual debitoCreditoSituacaoAtual "
							+ " WHERE cdi.cobrancaDocumento.id = :idCobrancaDocumento " + "AND contaGeral IS NOT NULL "
							+ "AND cdi.documentoTipo.id = :CONTA ";

			retorno = (Collection<Conta>) session.createQuery(consulta).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.setInteger("CONTA", DocumentoTipo.CONTA).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna ArrecadadorContrato dado um idGuiaPagamento.
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idGuiaPagamento
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public ArrecadadorContrato pesquisarContratoArrecadadorPorGuiaPagamento(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		ArrecadadorContrato retorno = null;
		String consulta = null;

		try{
			consulta = " SELECT ac FROM ArrecadadorContrato ac LEFT JOIN ac.arrecadador arrecadador WHERE arrecadador.id in "
							+ "(SELECT bb.arrecadador.id FROM BoletoBancario bb where bb.parcelamento.id in (SELECT gp.parcelamento.id FROM GuiaPagamento gp WHERE gp.id = :idGuiaPagamento)) "
							+ "and (ac.dataContratoEncerramento is null or ac.dataContratoFim >= current_date())";

			retorno = (ArrecadadorContrato) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna Prestacoes da guia de pagamento dado um idGuiaPagamento.
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idGuiaPagamento
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarGuiaPagamentoPrestacaoBoletoBancario(Integer idGuiaPagamento, Integer numeroPrestacaoInicialGuia)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<Object[]> retorno = null;
		String consulta = null;

		try{

			consulta = " SELECT gpp.anoMesReferenciaFaturamento, gpp.dataEmissao, gpp.dataVencimento, gpp.comp_id.numeroPrestacao, SUM(gpp.valorPrestacao)"
							+ " FROM GuiaPagamentoPrestacao gpp WHERE gpp.comp_id.guiaPagamentoId = :idGuiaPagamento and gpp.comp_id.numeroPrestacao >= :numeroPrestacaoInicialGuia "
							+ "GROUP BY gpp.anoMesReferenciaFaturamento, gpp.dataEmissao, gpp.dataVencimento, gpp.comp_id.numeroPrestacao ORDER BY gpp.comp_id.numeroPrestacao";

			retorno = (Collection<Object[]>) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento)
							.setInteger("numeroPrestacaoInicialGuia", numeroPrestacaoInicialGuia).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Boleto Bancario Original.
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idGuiaPagamento
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarBoletoBancarioOriginal(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Integer retorno = null;
		String consulta = null;

		try{
			consulta = " SELECT bb.id FROM BoletoBancario bb WHERE bb.documentoCobranca IS NOT NULL AND bb.parcelamento.id = (SELECT gp.parcelamento.id FROM GuiaPagamento gp WHERE gp.id = :idGuiaPagamento) ";

			retorno = (Integer) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna Arrecadador dado um idGuiaPagamento.
	 * 
	 * @date 18/10/2011
	 * @author Paricles Tavares
	 * @param idGuiaPagamento
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public Arrecadador pesquisarArrecadadorPorGuiaPagamento(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Arrecadador retorno = null;
		String consulta = null;

		try{
			consulta = " SELECT ac FROM Arrecadador ac WHERE ac.id = "
							+ "(SELECT bb.arrecadador.id FROM BoletoBancario bb where bb.parcelamento.id = (SELECT gp.parcelamento.id FROM GuiaPagamento gp WHERE gp.id = :idGuiaPagamento))";

			retorno = (Arrecadador) session.createQuery(consulta).setInteger("idGuiaPagamento", idGuiaPagamento).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna ArrecadadorContrato dado um idCobrancaAcaoAtividadeComando.
	 * 
	 * @date 18/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return ArrecadadorContrato
	 * @throws ErroRepositorioException
	 */
	public Arrecadador pesquisarArrecadadorPorCobrancaAtividadeComando(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Arrecadador retorno = null;
		String consulta = null;

		try{
			consulta = " SELECT ac FROM Arrecadador ac WHERE ac.id = "
							+ "(SELECT caac.arrecadador.id FROM CobrancaAcaoAtividadeComando caac where caac.id = :idCobrancaAcaoAtividadeComando) ";

			retorno = (Arrecadador) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna os Acao de cobranca para o idCobrancaAcaoAtividadeComando
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaAcaoAtividadeComando
	 * @return CobrancaDocumento
	 * @throws ErroRepositorioException
	 */
	public CobrancaAcao retornaCobrancaAcao(Integer idCobrancaAcaoAtividadeComando) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		CobrancaAcao retorno = null;
		String consulta = null;
		try{

			consulta = "SELECT ca FROM CobrancaAcao ca WHERE ca.id = (SELECT caac.cobrancaAcao.id FROM CobrancaAcaoAtividadeComando caac WHERE caac.id = :idCobrancaAcaoAtividadeComando)";

			retorno = (CobrancaAcao) session.createQuery(consulta)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Para cada conta da lista de itens do documento de cobranca
	 * 
	 * @date 17/10/2011
	 * @author Paricles Tavares
	 * @param idCobrancaDocumento
	 * @return CobrancaDocumentoItem
	 * @throws ErroRepositorioException
	 */
	public Conta recuperarContaCobrancaDocumentoId(Integer idConta) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Conta retorno = null;
		String consulta = null;
		try{
			consulta = " SELECT conta FROM Conta conta LEFT JOIN FETCH conta.ligacaoEsgotoSituacao ligacaoEsgotoSituacao LEFT JOIN FETCH conta.ligacaoAguaSituacao ligacaoAguaSituacao LEFT JOIN FETCH conta.creditoRealizados creditoRealizados "
							+ " LEFT JOIN FETCH creditoRealizados.creditoTipo LEFT JOIN FETCH conta.contaCategorias contaCategorias LEFT JOIN FETCH contaCategorias.comp_id.subcategoria LEFT JOIN FETCH conta.debitoCobrados debitoCobrados LEFT JOIN FETCH debitoCobrados.debitoTipo "
							+ " WHERE conta.id = :idConta";

			retorno = (Conta) session.createQuery(consulta).setInteger("idConta", idConta).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarBancoPorArrecadacaoForma(Integer idArrecadacaoForma) throws ErroRepositorioException{

		Collection retorno = null;

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta = "";

		try{

			consulta = "select banco.id " + "from Banco banco " + "where banco.id in( " + "select arrecadador.codigoAgente "
							+ "from ArrecadadorContratoTarifa arrcConTarifa "
							+ "inner join arrcConTarifa.arrecadacaoForma arrecadadorForma "
							+ "inner join arrcConTarifa.arrecadadorContrato arrecadadorContrato "
							+ "inner join arrecadadorContrato.arrecadador arrecadador "
							+ "where arrecadadorForma.id = :idArrecadacaoForma "
							+ "and arrecadadorContrato.dataContratoEncerramento is null) " + "order by banco.id";

			retorno = session.createQuery(consulta).setInteger("idArrecadacaoForma", idArrecadacaoForma).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarBoletoBancarioMovimento(Integer anoMesReferencia, Collection colecaoidsBancos)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		Collection collCdAgente = new ArrayList();
		Iterator it = colecaoidsBancos.iterator();
		while(it.hasNext()){
			Integer codigoAgente = (Integer) it.next();
			String codigoAgenteString = codigoAgente.toString();
			collCdAgente.add(new Short(codigoAgenteString));
		}

		// cria a variavel que vai conter o hql
		String consulta = "";

		try{

			if(anoMesReferencia != null){
				consulta = "select bbmv " + "from BoletoBancarioMovimentacao bbmv "
								+ "inner join fetch bbmv.boletoBancarioLancamentoEnvio blen "
								+ "inner join fetch bbmv.boletoBancario bbco " + "inner join fetch bbco.boletoBancarioSituacao bbst "
								+ "left join fetch bbco.guiaPagamento gpag " + "inner join fetch bbco.arrecadador arrecadador" + " where "
								+ " bbco.anoMesReferencia = :anoMesReferenciaFaturamento "
								+ "and bbco.boletoBancarioMotivoCancelamento.id is null  "
								// + "and bbco.numeroSequencialArquivoMigracao is null  "
								+ "and bbmv.arrecadadorMovimentoItem.id is null  " + "and arrecadador.codigoAgente in (:idsBanco) "
								+ "and bbmv.dataMovimentacao <> :dataMovimentacaoInicial ";

				retorno = session.createQuery(consulta).setInteger("anoMesReferenciaFaturamento", anoMesReferencia)
								.setParameterList("idsBanco", collCdAgente).setDate("dataMovimentacaoInicial", Util.criarData(31, 12, 99))
								.list();

			}else{
				consulta = "select bbmv " + "from BoletoBancarioMovimentacao bbmv "
								+ "inner join fetch bbmv.boletoBancarioLancamentoEnvio blen "
								+ "inner join fetch bbmv.boletoBancario bbco " + "inner join fetch bbco.boletoBancarioSituacao bbst "
								+ "left join fetch bbco.guiaPagamento gpag " + "inner join fetch bbco.arrecadador arrecadador" + " where "
								+ " bbco.boletoBancarioMotivoCancelamento.id is null  "
								// + "and bbco.numeroSequencialArquivoMigracao is null  "
								+ "and bbmv.arrecadadorMovimentoItem.id is null  " + "and arrecadador.codigoAgente in (:idsBanco) "
								+ "and bbmv.dataMovimentacao <> :dataMovimentacaoInicial ";
				retorno = session.createQuery(consulta).setParameterList("idsBanco", collCdAgente)
								.setDate("dataMovimentacaoInicial", Util.criarData(31, 12, 99)).list();

			}

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Banco pesquisarBanco(Short cdAgenteArrecadador) throws ErroRepositorioException{

		Banco retorno = null;

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta = "";

		try{

			consulta = "select banco " + "from Banco banco " + "where banco.id = :cdAgenteArrecadador";

			retorno = (Banco) session.createQuery(consulta).setShort("cdAgenteArrecadador", cdAgenteArrecadador);

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Cliente pesquisarCliente(Integer idImovel) throws ErroRepositorioException{

		Cliente retorno = null;
		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// cria a variavel que vai conter o hql
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" SELECT cliente ");
			consulta.append(" from ClienteImovel clienteImovel ");
			consulta.append(" inner join  clienteImovel.cliente cliente ");
			consulta.append(" inner join fetch cliente.clienteTipo clienteTipo ");
			consulta.append(" where clienteImovel.imovel.id = :idImovel");
			consulta.append(" and clienteImovel.clienteRelacaoTipo.id = :idClienteRelacaoTipo");
			consulta.append(" and clienteImovel.dataFimRelacao is null");
			retorno = (Cliente) session.createQuery(consulta.toString()).setInteger("idImovel", idImovel)
							.setInteger("idClienteRelacaoTipo", ClienteRelacaoTipo.USUARIO).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	public Object[] pesquisaDadosArrecadadorContrato(Integer idBanco) throws ErroRepositorioException{

		Object[] retorno = null;

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta = "";

		try{

			consulta = "select arreContrato.id, "// 0
							+ "arreContrato.codigoConvenioBoletoBancario, "// 1
							+ "arreContrato.numeroSequencialArquivoEnvioBoleto, "// 2
							+ "arreContrato.descricaoEmail "// 3
							+ "from ArrecadadorContrato arreContrato "
							+ "inner join arreContrato.arrecadador arrec "
							+ "where arrec.codigoAgente = :idBanco and " + "arreContrato.dataContratoEncerramento is null";

			retorno = (Object[]) session.createQuery(consulta).setInteger("idBanco", idBanco).setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarBoletoBancario(BoletoBancarioMovimentacao boletoBancarioMovimentacao) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();

		// cria a variavel que vai conter o hql
		String consulta = "";

		try{

			consulta = "select boletoBancarioMovimentacao.boletoBancario " + "from BoletoBancarioMovimentacao boletoBancarioMovimentacao "
							+ " where " + " boletoBancarioMovimentacao.id = :idBoletoBancarioMovimentacao ";

			retorno = session.createQuery(consulta).setInteger("idBoletoBancarioMovimentacao", boletoBancarioMovimentacao.getId()).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public RegistroCodigo pesquisarIdRegistroCodigo(String codigoRegistro) throws ErroRepositorioException{

		RegistroCodigo retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{
			consulta = "SELECT rc " + "FROM RegistroCodigo rc " + "WHERE rc.codigo = :codigoRegistro";

			retorno = (RegistroCodigo) session.createQuery(consulta).setString("codigoRegistro", codigoRegistro).setMaxResults(1)
							.uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException("Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public ArrecadadorContrato pesquisarArrecadadorContrato(Integer idBanco) throws ErroRepositorioException{

		ArrecadadorContrato retorno = null;
		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// cria a variavel que vai conter o hql
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" SELECT arrecadadorContrato ");
			consulta.append(" from ArrecadadorContrato arrecadadorContrato ");
			consulta.append(" inner join fetch arrecadadorContrato.contaBancariaDepositoArrecadacaoBoleto contaBancaria ");
			consulta.append(" inner join fetch arrecadadorContrato.arrecadador arrecadador ");
			consulta.append(" inner join fetch contaBancaria.agencia agencia ");
			consulta.append(" where arrecadador.codigoAgente = :idBanco");
			retorno = (ArrecadadorContrato) session.createQuery(consulta.toString()).setShort("idBanco", idBanco.shortValue())
							.setMaxResults(1).uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	public void atualizarNumeroSequencialArrecadadorContratoBoleto(Integer idArrecadadorContrato, Integer numeroSequencialArquivo)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String atualizarImovel;

		try{
			atualizarImovel = "update gcom.arrecadacao.ArrecadadorContrato "
							+ "set arct_nnnsaenvioboleto = :numeroSequencialArquivo,arct_tmultimaalteracao = :dataUltimaAlteracao where arct_id = :idArrecadadorContrato";

			session.createQuery(atualizarImovel).setInteger("idArrecadadorContrato", idArrecadadorContrato.intValue())
							.setTimestamp("dataUltimaAlteracao", new Date())
							.setInteger("numeroSequencialArquivo", numeroSequencialArquivo.intValue()).executeUpdate();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * Obter Criterio de cobranca associado ao documento de cobranca correspondente a negativacao
	 * [UC0688]-Gerar Resumo Diario de Negativacao
	 * [SB0002] / Step 2
	 * 
	 * @autor Genival Barbosa
	 * @date 26/10/2011
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterCobrancaCriterioAssociadoDocumentoCobrancaCorrespNegativacao(Integer idNegativadorMovimento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT distinct(cocr.id) ");
			hql.append(" FROM CobrancaCriterio cocr, ");
			hql.append(" CobrancaAcao coac, ");
			hql.append(" NegativadorMovimento nemv ");
			hql.append(" WHERE cocr.id = coac.cobrancaCriterio.id ");
			hql.append(" AND nemv.negativador.id = coac.negativador.id ");
			hql.append(" AND nemv.id = ");
			hql.append(idNegativadorMovimento);

			retorno = session.createQuery(hql.toString()).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Quantidade de Boleto bancario
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeBoletoBancario(BoletoBancarioHelper boletoBancarioHelper, boolean desconsiderarParametros,
					boolean verificarDocumentoCobranca, boolean verificarNumeroBoletoCartaCobranca) throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();
		Query query = null;

		try{
			hql.append(" select count(*) ");
			hql.append(" from BoletoBancario bb ");
			hql.append(" inner join bb.imovel imovel ");
			hql.append(" inner join bb.arrecadador arrecadador ");
			hql.append(" inner join arrecadador.cliente ");
			hql.append(" inner join bb.documentoTipo dt ");
			hql.append(" inner join bb.boletoBancarioSituacao bbs ");
			hql.append(" left join bb.boletoBancarioMotivoCancelamento bbmc ");
			hql.append(" left join bb.documentoCobranca dc ");
			hql.append(" where ");

			if(!desconsiderarParametros){

				if(boletoBancarioHelper.getImovel() != null){
					hql.append(" bb.imovel = :imovel and ");
					parameters.put("imovel", boletoBancarioHelper.getImovel());
				}

				if(boletoBancarioHelper.getCliente() != null){
					hql.append(" bb.cliente = :cliente and ");
					parameters.put("cliente", boletoBancarioHelper.getCliente());
				}

				if(boletoBancarioHelper.getDataInicialVencimento() != null && boletoBancarioHelper.getDataFinalVencimento() != null){
					hql.append(" bb.dataVencimento >= :dataInicialVencimento and bb.dataVencimento <= :dataFinalVencimento  and ");

					parameters.put("dataInicialVencimento", boletoBancarioHelper.getDataInicialVencimento());
					parameters.put("dataFinalVencimento", boletoBancarioHelper.getDataFinalVencimento());
				}

				if(boletoBancarioHelper.getDataInicialCancelamento() != null && boletoBancarioHelper.getDataFinalCancelamento() != null){
					hql.append(" bb.dataCancelamento >= :dataInicialCancelamento and bb.dataCancelamento <= :dataFinalCancelamento  and ");

					parameters.put("dataInicialCancelamento", boletoBancarioHelper.getDataInicialCancelamento());
					parameters.put("dataFinalCancelamento", boletoBancarioHelper.getDataFinalCancelamento());
				}

				if(boletoBancarioHelper.getDataInicialPagamento() != null && boletoBancarioHelper.getDataFinalPagamento() != null){
					hql.append(" bb.dataPagamento >= :dataInicialPagamento and bb.dataPagamento <= :dataFinalPagamento  and ");

					parameters.put("dataInicialPagamento", boletoBancarioHelper.getDataInicialPagamento());
					parameters.put("dataFinalPagamento", boletoBancarioHelper.getDataFinalPagamento());
				}

				if(boletoBancarioHelper.getDataInicialCredito() != null && boletoBancarioHelper.getDataFinalCredito() != null){
					hql.append(" bb.dataCredito >= :dataInicialCredito and bb.dataCredito <= :dataFinalCredito  and ");

					parameters.put("dataInicialCredito", boletoBancarioHelper.getDataInicialCredito());
					parameters.put("dataFinalCredito", boletoBancarioHelper.getDataFinalCredito());
				}

				String[] idsBoletoBancarioSituacao = boletoBancarioHelper.getIdsBoletoBancarioSituacao();

				if(idsBoletoBancarioSituacao != null && idsBoletoBancarioSituacao.length > 0){
					hql.append(" bbs.id in (:colecaoSituacao) and ");
					parameters.put("colecaoSituacao", converterArrayStringArrayInteger(idsBoletoBancarioSituacao));
				}

				String[] idsTipoDocumento = boletoBancarioHelper.getIdsTipoDocumento();

				if(idsTipoDocumento != null && idsTipoDocumento.length > 0){
					hql.append("  dt.id in (:colecaoDocumentoTipo) and ");
					parameters.put("colecaoDocumentoTipo", converterArrayStringArrayInteger(idsTipoDocumento));
				}

				String[] idsMotivoCancelamento = boletoBancarioHelper.getIdsMotivoCancelamento();

				if(idsMotivoCancelamento != null && idsMotivoCancelamento.length > 0){
					hql.append("  bbmc.id in (:colecaoMotivoCancelamento) and ");
					parameters.put("colecaoMotivoCancelamento", converterArrayStringArrayInteger(idsMotivoCancelamento));
				}

				if(verificarDocumentoCobranca){
					hql.append(" bb.documentoCobranca is not null and ");
				}

				if(boletoBancarioHelper.getDataInicialEntrada() != null && boletoBancarioHelper.getDataFinalEntrada() != null){
					hql.append(" bb.id in ( ");
					hql.append(" select bbsh.boletoBancario ");
					hql.append(" from BoletoBancarioSituacaoHistorico bbsh ");
					hql.append(" where  bbsh.dataEntrada >= :dataInicialEntrada ");
					hql.append(" and bbsh.dataEntrada <= :dataFinalEntrada ");
					hql.append(" and bbsh.boletoBancarioSituacao.id = :situacaoBoletoBancario) and ");

					parameters.put("dataInicialEntrada", boletoBancarioHelper.getDataInicialEntrada());
					parameters.put("dataFinalEntrada", boletoBancarioHelper.getDataFinalEntrada());
					parameters.put("situacaoBoletoBancario", BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO);
				}

				if(verificarNumeroBoletoCartaCobranca){
					hql.append(" bb.idOriginal in ");
					hql.append(" ( select bbaux.id  ");
					hql.append(" 	from BoletoBancario bbaux ");
					hql.append("   where  bbaux.numeroSequencial = :numSequencial and ");
					hql.append("   bbaux.arrecadador = :idArrecadador) ");

					parameters.put("idArrecadador", boletoBancarioHelper.getArrecadador());
					parameters.put("numSequencial", boletoBancarioHelper.getNumeroSequencial());
				}

			}

			if(boletoBancarioHelper.getArrecadador() != null && !verificarNumeroBoletoCartaCobranca){
				hql.append(" bb.arrecadador = :arrecadador and ");
				parameters.put("arrecadador", boletoBancarioHelper.getArrecadador());
			}

			if(boletoBancarioHelper.getNumeroSequencial() != null && !verificarNumeroBoletoCartaCobranca){
				hql.append(" bb.numeroSequencial = :numeroSequencial  ");
				parameters.put("numeroSequencial", boletoBancarioHelper.getNumeroSequencial());
			}

			String hqlAux = hql.substring(hql.length() - 4, hql.length());

			if(hqlAux.equals("and ")){
				query = session.createQuery(hql.substring(0, hql.length() - 4));
			}else{
				hqlAux = "";
				hqlAux = hql.substring(hql.length() - 6, hql.length());
				if(hqlAux.equals("where ")){
					query = session.createQuery(hql.substring(0, hql.length() - 6));
				}else{
					query = session.createQuery(hql.toString());
				}
			}

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){

					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);

				}else if(parameters.get(key) instanceof Integer){
					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof String){
					query.setParameter(key, parameters.get(key));
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			Object resultadoConsulta = query.uniqueResult();

			if(resultadoConsulta != null){
				retorno = ((Number) resultadoConsulta).intValue();
			}else{
				retorno = Integer.valueOf(0);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Boleto bancario pelo Id
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public BoletoBancario pesquisarBoletoBancarioPeloId(Integer id) throws ErroRepositorioException{

		BoletoBancario boletoBancario = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select bbco ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" inner join fetch bbco.imovel imovel ");
			hql.append(" inner join fetch bbco.arrecadador arrc ");
			hql.append(" inner join fetch arrc.cliente clie ");
			hql.append(" inner join fetch bbco.documentoTipo dotp ");
			hql.append(" inner join fetch bbco.boletoBancarioSituacao bbst ");
			hql.append(" inner join fetch imovel.localidade loca ");
			hql.append(" inner join fetch imovel.setorComercial stcm ");
			hql.append(" inner join fetch imovel.quadra qdra ");
			hql.append(" inner join fetch imovel.ligacaoAguaSituacao last ");
			hql.append(" inner join fetch imovel.ligacaoEsgotoSituacao lest ");
			hql.append(" inner join fetch imovel.imovelPerfil iper ");
			hql.append(" inner join fetch bbco.boletoBancarioSituacao bbst ");
			hql.append(" inner join fetch bbco.documentoTipo dotp ");
			hql.append(" left join fetch bbco.boletoBancarioMotivoCancelamento bbmc ");
			hql.append(" where bbco.id = :id ");

			boletoBancario = (BoletoBancario) session.createQuery(hql.toString()).setInteger("id", id).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return boletoBancario;
	}

	/**
	 * Pesquisar Quantidade de Movimentacao Pendente ou sem Retorno
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeMovimentacaoPendenteOuSemRetorno(Integer idBoletoBancario) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select count(*) ");
			hql.append(" from BoletoBancarioMovimentacao bbmv ");
			hql.append(" where boletoBancario.id = :idBoletoBancario ");
			hql.append("   and boletoBancarioLancamentoEnvio.id is not null ");
			hql.append("   and (   arrecadadorMovimentoItem.id is null ");
			hql.append("        or (    arrecadadorMovimentoItem.id is not null ");
			hql.append("            and boletoBancarioMovimentacaoRetorno.id is null )) ");

			Object resultadoConsulta = session.createQuery(hql.toString()).setInteger("idBoletoBancario", idBoletoBancario).uniqueResult();

			if(resultadoConsulta != null){
				retorno = ((Number) resultadoConsulta).intValue();
			}else{
				retorno = Integer.valueOf(0);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Guia de pagamento prestacao pelo Boleto bancario
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Collection<GuiaPagamentoPrestacaoHelper> pesquisarGuiasPagamentoPrestacaoBoleto(Integer guiaPagamentoId, Integer numeroPrestacao)
					throws ErroRepositorioException{

		Collection<GuiaPagamentoPrestacaoHelper> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select new " + GuiaPagamentoPrestacaoHelper.class.getName() + "(");
			hql.append(" gppr.comp_id.guiaPagamentoId, ");
			hql.append(" gppr.comp_id.numeroPrestacao, ");
			hql.append(" dbpt.descricaoAbreviada, ");
			hql.append(" gppr.valorPrestacao, ");
			hql.append(" gppr.dataEmissao, ");
			hql.append(" dcst.descricaoDebitoCreditoSituacao) ");
			hql.append(" from GuiaPagamentoPrestacao gppr ");
			hql.append(" inner join gppr.debitoTipo dbpt ");
			hql.append(" inner join gppr.debitoCreditoSituacao dcst ");
			hql.append(" where gppr.comp_id.guiaPagamentoId = :guiaPagamentoId ");
			hql.append("   and gppr.comp_id.numeroPrestacao = :numeroPrestacao ");
			retorno = session.createQuery(hql.toString()).setInteger("guiaPagamentoId", guiaPagamentoId)
							.setInteger("numeroPrestacao", numeroPrestacao).list();

			hql = new StringBuffer();
			hql.append(" select new " + GuiaPagamentoPrestacaoHelper.class.getName() + "(");
			hql.append(" gpph.comp_id.guiaPagamentoId, ");
			hql.append(" gpph.comp_id.numeroPrestacao, ");
			hql.append(" dbpt.descricaoAbreviada, ");
			hql.append(" gpph.valorPrestacao, ");
			hql.append(" gpph.dataEmissao, ");
			hql.append(" dcst.descricaoDebitoCreditoSituacao) ");
			hql.append(" from GuiaPagamentoPrestacaoHistorico gpph ");
			hql.append(" inner join gpph.debitoTipo dbpt ");
			hql.append(" inner join gpph.debitoCreditoSituacao dcst ");
			hql.append(" where gpph.comp_id.guiaPagamentoId = :guiaPagamentoId ");
			hql.append("   and gpph.comp_id.numeroPrestacao = :numeroPrestacao ");

			Collection<GuiaPagamentoPrestacaoHelper> retornoGuiaPagamentoHistorico = session.createQuery(hql.toString())
							.setInteger("guiaPagamentoId", guiaPagamentoId).setInteger("numeroPrestacao", numeroPrestacao).list();

			// Union
			retorno.addAll(retornoGuiaPagamentoHistorico);
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Contas Pelo Boleo bancario
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Collection<Object[]> pesquisarContasPeloBoletoBancario(Integer idBoletoBancario) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select cnta.cnta_amreferenciaconta as referencia, "); // 0
			sql.append("        cnta.cnta_dtvencimentoconta as dataVencimentoConta, "); // 1
			sql.append("        cnta.cnta_vlagua as valorAgua, "); // 2
			sql.append("        cnta.cnta_vlesgoto as valorEsgoto, "); // 3
			sql.append("        cnta.cnta_vldebitos as valorDebitos, "); // 4
			sql.append("        cnta.cnta_vlcreditos as valorCreditos, "); // 5
			sql.append("        cnta.cnta_vlimpostos as valorImposto, "); // 6
			sql.append("        clct.clie_id as idCliente, "); // 7
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, "); // 8
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos, "); // 9
			sql.append("        dcst.dcst_dsdebitocreditosituacao as descricaoDebitoCreditoSituacao, "); // 10
			sql.append("        cdit.cnta_id as idConta "); // 11
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join boleto_bancario bbco on bbco.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = cdit.cnta_id ");
			sql.append(" left join conta cnta on cnta.cnta_id = cntg.cnta_id ");
			sql.append(" left join cliente_conta clct on clct.cnta_id = cntg.cnta_id ");
			sql.append(" left join debito_credito_situacao dcst on dcst.dcst_id = cnta.dcst_idatual ");
			sql.append(" where cdit.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorNao ");
			sql.append("   and clct.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and bbco.bbco_id = :idBoletoBancario ");
			sql.append(" union ");
			sql.append(" select cnhi.cnhi_amreferenciaconta as referencia, "); // 0
			sql.append("        cnhi.cnhi_dtvencimentoconta as dataVencimentoConta, "); // 1
			sql.append("        cnhi.cnhi_vlagua as valorAgua, "); // 2
			sql.append("        cnhi.cnhi_vlesgoto as valorEsgoto, "); // 3
			sql.append("        cnhi.cnhi_vldebitos as valorDebitos, "); // 4
			sql.append("        cnhi.cnhi_vlcreditos as valorCreditos, "); // 5
			sql.append("        cnhi.cnhi_vlimpostos as valorImposto, "); // 6
			sql.append("        clch.clie_id as idCliente, "); // 7
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, "); // 8
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos, "); // 9
			sql.append("        dcst.dcst_dsdebitocreditosituacao as descricaoDebitoCreditoSituacao, "); // 10
			sql.append("        cdit.cnta_id as idConta "); // 11
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join boleto_bancario bbco on bbco.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = cdit.cnta_id ");
			sql.append(" left join conta_historico cnhi on cnhi.cnta_id = cntg.cnta_id ");
			sql.append(" left join cliente_conta_historico clch on clch.cnta_id = cntg.cnta_id ");
			sql.append(" left join debito_credito_situacao dcst on dcst.dcst_id = cnhi.dcst_idatual ");
			sql.append(" where cdit.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorSim ");
			sql.append("   and clch.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and bbco.bbco_id = :idBoletoBancario ");
			sql.append(" order by referencia ");

			SQLQuery query = session.createSQLQuery(sql.toString());

			query.addScalar("referencia", Hibernate.INTEGER);
			query.addScalar("dataVencimentoConta", Hibernate.DATE);
			query.addScalar("valorAgua", Hibernate.BIG_DECIMAL);
			query.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL);
			query.addScalar("valorDebitos", Hibernate.BIG_DECIMAL);
			query.addScalar("valorCreditos", Hibernate.BIG_DECIMAL);
			query.addScalar("valorImposto", Hibernate.BIG_DECIMAL);
			query.addScalar("idCliente", Hibernate.INTEGER);
			query.addScalar("valorItemCobrado", Hibernate.BIG_DECIMAL);
			query.addScalar("valorAcrescimos", Hibernate.BIG_DECIMAL);
			query.addScalar("descricaoDebitoCreditoSituacao", Hibernate.STRING);
			query.addScalar("idConta", Hibernate.INTEGER);

			query.setInteger("documentoTipo", DocumentoTipo.CONTA);
			query.setInteger("clienteRelacaoTipo", ClienteRelacaoTipo.USUARIO);
			query.setInteger("idBoletoBancario", idBoletoBancario);
			query.setShort("indicadorNao", ConstantesSistema.NAO);
			query.setShort("indicadorSim", ConstantesSistema.SIM);

			retorno = (Collection<Object[]>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Quantidade de Boletos Vigentes Filtrando pelo Imovel
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Integer pesquisarQuantidadeBoletosVigentesDoImovel(Integer idImovel, Integer idBoleto) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select count(*) ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" where bbco.imovel.id = :idImovel ");
			hql.append("   and ((bbco.boletoBancarioSituacao.id = :idSituacaoEmCarteira or ");
			hql.append("         bbco.boletoBancarioSituacao.id = :idSituacaoEmCartorio) ");
			hql.append("        or (    bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("            and exists (select bboc.id ");
			hql.append("                        from BoletoBancarioOcorrencias bboc ");
			hql.append("                        where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                          and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                                     from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                                     where bbmv.boletoBancario.id = bbco.id) ");
			hql.append("                       ) ");
			hql.append("           ) ");
			hql.append("       ) ");

			if(idBoleto != null){
				hql.append("   and bbco.id = :idBoleto ");
			}

			Query query = session.createQuery(hql.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("idSituacaoEmCarteira", BoletoBancarioSituacao.EM_CARTEIRA);
			query.setInteger("idSituacaoEmCartorio", BoletoBancarioSituacao.EM_CARTORIO);
			query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			if(idBoleto != null){
				query.setInteger("idBoleto", idBoleto);
			}

			Object resultadoConsulta = query.uniqueResult();

			if(resultadoConsulta != null){
				retorno = ((Number) resultadoConsulta).intValue();
			}else{
				retorno = Integer.valueOf(0);
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Conteudo do Arrecadador Movimento Item pelo Boleto bancario
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public String pesquisarConteudoArrecadadorMovimentoItem(Integer idBoletoBancario) throws ErroRepositorioException{

		String retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select amit.amit_cnregistro as conteudoRegistro ");
			sql.append(" from boleto_bancario_movimentacao bbmv ");
			sql.append(" inner join arrecadador_movimento_item amit on amit.amit_id = bbmv.amit_id ");
			sql.append(" where bbmv.bbco_id = :idBoletoBancario ");
			sql.append("   and bbmv.blrt_id in (select blrt_id ");
			sql.append("                        from boleto_bancario_lancmt_retorno blrt ");
			sql.append("                        where blrt_icliquidacao = 1) ");
			sql.append("   and bbmv.amit_id is not null ");

			retorno = (String) session.createSQLQuery(sql.toString()).addScalar("conteudoRegistro", Hibernate.STRING)
							.setInteger("idBoletoBancario", idBoletoBancario).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Boleto bancario Totalizador
	 * [UC3023] Manter Boleto bancario
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2011
	 */
	public Collection<BoletoBancarioTotalizadorHelper> pesquisarBoletoBancarioTotalizadorPorImovel(
					BoletoBancarioHelper boletoBancarioHelper, boolean desconsiderarParametros, boolean verificarDocumentoCobranca,
					boolean verificarNumeroBoletoCartaCobranca, int pageOffset) throws ErroRepositorioException{

		List retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();
		Query query = null;

		try{
			hql.append(" select new " + BoletoBancarioTotalizadorHelper.class.getName() + "(");
			hql.append("       arrecadador.codigoAgente, imovel.id, sum(bb.valorDebito)) ");
			hql.append(" from BoletoBancario bb ");
			hql.append(" inner join bb.imovel imovel ");
			hql.append(" inner join bb.arrecadador arrecadador ");
			hql.append(" inner join arrecadador.cliente  ");
			hql.append(" inner join bb.documentoTipo dt ");
			hql.append(" inner join bb.boletoBancarioSituacao bbs ");
			hql.append(" left join bb.boletoBancarioMotivoCancelamento bbmc ");
			hql.append(" left join bb.documentoCobranca dc ");
			hql.append(" where ");

			if(!desconsiderarParametros){

				if(boletoBancarioHelper.getImovel() != null){
					hql.append(" bb.imovel = :imovel and ");
					parameters.put("imovel", boletoBancarioHelper.getImovel());
				}

				if(boletoBancarioHelper.getCliente() != null){
					hql.append(" bb.cliente = :cliente and ");
					parameters.put("cliente", boletoBancarioHelper.getCliente());
				}

				if(boletoBancarioHelper.getDataInicialVencimento() != null && boletoBancarioHelper.getDataFinalVencimento() != null){
					hql.append(" bb.dataVencimento >= :dataInicialVencimento and bb.dataVencimento <= :dataFinalVencimento  and ");

					parameters.put("dataInicialVencimento", boletoBancarioHelper.getDataInicialVencimento());
					parameters.put("dataFinalVencimento", boletoBancarioHelper.getDataFinalVencimento());
				}

				if(boletoBancarioHelper.getDataInicialPagamento() != null && boletoBancarioHelper.getDataFinalPagamento() != null){
					hql.append(" bb.dataPagamento >= :dataInicialPagamento and bb.dataPagamento <= :dataFinalPagamento  and ");

					parameters.put("dataInicialPagamento", boletoBancarioHelper.getDataInicialPagamento());
					parameters.put("dataFinalPagamento", boletoBancarioHelper.getDataFinalPagamento());
				}

				if(boletoBancarioHelper.getDataInicialCredito() != null && boletoBancarioHelper.getDataFinalCredito() != null){
					hql.append(" bb.dataCredito >= :dataInicialCredito and bb.dataCredito <= :dataFinalCredito  and ");

					parameters.put("dataInicialCredito", boletoBancarioHelper.getDataInicialCredito());
					parameters.put("dataFinalCredito", boletoBancarioHelper.getDataFinalCredito());
				}

				String[] idsBoletoBancarioSituacao = boletoBancarioHelper.getIdsBoletoBancarioSituacao();

				if(idsBoletoBancarioSituacao != null && idsBoletoBancarioSituacao.length > 0){
					hql.append(" bbs.id in (:colecaoSituacao) and ");
					parameters.put("colecaoSituacao", converterArrayStringArrayInteger(idsBoletoBancarioSituacao));
				}

				String[] idsTipoDocumento = boletoBancarioHelper.getIdsTipoDocumento();

				if(idsTipoDocumento != null && idsTipoDocumento.length > 0){
					hql.append("  dt.id in (:colecaoDocumentoTipo) and ");
					parameters.put("colecaoDocumentoTipo", converterArrayStringArrayInteger(idsTipoDocumento));
				}

				String[] idsMotivoCancelamento = boletoBancarioHelper.getIdsMotivoCancelamento();

				if(idsMotivoCancelamento != null && idsMotivoCancelamento.length > 0){
					hql.append("  bbmc.id in (:colecaoMotivoCancelamento) and ");
					parameters.put("colecaoMotivoCancelamento", converterArrayStringArrayInteger(idsMotivoCancelamento));
				}

				if(verificarDocumentoCobranca){
					hql.append(" bb.documentoCobranca is not null and ");
				}

				if(boletoBancarioHelper.getDataInicialEntrada() != null && boletoBancarioHelper.getDataFinalEntrada() != null){
					hql.append(" bb.id in ( ");
					hql.append(" select bbsh.boletoBancario ");
					hql.append(" from BoletoBancarioSituacaoHistorico bbsh ");
					hql.append(" where  bbsh.dataEntrada >= :dataInicialEntrada ");
					hql.append(" and bbsh.dataEntrada <= :dataFinalEntrada ");
					hql.append(" and bbsh.boletoBancarioSituacao.id = :situacaoBoletoBancario) and ");

					parameters.put("dataInicialEntrada", boletoBancarioHelper.getDataInicialEntrada());
					parameters.put("dataFinalEntrada", boletoBancarioHelper.getDataFinalEntrada());
					parameters.put("situacaoBoletoBancario", BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO);
				}

				if(verificarNumeroBoletoCartaCobranca){
					hql.append(" bb.idOriginal in ");
					hql.append(" ( select bbaux.id  ");
					hql.append(" 	from BoletoBancario bbaux ");
					hql.append("   where  bbaux.numeroSequencial = :numSequencial and ");
					hql.append("   bbaux.arrecadador = :idArrecadador) ");

					parameters.put("idArrecadador", boletoBancarioHelper.getArrecadador());
					parameters.put("numSequencial", boletoBancarioHelper.getNumeroSequencial());
				}

			}

			if(boletoBancarioHelper.getArrecadador() != null && !verificarNumeroBoletoCartaCobranca){
				hql.append(" bb.arrecadador = :arrecadador and ");
				parameters.put("arrecadador", boletoBancarioHelper.getArrecadador());
			}

			if(boletoBancarioHelper.getNumeroSequencial() != null && !verificarNumeroBoletoCartaCobranca){
				hql.append(" bb.numeroSequencial = :numeroSequencial  ");
				parameters.put("numeroSequencial", boletoBancarioHelper.getNumeroSequencial());
			}

			String hqlAux = hql.substring(hql.length() - 4, hql.length());

			String groupBy = " group by arrecadador.codigoAgente, imovel.id ";
			String orderBy = " order by arrecadador.codigoAgente, imovel.id ";

			if(hqlAux.equals("and ")){
				query = session.createQuery(hql.substring(0, hql.length() - 4) + groupBy + orderBy);
			}else{
				hqlAux = "";
				hqlAux = hql.substring(hql.length() - 6, hql.length());
				if(hqlAux.equals("where ")){
					query = session.createQuery(hql.substring(0, hql.length() - 6) + groupBy + orderBy);
				}else{
					query = session.createQuery(hql.toString() + groupBy + orderBy);
				}
			}

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){

					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);

				}else if(parameters.get(key) instanceof Integer){
					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof String){
					query.setParameter(key, parameters.get(key));
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			if(pageOffset < 0){
				retorno = (List) query.list();
			}else{
				retorno = (List) query.setFirstResult(10 * pageOffset).setMaxResults(10).list();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection pesquisarBoletoBancarioEnvioRetornoSituacao(Integer idBoletoBancarioLancamentoEnvio,
					Integer idBoletoBancarioLancamentoRetorno) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		// cria uma sessao com o hibernate
		Session session = HibernateUtil.getSession();
		// cria a variavel que vai conter o hql
		StringBuffer consulta = new StringBuffer();
		try{
			consulta.append(" SELECT bers ");
			consulta.append(" from BoletoBancarioEnvioRetornoSituacao bers ");
			consulta.append(" where bers.boletoBancarioLancamentoEnvio.id = :idBoletoBancarioLancamentoEnvio");

			if(idBoletoBancarioLancamentoRetorno != null){
				consulta.append(" and bers.boletoBancarioLancamentoRetorno.id = :idBoletoBancarioLancamentoRetorno");
				retorno = session.createQuery(consulta.toString())
								.setInteger("idBoletoBancarioLancamentoEnvio", idBoletoBancarioLancamentoEnvio)
								.setInteger("idBoletoBancarioLancamentoRetorno", idBoletoBancarioLancamentoRetorno).list();
			}else{
				consulta.append(" and bers.boletoBancarioLancamentoRetorno is null");
				retorno = session.createQuery(consulta.toString())
								.setInteger("idBoletoBancarioLancamentoEnvio", idBoletoBancarioLancamentoEnvio).list();
			}

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao com o hibernate
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca.
	 * [SB0008] A Gerar Atividade de Acao de cobranca para os Imoveis do Comando Precedente.
	 * 1. O sistema seleciona os Imoveis que fazem parte do comando precedente cujos documentos
	 * foram entregues.
	 * 
	 * @author Ailton Sousa
	 * @date 26/10/2011
	 * @param idComandoCobrancaPrecedente
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarImoveisComandoPrecedente(Integer idComandoCobrancaPrecedente) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cd.imovel.id " + "FROM CobrancaDocumento cd ")
							.append("WHERE cd.cobrancaAcaoAtividadeComando.id = :idComandoCobrancaPrecedente ")
							.append("AND cd.cobrancaAcaoSituacao.id = :idCobrancaAcaoSituacao ");

			retorno = (Collection<Integer>) session.createQuery(consulta.toString())
							.setInteger("idComandoCobrancaPrecedente", idComandoCobrancaPrecedente)
							.setInteger("idCobrancaAcaoSituacao", CobrancaAcaoSituacao.ENTREGUE).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @author Hugo Lima
	 * @date 02/12/2011
	 * @param resolucaoDiretoria
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> consultarResolucaoDiretoriaGrupo(ResolucaoDiretoriaGrupoHelper resolucaoDiretoriaGrupoHelper,
					int pageOffset) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		StringBuffer hql = new StringBuffer();
		String sqlConnector = "";
		Map parameters = new HashMap();
		Query query = null;

		try{
			hql.append(" select distinct rdir ");
			hql.append(" from ResolucaoDiretoria rdir ");
			hql.append(" left join rdir.parcelamentosSituacaoEspecial pcse ");

			hql.append(" where ");

			if(resolucaoDiretoriaGrupoHelper.getNumero() != null){
				hql.append(" rdir.numeroResolucaoDiretoria like :numero");
				parameters.put("numero", "%" + resolucaoDiretoriaGrupoHelper.getNumero() + "%");
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getAssunto() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.descricaoAssunto like :assunto ");

				if(resolucaoDiretoriaGrupoHelper.getTipoPesquisa().equals(ConstantesSistema.TIPO_PESQUISA_COMPLETA.toString())){
					parameters.put("assunto", "%" + resolucaoDiretoriaGrupoHelper.getAssunto() + "%");
				}else if(resolucaoDiretoriaGrupoHelper.getTipoPesquisa().equals(ConstantesSistema.TIPO_PESQUISA_INICIAL.toString())){
					parameters.put("assunto", resolucaoDiretoriaGrupoHelper.getAssunto() + "%");
				}

				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getDataInicio() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.dataVigenciaInicio >= :dataInicio");
				parameters.put("dataInicio", resolucaoDiretoriaGrupoHelper.getDataInicio());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getDataFim() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.dataVigenciaFim <= :dataFim");
				parameters.put("dataFim", resolucaoDiretoriaGrupoHelper.getDataFim());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getResolucaoDiretoriaLayout() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.resolucaoDiretoriaLayout = :resolucaoDiretoriaLayout");
				parameters.put("resolucaoDiretoriaLayout", resolucaoDiretoriaGrupoHelper.getResolucaoDiretoriaLayout());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getGrupo() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.numeroResolucaoDiretoria in (select rdir.numeroResolucaoDiretoria ");
				hql.append("                                         from ResolucaoDiretoriaGrupo rdgr ");
				hql.append("                                         inner join rdgr.resolucaoDiretoria rdir ");
				hql.append("                                         where rdgr.grupo.id = :idGrupo)");
				parameters.put("idGrupo", resolucaoDiretoriaGrupoHelper.getGrupo());
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDParcImovel() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorParcelamentoUnico = :indicadorParcelamentoUnico");
				parameters.put("indicadorParcelamentoUnico", resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDParcImovel());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDUsuarios() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorUtilizacaoLivre = :indicadorUtilizacaoLivre");
				parameters.put("indicadorUtilizacaoLivre", resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDUsuarios());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDDebitoCobrar() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorDescontoSancoes = :indicadorDescontoSancoes");
				parameters.put("indicadorDescontoSancoes", resolucaoDiretoriaGrupoHelper.getIndicadorUsoRDDebitoCobrar());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorEmissaoAssuntoConta() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorEmissaoAssuntoConta = :indicadorEmissaoAssuntoConta");
				parameters.put("indicadorEmissaoAssuntoConta", resolucaoDiretoriaGrupoHelper.getIndicadorEmissaoAssuntoConta());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorTrataMediaAtualizacaoMonetaria() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorTrataMediaAtualizacaoMonetaria = :indicadorTrataMediaAtualizacaoMonetaria");
				parameters.put("indicadorTrataMediaAtualizacaoMonetaria",
								resolucaoDiretoriaGrupoHelper.getIndicadorTrataMediaAtualizacaoMonetaria());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorCobrarDescontosArrasto() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorCobrarDescontosArrasto = :indicadorCobrarDescontosArrasto");
				parameters.put("indicadorCobrarDescontosArrasto", resolucaoDiretoriaGrupoHelper.getIndicadorCobrarDescontosArrasto());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getIndicadorArrasto() != null){
				hql.append(sqlConnector);
				hql.append(" rdir.indicadorArrasto = :indicadorArrasto");
				parameters.put("indicadorArrasto", resolucaoDiretoriaGrupoHelper.getIndicadorArrasto());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getLocalidade() != null){
				hql.append(sqlConnector);
				hql.append(" pcse.localidade.id = :idLocalidade");
				parameters.put("idLocalidade", resolucaoDiretoriaGrupoHelper.getLocalidade());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getAnoMesReferenciaDebitoInicio() != null){
				hql.append(sqlConnector);
				hql.append(" pcse.anoMesReferenciaDebitoInicio >= :anoMesReferenciaDebitoInicio");
				parameters.put("anoMesReferenciaDebitoInicio", resolucaoDiretoriaGrupoHelper.getAnoMesReferenciaDebitoInicio());
				sqlConnector = " AND ";
			}

			if(resolucaoDiretoriaGrupoHelper.getAnoMesReferenciaDebitoFim() != null){
				hql.append(sqlConnector);
				hql.append(" pcse.anoMesReferenciaDebitoFim <= :anoMesReferenciaDebitoFim");
				parameters.put("anoMesReferenciaDebitoFim", resolucaoDiretoriaGrupoHelper.getAnoMesReferenciaDebitoFim());
				sqlConnector = " AND ";
			}

			String groupBy = "  ";
			String orderBy = " order by rdir.descricaoAssunto ";

			query = session.createQuery(hql.toString() + groupBy + orderBy);

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){
				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){
					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);
				}else if(parameters.get(key) instanceof Integer){
					query.setInteger(key, (Integer) parameters.get(key));
				}else if(parameters.get(key) instanceof String){
					query.setString(key, (String) parameters.get(key));
				}else if(parameters.get(key) instanceof Short){
					query.setShort(key, (Short) parameters.get(key));
				}else{
					query.setParameter(key, parameters.get(key));
				}
			}

			if(pageOffset < 0){
				retorno = (List) query.list();
			}else{
				retorno = (List) query.setFirstResult(10 * pageOffset).setMaxResults(10).list();
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Obter cobranca Negociacao Atendimento
	 * 
	 * @author Hebert Falcao
	 * @date 25/11/2011
	 */
	public CobrancaNegociacaoAtendimento obterCobrancaNegociacaoAtendimento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		CobrancaNegociacaoAtendimento retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cbna ");
			hql.append(" from CobrancaNegociacaoAtendimento cbna ");
			hql.append(" where cbna.cobrancaDocumento.id = :idCobrancaDocumento ");
			hql.append("    or cbna.preParcelamento.id in (select prep.id ");
			hql.append("                                   from PreParcelamento prep ");
			hql.append("                                   where prep.documentoCobranca = :idCobrancaDocumento) ");

			retorno = (CobrancaNegociacaoAtendimento) session.createQuery(hql.toString())
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar cobranca Negociacao Atendimento para o Imovel
	 * 
	 * @author Yara Souza
	 * @date 28/11/2011
	 */
	public Collection<Integer> pesquisarCobrancaNegociacaoAtendimento(Integer idImovel) throws ErroRepositorioException{

		Collection<Integer> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cbna.id ");
			hql.append(" from CobrancaNegociacaoAtendimento cbna ");
			hql.append(" inner join  cbna.registroAtendimento rgat ");
			hql.append(" where cbna.imovel.id = :idImovel ");
			hql.append(" and rgat.dataEncerramento is null ");

			retorno = (Collection<Integer>) session.createQuery(hql.toString()).setInteger("idImovel", idImovel).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar cobranca Negociacao Atendimento nao Encerrado
	 * 
	 * @author Hugo Lima
	 * @date 30/11/2011
	 */
	public Collection<CobrancaNegociacaoAtendimento> pesquisarCobrancaNegociacaoAtendimentoNaoEncerrado() throws ErroRepositorioException{

		Collection<CobrancaNegociacaoAtendimento> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cbna ");
			hql.append(" from CobrancaNegociacaoAtendimento cbna ");
			hql.append(" inner join fetch cbna.registroAtendimento registroAtendimento ");
			hql.append(" inner join fetch registroAtendimento.registroAtendimentoUnidades registroAtendimentoUnidades ");
			hql.append(" where registroAtendimento.dataEncerramento is null ");

			retorno = (Collection<CobrancaNegociacaoAtendimento>) session.createQuery(hql.toString()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Quantidade de a?tens Pagos
	 * 
	 * @author Hebert Falcao
	 * @date 19/12/2011
	 */
	public Integer pesquisarQuantidadeDeItensPagos(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Integer retorno = null;
		Session sessao = HibernateUtil.getSession();

		try{
			StringBuffer consulta = new StringBuffer();

			consulta.append("select (count(cnhi.cnta_id) + count(gpph.gpag_id) + count(dbac.dbac_id) + count(dahi.dbac_id)) as count ");
			consulta.append("from cobranca_documento_item cdit ");
			consulta.append("left join conta_historico cnhi on cnhi.cnta_id = cdit.cnta_id ");
			consulta.append("left join guia_pagamento_prestacao_hist gpph on (gpph.gpag_id = cdit.gpag_id ");
			consulta.append("                                             and gpph.gpph_nnprestacao = cdit.cdit_nnprestacao) ");
			consulta.append("left join debito_a_cobrar dbac on dbac.dbac_id = cdit.dbac_id and dbac.dbac_nnprestacaocobradas <> 0 ");
			consulta.append("left join debito_a_cobrar_historico dahi on dahi.dbac_id = cdit.dbac_id ");
			consulta.append("where cdit.cbdo_id = :idCobrancaDocumento ");

			retorno = (Integer) ((SQLQuery) sessao.createSQLQuery(consulta.toString()).setInteger("idCobrancaDocumento",
							idCobrancaDocumento)).addScalar("count", Hibernate.INTEGER).uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca bancaria com Negociacao.
	 * Retorna os boletos bancarios para pedido de baixa
	 * 
	 * @author Hugo Lima
	 * @date 09/12/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarBoletosBancariosPermissaoPedidoBaixa() throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{
			Integer pedidoDeBaixa = ConstantesSistema.BOLETO_BANCARIO_LANCAMENTO_ENVIO_PEDIDO_DE_BAIXA;
			Integer sustarProtestoEBaixarTitul = ConstantesSistema.BOLETO_BANCARIO_LANCAMENTO_ENVIO_SUSTAR_PROTESTO_E_BAIXAR_TITUL;

			sql.append("select distinct(a.bbco_id) as id, ");
			sql.append("       bble.blen_id as idlancamentoenvio, a.bbco_nnsequencial numeroSequencial ");
			sql.append("from boleto_bancario a ");
			sql.append("join cobranca_documento_item b on b.cbdo_id = a.cbdo_id ");
			sql.append("join boleto_bancario_lancmt_envio bble on a.bbst_idatual = bble.bbst_idatualobrigatoria ");
			sql.append("                                       and (   bble.blen_id = " + pedidoDeBaixa + " ");
			sql.append("                                            or bble.blen_id = " + sustarProtestoEBaixarTitul + ") ");
			sql.append("where a.cbdo_id is not null ");
			sql.append("  and not exists (select * ");
			sql.append("                  from boleto_bancario_movimentacao d ");
			sql.append("                  where d.bbco_id = a.bbco_id ");
			sql.append("                    and d.blen_id is not null ");
			sql.append("                    and (   d.amit_id is null ");
			sql.append("                         or (    d.amit_id is not null ");
			sql.append("                             and d.bbmv_idretorno is null))) ");
			sql.append("  and ((exists (select * ");
			sql.append("              from pagamento c ");
			sql.append("              where c.cnta_id = b.cnta_id) or ");
			sql.append("        exists (select * ");
			sql.append("                from pagamento_historico e ");
			sql.append("                where e.cnta_id = b.cnta_id)) ");
			sql.append("       or exists (select * ");
			sql.append("                  from conta_historico d ");
			sql.append("                  where d.cnta_id = b.cnta_id ");
			sql.append("                    and d.dcst_idatual in (" + DebitoCreditoSituacao.CANCELADA + ", ");
			sql.append("                                           " + DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO + "))) ");

			SQLQuery query = session.createSQLQuery(sql.toString());

			query.addScalar("id", Hibernate.INTEGER).addScalar("idLancamentoEnvio", Hibernate.INTEGER)
							.addScalar("numeroSequencial", Hibernate.INTEGER);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<Object[]> pesquisarCobrancaDocumentoRelatorioEmitirRelacaoDocumentos(int idCobrancaAtividadeAcaoComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection retorno = null;
		String consulta = null;

		try{

			consulta = "select cd.id, imovel.id, loca.id, loca.descricao,  cd.valorDocumento, cd.numeroSequenciaDocumento, imovel.ligacaoAguaSituacao, imovel.ligacaoEsgotoSituacao "
							+ " from CobrancaDocumento cd "
							+ " inner join  cd.localidade loca "
							+ " inner join cd.imovel imovel "
							+ " where cd.cobrancaAcaoAtividadeComando.id = :idCobrancaAtividadeAcaoComando "
							+ " order by loca.id, cd.codigoSetorComercial, cd.numeroQuadra, imovel.lote, imovel.subLote";

			retorno = (Collection<Object[]>) session.createQuery(consulta)
							.setInteger("idCobrancaAtividadeAcaoComando", idCobrancaAtividadeAcaoComando).list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [SB0016] A Obter Boletos bancarios para Negociacao.
	 * O sistema Obtem os boletos bancarios do Imovel possiveis de serem negociados.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<BoletoBancario> obterBoletosBancariosParaNegociacao(Integer idImovel) throws ErroRepositorioException{

		Collection<BoletoBancario> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select bb ");
			hql.append(" from BoletoBancario bb ");
			hql.append(" inner join fetch bb.arrecadador arrc ");
			hql.append(" inner join fetch arrc.cliente clie ");
			hql.append(" inner join fetch bb.imovel imov ");
			hql.append(" inner join fetch bb.boletoBancarioSituacao bbst ");
			hql.append(" where imov.id = :idImovel ");
			hql.append(" and bb.documentoCobranca is not null ");
			hql.append(" and ((bb.boletoBancarioSituacao.id = :idSituacaoEmCarteira OR ");
			hql.append("       bb.boletoBancarioSituacao.id = :idSituacaoEmCartorio) ");
			hql.append("      or (   bb.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("          and exists (select bboc.id ");
			hql.append("                      from BoletoBancarioOcorrencias bboc ");
			hql.append("                      where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                        and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                                   from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                                   where bbmv.boletoBancario.id = bb.id) ");
			hql.append("                     ) ");
			hql.append("         ) ");
			hql.append("     ) ");
			hql.append(" and bb.parcelamento is null ");
			hql.append(" and not exists ( ");
			hql.append("     			 select bbm.id ");
			hql.append(" 				 from BoletoBancarioMovimentacao bbm ");
			hql.append("     			 where bbm.boletoBancario.id = bb.id ");
			hql.append("     			 and bbm.boletoBancarioLancamentoEnvio is not null ");
			hql.append("     			 and ( bbm.arrecadadorMovimentoItem is null OR ");
			hql.append("     			 	 ( bbm.arrecadadorMovimentoItem is not null and bbm.boletoBancarioMovimentacaoRetorno is null )) ");
			hql.append(" 				) ");

			retorno = (Collection<BoletoBancario>) session.createQuery(hql.toString()).setInteger("idImovel", idImovel)
							.setInteger("idSituacaoEmCarteira", BoletoBancarioSituacao.EM_CARTEIRA)
							.setInteger("idSituacaoEmCartorio", BoletoBancarioSituacao.EM_CARTORIO)
							.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA)
							.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [SB0016] A Obter Boletos bancarios para Negociacao.
	 * Obtem a data de entrada atravas da entidade BoletoBancarioSituacaoHistorico pelo ID do
	 * BoletoBancario.
	 * 
	 * @author Ailton Sousa
	 * @date 20/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Date obterDataEntradaBoletoBancarioSituacaoHistorico(Integer idBoletoBancario) throws ErroRepositorioException{

		Date retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select bbsh.dataEntrada ");
			hql.append(" from BoletoBancarioSituacaoHistorico bbsh ");
			hql.append(" where bbsh.boletoBancario.id = :idBoletoBancario ");
			hql.append(" and bbsh.boletoBancarioSituacao.id = :idSituacaoBoleto  ");

			retorno = (Date) session.createQuery(hql.toString()).setInteger("idBoletoBancario", idBoletoBancario)
							.setInteger("idSituacaoBoleto", Integer.valueOf(BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO))
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [SB0017] A Determinar ParametrizAcao do Parcelamento de cobranca bancaria
	 * Obtem a menor referencia das contas associadas ao boleto bancario selecionado para
	 * Negociacao.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer obterMenorReferenciaContaBoletoBancario(Integer idBoletoBancario) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select min(c.cnta_amreferenciaconta) as referencia ");
			consulta.append("from conta c ");
			consulta.append("inner join cobranca_documento_item cdi on cdi.cnta_id = c.cnta_id ");
			consulta.append("inner join cobranca_documento cd on cd.cbdo_id = cdi.cbdo_id ");
			consulta.append("inner join boleto_bancario bb on bb.cbdo_id = cd.cbdo_id ");
			consulta.append("where bb.bbco_id = :idBoletoBancario ");

			retorno = (Integer) ((SQLQuery) session.createSQLQuery(consulta.toString()).setInteger("idBoletoBancario", idBoletoBancario))
							.addScalar("referencia", Hibernate.INTEGER).uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [SB0017] A Determinar ParametrizAcao do Parcelamento de cobranca bancaria
	 * Obtem a maior referencia das contas associadas ao boleto bancario selecionado para
	 * Negociacao.
	 * 
	 * @author Ailton Sousa
	 * @date 22/12/2011
	 * @param idBoletoBancario
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer obterMaiorReferenciaContaBoletoBancario(Integer idBoletoBancario) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select max(c.cnta_amreferenciaconta) as referencia ");
			consulta.append("from conta c ");
			consulta.append("inner join cobranca_documento_item cdi on cdi.cnta_id = c.cnta_id ");
			consulta.append("inner join cobranca_documento cd on cd.cbdo_id = cdi.cbdo_id ");
			consulta.append("inner join boleto_bancario bb on bb.cbdo_id = cd.cbdo_id ");
			consulta.append("where bb.bbco_id = :idBoletoBancario ");

			retorno = (Integer) ((SQLQuery) session.createSQLQuery(consulta.toString()).setInteger("idBoletoBancario", idBoletoBancario))
							.addScalar("referencia", Hibernate.INTEGER).uniqueResult();
		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [FS0016] A Verificar se usuario possui autorizacao para utilizar a RD
	 * 
	 * @author Ailton Sousa
	 * @date 27/12/2011
	 * @param idUsuario
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaPermitidaAoUsuario(Integer idUsuario) throws ErroRepositorioException{

		Collection retorno;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "select rd "
							+ "from ResolucaoDiretoria rd "
							+ "where rd.indicadorUtilizacaoLivre = :indicadorUtilizacaoLivre "
							+ "and (rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual) "
							+ "and (rd.dataVigenciaInicio <= :dataAtual) "
							+ "and exists (select rdg.id from ResolucaoDiretoriaGrupo rdg "
							+ "				where rdg.resolucaoDiretoria.id = rd.id and rdg.indicadorUso = 1 "
							+ "             and exists (select ug.comp_id.grupoId from UsuarioGrupo ug where ug.comp_id.grupoId = rdg.grupo.id and ug.comp_id.usuarioId = :idUsuario)) "
							+ "order by rd.numeroResolucaoDiretoria ";

			retorno = (Collection) session.createQuery(consulta).setDate("dataAtual", new Date())
							.setShort("indicadorUtilizacaoLivre", ConstantesSistema.NAO).setInteger("idUsuario", idUsuario).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * Verifica se a conta esta associada ao boleto bancario da Negociacao.
	 * 
	 * @author Ailton Sousa
	 * @date 18/01/2012
	 * @param idBoletoBancario
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean isContaAssociadaAoBoletoBancario(Integer idBoletoBancario, Integer idConta) throws ErroRepositorioException{

		Integer contaID = null;
		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select c.cnta_id as contaID ");
			consulta.append("from conta c ");
			consulta.append("inner join cobranca_documento_item cdi on cdi.cnta_id = c.cnta_id ");
			consulta.append("inner join cobranca_documento cd on cd.cbdo_id = cdi.cbdo_id ");
			consulta.append("inner join boleto_bancario bb on bb.cbdo_id = cd.cbdo_id ");
			consulta.append("where bb.bbco_id = :idBoletoBancario and c.cnta_id = :idConta ");

			contaID = (Integer) ((SQLQuery) session.createSQLQuery(consulta.toString()).setInteger("idBoletoBancario", idBoletoBancario)
							.setInteger("idConta", idConta)).addScalar("contaID", Hibernate.INTEGER).uniqueResult();

			if(contaID != null){
				retorno = true;
			}

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Boleto bancario Acao cobranca Sem Entrada para pedido de baixa
	 * [UC3019] Identificar cobranca com Negociacao
	 * 
	 * @author Hugo Lima
	 * @date 23/01/2011
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<BoletoBancario> pesquisarBoletosBancariosSemEntradaPermissaoPedidoBaixa() throws ErroRepositorioException{

		List retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Query query = null;

		try{
			hql.append(" select bbco ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" inner join bbco.parcelamento parc ");
			hql.append(" inner join fetch bbco.boletoBancarioSituacao bbcs ");
			hql.append(" where ");
			hql.append(" bbco.id is not null ");
			hql.append(" and bbco.idOriginal is null ");
			hql.append(" and bbco.parcelamento is not null ");
			hql.append(" and (parc.valorEntrada is null or parc.valorEntrada = 0) ");
			hql.append(" and ( ");
			hql.append("      bbco.boletoBancarioSituacao.id = ");
			hql.append("       (select bble.situacaoAtualObrigatoria.id ");
			hql.append("        from BoletoBancarioLancamentoEnvio bble ");
			hql.append("        where bble.id = " + BoletoBancarioLancamentoEnvio.PEDIDO_DE_BAIXA);
			hql.append("        ) ");
			hql.append("      or ");
			hql.append("      bbco.boletoBancarioSituacao.id = ");
			hql.append("       (select bble.situacaoAtualObrigatoria.id ");
			hql.append("        from BoletoBancarioLancamentoEnvio bble ");
			hql.append("        where bble.id = " + BoletoBancarioLancamentoEnvio.SUSTAR_PROTESTO_E_BAIXAR_TITUL);
			hql.append("        ) ");
			hql.append("      ) ");
			hql.append(" and not exists ( ");
			hql.append("                 select bbm ");
			hql.append("                 from BoletoBancarioMovimentacao bbm ");
			hql.append("                 where bbm.boletoBancario.id = bbco.id ");
			hql.append("                 and  bbm.boletoBancarioLancamentoEnvio.id is not null ");
			hql.append("                 and (bbm.arrecadadorMovimentoItem.id is null ");
			hql.append("                      or  (bbm.arrecadadorMovimentoItem.id is not null ");
			hql.append("                           and bbm.boletoBancarioMovimentacaoRetorno.id is null");
			hql.append("                           ) ");
			hql.append("                      ) ");
			hql.append("                 ) ");
			hql.append(" and (not exists (select bbm2 ");
			hql.append("                  from BoletoBancarioMovimentacao bbm2 ");
			hql.append("                  join bbm2.boletoBancario bbco2 ");
			hql.append("                  where bbco2.idOriginal = bbco.id ");
			hql.append("                  and bbm2.boletoBancarioLancamentoEnvio.id = " + BoletoBancarioLancamentoEnvio.ENTRADA_TITULOS);
			hql.append(" 		          and (bbm2.arrecadadorMovimentoItem.id is null ");
			hql.append(" 		               or (bbm2.arrecadadorMovimentoItem.id is not null ");
			hql.append(" 		                   and bbm2.boletoBancarioMovimentacaoRetorno.id is null ");
			hql.append("                           ) ");
			hql.append("                       ) ");
			hql.append("                   ) ");
			hql.append(" 	  or ( ");
			hql.append(" 		  (select count(bbco3) ");
			hql.append("           from BoletoBancario bbco3 ");
			hql.append(" 		   where bbco3.idOriginal = bbco.id) = ");
			hql.append(" 		     (select count(bbco4) ");
			hql.append("              from BoletoBancario bbco4 ");
			hql.append("              where bbco4.idOriginal = bbco.id  ");
			hql.append("              and bbco4.boletoBancarioSituacao.id = " + BoletoBancarioSituacao.CANCELADO + " ");
			hql.append("              ) ");
			hql.append("          ) ");
			hql.append("      ) ");

			query = session.createQuery(hql.toString());

			retorno = (List) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * [FS0035] - Verificar RD com restricao de uso por localidade/pera­odo de Debito para o
	 * Imovel
	 * 
	 * @author Yara Souza
	 * @date 11/02/2012
	 * @param idResolucaoDiretoria
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ParcelamentoSituacaoEspecial> verificarRDComRestricao(Integer idResolucaoDiretoria) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		String consulta = "";

		try{

			consulta = "select pse " + "from ParcelamentoSituacaoEspecial pse " + "left join fetch pse.resolucaoDiretoria "
							+ "where pse.resolucaoDiretoria.id = :idResolucaoDiretoria";

			retorno = (Collection) session.createQuery(consulta).setInteger("idResolucaoDiretoria", idResolucaoDiretoria).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos.
	 * 
	 * @param idLocalidade
	 * @param intervalorParcelamentoInicial
	 * @param intervalorParcelamentoFinal
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<ParcelamentoSituacaoEspecial> pesquisarParcelamentoSituacaoEspecialPorLocalidade(Integer idLocalidade,
					Integer intervalorParcelamentoInicial, Integer intervalorParcelamentoFinal) throws ErroRepositorioException{

		Collection retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" select pse ");
			hql.append(" from ParcelamentoSituacaoEspecial pse ");
			hql.append(" inner join fetch pse.resolucaoDiretoria rd ");
			hql.append(" where pse.localidade.id = :idLocalidade ");
			hql.append(" AND ((pse.anoMesReferenciaDebitoFim >= :intervalorParcelamentoInicial AND pse.anoMesReferenciaDebitoInicio <= :intervalorParcelamentoFinal)");
			hql.append(" OR (pse.anoMesReferenciaDebitoInicio >= :intervalorParcelamentoInicial AND pse.anoMesReferenciaDebitoInicio <= :intervalorParcelamentoFinal))");

			hql.append(" AND ( rd.dataVigenciaFim is null or rd.dataVigenciaFim >= :dataAtual)");

			retorno = (Collection) session.createQuery(hql.toString()).setInteger("idLocalidade", idLocalidade)
							.setInteger("intervalorParcelamentoInicial", intervalorParcelamentoInicial)
							.setInteger("intervalorParcelamentoFinal", intervalorParcelamentoFinal).setDate("dataAtual", new Date()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0111] Iniciar Processo
	 * [SB0007] A Obter Dados Complementares do Comando de Cronograma de cobranca
	 * 
	 * @author Hugo Lima
	 * @date 28/02/2012
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosComplementaresComandoCronogramaCobranca(Integer idComandoFaturamento) throws ErroRepositorioException{

		Object[] retorno = null;
		Object retornoConsulta = null;
		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" select cobrancaAcao.descricaoCobrancaAcao, ");
			consulta.append(" cobrancaAtividade.descricaoCobrancaAtividade, ");
			consulta.append(" cobrancaGrupoCronogramaMes.anoMesReferencia, ");
			consulta.append(" cobrancaGrupo.descricao ");
			consulta.append(" from CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma ");
			consulta.append(" inner join cobrancaAcaoAtividadeCronograma.cobrancaAcaoCronograma cobrancaAcaoCronograma ");
			consulta.append(" inner join cobrancaAcaoCronograma.cobrancaAcao cobrancaAcao ");
			consulta.append(" inner join cobrancaAcaoAtividadeCronograma.cobrancaAtividade cobrancaAtividade");
			consulta.append(" inner join cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes ");
			consulta.append(" inner join cobrancaGrupoCronogramaMes.cobrancaGrupo cobrancaGrupo ");
			consulta.append(" where cobrancaAcaoAtividadeCronograma.id = :idComandoFaturamento ");

			retornoConsulta = session.createQuery(consulta.toString()).setInteger("idComandoFaturamento", idComandoFaturamento)
							.setMaxResults(1).uniqueResult();

			if(!Util.isVazioOuBranco(retornoConsulta)){
				retorno = (Object[]) retornoConsulta;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0111] Iniciar Processo
	 * [SB0008] A Obter Dados Complementares do Comando Eventual de cobranca
	 * 
	 * @author Hugo Lima
	 * @date 28/02/2012
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisarDadosComplementaresComandoEventualCobranca(Integer idComandoFaturamento) throws ErroRepositorioException{

		Object[] retorno = null;
		Object retornoConsulta = null;
		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" select cobrancaAcao.descricaoCobrancaAcao, ");
			consulta.append(" cobrancaAtividade.descricaoCobrancaAtividade, ");
			consulta.append(" cobrancaAcaoAtividadeComando.descricaoTitulo, ");
			consulta.append(" cobrancaGrupo.descricao ");
			consulta.append(" from CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando ");
			consulta.append(" inner join cobrancaAcaoAtividadeComando.cobrancaAcao cobrancaAcao ");
			consulta.append(" inner join cobrancaAcaoAtividadeComando.cobrancaAtividade cobrancaAtividade ");
			consulta.append(" left outer join cobrancaAcaoAtividadeComando.cobrancaGrupo cobrancaGrupo ");
			consulta.append(" where cobrancaAcaoAtividadeComando.id = :idComandoFaturamento ");

			retornoConsulta = session.createQuery(consulta.toString()).setInteger("idComandoFaturamento", idComandoFaturamento)
							.setMaxResults(1).uniqueResult();

			if(!Util.isVazioOuBranco(retornoConsulta)){
				retorno = (Object[]) retornoConsulta;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Consultar os parcelamentos ativos do Imovel recebido, realizados com forma de cobranca em
	 * conta e com Prestacoes a serem cobradas de tipo de lancamento contabil diferente de Juros
	 * de
	 * Parcelamento
	 * 
	 * @author Hebert Falcao
	 * @date 02/03/2012
	 */
	public Collection<Parcelamento> pesquisarParcelamentosAtivo(Integer idImovel) throws ErroRepositorioException{

		Collection<Parcelamento> retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select parc ");
			hql.append(" from Parcelamento parc ");
			hql.append(" where parc.imovel.id = :idImovel ");
			hql.append("   and parc.parcelamentoSituacao.id = " + ParcelamentoSituacao.NORMAL);
			hql.append("   and parc.cobrancaForma.id = " + CobrancaForma.COBRANCA_EM_CONTA);
			hql.append("   and parc.id in (select dbac.parcelamento.id ");
			hql.append("                   from DebitoACobrar dbac ");
			hql.append("                   where dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");
			hql.append("                     and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                                                " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                                                " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("                     and dbac.lancamentoItemContabil.id <> " + LancamentoItemContabil.JUROS_DO_PARCELAMENTO + ") ");

			retorno = (Collection<Parcelamento>) session.createQuery(hql.toString()).setInteger("idImovel", idImovel).list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Verifica se o Imovel possua multa por descumprimento para a referencia do parcelamento
	 * 
	 * @author Hebert Falcao
	 * @date 02/03/2012
	 */
	public boolean verificarExistenciaMultaPorDescumprimento(Integer idParcelamento) throws ErroRepositorioException{

		boolean retorno = false;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select count(*) ");
			hql.append(" from DebitoACobrar dbac ");
			hql.append(" where dbac.parcelamento.id = :idParcelamento ");
			hql.append("   and dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");
			hql.append("   and dbac.debitoTipo.id = " + DebitoTipo.MULTA_POR_DESCUMPRIMENTO_PARCELAMENTO);
			hql.append("   and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");

			Integer quantidade = ((Number) session.createQuery(hql.toString()).setInteger("idParcelamento", idParcelamento).uniqueResult())
							.intValue();

			if(quantidade > 0){
				retorno = true;
			}
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Selecionar as Prestacoes que nao sejam referentes ao tipo de lancamento contabil Juros
	 * de
	 * Parcelamento e que estejam vencidos
	 * 
	 * @author Hebert Falcao
	 * @date 02/03/2012
	 */
	public Integer obterQuantidadePrestacoesVencidas(Integer idParcelamento, Integer fatorReducao) throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		Date dataAtualComFatorReducao = Util.subtrairNumeroDiasDeUmaData(new Date(), fatorReducao);

		try{
			hql.append(" select count(distinct dbcb.numeroPrestacaoDebito) ");
			hql.append(" from DebitoCobrado dbcb ");
			hql.append(" inner join dbcb.conta cnta ");
			hql.append(" where dbcb.parcelamento.id = :idParcelamento ");
			hql.append("   and dbcb.lancamentoItemContabil.id <> " + LancamentoItemContabil.JUROS_DO_PARCELAMENTO);
			hql.append("   and cnta.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("   and cnta.dataVencimentoConta < :dataAtualComFatorReducao ");
			hql.append("   and dbcb.numeroPrestacaoDebito <> dbcb.numeroPrestacao ");

			retorno = ((Number) session.createQuery(hql.toString()).setInteger("idParcelamento", idParcelamento)
							.setDate("dataAtualComFatorReducao", dataAtualComFatorReducao).uniqueResult()).intValue();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Obter Debito a cobrar ativo associado a um parcelamento e que tenha Prestacoes a serem
	 * cobradas
	 * 
	 * @author Hebert Falcao
	 * @date 02/03/2012
	 */
	public Collection<DebitoACobrar> obterDebitoACobrarAtivoAssociadoParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Collection<DebitoACobrar> retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select dbac ");
			hql.append(" from DebitoACobrar dbac ");
			hql.append(" inner join fetch dbac.imovel ");
			hql.append(" inner join fetch dbac.localidade ");
			hql.append(" inner join fetch dbac.financiamentoTipo ");
			hql.append(" inner join fetch dbac.lancamentoItemContabil ");
			hql.append(" where dbac.parcelamento.id = :idParcelamento ");
			hql.append("   and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("   and dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");

			retorno = (Collection<DebitoACobrar>) session.createQuery(hql.toString()).setInteger("idParcelamento", idParcelamento).list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * 
	 * @Autor: Yara Souza
	 * @Date:03/04/2012
	 * @param anoMesReferenciaDebito
	 *            Ano mes de Referencia de Debito
	 * @return O Indices Acrescimos por Impontualidade
	 * @throws ErroRepositorioException
	 *             9. O sistema seleciona os indices dos Acrescimos por impontualidade com
	 *             ano-mes
	 *             maior ou
	 *             igual ao ano-mes da Data de Vencimento e menor ou igual ao ano-mes da Data
	 *             Final
	 *             (a partir da tabela INDICES_ACRESCIMOS_IMPONTUALIDADE com IACI_AMREFERENCIA
	 *             between
	 *             ano-mes da Data de Vencimento e
	 *             ano-mes da Data Final =ano/mes de referencia do Debito)
	 */
	public HashMap<Integer, IndicesAcrescimosImpontualidade> pesquisarIndiceAcrescimoImpontualidade(Integer anoMesDataVencimento,
					Integer anoMesDataFinal) throws ErroRepositorioException{

		HashMap<Integer, IndicesAcrescimosImpontualidade> retorno = new HashMap<Integer, IndicesAcrescimosImpontualidade>();
		Collection colecao = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select iai ").append("from IndicesAcrescimosImpontualidade iai ")
							.append("where iai.anoMesReferencia between  :anoMesDataVencimento and  :anoMesDataFinal");

			colecao = session.createQuery(consulta.toString()).setInteger("anoMesDataVencimento", anoMesDataVencimento)
							.setInteger("anoMesDataFinal", anoMesDataFinal).list();

			Iterator it = colecao.iterator();
			while(it.hasNext()){
				IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade = (IndicesAcrescimosImpontualidade) it.next();
				retorno.put(indicesAcrescimosImpontualidade.getAnoMesReferencia(), indicesAcrescimosImpontualidade);
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos
	 * Obtem as Opcoes de Parcelamento do Debito do Imovel
	 * [SB0002] Obter Opcoes Parcelamento
	 * 
	 * @param referencia
	 * @return
	 * @throws ErroRepositorioException
	 */

	public BigDecimal obterMediaFatorAtualizacaoMonetaria() throws ErroRepositorioException{

		BigDecimal retorno = BigDecimal.ZERO;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select avg(IACI_NNFATORATUALIZACAOMONETAR) as mediaFatAtualizacaoMonetaria ");
			consulta.append("from ( ");
			consulta.append("select IACI_NNFATORATUALIZACAOMONETAR ");
			consulta.append("from indices_acrescimos_imptde  ");
			consulta.append("order by IACI_AMREFERENCIA desc)  ");
			consulta.append("where rownum <= 12 ");

			retorno = (BigDecimal) ((SQLQuery) session.createSQLQuery(consulta.toString())).addScalar("mediaFatAtualizacaoMonetaria",
							Hibernate.BIG_DECIMAL).uniqueResult();

		}catch(Exception e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Conta os registros para mandar pra batch ou gerar online o relatorio
	 * 
	 * @Autor: Italo Almeida
	 * @Date: 03/05/2012
	 */

	public Integer gerarCurvaAbcDebitosCount(String classificacao, String indicadorImovelMedicaoIndividualizada,
					String indicadorImovelParalizacaoFaturamentoCobranca, String[] gerenciaRegional, String idLocalidadeInicial,
					String idLocalidadeFinal, String idSetorComercialInicial, String idSetorComercialFinal, String[] situacaoLigacaoAgua,
					String[] situacaoLigacaoEsgoto, String intervaloConsumoMinimoFixadoEsgotoInicial,
					String intervaloConsumoMinimoFixadoEsgotoFinal, String indicadorMedicao, String idTipoMedicao, String idPerfilImovel,
					String idTipoCategoria, String[] categoria, String idSubCategoria) throws ErroRepositorioException{

		Integer retorno = null;
		Session sessao = HibernateUtil.getSession();
		String hqlAux = "";
		String orderBy = "";
		boolean finaliza = false;

		try{
			String hql = "select " + "	count(imovel.id) " +

			"from " + "	ImovelSubcategoria imovelSubcategoria " + "	inner join imovelSubcategoria.comp_id.imovel imovel "
							+ "	left  join imovelSubcategoria.comp_id.subcategoria subcategoria "
							+ "	left  join subcategoria.categoria categoria " + " 	inner join imovel.localidade localidade "
							+ " 	inner join localidade.gerenciaRegional gerenciaRegional "
							+ "	inner join imovel.setorComercial setorComercial "
							+ "	left  join imovel.ligacaoAguaSituacao ligacaoAguaSituacao "
							+ " 	left  join imovel.ligacaoAgua ligacaoAgua "
							+ " 	left  join imovel.ligacaoEsgotoSituacao ligacaoEsgotoSituacao "
							+ " 	left  join imovel.ligacaoEsgoto ligacaoEsgoto "
							+ "	left  join ligacaoAgua.hidrometroInstalacaoHistorico hidrometroInstalacaoHistorico "
							+ " 	left  join imovel.hidrometroInstalacaoHistorico hidrometroInstalacaoHistoricoImovel "
							+ " 	left  join imovel.imovelPerfil imovelPerfil " + "   Where ";

			// Aplica as Condicoes da consulta
			// **************************************

			// Classificacao
			if(classificacao.trim().equalsIgnoreCase("ESTADO")){
				orderBy = "";
			}else if(classificacao.trim().equalsIgnoreCase("REGIONAL")){
				orderBy = " Order By gerenciaRegional.id ";
			}else if(classificacao.trim().equalsIgnoreCase("LOCAL")){
				orderBy = " Order By localidade.id ";
			}else if(classificacao.trim().equalsIgnoreCase("SETORCOMERCIAL")){
				orderBy = " Order By setorComercial.id ";
			}

			// gerenciaRegional
			if((gerenciaRegional != null) && (gerenciaRegional.length > 0)){
				if(gerenciaRegional.length == 1
								&& !gerenciaRegional[0].trim().equalsIgnoreCase(
												Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "gerenciaRegional.id = " + gerenciaRegional[0] + " and ";
					finaliza = true;
				}else{
					for(int i = 0; i < gerenciaRegional.length; i++){
						if(!gerenciaRegional[i].trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

							hqlAux += gerenciaRegional[i].toString() + ",";
						}
					}

					if(!hqlAux.equals("")){
						hql += "gerenciaRegional.id in (" + hqlAux;
						hqlAux = "";

						// Retira a ultima virgula e finaliza a condicao
						hql = hql.substring(0, hql.length() - 1) + ") and ";
						finaliza = true;
					}
				}
			}

			// Localidade
			if((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
							&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))){

				hql += "localidade.id >= " + idLocalidadeInicial + " and " + "localidade.id <= " + idLocalidadeFinal + " and ";
				finaliza = true;
			}

			// Setor Comercial Inicial e Final
			if((idSetorComercialInicial != null && !idSetorComercialInicial.equals(""))
							&& (idSetorComercialFinal != null && !idSetorComercialFinal.equals(""))){

				hql += "setorComercial.id >= " + idSetorComercialInicial + " and " + "setorComercial.id <= " + idSetorComercialFinal
								+ " and ";
				finaliza = true;
			}

			// Imoveis com Medicao Individualizada
			if(indicadorImovelMedicaoIndividualizada.equals("1")){
				hql += "imovel.imovelCondominio is not null and ";
				finaliza = true;
			}

			// Imoveis com Paralizacao de Faturamento/Cobranca
			if(indicadorImovelParalizacaoFaturamentoCobranca.equals("1")){
				hql += "( (imovel.faturamentoSituacaoTipo.id in (1, 4, 5)) or ";
				hql += "(imovel.cobrancaSituacao.id in (5, 7, 8, 9)) ) and ";
				finaliza = true;
			}

			// Situacao da Ligacao de Agua
			if((situacaoLigacaoAgua != null) && (situacaoLigacaoAgua.length > 0)){
				if(situacaoLigacaoAgua.length == 1
								&& !situacaoLigacaoAgua[0].trim().equalsIgnoreCase(
												Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "ligacaoAguaSituacao.id = " + situacaoLigacaoAgua[0] + " and ";
					finaliza = true;
				}else{
					for(int i = 0; i < situacaoLigacaoAgua.length; i++){
						if(!situacaoLigacaoAgua[i].trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

							hqlAux += situacaoLigacaoAgua[i].toString() + ",";
						}
					}

					if(!hqlAux.equals("")){
						hql += "ligacaoAguaSituacao.id in (" + hqlAux;
						hqlAux = "";

						// Retira a ultima virgula e finaliza a condicao
						hql = hql.substring(0, hql.length() - 1) + ") and ";
						finaliza = true;
					}
				}
			}

			// Situacao da Ligacao de Esgoto
			if((situacaoLigacaoEsgoto != null) && (situacaoLigacaoEsgoto.length > 0)){
				if(situacaoLigacaoEsgoto.length == 1
								&& !situacaoLigacaoEsgoto[0].trim().equalsIgnoreCase(
												Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

					hql += "ligacaoEsgotoSituacao.id = " + situacaoLigacaoEsgoto[0] + " and ";
					finaliza = true;
				}else{
					for(int i = 0; i < situacaoLigacaoEsgoto.length; i++){
						if(!situacaoLigacaoEsgoto[i].trim().equalsIgnoreCase(
										Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

							hqlAux += situacaoLigacaoEsgoto[i].toString() + ",";
						}
					}

					if(!hqlAux.equals("")){
						hql += "ligacaoEsgotoSituacao.id in (" + hqlAux;
						hqlAux = "";

						// Retira a ultima virgula e finaliza a condicao
						hql = hql.substring(0, hql.length() - 1) + ") and ";
						finaliza = true;
					}
				}
			}

			// Intervalo de Consumo Minimo Fixado de Esgoto
			if((intervaloConsumoMinimoFixadoEsgotoInicial != null) && (!intervaloConsumoMinimoFixadoEsgotoInicial.equals(""))
							&& (intervaloConsumoMinimoFixadoEsgotoFinal != null) && (!intervaloConsumoMinimoFixadoEsgotoFinal.equals(""))){

				hql += "ligacaoEsgoto.consumoMinimo >= " + intervaloConsumoMinimoFixadoEsgotoInicial + " and ";
				hql += "ligacaoEsgoto.consumoMinimo <= " + intervaloConsumoMinimoFixadoEsgotoFinal + " and ";
				finaliza = true;
			}

			// indicador Medicao
			if(indicadorMedicao != null && indicadorMedicao.equals("comMedicao")){
				// tipo medicao
				// [SF0001 - Selecionar os Imoveis por Tipo de Medicao]
				if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.LIGACAO_AGUA.toString())){
					hql += "hidrometroInstalacaoHistorico.id is not null and ";
					finaliza = true;
				}else if(idTipoMedicao != null && idTipoMedicao.equals(MedicaoTipo.POCO.toString())){
					hql += "hidrometroInstalacaoHistoricoImovel.id is not null and ";
					finaliza = true;
				}else{
					hql += "(hidrometroInstalacaoHistorico.id is not null or ";
					hql += "hidrometroInstalacaoHistoricoImovel.id is not null) and ";
					finaliza = true;
				}
			}else if(indicadorMedicao != null && indicadorMedicao.equals("semMedicao")){
				hql += "(hidrometroInstalacaoHistorico.id is null and ";
				hql += "hidrometroInstalacaoHistoricoImovel.id is null) and ";
				finaliza = true;
			}

			// imovel Perfil
			if(idPerfilImovel != null && !idPerfilImovel.equals("")
							&& !idPerfilImovel.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				hql += "imovelPerfil.id = " + idPerfilImovel + " and ";
				finaliza = true;
			}

			// categoria
			if(categoria == null){
				if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PARTICULAR){
					hql += "( (categoria.id = " + Categoria.RESIDENCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.COMERCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.INDUSTRIAL_INT + ") ) and ";
					finaliza = true;
				}else if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PUBLICO){
					hql += "categoria.id = " + Categoria.PUBLICO_INT + " and ";
					finaliza = true;
				}
			}else if((categoria.length == 1)
							&& (categoria[0].trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString()))){

				if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PARTICULAR){
					hql += "( (categoria.id = " + Categoria.RESIDENCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.COMERCIAL_INT + ") or ";
					hql += "  (categoria.id = " + Categoria.INDUSTRIAL_INT + ") ) and ";
					finaliza = true;
				}else if(Util.converterStringParaInteger(idTipoCategoria) == CategoriaTipo.PUBLICO){
					hql += "categoria.id = " + Categoria.PUBLICO_INT + " and ";
					finaliza = true;
				}
			}else{
				for(int i = 0; i < categoria.length; i++){
					if(!categoria[i].trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

						hqlAux += categoria[i].toString() + ",";
					}
				}

				if(!hqlAux.equals("")){
					hql += "categoria.id in (" + hqlAux;
					hqlAux = "";

					// Retira a ultima virgula e finaliza a condicao
					hql = hql.substring(0, hql.length() - 1) + ") and ";
					finaliza = true;
				}
			}

			// SubCategoria
			if(idSubCategoria != null && !idSubCategoria.equals("")
							&& !idSubCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){
				hql += "subcategoria.id = " + idSubCategoria + " and ";
				finaliza = true;
			}else if(idTipoCategoria != null && !idTipoCategoria.equals("")
							&& !idTipoCategoria.trim().equalsIgnoreCase(Integer.valueOf(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())){

				hql += "subcategoria.categoria.id = categoria.id and ";
				hql += "subcategoria.id = imovelSubcategoria.comp_id.subcategoria.id and ";
				finaliza = true;
			}

			// Finaliza a condicao
			if(finaliza){
				hql = hql.substring(0, hql.length() - 5) + orderBy;
			}else{
				hql = hql.substring(0, hql.length() - 9) + orderBy;
			}

			Query query = sessao.createQuery(hql);

			retorno = ((Number) query.uniqueResult()).intValue();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(sessao);
		}

		return retorno;
	}

	/**
	 * Consulta as quitAcoes de Debitos anuais pelo anoBase
	 * 
	 * @author Josenildo Neves
	 * @date 07/05/2012
	 */
	public Collection<QuitacaoDebitoAnual> consultarQuitacaoDebitoAnual(String anoBase) throws ErroRepositorioException{

		Collection<QuitacaoDebitoAnual> colecaoQuitacaoDebitoAnual = null;
		List<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();

		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT ");
			consulta.append("   i.IMOV_ID as idImovel, ");
			consulta.append("   i.LOCA_ID as idLocalidade, ");
			consulta.append("   sc.STCM_CDSETORCOMERCIAL as cdSetorComercial, ");
			consulta.append("   r.ROTA_CDROTA as cdRota, ");
			consulta.append("   i.IMOV_NNSEGMENTO as numeroSegmento, ");
			consulta.append("   i.IMOV_NNLOTE as numeroLote, ");
			consulta.append("   i.IMOV_NNSUBLOTE as numeroSublote, ");
			consulta.append("   c.CLIE_ID as idCliente, ");
			consulta.append("   c.CLIE_NMCLIENTE as nomeCliente ");
			consulta.append("FROM QUITACAO_DEBITO_ANUAL qta ");
			consulta.append("INNER JOIN IMOVEL i ON qta.IMOV_ID = i.IMOV_ID ");
			consulta.append("INNER JOIN ROTA r ON i.ROTA_ID = r.ROTA_ID ");
			consulta.append("INNER JOIN SETOR_COMERCIAL sc ON i.STCM_ID = sc.STCM_ID ");
			consulta.append("INNER JOIN CLIENTE c ON qta.CLIE_IDUSUARIO = c.CLIE_ID ");
			consulta.append("WHERE ");
			consulta.append("   qta.QADB_AAREFERENCIA = :anoBase ");
			consulta.append("order by ");
			consulta.append("   i.IMOV_ID ");

			retorno = session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("idLocalidade", Hibernate.INTEGER).addScalar("cdSetorComercial", Hibernate.INTEGER)
							.addScalar("cdRota", Hibernate.SHORT).addScalar("numeroSegmento", Hibernate.SHORT)
							.addScalar("numeroLote", Hibernate.SHORT).addScalar("numeroSublote", Hibernate.SHORT)
							.addScalar("idCliente", Hibernate.INTEGER).addScalar("nomeCliente", Hibernate.STRING)
							.setInteger("anoBase", Integer.valueOf(anoBase)).list();

			if((retorno != null) && (!retorno.isEmpty())){

				colecaoQuitacaoDebitoAnual = new ArrayList<QuitacaoDebitoAnual>();

				for(Object[] i : retorno){

					QuitacaoDebitoAnual quitacaoDebitoAnual = new QuitacaoDebitoAnual();
					Imovel imovel = new Imovel();
					imovel.setId((Integer) i[0]);
					imovel.setLocalidade(new Localidade());
					imovel.getLocalidade().setId((Integer) i[1]);
					imovel.setSetorComercial(new SetorComercial());
					imovel.getSetorComercial().setCodigo((Integer) i[2]);
					imovel.setRota(new Rota());
					imovel.getRota().setCodigo((Short) i[3]);
					imovel.setNumeroSegmento((Short) i[4]);
					imovel.setLote((Short) i[5]);
					imovel.setSubLote((Short) i[6]);
					quitacaoDebitoAnual.setImovel(imovel);
					quitacaoDebitoAnual.setClienteUsuario(new Cliente());
					quitacaoDebitoAnual.getClienteUsuario().setId((Integer) i[7]);
					quitacaoDebitoAnual.getClienteUsuario().setNome((String) i[8]);

					colecaoQuitacaoDebitoAnual.add(quitacaoDebitoAnual);
				}
			}

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return colecaoQuitacaoDebitoAnual;
	}

	// /**
	// * Guias de pagamento de parcelamento de cobranca bancaria com boleto gerado e valido
	// *
	// * @author Hebert Falcao
	// * @date 07/05/2012
	// */
	// public boolean
	// verificarGuiaPagamentoParcelamentoCobrancaBancariaComBoletoGeradoValido(Integer
	// idGuiaPagamento, Short numeroPrestacoes)
	// throws ErroRepositorioException{
	//
	// boolean retorno = false;
	//
	// Session session = HibernateUtil.getSession();
	// StringBuffer hql = new StringBuffer();
	//
	// try{
	// // hql.append(" select bbco.id ");
	// // hql.append(" from BoletoBancario bbco ");
	// // hql.append(" where bbco.guiaPagamento.id = :idGuiaPagamento ");
	// // hql.append("   and bbco.numeroPrestacoes = :numeroPrestacoes ");
	// // hql.append("   and ((bbco.boletoBancarioSituacao.id = :idSituacaoEmCarteira or ");
	// // hql.append("         bbco.boletoBancarioSituacao.id = :idSituacaoEmCartorio) ");
	// // hql.append("        or (    bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
	// // hql.append("            and exists (select bboc.id ");
	// // hql.append("                        from BoletoBancarioOcorrencias bboc ");
	// //
	// hql.append("                        where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
	// //
	// hql.append("                          and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
	// //
	// hql.append("                                                                     from BoletoBancarioMovimentacao bbmv ");
	// //
	// hql.append("                                                                     where bbmv.boletoBancario.id = bbco.id) ");
	// // hql.append("                       ) ");
	// // hql.append("           ) ");
	// // hql.append("       ) ");
	//
	// hql.append(" select bbco.id ");
	// hql.append(" from BoletoBancario bbco ");
	// hql.append(" where bbco.guiaPagamento.id = :idGuiaPagamento ");
	// hql.append("   and bbco.numeroPrestacoes = :numeroPrestacoes ");
	// hql.append("   and ((bbco.boletoBancarioSituacao.id <> :idSituacaoCancelado or ");
	// hql.append("         bbco.boletoBancarioSituacao.id <> :idSituacaoRejeitado) ");
	// hql.append("        or (    bbco.boletoBancarioSituacao.id <> :idSituacaoBaixa ");
	// hql.append("            and not exists (select bboc.id ");
	// hql.append("                        from BoletoBancarioOcorrencias bboc ");
	// hql.append("                        where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
	// hql.append("                          and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
	// hql.append("                                                                     from BoletoBancarioMovimentacao bbmv ");
	// hql.append("                                                                     where bbmv.boletoBancario.id = bbco.id) ");
	// hql.append("                       		) ");
	// hql.append("           ) ");
	// hql.append("       ) ");
	//
	// Query query = session.createQuery(hql.toString());
	//
	// query.setInteger("idGuiaPagamento", idGuiaPagamento);
	// query.setShort("numeroPrestacoes", numeroPrestacoes);
	// query.setInteger("idSituacaoCancelado", BoletoBancarioSituacao.CANCELADO);
	// query.setInteger("idSituacaoRejeitado", BoletoBancarioSituacao.REJEITADO);
	// query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
	// query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);
	//
	// Integer retornoHQL = (Integer) query.setMaxResults(1).uniqueResult();
	//
	// if(retornoHQL != null){
	// retorno = true;
	// }
	//
	// }catch(HibernateException e){
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// }finally{
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	// /**
	// * Guias de pagamento de parcelamento de cobranca bancaria pendentes de gerAcao do boleto
	// *
	// * @author Hebert Falcao
	// * @date 07/05/2012
	// */
	// public boolean
	// verificarGuiaPagamentoParcelamentoCobrancaBancariaPendentesGeracaoBoleto(Integer
	// idGuiaPagamento, Short numeroPrestacoes)
	// throws ErroRepositorioException{
	//
	// boolean retorno = false;
	//
	// Session session = HibernateUtil.getSession();
	// StringBuffer hql = new StringBuffer();
	//
	// try{
	// hql.append(" select bbco.id ");
	// hql.append(" from BoletoBancario bbco ");
	// hql.append(" where bbco.documentoCobranca.id is not null ");
	// hql.append("   and bbco.parcelamento.id is not null ");
	// hql.append("   and bbco.parcelamento.id = (select gpag.parcelamento.id ");
	// hql.append("                               from GuiaPagamento gpag ");
	// hql.append("                               where gpag.id = (select distinct gppr.comp_id.guiaPagamentoId ");
	// hql.append("                                                from GuiaPagamentoPrestacao gppr ");
	// hql.append("                                                where gppr.comp_id.guiaPagamentoId = :idGuiaPagamento ");
	// hql.append("                                                  and gppr.comp_id.numeroPrestacao = :numeroPrestacoes)) ");
	// hql.append("   and bbco.idOriginal is null ");
	// hql.append("   and not exists (select 1 ");
	// hql.append("                   from BoletoBancario bbco2 ");
	// hql.append("                   where bbco2.idOriginal = bbco.id ");
	// hql.append("                     and ( bbco2.boletoBancarioSituacao.id not in (:situacaoCancelado, :situacaoRejeitado ) ");
	// hql.append("                     OR  ( bbco2.boletoBancarioSituacao.id not in (:situacaoBaixa) and    ");
	// hql.append("            							 not exists (select bboc.id ");
	// hql.append("                       							 from BoletoBancarioOcorrencias bboc ");
	// hql.append("                      								  where bboc.boletoBancarioMotivoOcorrencia.id = :motivoOcorrenciaProtestado ");
	// hql.append("                       								   and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
	// hql.append("                                                                     from BoletoBancarioMovimentacao bbmv ");
	// hql.append("                                                                     where bbmv.boletoBancario.id = bbco.id) ");
	// hql.append("                     									) ");
	// hql.append("                           ) ");
	// hql.append("                        ) ");
	// hql.append("                    ) ");
	//
	// Query query = session.createQuery(hql.toString());
	//
	// query.setInteger("idGuiaPagamento", idGuiaPagamento);
	// query.setShort("numeroPrestacoes", numeroPrestacoes);
	//
	// query.setInteger("situacaoCancelado", BoletoBancarioSituacao.CANCELADO);
	// query.setInteger("situacaoRejeitado", BoletoBancarioSituacao.REJEITADO);
	// query.setInteger("situacaoBaixa", BoletoBancarioSituacao.BAIXA);
	// query.setInteger("motivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);
	//
	// Integer retornoHQL = (Integer) query.setMaxResults(1).uniqueResult();
	//
	// if(retornoHQL != null){
	// retorno = true;
	// }
	//
	// }catch(HibernateException e){
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// }finally{
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	/**
	 * Verifica se o Debito do Imovel a valido para a Agencia virtual
	 * 
	 * @author Josenildo Neves
	 * @date 237/05/2012
	 */
	// public boolean verificarDebitoImovelValidoAgenciaVirtual(Integer idConta) throws
	// ErroRepositorioException{
	//
	// boolean retorno = false;
	//
	// Session session = HibernateUtil.getSession();
	// StringBuilder consulta = new StringBuilder();
	//
	// try{
	//
	// consulta.append("SELECT ");
	// consulta.append("	c.CNTA_ID as contaId ");
	// consulta.append("FROM CONTA c ");
	// consulta.append("WHERE ");
	// consulta.append("	C.CNTA_ID = :idConta AND ");
	// consulta.append("	c.CMRV_ID IN (:retidaParaAnalise, :revisaoSubjudice, :revisaoCobrancaBancaria) ");
	//
	// Query query = session.createSQLQuery(consulta.toString()).addScalar("contaId",
	// Hibernate.INTEGER);
	//
	// query.setInteger("idConta", idConta);
	// query.setInteger("retidaParaAnalise", ContaMotivoRevisao.RETIDA_PARA_ANALISE);
	// query.setInteger("revisaoSubjudice", ContaMotivoRevisao.REVISAO_SUBJUDICE);
	// query.setInteger("revisaoCobrancaBancaria",
	// ContaMotivoRevisao.REVISAO_POR_COBRANCA_BANCARIA);
	//
	// Integer retornoConsulta = (Integer) query.setMaxResults(1).uniqueResult();
	//
	// if(retornoConsulta == null){
	//
	// retorno = true;
	//
	// }
	//
	// if(retorno){
	//
	// consulta = new StringBuilder();
	// consulta.append("SELECT ");
	// consulta.append("	c.CNTA_ID as contaId ");
	// consulta.append("FROM CONTA c ");
	// consulta.append("LEFT JOIN CONTA_CATEGORIA ccat ON c.CNTA_ID = ccat.CNTA_ID ");
	// consulta.append("WHERE ");
	// consulta.append("	C.CNTA_ID = :idConta AND ");
	// consulta.append("	ccat.CATG_ID = :categoria");
	//
	// query = session.createSQLQuery(consulta.toString()).addScalar("contaId", Hibernate.INTEGER);
	//
	// query.setInteger("idConta", idConta);
	// query.setInteger("categoria", Categoria.PUBLICO);
	//
	// retornoConsulta = (Integer) query.setMaxResults(1).uniqueResult();
	//
	// if(retornoConsulta == null){
	// retorno = true;
	// }else{
	// retorno = false;
	// }
	// }
	//
	// if(retorno){
	//
	// consulta = new StringBuilder();
	// consulta.append("SELECT ");
	// consulta.append("	c.CNTA_ID as contaId ");
	// consulta.append("FROM CONTA c ");
	// consulta.append("LEFT JOIN CLIENTE_CONTA cc ON cc.CNTA_ID = c.CNTA_ID ");
	// consulta.append("LEFT JOIN CLIENTE clie ON cc.CLIE_ID = clie.CLIE_ID ");
	// consulta.append("LEFT JOIN CLIENTE_TIPO cltp ON clie.CLTP_ID = cltp.CLTP_ID ");
	// consulta.append("WHERE ");
	// consulta.append("	C.CNTA_ID = :idConta AND ");
	// consulta.append("	(cc.CRTP_ID = :clienteRelacaoTipo AND cltp.EPOD_ID IN (:municipal,:estadual,:federal)) ");
	//
	// query = session.createSQLQuery(consulta.toString()).addScalar("contaId", Hibernate.INTEGER);
	//
	// query.setInteger("idConta", idConta);
	// query.setInteger("clienteRelacaoTipo", ClienteRelacaoTipo.RESPONSAVEL);
	// query.setInteger("municipal", EsferaPoder.MUNICIPAL);
	// query.setInteger("estadual", EsferaPoder.ESTADUAL);
	// query.setInteger("federal", EsferaPoder.FEDERAL);
	//
	// retornoConsulta = (Integer) query.setMaxResults(1).uniqueResult();
	//
	// if(retornoConsulta == null){
	//
	// retorno = true;
	//
	// }else{
	// retorno = false;
	// }
	// }
	//
	// }catch(HibernateException e){
	// throw new ErroRepositorioException(e, "Erro no Hibernate");
	// }finally{
	// HibernateUtil.closeSession(session);
	// }
	//
	// return retorno;
	// }

	public boolean verificarDebitoImovelValidoAgenciaVirtual(Integer idConta) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("SELECT ");
			consulta.append("c.CNTA_ID as contaId ");
			consulta.append("FROM CONTA c ");
			consulta.append("LEFT JOIN CONTA_CATEGORIA ccat ON c.CNTA_ID = ccat.CNTA_ID ");
			consulta.append("WHERE ");
			consulta.append("c.CNTA_ID = :idConta and ");
			consulta.append("   ( c.CMRV_ID is NULL or    (c.CMRV_ID <> :retidaParaAnalise and c.CMRV_ID <> :revisaoSubjudice and c.CMRV_ID <> :revisaoCobrancaBancaria)) and ");
			consulta.append(" (ccat.CATG_ID <> :categoria ) and ");

			consulta.append(" not exists ");
			consulta.append(" (select cc.cnta_id ");
			consulta.append("	from CLIENTE_CONTA cc ");
			consulta.append(" LEFT JOIN CLIENTE clie ON cc.CLIE_ID = clie.CLIE_ID ");
			consulta.append(" LEFT JOIN CLIENTE_TIPO cltp ON clie.CLTP_ID = cltp.CLTP_ID ");
			consulta.append(" 	where cc.CRTP_ID = :clienteRelacaoTipo and (cltp.EPOD_ID = :municipal or cltp.EPOD_ID= :estadual or cltp.EPOD_ID= :federal) and cc.cnta_id = :idConta ) ");
			consulta.append("group by c.CNTA_ID ");

			Query query = session.createSQLQuery(consulta.toString()).addScalar("contaId", Hibernate.INTEGER);

			query.setInteger("idConta", idConta);
			query.setInteger("retidaParaAnalise", ContaMotivoRevisao.RETIDA_PARA_ANALISE);
			query.setInteger("revisaoSubjudice", ContaMotivoRevisao.REVISAO_SUBJUDICE);
			query.setInteger("revisaoCobrancaBancaria", ContaMotivoRevisao.REVISAO_POR_COBRANCA_BANCARIA);
			query.setInteger("categoria", Categoria.PUBLICO);
			query.setInteger("clienteRelacaoTipo", ClienteRelacaoTipo.RESPONSAVEL);
			query.setInteger("municipal", EsferaPoder.MUNICIPAL);
			query.setInteger("estadual", EsferaPoder.ESTADUAL);
			query.setInteger("federal", EsferaPoder.FEDERAL);

			Integer retornoConsulta = (Integer) query.setMaxResults(1).uniqueResult();

			if(retornoConsulta != null){

				retorno = true;

			}else{
				retorno = false;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Obtem Colecao de setor comercial por Documento de cobranca
	 * 
	 * @autor Josenildo Neves
	 * @param Integer
	 *            idCobrancaDocumento
	 * @return Colecao de setor comercial por Documento de cobranca
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 * @date 06/06/2012
	 */

	public Object[] pesquisarSetorComercialPorCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();
		// Map<Integer, String> map = new HashMap<Integer, String>();

		try{

			consulta.append("select ");
			consulta.append("	cd.CBDO_CDSETORCOMERCIAL as codigoSetorComercial, ");
			consulta.append("	sc.STCM_NMSETORCOMERCIAL as nomeSetorComercial ");
			consulta.append(" FROM COBRANCA_DOCUMENTO cd ");
			consulta.append(" LEFT JOIN setor_comercial sc on cd.LOCA_ID = sc.LOCA_ID ");
			consulta.append(" where ");
			consulta.append("	cd.CBDO_CDSETORCOMERCIAL = sc.STCM_CDSETORCOMERCIAL AND ");
			consulta.append("	cd.CBDO_ID = :idCobrancaDocumento");

			retorno = (Object[]) session.createSQLQuery(consulta.toString()).addScalar("codigoSetorComercial", Hibernate.INTEGER)
							.addScalar("nomeSetorComercial", Hibernate.STRING).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.setMaxResults(1).uniqueResult();

			// if(retorno != null){
			//
			// map.put((Integer) retorno[0], String.valueOf(retorno[1]));
			//
			// }

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	/**
	 * Obtem total de descricoes em Acao de cobranca a partir de um setor
	 * 
	 * @autor Josa Claudio
	 * @param Integer
	 *            cdSetorComercial
	 * @return Total de descricoes em Acao de cobranca a partir de um setor
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 * @date 06/06/2012
	 */

	public Integer pesquisarTotalDescricoesCobrancaAcaoPorSetor(Integer cdSetorComercial) throws ErroRepositorioException{

		Query query = null;

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select ");
			consulta.append("	count(ca.CBAC_DSCOBRANCAACAO) as totalDescricoesCobrancaAcao ");
			consulta.append(" FROM COBRANCA_ACAO ca ");
			consulta.append(" where ");
			consulta.append("	ca.CBAC_ID in ");
			consulta.append("	(select  ");
			consulta.append(" 		distinct cd.CBAC_ID ");
			consulta.append(" 		from COBRANCA_DOCUMENTO cd ");
			consulta.append("		where ");
			consulta.append(" 		cd.CBDO_CDSETORCOMERCIAL = :cdSetorComercial and cd.CBAC_ID is not null)");

			query = session.createSQLQuery(consulta.toString()).addScalar("totalDescricoesCobrancaAcao", Hibernate.INTEGER)
							.setInteger("cdSetorComercial", cdSetorComercial);

			retorno = (Integer) query.uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	/**
	 * Obtem total de descricoes em Acao de cobranca a partir de uma localidade
	 * 
	 * @autor Josa Claudio
	 * @param Integer
	 *            idLocalidade
	 * @return Total de descricoes em Acao de cobranca a partir de uma localidade
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 * @date 06/06/2012
	 */

	public Integer pesquisarTotalDescricoesCobrancaAcaoPorLocalidade(Integer idLocalidade) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select ");
			consulta.append("	count(ca.CBAC_DSCOBRANCAACAO) as totalDescricoesCobrancaAcao ");
			consulta.append(" FROM COBRANCA_ACAO ca ");
			consulta.append(" where ");
			consulta.append("	ca.CBAC_ID in ");
			consulta.append("	(select  ");
			consulta.append(" 		distinct cd.CBAC_ID ");
			consulta.append(" 		from COBRANCA_DOCUMENTO cd ");
			consulta.append(" 		where ");
			consulta.append(" 		cd.CBDO_CDSETORCOMERCIAL = :idLocalidade and cd.LOCA_ID is not null)");

			retorno = (Integer) session.createSQLQuery(consulta.toString()).addScalar("totalDescricoesCobrancaAcao", Hibernate.INTEGER)
							.setInteger("idLocalidade", idLocalidade).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	/**
	 * Obtem total de ocorrencias em documento de cobranca a partir de um setor comercial
	 * 
	 * @autor Josa Claudio
	 * @param Integer
	 *            cdSetorComercial
	 * @return Total de ocorrencias em documento de cobranca a partir de um setor comercial
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 * @date 06/06/2012
	 */

	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorSetor(Integer cdSetorComercial, Integer localidadeId,
					Integer faturamentoGrupoMensalId, Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao)
					throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select ");
			consulta.append("	count(cd.CBDO_ID) as totalOcorrenciasCobDoc ");
			consulta.append(" FROM COBRANCA_DOCUMENTO cd ");
			consulta.append(" where ");
			consulta.append("	cd.CBAC_ID = :cobrancaAcaoId ");
			consulta.append("	and cd.CAST_ID = :cobrancaAcaoSituacaoId ");
			consulta.append("	and cd.CBDO_CDSETORCOMERCIAL = :cdSetorComercial ");
			consulta.append("	and cd.LOCA_ID = :localidadeId ");

			if(faturamentoGrupoMensalId != null){
				consulta.append("	and cd.FTCM_ID = :faturamentoGrupoMensalId ");
			}

			if(cobrancaAcaoAtividadeComandoId != null){
				consulta.append("	and cd.CACM_ID = :cobrancaAcaoAtividadeComandoId ");
			}

			Query query = session.createSQLQuery(consulta.toString()).addScalar("totalOcorrenciasCobDoc", Hibernate.INTEGER)
							.setInteger("cobrancaAcaoId", idCobrancaAcao)
							.setInteger("cobrancaAcaoSituacaoId", CobrancaAcaoSituacao.PENDENTE)
							.setInteger("cdSetorComercial", cdSetorComercial).setInteger("localidadeId", localidadeId);

			if(faturamentoGrupoMensalId != null){
				query.setInteger("faturamentoGrupoMensalId", faturamentoGrupoMensalId);
			}

			if(cobrancaAcaoAtividadeComandoId != null){
				query.setInteger("cobrancaAcaoAtividadeComandoId", cobrancaAcaoAtividadeComandoId);
			}

			retorno = (Integer) query.uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	/**
	 * Obtem total de ocorrencias em documento de cobranca a partir de uma localidade
	 * 
	 * @autor Josa Claudio
	 * @param Integer
	 *            idLocalidade
	 * @return Total de ocorrencias em documento de cobranca a partir de uma localidade
	 * @exception ErroRepositorioException
	 *                Descricao da execucao
	 * @date 06/06/2012
	 */

	public Integer pesquisarTotalOcorrenciasCobrancaAcaoPorLocalidade(Integer idLocalidade, Integer faturamentoGrupoMensalId,
					Integer cobrancaAcaoAtividadeComandoId, Integer idCobrancaAcao) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select ");
			consulta.append("	count(cd.CBDO_ID) as totalOcorrenciasCobDoc ");
			consulta.append(" FROM COBRANCA_DOCUMENTO cd ");
			consulta.append(" where ");
			consulta.append("	cd.CBAC_ID = :cobrancaAcaoId ");
			consulta.append("	and cd.CAST_ID = :cobrancaAcaoSituacaoId ");
			consulta.append("	and cd.LOCA_ID = :idLocalidade ");

			if(faturamentoGrupoMensalId != null){
				consulta.append("	and cd.FTCM_ID = :faturamentoGrupoMensalId ");
			}

			if(cobrancaAcaoAtividadeComandoId != null){
				consulta.append("	and cd.CACM_ID = :cobrancaAcaoAtividadeComandoId ");
			}

			Query query = session.createSQLQuery(consulta.toString()).addScalar("totalOcorrenciasCobDoc", Hibernate.INTEGER)
							.setInteger("cobrancaAcaoId", idCobrancaAcao)
							.setInteger("cobrancaAcaoSituacaoId", CobrancaAcaoSituacao.PENDENTE).setInteger("idLocalidade", idLocalidade);

			if(faturamentoGrupoMensalId != null){
				query.setInteger("faturamentoGrupoMensalId", faturamentoGrupoMensalId);
			}

			if(cobrancaAcaoAtividadeComandoId != null){
				query.setInteger("cobrancaAcaoAtividadeComandoId", cobrancaAcaoAtividadeComandoId);
			}

			retorno = (Integer) query.uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	public Integer pesquisarDocumentoCobrancaNoPeriodoDeValidade(Integer idImovel, Integer idDocumentoTipo, Integer numDiasValidade)
					throws ErroRepositorioException{

		Integer retorno = null;
		// Query
		StringBuffer consulta = new StringBuffer();
		// obtem a sessao
		Session session = HibernateUtil.getSession();

		try{

			consulta.append("select cbdo.cbdo_id as idCobrancaDocumento  ");
			consulta.append("from cobranca_documento cbdo ");
			consulta.append("left join documento_nao_entregue done on done.cbdo_id = cbdo.cbdo_id ");
			consulta.append("where cbdo.imov_id = :idImovel and cbdo.dotp_id = :idDocumentoTipo ");
			consulta.append("  and (done.dotp_id is null or done.dotp_id <> cbdo.dotp_id) ");
			consulta.append("  and (cbdo.cbdo_tmemissao + :numDiasValidade)  >= :dataCorrente ");
			consulta.append("  and (cbdo.cast_id is null or (    cbdo.cast_id <> " + CobrancaAcaoSituacao.CANCELADA_PRAZO);
			consulta.append("                                and cbdo.cast_id <> " + CobrancaAcaoSituacao.NAO_ENTREGUE);
			consulta.append("                                and cbdo.cast_id <> " + CobrancaAcaoSituacao.CANCELADA + ")) ");

			retorno = (Integer) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumento", Hibernate.INTEGER)
							.setInteger("idImovel", idImovel).setInteger("idDocumentoTipo", idDocumentoTipo)
							.setInteger("numDiasValidade", numDiasValidade).setTimestamp("dataCorrente", new Date()).setMaxResults(1)
							.uniqueResult();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;

	}

	/**
	 * [UC0476] Emitir Documento de cobranca - Ordem Corte Modelo 3 e Ordem Corte Modelo 5
	 * metodo que obtem a data de apresentacao do corte emitido previamente ao mesmo
	 * 
	 * @author Hugo Lima
	 * @data 11/06/2012
	 * @refactor Andra Lopes
	 * @data 21/05/2013
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Date obterDataApresentacaoAvisoCorte(Integer idImovel) throws ErroRepositorioException{

		return obterDatasApresentacaoAvisoEOrdemCorte(idImovel, "cbdo_dtsituacaoacao");
	}

	/**
	 * [UC0476] Emitir Documento de cobranca - Ordem Corte Modelo 5
	 * metodo que obtem a informAcao da Notificacao 1 Emitida em: cbdo_tmemissao
	 * 
	 * @author Andra Lopes
	 * @data 11/06/2012
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Date obterDataEmissaoApresentacaoOrdemCorte(Integer idImovel) throws ErroRepositorioException{

		return obterDatasApresentacaoAvisoEOrdemCorte(idImovel, "cbdo_tmemissao");
	}

	private Date obterDatasApresentacaoAvisoEOrdemCorte(Integer idImovel, String campoRetornoConsultaCobranca)
					throws ErroRepositorioException{

		Date retorno = null;

		StringBuffer consulta = new StringBuffer();
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" SELECT ");
			consulta.append(" cbd." + campoRetornoConsultaCobranca + " as dataSituacaoAcao ");
			consulta.append(" FROM cobranca_documento cbd ");
			consulta.append(" INNER JOIN cobranca_acao cbac ");
			consulta.append("  ON (cbd.cbac_id = cbac.cbac_id ");
			consulta.append("   AND cbac.cbac_id =").append(CobrancaAcao.AVISO_CORTE).append(") ");
			consulta.append(" INNER JOIN cobranca_acao_situacao cbas ");
			consulta.append("  ON (cbd.cast_id = cbas.cast_id");
			consulta.append("   AND cbas.cast_id = ").append(CobrancaAcaoSituacao.ENTREGUE).append(") ");
			consulta.append(" WHERE cbd.imov_id = :idImovel ");
			consulta.append(" AND to_date(to_char(cbd.cbdo_tmemissao,'dd/mm/yyyy'), 'dd/mm/yyyy') < to_date(to_char(CURRENT_TIMESTAMP - ");
			consulta.append("  (SELECT cbac2.cbac_nndiasminimoacaoprecedent ");
			consulta.append("  FROM cobranca_acao cbac2");
			consulta.append("  WHERE cbac2.cbac_id = ").append(CobrancaAcao.CORTE_FISICO);
			consulta.append("  )  , 'dd/mm/yyyy'),'dd/mm/yyyy') ");
			consulta.append(" AND to_date(to_char(cbd.cbdo_tmemissao,'dd/mm/yyyy'),'dd/mm/yyyy') >= to_date(to_char(CURRENT_TIMESTAMP - ");
			consulta.append("  (SELECT cbac3.cbac_nndiasvalidade ");
			consulta.append("  FROM cobranca_acao cbac3 ");
			consulta.append("  WHERE cbac3.cbac_id = ").append(CobrancaAcao.AVISO_CORTE);
			consulta.append("  )  , 'dd/mm/yyyy'),'dd/mm/yyyy')");

			retorno = (Date) session.createSQLQuery(consulta.toString()).addScalar("dataSituacaoAcao", Hibernate.DATE)
							.setInteger("idImovel", idImovel).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Obter o indicador de cobranca administrativa de conta
	 * 
	 * @author Hugo Lima
	 * @data 11/06/2012
	 * @param idConta
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Short obterIndicadorCobrancaAdministrativaConta(Integer idConta) throws ErroRepositorioException{

		Short retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cnta.indicadorCobrancaAdministrativa ");
			hql.append(" from Conta cnta ");
			hql.append(" where cnta.id = :idConta ");

			Query query = session.createQuery(hql.toString()).setInteger("idConta", idConta);

			retorno = (Short) query.setMaxResults(1).uniqueResult();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			hql = null;
		}

		return retorno;
	}

	/**
	 * [UC3062] Validar autorizacao Acesso Imovel - cobranca Administrativa
	 * Verifica se existem ocorrencias de uma empresa na tablela cobranca_contrato
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idEmpresa
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean existeEmpresaCobrancaContrato(Integer idEmpresa) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		boolean retorno = false;
		Collection<Integer> retornoConsulta = null;

		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cc.id");
			hql.append(" from CobrancaContrato cc ");
			hql.append(" where cc.empresa.id = :idEmpresa ");
			query = session.createQuery(hql.toString()).setInteger("idEmpresa", idEmpresa);

			retornoConsulta = query.list();

			if(!retornoConsulta.isEmpty()){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3062] Validar autorizacao Acesso Imovel - cobranca Administrativa
	 * Verifica se existem ocorrencias de um imovel em situacao de cobranca administrativa
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean existeProcessoCobrancaAdministrativa(Integer idImovel) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		boolean retorno = false;
		Collection<Integer> retornoConsulta = null;

		StringBuffer hql = new StringBuffer();

		try{

			if(CobrancaSituacao.COBRANCA_ADMINISTRATIVA != null){

				hql.append(" select ics.id");
				hql.append(" from ImovelCobrancaSituacao ics ");
				hql.append(" where ics.imovel.id = :idImovel ");
				hql.append(" and ics.dataRetiradaCobranca is null ");
				hql.append(" and ics.cobrancaSituacao.id = :idCobrancaSituacao ");

				query = session.createQuery(hql.toString()).setInteger("idImovel", idImovel)
								.setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA);

				retornoConsulta = query.list();

				if(!retornoConsulta.isEmpty()){
					retorno = true;
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3062] Validar autorizacao Acesso Imovel - cobranca Administrativa
	 * Verifica se existem ocorrencias de uma empresa em situacao de cobranca administrativa
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean existeEmpresaProcessoCobrancaAdministrativa(Integer idEmpresa, Integer idImovel) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		boolean retorno = false;
		Collection<Integer> retornoConsulta = null;

		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" select caac");
			hql.append(" from CobrancaAcaoAtividadeComando caac ");
			hql.append(" where caac.empresa.id = :idEmpresa ");
			hql.append(" and caac.id in ");
			hql.append(" ( ");

			hql.append(" select caac2.id");
			hql.append(" from ImovelCobrancaSituacao ics ");
			hql.append(" inner join ics.cobrancaAcaoAtividadeComando caac2 ");
			hql.append(" where ics.imovel.id = :idImovel ");
			hql.append(" and ics.dataRetiradaCobranca is null ");
			hql.append(" and ics.cobrancaSituacao.id = :idCobrancaSituacao ");

			hql.append(" ) ");

			query = session.createQuery(hql.toString()).setInteger("idEmpresa", idEmpresa).setInteger("idImovel", idImovel)
							.setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA);

			retornoConsulta = query.list();

			if(!retornoConsulta.isEmpty()){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos
	 * [SB0026] A Verificar Debito em cobranca Administrativa - Retirar Contas
	 * Retorna a lista de ids de contas em cobranca administrativa de um Imovel onde nao existe
	 * ocorrencia da empresa passada como parametro
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> obterIdsContasCobrancaAdministrativaEmpresaDiferente(Integer idEmpresa, Integer idImovel)
					throws ErroRepositorioException{

		Collection<Integer> retorno = null;

		StringBuffer consulta = new StringBuffer();
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select a.cnta_id as idConta ");
			consulta.append(" from conta a ");
			consulta.append(" join cobranca_documento_item b on b.cnta_id=a.cnta_id ");
			consulta.append(" join cobranca_documento c on c.cbdo_id=b.cbdo_id ");
			consulta.append(" join cobranca_acao_atividade_comand d on d.cacm_id=c.cacm_id ");
			consulta.append(" 	and d.empr_id <> :idEmpresa ");
			consulta.append(" join imovel_cobranca_situacao e on e.cacm_id=c.cacm_id ");
			consulta.append(" 	and e.cbst_id = :idCobrancaSituacao ");
			consulta.append(" 	and e.imov_id = :idImovel ");
			consulta.append(" 	and e.imov_id = c.imov_id ");
			consulta.append(" 	and e.iscb_dtretiradacobranca is null ");
			consulta.append(" where a.CNTA_ICCOBRANCAADMINISTRATIVA = :idCobrancaAdministrativa ");

			retorno = (Collection<Integer>) session.createSQLQuery(consulta.toString()).addScalar("idConta", Hibernate.INTEGER)
							.setInteger("idEmpresa", idEmpresa).setInteger("idImovel", idImovel)
							.setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
							.setInteger("idCobrancaAdministrativa", ConstantesSistema.SIM).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos
	 * [SB0026] A Verificar Debito em cobranca Administrativa - Retirar Guias
	 * Retorna a lista de ids de guias de pagamento em cobranca administrativa de um Imovel onde
	 * nao
	 * existe ocorrencia da empresa passada como parametro
	 * 
	 * @author Hugo Lima
	 * @date 31/07/2012
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection obterIdsGuiasPagamentoCobrancaAdministrativaEmpresaDiferente(Integer idEmpresa, Integer idImovel)
					throws ErroRepositorioException{

		Collection retorno = null;

		StringBuffer consulta = new StringBuffer();
		Session session = HibernateUtil.getSession();

		try{

			consulta.append(" select a.gpag_id as idGuia, ");
			consulta.append(" 	b.cdit_nnprestacao as numeroPrestacao ");
			consulta.append(" from guia_pagamento_prestacao a ");
			consulta.append(" join cobranca_documento_item b on b.gpag_id=a.gpag_id ");
			consulta.append(" 	and b.cdit_nnprestacao=a.gppr_nnprestacao ");
			consulta.append(" join cobranca_documento c on c.cbdo_id=b.cbdo_id ");
			consulta.append(" join cobranca_acao_atividade_comand d on d.cacm_id=c.cacm_id ");
			consulta.append(" 	and d.empr_id <> :idEmpresa ");
			consulta.append(" join imovel_cobranca_situacao e on e.cacm_id=c.cacm_id ");
			consulta.append(" 	and e.cbst_id = :idCobrancaSituacao ");
			consulta.append(" 	and e.imov_id = :idImovel ");
			consulta.append(" 	and e.imov_id=c.imov_id ");
			consulta.append(" 	and e.iscb_dtretiradacobranca is null ");
			consulta.append(" where a.gppr_iccobrancaadministrativa = :idCobrancaAdministrativa ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idGuia", Hibernate.INTEGER)
							.addScalar("numeroPrestacao", Hibernate.SHORT).setInteger("idEmpresa", idEmpresa)
							.setInteger("idImovel", idImovel).setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
							.setInteger("idCobrancaAdministrativa", ConstantesSistema.SIM).list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imoveis da cobranca Administrativa.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return Collection<ImovelCobrancaSituacaoAdministrativaHelper>
	 */
	public Collection<ImovelCobrancaSituacaoAdministrativaHelper> consultarRetirarImovelCobrancaAdministrativa(Integer idLocalidade,
					Integer cdSetorComercial, Integer idImovel, Integer numeroPaginas) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Collection<ImovelCobrancaSituacaoAdministrativaHelper> colecaoRetorno = new ArrayList<ImovelCobrancaSituacaoAdministrativaHelper>();

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" SELECT ");
			consulta.append("	ics.ISCB_ID AS idImovelCobracaSituacao,");
			consulta.append("	ics.IMOV_ID AS idImovel,");
			consulta.append("	c.CLIE_NMCLIENTE AS nomeCliente, ");
			consulta.append("	ics.ISCB_DTIMPLANTACAOCOBRANCA as dtImplantacaoCobranca, ");
			consulta.append("	ics.ISCB_DTRETIRADACOBRANCA AS dtRetiradaCobranca, ");
			consulta.append("	ics.ISCB_QTDEBITO AS qtDebitos, ");
			consulta.append("	ics.ISCB_VLDEBITO AS vlDebitos ");
			consulta.append(" FROM IMOVEL_COBRANCA_SITUACAO ics ");
			consulta.append(" INNER JOIN COBRANCA_SITUACAO cs on ics.CBST_ID = cs.CBST_ID and cs.CBST_ICUSO = " + ConstantesSistema.ATIVO);
			consulta.append(" INNER JOIN IMOVEL i ON ics.IMOV_ID = i.IMOV_ID ");
			consulta.append(" INNER JOIN SETOR_COMERCIAL sc ON i.STCM_ID = sc.STCM_ID ");
			consulta.append(" INNER JOIN CLIENTE c on c.CLIE_ID in (select ci.CLIE_ID from cliente_imovel ci where ci.IMOV_ID = i.IMOV_ID and ci.CRTP_ID = "
							+ ClienteRelacaoTipo.USUARIO + " and ci.CLIM_DTRELACAOFIM is null) ");
			consulta.append(" WHERE ");
			consulta.append("	ics.ISCB_DTIMPLANTACAOCOBRANCA = ");
			consulta.append("		(SELECT ");
			consulta.append("			MAX(ics.ISCB_DTIMPLANTACAOCOBRANCA) AS dtImplantacaoCobranca ");
			consulta.append("		FROM IMOVEL_COBRANCA_SITUACAO ics1 ");
			consulta.append("		WHERE ");
			consulta.append("			ics1.CBST_ID = cs.CBST_ID ");
			consulta.append("			AND ics1.IMOV_ID = i.imov_id) ");
			consulta.append("	AND cs.CBST_ID = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);

			if(idLocalidade != null){
				consulta.append(" AND i.LOCA_ID = :idLocalidade "); /* (Localidade informada) */
			}
			if(cdSetorComercial != null){
				// (Codigo setor informado)
				consulta.append(" AND sc.STCM_CDSETORCOMERCIAL = :cdSetorComercial ");
			}
			if(idImovel != null){
				consulta.append(" AND i.IMOV_ID = :idImovel "); /* (Imovel informado) */
			}

			consulta.append(" ORDER BY ");
			consulta.append("	ics.IMOV_ID ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			if(idLocalidade != null){
				query.setInteger("idLocalidade", idLocalidade);
			}

			if(cdSetorComercial != null){
				query.setInteger("cdSetorComercial", cdSetorComercial);
			}

			if(idImovel != null){
				query.setInteger("idImovel", idImovel);
			}

			retorno = query.addScalar("idImovelCobracaSituacao", Hibernate.INTEGER).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("nomeCliente", Hibernate.STRING).addScalar("dtImplantacaoCobranca", Hibernate.DATE)
							.addScalar("dtRetiradaCobranca", Hibernate.DATE).addScalar("qtDebitos", Hibernate.INTEGER)
							.addScalar("vlDebitos", Hibernate.BIG_DECIMAL).setFirstResult(10 * numeroPaginas).setMaxResults(10).list();

			Iterator iterator = retorno.iterator();
			while(iterator.hasNext()){

				Object[] objects = (Object[]) iterator.next();

				ImovelCobrancaSituacaoAdministrativaHelper imovelCobrancaSituacaoAdministrativaHelper = new ImovelCobrancaSituacaoAdministrativaHelper(
								(Integer) objects[0], (Integer) objects[1], (String) objects[2], (Date) objects[3], (Date) objects[4],
								(Integer) objects[5], (BigDecimal) objects[6]);

				colecaoRetorno.add(imovelCobrancaSituacaoAdministrativaHelper);

			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return colecaoRetorno;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * Este caso de uso permite Consultar e/ou Retirar Imoveis da cobranca Administrativa.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return Integer
	 */
	public Integer consultarRetirarImovelCobrancaAdministrativaCount(Integer idLocalidade, Integer cdSetorComercial, Integer idImovel)
					throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" SELECT ");
			consulta.append("	count(ics.ISCB_ID) as qtdImovelCobracaSituacao ");
			consulta.append(" FROM IMOVEL_COBRANCA_SITUACAO ics ");
			consulta.append(" INNER JOIN COBRANCA_SITUACAO cs on ics.CBST_ID = cs.CBST_ID and cs.CBST_ICUSO = " + ConstantesSistema.ATIVO);
			consulta.append(" INNER JOIN IMOVEL i ON ics.IMOV_ID = i.IMOV_ID ");
			consulta.append(" INNER JOIN SETOR_COMERCIAL sc ON i.STCM_ID = sc.STCM_ID ");
			consulta.append(" INNER JOIN CLIENTE c on c.CLIE_ID in (select ci.CLIE_ID from cliente_imovel ci where ci.IMOV_ID = i.IMOV_ID and ci.CRTP_ID = "
							+ ClienteRelacaoTipo.USUARIO + " and ci.CLIM_DTRELACAOFIM is null) ");
			consulta.append(" WHERE ");
			consulta.append("	ics.ISCB_DTIMPLANTACAOCOBRANCA = ");
			consulta.append("		(SELECT ");
			consulta.append("			MAX(ics.ISCB_DTIMPLANTACAOCOBRANCA) AS dtImplantacaoCobranca ");
			consulta.append("		FROM IMOVEL_COBRANCA_SITUACAO ics1 ");
			consulta.append("		WHERE ");
			consulta.append("			ics1.CBST_ID = cs.CBST_ID ");
			consulta.append("			AND ics1.IMOV_ID = i.imov_id) ");
			consulta.append("	AND cs.CBST_ID = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);

			if(idLocalidade != null){
				consulta.append(" AND i.LOCA_ID = :idLocalidade "); /* (Localidade informada) */
			}
			if(cdSetorComercial != null){
				// (Codigo setor informado)
				consulta.append(" AND sc.STCM_CDSETORCOMERCIAL = :cdSetorComercial ");
			}
			if(idImovel != null){
				consulta.append(" AND i.IMOV_ID = :idImovel "); /* (Imovel informado) */
			}

			consulta.append(" ORDER BY ");
			consulta.append("	ics.IMOV_ID ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			if(idLocalidade != null){
				query.setInteger("idLocalidade", idLocalidade);
			}

			if(cdSetorComercial != null){
				query.setInteger("cdSetorComercial", cdSetorComercial);
			}

			if(idImovel != null){
				query.setInteger("idImovel", idImovel);
			}

			retorno = ((Number) query.addScalar("qtdImovelCobracaSituacao", Hibernate.INTEGER).uniqueResult()).intValue();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0001] A Exibir dados da cobranca Administrativa do Imovel.
	 * 
	 * @created 31/07/2012
	 * @author Josenildo Neves.
	 * @return Collection<ImovelCobrancaSituacaoAdministrativaHelper>
	 */
	public ImovelCobrancaSituacaoAdministrativaHelper consultarRetirarImovelCobrancaAdministrativaDadosRemuneracao(
					Integer idImovelCobrancaSituacao) throws ErroRepositorioException{

		Object retorno = null;
		ImovelCobrancaSituacaoAdministrativaHelper imovelCobrancaSituacaoAdministrativaHelper = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("SELECT ");
			// consulta.append("	new gcom.cobranca.bean.ImovelCobrancaSituacaoAdministrativaHelper(");
			consulta.append("	icai.ICAI_PCREMUNERACAO AS percentualRemuneracao,");
			consulta.append("	icai.ICAI_PCREMUNERACAOREINCID AS percentualReincidencia, ");
			consulta.append("	icai.ICAI_PCREMUNERACAOESPEC AS percentualEspecial, ");
			consulta.append("	icai.ICAI_PCREMUNERACAOPARCEL AS percentualParcelamento, ");
			consulta.append("	SUM(icai.ICAI_VLREMUNERACAO) AS valorRemuneracao, ");
			consulta.append("	SUM(icai.ICAI_VLREMUNERACAOREINCID) AS valorReincidencia, ");
			consulta.append("	SUM(icai.ICAI_VLREMUNERACAOESPEC) AS valorEspecial, ");
			consulta.append("	SUM(icai.ICAI_VLREMUNERACAOPARCEL) AS valorParcelamento ");
			// consulta.append("	) ");
			consulta.append("FROM IMOVEL_COBRANCA_ADMINISTR_ITEM icai ");
			consulta.append("WHERE ");
			consulta.append("	icai.ISCB_ID = :idImovelCobrancaSituacao");
			consulta.append(" GROUP BY ");
			consulta.append("	icai.ICAI_PCREMUNERACAO, ");
			consulta.append("	icai.ICAI_PCREMUNERACAOREINCID, ");
			consulta.append("	icai.ICAI_PCREMUNERACAOESPEC, ");
			consulta.append("	icai.ICAI_PCREMUNERACAOPARCEL ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			retorno = query.addScalar("percentualRemuneracao", Hibernate.BIG_DECIMAL)
							.addScalar("percentualReincidencia", Hibernate.BIG_DECIMAL)
							.addScalar("percentualEspecial", Hibernate.BIG_DECIMAL)
							.addScalar("percentualParcelamento", Hibernate.BIG_DECIMAL)
							.addScalar("valorRemuneracao", Hibernate.BIG_DECIMAL).addScalar("valorReincidencia", Hibernate.BIG_DECIMAL)
							.addScalar("valorEspecial", Hibernate.BIG_DECIMAL).addScalar("valorParcelamento", Hibernate.BIG_DECIMAL)
							.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao).setMaxResults(1).uniqueResult();

			if(!Util.isVazioOuBranco(retorno)){

				Object[] objects = (Object[]) retorno;

				imovelCobrancaSituacaoAdministrativaHelper = new ImovelCobrancaSituacaoAdministrativaHelper((BigDecimal) objects[0],
								(BigDecimal) objects[1], (BigDecimal) objects[2], (BigDecimal) objects[3], (BigDecimal) objects[4],
								(BigDecimal) objects[5], (BigDecimal) objects[6], (BigDecimal) objects[7]);

			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return imovelCobrancaSituacaoAdministrativaHelper;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] A Encerrar cobranca Administrativa do Imovel. Item 1.
	 * 
	 * @return
	 */
	public Collection<ImovelCobrancaMotivoRetirada> consultarImovelCobrancaMotivoRetirada() throws ErroRepositorioException{

		Collection<ImovelCobrancaMotivoRetirada> motivosRetirada = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select icmr from ImovelCobrancaMotivoRetirada icmr where icmr.indicadorUso = 1 and icmr.indicadorSistema = 2");
			motivosRetirada = (Collection<ImovelCobrancaMotivoRetirada>) session.createQuery(consulta.toString()).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return motivosRetirada;
	}

	/**
	 * [UC3060] Consultar Retirar Imovel Cobranca Administrativa
	 * [SB0003] A Encerrar cobranca Administrativa do Imovel. Item 1.
	 * 
	 * @return
	 */
	public Collection<CobrancaDocumentoItem> obterDocumentosCobrancaPendentes(Integer idImovelCobrancaSituacao)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select cdi ");
			consulta.append(" from CobrancaDocumentoItem cdi, ");
			consulta.append("  ImovelCobrancaSituacao ics ");
			consulta.append("  inner join cdi.cobrancaDocumento cd ");
			consulta.append("  inner join cd.imovel i ");
			consulta.append("  inner join cd.cobrancaAcaoAtividadeComando caac ");
			consulta.append("  left join fetch cdi.contaGeral cg ");
			consulta.append("  left join fetch cg.conta c ");
			consulta.append("  left join fetch cdi.guiaPagamentoGeral gpgg  ");
			consulta.append("  left join fetch gpgg.guiaPagamento gpag  ");
			consulta.append(" where ");
			consulta.append(" ((cdi.cobrancaDebitoSituacao.id = 1) or (cdi.cobrancaDebitoSituacao is null)) ");
			consulta.append(" and  ics.imovel.id = i.id ");
			consulta.append(" and ics.cobrancaAcaoAtividadeComando.id = caac.id ");
			consulta.append(" and ics.id = :idImovelCobrancaSituacao ");

			retorno = session.createQuery(consulta.toString()).setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao).list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * Obtem os documentos de cobranca com o CBDO_ID da tabela COBRANCA_DOCUMENTO com CAAC_ID da
	 * tabela COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Anderson Italo
	 * @date 13/07/2012
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoParaGeracaoResumoEventual(Integer idCobrancaAtividadeAcaoComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<CobrancaDocumento> retorno = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select documento from CobrancaDocumento documento ");
			consulta.append("left join fetch documento.cobrancaAcao acao ");
			consulta.append("left join fetch acao.servicoTipo ");
			consulta.append("left join fetch documento.cobrancaCriterio crit ");
			consulta.append("left join fetch documento.ordensServico ");
			consulta.append("left join fetch documento.documentoTipo ");
			consulta.append("where documento.cobrancaAcaoAtividadeComando.id = " + String.valueOf(idCobrancaAtividadeAcaoComando) + " ");	
			consulta.append("order by documento.id");

			retorno = (Collection<CobrancaDocumento>) session.createQuery(consulta.toString()).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * Obteam os parcelamentos do resumo
	 * 
	 * @author Anderson Italo
	 * @date 13/07/2012
	 */
	public Collection<Parcelamento> pesquisarParcelamentosResumoCobrancaAcaoEventual(Integer idCobrancaDocumento)
					throws ErroRepositorioException{

		Collection<Parcelamento> retorno = null;
		Collection<Object[]> retornoQuery = null;
		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{

			sql.append(" select distinct p.parc_id, p.parc_vlentrada ");
			sql.append(" from parcelamento p ");
			sql.append(" inner join parcelamento_item pi on pi.PARC_ID = p.PARC_ID ");
			sql.append(" inner join cobranca_documento_item cdi on (cdi.CNTA_ID = pi.CNTA_ID or cdi.CNTA_ID = pi.GPAG_ID) ");
			sql.append(" where cdi.CBDO_ID = " + idCobrancaDocumento.toString());
			sql.append(" and p.PCST_ID = " + ParcelamentoSituacao.NORMAL);

			retornoQuery = (Collection<Object[]>) session.createSQLQuery(sql.toString()).addScalar("parc_id", Hibernate.INTEGER)
							.addScalar("parc_vlentrada", Hibernate.BIG_DECIMAL).list();

			// Construindo a Colecao de Parcelamentos
			if(!Util.isVazioOrNulo(retornoQuery)){
				retorno = new ArrayList<Parcelamento>();

				for(Object[] registro : retornoQuery){
					retorno.add(new Parcelamento((Integer) registro[0], (BigDecimal) registro[1]));
				}
			}

			retornoQuery.clear();
			retornoQuery = null;

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0004] A Tratar cobranca Administrativa
	 * Obtem os valores de remunerAcao agrupando por tipo de documento e percentual de
	 * remunerAcao
	 * 
	 * @author Anderson Italo
	 * @date 17/07/2012
	 */
	public Collection<Object[]> pesquisarValoresImovelCobrancaAdministrativaItem(Integer idCobrancaAcaoAtividadeComando, Integer idImovel)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		Collection<Object[]> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" select sum(item.icai_vlremuneracao) as sum_vlremuneracao, ");
			consulta.append(" sum(item.icai_vlremuneracaoreincid) as sum_vlremuneracaoreincid, ");
			consulta.append(" sum(item.icai_vlremuneracaoespec) as sum_vlremuneracaoespec, ");
			consulta.append(" sum(item.icai_vlremuneracaoparcel) as sum_vlremuneracaoparcel, ");
			consulta.append(" doctipo.dotp_id, item.icai_pcremuneracao, item.icai_pcremuneracaoreincid, ");
			consulta.append(" item.icai_pcremuneracaoespec, item.icai_pcremuneracaoparcel ");
			consulta.append(" from imovel_cobranca_administr_item item ");
			consulta.append(" inner join documento_tipo doctipo on doctipo.dotp_id = item.dotp_id ");
			consulta.append(" inner join imovel_cobranca_situacao imovcobsit on imovcobsit.iscb_id = item.iscb_id ");
			consulta.append(" where imovcobsit.cacm_id = :idCobrancaAcaoAtividadeComando ");
			consulta.append(" and imovcobsit.imov_id = :idImovel ");
			consulta.append(" group by doctipo.dotp_id, item.icai_pcremuneracao, item.icai_pcremuneracaoreincid, ");
			consulta.append(" item.icai_pcremuneracaoespec, item.icai_pcremuneracaoparcel ");
			consulta.append(" order by doctipo.dotp_id, item.icai_pcremuneracao, item.icai_pcremuneracaoreincid, ");
			consulta.append(" item.icai_pcremuneracaoespec, item.icai_pcremuneracaoparcel ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString())
							.addScalar("sum_vlremuneracao", Hibernate.BIG_DECIMAL)
							.addScalar("sum_vlremuneracaoreincid", Hibernate.BIG_DECIMAL)
							.addScalar("sum_vlremuneracaoespec", Hibernate.BIG_DECIMAL)
							.addScalar("sum_vlremuneracaoparcel", Hibernate.BIG_DECIMAL).addScalar("dotp_id", Hibernate.INTEGER)
							.addScalar("icai_pcremuneracao", Hibernate.BIG_DECIMAL)
							.addScalar("icai_pcremuneracaoreincid", Hibernate.BIG_DECIMAL)
							.addScalar("icai_pcremuneracaoespec", Hibernate.BIG_DECIMAL)
							.addScalar("icai_pcremuneracaoparcel", Hibernate.BIG_DECIMAL)
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setInteger("idImovel", idImovel)
							.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0004] A Tratar cobranca Administrativa
	 * Obtem os itens dos documentos de cobranca do Imovel para um determinado comando
	 * 
	 * @author Anderson Italo
	 * @date 17/07/2012
	 */
	public Collection<CobrancaDocumentoItem> pesquisarItensDocumentoCobranca(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<CobrancaDocumentoItem> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM CobrancaDocumentoItem cdi ");
			consulta.append("WHERE cdi.cobrancaDocumento.id = :idCobrancaDocumento ");

			retorno = (Collection<CobrancaDocumentoItem>) session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0004] A Tratar cobranca Administrativa
	 * Obtem os itens do parcelamento
	 * 
	 * @author Anderson Italo
	 * @date 17/07/2012
	 */
	public Collection<ParcelamentoItem> pesquisarItensPorParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<ParcelamentoItem> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM ParcelamentoItem item ");
			consulta.append("where item.parcelamento.id = :idParcelamento ");

			retorno = (Collection<ParcelamentoItem>) session.createQuery(consulta.toString()).setInteger("idParcelamento", idParcelamento)
							.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * 
	 * @author Anderson Italo
	 * @date 20/07/2012
	 */
	public CobrancaAcaoAtividadeComando pesquisarCobrancaAcaoAtividadeComandoPorId(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		CobrancaAcaoAtividadeComando retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM CobrancaAcaoAtividadeComando comando ");
			consulta.append("inner join fetch comando.cobrancaAcao acao ");
			consulta.append("where comando.id = :idCobrancaAcaoAtividadeComando ");

			retorno = (CobrancaAcaoAtividadeComando) session.createQuery(consulta.toString())
							.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0003 A Identificar situacao do Debito do Item do Documento de cobranca]
	 * Atualiza o item do documento de cobranca - Com valor igual a Â“naoÂ” (2)
	 * 
	 * @author Anderson Italo
	 * @date 20/07/2012
	 */
	public void atualizarIndicadorAtualizadoCobrancaDocumentoItensPorDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("update CobrancaDocumentoItem item set  item.indicadorAtualizado = " + ConstantesSistema.NAO.toString());
			consulta.append(", item.ultimaAlteracao = :dataUltimaAlteracao ");
			consulta.append("where item.cobrancaDocumento.id = :idCobrancaDocumento ");

			session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento)
							.setDate("dataUltimaAlteracao", new Date()).executeUpdate();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * Obtem os itens associados ao documento de cobranca
	 * 
	 * @author Anderson Italo
	 * @date 13/07/2012
	 */
	public Collection<Object[]> pesquisarSituacaoDebitoItensParaGeracaoResumoEventual(Integer idCobrancaDocumento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select ");
			consulta.append("item.dotp_id, count(item.cdit_id) as qtd, sum(item.cdit_vlitemcobrado) as valor, ");
			consulta.append("item.cdst_id, item.cdit_dtsituacaodebito ");
			consulta.append("from cobranca_documento_item item ");
			if(idCobrancaDocumento != null){

				consulta.append("where item.cbdo_id = :idCobrancaDocumento ");
			}else{

				consulta.append("where item.cbdo_id in (:idCobrancaDocumento) ");
			}
			consulta.append("and item.cdst_id is not null ");
			consulta.append("group by item.dotp_id, item.cdst_id, item.cdit_dtsituacaodebito ");
			consulta.append("order by item.cdit_dtsituacaodebito ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("dotp_id", Hibernate.INTEGER)
							.addScalar("qtd", Hibernate.INTEGER).addScalar("valor", Hibernate.BIG_DECIMAL)
							.addScalar("cdst_id", Hibernate.INTEGER).addScalar("cdit_dtsituacaodebito", Hibernate.DATE)
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Obtem um ResumoCobrancaAcaoEventual
	 * 
	 * @author Anderson Italo
	 * @date 18/08/2012
	 * @throws ErroRepositorioException
	 */
	public ResumoCobrancaAcaoEventual pesquisarResumoCobrancaAcaoEventual(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		ResumoCobrancaAcaoEventual retorno = null;
		try{

			StringBuilder hql = new StringBuilder("FROM ResumoCobrancaAcaoEventual resumoEvetual WHERE");

			if(resumoCobrancaAcaoEventual.getCobrancaAcaoAtividadeComando() != null){

				hql.append(" resumoEvetual.cobrancaAcaoAtividadeComando.id = "
								+ resumoCobrancaAcaoEventual.getCobrancaAcaoAtividadeComando().getId().toString());
			}else{

				hql.append(" resumoEvetual.cobrancaAcaoAtividadeComando.id is null");
			}

			if(resumoCobrancaAcaoEventual.getFaturamentoGrupoCronogramaMensal() != null){

				hql.append(" AND resumoEvetual.faturamentoGrupoCronogramaMensal.id = "
								+ resumoCobrancaAcaoEventual.getFaturamentoGrupoCronogramaMensal().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.faturamentoGrupoCronogramaMensal.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCobrancaGrupo() != null){

				hql.append(" AND resumoEvetual.cobrancaGrupo.id = " + resumoCobrancaAcaoEventual.getCobrancaGrupo().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.cobrancaGrupo.id is null");
			}

			if(resumoCobrancaAcaoEventual.getGerenciaRegional() != null){

				hql.append(" AND resumoEvetual.gerenciaRegional.id = "
								+ resumoCobrancaAcaoEventual.getGerenciaRegional().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.gerenciaRegional.id is null");
			}

			if(resumoCobrancaAcaoEventual.getUnidadeNegocio() != null){

				hql.append(" AND resumoEvetual.unidadeNegocio.id = " + resumoCobrancaAcaoEventual.getUnidadeNegocio().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.unidadeNegocio.id is null");
			}

			if(resumoCobrancaAcaoEventual.getLocalidade() != null){

				hql.append(" AND resumoEvetual.localidade.id = " + resumoCobrancaAcaoEventual.getLocalidade().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.localidade.id  is null");
			}

			if(resumoCobrancaAcaoEventual.getSetorComercial() != null){

				hql.append(" AND resumoEvetual.setorComercial.id = " + resumoCobrancaAcaoEventual.getSetorComercial().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.setorComercial.id is null");
			}

			if(resumoCobrancaAcaoEventual.getRota() != null){

				hql.append(" AND resumoEvetual.rota.id = " + resumoCobrancaAcaoEventual.getRota().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.rota.id is null");
			}

			if(resumoCobrancaAcaoEventual.getQuadra() != null){

				hql.append(" AND resumoEvetual.quadra.id = " + resumoCobrancaAcaoEventual.getQuadra().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.quadra.id is null");
			}

			if(resumoCobrancaAcaoEventual.getImovelPerfil() != null){

				hql.append(" AND resumoEvetual.imovelPerfil.id = " + resumoCobrancaAcaoEventual.getImovelPerfil().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.imovelPerfil.id is null");
			}

			if(resumoCobrancaAcaoEventual.getLigacaoAguaSituacao() != null){

				hql.append(" AND resumoEvetual.ligacaoAguaSituacao.id = "
								+ resumoCobrancaAcaoEventual.getLigacaoAguaSituacao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.ligacaoAguaSituacao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getLigacaoEsgotoSituacao() != null){

				hql.append(" AND resumoEvetual.ligacaoEsgotoSituacao.id = "
								+ resumoCobrancaAcaoEventual.getLigacaoEsgotoSituacao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.ligacaoEsgotoSituacao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCategoria() != null){

				hql.append(" AND resumoEvetual.categoria.id = " + resumoCobrancaAcaoEventual.getCategoria().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.categoria.id is null");
			}

			if(resumoCobrancaAcaoEventual.getEsferaPoder() != null){

				hql.append(" AND resumoEvetual.esferaPoder.id = " + resumoCobrancaAcaoEventual.getEsferaPoder().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.esferaPoder.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCobrancaAcao() != null){

				hql.append(" AND resumoEvetual.cobrancaAcao.id = " + resumoCobrancaAcaoEventual.getCobrancaAcao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.cobrancaAcao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCobrancaAcaoSituacao() != null){

				hql.append(" AND resumoEvetual.cobrancaAcaoSituacao.id = "
								+ resumoCobrancaAcaoEventual.getCobrancaAcaoSituacao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.cobrancaAcaoSituacao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCobrancaDebitoSituacao() != null){

				hql.append(" AND resumoEvetual.cobrancaDebitoSituacao.id = "
								+ resumoCobrancaAcaoEventual.getCobrancaDebitoSituacao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.cobrancaDebitoSituacao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getFiscalizacaoSituacao() != null){

				hql.append(" AND resumoEvetual.fiscalizacaoSituacao.id = "
								+ resumoCobrancaAcaoEventual.getFiscalizacaoSituacao().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.fiscalizacaoSituacao.id is null");
			}

			if(resumoCobrancaAcaoEventual.getCobrancaCriterio() != null){

				hql.append(" AND resumoEvetual.cobrancaCriterio.id = "
								+ resumoCobrancaAcaoEventual.getCobrancaCriterio().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.cobrancaCriterio.id is null");
			}

			if(resumoCobrancaAcaoEventual.getEmpresa() != null){

				hql.append(" AND resumoEvetual.empresa.id = " + resumoCobrancaAcaoEventual.getEmpresa().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.empresa.id is null");
			}

			if(resumoCobrancaAcaoEventual.getMotivoNaoEntregaDocumento() != null){

				hql.append(" AND resumoEvetual.motivoNaoEntregaDocumento.id = "
								+ resumoCobrancaAcaoEventual.getMotivoNaoEntregaDocumento().getId().toString());
			}else{

				hql.append(" AND resumoEvetual.motivoNaoEntregaDocumento.id is null");
			}

			if(resumoCobrancaAcaoEventual.getIndicadorAntesApos() != null){

				hql.append(" AND resumoEvetual.indicadorAntesApos = " + resumoCobrancaAcaoEventual.getIndicadorAntesApos().toString());
			}else{

				hql.append(" AND resumoEvetual.indicadorAntesApos is null");
			}

			if(resumoCobrancaAcaoEventual.getIndicadorDefinitivo() != null){

				hql.append(" AND resumoEvetual.indicadorDefinitivo = " + resumoCobrancaAcaoEventual.getIndicadorDefinitivo().toString());
			}else{

				hql.append(" AND resumoEvetual.indicadorDefinitivo is null");
			}

			if(resumoCobrancaAcaoEventual.getIndicadorAcimaLimite() != null){

				hql.append(" AND resumoEvetual.indicadorAcimaLimite = " + resumoCobrancaAcaoEventual.getIndicadorAcimaLimite().toString());
			}else{

				hql.append(" AND resumoEvetual.indicadorAcimaLimite is null");
			}

			Query query = session.createQuery(hql.toString());
			retorno = (ResumoCobrancaAcaoEventual) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * Obtem um ResumoCobrancaAcaoSituacao
	 * 
	 * @author Anderson Italo
	 * @date 18/08/2012
	 */
	public ResumoCobrancaAcaoSituacao pesquisarResumoCobrancaAcaoSituacao(Integer idResumoCobrancaAcaoEventual, Integer idDocumentoTipo,
					Integer idCobrancaDebitoSituacao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		ResumoCobrancaAcaoSituacao retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM ResumoCobrancaAcaoSituacao resumo ");
			consulta.append("where resumo.resumoCobrancaAcaoEventual.id = :idResumoCobrancaAcaoEventual ");
			consulta.append("and resumo.documentoTipo.id = :idDocumentoTipo ");
			consulta.append("and resumo.cobrancaDebitoSituacao.id = :idCobrancaDebitoSituacao ");

			retorno = (ResumoCobrancaAcaoSituacao) session.createQuery(consulta.toString())
							.setInteger("idResumoCobrancaAcaoEventual", idResumoCobrancaAcaoEventual)
							.setInteger("idDocumentoTipo", idDocumentoTipo)
							.setInteger("idCobrancaDebitoSituacao", idCobrancaDebitoSituacao).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC00614] Gerar Resumo das Acoes de cobranca Eventuais
	 * Obtem um ResumoCobrancaAcaoRemuneracao
	 * 
	 * @author Anderson Italo
	 * @date 18/08/2012
	 */
	public ResumoCobrancaAcaoRemuneracao pesquisarResumoCobrancaAcaoRemuneracao(Integer idResumoCobrancaAcaoEventual,
					Integer idDocumentoTipo, BigDecimal percentualRemuneracao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		ResumoCobrancaAcaoRemuneracao retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM ResumoCobrancaAcaoRemuneracao resumo ");
			consulta.append("where resumo.resumoCobrancaAcaoEventual.id = :idResumoCobrancaAcaoEventual ");
			consulta.append("and resumo.documentoTipo.id = :idDocumentoTipo ");
			consulta.append("and resumo.percentualRemuneracao = :percentualRemuneracao ");

			retorno = (ResumoCobrancaAcaoRemuneracao) session.createQuery(consulta.toString())
							.setInteger("idResumoCobrancaAcaoEventual", idResumoCobrancaAcaoEventual)
							.setInteger("idDocumentoTipo", idDocumentoTipo).setBigDecimal("percentualRemuneracao", percentualRemuneracao)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Obter os Ids de parcelamento feitos por usuario nao pertencentes a empresa passada no
	 * parametro
	 * 
	 * @author Hugo Lima
	 * @data 15/08/2012
	 * @author Saulo Lima
	 * @data 12/08/2013
	 *       Adicionando a Matriculado Imovel para melhorar a performance
	 * @param idEmpresa
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> obterIdsParcelamentoEmpresaDiferente(Integer idEmpresa, Integer idImovel) throws ErroRepositorioException{

		Collection<Integer> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" SELECT parc.id");
			hql.append(" FROM Parcelamento parc");
			hql.append("  INNER JOIN parc.usuario usur");
			hql.append(" WHERE usur.empresa.id <> :idEmpresa");
			hql.append("  AND parc.imovel.id = :idImovel");

			Query query = session.createQuery(hql.toString()).setInteger("idEmpresa", idEmpresa).setInteger("idImovel", idImovel);

			retorno = query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			hql = null;
		}

		return retorno;
	}

	/**
	 * [UC0252] Consultar Parcelamentos de Debitos
	 * [SB0003] A Validar autorizacao de acesso ao Imovel em cobranca administrativa pelos
	 * usuarios
	 * da empresa contratante
	 * 
	 * @author Hugo Lima
	 * @date 23/08/2012
	 */
	public Collection<DebitoACobrar> pesquisarItensDebitosACobrarPorParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<DebitoACobrar> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" FROM DebitoACobrar dbac ");
			consulta.append(" inner join fetch dbac.debitoTipo dbtp ");
			consulta.append(" where dbac.parcelamento.id = :idParcelamento ");

			retorno = (Collection<DebitoACobrar>) session.createQuery(consulta.toString()).setInteger("idParcelamento", idParcelamento)
							.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0617] Consultar Resumo das Acoes de cobranca Eventuais
	 * 4.2.1.5.6. Para cada percentual de remunerAcao (o percentual de remunerAcao
	 * 
	 * @author Josenildo Neves
	 * @date 31/08/2012
	 */
	public List<ResumoCobrancaAcaoRemuneracaoHelper> consultarCobrancaAcaoRemuneracao(Integer idCobrancaAcao,
					Integer idCobrancaAcaoSituacao, InformarDadosGeracaoResumoAcaoConsultaEventualHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		List<ResumoCobrancaAcaoRemuneracaoHelper> retorno = null;

		try{

			StringBuffer consulta = new StringBuffer();
			consulta.append(" select new gcom.cobranca.bean.ResumoCobrancaAcaoRemuneracaoHelper( ");
			consulta.append(" documentoTipo.descricaoDocumentoTipo, ");
			consulta.append(" resumo.percentualRemuneracao, ");
			consulta.append(" SUM(resumo.valorRemuneracao)) ");
			consulta.append(" FROM ResumoCobrancaAcaoRemuneracao resumo ");
			consulta.append(" inner join resumo.resumoCobrancaAcaoEventual resumoEventual ");
			consulta.append(" inner join resumo.documentoTipo documentoTipo ");
			consulta.append(" inner join resumoEventual.cobrancaAcaoSituacao cobrancaAcaoSituacao ");
			consulta.append(" inner join resumoEventual.cobrancaAcao cobrancaAcao ");

			// CRITa‰RIOS DO FILTRO --- INICIO
			consulta.append(" where ");
			consulta.append("cobrancaAcao.id = :idCobrancaAcao ");
			if(idCobrancaAcaoSituacao != null){
				consulta.append(" and cobrancaAcaoSituacao = :idCobrancaAcaoSituacao ");
			}
			if(!Util.isVazioOuBranco(helper.getIdCobrancaAcaoAtividadeComando())){
				consulta.append(" and resumoEventual.cobrancaAcaoAtividadeComando.id = :idComando ");
			}
			if(helper.getEloPolo() != null && helper.getEloPolo().getId() != null){
				consulta.append(" and resumoEventual.localidade.localidade.id = :idElo ");
			}
			if(helper.getLocalidade() != null && helper.getLocalidade().getId() != null){
				consulta.append(" and resumoEventual.localidade.id = :idLocalidade ");
			}
			if(helper.getSetorComercial() != null && helper.getSetorComercial().getId() != null){
				consulta.append(" and resumoEventual.setorComercial.id = :idSetor ");
			}
			if(helper.getQuadra() != null && helper.getQuadra().getId() != null){
				consulta.append(" and resumoEventual.quadra.id = :idQuadra ");
			}
			if(helper.getUnidadeNegocio() != null && helper.getUnidadeNegocio().getId() != null){
				consulta.append(" and resumoEventual.unidadeNegocio.id = :idUnidadeNegocio");
			}

			if(helper.getColecaoCobrancaAcao() != null && !helper.getColecaoCobrancaAcao().isEmpty()){
				consulta.append(" and resumoEventual.cobrancaAcao.id in (:idsCobrancaAcao) ");
			}
			if(helper.getColecaoCobrancaGrupo() != null && !helper.getColecaoCobrancaGrupo().isEmpty()){
				consulta.append(" and resumoEventual.cobrancaGrupo.id in (:idsCobrancaGrupo) ");
			}
			if(helper.getColecaoGerenciaRegional() != null && !helper.getColecaoGerenciaRegional().isEmpty()){
				consulta.append(" and resumoEventual.gerenciaRegional.id in (:idsGerenciaRegional) ");
			}
			if(helper.getColecaoImovelPerfil() != null && !helper.getColecaoImovelPerfil().isEmpty()){
				consulta.append(" and resumoEventual.imovelPerfil.id in (:idsImovelPerfil) ");
			}
			if(helper.getColecaoLigacaoAguaSituacao() != null && !helper.getColecaoLigacaoAguaSituacao().isEmpty()){
				consulta.append(" and resumoEventual.ligacaoAguaSituacao.id in (:idsLigacaoAguaSituacao) ");
			}
			if(helper.getColecaoLigacaoEsgotoSituacao() != null && !helper.getColecaoLigacaoEsgotoSituacao().isEmpty()){
				consulta.append(" and resumoEventual.ligacaoEsgotoSituacao.id in (:idsLigacaoEsgotoSituacao) ");
			}
			if(helper.getColecaoCategoria() != null && !helper.getColecaoCategoria().isEmpty()){
				consulta.append(" and resumoEventual.categoria.id in (:idsCategoria) ");
			}
			if(helper.getColecaoEsferaPoder() != null && !helper.getColecaoEsferaPoder().isEmpty()){
				consulta.append(" and resumoEventual.esferaPoder.id in (:idsEsferaPoder) ");
			}
			if(helper.getColecaoEmpresa() != null && !helper.getColecaoEmpresa().isEmpty()){
				consulta.append(" and resumoEventual.empresa.id in (:idsEmpresa) ");
			}

			if(helper.getDataInicialEmissao() != null && helper.getDataFinalEmissao() != null){
				consulta.append(" AND resumoEventual.tempoRealizacaoEmitir BETWEEN :dataInicio AND :dataFim ");
			}
			// CRITa‰RIOS DO FILTRO --- FIM

			consulta.append("GROUP BY ");
			consulta.append("documentoTipo.descricaoDocumentoTipo, ");
			consulta.append("resumo.percentualRemuneracao ");
			consulta.append("ORDER BY ");
			consulta.append("documentoTipo.descricaoDocumentoTipo, ");
			consulta.append("resumo.percentualRemuneracao ");

			Query query = session.createQuery(consulta.toString());

			// SETANDO CRITa‰RIOS -- INICIO
			query.setInteger("idCobrancaAcao", idCobrancaAcao);
			if(idCobrancaAcaoSituacao != null){
				query.setInteger("idCobrancaAcaoSituacao", idCobrancaAcaoSituacao);
			}
			if(!Util.isVazioOuBranco(helper.getIdCobrancaAcaoAtividadeComando())){
			}
			if(helper.getEloPolo() != null && helper.getEloPolo().getId() != null){
				query.setInteger("idElo", helper.getEloPolo().getId());
			}
			if(helper.getLocalidade() != null && helper.getLocalidade().getId() != null){
				query.setInteger("idLocalidade", helper.getLocalidade().getId());
			}
			if(helper.getSetorComercial() != null && helper.getSetorComercial().getId() != null){
				query.setInteger("idSetor", helper.getSetorComercial().getId());
			}
			if(helper.getQuadra() != null && helper.getQuadra().getId() != null){
				query.setInteger("idQuadra", helper.getQuadra().getId());
			}
			if(helper.getUnidadeNegocio() != null && helper.getUnidadeNegocio().getId() != null){
				query.setInteger("idUnidadeNegocio", helper.getUnidadeNegocio().getId());
			}
			if(helper.getColecaoCobrancaAcao() != null && !helper.getColecaoCobrancaAcao().isEmpty()){
				List<Integer> idsCobrancaAcao = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoCobrancaAcao()){
					idsCobrancaAcao.add(((CobrancaAcao) obj).getId());
				}
				query.setParameterList("idsCobrancaAcao", idsCobrancaAcao, Hibernate.INTEGER);
			}
			if(helper.getColecaoCobrancaGrupo() != null && !helper.getColecaoCobrancaGrupo().isEmpty()){
				List<Integer> idsCobrancaGrupo = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoCobrancaGrupo()){
					idsCobrancaGrupo.add(((CobrancaGrupo) obj).getId());
				}
				query.setParameterList("idsCobrancaGrupo", idsCobrancaGrupo, Hibernate.INTEGER);
			}
			if(helper.getColecaoGerenciaRegional() != null && !helper.getColecaoGerenciaRegional().isEmpty()){
				List<Integer> idsGerenciaRegional = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoGerenciaRegional()){
					idsGerenciaRegional.add(((GerenciaRegional) obj).getId());
				}
				query.setParameterList("idsGerenciaRegional", idsGerenciaRegional, Hibernate.INTEGER);
			}
			if(helper.getColecaoImovelPerfil() != null && !helper.getColecaoImovelPerfil().isEmpty()){
				List<Integer> idsImovelPerfil = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoImovelPerfil()){
					idsImovelPerfil.add(((ImovelPerfil) obj).getId());
				}
				query.setParameterList("idsImovelPerfil", idsImovelPerfil, Hibernate.INTEGER);
			}
			if(helper.getColecaoLigacaoAguaSituacao() != null && !helper.getColecaoLigacaoAguaSituacao().isEmpty()){
				List<Integer> idsLigAgSit = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoLigacaoAguaSituacao()){
					idsLigAgSit.add(((LigacaoAguaSituacao) obj).getId());
				}
				query.setParameterList("idsLigacaoAguaSituacao", idsLigAgSit, Hibernate.INTEGER);
			}
			if(helper.getColecaoLigacaoEsgotoSituacao() != null && !helper.getColecaoLigacaoEsgotoSituacao().isEmpty()){
				List<Integer> idsLigEsgSit = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoLigacaoEsgotoSituacao()){
					idsLigEsgSit.add(((LigacaoEsgotoSituacao) obj).getId());
				}
				query.setParameterList("idsLigacaoEsgotoSituacao", idsLigEsgSit, Hibernate.INTEGER);
			}
			if(helper.getColecaoCategoria() != null && !helper.getColecaoCategoria().isEmpty()){
				List<Integer> idsCategoria = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoCategoria()){
					idsCategoria.add(((Categoria) obj).getId());
				}
				query.setParameterList("idsCategoria", idsCategoria, Hibernate.INTEGER);
			}
			if(helper.getColecaoEsferaPoder() != null && !helper.getColecaoEsferaPoder().isEmpty()){
				List<Integer> idsEsferaPoder = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoEsferaPoder()){
					idsEsferaPoder.add(((EsferaPoder) obj).getId());
				}
				query.setParameterList("idsEsferaPoder", idsEsferaPoder, Hibernate.INTEGER);
			}
			if(helper.getColecaoEmpresa() != null && !helper.getColecaoEmpresa().isEmpty()){
				List<Integer> idsEmpresa = new ArrayList<Integer>();
				for(Object obj : helper.getColecaoEmpresa()){
					idsEmpresa.add(((Empresa) obj).getId());
				}
				query.setParameterList("idsEmpresa", idsEmpresa, Hibernate.INTEGER);
			}

			if(helper.getDataInicialEmissao() != null){
				query.setDate("dataInicio", Util.formatarDataInicial(helper.getDataInicialEmissao()));
			}
			if(helper.getDataFinalEmissao() != null){
				query.setDate("dataFim", Util.formatarDataFinal(helper.getDataFinalEmissao()));
			}
			// SETANDO CRITa‰RIOS -- FIM
			retorno = query.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Cosulta o total de remuneracoes de cobranca administrativa que atendam ao filtro
	 * informado.
	 * 
	 * @param parametro
	 *            {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return
	 */
	public int consultarQuantidadeRemuneracaoCobrancaAdministrativa(
					RelatorioRemuneracaoCobrancaAdministrativaHelper remuneracaoCobrancaAdministrativaHelper)
					throws ErroRepositorioException{

		StringBuilder builder = new StringBuilder(
						getConsultaRemuneracaoCobrancaAdministrativaPagamentos(remuneracaoCobrancaAdministrativaHelper));

		builder.insert(0, "SELECT COUNT(*) qtd_total FROM (");
		builder.append(")");
		String sqlString = builder.toString();
		Session session = HibernateUtil.getSession();
		Integer retorno = 0;
		try{
			SQLQuery query = session.createSQLQuery(sqlString);
			query.addScalar("qtd_total", Hibernate.INTEGER);
			Number uniqueResult = (Number) query.uniqueResult();
			retorno = uniqueResult == null ? 0 : uniqueResult.intValue();
		}catch(Exception e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro durante a consulta");
		}finally{

			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return retorno;
	}

	private String getConsultaRemuneracaoCobrancaAdministrativaPagamentos(
					RelatorioRemuneracaoCobrancaAdministrativaHelper remuneracaoCobrancaAdministrativaHelper){

		StringBuilder builder = new StringBuilder();

		builder.append("SELECT ICAI.ICAI_DTPAGAMENTODOCUMENTO, ");
		builder.append("   I.LOCA_ID, ");
		builder.append("   S.STCM_CDSETORCOMERCIAL, ");
		builder.append("   I.IMOV_ID, ");
		builder.append("   ICAI.CNTA_ID, ");
		builder.append("   ICAI.GPAG_ID, ");
		builder.append("   ICAI.ICAI_PCREMUNERACAO, ");
		builder.append("   ICAI.ICAI_PCREMUNERACAOESPEC, ");
		builder.append("   ICAI.ICAI_PCREMUNERACAOPARCEL, ");
		builder.append("   ICAI.ICAI_PCREMUNERACAOREINCID, ");
		builder.append("   ICAI.ICAI_VLREMUNERACAO, ");
		builder.append("   ICAI.ICAI_VLREMUNERACAOESPEC, ");
		builder.append("   ICAI.ICAI_VLREMUNERACAOPARCEL, ");
		builder.append("   ICAI.ICAI_VLREMUNERACAOREINCID, ");
		builder.append("   ICAI.DBAC_ID AS DBAC_ID, ");
		builder.append("   ICAI.ICAI_VLBASEREMUNERACAO, ");
		builder.append("   ICAI.ICAI_VLBASEREMUNERACAOESPEC, ");
		builder.append("   ICAI.ICAI_VLBASEREMUNERACAOPARCEL, ");
		builder.append("   ICAI.ICAI_VLBASEREMUNERACAOREINCID, ");
		builder.append("   ICAI.ICAI_NNPRESTACAO, ");
		builder.append("   ICAI.ICAI_ICREMUNERACAOPAGA, ");
		builder.append("   ICAI.ICAI_ID ");
		builder.append("FROM IMOVEL_COBRANCA_ADMINISTR_ITEM ICAI ");
		builder.append("   INNER JOIN IMOVEL_COBRANCA_SITUACAO ICS ON ICS.ISCB_ID = ICAI.ISCB_ID ");
		builder.append("   INNER JOIN IMOVEL I ON ICS.IMOV_ID = I.IMOV_ID ");
		builder.append("   INNER JOIN SETOR_COMERCIAL S ON I.STCM_ID = S.STCM_ID ");
		builder.append("WHERE ");
		builder.append(" ICAI.ICAI_DTPAGAMENTODOCUMENTO BETWEEN TO_DATE('");
		builder.append(Util.formatarData(remuneracaoCobrancaAdministrativaHelper.getPeriodoPagamentoInicial()));
		builder.append(" 00:00:00");
		builder.append("', 'dd/mm/yyyy HH24:MI:SS') AND TO_DATE('");
		builder.append(Util.formatarData(remuneracaoCobrancaAdministrativaHelper.getPeriodoPagamentoFinal()));
		builder.append(" 23:59:59");
		builder.append("', 'dd/mm/yyyy HH24:MI:SS') ");

		String situacaoRemuneracao = remuneracaoCobrancaAdministrativaHelper.getSituacaoRemuneracao();

		if(!Util.isVazioOuBranco(situacaoRemuneracao)){
			if(situacaoRemuneracao.equals("1") || situacaoRemuneracao.equals("2")){
				builder.append(" AND ICAI.ICAI_ICREMUNERACAOPAGA = " + situacaoRemuneracao + " ");
			}
		}

		boolean existeLocalidadeComSetorComercial = !Util.isVazioOrNulo(remuneracaoCobrancaAdministrativaHelper
						.getLocalidadesComSetorComercial())
						&& !Util.isVazioOrNulo(remuneracaoCobrancaAdministrativaHelper.getSetoresComerciais());
		boolean existeLocalidadeSemSetorComercial = !Util.isVazioOrNulo(remuneracaoCobrancaAdministrativaHelper
						.getLocalidadesSemSetorComercial());

		// Expressao Completa: AND ((I.LOCA_ID IN (47,67) AND I.STCM_ID IN (168,179,290)) OR
		// (I.LOCA_ID IN (50,51,53)))
		// Localidade Com Setor Comercial - P1: (I.LOCA_ID IN (47,67) AND I.STCM_ID IN
		// (168,179,290))
		// Localidade Sem Setor Comercial - P2: (I.LOCA_ID IN (50,51,53))

		if(existeLocalidadeComSetorComercial || existeLocalidadeSemSetorComercial){
			builder.append(" AND ");
		}
		if(existeLocalidadeComSetorComercial && existeLocalidadeSemSetorComercial){
			builder.append(" ( ");
		}

		// Localidade Com Setor Comercial - P1 (Inacio)
		if(existeLocalidadeComSetorComercial){
			builder.append(" (I.LOCA_ID IN (");
			for(Localidade localidade : remuneracaoCobrancaAdministrativaHelper.getLocalidadesComSetorComercial()){
				builder.append(localidade.getId());
				builder.append(",");
			}
			builder.deleteCharAt(builder.length() - 1);
			builder.append(") AND I.STCM_ID IN (");
			for(SetorComercial setorComercial : remuneracaoCobrancaAdministrativaHelper.getSetoresComerciais()){
				builder.append(setorComercial.getId());
				builder.append(",");
			}
			builder.deleteCharAt(builder.length() - 1);
			builder.append(")) ");
		}
		// Localidade Com Setor Comercial - P1 (Fim)

		if(existeLocalidadeComSetorComercial && existeLocalidadeSemSetorComercial){
			builder.append(" OR ");
		}

		// Localidade Sem Setor Comercial - P2 (Inacio)
		if(existeLocalidadeSemSetorComercial){
			builder.append(" (I.LOCA_ID IN (");
			for(Localidade localidade : remuneracaoCobrancaAdministrativaHelper.getLocalidadesSemSetorComercial()){
				builder.append(localidade.getId());
				builder.append(",");
			}
			builder.deleteCharAt(builder.length() - 1);
			builder.append(")) ");
		}
		// Localidade Sem Setor Comercial - P2 (Fim)

		if(existeLocalidadeComSetorComercial && existeLocalidadeSemSetorComercial){
			builder.append(" ) ");
		}

		builder.append("ORDER BY ");
		builder.append("   ICAI.ICAI_DTPAGAMENTODOCUMENTO, ");
		builder.append("   I.LOCA_ID, ");
		builder.append("   S.STCM_CDSETORCOMERCIAL, ");
		builder.append("   I.IMOV_ID ");

		String sqlString = builder.toString();
		return sqlString;
	}

	private String getConsultaContaRemuneracaoCobrancaAdministrativa(Integer contaId, BigDecimal valorRemuneracao){

		StringBuilder builder = new StringBuilder();

		builder.append("SELECT CH.CNHI_AMREFERENCIACONTA ");

		if((valorRemuneracao != null) && (valorRemuneracao.compareTo(BigDecimal.ZERO) > 0)){
			builder.append(" , CH.CNHI_VLAGUA, "); // Caso ICAI_VLREMUNERACAO > 0
			builder.append("   CH.CNHI_VLESGOTO, "); // Caso ICAI_VLREMUNERACAO > 0
			builder.append("   CH.CNHI_VLDEBITOS, "); // Caso ICAI_VLREMUNERACAO > 0
			builder.append("   CH.CNHI_VLCREDITOS "); // Caso ICAI_VLREMUNERACAO > 0
		}else{
			builder.append(" , 0 CNHI_VLAGUA, ");
			builder.append("   0 CNHI_VLESGOTO, ");
			builder.append("   0 CNHI_VLDEBITOS, ");
			builder.append("   0 CNHI_VLCREDITOS ");
		}

		builder.append("FROM CONTA_HISTORICO CH ");

		if(contaId != null){
			builder.append("WHERE ");
			builder.append("CH.CNTA_ID = " + contaId.toString());
		}

		String sqlString = builder.toString();
		return sqlString;
	}

	private String getConsultaGuiaPagamentoRemuneracaoCobrancaAdministrativa(Integer guiaPagamentoId, BigDecimal valorRemuneracao,
					Integer numeroPrestacao){

		StringBuilder builder = new StringBuilder();

		builder.append("SELECT GPPH.GPPH_NNPRESTACAO ");

		if((valorRemuneracao != null) && (valorRemuneracao.compareTo(BigDecimal.ZERO) > 0)){
			builder.append(" , SUM(GPPH.GPPH_VLPRESTACAO) VL_PRESTACAO "); // Caso
			// ICAI_VLREMUNERACAO >
			// 0
		}else{
			builder.append(" , 0 VL_PRESTACAO ");
		}

		builder.append("FROM GUIA_PAGAMENTO_PRESTACAO_HIST GPPH ");

		if(guiaPagamentoId != null){
			builder.append("WHERE ");
			builder.append("GPPH.GPAG_ID = " + guiaPagamentoId.toString() + " ");

			if(numeroPrestacao != null){
				builder.append("AND GPPH.GPPH_NNPRESTACAO = " + numeroPrestacao.toString() + " ");
			}
		}

		// Caso ICAI_VLREMUNERACAOESPEC > 0 ou ICAI_VLREMUNERACAOPARCEL > 0
		if(valorRemuneracao != null && valorRemuneracao.compareTo(BigDecimal.ZERO) > 0){

			builder.append("GROUP BY ");
			builder.append("   GPPH.GPPH_NNPRESTACAO ");
		}

		String sqlString = builder.toString();
		return sqlString;
	}

	/**
	 * Consulta os dados de pagamento para o relatorio de RemunerAcao da cobranca Administrativa
	 * {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return Collection<Object[]>
	 */
	public Collection<Object[]> consultarDadosRemuneracaoCobrancaAdministrativa(RelatorioRemuneracaoCobrancaAdministrativaHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> resultado;
		try{
			String sqlStringBase = getConsultaRemuneracaoCobrancaAdministrativaPagamentos(helper);
			SQLQuery query = session.createSQLQuery(sqlStringBase);

			query.addScalar("ICAI_DTPAGAMENTODOCUMENTO", Hibernate.DATE);
			query.addScalar("LOCA_ID", Hibernate.INTEGER);
			query.addScalar("STCM_CDSETORCOMERCIAL", Hibernate.INTEGER);
			query.addScalar("IMOV_ID", Hibernate.INTEGER);
			query.addScalar("CNTA_ID", Hibernate.INTEGER);
			query.addScalar("GPAG_ID", Hibernate.INTEGER);
			query.addScalar("ICAI_PCREMUNERACAO", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_PCREMUNERACAOESPEC", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_PCREMUNERACAOPARCEL", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_PCREMUNERACAOREINCID", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLREMUNERACAO", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLREMUNERACAOESPEC", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLREMUNERACAOPARCEL", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLREMUNERACAOREINCID", Hibernate.BIG_DECIMAL);
			query.addScalar("DBAC_ID", Hibernate.INTEGER);
			query.addScalar("ICAI_VLBASEREMUNERACAO", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLBASEREMUNERACAOESPEC", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLBASEREMUNERACAOPARCEL", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_VLBASEREMUNERACAOREINCID", Hibernate.BIG_DECIMAL);
			query.addScalar("ICAI_NNPRESTACAO", Hibernate.INTEGER);
			query.addScalar("ICAI_ICREMUNERACAOPAGA", Hibernate.SHORT);
			query.addScalar("ICAI_ID", Hibernate.INTEGER);
			resultado = query.list();
		}catch(Exception e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro durante a consulta");
		}finally{

			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return resultado;
	}

	/**
	 * Consulta os dados da conta para o relatorio de RemunerAcao da cobranca Administrativa
	 * {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return Object[]
	 */
	public Object[] consultarContaRemuneracaoCobrancaAdministrativa(Integer contaId, BigDecimal valorRemuneracao)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Object[] resultado;

		try{
			String sqlStringBase = getConsultaContaRemuneracaoCobrancaAdministrativa(contaId, valorRemuneracao);

			SQLQuery query = session.createSQLQuery(sqlStringBase);

			query.addScalar("CNHI_AMREFERENCIACONTA", Hibernate.INTEGER);
			query.addScalar("CNHI_VLAGUA", Hibernate.BIG_DECIMAL);
			query.addScalar("CNHI_VLESGOTO", Hibernate.BIG_DECIMAL);
			query.addScalar("CNHI_VLDEBITOS", Hibernate.BIG_DECIMAL);
			query.addScalar("CNHI_VLCREDITOS", Hibernate.BIG_DECIMAL);

			resultado = Util.retonarObjetoDeColecaoArray(query.list());

		}catch(Exception e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro durante a consulta");
		}finally{

			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return resultado;
	}

	/**
	 * Consulta os dados da guia de pagamento para o relatorio de RemunerAcao da cobranca
	 * Administrativa {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * 
	 * @param {@link RelatorioRemuneracaoCobrancaAdministrativaHelper}
	 * @return Object[]
	 */
	public Object[] consultarGuiaPagamentoRemuneracaoCobrancaAdministrativa(Integer guiaPagamentoId, BigDecimal valorRemuneracao,
					Integer numeroPrestacao) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Object[] resultado;

		try{
			String sqlStringBase = getConsultaGuiaPagamentoRemuneracaoCobrancaAdministrativa(guiaPagamentoId, valorRemuneracao,
							numeroPrestacao);

			SQLQuery query = session.createSQLQuery(sqlStringBase);

			query.addScalar("GPPH_NNPRESTACAO", Hibernate.INTEGER);
			query.addScalar("VL_PRESTACAO", Hibernate.BIG_DECIMAL);

			resultado = Util.retonarObjetoDeColecaoArray(query.list());

		}catch(Exception e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro durante a consulta");
		}finally{

			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		return resultado;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#isContaCobrancaAdministrativaEmpresaDiversa(java.lang.
	 * Integer, java.lang.Integer, java.lang.Integer)
	 */
	public Boolean isContaCobrancaAdministrativaEmpresaDiversa(Integer idConta, Integer idImovel, Integer idUsuario, Integer idEmpresa)
					throws ErroRepositorioException{

		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(ImovelCobrancaSituacao.class, "imovCobSituacao");
		detachedCriteria.add(Restrictions.eq("imovCobSituacao.imovel.id", idImovel));
		detachedCriteria.add(Restrictions.isNull("imovCobSituacao.dataRetiradaCobranca"));
		detachedCriteria.add(Restrictions.eq("imovCobSituacao.cobrancaSituacao.id", CobrancaSituacao.COBRANCA_ADMINISTRATIVA));
		detachedCriteria.setProjection(Projections.property("imovCobSituacao.cobrancaAcaoAtividadeComando.id"));

		Criteria criteria = HibernateUtil.getSession().createCriteria(CobrancaDocumentoItem.class);
		criteria.createAlias("cobrancaDocumento", "cobrancaDocumento");
		criteria.createAlias("cobrancaDocumento.cobrancaAcaoAtividadeComando", "cobrancaAcaoAtividadeComando");
		criteria.createAlias("cobrancaAcaoAtividadeComando.empresa", "empresa");
		criteria.add(Restrictions.eq("contaGeral.id", idConta));
		criteria.add(Restrictions.ne("empresa.id", idEmpresa));
		criteria.add(Property.forName("cobrancaAcaoAtividadeComando.id").in(detachedCriteria));
		criteria.setProjection(Projections.id());

		Collection<Integer> ids = criteria.list();

		if(!ids.isEmpty()){

			return Boolean.TRUE;

		}else{

			return Boolean.FALSE;

		}

	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#isGuiaPgtPrestacaoCobrancaAdministrativaEmpresaDiversa
	 * (java.lang.Integer, java.lang.Short, java.lang.Integer, java.lang.Integer, java.lang.Integer)
	 */
	public Boolean isGuiaPgtPrestacaoCobrancaAdministrativaEmpresaDiversa(Integer idGuiaPgt, Short numeroPrestacao, Integer idImovel,
					Integer idUsuario, Integer idEmpresa) throws ErroRepositorioException{

		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(ImovelCobrancaSituacao.class, "imovCobSituacao");
		detachedCriteria.add(Restrictions.eq("imovCobSituacao.imovel.id", idImovel));
		detachedCriteria.add(Restrictions.isNull("imovCobSituacao.dataRetiradaCobranca"));
		detachedCriteria.add(Restrictions.eq("imovCobSituacao.cobrancaSituacao.id", CobrancaSituacao.COBRANCA_ADMINISTRATIVA));
		detachedCriteria.setProjection(Projections.property("imovCobSituacao.cobrancaAcaoAtividadeComando.id"));

		Criteria criteria = HibernateUtil.getSession().createCriteria(CobrancaDocumentoItem.class);
		criteria.createAlias("guiaPagamentoGeral", "guiaPagamentoGeral");
		criteria.createAlias("cobrancaDocumento", "cobrancaDocumento");
		criteria.createAlias("cobrancaDocumento.cobrancaAcaoAtividadeComando", "cobrancaAcaoAtividadeComando");
		criteria.createAlias("cobrancaAcaoAtividadeComando.empresa", "empresa");

		criteria.add(Restrictions.eq("guiaPagamentoGeral.id", idGuiaPgt));
		criteria.add(Restrictions.eq("numeroDaPrestacao", numeroPrestacao));
		criteria.add(Restrictions.ne("empresa.id", idEmpresa));
		criteria.add(Property.forName("cobrancaAcaoAtividadeComando.id").in(detachedCriteria));
		criteria.setProjection(Projections.id());

		Collection<Integer> ids = criteria.list();

		if(!ids.isEmpty()){

			return Boolean.TRUE;

		}else{

			return Boolean.FALSE;

		}

	}

	/**
	 * [UC3070] Filtrar Imovel cobranca Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 07/09/2012
	 */
	public Collection<Empresa> pesquisarEmpresaCobrancaAdministrativa(Collection<Integer> idsEmpresa) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Empresa> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" select emp FROM CobrancaContrato contrato ");
			consulta.append(" inner join contrato.empresa emp ");

			if(!Util.isVazioOrNulo(idsEmpresa)){

				consulta.append("where emp.id in (:idsEmpresa)");
				consulta.append(" order by emp.descricao ");

				retorno = (Collection<Empresa>) session.createQuery(consulta.toString()).setParameterList("idsEmpresa", idsEmpresa).list();
			}else{

				retorno = (Collection<Empresa>) session.createQuery(consulta.toString()).list();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Pesquisar Imovel cobranca situacao pelo Id
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public ImovelCobrancaSituacao pesquisarImovelCobrancaSituacaoPeloId(Integer id) throws ErroRepositorioException{

		ImovelCobrancaSituacao imovelCobrancaSituacao = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select iscb ");
			hql.append(" from ImovelCobrancaSituacao iscb ");
			hql.append(" inner join fetch iscb.imovel imovel ");
			hql.append(" inner join fetch imovel.localidade loca ");
			hql.append(" inner join fetch imovel.setorComercial stcm ");
			hql.append(" inner join fetch imovel.quadra qdra ");
			hql.append(" inner join fetch imovel.ligacaoAguaSituacao last ");
			hql.append(" inner join fetch imovel.ligacaoEsgotoSituacao lest ");
			hql.append(" inner join fetch imovel.imovelPerfil iper ");
			hql.append(" left join fetch iscb.cobrancaAcaoAtividadeComando cacm ");
			hql.append(" left join fetch cacm.empresa empr ");
			hql.append(" left join fetch iscb.cobrancaDebitoSituacao cdst ");
			hql.append(" left join fetch iscb.imovelCobrancaMotivoRetirada icmr ");
			hql.append(" where iscb.id = :id ");

			Query query = session.createQuery(hql.toString());
			query.setInteger("id", id);

			imovelCobrancaSituacao = (ImovelCobrancaSituacao) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return imovelCobrancaSituacao;
	}

	/**
	 * [UC0203] Consultar Debitos
	 * [SB0005] Validar autorizacao de acesso ao Imovel pelos usuarios das empresas de cobranca
	 * administrativa
	 * Pesquisar ašltima cobranca Administrativa do Imovel
	 * 
	 * @author Saulo Lima
	 * @date 25/07/2013
	 */
	public CobrancaAcaoAtividadeComando pesquisarUltimaCobrancaAdministrativaImovel(Integer imovelId) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

		try{

			StringBuffer hql = new StringBuffer();

			hql.append("SELECT iscb ");
			hql.append("FROM ImovelCobrancaSituacao iscb ");
			hql.append(" INNER JOIN FETCH iscb.cobrancaAcaoAtividadeComando cacm ");
			hql.append(" INNER JOIN iscb.imovel imov ");
			hql.append(" INNER JOIN iscb.cobrancaSituacao cbst ");
			hql.append("WHERE imov.id = :imovelId ");
			// hql.append(" AND iscb.dataRetiradaCobranca IS NOT NULL ");
			hql.append(" AND cbst.id = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);
			hql.append(" ORDER BY iscb.id DESC");

			Query query = session.createQuery(hql.toString());
			query.setInteger("imovelId", imovelId);

			ImovelCobrancaSituacao resultado = (ImovelCobrancaSituacao) query.setMaxResults(1).uniqueResult();

			if(resultado != null){
				cobrancaAcaoAtividadeComando = resultado.getCobrancaAcaoAtividadeComando();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return cobrancaAcaoAtividadeComando;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Totalizar cobranca Documento Item filtrando pelo Id do Comando
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarCobrancaDocumentoItemPeloComando(Integer idCobrancaAcaoAtividadeComando, Integer idImovel)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select cdst.id, cdst.descricao, count(*), sum(cdit.valorItemCobrado) ");
			hql.append(" from CobrancaDocumentoItem cdit ");
			hql.append(" inner join cdit.cobrancaDocumento cbdo ");
			hql.append(" inner join cdit.cobrancaDebitoSituacao cdst ");
			hql.append(" where cbdo.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando ");
			hql.append("   and cbdo.imovel.id = :idImovel ");
			hql.append(" group by cdst.id, cdst.descricao ");
			hql.append(" order by cdst.id ");

			Query query = session.createQuery(hql.toString());
			query.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);
			query.setInteger("idImovel", idImovel);

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Pesquisar Contas pelo Id do Comando
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> pesquisarContasPeloComandoParaCobrancaAdministrativa(Integer idCobrancaAcaoAtividadeComando,
					Integer idImovel) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select cnta.cnta_amreferenciaconta as referencia, "); // 0
			sql.append("        cnta.cnta_dtvencimentoconta as dataVencimentoConta, "); // 1
			sql.append("        cnta.cnta_vlagua as valorAgua, "); // 2
			sql.append("        cnta.cnta_vlesgoto as valorEsgoto, "); // 3
			sql.append("        cnta.cnta_vldebitos as valorDebitos, "); // 4
			sql.append("        cnta.cnta_vlcreditos as valorCreditos, "); // 5
			sql.append("        cnta.cnta_vlimpostos as valorImposto, "); // 6
			sql.append("        clct.clie_id as idCliente, "); // 7
			sql.append("        cdst.cdst_id as idSituacaoDebito, "); // 8
			sql.append("        cdst.cdst_dssituacaodebito as descricaoSituacaoDebito, "); // 9
			sql.append("        cdit.cdit_dtsituacaodebito as dataSituacaoDebito, "); // 10
			sql.append("        clie.clie_nmcliente as nomeCliente, "); // 11
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, "); // 12
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos "); // 13
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join cobranca_documento cbdo on cbdo.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = cdit.cnta_id ");
			sql.append(" left join conta cnta on cnta.cnta_id = cntg.cnta_id ");
			sql.append(" left join cliente_conta clct on clct.cnta_id = cntg.cnta_id ");
			sql.append(" left join cobranca_debito_situacao cdst on cdst.cdst_id = cdit.cdst_id ");
			sql.append(" left join cliente clie on clie.clie_id = clct.clie_id ");
			sql.append(" where cdit.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorNao ");
			sql.append("   and clct.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and cbdo.cacm_id = :idCobrancaAcaoAtividadeComando ");
			sql.append("   and cbdo.imov_id = :idImovel ");
			sql.append(" union ");
			sql.append(" select cnhi.cnhi_amreferenciaconta as referencia, "); // 0
			sql.append("        cnhi.cnhi_dtvencimentoconta as dataVencimentoConta, "); // 1
			sql.append("        cnhi.cnhi_vlagua as valorAgua, "); // 2
			sql.append("        cnhi.cnhi_vlesgoto as valorEsgoto, "); // 3
			sql.append("        cnhi.cnhi_vldebitos as valorDebitos, "); // 4
			sql.append("        cnhi.cnhi_vlcreditos as valorCreditos, "); // 5
			sql.append("        cnhi.cnhi_vlimpostos as valorImposto, "); // 6
			sql.append("        clch.clie_id as idCliente, "); // 7
			sql.append("        cdst.cdst_id as idSituacaoDebito, "); // 8
			sql.append("        cdst.cdst_dssituacaodebito as descricaoSituacaoDebito, "); // 9
			sql.append("        cdit.cdit_dtsituacaodebito as dataSituacaoDebito, "); // 10
			sql.append("        clie.clie_nmcliente as nomeCliente, "); // 11
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, "); // 12
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos "); // 13
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join cobranca_documento cbdo on cbdo.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = cdit.cnta_id ");
			sql.append(" left join conta_historico cnhi on cnhi.cnta_id = cntg.cnta_id ");
			sql.append(" left join cliente_conta_historico clch on clch.cnta_id = cntg.cnta_id ");
			sql.append(" left join cobranca_debito_situacao cdst on cdst.cdst_id = cdit.cdst_id ");
			sql.append(" left join cliente clie on clie.clie_id = clch.clie_id ");
			sql.append(" where cdit.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorSim ");
			sql.append("   and clch.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and cbdo.cacm_id = :idCobrancaAcaoAtividadeComando ");
			sql.append("   and cbdo.imov_id = :idImovel ");
			sql.append(" order by referencia ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("dataVencimentoConta", Hibernate.DATE);
			sqlQuery.addScalar("valorAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorDebitos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorCreditos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorImposto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("idCliente", Hibernate.INTEGER);
			sqlQuery.addScalar("idSituacaoDebito", Hibernate.INTEGER);
			sqlQuery.addScalar("descricaoSituacaoDebito", Hibernate.STRING);
			sqlQuery.addScalar("dataSituacaoDebito", Hibernate.DATE);
			sqlQuery.addScalar("nomeCliente", Hibernate.STRING);
			sqlQuery.addScalar("valorItemCobrado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorAcrescimos", Hibernate.BIG_DECIMAL);

			sqlQuery.setInteger("documentoTipo", DocumentoTipo.CONTA);
			sqlQuery.setInteger("clienteRelacaoTipo", ClienteRelacaoTipo.USUARIO);
			sqlQuery.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);
			sqlQuery.setInteger("idImovel", idImovel);
			sqlQuery.setShort("indicadorNao", ConstantesSistema.NAO);
			sqlQuery.setShort("indicadorSim", ConstantesSistema.SIM);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Pesquisar Guias pelo Id do Comando
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> pesquisarGuiasPeloComandoParaCobrancaAdministrativa(Integer idCobrancaAcaoAtividadeComando, Integer idImovel)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select gppr.gpag_id as id, ");
			sql.append("        gppr.gppr_nnprestacao as numeroPrestacao, ");
			sql.append("        gppr.gppr_dtemissao as dataEmissao, ");
			sql.append("        dbtp.dbtp_id as idTipoDebito, ");
			sql.append("        dbtp.dbtp_dsdebitotipo as descricaoTipoDebito, ");
			sql.append("        gppr.gppr_vlprestacao as valorPrestacao, ");
			sql.append("        clie.clie_id as idCliente, ");
			sql.append("        clie.clie_nmcliente as nomeCliente, ");
			sql.append("        cdst.cdst_id as idSituacaoDebito, ");
			sql.append("        cdst.cdst_dssituacaodebito as descricaoSituacaoDebito, ");
			sql.append("        cdit.cdit_dtsituacaodebito as dataSituacaoDebito, ");
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, ");
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos ");
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join cobranca_documento cbdo on cbdo.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join guia_pagamento_prestacao gppr on (gppr.gpag_id = cdit.gpag_id ");
			sql.append("                                         and gppr.gppr_nnprestacao = cdit.cdit_nnprestacao) ");
			sql.append(" left join debito_tipo dbtp on dbtp.dbtp_id = gppr.dbtp_id ");
			sql.append(" left join cliente_guia_pagamento clgp on clgp.gpag_id = gppr.gpag_id ");
			sql.append(" left join cliente clie on clie.clie_id = clgp.clie_id ");
			sql.append(" left join cobranca_debito_situacao cdst on cdst.cdst_id = cdit.cdst_id ");
			sql.append(" where clgp.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and cbdo.cacm_id = :idCobrancaAcaoAtividadeComando ");
			sql.append("   and cbdo.imov_id = :idImovel ");
			sql.append("   and cdit.dotp_id = :documentoTipo ");
			sql.append(" union ");
			sql.append(" select gpph.gpag_id as id, ");
			sql.append("        gpph.gpph_nnprestacao as numeroPrestacao, ");
			sql.append("        gpph.gpph_dtemissao as dataEmissao, ");
			sql.append("        dbtp.dbtp_id as idTipoDebito, ");
			sql.append("        dbtp.dbtp_dsdebitotipo as descricaoTipoDebito, ");
			sql.append("        gpph.gpph_vlprestacao as valorPrestacao, ");
			sql.append("        clie.clie_id as idCliente, ");
			sql.append("        clie.clie_nmcliente as nomeCliente, ");
			sql.append("        cdst.cdst_id as idSituacaoDebito, ");
			sql.append("        cdst.cdst_dssituacaodebito as descricaoSituacaoDebito, ");
			sql.append("        cdit.cdit_dtsituacaodebito as dataSituacaoDebito, ");
			sql.append("        cdit.cdit_vlitemcobrado as valorItemCobrado, ");
			sql.append("        cdit.cdit_vlacrescimos as valorAcrescimos ");
			sql.append(" from cobranca_documento_item cdit ");
			sql.append(" left join cobranca_documento cbdo on cbdo.cbdo_id = cdit.cbdo_id ");
			sql.append(" left join guia_pagamento_prestacao_hist gpph on (gpph.gpag_id = cdit.gpag_id ");
			sql.append("                                              and gpph.gpph_nnprestacao = cdit.cdit_nnprestacao) ");
			sql.append(" left join debito_tipo dbtp on dbtp.dbtp_id = gpph.dbtp_id ");
			sql.append(" left join cliente_guia_pagamento_hist cgph on cgph.gpag_id = gpph.gpag_id ");
			sql.append(" left join cliente clie on clie.clie_id = cgph.clie_id ");
			sql.append(" left join cobranca_debito_situacao cdst on cdst.cdst_id = cdit.cdst_id ");
			sql.append(" where cgph.crtp_id = :clienteRelacaoTipo ");
			sql.append("   and cbdo.cacm_id = :idCobrancaAcaoAtividadeComando ");
			sql.append("   and cbdo.imov_id = :idImovel ");
			sql.append("   and cdit.dotp_id = :documentoTipo ");
			sql.append(" order by id, numeroPrestacao, descricaoTipoDebito ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("id", Hibernate.INTEGER);
			sqlQuery.addScalar("numeroPrestacao", Hibernate.INTEGER);
			sqlQuery.addScalar("dataEmissao", Hibernate.DATE);
			sqlQuery.addScalar("idTipoDebito", Hibernate.INTEGER);
			sqlQuery.addScalar("descricaoTipoDebito", Hibernate.STRING);
			sqlQuery.addScalar("valorPrestacao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("idCliente", Hibernate.INTEGER);
			sqlQuery.addScalar("nomeCliente", Hibernate.STRING);
			sqlQuery.addScalar("idSituacaoDebito", Hibernate.INTEGER);
			sqlQuery.addScalar("descricaoSituacaoDebito", Hibernate.STRING);
			sqlQuery.addScalar("dataSituacaoDebito", Hibernate.DATE);
			sqlQuery.addScalar("valorItemCobrado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorAcrescimos", Hibernate.BIG_DECIMAL);

			sqlQuery.setInteger("clienteRelacaoTipo", ClienteRelacaoTipo.USUARIO);
			sqlQuery.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);
			sqlQuery.setInteger("idImovel", idImovel);
			sqlQuery.setInteger("documentoTipo", DocumentoTipo.GUIA_PAGAMENTO);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Totalizar Imovel cobranca Administrativa pelo Id da situacao de cobranca do Imovel
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> totalizarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select '" + ImovelCobrancaAdministrivaItem.PADRAO + "' as tipo, ");
			sql.append("        icai_pcremuneracao as percentual, ");
			sql.append("        sum(icai_vlremuneracao) as valor, 1 as seq ");
			sql.append(" from imovel_cobranca_administr_item icai ");
			sql.append(" where iscb_id = :idImovelCobrancaSituacao and icai_pcremuneracao is not null ");
			sql.append(" group by icai_pcremuneracao ");
			sql.append(" union ");
			sql.append(" select '" + ImovelCobrancaAdministrivaItem.PARCELAMENTO + "' as tipo, ");
			sql.append("        icai_pcremuneracaoparcel as percentual, ");
			sql.append("        sum(icai_vlremuneracaoparcel) as valor, 2 as seq ");
			sql.append(" from imovel_cobranca_administr_item  icai ");
			sql.append(" where iscb_id = :idImovelCobrancaSituacao and icai_pcremuneracaoparcel is not null ");
			sql.append(" group by icai_pcremuneracaoparcel ");
			sql.append(" union ");
			sql.append(" select '" + ImovelCobrancaAdministrivaItem.ESPECIAL + "' as tipo, ");
			sql.append("        icai_pcremuneracaoespec as percentual, ");
			sql.append("        sum(icai_vlremuneracaoespec) as valor, 3 as seq ");
			sql.append(" from imovel_cobranca_administr_item  icai ");
			sql.append(" where iscb_id = :idImovelCobrancaSituacao and icai_pcremuneracaoespec is not null ");
			sql.append(" group by icai_pcremuneracaoespec ");
			sql.append(" union ");
			sql.append(" select '" + ImovelCobrancaAdministrivaItem.REINCIDENCIA + "' as tipo, ");
			sql.append("        icai_pcremuneracaoreincid as percentual, ");
			sql.append("        sum(icai_vlremuneracaoreincid) as valor, 4 as seq ");
			sql.append(" from imovel_cobranca_administr_item  icai ");
			sql.append(" where iscb_id = :idImovelCobrancaSituacao and icai_pcremuneracaoreincid is not null ");
			sql.append(" group by icai_pcremuneracaoreincid ");
			sql.append(" order by seq ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao);

			sqlQuery.addScalar("tipo", Hibernate.STRING);
			sqlQuery.addScalar("percentual", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valor", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("seq", Hibernate.INTEGER);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imovel cobranca Administrativa]
	 * Pesquisar Imovel em cobranca Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Collection<ImovelCobrancaSituacao> pesquisarImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro,
					int pageOffset) throws ErroRepositorioException{

		List retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();
		Query query = null;

		try{

			hql.append(" select imovCobSit ");

			if(filtro.getIdsCategoria() == null && filtro.getIdsSubcategoria() == null){

				hql.append(" from ImovelCobrancaSituacao imovCobSit ");
				hql.append(" inner join imovCobSit.imovel imov ");
				hql.append(" inner join fetch imovCobSit.cliente cli");
				hql.append(" inner join fetch cli.clienteTipo cliTp ");
				// hql.append(" inner join fetch cli.clienteEndereco cliEnd ");
				hql.append(" inner join fetch imovCobSit.cobrancaAcaoAtividadeComando comando ");
				hql.append(" left join fetch imovCobSit.cobrancaDebitoSituacao cds ");
				hql.append(" left join fetch imovCobSit.imovelCobrancaMotivoRetirada icmr ");
				hql.append(" left join fetch comando.empresa emp ");
				hql.append(" where ");
				hql.append(" imovCobSit.cobrancaSituacao.id = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA.toString() + " and ");
			}else{

				hql.append(" from ImovelCobrancaSituacao imovCobSit ");
				hql.append(" inner join imovCobSit.imovel imov ");
				hql.append(" inner join fetch imovCobSit.cliente cli ");
				hql.append(" inner join fetch imovCobSit.cobrancaAcaoAtividadeComando comando ");
				hql.append(" left join fetch imovCobSit.cobrancaDebitoSituacao cds ");
				hql.append(" left join fetch imovCobSit.imovelCobrancaMotivoRetirada icmr ");
				hql.append(" left join fetch comando.empresa emp ");
				hql.append(" where exists (");
				hql.append(" select imov.id from ImovelSubcategoria iscb ");
				hql.append(" inner join iscb.comp_id.imovel imov1 ");
				hql.append(" inner join iscb.comp_id.subcategoria subcat ");
				hql.append(" inner join subcat.categoria categ where imov1.id = imov.id ");

				if(filtro.getIdsCategoria() != null){

					hql.append(" and categ.id in (:idsCategoria)  ");
					parameters.put("idsCategoria", filtro.getIdsCategoria());
				}

				if(filtro.getIdsSubcategoria() != null){

					hql.append(" and subcat.id in (:idsSubcategoria) ");
					parameters.put("idsSubcategoria", filtro.getIdsSubcategoria());
				}

				hql.append(" ) ");
				hql.append(" and imovCobSit.cobrancaSituacao.id = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA.toString() + " and ");
			}

			if(filtro.getIdComando() != null){

				hql.append(" comando.id = :idComando and ");
				parameters.put("idComando", filtro.getIdComando());
			}

			if(filtro.getIdsEmpresa() != null){

				hql.append(" emp.id in (:idEmpresa) and ");
				parameters.put("idEmpresa", filtro.getIdsEmpresa());
			}

			if(filtro.getIdImovel() != null){

				hql.append(" imov.id = :idImovel and ");
				parameters.put("idImovel", filtro.getIdImovel());
			}

			if(filtro.getIdCliente() != null){

				hql.append(" cli.id = :idCliente and ");
				parameters.put("idCliente", filtro.getIdCliente());
			}

			if(filtro.getIdsGerenciaRegional() != null){

				hql.append(" imov.localidade.gerenciaRegional.id in (:idGerenciaRegional) and ");
				parameters.put("idGerenciaRegional", filtro.getIdsGerenciaRegional());
			}

			if(filtro.getIdsUnidadeNegocio() != null){

				hql.append(" imov.localidade.unidadeNegocio.id in (:idUnidadeNegocio) and ");
				parameters.put("idUnidadeNegocio", filtro.getIdsUnidadeNegocio());
			}

			if(filtro.getIdLocalidadeInicial() != null){

				hql.append(" imov.localidade.id >= :idLocalidadeInicial and ");
				hql.append(" imov.localidade.id <= :idLocalidadeFinal and ");
				parameters.put("idLocalidadeInicial", filtro.getIdLocalidadeInicial());
				parameters.put("idLocalidadeFinal", filtro.getIdLocalidadeFinal());

				if(filtro.getCodigoSetorComercialInicial() != null){

					hql.append(" imov.setorComercial.codigo >= :codigoSetorInicial and ");
					hql.append(" imov.setorComercial.codigo <= :codigoSetorFinal and ");
					parameters.put("codigoSetorInicial", filtro.getCodigoSetorComercialInicial().intValue());
					parameters.put("codigoSetorFinal", filtro.getCodigoSetorComercialFinal().intValue());

					if(filtro.getNumeroQuadraInicial() != null){

						hql.append(" imov.quadra.numeroQuadra >= :numeroQuadraInicial and ");
						hql.append(" imov.quadra.numeroQuadra <= :numeroQuadraFinal and ");
						parameters.put("numeroQuadraInicial", filtro.getNumeroQuadraInicial());
						parameters.put("numeroQuadraFinal", filtro.getNumeroQuadraFinal());
					}
				}
			}

			if(filtro.getIdsImoveis() != null){

				hql.append(" imov.id in (:idsImovel) and ");
				parameters.put("idsImovel", filtro.getIdsImoveis());
			}

			if(filtro.getIdsLigacaoAguaSituacao() != null){

				hql.append(" imov.ligacaoAguaSituacao.id in (:idsLigacaoAguaSituacao) and ");
				parameters.put("idsLigacaoAguaSituacao", filtro.getIdsLigacaoAguaSituacao());
			}

			if(filtro.getIdsLigacaoEsgotoSituacao() != null){

				hql.append(" imov.ligacaoEsgotoSituacao.id in (:idsLigacaoEsgotoSituacao) and ");
				parameters.put("idsLigacaoEsgotoSituacao", filtro.getIdsLigacaoEsgotoSituacao());
			}

			if(filtro.getValorDebitoInicial() != null){

				hql.append(" imovCobSit.valorDebito >= :valorDebitoInicial and ");
				hql.append(" imovCobSit.valorDebito <= :valorDebitoFinal and ");
				parameters.put("valorDebitoInicial", filtro.getValorDebitoInicial());
				parameters.put("valorDebitoFinal", filtro.getValorDebitoFinal());
			}

			if(filtro.getPeriodoInclusaoInicial() != null){

				hql.append(" imovCobSit.dataImplantacaoCobranca >= :periodoInclusaoInicial and ");
				hql.append(" imovCobSit.dataImplantacaoCobranca <= :periodoInclusaoFinal and ");
				parameters.put("periodoInclusaoInicial", filtro.getPeriodoInclusaoInicial());
				parameters.put("periodoInclusaoFinal", filtro.getPeriodoInclusaoFinal());
			}

			if(filtro.getPeriodoRetiradaInicial() != null){

				hql.append(" imovCobSit.dataRetiradaCobranca >= :periodoRetiradaInicial and ");
				hql.append(" imovCobSit.dataRetiradaCobranca <= :periodoRetiradaFinal and ");
				parameters.put("periodoRetiradaInicial", filtro.getPeriodoRetiradaInicial());
				parameters.put("periodoRetiradaFinal", filtro.getPeriodoRetiradaFinal());
			}

			if(filtro.getIndicadorSituacaoCobrancaAdministrativa() != null){

				if(filtro.getIndicadorSituacaoCobrancaAdministrativa().equals(ImovelCobrancaSituacao.SITUACAO_PENDENTE)){

					hql.append(" imovCobSit.dataRetiradaCobranca is null and ");
				}else if(filtro.getIndicadorSituacaoCobrancaAdministrativa().equals(ImovelCobrancaSituacao.SITUACAO_ENCERRADA)){

					hql.append(" imovCobSit.dataRetiradaCobranca is not null and ");
				}
			}

			if(filtro.getIdsMotivoRetirada() != null){

				hql.append(" imovCobSit.imovelCobrancaMotivoRetirada.id in (:idsMotivoRetirada) and ");
				parameters.put("idsMotivoRetirada", filtro.getIdsMotivoRetirada());
			}

			String hqlAux = hql.substring(hql.length() - 4, hql.length());
			String orderBy = " order by imov.id asc, imovCobSit.dataImplantacaoCobranca desc ";

			if(hqlAux.equals("and ")){

				query = session.createQuery(hql.substring(0, hql.length() - 4) + orderBy);
			}else{

				hqlAux = "";
				hqlAux = hql.substring(hql.length() - 6, hql.length());
				if(hqlAux.equals("where ")){

					query = session.createQuery(hql.substring(0, hql.length() - 6) + orderBy);
				}else{

					query = session.createQuery(hql.toString() + orderBy);
				}
			}

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){

				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){

					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);

				}else if(parameters.get(key) instanceof Integer){

					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof Date){

					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof Collection){

					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else{

					query.setParameter(key, parameters.get(key));
				}
			}

			if(pageOffset < 0){
				retorno = (List) query.list();
			}else{
				retorno = (List) query.setFirstResult(10 * pageOffset).setMaxResults(10).list();
			}
		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Pesquisar Contas cobranca Administrativa pelo Id da situacao de cobranca do Imovel
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> pesquisarContasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select cnta.cnta_id as idConta, ");
			sql.append("        cnta.cnta_amreferenciaconta as referencia, ");
			sql.append("        cnta.cnta_vlagua as valorAgua, ");
			sql.append("        cnta.cnta_vlesgoto as valorEsgoto, ");
			sql.append("        cnta.cnta_vldebitos as valorDebitos, ");
			sql.append("        cnta.cnta_vlcreditos as valorCreditos, ");
			sql.append("        cnta.cnta_vlimpostos as valorImposto, ");
			sql.append("        icai.icai_pcremuneracao as percentualRemuneracao, ");
			sql.append("        icai.icai_vlremuneracao as valorRemuneracao, ");
			sql.append("        icai.icai_pcremuneracaoparcel as percentualRemuneracaoParcelado, ");
			sql.append("        icai.icai_vlremuneracaoparcel as valorRemuneracaoParcelado, ");
			sql.append("        icai.icai_pcremuneracaoespec as percentualRemuneracaoEspecial, ");
			sql.append("        icai.icai_vlremuneracaoespec as valorRemuneracaoEspecial, ");
			sql.append("        icai.icai_pcremuneracaoreincid as percentualRemuneracaoReinciden, ");
			sql.append("        icai.icai_vlremuneracaoreincid as valorRemuneracaoReincidente ");
			sql.append(" from imovel_cobranca_administr_item icai ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = icai.cnta_id ");
			sql.append(" left join conta cnta on cnta.cnta_id = cntg.cnta_id ");
			sql.append(" where icai.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorNao ");
			sql.append("   and icai.iscb_id = :idImovelCobrancaSituacao ");
			sql.append("   and (icai_vlremuneracao is not null or ");
			sql.append("        icai_vlremuneracaoparcel is not null or ");
			sql.append("        icai_vlremuneracaoespec is not null or ");
			sql.append("        icai_vlremuneracaoreincid is not null) ");
			sql.append("   and (icai_pcremuneracao is not null or ");
			sql.append("        icai_pcremuneracaoparcel is not null or ");
			sql.append("        icai_pcremuneracaoespec is not null or ");
			sql.append("        icai_pcremuneracaoreincid is not null) ");
			sql.append(" union ");
			sql.append(" select cnhi.cnta_id as idConta, ");
			sql.append("        cnhi.cnhi_amreferenciaconta as referencia, ");
			sql.append("        cnhi.cnhi_vlagua as valorAgua, ");
			sql.append("        cnhi.cnhi_vlesgoto as valorEsgoto, ");
			sql.append("        cnhi.cnhi_vldebitos as valorDebitos, ");
			sql.append("        cnhi.cnhi_vlcreditos as valorCreditos, ");
			sql.append("        cnhi.cnhi_vlimpostos as valorImposto, ");
			sql.append("        icai.icai_pcremuneracao as percentualRemuneracao, ");
			sql.append("        icai.icai_vlremuneracao as valorRemuneracao, ");
			sql.append("        icai.icai_pcremuneracaoparcel as percentualRemuneracaoParcelado, ");
			sql.append("        icai.icai_vlremuneracaoparcel as valorRemuneracaoParcelado, ");
			sql.append("        icai.icai_pcremuneracaoespec as percentualRemuneracaoEspecial, ");
			sql.append("        icai.icai_vlremuneracaoespec as valorRemuneracaoEspecial, ");
			sql.append("        icai.icai_pcremuneracaoreincid as percentualRemuneracaoReinciden, ");
			sql.append("        icai.icai_vlremuneracaoreincid as valorRemuneracaoReincidente ");
			sql.append(" from imovel_cobranca_administr_item icai ");
			sql.append(" left join conta_geral cntg on cntg.cnta_id = icai.cnta_id ");
			sql.append(" left join conta_historico cnhi on cnhi.cnta_id = cntg.cnta_id ");
			sql.append(" where icai.dotp_id = :documentoTipo ");
			sql.append("   and cntg.cntg_ichistorico = :indicadorSim ");
			sql.append("   and icai.iscb_id = :idImovelCobrancaSituacao ");
			sql.append("   and (icai_vlremuneracao is not null or ");
			sql.append("        icai_vlremuneracaoparcel is not null or ");
			sql.append("        icai_vlremuneracaoespec is not null or ");
			sql.append("        icai_vlremuneracaoreincid is not null) ");
			sql.append("   and (icai_pcremuneracao is not null or ");
			sql.append("        icai_pcremuneracaoparcel is not null or ");
			sql.append("        icai_pcremuneracaoespec is not null or ");
			sql.append("        icai_pcremuneracaoreincid is not null) ");
			sql.append(" order by referencia, idConta ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("idConta", Hibernate.INTEGER);
			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("valorAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorDebitos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorCreditos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorImposto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoParcelado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoParcelado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoReinciden", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoReincidente", Hibernate.BIG_DECIMAL);

			sqlQuery.setInteger("documentoTipo", DocumentoTipo.CONTA);
			sqlQuery.setShort("indicadorNao", ConstantesSistema.NAO);
			sqlQuery.setShort("indicadorSim", ConstantesSistema.SIM);
			sqlQuery.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0001] Consultar Dados da cobranca Administrativa do Imovel
	 * Pesquisar Guias cobranca Administrativa pelo Id da situacao de cobranca do Imovel
	 * 
	 * @author Hebert Falcao
	 * @date 15/09/2012
	 */
	public Collection<Object[]> pesquisarGuiasImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select gppr.gpag_id as idGuia, ");
			sql.append("        gppr.gppr_nnprestacao as numeroPrestacao, ");
			sql.append("        sum(gppr.gppr_vlprestacao)  as valorPrestacao, ");
			sql.append("        icai.icai_pcremuneracao as percentualRemuneracao, ");
			sql.append("        icai.icai_vlremuneracao as valorRemuneracao, ");
			sql.append("        icai.icai_pcremuneracaoparcel as percentualRemuneracaoParcelado, ");
			sql.append("        icai.icai_vlremuneracaoparcel as valorRemuneracaoParcelado, ");
			sql.append("        icai.icai_pcremuneracaoespec as percentualRemuneracaoEspecial, ");
			sql.append("        icai.icai_vlremuneracaoespec as valorRemuneracaoEspecial, ");
			sql.append("        icai.icai_pcremuneracaoreincid as percentualRemuneracaoReinciden, ");
			sql.append("        icai.icai_vlremuneracaoreincid as valorRemuneracaoReincidente ");
			sql.append(" from imovel_cobranca_administr_item icai ");
			sql.append(" inner join guia_pagamento_prestacao gppr on (gppr.gpag_id = icai.gpag_id and ");
			sql.append("                                             gppr.gppr_nnprestacao = icai.icai_nnprestacao) ");
			sql.append(" where icai.dotp_id = :documentoTipo ");
			sql.append("   and icai.iscb_id = :idImovelCobrancaSituacao ");
			sql.append("   and (icai_vlremuneracao is not null or ");
			sql.append("        icai_vlremuneracaoparcel is not null or ");
			sql.append("        icai_vlremuneracaoespec is not null or ");
			sql.append("        icai_vlremuneracaoreincid is not null) ");
			sql.append("   and (icai_pcremuneracao is not null or ");
			sql.append("        icai_pcremuneracaoparcel is not null or ");
			sql.append("        icai_pcremuneracaoespec is not null or ");
			sql.append("        icai_pcremuneracaoreincid is not null) ");
			sql.append("group by ");
			sql.append("	gppr.gpag_id, ");
			sql.append("	gppr.gppr_nnprestacao, ");
			sql.append("	icai.icai_pcremuneracao, ");
			sql.append("	icai.icai_vlremuneracao, ");
			sql.append("	icai.icai_pcremuneracaoparcel, ");
			sql.append("	icai.icai_vlremuneracaoparcel, ");
			sql.append("	icai.icai_pcremuneracaoespec, ");
			sql.append("	icai.icai_vlremuneracaoespec, ");
			sql.append("	icai.icai_pcremuneracaoreincid, ");
			sql.append("	icai.icai_vlremuneracaoreincid ");
			sql.append(" union ");
			sql.append(" select gpph.gpag_id as idGuia, ");
			sql.append("        gpph.gpph_nnprestacao as numeroPrestacao, ");
			sql.append("        sum(gpph.gpph_vlprestacao)  as valorPrestacao, ");
			sql.append("        icai.icai_pcremuneracao as percentualRemuneracao, ");
			sql.append("        icai.icai_vlremuneracao as valorRemuneracao, ");
			sql.append("        icai.icai_pcremuneracaoparcel as percentualRemuneracaoParcelado, ");
			sql.append("        icai.icai_vlremuneracaoparcel as valorRemuneracaoParcelado, ");
			sql.append("        icai.icai_pcremuneracaoespec as percentualRemuneracaoEspecial, ");
			sql.append("        icai.icai_vlremuneracaoespec as valorRemuneracaoEspecial, ");
			sql.append("        icai.icai_pcremuneracaoreincid as percentualRemuneracaoReinciden, ");
			sql.append("        icai.icai_vlremuneracaoreincid as valorRemuneracaoReincidente ");
			sql.append(" from imovel_cobranca_administr_item icai ");
			sql.append(" inner join guia_pagamento_prestacao_hist gpph on (gpph.gpag_id = icai.gpag_id and ");
			sql.append("                                                  gpph.gpph_nnprestacao = icai.icai_nnprestacao) ");
			sql.append(" where icai.dotp_id = :documentoTipo ");
			sql.append("   and icai.iscb_id = :idImovelCobrancaSituacao ");
			sql.append("   and (icai_vlremuneracao is not null or ");
			sql.append("        icai_vlremuneracaoparcel is not null or ");
			sql.append("        icai_vlremuneracaoespec is not null or ");
			sql.append("        icai_vlremuneracaoreincid is not null) ");
			sql.append("   and (icai_pcremuneracao is not null or ");
			sql.append("        icai_pcremuneracaoparcel is not null or ");
			sql.append("        icai_pcremuneracaoespec is not null or ");
			sql.append("        icai_pcremuneracaoreincid is not null) ");
			sql.append("group by ");
			sql.append("	gpph.gpag_id, ");
			sql.append("	gpph.gpph_nnprestacao, ");
			sql.append("	icai.icai_pcremuneracao, ");
			sql.append("	icai.icai_vlremuneracao, ");
			sql.append("	icai.icai_pcremuneracaoparcel, ");
			sql.append("	icai.icai_vlremuneracaoparcel, ");
			sql.append("	icai.icai_pcremuneracaoespec, ");
			sql.append("	icai.icai_vlremuneracaoespec, ");
			sql.append("	icai.icai_pcremuneracaoreincid, ");
			sql.append("	icai.icai_vlremuneracaoreincid ");
			sql.append(" order by idGuia, numeroPrestacao ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("idGuia", Hibernate.INTEGER);
			sqlQuery.addScalar("numeroPrestacao", Hibernate.INTEGER);
			sqlQuery.addScalar("valorPrestacao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoParcelado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoParcelado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracaoReinciden", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracaoReincidente", Hibernate.BIG_DECIMAL);

			sqlQuery.setInteger("documentoTipo", DocumentoTipo.GUIA_PAGAMENTO);
			sqlQuery.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * <<Inclui>> [UC3070 - Filtrar Imovel cobranca Administrativa]
	 * Pesquisar Imovel em cobranca Administrativa
	 * 
	 * @author Anderson Italo
	 * @date 16/09/2012
	 */
	public Integer pesquisarQuantidadeImovelCobrancaAdministrativa(FiltroImovelCobrancaAdministrativaHelper filtro)
					throws ErroRepositorioException{

		Integer retorno;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();
		Map parameters = new HashMap();
		Query query = null;

		try{

			hql.append(" select count(imov.id) ");

			if(filtro.getIdsCategoria() == null && filtro.getIdsSubcategoria() == null){

				hql.append(" from ImovelCobrancaSituacao imovCobSit ");
				hql.append(" inner join imovCobSit.imovel imov ");
				hql.append(" inner join imovCobSit.cliente cli ");
				hql.append(" inner join imovCobSit.cobrancaAcaoAtividadeComando comando ");
				hql.append(" left join comando.empresa emp ");
				hql.append(" where ");
				hql.append(" imovCobSit.cobrancaSituacao.id = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA.toString() + " and ");
			}else{

				hql.append(" from ImovelCobrancaSituacao imovCobSit ");
				hql.append(" inner join imovCobSit.imovel imov ");
				hql.append(" inner join imovCobSit.cliente cli ");
				hql.append(" inner join imovCobSit.cobrancaAcaoAtividadeComando comando ");
				hql.append(" left join comando.empresa emp ");
				hql.append(" where exists (");
				hql.append(" select imov.id from ImovelSubcategoria iscb ");
				hql.append(" inner join iscb.comp_id.imovel imov1 ");
				hql.append(" inner join iscb.comp_id.subcategoria subcat ");
				hql.append(" inner join subcat.categoria categ where imov1.id = imov.id ");

				if(filtro.getIdsCategoria() != null){

					hql.append(" and categ.id in (:idsCategoria)  ");
					parameters.put("idsCategoria", filtro.getIdsCategoria());
				}

				if(filtro.getIdsSubcategoria() != null){

					hql.append(" and subcat.id in (:idsSubcategoria) ");
					parameters.put("idsSubcategoria", filtro.getIdsSubcategoria());
				}

				hql.append(" ) ");
				hql.append(" and imovCobSit.cobrancaSituacao.id = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA.toString() + " and ");
			}

			if(filtro.getIdComando() != null){

				hql.append(" comando.id = :idComando and ");
				parameters.put("idComando", filtro.getIdComando());
			}

			if(filtro.getIdsEmpresa() != null){

				hql.append(" emp.id in (:idEmpresa) and ");
				parameters.put("idEmpresa", filtro.getIdsEmpresa());
			}

			if(filtro.getIdImovel() != null){

				hql.append(" imov.id = :idImovel and ");
				parameters.put("idImovel", filtro.getIdImovel());
			}

			if(filtro.getIdCliente() != null){

				hql.append(" cli.id = :idCliente and ");
				parameters.put("idCliente", filtro.getIdCliente());
			}

			if(filtro.getIdsGerenciaRegional() != null){

				hql.append(" imov.localidade.gerenciaRegional.id in (:idGerenciaRegional) and ");
				parameters.put("idGerenciaRegional", filtro.getIdsGerenciaRegional());
			}

			if(filtro.getIdsUnidadeNegocio() != null){

				hql.append(" imov.localidade.unidadeNegocio.id in (:idUnidadeNegocio) and ");
				parameters.put("idUnidadeNegocio", filtro.getIdsUnidadeNegocio());
			}

			if(filtro.getIdLocalidadeInicial() != null){

				hql.append(" imov.localidade.id >= :idLocalidadeInicial and ");
				hql.append(" imov.localidade.id <= :idLocalidadeFinal and ");
				parameters.put("idLocalidadeInicial", filtro.getIdLocalidadeInicial());
				parameters.put("idLocalidadeFinal", filtro.getIdLocalidadeFinal());

				if(filtro.getCodigoSetorComercialInicial() != null){

					hql.append(" imov.setorComercial.codigo >= :codigoSetorInicial and ");
					hql.append(" imov.setorComercial.codigo <= :codigoSetorFinal and ");
					parameters.put("codigoSetorInicial", filtro.getCodigoSetorComercialInicial().intValue());
					parameters.put("codigoSetorFinal", filtro.getCodigoSetorComercialFinal().intValue());

					if(filtro.getNumeroQuadraInicial() != null){

						hql.append(" imov.quadra.numeroQuadra >= :numeroQuadraInicial and ");
						hql.append(" imov.quadra.numeroQuadra <= :numeroQuadraFinal and ");
						parameters.put("numeroQuadraInicial", filtro.getNumeroQuadraInicial());
						parameters.put("numeroQuadraFinal", filtro.getNumeroQuadraFinal());
					}
				}
			}

			if(filtro.getIdsImoveis() != null){

				hql.append(" imov.id in (:idsImovel) and ");
				parameters.put("idsImovel", filtro.getIdsImoveis());
			}

			if(filtro.getIdsLigacaoAguaSituacao() != null){

				hql.append(" imov.ligacaoAguaSituacao.id in (:idsLigacaoAguaSituacao) and ");
				parameters.put("idsLigacaoAguaSituacao", filtro.getIdsLigacaoAguaSituacao());
			}

			if(filtro.getIdsLigacaoEsgotoSituacao() != null){

				hql.append(" imov.ligacaoEsgotoSituacao.id in (:idsLigacaoEsgotoSituacao) and ");
				parameters.put("idsLigacaoEsgotoSituacao", filtro.getIdsLigacaoEsgotoSituacao());
			}

			if(filtro.getValorDebitoInicial() != null){

				hql.append(" imovCobSit.valorDebito >= :valorDebitoInicial and ");
				hql.append(" imovCobSit.valorDebito <= :valorDebitoFinal and ");
				parameters.put("valorDebitoInicial", filtro.getValorDebitoInicial());
				parameters.put("valorDebitoFinal", filtro.getValorDebitoFinal());
			}

			if(filtro.getPeriodoInclusaoInicial() != null){

				hql.append(" imovCobSit.dataImplantacaoCobranca >= :periodoInclusaoInicial and ");
				hql.append(" imovCobSit.dataImplantacaoCobranca <= :periodoInclusaoFinal and ");
				parameters.put("periodoInclusaoInicial", filtro.getPeriodoInclusaoInicial());
				parameters.put("periodoInclusaoFinal", filtro.getPeriodoInclusaoFinal());
			}

			if(filtro.getPeriodoRetiradaInicial() != null){

				hql.append(" imovCobSit.dataRetiradaCobranca >= :periodoRetiradaInicial and ");
				hql.append(" imovCobSit.dataRetiradaCobranca <= :periodoRetiradaFinal and ");
				parameters.put("periodoRetiradaInicial", filtro.getPeriodoRetiradaInicial());
				parameters.put("periodoRetiradaFinal", filtro.getPeriodoRetiradaFinal());
			}

			if(filtro.getIndicadorSituacaoCobrancaAdministrativa() != null){

				if(filtro.getIndicadorSituacaoCobrancaAdministrativa().equals(ImovelCobrancaSituacao.SITUACAO_PENDENTE)){

					hql.append(" imovCobSit.dataRetiradaCobranca is null and ");
				}else if(filtro.getIndicadorSituacaoCobrancaAdministrativa().equals(ImovelCobrancaSituacao.SITUACAO_ENCERRADA)){

					hql.append(" imovCobSit.dataRetiradaCobranca is not null and ");
				}
			}

			if(filtro.getIdsMotivoRetirada() != null){

				hql.append(" imovCobSit.imovelCobrancaMotivoRetirada.id in (:idsMotivoRetirada) and ");
				parameters.put("idsMotivoRetirada", filtro.getIdsMotivoRetirada());
			}

			String hqlAux = hql.substring(hql.length() - 4, hql.length());

			if(hqlAux.equals("and ")){

				query = session.createQuery(hql.substring(0, hql.length() - 4));
			}else{

				hqlAux = "";
				hqlAux = hql.substring(hql.length() - 6, hql.length());
				if(hqlAux.equals("where ")){

					query = session.createQuery(hql.substring(0, hql.length() - 6));
				}else{

					query = session.createQuery(hql.toString());
				}
			}

			Set set = parameters.keySet();
			Iterator iterMap = set.iterator();
			while(iterMap.hasNext()){

				String key = (String) iterMap.next();
				if(parameters.get(key) instanceof Integer[]){

					Integer[] arrayInteger = (Integer[]) parameters.get(key);
					query.setParameterList(key, arrayInteger);

				}else if(parameters.get(key) instanceof Integer){

					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof Date){

					query.setParameter(key, parameters.get(key));
				}else if(parameters.get(key) instanceof Collection){

					Collection collection = (ArrayList) parameters.get(key);
					query.setParameterList(key, collection);
				}else{

					query.setParameter(key, parameters.get(key));
				}
			}

			retorno = ((Number) query.setMaxResults(1).uniqueResult()).intValue();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3060] Consultar Imovel cobranca Administrativa
	 * [SB0002] - Consultar Dados do Contrato da Empresa
	 * 
	 * @author Anderson Italo
	 * @date 17/09/2012
	 */
	public Collection<CobrancaContrato> pesquisarCobrancaContratoPorEmpresa(Integer idEmpresa) throws ErroRepositorioException{

		Collection<CobrancaContrato> retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select contrato from CobrancaContrato contrato ");
			consulta.append("left join fetch contrato.contratoMotivoCancelamento motivoCancelamento ");
			consulta.append("inner join fetch contrato.contratoTipoRemuneracao tipoRemuneracao ");
			consulta.append("where contrato.empresa.id = :idEmpresa ");
			consulta.append("order by contrato.dataInicial desc ");

			retorno = (Collection<CobrancaContrato>) session.createQuery(consulta.toString()).setInteger("idEmpresa", idEmpresa).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * Calcula os acrescimmos por Impontualidade(multa,juros de mora e atualizacao monetaria)
	 * 
	 * @author Hebert Falcao
	 * @date 14/09/2012
	 * @param indicadorEmissaoDocumento
	 *            Na emissao do documento o indicador que estiver como 1 no
	 *            ParametroAcrescimosEmissaoDocumento deve ser considerado, o que tiver como 2 deve
	 *            ter o valor zerado, pois nao sera¡ cobrado nesse momento. Caso nao seja
	 *            emissao, a
	 *            logica a invertida.
	 */
	public Object[] calcularAcrescimoPorImpontualidadeBancoDeDados(int anoMesReferenciaDebito, Date dataVencimento, Date dataPagamento,
					BigDecimal valorDebito, BigDecimal valorMultasCobradas, short indicadorMulta, String anoMesArrecadacao,
					Integer idConta, Date dataEmissaoDocumento, Short indicadorEmissaoDocumento, Date dataBaseDeCalculo)
					throws ErroRepositorioException{

		java.sql.Date dataEmissaoDocumentoSql = null;

		if(dataEmissaoDocumento != null){
			dataEmissaoDocumentoSql = new java.sql.Date(dataEmissaoDocumento.getTime());
		}

		java.sql.Date dataVencimentoSql = null;

		if(dataVencimento != null){
			dataVencimentoSql = new java.sql.Date(dataVencimento.getTime());
		}

		java.sql.Date dataPagamentoSql = null;

		if(dataPagamento != null){
			dataPagamentoSql = new java.sql.Date(dataPagamento.getTime());
		}

		if(indicadorEmissaoDocumento == null){
			indicadorEmissaoDocumento = ConstantesSistema.NAO.shortValue();
		}

		Double valorDebitoDb = new Double(0);

		if(valorDebito != null){
			valorDebitoDb = valorDebito.doubleValue();
		}

		Double valorMultasCobradasDb = new Double(0);

		if(valorMultasCobradas != null){
			valorMultasCobradasDb = valorMultasCobradas.doubleValue();
		}

		java.sql.Date dataBaseDeCalculoSql = null;

		if(dataBaseDeCalculo != null){
			dataBaseDeCalculoSql = new java.sql.Date(dataBaseDeCalculo.getTime());
		}

		Session session = HibernateUtil.getSession();
		CallableStatement statement = null;

		Object[] retorno = new Object[4];

		try{
			String pTipoBancoDeDados = (String) ParametroGeral.P_TIPO_BANCO_DE_DADOS.executar();

			if(pTipoBancoDeDados.equals(ConstantesSistema.BANCO_ORACLE)){
				String call = "BEGIN PCK_GSAN_DEBITO_COBRAR.calcularAcrescimoImpont(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?); END;";

				statement = session.connection().prepareCall(call);
				statement.setInt(1, anoMesReferenciaDebito);
				statement.setDate(2, dataVencimentoSql);
				statement.setDate(3, dataPagamentoSql);
				statement.setDouble(4, valorDebitoDb);
				statement.setDouble(5, valorMultasCobradasDb);
				statement.setInt(6, indicadorMulta);
				statement.setInt(7, indicadorEmissaoDocumento);
				statement.setDate(8, dataEmissaoDocumentoSql);
				statement.setObject(9, idConta);
				statement.setDate(10, dataBaseDeCalculoSql);
				statement.registerOutParameter(11, Types.NUMERIC);
				statement.registerOutParameter(12, Types.NUMERIC);
				statement.registerOutParameter(13, Types.NUMERIC);
				statement.registerOutParameter(14, Types.VARCHAR);
				statement.execute();

				retorno[0] = statement.getObject(11);
				retorno[1] = statement.getObject(12);
				retorno[2] = statement.getObject(13);
				retorno[3] = statement.getObject(14);
			}else if(pTipoBancoDeDados.equals(ConstantesSistema.BANCO_POSTGRESQL)){
				retorno[0] = BigDecimal.ZERO;
				retorno[1] = BigDecimal.ZERO;
				retorno[2] = BigDecimal.ZERO;
				retorno[3] = null;
			}
		}catch(Exception e){
			e.printStackTrace();
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			if(statement != null){
				try{
					statement.close();
				}catch(SQLException e){
					e.printStackTrace();
					throw new ErroRepositorioException(e, "Erro no Hibernate");
				}
			}
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarCobrancaDocumentoImovelProcessoCorte(java.lang
	 * .Integer, java.lang.Integer)
	 */
	public List<CobrancaDocumento> pesquisarCobrancaDocumentoImovelProcessoCorte(Integer idImovel, Integer idCobrancaAcaoSituacao)
					throws ErroRepositorioException{

		List<CobrancaDocumento> collDocCob = new ArrayList<CobrancaDocumento>();

		Criteria criteria = HibernateUtil.getSession().createCriteria(CobrancaDocumento.class);
		criteria.createAlias("imovel", "imovel");
		criteria.createAlias("cobrancaAcaoSituacao", "cobrancaAcaoSituacao");
		criteria.createAlias("documentoTipo", "documentoTipo");
		criteria.add(Restrictions.eq("imovel.id", idImovel));
		criteria.add(Restrictions.eq("cobrancaAcaoSituacao.id", idCobrancaAcaoSituacao));
		criteria.add(Restrictions.eq("documentoTipo.id", DocumentoTipo.AVISO_DE_CORTE));

		if(idCobrancaAcaoSituacao.equals(CobrancaAcaoSituacao.ENTREGUE)){

			criteria.createAlias("cobrancaAcao", "cobrancaAcao");
			criteria.add(Restrictions.eq("cobrancaAcao.id", CobrancaAcao.AVISO_CORTE));
			criteria.add(Restrictions.isNotNull("cobrancaAcao.numeroDiasValidade"));
			criteria.add(Restrictions.isNotNull("emissao"));
			criteria.add(Restrictions.eq("cobrancaDebitoSituacao.id", CobrancaDebitoSituacao.PENDENTE));

			for(CobrancaDocumento cobrancaDocumento : (List<CobrancaDocumento>) criteria.list()){

				Date data = Util.formatarDataInicial(Util.subtrairNumeroDiasDeUmaData(new Date(), cobrancaDocumento.getCobrancaAcao()
								.getNumeroDiasValidade().intValue()));

				if(cobrancaDocumento.getEmissao().compareTo(data) >= 0){

					if(!this.existeOsCortePendentePeloServicoTipo(idImovel, cobrancaDocumento.getEmissao())
									|| this.existeOsCortePendentePeloDocumentoDeCobranca(idImovel, cobrancaDocumento.getEmissao())){

						collDocCob.add(cobrancaDocumento);

					}

				}

			}

		}else{

			collDocCob = criteria.list();

		}

		return collDocCob;

	}

	private Boolean existeOsCortePendentePeloServicoTipo(Integer idImovel, Date dataEmissaoDocCobranca) throws ErroRepositorioException{

		Boolean retorno = Boolean.FALSE;

		StringBuffer consulta = new StringBuffer();
		consulta.append(" select os.id from OrdemServico os ");
		consulta.append(" inner join os.imovel imovel ");
		consulta.append(" inner join os.servicoTipo servicoTipo ");
		consulta.append(" where imovel.id = :idImovel");
		consulta.append(" and os.dataGeracao >= :dataEmissaoDocCobranca ");
		consulta.append(" and servicoTipo.id in (");
		consulta.append(" select servTipo.id from CobrancaAcao cobAcao ");
		consulta.append(" inner join cobAcao.cobrancaAcaoPredecessora cobrancaAcaoPredecessora ");
		consulta.append(" inner join cobrancaAcaoPredecessora.documentoTipo documentoTipo ");
		consulta.append(" inner join cobAcao.servicoTipo servTipo ");
		consulta.append(" where cobrancaAcaoPredecessora.id = :idCobrancaAcao) ");

		Query query = HibernateUtil.getSession().createQuery(consulta.toString());
		query.setInteger("idImovel", idImovel);
		query.setInteger("idCobrancaAcao", CobrancaAcao.AVISO_CORTE);
		query.setDate("dataEmissaoDocCobranca", Util.formatarDataInicial(dataEmissaoDocCobranca));

		List<Integer> ids = query.list();

		if(!ids.isEmpty()){

			retorno = Boolean.TRUE;

		}

		return retorno;

	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#existeOsCortePendente(java.lang.Integer)
	 */
	public Boolean existeOsCortePendente(Integer idImovel) throws ErroRepositorioException{

		Boolean retorno = Boolean.FALSE;

		StringBuffer consulta = new StringBuffer();
		consulta.append(" select os.id from OrdemServico os ");
		consulta.append(" inner join os.imovel imovel ");
		consulta.append(" inner join os.servicoTipo servicoTipo ");
		consulta.append(" where os.situacao != :situacao ");
		consulta.append(" and imovel.id = :idImovel");
		consulta.append(" and servicoTipo.id in (");
		consulta.append(" select servTipo.id from CobrancaAcao cobAcao ");
		consulta.append(" inner join cobAcao.cobrancaAcaoPredecessora cobrancaAcaoPredecessora ");
		consulta.append(" inner join cobrancaAcaoPredecessora.documentoTipo documentoTipo ");
		consulta.append(" inner join cobAcao.servicoTipo servTipo ");
		consulta.append(" where cobrancaAcaoPredecessora.id = :idCobrancaAcao) ");

		Query query = HibernateUtil.getSession().createQuery(consulta.toString());
		query.setInteger("situacao", OrdemServico.SITUACAO_ENCERRADO);
		query.setInteger("idImovel", idImovel);
		query.setInteger("idCobrancaAcao", CobrancaAcao.AVISO_CORTE);

		List<Integer> ids = query.list();

		if(!ids.isEmpty()){

			retorno = Boolean.TRUE;

		}

		return retorno;

	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Consultar os parcelamentos ativos do Imovel recebido, realizados com forma de cobranca em
	 * conta e com Prestacoes a serem cobradas de tipo de lancamento contabil diferente de Juros
	 * de
	 * Parcelamento
	 */
	public Collection pesquisarDebitoACobrarDeParcelamento(Integer idImovel) throws ErroRepositorioException{

		Collection<Parcelamento> retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select dbac ");
			hql.append(" from DebitoACobrar dbac ");
			hql.append("  where dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");
			hql.append("  and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                             " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                             " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("  and ( dbac.financiamentoTipo.id = " + FinanciamentoTipo.PARCELAMENTO_EXERCICIO + " or "
							+ " dbac.financiamentoTipo.id = " + FinanciamentoTipo.PARCEL_EXERC_ANTERIOR + ")");
			hql.append("  and dbac.lancamentoItemContabil.id <> " + LancamentoItemContabil.JUROS_DO_PARCELAMENTO);

			retorno = (Collection<Parcelamento>) session.createQuery(hql.toString()).setInteger("idImovel", idImovel).list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<Object[]> pesquisarDebitoACobrarParcelamentoHelper(Integer idImovel) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select dbac_amreferenciadebito as amreferenciadebito, ");
			sql.append("        dbac_amcobrancadebito as amcobrancadebito, ");
			sql.append("        dbac_nnprestacaodebito as nnprestacaodebito, ");
			sql.append("        dbac_nnprestacaocobradas as nnprestacaocobradas, ");
			sql.append("        parc_id as idParcelamento, ");
			sql.append("        imov_id as idImovel ");
			sql.append(" from debito_a_cobrar  ");
			sql.append("  where dbac_nnprestacaodebito > dbac_nnprestacaocobradas ");
			sql.append(" and dcst_idatual in (" + DebitoCreditoSituacao.NORMAL + ", ");
			sql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			sql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			sql.append(" and fntp_id in (" + FinanciamentoTipo.PARCELAMENTO_EXERCICIO + "," + FinanciamentoTipo.PARCEL_EXERC_ANTERIOR + ")");

			sql.append(" and lict_id <> " + LancamentoItemContabil.JUROS_DO_PARCELAMENTO);
			sql.append(" and imov_id = :idImovel  ");
			sql.append(" group by dbac_amreferenciadebito, dbac_amcobrancadebito, dbac_nnprestacaodebito, dbac_nnprestacaocobradas, parc_id, imov_id ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("amreferenciadebito", Hibernate.INTEGER);
			sqlQuery.addScalar("amcobrancadebito", Hibernate.INTEGER);
			sqlQuery.addScalar("nnprestacaodebito", Hibernate.INTEGER);
			sqlQuery.addScalar("nnprestacaocobradas", Hibernate.INTEGER);
			sqlQuery.addScalar("idParcelamento", Hibernate.INTEGER);
			sqlQuery.addScalar("idImovel", Hibernate.INTEGER);

			sqlQuery.setInteger("idImovel", idImovel);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Verifica se o Imovel possua multa por descumprimento para a referencia do debito a cobrar
	 * 
	 * @author
	 * @date
	 */
	public boolean verificarExistenciaMultaPorDescumprimentoPorDebitoACobrar(Integer anoMesReferenciaDebito, Integer idImovel)
					throws ErroRepositorioException{

		boolean retorno = false;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select count(*) ");
			hql.append(" from DebitoACobrar dbac ");
			hql.append(" where dbac.anoMesReferenciaDebito = :anoMesReferenciaDebito ");
			hql.append("   and dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");
			hql.append("   and dbac.debitoTipo.id = " + DebitoTipo.MULTA_POR_DESCUMPRIMENTO_PARCELAMENTO);
			hql.append("   and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("   and dbac.imovel.id = :idImovel");

			Integer quantidade = ((Number) session.createQuery(hql.toString()).setInteger("anoMesReferenciaDebito", anoMesReferenciaDebito)
							.setInteger("idImovel", idImovel).uniqueResult()).intValue();

			if(quantidade > 0){
				retorno = true;
			}
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Selecionar as Prestacoes que nao sejam referentes ao tipo de lancamento contabil Juros
	 * de
	 * Parcelamento e que estejam vencidos
	 */
	public Integer obterQuantidadePrestacoesVencidas(Integer anoMesReferenciaDebito, Integer idImovel, Integer fatorReducao,
					Short numeroPrestacoesCobradas) throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		Date dataAtualComFatorReducao = Util.subtrairNumeroDiasDeUmaData(new Date(), fatorReducao);

		try{
			hql.append(" select count(distinct dbcb.numeroPrestacaoDebito) ");
			hql.append(" from DebitoCobrado dbcb ");
			hql.append(" inner join dbcb.conta cnta ");
			hql.append(" where dbcb.anoMesReferenciaDebito = :anoMesReferenciaDebito ");
			hql.append("   and dbcb.numeroPrestacao = " + numeroPrestacoesCobradas.toString());
			hql.append("   and dbcb.financiamentoTipo.id = " + FinanciamentoTipo.PARCELAMENTO_EXERCICIO.toString());
			hql.append("   and dbcb.lancamentoItemContabil.id <> " + LancamentoItemContabil.JUROS_DO_PARCELAMENTO);
			hql.append("   and cnta.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append("   and cnta.dataVencimentoConta < :dataAtualComFatorReducao ");
			hql.append("   and cnta.imovel.id = :idImovel ");
			hql.append("   and dbcb.numeroPrestacaoDebito <> dbcb.numeroPrestacao ");

			retorno = ((Number) session.createQuery(hql.toString()).setInteger("anoMesReferenciaDebito", anoMesReferenciaDebito)
							.setDate("dataAtualComFatorReducao", dataAtualComFatorReducao).setInteger("idImovel", idImovel).uniqueResult())
							.intValue();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3042] Realizar Arrasto de Parcelamento
	 * Obter Debito a cobrar ativo associado a um parcelamento e que tenha Prestacoes a serem
	 * cobradas
	 * 
	 * @author Hebert Falcao
	 * @date 02/03/2012
	 */
	public Collection<DebitoACobrar> obterDebitoACobrarAtivoAssociado(Integer anoMesReferenciaDebito, Integer numeroPrestacaoDebito,
					Integer numeroPrestacaoCobradas, Integer idImovel) throws ErroRepositorioException{

		Collection<DebitoACobrar> retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select dbac ");
			hql.append(" from DebitoACobrar dbac ");
			hql.append(" inner join fetch dbac.imovel ");
			hql.append(" inner join fetch dbac.localidade ");
			hql.append(" inner join fetch dbac.financiamentoTipo ");
			hql.append(" inner join fetch dbac.lancamentoItemContabil ");
			hql.append(" where dbac.anoMesReferenciaDebito = :anoMesReferenciaDebito ");
			hql.append(" and dbac.numeroPrestacaoDebito = :numeroPrestacaoDebito ");
			hql.append(" and dbac.numeroPrestacaoCobradas = :numeroPrestacaoCobradas ");
			hql.append(" and dbac.debitoCreditoSituacaoAtual.id in (" + DebitoCreditoSituacao.NORMAL + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.RETIFICADA + ", ");
			hql.append("                                              " + DebitoCreditoSituacao.INCLUIDA + ") ");
			hql.append(" and dbac.numeroPrestacaoDebito > dbac.numeroPrestacaoCobradas ");
			hql.append(" and dbac.imovel.id = :idImovel ");

			retorno = (Collection<DebitoACobrar>) session.createQuery(hql.toString())
							.setInteger("anoMesReferenciaDebito", anoMesReferenciaDebito)
							.setInteger("numeroPrestacaoDebito", numeroPrestacaoDebito)
							.setInteger("numeroPrestacaoCobradas", numeroPrestacaoCobradas).setInteger("idImovel", idImovel).list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar rotas dos Imoveis gerados no comando precedente
	 * 
	 * @author Hebert Falcao
	 * @date 12/10/2012
	 */
	public Collection<Rota> pesquisarRotasDoComandoPrecedente(Integer idComandoCobrancaPrecedente) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select distinct cbdo.imovel.rota ");
			consulta.append("from CobrancaDocumento cbdo ");
			consulta.append("where cbdo.cobrancaAcaoAtividadeComando.id = :idComandoCobrancaPrecedente ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idComandoCobrancaPrecedente", idComandoCobrancaPrecedente);

			retorno = (Collection<Integer>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * Verificar se o Imovel ja esta em cobranca bancaria
	 * 
	 * @author Hebert Falcao
	 * @date 13/10/2012
	 */
	public boolean isImovelEmCobrancaBancaria(Integer idImovel) throws ErroRepositorioException{

		boolean retorno = false;
		Integer quantidade = null;

		Session session = HibernateUtil.getSession();

		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select count(*) ");
			consulta.append("from CobrancaDocumentoItem cdit ");
			consulta.append("inner join cdit.cobrancaDocumento cbdo ");
			consulta.append("where cbdo.imovel.id = :idImovel ");
			consulta.append("  and cbdo.cobrancaAcao.id = :idAcaoCobranca ");
			consulta.append("  and cdit.cobrancaDebitoSituacao.id = :situacaoPendente ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("idAcaoCobranca", CobrancaAcao.COBRANCA_BANCARIA);
			query.setInteger("situacaoPendente", CobrancaDebitoSituacao.PENDENTE);

			quantidade = ((Number) query.uniqueResult()).intValue();

			if(quantidade != null && quantidade > 0){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca bancaria com Negociacao.
	 * Seleciona os Imoveis com boletos de documento de cobranca, baixados, onde o pedido de baixa
	 * foi feito pelo usuario batch, com itens pendentes e sem novo boleto de documento de
	 * cobranca
	 * para o Imovel com algum desses itens
	 * 
	 * @author Hebert Falcao
	 * @date 13/10/2012
	 */
	public Collection pesquisarImoveisComBoletosBaixados(Integer idUsuarioBatch) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{
			sql.append("select distinct a.arrc_id as idArrecadador, a.imov_id as idImovel ");
			sql.append("from boleto_bancario a ");
			sql.append("join boleto_bancario_movimentacao b on b.bbco_id = a.bbco_id ");
			sql.append("                                       and b.blen_id in (:pedidoDeBaixa, :sustarProtestoEBaixarTitulo) ");
			sql.append("                                       and b.usur_id = :idUsuarioBatch ");
			sql.append("join cobranca_documento c on c.cbdo_id = a.cbdo_id ");
			sql.append("join cobranca_documento_item d on d.cbdo_id = c.cbdo_id ");
			sql.append("join conta h on h.cnta_id = d.cnta_id ");
			sql.append("where a.cbdo_id is not null ");
			sql.append("  and a.bbco_idoriginal is null ");
			sql.append("  and a.bbst_idatual = :boletoBancarioSituacaoBaixa ");
			sql.append("  and not exists (select * ");
			sql.append("                  from boleto_bancario e ");
			sql.append("                  join cobranca_documento f on f.cbdo_id = e.cbdo_id ");
			sql.append("                  join cobranca_documento_item g on g.cbdo_id = f.cbdo_id ");
			sql.append("                  where e.imov_id = a.imov_id ");
			sql.append("                    and e.cbdo_id is not null ");
			sql.append("                    and e.cbdo_id <> a.cbdo_id ");
			sql.append("                    and g.cnta_id = d.cnta_id ");
			sql.append("                    and (   e.bbst_idatual in (:boletoBancarioSituacaoValida) ");
			sql.append("                         or (    e.bbst_idatual = :boletoBancarioSituacaoBaixa ");
			sql.append("                             and exists (select * ");
			sql.append("                                         from boleto_bancario l ");
			sql.append("                                         join boleto_bancario_movimentacao bm on bm.bbco_id = l.bbco_id ");
			sql.append("                                         join boleto_bancario_ocorrencias bo on bo.bbmv_id = bm.bbmv_id ");
			sql.append("                                         where l.bbco_id = e.bbco_id ");
			sql.append("                                           and bo.bmto_id = :idMotivoOcorrenciaProtestado) ");
			sql.append("                            ) ");
			sql.append("                        ) ");
			sql.append("                 ) ");
			sql.append("order by a.arrc_id, a.imov_id ");

			SQLQuery query = session.createSQLQuery(sql.toString());

			query.setInteger("pedidoDeBaixa", BoletoBancarioLancamentoEnvio.PEDIDO_DE_BAIXA);
			query.setInteger("sustarProtestoEBaixarTitulo", BoletoBancarioLancamentoEnvio.SUSTAR_PROTESTO_E_BAIXAR_TITUL);
			query.setInteger("idUsuarioBatch", idUsuarioBatch);
			query.setInteger("boletoBancarioSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			Collection<Integer> boletoBancarioSituacaoValida = new ArrayList<Integer>();
			boletoBancarioSituacaoValida.add(BoletoBancarioSituacao.GERADO_NAO_ENVIADO_AO_BANCO);
			boletoBancarioSituacaoValida.add(BoletoBancarioSituacao.ENVIADO_AO_BANCO);
			boletoBancarioSituacaoValida.add(BoletoBancarioSituacao.EM_CARTEIRA);
			boletoBancarioSituacaoValida.add(BoletoBancarioSituacao.EM_CARTORIO);

			query.setParameterList("boletoBancarioSituacaoValida", boletoBancarioSituacaoValida);

			query.addScalar("idArrecadador", Hibernate.INTEGER);
			query.addScalar("idImovel", Hibernate.INTEGER);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Resolucao de Diretoria parametros Pagamento a€ Vista
	 * 
	 * @author Hebert Falcao
	 * @date 31/10/2012
	 */
	public Collection pesquisarResolucaoDiretoriaParametrosPagamentoAVista(Integer idResolucaoDiretoria) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select rdpv ");
			consulta.append("from ResolucaoDiretoriaParametrosPagamentoAVista rdpv ");
			consulta.append("where rdpv.resolucaoDiretoria.id = :idResolucaoDiretoria ");


			Query query = session.createQuery(consulta.toString());

			query.setInteger("idResolucaoDiretoria", idResolucaoDiretoria);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}


	/**
	 * Pesquisar Resolucao de Diretoria Parâmetros Pagamento À Vista
	 * 
	 * @author Hebert Falcao
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosPagamentoAVista pesquisarResolucaoDiretoriaParametrosPagamentoAVista(Integer idResolucaoDiretoria,
					Date dataPagamento)
					throws ErroRepositorioException{

		ResolucaoDiretoriaParametrosPagamentoAVista retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select rdpv ");
			consulta.append("from ResolucaoDiretoriaParametrosPagamentoAVista rdpv ");
			consulta.append("where rdpv.resolucaoDiretoria.id = :idResolucaoDiretoria ");
			consulta.append("  and :dataPagamento between rdpv.dataPagamentoInicio and rdpv.dataPagamentoFinal ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idResolucaoDiretoria", idResolucaoDiretoria);
			query.setDate("dataPagamento", dataPagamento);

			retorno = (ResolucaoDiretoriaParametrosPagamentoAVista) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Debito
	 * Pesquisar mensagem para pagamento a  vista
	 * 
	 * @author Hebert Falcao
	 * @date 31/10/2012
	 */
	public Object[] pesquisarMensagemExtratoParcelamentoPagamentoAVista(Integer idResolucaoDiretoria, Date dataEmissao)
					throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select rdpv.id, rdpv.descricaoMensagemExtrato ");
			consulta.append("from ResolucaoDiretoriaParametrosPagamentoAVista rdpv ");
			consulta.append("where rdpv.resolucaoDiretoria.id = :idResolucaoDiretoria ");
			consulta.append("  and :dataEmissao between rdpv.dataPagamentoInicio and rdpv.dataPagamentoFinal ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idResolucaoDiretoria", idResolucaoDiretoria);
			query.setDate("dataEmissao", dataEmissao);

			retorno = (Object[]) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Debito
	 * [UC0259] A Processar Pagamento com Codigo de Barras
	 * Pesquisar Contas do Documento de cobranca
	 * 
	 * @author Hebert Falcao
	 * @date 01/11/2012
	 */
	public Collection<Conta> pesquisarContasCobrancaDocumento(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Collection<Conta> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select cnta ");
			consulta.append("from CobrancaDocumentoItem cdit ");
			consulta.append("inner join cdit.contaGeral.conta cnta ");
			consulta.append("where cdit.cobrancaDocumento.id = :idCobrancaDocumento ");
			consulta.append("  and cdit.contaGeral is not null ");
			consulta.append("order by cnta.referencia asc ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idCobrancaDocumento", idCobrancaDocumento);

			retorno = (Collection<Conta>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Debito
	 * [UC0259] A Processar Pagamento com Codigo de Barras
	 * Pesquisar Guias Pagamento prestacao do Documento de cobranca
	 * 
	 * @author Hebert Falcao
	 * @date 01/11/2012
	 */
	public Collection<GuiaPagamentoPrestacao> pesquisarGuiasPagamentoPrestacaoCobrancaDocumento(Integer idCobrancaDocumento)
					throws ErroRepositorioException{

		Collection<GuiaPagamentoPrestacao> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select gppr ");
			consulta.append("from CobrancaDocumentoItem cdit ");
			consulta.append("inner join cdit.guiaPagamentoGeral.guiaPagamento gpag ");
			consulta.append("inner join gpag.guiasPagamentoPrestacao gppr ");
			consulta.append("where cdit.cobrancaDocumento.id = :idCobrancaDocumento ");
			consulta.append("  and cdit.guiaPagamentoGeral is not null ");
			consulta.append("  and gppr.comp_id.numeroPrestacao = cdit.numeroDaPrestacao ");
			consulta.append("order by gppr.anoMesReferenciaFaturamento asc ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idCobrancaDocumento", idCobrancaDocumento);

			retorno = (Collection<GuiaPagamentoPrestacao>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Resolucao de Diretoria parametros Valor da Entrada
	 * 
	 * @author Hebert Falcao
	 * @date 31/10/2012
	 */
	public ResolucaoDiretoriaParametrosValorEntrada pesquisarResolucaoDiretoriaParametrosValorEntrada(Integer idResolucaoDiretoria,
					Date dataNegociacao) throws ErroRepositorioException{

		ResolucaoDiretoriaParametrosValorEntrada retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select rdve ");
			consulta.append("from ResolucaoDiretoriaParametrosValorEntrada rdve ");
			consulta.append("where rdve.resolucaoDiretoria.id = :idResolucaoDiretoria ");
			consulta.append("  and :dataNegociacao between rdve.dataNegociacaoInicio and rdve.dataNegociacaoFinal ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idResolucaoDiretoria", idResolucaoDiretoria);
			query.setDate("dataNegociacao", dataNegociacao);

			retorno = (ResolucaoDiretoriaParametrosValorEntrada) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Guias de pagamento de parcelamento de cobranca bancaria
	 * [UC0630] Solicitar Emissa£o do Extrato de Debitos
	 * [FS0004] - Verificar existencia de guia de parcelamento de cobranca bancaria
	 * 
	 * @author Josenildo Neves
	 * @date 22/11/2012
	 */
	public boolean verificarGuiaPagamentoParcelamentoCobrancaBancaria(Integer idGuiaPagamento, Short numeroPrestacoes)
					throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT bbco.id ");
			hql.append(" FROM BoletoBancario bbco ");
			hql.append(" WHERE ");
			hql.append("   (bbco.documentoCobranca.id IS NOT NULL ");
			hql.append("    AND bbco.parcelamento.id IS NOT NULL ");
			hql.append("    AND exists (SELECT gpp.guiaPagamento.id FROM GuiaPagamentoPrestacao gpp ");
			hql.append("                INNER JOIN gpp.guiaPagamento gp ");
			hql.append("                WHERE ");
			hql.append("                    gp.parcelamento.id = bbco.parcelamento.id ");
			hql.append("                    AND gpp.guiaPagamento.id = :idGuiaPagamento ");
			hql.append("                    AND gpp.comp_id.numeroPrestacao = :numeroPrestacoes)) ");
			hql.append("   OR (bbco.guiaPagamento.id = :idGuiaPagamento AND bbco.numeroPrestacoes = :numeroPrestacoes) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idGuiaPagamento", idGuiaPagamento);
			query.setShort("numeroPrestacoes", numeroPrestacoes);

			Integer retornoHQL = (Integer) query.setMaxResults(1).uniqueResult();

			if(retornoHQL != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca bancaria com Negociacao.
	 * [SB0007] Trata cobranca bancaria com pagamento da primeira prestacao e sem boleto.
	 * Retorna as guias de pagamento prestacao que estao pagas.
	 * 
	 * @author Hebert Falcao
	 * @date 22/11/2012
	 */
	public Collection pesquisarGuiaPagamentoPrestacaoComNegociacaoPaga() throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select f.gpag_id as guiaPagamento, b.parc_id parcelamento, a.bbco_nnsequencial numeroSequencial, a.bbco_id idBoletoBancario, a.bbst_idatual idSituacaoAtual ");
			consulta.append("from boleto_bancario a ");
			consulta.append("join guia_pagamento b on b.parc_id = a.parc_id ");
			consulta.append("join guia_pagamento_prestacao f on f.gpag_id = b.gpag_id ");
			consulta.append("where a.cbdo_id is not null ");
			consulta.append("  and a.parc_id is not null ");
			consulta.append("  and a.bbco_idoriginal is null ");
			consulta.append("  and not exists (select * ");
			consulta.append("                  from boleto_bancario d ");
			consulta.append("                  where d.bbco_idoriginal = a.bbco_id) ");
			consulta.append("  and (exists (select * ");
			consulta.append("               from pagamento c ");
			consulta.append("               where c.pgmt_nnprestacao = 1 ");
			consulta.append("                 and c.gpag_id = b.gpag_id) or ");
			consulta.append("       exists (select * ");
			consulta.append("               from pagamento_historico d ");
			consulta.append("               where d.pghi_nnprestacao = 1 ");
			consulta.append("                 and d.gpag_id = b.gpag_id)) ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			query.addScalar("guiaPagamento", Hibernate.INTEGER);
			query.addScalar("parcelamento", Hibernate.INTEGER);
			query.addScalar("numeroSequencial", Hibernate.INTEGER);
			query.addScalar("idBoletoBancario", Hibernate.INTEGER);
			query.addScalar("idSituacaoAtual", Hibernate.INTEGER);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Debitos
	 * Retornar ids de parcelamentos ativos na referencia
	 * 
	 * @author Hebert Falcao
	 * @date 03/12/2012
	 */
	public Collection<Integer> retornarIdsDeParcelamentosAtivosNaReferencia(Integer idImovel, Integer anoMesFaturamentoAtual)
					throws ErroRepositorioException{

		Collection<Integer> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select parc.parc_id as idParcelamento ");
			consulta.append("from parcelamento parc ");
			consulta.append("where parc.imov_id = :idImovel ");
			consulta.append("  and parc.parc_amreferenciafaturamento = :anoMesFaturamentoAtual ");
			consulta.append("  and parc.pcst_id = :parcelamentoSituacaoNormal ");
			consulta.append("  and (    not exists (select 1 ");
			consulta.append("                       from conta cnta ");
			consulta.append("                       inner join parcelamento_item pcit on pcit.cnta_id = cnta.cnta_id ");
			consulta.append("                       where pcit.parc_id = parc.parc_id) ");
			consulta.append("       and not exists (select 1 ");
			consulta.append("                       from debito_a_cobrar dbac ");
			consulta.append("                       inner join parcelamento_item pcit on pcit.dbac_id = dbac.dbac_id ");
			consulta.append("                       where pcit.parc_id = parc.parc_id) ");
			consulta.append("       and not exists (select 1 ");
			consulta.append("                       from guia_pagamento gpag ");
			consulta.append("                       inner join parcelamento_item pcit on pcit.gpag_id = gpag.gpag_id ");
			consulta.append("                       where pcit.parc_id = parc.parc_id) ");
			consulta.append("       and not exists (select 1 ");
			consulta.append("                       from credito_a_realizar crar ");
			consulta.append("                       inner join parcelamento_item pcit on pcit.crar_id = crar.crar_id ");
			consulta.append("                       where pcit.parc_id = parc.parc_id)) ");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("anoMesFaturamentoAtual", anoMesFaturamentoAtual);
			query.setInteger("parcelamentoSituacaoNormal", ParcelamentoSituacao.NORMAL);

			query.addScalar("idParcelamento", Hibernate.INTEGER);

			retorno = (Collection<Integer>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Consulta a quantidade de registros de para o relatorio de Liquidos Receba­veis.
	 * UC3081-GerarRelatoriodeLiquidosRecebiveis
	 * 
	 * @param dataPagamentoInicial
	 * @param dataPagamentoFinal
	 */
	public int consultarQuantidadeRegistrosDeLiquidosRecebiveis(Date dataPagamentoInicial, Date dataPagamentoFinal)
					throws ErroRepositorioException{

		Integer retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" SELECT ");
			consulta.append(" count (conta.CNTA_ID) qtdeContas ");
			consulta.append(" from CONTA_HISTORICO conta ");
			consulta.append(" Inner Join DEBITO_CREDITO_SITUACAO dcs on dcs.DCST_ID = conta.DCST_IDATUAL ");
			consulta.append(" Inner Join COBRANCA_DOCUMENTO_ITEM cdi on cdi.CNTA_ID = conta.CNTA_ID ");
			consulta.append(" Inner Join COBRANCA_DOCUMENTO cd on cd.CBDO_ID = cdi.CBDO_ID ");
			consulta.append(" Inner Join IMOVEL_COBRANCA_SITUACAO ics on (ics.CACM_ID = cd.CACM_ID and ics.IMOV_ID = cd.IMOV_ID) ");
			consulta.append(" Inner Join PAGAMENTO_HISTORICO ph on ph.CNTA_ID = conta.CNTA_ID ");
			consulta.append(" where conta.CNHI_AMREFERENCIACONTA <  " + RelatorioLiquidosRecebiveisHelper.REFERENCIA_LIQUIDO_RECEBIVEIS);
			consulta.append(" and ( (conta.cnhi_vlagua + conta.cnhi_vlesgoto + conta.cnhi_vldebitos) - conta.cnhi_vlcreditos) > 0 ");
			consulta.append(" and dcs.DCST_ID in (" + DebitoCreditoSituacao.NORMAL + ", " + DebitoCreditoSituacao.RETIFICADA + ", "
							+ DebitoCreditoSituacao.INCLUIDA + ")  ");
			consulta.append(" 	and ics.CBST_ID = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);
			consulta.append(" 	and ics.ISCB_DTRETIRADACOBRANCA is null ");
			consulta.append(" and ph.PGHI_DTPAGAMENTO between :dataPagamentoInicial and :dataPagamentoFinal");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			query.setDate("dataPagamentoInicial", dataPagamentoInicial);
			query.setDate("dataPagamentoFinal", dataPagamentoFinal);

			retorno = ((Number) query.addScalar("qtdeContas", Hibernate.INTEGER).uniqueResult()).intValue();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}
		return retorno;
	}

	/**
	 * Consulta a registros de para o relatorio de Liquidos Receba­veis Analitico.
	 * UC3081-GerarRelatoriodeLiquidosRecebiveis
	 * 
	 * @param dataPagamentoInicial
	 * @param dataPagamentoFinal
	 */
	public Collection<Object[]> consultarRegistrosDeLiquidosRecebiveisAnalitico(Date dataPagamentoInicial, Date dataPagamentoFinal)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" SELECT ");
			consulta.append("  i.IMOV_ID as imovel, ");
			consulta.append("  ph.PGHI_DTPAGAMENTO as dataPagamento,  ");
			consulta.append("  c.CLIE_NMCLIENTE as nomeCliente, ");
			consulta.append("  conta.CNHI_AMREFERENCIACONTA as referencia,  ");
			consulta.append("  conta.CNHI_VLAGUA as valorAgua,  ");
			consulta.append("  conta.CNHI_VLESGOTO as valorEsgoto, ");
			consulta.append("  (coalesce(conta.CNHI_VLDEBITOS, 0) - coalesce(conta.CNHI_VLCREDITOS, 0)) as valorServico, ");
			consulta.append("  ( coalesce(conta.CNHI_VLAGUA, 0) ");
			consulta.append("    		  + coalesce(conta.CNHI_VLESGOTO, 0) ");
			consulta.append("    		  + coalesce((conta.CNHI_VLDEBITOS - coalesce(conta.CNHI_VLCREDITOS,0)),0)) as valorConta");
			consulta.append(" from CONTA_HISTORICO conta ");
			consulta.append("   Inner Join DEBITO_CREDITO_SITUACAO dcs on dcs.DCST_ID = conta.DCST_IDATUAL");
			consulta.append("   Inner Join COBRANCA_DOCUMENTO_ITEM cdi on cdi.CNTA_ID = conta.CNTA_ID  ");
			consulta.append("   Inner Join COBRANCA_DOCUMENTO cd on cd.CBDO_ID = cdi.CBDO_ID  ");
			consulta.append("   Inner Join IMOVEL_COBRANCA_SITUACAO ics on (ics.CACM_ID = cd.CACM_ID and ics.IMOV_ID = cd.IMOV_ID)  ");
			consulta.append("   Inner Join IMOVEL i on i.IMOV_ID = cd.IMOV_ID ");
			consulta.append("   Inner Join LOCALIDADE l on l.LOCA_ID = i.LOCA_ID ");
			consulta.append("   Inner Join setor_comercial sco on sco.STCM_ID = i.STCM_ID ");
			consulta.append("    ");
			consulta.append("   Inner Join PAGAMENTO_HISTORICO ph on ph.CNTA_ID = conta.CNTA_ID  ");
			consulta.append("   Inner Join CLIENTE_CONTA_HISTORICO cch on cch.CNTA_ID = conta.CNTA_ID and cch.CRTP_ID = "
							+ ClienteRelacaoTipo.USUARIO);
			consulta.append("   Inner Join CLIENTE c on c.CLIE_ID = cch.CLIE_ID  ");
			consulta.append(" where conta.CNHI_AMREFERENCIACONTA < " + RelatorioLiquidosRecebiveisHelper.REFERENCIA_LIQUIDO_RECEBIVEIS);
			consulta.append("   and ( (conta.cnhi_vlagua + coalesce(conta.cnhi_vlesgoto,0) + coalesce(conta.cnhi_vldebitos,0)) - coalesce(conta.cnhi_vlcreditos,0)) > 0 ");
			consulta.append("   and dcs.DCST_ID in (" + DebitoCreditoSituacao.NORMAL + ", " + DebitoCreditoSituacao.RETIFICADA + ", "
							+ DebitoCreditoSituacao.INCLUIDA + ") ");
			consulta.append("   and ics.CBST_ID = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);
			consulta.append("   and ics.ISCB_DTRETIRADACOBRANCA is null ");
			consulta.append("   and ph.PGHI_DTPAGAMENTO between :dataPagamentoInicial and :dataPagamentoFinal ");
			consulta.append(" order by ph.PGHI_DTPAGAMENTO, l.LOCA_ID, sco.STCM_CDSETORCOMERCIAL, i.IMOV_ID ,conta.CNHI_AMREFERENCIACONTA ");

			SQLQuery sqlQuery = session.createSQLQuery(consulta.toString());
			sqlQuery.addScalar("imovel", Hibernate.INTEGER);
			sqlQuery.addScalar("dataPagamento", Hibernate.DATE);
			sqlQuery.addScalar("nomeCliente", Hibernate.STRING);
			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("valorAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorServico", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorConta", Hibernate.BIG_DECIMAL);

			sqlQuery.setDate("dataPagamentoInicial", dataPagamentoInicial);
			sqlQuery.setDate("dataPagamentoFinal", dataPagamentoFinal);

			retorno = sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Consulta a registros de para o relatorio de Liquidos Receba­veis Sintetico.
	 * UC3081-GerarRelatoriodeLiquidosRecebiveis
	 * 
	 * @param dataPagamentoInicial
	 * @param dataPagamentoFinal
	 */
	public Collection<Object[]> consultarRegistrosDeLiquidosRecebiveisSintetico(Date dataPagamentoInicial, Date dataPagamentoFinal)
					throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();

		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" SELECT ");
			consulta.append("   conta.CNHI_AMREFERENCIACONTA as referencia, ");
			consulta.append("   count(conta.CNTA_ID) as qtdeContas, ");
			consulta.append("   sum(conta.CNHI_VLAGUA) as somaValorAgua, ");
			consulta.append("   sum(conta.CNHI_VLESGOTO) as somaValorEsgoto, ");
			consulta.append("   sum(( coalesce(conta.CNHI_VLDEBITOS, 0) - coalesce(conta.CNHI_VLCREDITOS, 0))) as somaValorServico, ");
			consulta.append("   sum( (coalesce(conta.CNHI_VLAGUA, 0) + coalesce(conta.CNHI_VLESGOTO, 0) + ");
			consulta.append("        (coalesce(conta.CNHI_VLDEBITOS, 0) - coalesce(conta.CNHI_VLCREDITOS, 0) ) ) ) as somaValorConta  ");
			consulta.append(" from CONTA_HISTORICO conta ");
			consulta.append(" Inner Join DEBITO_CREDITO_SITUACAO dcs on dcs.DCST_ID = conta.DCST_IDATUAL ");
			consulta.append(" Inner Join COBRANCA_DOCUMENTO_ITEM cdi on cdi.CNTA_ID = conta.CNTA_ID ");
			consulta.append(" Inner Join COBRANCA_DOCUMENTO cd on cd.CBDO_ID = cdi.CBDO_ID ");
			consulta.append(" Inner Join IMOVEL_COBRANCA_SITUACAO ics on (ics.CACM_ID = cd.CACM_ID and ics.IMOV_ID = cd.IMOV_ID) ");
			consulta.append(" Inner Join PAGAMENTO_HISTORICO ph on ph.CNTA_ID = conta.CNTA_ID ");
			consulta.append("  where conta.CNHI_AMREFERENCIACONTA < " + RelatorioLiquidosRecebiveisHelper.REFERENCIA_LIQUIDO_RECEBIVEIS);
			consulta.append("   and ( (conta.cnhi_vlagua + coalesce(conta.cnhi_vlesgoto, 0) + coalesce(conta.cnhi_vldebitos, 0)) - coalesce(conta.cnhi_vlcreditos, 0)) > 0 ");
			consulta.append("   and dcs.DCST_ID in (" + DebitoCreditoSituacao.NORMAL + ", " + DebitoCreditoSituacao.RETIFICADA + ", "
							+ DebitoCreditoSituacao.INCLUIDA + ") ");
			consulta.append("   and ics.CBST_ID = " + CobrancaSituacao.COBRANCA_ADMINISTRATIVA);
			consulta.append("   and ics.ISCB_DTRETIRADACOBRANCA is null ");
			consulta.append("   and ph.PGHI_DTPAGAMENTO between :dataPagamentoInicial and :dataPagamentoFinal ");
			consulta.append("  group by conta.CNHI_AMREFERENCIACONTA, conta.CNHI_VLAGUA, conta.CNHI_VLESGOTO  ");
			consulta.append("  order by conta.CNHI_AMREFERENCIACONTA  ");

			SQLQuery sqlQuery = session.createSQLQuery(consulta.toString());
			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("qtdeContas", Hibernate.INTEGER);
			sqlQuery.addScalar("somaValorAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("somaValorEsgoto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("somaValorServico", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("somaValorConta", Hibernate.BIG_DECIMAL);

			sqlQuery.setDate("dataPagamentoInicial", dataPagamentoInicial);
			sqlQuery.setDate("dataPagamentoFinal", dataPagamentoFinal);

			retorno = sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0203] Consultar Debitos
	 * [SB0009] Verificar Contas em cobranca bancaria
	 * Obter o mais recente boleto bancario da conta em cobranca bancaria
	 * 
	 * @author Hebert Falcao
	 * @date 24/11/2012
	 */
	public BoletoBancario obterMaisRecenteBoletoBancarioDaContaEmCobrancaBancaria(Integer idConta) throws ErroRepositorioException{

		BoletoBancario retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select bbco ");
			consulta.append("from BoletoBancario bbco ");
			consulta.append("where bbco.documentoCobranca.id is not null ");
			consulta.append("  and bbco.documentoCobranca.id in (select cdit.cobrancaDocumento.id ");
			consulta.append("                                    from CobrancaDocumentoItem cdit ");
			consulta.append("                                    where cdit.contaGeral.id = :idConta) ");
			consulta.append("order by bbco.dataEmissao desc");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idConta", idConta);

			retorno = (BoletoBancario) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0203] Consultar Debitos
	 * [SB0009] Verificar Contas em cobranca bancaria
	 * Verificar se a situacao do boleto nao permite a emissao do extrato
	 * 
	 * @author Hebert Falcao
	 * @date 24/11/2012
	 */
	public boolean verificarSituacaoBoletoNaoPermiteEmissaoExtrato(Integer idBoletoBancario) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append(" select bbco.id ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" where bbco.id = :idBoletoBancario ");
			hql.append("   and (bbco.boletoBancarioSituacao.id <> :idSituacaoBaixa ");
			hql.append("        or (    bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("            and not exists (select bboc.id ");
			hql.append("                            from BoletoBancarioOcorrencias bboc ");
			hql.append("                            where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                              and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                                         from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                                         where bbmv.boletoBancario.id = bbco.id) ");
			hql.append("                       	   ) ");
			hql.append("           ) ");
			hql.append("       ) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idBoletoBancario", idBoletoBancario);
			query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			Integer retornoHql = (Integer) query.setMaxResults(1).uniqueResult();

			if(retornoHql != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0203] Consultar Debitos
	 * [SB0009] Verificar Contas em cobranca bancaria
	 * Verificar se a situacao do boleto nao permite a emissao do extrato
	 * 
	 * @author Hebert Falcao
	 * @date 24/11/2012
	 */
	public Collection<BoletoBancario> pesquisarBoletoBaixadoEProtestadoPelaGuiaDePagamento(Integer idGuiaPagamento, Integer numeroPrestacao)
					throws ErroRepositorioException{

		Collection<BoletoBancario> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append(" select bbco ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" where bbco.guiaPagamento.id = :idGuiaPagamento ");
			hql.append("   and bbco.numeroPrestacoes = :numeroPrestacao ");
			hql.append("   and bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("   and exists (select bboc.id ");
			hql.append("               from BoletoBancarioOcorrencias bboc ");
			hql.append("               where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                 and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                            from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                            where bbmv.boletoBancario.id = bbco.id)) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idGuiaPagamento", idGuiaPagamento);
			query.setInteger("numeroPrestacao", numeroPrestacao);
			query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			retorno = (Collection<BoletoBancario>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0259] A Processar Pagamento com Codigo de Barras
	 * [SB0003] A Processar Pagamento de Documento de cobranca
	 * Pesquisar Boletos Baixados e Protestados filtrando pelo Id
	 * 
	 * @author Hebert Falcao
	 * @date 26/11/2012
	 */
	public Collection<BoletoBancario> pesquisarBoletoBaixadoEProtestadoPeloId(Collection<Integer> idsBoletoBancario)
					throws ErroRepositorioException{

		Collection<BoletoBancario> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append(" select bbco ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" where bbco.id in (:idsBoletoBancario) ");
			hql.append("   and bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("   and exists (select bboc.id ");
			hql.append("               from BoletoBancarioOcorrencias bboc ");
			hql.append("               where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                 and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                            from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                            where bbmv.boletoBancario.id = bbco.id)) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			if(!Util.isVazioOrNulo(idsBoletoBancario) && idsBoletoBancario.size() > 1000){
				Collection colecaoAuxiliar = new ArrayList<Object>();

				retorno = new ArrayList<BoletoBancario>();

				for(Integer id : idsBoletoBancario){
					colecaoAuxiliar.add(id);

					if(colecaoAuxiliar.size() == 1000){
						query.setParameterList("idsBoletoBancario", colecaoAuxiliar);

						retorno.addAll(query.list());
						colecaoAuxiliar.clear();
					}
				}

				if(!Util.isVazioOrNulo(colecaoAuxiliar)){
					query.setParameterList("idsBoletoBancario", colecaoAuxiliar);

					retorno.addAll(query.list());
				}
			}else{
				query.setParameterList("idsBoletoBancario", idsBoletoBancario);

				retorno = query.list();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0259] A Processar Pagamento com Codigo de Barras
	 * [SB0003] A Processar Pagamento de Documento de cobranca
	 * Obter os boletos bancarios das contas em cobranca bancaria
	 * 
	 * @author Hebert Falcao
	 * @date 26/11/2012
	 */
	public Collection<Integer> obterBoletosBancariosDasContasEmCobrancaBancaria(Collection<Integer> idsConta, Integer idCobrancaDocumento,
					Date dataEmissaoDocumento) throws ErroRepositorioException{

		Collection retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{
			sql.append("select distinct bbco_id as idBoletoBancario ");
			sql.append("from boleto_bancario ");
			sql.append("where bbco_dtemissao < :dataEmissaoDocumento ");
			sql.append("  and cbdo_id is not null ");
			sql.append("  and cbdo_id in (select tab1.col2 ");
			sql.append("                  from (select distinct a.cbdo_id as col1, d.cbdo_id as col2 ");
			sql.append("                        from cobranca_documento a ");
			sql.append("                        join cobranca_documento_item b on b.cbdo_id = a.cbdo_id ");
			sql.append("                        join cobranca_documento_item d on d.cnta_id = b.cnta_id and d.cbdo_id <> b.cbdo_id ");
			sql.append("                        where a.cbdo_id is not null ");
			sql.append("                          and not exists (select * ");
			sql.append("                                          from cobranca_documento_item e ");
			sql.append("                                          where e.cnta_id not in (select cnta_id ");
			sql.append("                                                                  from cobranca_documento_item f ");
			sql.append("                                                                  where f.cbdo_id = d.cbdo_id) ");
			sql.append("                                            and e.cbdo_id = b.cbdo_id) ");
			sql.append("                          and b.cnta_id in (:idsConta) ");
			sql.append("                       ) tab1 ");
			sql.append("                  where tab1.col1 = :idCobrancaDocumento) ");
			sql.append("order by bbco_dtemissao desc ");

			SQLQuery query = session.createSQLQuery(sql.toString());

			query.setDate("dataEmissaoDocumento", dataEmissaoDocumento);
			query.setParameterList("idsConta", idsConta);
			query.setInteger("idCobrancaDocumento", idCobrancaDocumento);

			query.addScalar("idBoletoBancario", Hibernate.INTEGER);

			retorno = (Collection<Integer>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3023] Manter Boleto bancario
	 * [SB000B] Apresentar Boletos nao Agrupados
	 * Verifica boleto agregador de contas com situacao correspondente a baixado e protestado
	 * 
	 * @author Hebert Falcao
	 * @date 04/12/2012
	 */
	public boolean verificaExistenciaBoletoAgregadorComSituacaoBaixadoEProtestado(Integer idBoletoBancario) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append(" select count(*) ");
			hql.append(" from BoletoBancario bbco ");
			hql.append(" where bbco.id = :idBoletoBancario ");
			hql.append("   and bbco.documentoCobranca.id is not null ");
			hql.append("   and bbco.boletoBancarioSituacao.id = :idSituacaoBaixa ");
			hql.append("   and exists (select bboc.id ");
			hql.append("               from BoletoBancarioOcorrencias bboc ");
			hql.append("               where bboc.boletoBancarioMotivoOcorrencia.id = :idMotivoOcorrenciaProtestado ");
			hql.append("                 and bboc.boletoBancarioMovimentacao.id in (select bbmv.id ");
			hql.append("                                                            from BoletoBancarioMovimentacao bbmv ");
			hql.append("                                                            where bbmv.boletoBancario.id = bbco.id)) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idBoletoBancario", idBoletoBancario);
			query.setInteger("idSituacaoBaixa", BoletoBancarioSituacao.BAIXA);
			query.setInteger("idMotivoOcorrenciaProtestado", BoletoBancarioMotivoOcorrencia.PROTESTADO);

			Integer quantidade = ((Number) query.uniqueResult()).intValue();

			if(quantidade > 0){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#gerouCobrancaDocumento(java.lang.Integer)
	 */
	public Boolean gerouCobrancaDocumento(Integer idCobrancaAcao) throws ErroRepositorioException{

		Boolean retorno = Boolean.FALSE;
		Session session = HibernateUtil.getSession();

		try{

			Criteria criteria = session.createCriteria(CobrancaDocumento.class);
			criteria.add(Restrictions.eq("cobrancaAcao.id", idCobrancaAcao));
			criteria.setProjection(Projections.rowCount());

			Integer rowCount = (Integer) criteria.uniqueResult();

			if(rowCount > 0){

				retorno = Boolean.TRUE;

			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");

		}finally{

			HibernateUtil.closeSession(session);

		}

		return retorno;

	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#obterCobrancaDocumentoGeradoAcaoCobranca(gcom.cobranca
	 * .CobrancaDocumento)
	 */
	public CobrancaDocumento obterCobrancaDocumentoGeradoAcaoCobranca(CobrancaDocumento cobrancaDocumento) throws ErroRepositorioException{

		CobrancaDocumento cobrancaDocumentoGerado = null;

		if(cobrancaDocumento.getCobrancaAcao() != null && cobrancaDocumento.getImovel() != null){

			Session session = HibernateUtil.getSession();

			try{

				Integer idDocumentoGerado = null;
				CobrancaAcao cobrancaAcao = cobrancaDocumento.getCobrancaAcao();

				Criteria criteria = session.createCriteria(CobrancaDocumento.class);
				criteria.createAlias("cobrancaAcao", "cobrancaAcao");
				criteria.createAlias("imovel", "imovel");
				criteria.add(Restrictions.eq("imovel.id", cobrancaDocumento.getImovel().getId()));

				if(cobrancaAcao.getCobrancaAcaoPredecessora() == null){

					criteria.createAlias("cobrancaAcao.cobrancaAcaoPredecessora", "cobrancaAcaoPredecessora");
					criteria.add(Restrictions.eq("cobrancaAcaoPredecessora.id", cobrancaAcao.getId()));
					criteria.add(Restrictions.ge("emissao", cobrancaDocumento.getEmissao()));

				}else{

					criteria.add(Restrictions.eq("cobrancaAcao.id", cobrancaAcao.getCobrancaAcaoPredecessora().getId()));
					criteria.add(Restrictions.le("emissao", cobrancaDocumento.getEmissao()));

				}

				criteria.setProjection(Projections.max("id"));
				idDocumentoGerado = (Integer) criteria.uniqueResult();

				if(idDocumentoGerado != null){

					criteria = session.createCriteria(CobrancaDocumento.class);
					criteria.add(Restrictions.idEq(idDocumentoGerado));

					cobrancaDocumentoGerado = (CobrancaDocumento) criteria.uniqueResult();

				}

			}catch(HibernateException e){

				throw new ErroRepositorioException(e, "Erro no Hibernate");

			}finally{

				HibernateUtil.closeSession(session);

			}

		}

		return cobrancaDocumentoGerado;

	}

	/**
	 * retorna uma Colecao com todos os parcelamentos de um determinado imovel
	 * 
	 * @author Italo Almeida
	 * @date 12/12/2012
	 */
	public Collection<Parcelamento> consultarImovelParcelamentoDebito(int imovelId) throws ErroRepositorioException{

		Collection<Parcelamento> retorno = null;

		Session session = HibernateUtil.getSession();
		String hql;

		try{

			hql = "from Parcelamento parc inner join fetch parc.parcelamentoSituacao past inner join fetch parc.usuario usuario "
							+ "where parc.imovel.id = :imovelId order by parc.parcelamento desc";

			Query query = session.createQuery(hql);

			query.setInteger("imovelId", Integer.valueOf(imovelId).intValue());

			retorno = (Collection<Parcelamento>) query.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;

	}

	/**
	 * [UC3082] Atualizar Item Documento cobranca
	 * Obter cobranca documento com data imediatamente menor ou igual a data passada
	 * 
	 * @author Hebert Falcao
	 * @date 09/12/2012
	 */
	public CobrancaDocumento obterCobrancaDocumentoComDataImediatamenteMenorOuIgual(Integer idCobrancaAcao, Integer idImovel,
					Date dataCalculada) throws ErroRepositorioException{

		CobrancaDocumento retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select cbdo ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("where cbdo.cobrancaAcao.id = :idCobrancaAcao ");
			hql.append("  and cbdo.cobrancaAcaoAtividadeComando.id is null ");
			hql.append("  and cbdo.imovel.id = :idImovel ");
			hql.append("  and cbdo.emissao <= :dataCalculada ");
			hql.append("order by cbdo.emissao desc ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idCobrancaAcao", idCobrancaAcao);
			query.setInteger("idImovel", idImovel);
			query.setDate("dataCalculada", dataCalculada);

			retorno = (CobrancaDocumento) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3082] Atualizar Item Documento cobranca
	 * Verifica se a Acao sucessora foi gerada
	 * 
	 * @author Hebert Falcao
	 * @date 09/12/2012
	 */
	public boolean verificaSeAcaoSucessoraFoiGerada(Integer idCobrancaAcao, Integer idImovel, Date dataCalculada)
					throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select count(*) ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("where cbdo.cobrancaAcao.id = :idCobrancaAcao ");
			hql.append("  and cbdo.imovel.id = :idImovel ");
			hql.append("  and cbdo.emissao >= :dataCalculada ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idCobrancaAcao", idCobrancaAcao);
			query.setInteger("idImovel", idImovel);
			query.setDate("dataCalculada", dataCalculada);

			Integer quantidade = ((Number) query.uniqueResult()).intValue();

			if(quantidade > 0){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3089] Atualizar situacao Debito e da Acao dos Avisos Corte e Corte Individual
	 * Obter cobranca documento de aviso de corte e corte, com a­tem atualizados
	 * 
	 * @author Hebert Falcao
	 * @date 21/12/2012
	 */
	public Collection<CobrancaDocumento> obterCobrancaDocumentoDeAvisoDeCorteECorteComItemAualizado() throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select cbdo ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("left join fetch cbdo.cobrancaAcao cbac ");
			hql.append("left join fetch cbac.cobrancaCriterio cbct ");
			hql.append("left join fetch cbac.documentoTipo dotp ");
			hql.append("where cbdo.cobrancaAcao.id in (:idsCobrancaAcao) ");
			hql.append("  and cbdo.cobrancaAcaoAtividadeComando.id is null ");
			hql.append("  and exists (select cdit.cobrancaDocumento.id ");
			hql.append("              from CobrancaDocumentoItem cdit ");
			hql.append("              where cdit.indicadorAtualizado = :indicadorSim ");
			hql.append("                and cdit.cobrancaDocumento.id = cbdo.id) ");

			Collection<Integer> idsCobrancaAcao = new ArrayList<Integer>();

			idsCobrancaAcao.add(CobrancaAcao.AVISO_CORTE);
			idsCobrancaAcao.add(CobrancaAcao.CORTE_FISICO);

			Query query = session.createQuery(hql.toString());

			query.setParameterList("idsCobrancaAcao", idsCobrancaAcao);
			query.setInteger("indicadorSim", ConstantesSistema.SIM);

			retorno = (Collection<CobrancaDocumento>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3089] Atualizar situacao Debito e da Acao dos Avisos Corte e Corte Individual
	 * Verifica a existencia de aviso de corte, sem comando, fora do prazo de validade, com
	 * situacao
	 * da Acao "entregue" e com situacao do Debito "pendente"
	 * 
	 * @date 28/12/2012
	 * @author Hebert Falcao
	 */
	public Collection<CobrancaDocumento> obterAvisoDeCorteSemComandoForaDoPrazoDeValidadeEntegueEPendente() throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select cbdo ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("left join fetch cbdo.cobrancaAcao cbac ");
			hql.append("left join fetch cbac.documentoTipo dotp ");
			hql.append("where cbdo.cobrancaAcao.id = :cobrancaAcaoAvisoCorte ");
			hql.append("  and cbdo.cobrancaAcaoAtividadeComando.id is null ");
			hql.append("  and (cbdo.emissao + cbac.numeroDiasValidade) < current_date() ");
			hql.append("  and cbdo.cobrancaAcaoSituacao.id = :situacaoAcaoEntregue ");
			hql.append("  and cbdo.cobrancaDebitoSituacao.id = :situacaoDebitoPendente ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("cobrancaAcaoAvisoCorte", CobrancaAcao.AVISO_CORTE);
			query.setInteger("situacaoAcaoEntregue", CobrancaAcaoSituacao.ENTREGUE);
			query.setInteger("situacaoDebitoPendente", CobrancaDebitoSituacao.PENDENTE);

			retorno = (Collection<CobrancaDocumento>) query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3089] Atualizar situacao Debito e da Acao dos Avisos Corte e Corte Individual
	 * Verifica a existencia de corte, sem comando, fora do prazo de validade, com situacao da
	 * Acao
	 * "pendente" e com situacao do Debito "pendente"
	 * 
	 * @date 28/12/2012
	 * @author Hebert Falcao
	 */
	public Collection<CobrancaDocumento> obterCorteSemComandoForaDoPrazoDeValidadePendente() throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select cbdo ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("left join fetch cbdo.cobrancaAcao cbac ");
			hql.append("left join fetch cbac.documentoTipo dotp ");
			hql.append("where cbdo.cobrancaAcao.id = :cobrancaAcaoCorteFisico ");
			hql.append("  and cbdo.cobrancaAcaoAtividadeComando.id is null ");
			hql.append("  and (cbdo.emissao + cbac.numeroDiasValidade) < current_date() ");
			hql.append("  and cbdo.cobrancaAcaoSituacao.id = :situacaoAcaoPendente ");
			hql.append("  and cbdo.cobrancaDebitoSituacao.id = :situacaoDebitoPendente ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("cobrancaAcaoCorteFisico", CobrancaAcao.CORTE_FISICO);
			query.setInteger("situacaoAcaoPendente", CobrancaAcaoSituacao.PENDENTE);
			query.setInteger("situacaoDebitoPendente", CobrancaDebitoSituacao.PENDENTE);

			retorno = (Collection<CobrancaDocumento>) query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0203] Consultar Debitos
	 * [SB0008] Verificar Imovel em Processo de Corte
	 * 
	 * @author Hebert Falcao
	 * @date 29/12/2012
	 */
	private Boolean existeOsCortePendentePeloDocumentoDeCobranca(Integer idImovel, Date dataEmissaoDocCobranca)
					throws ErroRepositorioException{

		Boolean retorno = Boolean.FALSE;

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("select cbac.numeroDiasMinimoAcaoPrecedente ");
			consulta.append("from CobrancaAcao cbac ");
			consulta.append("where cbac.id = :idCobrancaAcaoCorteFisico ");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idCobrancaAcaoCorteFisico", CobrancaAcao.CORTE_FISICO);

			Object resultadoConsulta = query.setMaxResults(1).uniqueResult();

			Integer numeroDiasMinimoAcaoPrecedente = null;

			if(resultadoConsulta != null){
				numeroDiasMinimoAcaoPrecedente = ((Number) resultadoConsulta).intValue();
			}else{
				numeroDiasMinimoAcaoPrecedente = Integer.valueOf(0);
			}

			consulta = new StringBuffer();
			consulta.append("select os.id ");
			consulta.append("from OrdemServico os ");
			consulta.append("where os.imovel.id = :idImovel ");
			consulta.append("  and os.cobrancaDocumento.id is not null ");
			consulta.append("  and os.cobrancaDocumento.id in (select cbdo.id ");
			consulta.append("                                  from CobrancaDocumento cbdo ");
			consulta.append("                                  inner join cbdo.cobrancaAcao cbac ");
			consulta.append("                                  where cbdo.cobrancaAcaoAtividadeComando.id is null ");
			consulta.append("                                    and cbdo.imovel.id = :idImovel ");
			consulta.append("                                    and cbac.id = :idCobrancaAcaoCorteFisico ");
			consulta.append("                                    and cbdo.emissao >= :dataEmissaoDocCobranca ");
			consulta.append("                                    and (to_date(:dataEmissaoDocCobranca) + :numeroDiasMinimoAcaoPrecedente) ");
			consulta.append("                                           > current_date()) ");

			query = session.createQuery(consulta.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaAcaoCorteFisico", CobrancaAcao.CORTE_FISICO);
			query.setDate("dataEmissaoDocCobranca", Util.formatarDataInicial(dataEmissaoDocCobranca));
			query.setInteger("numeroDiasMinimoAcaoPrecedente", numeroDiasMinimoAcaoPrecedente);

			List<Integer> ids = query.list();

			if(!ids.isEmpty()){
				retorno = Boolean.TRUE;
			}
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Retorna o somata³rio de agua e esgoto para contas a vencer e vencidas.
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> obterSomatorioAguaEsgoto(Integer anoMesReferenciaContabil, String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{

			sql.append(" select categoria_DS as categoriaTotal, sum(SUM_VALOR_AGUA) AS totalAgua, sum(SUM_VALOR_ESGOTO) AS totalEsgoto, idCategoria FROM (  ");

			sql.append("  Select categoria.CATG_DSCATEGORIA as categoria_DS, ");
			sql.append("    sum (ContaCat.CTCG_VLAGUA) as SUM_VALOR_AGUA, ");
			sql.append("    sum (ContaCat.CTCG_VLESGOTO) as SUM_VALOR_ESGOTO, ");
			sql.append("    categoria.CATG_ID as idCategoria ");
			sql.append("  from Conta_Categoria ContaCat  ");
			sql.append("  Inner Join Categoria categoria on categoria.CATG_ID = ContaCat.CATG_ID ");
			sql.append("  Inner Join Conta conta on ContaCat.CNTA_ID = conta.CNTA_ID  ");

			appendCondicoesAguaEsgoto(anoMesReferenciaContabil, idLocalidade, idUnidadeNegocio, idGerenciaRegional, sql, true);
			// Group by e Order By
			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");

			sql.append(" UNION  ");

			sql.append("  Select categoria.CATG_DSCATEGORIA as categoria_DS,  ");
			sql.append("    sum (contaCat.ctch_vlagua) as SUM_VALOR_AGUA, ");
			sql.append("    sum (contaCat.ctch_vlesgoto) as SUM_VALOR_ESGOTO, ");
			sql.append("    categoria.CATG_ID as idCategoria ");
			sql.append("  from CONTA_CATEGORIA_HISTORICO contaCat ");
			sql.append("  Inner Join Categoria categoria on categoria.CATG_ID = contaCat.CATG_ID ");
			sql.append("  Inner Join Conta_Historico conta on contaCat.CNTA_ID = conta.CNTA_ID   ");

			appendCondicoesAguaEsgoto(anoMesReferenciaContabil, idLocalidade, idUnidadeNegocio, idGerenciaRegional, sql, false);

			sql.append(" and (select min(pagto.pghi_amreferenciaarrecadacao)   ");
			sql.append("      from pagamento_historico pagto  				   ");
			sql.append("      where pagto.imov_id = conta.imov_id 			   ");
			sql.append("      and pagto.pghi_amreferenciapagamento = conta.cnhi_amreferenciaconta) >  " + anoMesReferenciaContabil);

			// Group by e Order By
			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");
			sql.append(" order by idCategoria ");

			sql.append(" ) group by categoria_DS , idCategoria  ");
			sql.append(" order by idCategoria ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("categoriaTotal", Hibernate.STRING);
			sqlQuery.addScalar("totalAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("totalEsgoto", Hibernate.BIG_DECIMAL);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param opcaoConsultaAVencer
	 *            </true> data vencimento maior que data corrente </false> menor que a data corrente
	 * @param opcaoConsultaFinanciamento
	 *            se </true> usa "not in" para obter os tipos de financiamento </false> os tipo de
	 *            parcelamento.
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> obterSomatorioValorDebitosCobradosFinanciamentoOuParcelamento(Integer anoMesReferenciaContabil,
					String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional, boolean opcaoConsultaFinanciamento)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{
			sql.append(" select categoria_DS as categoria_DS,  ");
			sql.append("   SUM(somatorio_categoria) as total_Categoria,  ");
			sql.append("   idCategoria as idCategoria ");
			sql.append("   from (   ");

			sql.append(" select categoria.CATG_DSCATEGORIA as categoria_DS,  ");
			sql.append("   sum(dcc.DCCG_VLCATEGORIA) as somatorio_categoria,  ");
			sql.append("   categoria.CATG_ID idCategoria ");
			sql.append(" from Conta c    ");
			sql.append(" inner join debito_cobrado dc on  dc.cnta_id = c.cnta_id ");
			sql.append(" Inner Join debito_cobrado_categoria dcc on  dcc.dbcb_id = dc.dbcb_id ");
			sql.append(" Inner Join Categoria categoria on dcc.CATG_ID = categoria.CATG_ID ");

			appendCondicoesValorDebitoCobradoEHistorico(idLocalidade, idUnidadeNegocio, idGerenciaRegional, opcaoConsultaFinanciamento, sql);
			sql.append("  and c.cnta_amreferenciaconta <= " + anoMesReferenciaContabil);
			// Group by
			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");

			sql.append("  UNION  ");

			sql.append(" select categoria.CATG_DSCATEGORIA as categoria_DS, ");
			sql.append("   sum(dcc.dcch_vlcategoria) as somatorio_categoria,  ");
			sql.append("   categoria.CATG_ID idCategoria   ");
			sql.append(" from  conta_historico c  ");
			sql.append("   INNER JOIN debito_cobrado_historico dc on  dc.cnta_id = c.cnta_id   ");
			sql.append("   INNER JOIN debito_cobrado_categoria_hist dcc on dcc.dbhi_id = dc.dbhi_id ");
			sql.append("   INNER JOIN Categoria categoria on dcc.CATG_ID = categoria.CATG_ID  ");

			appendCondicoesValorDebitoCobradoEHistorico(idLocalidade, idUnidadeNegocio, idGerenciaRegional, opcaoConsultaFinanciamento, sql);
			sql.append(" and c.cnhi_amreferenciaconta <= " + anoMesReferenciaContabil);
			sql.append(" and (select min(pagto.pghi_amreferenciaarrecadacao) ");
			sql.append(" 	  from pagamento_historico pagto ");
			sql.append(" 	   where pagto.imov_id = c.imov_id ");
			sql.append(" 	    and pagto.pghi_amreferenciapagamento = c.cnhi_amreferenciaconta) > " + anoMesReferenciaContabil);

			// Group by
			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");

			sql.append("  )  ");
			sql.append("  group by idCategoria, categoria_DS order by idCategoria  ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("categoria_DS", Hibernate.STRING);
			sqlQuery.addScalar("total_Categoria", Hibernate.BIG_DECIMAL);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento
	 * (java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, boolean)
	 */
	public Collection<Object[]> obterSomatorioValorDebitosACobrarFinanciamentoOuParcelamento(Integer anoMesReferenciaContabil,
					String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional, boolean opcaoConsultaFinanciamento)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{

			sql.append("  Select categoria_DS as categoria_DS,  ");
			sql.append("  SUM (somatorio_categoria) as total_categoria, ");
			sql.append("  categoriaID as categoriaID  ");

			sql.append(" from ( ");

			sql.append(" select categoria.CATG_DSCATEGORIA as categoria_DS,  ");

			// sql.append(" 	sum(dacc.DBCG_VLCATEGORIA) as somatorio_categoria, ");
			sql.append(" 	sum(dacc.dbcg_vlcategoria - (round( (dacc.dbcg_vlcategoria / dac.dbac_nnprestacaodebito), 2 ) * dac.dbac_nnprestacaocobradas)) as somatorio_categoria, ");

			sql.append(" 	categoria.CATG_ID as categoriaID  ");
			sql.append("  FROM DEBITO_A_COBRAR_CATEGORIA dacc ");
			sql.append("  INNER JOIN DEBITO_A_COBRAR dac on dacc.DBAC_ID = dac.DBAC_ID ");
			sql.append("  INNER JOIN CATEGORIA categoria on dacc.CATG_ID = categoria.CATG_ID ");

			appendDebitosACobrarCondicoes(idLocalidade, idUnidadeNegocio, idGerenciaRegional, sql, "dac", opcaoConsultaFinanciamento, "dac");

			sql.append("  and dac.DBAC_AMREFERENCIACONTABIL <= " + anoMesReferenciaContabil);

			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");

			sql.append(" UNION ");

			sql.append(" select categoria.CATG_DSCATEGORIA as categoria_DS,    ");
			sql.append(" 	sum(debCobCat.dccg_vlcategoria) as somatorio_categoria, ");
			sql.append(" 	categoria.CATG_ID as categoriaID ");
			sql.append(" FROM conta conta 	 ");
			sql.append(" INNER JOIN debito_cobrado debCob on (debCob.cnta_id = conta.cnta_id)	 ");
			sql.append(" INNER JOIN debito_cobrado_categoria debCobCat on (debCobCat.dbcb_id = debCob.dbcb_id)	 ");
			sql.append(" INNER JOIN CATEGORIA categoria on debCobCat.CATG_ID = categoria.CATG_ID 	 ");

			appendDebitosACobrarCondicoes(idLocalidade, idUnidadeNegocio, idGerenciaRegional, sql, "conta", opcaoConsultaFinanciamento,
							"debCob");

			sql.append(" and conta.cnta_amreferenciaconta > " + anoMesReferenciaContabil);
			sql.append(" group by categoria.CATG_ID, categoria.CATG_DSCATEGORIA ");

			sql.append(" UNION ");

			sql.append(" SELECT categoria.CATG_DSCATEGORIA as categoria_DS, 	 ");
			sql.append(" 	SUM(debCobCat.dcch_vlcategoria) as somatorio_categoria,  ");
			sql.append(" 	categoria.CATG_ID as categoriaID ");
			sql.append(" FROM conta_historico conta  ");
			sql.append(" INNER JOIN localidade loca on (loca.loca_id = conta.loca_id)	 ");
			sql.append(" INNER JOIN debito_cobrado_historico debCob on (debCob.cnta_id = conta.cnta_id)	 ");
			sql.append(" INNER JOIN debito_cobrado_categoria_hist debCobCat on (debCobCat.dbhi_id = debCob.dbhi_id)	 ");
			sql.append(" INNER JOIN CATEGORIA categoria on debCobCat.CATG_ID = categoria.CATG_ID 	 ");

			appendDebitosACobrarCondicoes(idLocalidade, idUnidadeNegocio, idGerenciaRegional, sql, "conta", opcaoConsultaFinanciamento,
							"debCob");

			sql.append(" and conta.cnhi_amreferenciaconta >	 " + anoMesReferenciaContabil);
			sql.append(" and (select min(pagto.pghi_amreferenciaarrecadacao) ");
			sql.append(" 	  from pagamento_historico pagto ");
			sql.append(" 	   where pagto.imov_id = conta.imov_id ");
			sql.append(" 	    and pagto.pghi_amreferenciapagamento = conta.cnhi_amreferenciaconta) > " + anoMesReferenciaContabil);
			sql.append(" GROUP BY categoria.CATG_ID, categoria.CATG_DSCATEGORIA	 ");

			sql.append(" )  ");

			// Group by e Order By
			sql.append("	GROUP BY categoriaID, categoria_DS order by categoriaID ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("categoria_DS", Hibernate.STRING);
			sqlQuery.addScalar("total_categoria", Hibernate.BIG_DECIMAL);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	private void appendCondicoesValorDebitoCobradoEHistorico(String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional,
					boolean opcaoConsultaFinanciamento, StringBuilder sql){

		boolean unidadeNeg = Util.isNaoNuloBrancoZero(idUnidadeNegocio);
		boolean gerenciaReg = Util.isNaoNuloBrancoZero(idGerenciaRegional);
		boolean localidade = Util.isNaoNuloBrancoZero(idLocalidade) || unidadeNeg || gerenciaReg;

		if(localidade){
			sql.append("  INNER JOIN localidade loc ON c.LOCA_ID = loc.LOCA_ID ");
		}
		if(gerenciaReg){
			sql.append("  INNER JOIN gerencia_regional gr ON loc.greg_id = gr.greg_id  ");
		}
		if(unidadeNeg){
			sql.append("  INNER JOIN unidade_negocio uni ON  loc.uneg_id = uni.uneg_id ");
		}

		sql.append("  where c.dcst_idatual in ( ");
		sql.append(DebitoCreditoSituacao.NORMAL + ", ");
		sql.append(DebitoCreditoSituacao.RETIFICADA + ", ");
		sql.append(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO + ", ");
		sql.append(DebitoCreditoSituacao.INCLUIDA + ") ");

		if(opcaoConsultaFinanciamento){

			sql.append("  and dc.fntp_id not in ( ");
		}else{

			sql.append("  and dc.fntp_id in (  ");
		}

		sql.append(FinanciamentoTipo.PARCELAMENTO_AGUA + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_ESGOTO + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_SERVICO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_AGUA + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_ESGOTO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_SERVICO + ", ");
		sql.append(FinanciamentoTipo.JUROS_PARCELAMENTO + ", ");
		sql.append(FinanciamentoTipo.ENTRADA_PARCELAMENTO + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_AGUA_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_ESGOTO_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_SERVICO_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_EXERCICIO + ", ");
		sql.append(FinanciamentoTipo.PARCEL_EXERC_ANTERIOR + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_DO_EXERCICIO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_EXERC_ANTERIOR + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_PREFEITURAS + " ) ");

		// Where
		if(Util.isNaoNuloBrancoZero(idLocalidade)){
			sql.append(" AND loc.loca_id = " + idLocalidade);
		}

		if(gerenciaReg){
			sql.append(" AND gr.greg_id = " + idGerenciaRegional);
		}

		if(unidadeNeg){
			sql.append(" AND uni.uneg_id = " + idUnidadeNegocio);
		}
	}

	private void appendDebitosACobrarCondicoes(String idLocalidade, String idUnidadeNegocio, String idGerenciaRegional, StringBuilder sql,
					String alias, boolean opcaoConsultaFinanciamento, String aliasOpcaoFinanciamento){

		boolean unidadeNeg = Util.isNaoNuloBrancoZero(idUnidadeNegocio);
		boolean gerenciaReg = Util.isNaoNuloBrancoZero(idGerenciaRegional);
		boolean localidade = Util.isNaoNuloBrancoZero(idLocalidade) || unidadeNeg || gerenciaReg;

		if(localidade){
			sql.append("  INNER JOIN LOCALIDADE loc ON " + alias + ".LOCA_ID = loc.LOCA_ID ");
		}
		if(gerenciaReg){
			sql.append("  INNER JOIN GERENCIA_REGIONAL gr ON loc.greg_id = gr.greg_id  ");
		}
		if(unidadeNeg){
			sql.append("  INNER JOIN UNIDADE_NEGOCIO uni ON  loc.uneg_id = uni.uneg_id ");
		}

		sql.append("  where " + alias + ".DCST_IDATUAL in ( ");
		sql.append(DebitoCreditoSituacao.NORMAL + ", ");
		sql.append(DebitoCreditoSituacao.RETIFICADA + ", ");
		sql.append(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO + ", ");
		sql.append(DebitoCreditoSituacao.INCLUIDA + ") ");

		if(opcaoConsultaFinanciamento){

			sql.append("  and " + aliasOpcaoFinanciamento + ".fntp_id not in ( ");
		}else{

			sql.append("  and " + aliasOpcaoFinanciamento + ".fntp_id in (  ");
		}

		sql.append(FinanciamentoTipo.PARCELAMENTO_AGUA + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_ESGOTO + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_SERVICO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_AGUA + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_ESGOTO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_SERVICO + ", ");
		sql.append(FinanciamentoTipo.JUROS_PARCELAMENTO + ", ");
		sql.append(FinanciamentoTipo.ENTRADA_PARCELAMENTO + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_AGUA_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_ESGOTO_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_SERVICO_PDD + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_EXERCICIO + ", ");
		sql.append(FinanciamentoTipo.PARCEL_EXERC_ANTERIOR + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_DO_EXERCICIO + ", ");
		sql.append(FinanciamentoTipo.ARRASTO_EXERC_ANTERIOR + ", ");
		sql.append(FinanciamentoTipo.PARCELAMENTO_PREFEITURAS + " ) ");

		if(Util.isNaoNuloBrancoZero(idLocalidade)){
			sql.append(" AND loc.loca_id = " + idLocalidade);
		}

		if(gerenciaReg){
			sql.append(" AND gr.greg_id = " + idGerenciaRegional);
		}

		if(unidadeNeg){
			sql.append(" AND uni.uneg_id = " + idUnidadeNegocio);
		}
	}

	private void appendCondicoesAguaEsgoto(Integer anoMesReferenciaContabil, String idLocalidade, String idUnidadeNegocio,
					String idGerenciaRegional, StringBuilder sql, boolean naoEhContaHistorico){

		boolean unidadeNeg = Util.isNaoNuloBrancoZero(idUnidadeNegocio);
		boolean gerenciaReg = Util.isNaoNuloBrancoZero(idGerenciaRegional);
		boolean localidade = Util.isNaoNuloBrancoZero(idLocalidade) || unidadeNeg || gerenciaReg;

		if(localidade){
			sql.append("  INNER JOIN localidade loc ON conta.LOCA_ID = loc.LOCA_ID ");
		}
		if(gerenciaReg){
			sql.append("  INNER JOIN gerencia_regional gr ON loc.greg_id = gr.greg_id  ");
		}
		if(unidadeNeg){
			sql.append("  INNER JOIN unidade_negocio uni ON  loc.uneg_id = uni.uneg_id ");
		}

		sql.append("  where conta.dcst_idatual in ( ");
		sql.append(DebitoCreditoSituacao.NORMAL + ", ");
		sql.append(DebitoCreditoSituacao.RETIFICADA + ", ");
		sql.append(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO + ", ");
		sql.append(DebitoCreditoSituacao.INCLUIDA + ") ");

		if(naoEhContaHistorico){
			sql.append("  and conta.cnta_amreferenciaconta <= " + anoMesReferenciaContabil);
		}else{
			sql.append("  and conta.cnhi_amreferenciaconta <= " + anoMesReferenciaContabil);
		}

		// Where
		if(Util.isNaoNuloBrancoZero(idLocalidade)){
			sql.append(" AND loc.loca_id = " + idLocalidade);
		}

		if(gerenciaReg){
			sql.append(" AND gr.greg_id = " + idGerenciaRegional);
		}

		if(unidadeNeg){
			sql.append(" AND uni.uneg_id = " + idUnidadeNegocio);
		}

	}

	public Collection<Object[]> pesquisarContasVencidasParaReajustes(Integer mesAnoReferenciaContabil, String idLocalidade,
					String idUnidadeNegocio, String idGerenciaRegional, boolean isFinanciamento) throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{

			sql.append(" SELECT DISTINCT c.CNTA_ID AS idConta, ");
			sql.append(" c.IMOV_ID AS idImovel, ");
			sql.append(" c.cnta_dtrevisao AS dataRevisao, ");
			sql.append(" c.cnta_amreferenciaconta AS referencia,  ");
			sql.append(" c.cnta_dtvencimentoconta AS dataVencimentoConta,  ");
			sql.append(" c.cnta_vlagua AS valorAgua, ");
			sql.append(" c.cnta_vlesgoto AS valorEsgoto, ");
			sql.append(" c.cnta_vldebitos AS valorDebitos, ");
			sql.append(" c.cnta_vlcreditos AS valorCreditos, ");
			sql.append(" c.cnta_iccobrancamulta AS indicadorCobrancaMulta, ");
			sql.append(" c.cnta_dtemissao AS dataEmissao ");

			sql.append("  FROM CONTA c  ");
			sql.append("    INNER JOIN CONTA_CATEGORIA cc ON cc.cnta_id = c.cnta_id ");
			sql.append("    INNER JOIN DEBITO_COBRADO dc ON dc.CNTA_ID = c.CNTA_ID  ");
			sql.append("    INNER JOIN DEBITO_COBRADO_CATEGORIA dcc ON (dcc.DBCB_ID = dc.DBCB_ID AND dcc.CATG_ID = cc.CATG_ID)  "); // Chave_Composta

			boolean unidadeNeg = Util.isNaoNuloBrancoZero(idUnidadeNegocio);
			boolean gerenciaReg = Util.isNaoNuloBrancoZero(idGerenciaRegional);
			boolean localidade = Util.isNaoNuloBrancoZero(idLocalidade) || unidadeNeg || gerenciaReg; // Or
																										// gerenciaReg
																										// or
																										// unidadeNeg

			if(localidade){
				sql.append("  INNER JOIN localidade loc ON c.LOCA_ID = loc.LOCA_ID ");
			}
			if(gerenciaReg){
				sql.append("  INNER JOIN gerencia_regional gr ON loc.greg_id = gr.greg_id  ");
			}
			if(unidadeNeg){
				sql.append("  INNER JOIN unidade_negocio uni ON uni.uneg_id = loc.uneg_id ");
			}

			sql.append("  where c.dcst_idatual in ( ");
			sql.append(DebitoCreditoSituacao.NORMAL + ", ");
			sql.append(DebitoCreditoSituacao.RETIFICADA + ", ");
			sql.append(DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO + ", ");
			sql.append(DebitoCreditoSituacao.INCLUIDA + ") ");

			sql.append("  and c.CNTA_DTVENCIMENTOCONTA < current_date ");
			sql.append("  and c.cnta_amreferenciacontabil <= " + mesAnoReferenciaContabil);

			if(isFinanciamento){
				sql.append("  and dc.DBTP_ID not in (select PASI_VLPARAMETRO from PARAMETRO_SISTEMA where PASI_CDPARAMETRO like 'P_TIPO_DEBITO_PARCELAMENTO%') ");
			}else{
				sql.append("  and dc.DBTP_ID in (select PASI_VLPARAMETRO from PARAMETRO_SISTEMA where PASI_CDPARAMETRO like 'P_TIPO_DEBITO_PARCELAMENTO%') ");
			}

			// Where
			if(Util.isNaoNuloBrancoZero(idLocalidade)){
				sql.append(" AND loc.loca_id = " + idLocalidade);
			}

			if(Util.isNaoNuloBrancoZero(idGerenciaRegional)){
				sql.append(" AND gr.greg_id = " + idGerenciaRegional);
			}

			if(Util.isNaoNuloBrancoZero(idUnidadeNegocio)){
				sql.append(" AND uni.uneg_id = " + idUnidadeNegocio);
			}

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());
			sqlQuery.addScalar("idConta", Hibernate.INTEGER);
			sqlQuery.addScalar("idImovel", Hibernate.INTEGER);
			sqlQuery.addScalar("dataRevisao", Hibernate.DATE);
			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("dataVencimentoConta", Hibernate.DATE);
			sqlQuery.addScalar("valorAgua", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorEsgoto", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorDebitos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorCreditos", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("indicadorCobrancaMulta", Hibernate.SHORT);
			sqlQuery.addScalar("dataEmissao", Hibernate.DATE);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [FS0041] - Verificar existencia de guias correspondentes a Prestacoes de parcelamento com
	 * concessa£o de desconto nos Acrescimos
	 * 
	 * @author Yara Souza
	 * @date 19/01/2013
	 */
	public boolean verificarGuiaPagamentoParcelamentoComConcessaoDesconto(Integer idGuiaPagamento) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT gpag.id ");
			hql.append(" FROM GuiaPagamento gpag ");
			hql.append(" INNER JOIN gpag.parcelamento parc ");
			hql.append(" WHERE ");
			hql.append(" gpag.id = :idGuiaPagamento ");
			hql.append(" AND (parc.valorDescontoAcrescimos is not null AND parc.valorDescontoAcrescimos > 0) ");
			hql.append(" AND  gpag.documentoTipo.id <> :idDocumentoTipo and gpag.debitoCreditoSituacaoAtual.id <> :idDebitoCreditoSituaca ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idGuiaPagamento", idGuiaPagamento);
			query.setInteger("idDocumentoTipo", DocumentoTipo.ENTRADA_DE_PARCELAMENTO);
			query.setInteger("idDebitoCreditoSituaca", DebitoCreditoSituacao.ENTRADA_DE_PARCELAMENTO);

			Integer retornoHQL = (Integer) query.setMaxResults(1).uniqueResult();

			if(retornoHQL != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [FS0042] - Verificar existencia de Creditos a realizar correspondentes a desconto nos
	 * Acrescimos concedido no parcelamento
	 * 
	 * @author Yara Souza
	 * @date 19/01/2013
	 */
	public boolean verificarCreditoARealizarParcelamentoComConcessaoDesconto(Integer idCreditoARealizar) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT crar.id ");
			hql.append(" FROM CreditoARealizar crar ");
			hql.append(" INNER JOIN crar.parcelamento parc ");
			hql.append(" WHERE ");
			hql.append(" crar.id = :idCreditoARealizar ");
			hql.append(" AND (parc.valorDescontoAcrescimos is not null OR parc.valorDescontoAcrescimos > 0) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idCreditoARealizar", idCreditoARealizar);

			Integer retornoHQL = (Integer) query.setMaxResults(1).uniqueResult();

			if(retornoHQL != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection obterCreditoARealizarParcelamentoComConcessaoDesconto(Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT crar ");
			hql.append(" FROM CreditoARealizar crar ");
			hql.append(" INNER JOIN crar.parcelamento parc ");
			hql.append(" WHERE ");
			hql.append(" parc.id = :idParcelamento ");
			hql.append(" AND (parc.valorDescontoAcrescimos is not null OR parc.valorDescontoAcrescimos > 0) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idParcelamento", idParcelamento);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection obterCreditoRealizadoPorCreditoTipo(Integer idCreditoTipo, Integer idConta) throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT crrz ");
			hql.append(" FROM CreditoRealizado crrz ");
			hql.append(" INNER JOIN FETCH crrz.conta cnta ");
			hql.append(" INNER JOIN FETCH crrz.creditoTipo crtp ");
			hql.append(" WHERE ");
			hql.append(" cnta.id = :idConta ");
			hql.append(" AND  crtp.id = :idCreditoTipo  ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idConta", idConta);
			query.setInteger("idCreditoTipo", idCreditoTipo);

			retorno = (Collection) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * 
	 * 
	 */

	public BigDecimal obterValorDescontosAcrescimos(Integer idParcelamento) throws ErroRepositorioException{

		BigDecimal retorno = BigDecimal.ZERO;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" SELECT p.valorDescontoAcrescimos ");
			hql.append(" FROM Parcelamento p  ");
			hql.append(" WHERE ");
			hql.append(" p.id = :idParcelamento ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idParcelamento", idParcelamento);

			retorno = (BigDecimal) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Obtem o id da localidade do Imovel relacionado a  ordem de Servico, caso exista
	 * 
	 * @author Luciano Galvao
	 * @date 04/03/2013
	 */
	public Integer obterLocalidadeOrdemServico(Integer idOrdemServico) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer hql = new StringBuffer();

		try{

			hql.append(" select i.loca_id as idloca from imovel i");
			hql.append(" inner join ordem_servico os on os.imov_id = i.imov_id");
			hql.append(" where os.orse_id = :idOrdemServico");

			Query query = session.createSQLQuery(hql.toString()).addScalar("idloca", Hibernate.INTEGER);
			query.setInteger("idOrdemServico", idOrdemServico);

			retorno = (Integer) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * metodo que insere em batch uma lista de ResumoCobrancaAcaoEventual, setando o id do objeto
	 * com o identificador gerado pelo banco de dados
	 * [UC0614] Gerar Resumo das Acoes de cobranca Eventuais
	 * 
	 * @author Luciano Galvao
	 * @date 14/03/2013
	 */
	public void inserirResumoCobrancaAcaoEventualBatch(Collection<ResumoCobrancaAcaoEventual> colecaoResumoCobrancaAcaoEventual)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		if(!Util.isVazioOrNulo(colecaoResumoCobrancaAcaoEventual)){

			int i = 1;
			try{
				for(ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual : colecaoResumoCobrancaAcaoEventual){

					resumoCobrancaAcaoEventual.setId((Integer) session.save(resumoCobrancaAcaoEventual));

					if(i % 50 == 0){
						session.flush();
						session.clear();
					}

					i++;
				}

				session.flush();
				session.clear();

			}catch(HibernateException e){
				throw new ErroRepositorioException(e, "Erro no Hibernate");

			}finally{
				HibernateUtil.closeSession(session);
			}
		}
	}

	/**
	 * verificar se a(s) guias(s) de pagamento parcelados ja estao no historico
	 * [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 09/04/2007
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection verificarGuiaPagamentoHistoricoParcelamento(Integer idImovel, Integer idParcelamento) throws ErroRepositorioException{

		Collection retorno = null;
		String consulta;
		Session session = HibernateUtil.getSession();

		try{

			consulta = "select distinct(parcItem.id) " + "from " + "ParcelamentoItem parcItem "
							+ "inner join parcItem.guiaPagamentoGeral guiaPagmentoGeral "
							+ "left join guiaPagmentoGeral.guiaPagamentoHistorico gpagHist " + "where gpagHist.imovel.id = :idImovel "
							+ "and parcItem.parcelamento.id = :idParcelamento ";

			retorno = (Collection) session.createQuery(consulta).setInteger("idImovel", idImovel)
							.setInteger("idParcelamento", idParcelamento).list();

			// erro no hibernate
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
		// retorna a Colecao de atividades pesquisada(s)
		return retorno;
	}

	public GuiaPagamento obterGuiaPagamentoDoParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		GuiaPagamento retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT gpag  " + "FROM GuiaPagamento gpag " + "WHERE gpag.parcelamento = :idParcelamento ";

			retorno = (GuiaPagamento) session.createQuery(consulta).setInteger("idParcelamento", idParcelamento).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public GuiaPagamentoHistorico obterGuiaPagamentoHistoricoDoParcelamento(Integer idParcelamento) throws ErroRepositorioException{

		GuiaPagamentoHistorico retorno = null;

		Session session = HibernateUtil.getSession();
		String consulta;

		try{

			consulta = "SELECT gpag  " + "FROM GuiaPagamentoHistorico gpag " + "WHERE gpag.parcelamento = :idParcelamento ";

			retorno = (GuiaPagamentoHistorico) session.createQuery(consulta).setInteger("idParcelamento", idParcelamento).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3019] Identificar cobranca com Negociacao
	 * [SB0007] A Trata cobranca bancaria com pagamento da primeira prestacao e sem boleto
	 * Verifica se o a situacao do boleto permite gerar pedido de baixa
	 * 
	 * @author Carlos Chrystian
	 * @date 12/03/2013
	 */
	public boolean verificaPermissaoGerarPedidoBaixaBoleto(Integer idBoletoBancario) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();
		Integer pedidoDeBaixa = ConstantesSistema.BOLETO_BANCARIO_LANCAMENTO_ENVIO_PEDIDO_DE_BAIXA;
		Integer sustarProtestoEBaixarTitul = ConstantesSistema.BOLETO_BANCARIO_LANCAMENTO_ENVIO_SUSTAR_PROTESTO_E_BAIXAR_TITUL;

		try{
			sql.append(" select count(*) ");
			sql.append("from boleto_bancario bbco ");
			sql.append("where bbco.bbco_id = :idBoletoBancario ");
			sql.append("and bbco.bbst_idatual in ( select bble.bbst_idatualobrigatoria ");
			sql.append("							from boleto_bancario_lancmt_envio bble  ");
			sql.append(" 							where  bble.blen_id = " + pedidoDeBaixa + " or bble.blen_id = " + sustarProtestoEBaixarTitul + ")");
			sql.append("and not exists (select bbmv.bbco_id ");
			sql.append("               	from boleto_bancario_movimentacao bbmv ");
			sql.append("               	where bbmv.bbco_id = :idBoletoBancario ");
			sql.append("               	and blen_id is not null ");
			sql.append("                and (amit_id is null or (amit_id is not null and bbmv_idretorno is null))) ");

			Query query = session.createSQLQuery(sql.toString());

			query.setInteger("idBoletoBancario", idBoletoBancario);

			Integer quantidade = ((Number) query.uniqueResult()).intValue();

			if(quantidade > 0){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0476] Emitir Documento de cobranca - Ordem Corte Modelo 5
	 * 
	 * @author Andra Lopes
	 * @data 07/06/2012
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumento>
	 */
	public Collection pesquisarCobrancaDocumentoArquivoPdfModelo4e5(Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
					throws ErroRepositorioException{

		Collection retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append(" select cbdo.id, "); // 0 - CBDO_ID
			consulta.append(" imov.id, "); // 1 - IMOV_ID
			consulta.append(" cbdo.emissao, "); // 2 - CBDO_TMEMISSAO
			consulta.append(" loc.id, "); // 3 - LOCA_ID
			consulta.append(" cbdo.codigoSetorComercial, "); // 4 - CBDO_CDSETORCOMERCIAL
			consulta.append(" cbdo.numeroQuadra, ");// 5 - CBDO_NNQUADRA
			consulta.append(" imov.lote, "); // 6 - IMOV_NNLOTE
			consulta.append(" imov.subLote, "); // 7 - IMOV_NNSUBLOTE
			consulta.append(" cliente.nome, "); // 8 - CLIE_NMCLIENTE
			consulta.append(" hih.numeroHidrometro, "); // 9 - HIDR_NNHIDROMETRO
			consulta.append(" hli.descricaoAbreviada, "); // 10 - HILI_DSABREVIADAHIDROMETROLOCA
			consulta.append(" os.id, "); // 11 - ORSE_ID
			consulta.append(" hd.descricaoAbreviada, "); // 12 - HIDM_DSABREVIADAHIDROMETRODIAM
			consulta.append(" cbdo.valorDocumento, "); // 13 - CBDO_VLDOCUMENTO
			consulta.append(" loc.descricao, "); // 14 - LOCA_NMLOCALIDADE
			consulta.append(" muni.nome, "); // 15 - MUNI_NMMUNICIPIO
			consulta.append(" svtp.id, "); // 16 - SVTP_ID da OS gerada
			consulta.append(" cliente.id "); // 17 - CLIE_ID do Id Cliente
			consulta.append(" from CobrancaDocumento cbdo ");
			consulta.append(" left join cbdo.imovel imov ");
			consulta.append(" left join cbdo.cliente cliente ");
			consulta.append(" left join cbdo.ordensServico os ");
			consulta.append(" left join os.servicoTipo svtp ");
			consulta.append(" left join imov.localidade loc ");
			consulta.append(" left join loc.municipio muni ");
			consulta.append(" left join imov.ligacaoAgua ligagua ");
			consulta.append(" left join ligagua.hidrometroInstalacaoHistorico hih ");
			consulta.append(" left join hih.hidrometroLocalInstalacao hli ");
			consulta.append(" left join hih.hidrometro h ");
			consulta.append(" left join h.hidrometroDiametro hd ");

			consulta.append(" where ");

			consulta.append(" hih.dataRetirada is null ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append(" AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append(" AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			consulta.append(" order by loc.id, ");
			consulta.append(" cbdo.codigoSetorComercial, ");
			consulta.append(" cbdo.numeroQuadra, ");
			consulta.append(" imov.lote, ");
			consulta.append(" imov.subLote ");

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarCobrancaDocumentoArquivoPDF(java.lang.Integer,
	 * java.lang.Integer)
	 */
	public Collection<IEmitirArquivoAvisoOrdemCorteHelper> pesquisarCobrancaDocumentoArquivoPDFAvisoCorteModelo4e5(
					Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando) throws ErroRepositorioException{

		Collection<IEmitirArquivoAvisoOrdemCorteHelper> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT new gcom.cobranca.bean.EmitirArquivoPdfAvisoCorteHelper(");
			consulta.append("	cbdo.id, ");
			consulta.append("	cbdo.localidade.id, ");
			consulta.append("	cbdo.localidade.descricao, ");
			consulta.append("	imovel.id, ");
			consulta.append("	setorComercial.id, ");
			consulta.append("	setorComercial.codigo, ");
			consulta.append("	quadra.id, ");
			consulta.append("	quadra.numeroQuadra, ");
			consulta.append("	imovel.lote, ");
			consulta.append("	imovel.subLote, ");
			consulta.append("	cliente.nome as nomeCliente,  ");
			consulta.append("	bairro.nome,  ");
			consulta.append("	cbdo.emissao,  ");
			consulta.append(" (CASE ");
			consulta.append(" 	WHEN cbdo.cobrancaAcaoAtividadeComando.id IS NOT NULL THEN");
			consulta.append("		cbdo.cobrancaAcaoAtividadeComando.quantidadeDiasRealizacao ");
			consulta.append(" 	ELSE ");
			consulta.append("		ca.qtdDiasRealizacao ");
			consulta.append(" 	END) AS qtdDiasRealizacao, ");
			consulta.append(" 	os.id, ");
			consulta.append(" 	h.numero, ");
			consulta.append(" 	cbdo.valorDocumento, ");
			consulta.append(" 	cbdo.documentoTipo.id, ");
			consulta.append(" 	cbdo.numeroSequenciaDocumento) ");
			consulta.append("FROM CobrancaDocumento cbdo ");
			consulta.append("LEFT JOIN cbdo.imovel imovel ");
			consulta.append("LEFT JOIN cbdo.cliente cliente ");
			consulta.append("LEFT JOIN cbdo.ordensServico os ");
			consulta.append("LEFT JOIN imovel.localidade loc ");
			consulta.append("LEFT JOIN imovel.setorComercial setorComercial ");
			consulta.append("LEFT JOIN imovel.quadra quadra ");
			consulta.append("LEFT JOIN imovel.logradouroBairro logbairro ");
			consulta.append("LEFT JOIN logbairro.bairro bairro ");
			consulta.append("LEFT JOIN cbdo.cobrancaAcao ca ");
			consulta.append("LEFT JOIN imovel.ligacaoAgua ligagua ");
			consulta.append("LEFT JOIN ligagua.hidrometroInstalacaoHistorico hih ");
			consulta.append("LEFT JOIN hih.hidrometro h ");
			consulta.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			consulta.append(" ORDER BY cbdo.localidade, ");
			consulta.append(" cbdo.codigoSetorComercial, ");
			consulta.append(" cbdo.quadra, ");
			consulta.append(" imovel.lote, ");
			consulta.append(" imovel.subLote ");

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * @param idCobrancaDocumento
	 * @param idSituacao
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection<Integer> pesquisarItensPorSituacaoDebitoParaGeracaoResumoEventual(Integer idCobrancaDocumento, Integer idSituacao)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Integer> retorno = new ArrayList<Integer>();
		StringBuilder consulta = new StringBuilder();

		try{
			// select
			// item.cdit_id as idCdit
			// from cobranca_documento_item item
			// where item.cbdo_id =1801936
			// and item.cdst_id is not null and item.cdst_id = 3
			// and item.cdit_dtsituacaodebito in (select max(item1.cdit_dtsituacaodebito) from
			// cobranca_documento_item item1 where item1.cbdo_id = item.cbdo_id)
			// group by item.cdit_id, item.cdit_dtsituacaodebito
			// order by item.cdit_dtsituacaodebito

			consulta.append("select ");
			consulta.append("item.cdit_id as idCdit ");
			consulta.append("from cobranca_documento_item item  ");
			consulta.append("where item.cbdo_id = :idCobrancaDocumento ");
			consulta.append("and item.cdst_id is not null and item.cdst_id = :idSituacao ");
			consulta.append("and item.cdit_dtsituacaodebito in (select max(item1.cdit_dtsituacaodebito) from cobranca_documento_item item1  where item1.cbdo_id =  item.cbdo_id) ");

			consulta.append("order by item.cdit_dtsituacaodebito ");

			retorno = (Collection<Integer>) session.createSQLQuery(consulta.toString()).addScalar("idCdit", Hibernate.INTEGER)
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).setInteger("idSituacao", idSituacao).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public CobrancaDocumentoItem pesquisarCobrancaDocumentoItem(Integer idCobrancaDocumentoItem) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		CobrancaDocumentoItem retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("FROM CobrancaDocumentoItem cdi ");
			consulta.append("WHERE cdi.id = :idCobrancaDocumentoItem ");

			retorno = (CobrancaDocumentoItem) session.createQuery(consulta.toString())
							.setInteger("idCobrancaDocumentoItem", idCobrancaDocumentoItem).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<Object[]> pesquisarIdParcelamento(Integer idConta, Integer idGuiaPagamento, Integer numeroPrestacao)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append(" select p.parc_id as idParcelamento, p.cbfm_id as idCobrancaForma  from parcelamento_item pi  ");
			consulta.append(" inner join parcelamento p on p.parc_id = pi.parc_id   ");
			consulta.append("where  ");
			if(idConta != null){
				consulta.append(" pi.cnta_id = :idConta  ");

				retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idParcelamento", Hibernate.INTEGER)
								.addScalar("idCobrancaForma", Hibernate.INTEGER).setInteger("idConta", idConta).list();

			}else if(idGuiaPagamento != null && numeroPrestacao != null){
				consulta.append(" pi.gpag_id = :idGuiaPagamento  ");
				consulta.append(" and pi.pcit_nnprestacao = :numeroPrestacao  ");

				retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idParcelamento", Hibernate.INTEGER)
								.addScalar("idCobrancaForma", Hibernate.INTEGER).setInteger("idGuiaPagamento", idGuiaPagamento)
								.setInteger("numeroPrestacao", numeroPrestacao)

								.list();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<Empresa> consultarEmpresaCobrancaAdministrativa() throws ErroRepositorioException{

		Collection<Object[]> retorno = null;
		Collection<Empresa> colecaoEmpresa = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select empr.empr_id as id, ");
			consulta.append("empr.empr_nmempresa as descricao, ");
			consulta.append("empr.empr_dsemail as email, ");
			consulta.append("empr.empr_icuso as indicadorUso, ");
			consulta.append("empr.empr_tmultimaalteracao as ultimaAlteracao, ");
			consulta.append("empr.empr_icempresaprincipal as indicadorEmpresaPrincipal, ");
			consulta.append("empr.empr_nmabreviadoempresa as descricaoAbreviada ");

			consulta.append("from empresa empr ");
			consulta.append("join cobranca_contrato cbco on cbco.empr_id = empr.empr_id and cbco.cbco_dtcontratoencerramento is null");

			retorno = session.createSQLQuery(consulta.toString()).addScalar("id", Hibernate.INTEGER)
							.addScalar("descricao", Hibernate.STRING).addScalar("email", Hibernate.STRING)
							.addScalar("indicadorUso", Hibernate.INTEGER).addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)
							.addScalar("indicadorEmpresaPrincipal", Hibernate.INTEGER).addScalar("descricaoAbreviada", Hibernate.STRING)
							.list();

			if((retorno != null) && (!retorno.isEmpty())){

				colecaoEmpresa = new ArrayList<Empresa>();

				for(Object[] objeto : retorno){

					Empresa empresa = new Empresa();

					empresa.setId((Integer) objeto[0]);
					empresa.setDescricao((String) objeto[1]);

					colecaoEmpresa.add(empresa);
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return colecaoEmpresa;
	}

	/**
	 * [UC3099] Gerar cobranca Administrativa
	 * 
	 * @author Hiroshi Goncalves
	 * @date 15/07/2013
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public BigDecimal consultarPercentualRemuneracaoCobrancaAdministrativa(int idCobrancaAcaoAtividadeComando, int idDocumentoCobranca)
					throws ErroRepositorioException{

		BigDecimal retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select CCRS_PCREMUNERACAO from COBRANCA_CONTRATO_REMUN_SUCESS ");
			hql.append("where CBCO_ID in ( ");
			hql.append("select CBCO_ID from COBRANCA_CONTRATO ");
			hql.append("where EMPR_ID in ( ");
			hql.append("select EMPR_ID from COBRANCA_ACAO_ATIVIDADE_COMAND ");
			hql.append(" where CACM_ID = :idCobrancaAcaoAtividadeComando) ");
			hql.append("and CBCO_DTCONTRATOENCERRAMENTO is null) ");
			hql.append("and CCRS_QTDIASVENCIDOS >= ");
			hql.append("( select MAX (trunc(current_date)  - trunc(CNTA_DTVENCIMENTOCONTA)) ");
			hql.append("from CONTA cnta ");
			hql.append("join COBRANCA_DOCUMENTO_ITEM cdit on cdit.CNTA_ID = cnta.CNTA_ID ");
			hql.append("and cdit.CBDO_ID = :idDocumentoCobranca) ");
			hql.append("and ROWNUM = 1 order by ccrs_qtdiasvencidos ");

			Query query = session.createSQLQuery(hql.toString());

			query.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);
			query.setInteger("idDocumentoCobranca", idDocumentoCobranca);

			retorno = (BigDecimal) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<CobrancaDocumento> obterCobrancaDocumentoPorCACM(Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		Collection<CobrancaDocumento> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select distinct(cbdo) ");
			hql.append("from CobrancaDocumento cbdo ");
			hql.append("join fetch cbdo.cobrancaAcao cbac ");
			hql.append("left join fetch cbdo.cliente cliente ");
			hql.append("join fetch cbdo.cobrancaDocumentoItems cdit ");
			hql.append("join fetch cdit.documentoTipo dctp ");
			hql.append("where cbdo.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando ");
			hql.append("order by cbdo.id ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);

			retorno = (Collection<CobrancaDocumento>) query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#verificarOcorrenciaCobrancaAdministrativaPosterior(java
	 * .lang.Integer, int)
	 */
	public boolean verificarOcorrenciaCobrancaAdministrativaPosterior(Integer idImovelCobrancaSituacao, Integer idImovel)
					throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("SELECT ics.ISCB_ID AS idImovelCobrancaSituacao FROM IMOVEL_COBRANCA_SITUACAO ics ");
			hql.append("INNER JOIN COBRANCA_SITUACAO cs ON ics.CBST_ID = cs.CBST_ID ");
			hql.append("WHERE ");
			hql.append("	ics.IMOV_ID = :idImovel ");
			hql.append("	AND ics.ISCB_ID > :idImovelCobrancaSituacao ");
			hql.append("	AND cs.CBST_ID = :idCobrancaSituacao ");

			Query query = session.createSQLQuery(hql.toString()).addScalar("idImovelCobrancaSituacao", Hibernate.INTEGER);

			query.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao);
			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA);

			if(Util.isNaoNuloBrancoZero(query.setMaxResults(1).uniqueResult())){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#selecionarContasRemuneraveisMarcadasNaCobrancaAdministrativa
	 * (java.lang.Integer, java.lang.Integer)
	 */
	public List<Conta> selecionarContasRemuneraveisMarcadasNaCobrancaAdministrativa(Integer idImovel, Integer idCobrancaAcaoAtividadeComando)
					throws ErroRepositorioException{

		List<Conta> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{

			hql.append("select conta ");
			hql.append("from Conta conta ");
			hql.append("where ");
			hql.append(" conta.indicadorCobrancaAdministrativa = :indicadorCobrancaAdministrativa ");
			hql.append(" and conta.imovel.id = :idImovel ");
			hql.append(" and conta.id in (select cobrancaDocumentoItem.contaGeral.id ");
			hql.append(" 				from CobrancaDocumentoItem cobrancaDocumentoItem ");
			hql.append(" 				inner join cobrancaDocumentoItem.cobrancaDocumento cobrancaDocumento ");
			hql.append(" 				where ");
			hql.append(" 					cobrancaDocumento.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando ");
			hql.append(" 					and cobrancaDocumentoItem.contaGeral.id = conta.id ");
			hql.append(" 				) ");

			// hql.append("select conta");
			// hql.append("from CobrancaDocumentoItem cobrancaDocumentoItem ");
			// hql.append("inner join cobrancaDocumentoItem.contaGeral contaGeral ");
			// hql.append("inner join contaGeral.conta conta ");
			// hql.append("where ");
			// hql.append(" conta.indicadorCobrancaAdministrativa = :indicadorCobrancaAdministrativa ");
			// hql.append(" and conta.imovel.id = :idImovel ");
			// hql.append(" and cobrancaDocumentoItem.cobrancaDocumento.id = ( ");
			// hql.append(" 												select ");
			// hql.append(" 													 cobrancaDocumento.id");
			// hql.append(" 												from CobrancaDocumento cobrancaDocumento");
			// hql.append(" 												where ");
			// hql.append(" 													cobrancaDocumento.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando ");
			// hql.append(" 												) ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("indicadorCobrancaAdministrativa", ConstantesSistema.SIM);
			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);

			retorno = (List<Conta>) query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#
	 * selecionarContasRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa
	 * (java.util.Date, java.lang.Integer)
	 */
	public List<Conta> selecionarContasRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(Date dataImplantacaoCobranca,
					Integer idImovel, Date dataRetiradaCobranca) throws ErroRepositorioException{

		List<Conta> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select conta ");
			hql.append("from Conta conta ");
			hql.append("where ");
			hql.append(" conta.indicadorRemuneraCobrancaAdministrativa = :indicadorRemuneraCobrancaAdministrativa ");
			hql.append(" and conta.indicadorCobrancaAdministrativa = :indicadorCobrancaAdministrativa ");
			hql.append(" and conta.dataVencimentoConta >= :dataImplantacaoCobranca ");

			if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
				hql.append(" and conta.dataVencimentoConta <= :dataRetiradaCobranca ");
			}

			hql.append(" and conta.imovel.id = :idImovel ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("indicadorRemuneraCobrancaAdministrativa", ConstantesSistema.SIM);
			query.setInteger("indicadorCobrancaAdministrativa", ConstantesSistema.NAO);
			query.setDate("dataImplantacaoCobranca", dataImplantacaoCobranca);

			if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
				query.setDate("dataRetiradaCobranca", dataRetiradaCobranca);
			}

			query.setInteger("idImovel", idImovel);

			retorno = (List<Conta>) query.list();
		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#
	 * selecionarDebitosCobradosRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa
	 * (java.util.Date, java.lang.Integer)
	 */
	public List<DebitoCobrado> selecionarDebitosCobradosRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
					Date dataImplantacaoCobranca, Integer idImovel, Date dataRetiradaCobranca) throws ErroRepositorioException{

		List<DebitoCobrado> retorno = null;
		List<Object[]> retornoQuery = null;
		DebitoCobrado debitoCobrado = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select conta.id, SUM(debitoCobrado.valorPrestacao) ");
			hql.append("from DebitoCobrado debitoCobrado ");
			hql.append("inner join debitoCobrado.conta conta ");
			hql.append("where ");
			hql.append("	debitoCobrado.indicadorRemuneraCobrancaAdministrativa = :indRemuneraCobAdmDebitoCobrado ");
			hql.append("	and conta.indicadorRemuneraCobrancaAdministrativa = :indRemuneraCobAdministrativa ");
			hql.append("	and conta.indicadorCobrancaAdministrativa = :indCobAdministrativa ");
			hql.append("	and conta.dataVencimentoConta >= :dataVencimentoConta ");

			// if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
			// hql.append(" and conta.dataVencimentoConta <= :dataRetiradaCobranca ");
			// }

			hql.append("	and conta.imovel.id = :idImovel ");
			hql.append("group by ");
			hql.append("	conta.id ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("indRemuneraCobAdmDebitoCobrado", ConstantesSistema.SIM);
			query.setInteger("indRemuneraCobAdministrativa", ConstantesSistema.NAO);
			query.setInteger("indCobAdministrativa", ConstantesSistema.NAO);
			query.setDate("dataVencimentoConta", dataImplantacaoCobranca);

			if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
				query.setDate("dataRetiradaCobranca", dataRetiradaCobranca);
			}

			query.setInteger("idImovel", idImovel);

			retornoQuery = (List<Object[]>) query.list();

			if(Util.isNaoNuloBrancoZero(retornoQuery)){
				retorno = new ArrayList<DebitoCobrado>();

				for(Object[] objects : retornoQuery){
					debitoCobrado = new DebitoCobrado();
					debitoCobrado.setConta(new Conta((Integer) objects[0]));
					debitoCobrado.setValorPrestacao((BigDecimal) objects[1]);

					retorno.add(debitoCobrado);
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#
	 * selecionarGuiasPagamentoRemuneraveisMarcadaNaCobrancaAdministrativa(java.lang.Integer,
	 * java.lang.Integer)
	 */
	public List<GuiaPagamentoPrestacao> selecionarGuiasPagamentoRemuneraveisMarcadaNaCobrancaAdministrativa(
					Integer idCobrancaAcaoAtividadeComando, Integer idImovel) throws ErroRepositorioException{

		List<GuiaPagamentoPrestacao> retorno = null;
		List<Object[]> retornoQuery = null;
		GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select guiaPagamento.id, guiaPagamentoPrestacao.comp_id.numeroPrestacao, SUM(guiaPagamentoPrestacao.valorPrestacao) ");
			hql.append("from GuiaPagamentoPrestacao guiaPagamentoPrestacao ");
			// hql.append("inner join guiaPagamentoPrestacao.guiaPagamento guiaPagamento ");
			hql.append("where ");
			hql.append("	guiaPagamentoPrestacao.indicadorCobrancaAdministrativa = :indCobAdministrativa ");
			hql.append("	and guiaPagamento.imovel.id = :idImovel ");
			hql.append("	and  (guiaPagamentoPrestacao.comp_id.guiaPagamentoId, guiaPagamentoPrestacao.comp_id.numeroPrestacao) = (");
			hql.append("									select  ");
			hql.append("										  cobrancaDocumentoItem.guiaPagamentoGeral.id, cobrancaDocumentoItem.numeroDaPrestacao");
			hql.append("									from CobrancaDocumentoItem cobrancaDocumentoItem");
			hql.append("									inner join cobrancaDocumentoItem.cobrancaDocumento cobrancaDocumento ");
			hql.append("									where ");
			hql.append("										cobrancaDocumentoItem.guiaPagamentoGeral.id = guiaPagamentoPrestacao.comp_id.guiaPagamentoId");
			hql.append("										and cobrancaDocumentoItem.numeroDaPrestacao = guiaPagamentoPrestacao.comp_id.numeroPrestacao");
			hql.append("										and cobrancaDocumento.cobrancaAcaoAtividadeComando.id = :idCobrancaAcaoAtividadeComando");
			hql.append("									) ");
			hql.append("group by ");
			hql.append("	guiaPagamentoPrestacao.comp_id.guiaPagamentoId, guiaPagamentoPrestacao.comp_id.numeroPrestacao ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("indCobAdministrativa", ConstantesSistema.SIM);
			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaAcaoAtividadeComando", idCobrancaAcaoAtividadeComando);

			retornoQuery = (List<Object[]>) query.list();

			if(Util.isNaoNuloBrancoZero(retornoQuery)){
				retorno = new ArrayList<GuiaPagamentoPrestacao>();

				for(Object[] objects : retornoQuery){
					guiaPagamentoPrestacao = new GuiaPagamentoPrestacao();
					guiaPagamentoPrestacao.setGuiaPagamento(new GuiaPagamento((Integer) objects[0]));
					guiaPagamentoPrestacao.setNumeroPrestacao((Short) objects[1]);
					guiaPagamentoPrestacao.setValorPrestacao((BigDecimal) objects[2]);

					retorno.add(guiaPagamentoPrestacao);
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public List<GuiaPagamentoPrestacao> selecionarGuiasPagamentoRemuneraveisComVencimentoAPartirEntradaImovelNaCobrancaAdministrativa(
					Date dataImplantacaoCobranca, Integer idImovel, Date dataRetiradaCobranca) throws ErroRepositorioException{

		List<GuiaPagamentoPrestacao> retorno = null;
		List<Object[]> retornoQuery = null;
		GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select guiaPagamentoPrestacao.comp_id.guiaPagamentoId, guiaPagamentoPrestacao.comp_id.numeroPrestacao, SUM(guiaPagamentoPrestacao.valorPrestacao) ");
			hql.append("from GuiaPagamentoPrestacao guiaPagamentoPrestacao ");
			// hql.append("inner join guiaPagamentoPrestacao.guiaPagamento guiaPagamento ");
			hql.append("where ");
			hql.append("	guiaPagamentoPrestacao.indicadorRemuneraCobrancaAdministrativa = :indRemuneracaoCobAdmin ");
			hql.append("	and guiaPagamentoPrestacao.indicadorCobrancaAdministrativa = :indCobAdministrativa ");
			hql.append("	and guiaPagamentoPrestacao.dataVencimento >= :dataVencimento ");

			if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
				hql.append(" and guiaPagamentoPrestacao.dataVencimento <= :dataRetiradaCobranca ");
			}

			hql.append("	and guiaPagamento.imovel.id = :idImovel ");
			hql.append("group by ");
			hql.append("	guiaPagamentoPrestacao.comp_id.guiaPagamentoId, guiaPagamentoPrestacao.comp_id.numeroPrestacao ");

			Query query = session.createQuery(hql.toString());

			query.setInteger("indRemuneracaoCobAdmin", ConstantesSistema.SIM);
			query.setInteger("indCobAdministrativa", ConstantesSistema.NAO);
			query.setDate("dataVencimento", dataImplantacaoCobranca);

			if(Util.isNaoNuloBrancoZero(dataRetiradaCobranca)){
				query.setDate("dataRetiradaCobranca", dataRetiradaCobranca);
			}

			query.setInteger("idImovel", idImovel);

			retornoQuery = (List<Object[]>) query.list();

			if(Util.isNaoNuloBrancoZero(retornoQuery)){
				retorno = new ArrayList<GuiaPagamentoPrestacao>();

				for(Object[] objects : retornoQuery){
					guiaPagamentoPrestacao = new GuiaPagamentoPrestacao();
					guiaPagamentoPrestacao.setGuiaPagamento(new GuiaPagamento((Integer) objects[0]));
					guiaPagamentoPrestacao.setNumeroPrestacao((Short) objects[1]);
					guiaPagamentoPrestacao.setValorPrestacao((BigDecimal) objects[2]);

					retorno.add(guiaPagamentoPrestacao);
				}
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#
	 * selecionarDebitoACobrarRemuneraveisComReferenciaAPartirEntradaImovelNaCobrancaAdministrativa
	 * (java.lang.Integer, java.lang.Integer)
	 */
	public List<DebitoACobrar> selecionarDebitoACobrarRemuneraveisComReferenciaAPartirEntradaImovelNaCobrancaAdministrativa(
					Integer anoMesDataImplantacaoCobranca, Integer idImovel, Integer anoMesDataRetiradaCobranca)
					throws ErroRepositorioException{

		List<DebitoACobrar> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select debitoACobrar ");
			hql.append("from DebitoACobrar debitoACobrar ");
			hql.append("where ");
			hql.append("	debitoACobrar.indicadorRemuneraCobrancaAdministrativa = :indRemuneraCobAdmDebitoCobrado ");
			hql.append("	and debitoACobrar.anoMesReferenciaDebito >= :anoMesDataImplantacaoCobranca ");
			hql.append("	and debitoACobrar.imovel.id = :idImovel ");

			if(Util.isNaoNuloBrancoZero(anoMesDataRetiradaCobranca)){
				hql.append(" and debitoACobrar.anoMesReferenciaDebito <= :anoMesDataRetiradaCobranca ");
			}

			Query query = session.createQuery(hql.toString());

			query.setInteger("indRemuneraCobAdmDebitoCobrado", ConstantesSistema.SIM);
			query.setInteger("anoMesDataImplantacaoCobranca", anoMesDataImplantacaoCobranca);
			query.setInteger("idImovel", idImovel);

			if(Util.isNaoNuloBrancoZero(anoMesDataRetiradaCobranca)){
				query.setInteger("anoMesDataRetiradaCobranca", anoMesDataRetiradaCobranca);
			}

			retorno = (List<DebitoACobrar>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#selecionarGuiaPagamentoPrestacaoCobrancaAdministrativa
	 * (java.lang.Integer, java.lang.Integer)
	 */
	public Object selecionarGuiaPagamentoPrestacaoCobrancaAdministrativa(Integer idGuiaPagamento, Short numeroPrestacao)
					throws ErroRepositorioException{

		Object retorno = null;
		List<Object> listaRetorno = null;
		GuiaPagamentoPrestacao guiaPagamentoPrestacao = null;
		GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico = null;
		BigDecimal valorTotal = BigDecimal.ZERO;

		Session session = HibernateUtil.getSession();
		StringBuilder sql = new StringBuilder();

		try{
			sql.append("SELECT ");
			sql.append("	gpp.GPAG_ID AS idGuiaPagamento, ");
			sql.append("	gpp.GPPR_NNPRESTACAO AS numeroPrestacao, ");
			sql.append("	gpp.GPPR_DTEMISSAO AS dataEmissao, ");
			sql.append("	dt.DBTP_ID AS idDebitoTipo, ");
			sql.append("	dt.DBTP_DSDEBITOTIPO AS dsDebitoTipo, ");
			sql.append("	gpp.GPPR_VLPRESTACAO AS valorPrestacao, ");
			sql.append("	null AS idDebitoCreditoSituacao, ");
			sql.append("	gpp.gppr_iccobrancaadministrativa AS indCobAdministrativa, ");
			sql.append("	gpp.gppr_icremuneracobrancaadm AS indRemCobAdministrativa, ");
			sql.append("	2 AS historico ");
			sql.append("FROM GUIA_PAGAMENTO_PRESTACAO gpp  ");
			sql.append("INNER JOIN DEBITO_TIPO dt ON gpp.dbtp_id = dt.dbtp_id ");
			sql.append("WHERE ");
			sql.append("    gpp.GPAG_ID = :idGuiaPagamento ");
			sql.append("    AND gpp.GPPR_NNPRESTACAO = :numeroPrestacao ");
			sql.append("UNION ");
			sql.append("SELECT ");
			sql.append("	gpph.GPAG_ID AS idGuiaPagamento, ");
			sql.append("	gpph.GPPH_NNPRESTACAO AS numeroPrestacao, ");
			sql.append("	gpph.GPPH_DTEMISSAO AS dataEmissao, ");
			sql.append("	dt.DBTP_ID AS idDebitoTipo, ");
			sql.append("	dt.DBTP_DSDEBITOTIPO AS dsDebitoTipo, ");
			sql.append("	gpph.GPPH_VLPRESTACAO AS valorPrestacao, ");
			sql.append("	dcs.DCST_ID AS idDebitoCreditoSituacao, ");
			sql.append("	gpph.gpph_iccobrancaadministrativa AS indCobAdministrativa, ");
			sql.append("	gpph.gpph_icremuneracobrancaadm AS indRemCobAdministrativa, ");
			sql.append("	1 AS historico ");
			sql.append("FROM GUIA_PAGAMENTO_PRESTACAO_HIST gpph  ");
			sql.append("INNER JOIN DEBITO_TIPO dt ON gpph.dbtp_id = dt.dbtp_id ");
			sql.append("INNER JOIN DEBITO_CREDITO_SITUACAO dcs ON gpph.DCST_ID = dcs.DCST_ID ");
			sql.append("WHERE ");
			sql.append("    gpph.GPAG_ID = :idGuiaPagamento ");
			sql.append("    AND gpph.GPPH_NNPRESTACAO = :numeroPrestacao ");

			// hql.append("select guiaPagamentoPrestacao AS gpp ");
			// hql.append("from GuiaPagamentoPrestacao guiaPagamentoPrestacao ");
			// hql.append("inner join fetch guiaPagamentoPrestacao.debitoTipo ");
			// hql.append("where ");
			// hql.append("	guiaPagamentoPrestacao.comp_id.guiaPagamentoId = :idGuiaPagamento ");
			// hql.append("	and guiaPagamentoPrestacao.comp_id.numeroPrestacao = :numeroPrestacao ");
			// hql.append("union ");
			// hql.append("select guiaPagamentoPrestacaoHistorico  AS gpp ");
			// hql.append("from GuiaPagamentoPrestacaoHistorico guiaPagamentoPrestacaoHistorico ");
			// hql.append("inner join fetch guiaPagamentoPrestacaoHistorico.debitoTipo ");
			// hql.append("inner join fetch guiaPagamentoPrestacaoHistorico.debitoCreditoSituacao ");
			// hql.append("where ");
			// hql.append("	guiaPagamentoPrestacaoHistorico.comp_id.guiaPagamentoId = :idGuiaPagamento ");
			// hql.append("	and guiaPagamentoPrestacaoHistorico.comp_id.numeroPrestacao = :numeroPrestacao ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("idGuiaPagamento", Hibernate.INTEGER);
			sqlQuery.addScalar("numeroPrestacao", Hibernate.SHORT);
			sqlQuery.addScalar("dataEmissao", Hibernate.DATE);
			sqlQuery.addScalar("idDebitoTipo", Hibernate.INTEGER);
			sqlQuery.addScalar("dsDebitoTipo", Hibernate.STRING);
			sqlQuery.addScalar("valorPrestacao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("idDebitoCreditoSituacao", Hibernate.INTEGER);
			sqlQuery.addScalar("indCobAdministrativa", Hibernate.SHORT);
			sqlQuery.addScalar("indRemCobAdministrativa", Hibernate.SHORT);
			sqlQuery.addScalar("historico", Hibernate.SHORT);

			sqlQuery.setInteger("idGuiaPagamento", idGuiaPagamento);
			sqlQuery.setShort("numeroPrestacao", numeroPrestacao);

			listaRetorno = sqlQuery.list();

			if(Util.isNaoNuloBrancoZero(listaRetorno)){
				for(Object object : listaRetorno){
					Object[] objects = (Object[]) object;
					if(((Short) objects[9]).equals(ConstantesSistema.NAO)){
						if(Util.isVazioOuBranco(guiaPagamentoPrestacao)){
							guiaPagamentoPrestacao = new GuiaPagamentoPrestacao();
							GuiaPagamentoPrestacaoPK comp_id = new GuiaPagamentoPrestacaoPK();
							comp_id.setGuiaPagamentoId((Integer) objects[0]);
							comp_id.setNumeroPrestacao((Short) objects[1]);
							comp_id.setDebitoTipoId((Integer) objects[3]);
							guiaPagamentoPrestacao.setComp_id(comp_id);
							guiaPagamentoPrestacao.setDataEmissao((Date) objects[2]);
							DebitoTipo debitoTipo = new DebitoTipo();
							debitoTipo.setId((Integer) objects[3]);
							debitoTipo.setDescricao((String) objects[4]);
							guiaPagamentoPrestacao.setDebitoTipo(debitoTipo);
							guiaPagamentoPrestacao.setIndicadorCobrancaAdministrativa((Short) objects[7]);
							guiaPagamentoPrestacao.setIndicadorRemuneraCobrancaAdministrativa((Short) objects[8]);
						}
						guiaPagamentoPrestacao.setValorPrestacao((BigDecimal) objects[5]);
						valorTotal = valorTotal.add(guiaPagamentoPrestacao.getValorPrestacao());
					}else{
						if(Util.isVazioOuBranco(guiaPagamentoPrestacaoHistorico)){
							guiaPagamentoPrestacaoHistorico = new GuiaPagamentoPrestacaoHistorico();
							GuiaPagamentoPrestacaoHistoricoPK comp_id = new GuiaPagamentoPrestacaoHistoricoPK();
							comp_id.setGuiaPagamentoId((Integer) objects[0]);
							comp_id.setNumeroPrestacao((Short) objects[1]);
							comp_id.setDebitoTipoId((Integer) objects[3]);
							guiaPagamentoPrestacaoHistorico.setComp_id(comp_id);
							guiaPagamentoPrestacaoHistorico.setDataEmissao((Date) objects[2]);
							DebitoTipo debitoTipo = new DebitoTipo();
							debitoTipo.setId((Integer) objects[3]);
							debitoTipo.setDescricao((String) objects[4]);
							guiaPagamentoPrestacaoHistorico.setDebitoTipo(debitoTipo);
							guiaPagamentoPrestacaoHistorico.setDebitoCreditoSituacao(new DebitoCreditoSituacao((Integer) objects[6]));
							guiaPagamentoPrestacaoHistorico.setIndicadorCobrancaAdministrativa((Short) objects[7]);
							guiaPagamentoPrestacaoHistorico.setIndicadorRemuneraCobrancaAdministrativa((Short) objects[8]);
						}
						guiaPagamentoPrestacaoHistorico.setValorPrestacao((BigDecimal) objects[5]);
						valorTotal = valorTotal.add(guiaPagamentoPrestacaoHistorico.getValorPrestacao());
					}
				}

				if(Util.isNaoNuloBrancoZero(guiaPagamentoPrestacao)){
					guiaPagamentoPrestacao.setValorPrestacao(valorTotal);
					retorno = guiaPagamentoPrestacao;
				}else{
					guiaPagamentoPrestacaoHistorico.setValorPrestacao(valorTotal);
					retorno = guiaPagamentoPrestacaoHistorico;
				}

			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#selecionarDebitoACobrarOuHistoricoCobrancaAdministrativa
	 * (java.lang.Integer)
	 */
	public Object selecionarDebitoACobrarOuHistoricoCobrancaAdministrativa(Integer idDebitoACobrar) throws ErroRepositorioException{

		Object retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("select debitoACobrar ");
			hql.append("from DebitoACobrar debitoACobrar ");
			hql.append("inner join fetch debitoACobrar.debitoTipo ");
			hql.append("inner join fetch debitoACobrar.debitoCreditoSituacaoAtual ");
			hql.append("left join fetch debitoACobrar.parcelamento ");
			hql.append("where debitoACobrar.id = :idDebitoACobrar ");

			Query query = session.createQuery(hql.toString());
			query.setInteger("idDebitoACobrar", idDebitoACobrar);
			retorno = (Object) query.setMaxResults(1).uniqueResult();

			if(retorno == null){
				hql = new StringBuilder();
				hql.append("select debitoACobrarHistorico ");
				hql.append("from DebitoACobrarHistorico debitoACobrarHistorico ");
				hql.append("inner join fetch debitoACobrarHistorico.debitoTipo ");
				hql.append("inner join fetch debitoACobrarHistorico.debitoCreditoSituacaoAtual ");
				hql.append("left join fetch debitoACobrarHistorico.parcelamento ");
				hql.append("where debitoACobrarHistorico.id = :idDebitoACobrar ");

				query = session.createQuery(hql.toString());
				query.setInteger("idDebitoACobrar", idDebitoACobrar);
				retorno = (Object) query.setMaxResults(1).uniqueResult();
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarClienteDebitoACobrarOuHistorcico(java.lang.Integer
	 * )
	 */
	public Integer pesquisarClienteDebitoACobrarOuHistorcico(Integer idDebitoACobrar) throws ErroRepositorioException{

		Integer retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder hql = new StringBuilder();

		try{
			hql.append("SELECT cdac.CLIE_ID FROM CLIENTE_DEBITO_A_COBRAR cdac ");
			hql.append("WHERE ");
			hql.append("	cdac.CRTP_ID = :idClienteRelacaoTipo ");
			hql.append("	AND cdac.DBAC_ID = :idDebitoACobrar ");
			hql.append("UNION ");
			hql.append("SELECT cdach.CLIE_ID FROM CLIENTE_DEBITO_A_COBRAR_HIST cdach ");
			hql.append("WHERE ");
			hql.append("	cdach.CRTP_ID = :idClienteRelacaoTipo ");
			hql.append("	AND cdach.DBAC_ID = :idDebitoACobrar ");

			Query query = session.createSQLQuery(hql.toString());
			query.setInteger("idDebitoACobrar", idDebitoACobrar);
			query.setInteger("idClienteRelacaoTipo", ClienteRelacaoTipo.USUARIO);

			retorno = (Integer) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca
	 * (java.lang.Integer)
	 */
	public Collection<Object[]> pesquisarDebitoACobrarImovelCobrancaAdmPelaSituacaoCobranca(Integer idImovelCobrancaSituacao)
					throws ErroRepositorioException{

		Collection<Object[]> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" select dac.DBAC_ID as idDebitoACobrar, ");
			sql.append("    dac.DBAC_AMREFERENCIADEBITO as referencia, ");
			sql.append("    dac.DBAC_VLDEBITO as valorDebito, ");
			sql.append("    icai.ICAI_VLREMUNERACAO as valorRemuneracao, ");
			sql.append("    icai.ICAI_PCREMUNERACAO as percentualRemuneracao, ");
			sql.append("    icai.ICAI_VLREMUNERACAOREINCID as valorRemunReincidencia, ");
			sql.append("    icai.ICAI_PCREMUNERACAOREINCID as percentualRemunReincidencia, ");
			sql.append("    icai.ICAI_VLREMUNERACAOESPEC as valorRemunEspecial, ");
			sql.append("    icai.ICAI_PCREMUNERACAOESPEC as percentualRemunEspecial, ");
			sql.append("    SUM(icai.ICAI_VLREMUNERACAOPARCEL) as valorRemunParcelado, ");
			sql.append("    icai.ICAI_PCREMUNERACAOPARCEL as percentualRemunParcelado ");
			sql.append(" from IMOVEL_COBRANCA_ADMINISTR_ITEM icai  ");
			sql.append(" left join DEBITO_A_COBRAR_GERAL dacg on dacg.DBAC_ID = icai.DBAC_ID ");
			sql.append(" left join DEBITO_A_COBRAR dac on dac.DBAC_ID = dacg.DBAC_ID ");
			sql.append(" where icai.DOTP_ID = :documentoTipo  ");
			sql.append("   and dacg.DAGE_ICHISTORICO = :indicadorNao  ");
			sql.append("   and icai.ISCB_ID = :idImovelCobrancaSituacao  ");
			sql.append("   and (icai.ICAI_VLREMUNERACAO is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOREINCID is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOESPEC is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOPARCEL is not null) ");
			sql.append("   and (icai.ICAI_PCREMUNERACAO is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOREINCID is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOESPEC is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOPARCEL is not null) ");
			sql.append("GROUP BY ");
			sql.append("   dac.DBAC_ID, ");
			sql.append("   dac.DBAC_AMREFERENCIADEBITO, ");
			sql.append("   dac.DBAC_VLDEBITO, ");
			sql.append("   icai.ICAI_VLREMUNERACAO, ");
			sql.append("   icai.ICAI_PCREMUNERACAO, ");
			sql.append("   icai.ICAI_VLREMUNERACAOREINCID, ");
			sql.append("   icai.ICAI_PCREMUNERACAOREINCID , ");
			sql.append("   icai.ICAI_VLREMUNERACAOESPEC, ");
			sql.append("   icai.ICAI_PCREMUNERACAOESPEC, ");
			sql.append("   icai.ICAI_PCREMUNERACAOPARCEL ");
			sql.append(" union  ");
			sql.append(" select dach.DBAC_ID as idDebitoACobrar,  ");
			sql.append("        dach.DAHI_AMREFERENCIADEBITO as referencia, ");
			sql.append("    	dach.DAHI_VLDEBITO as valorDebito, ");
			sql.append("        icai.ICAI_VLREMUNERACAO as valorRemuneracao, ");
			sql.append("        icai.ICAI_PCREMUNERACAO as percentualRemuneracao, ");
			sql.append("        icai.ICAI_VLREMUNERACAOREINCID as valorRemunReincidencia, ");
			sql.append("        icai.ICAI_PCREMUNERACAOREINCID as percentualRemunReincidencia, ");
			sql.append("        icai.ICAI_VLREMUNERACAOESPEC as valorRemunEspecial, ");
			sql.append("        icai.ICAI_PCREMUNERACAOESPEC as percentualRemunEspecial, ");
			sql.append("        SUM(icai.ICAI_VLREMUNERACAOPARCEL) as valorRemunParcelado, ");
			sql.append("        icai.ICAI_PCREMUNERACAOPARCEL as percentualRemunParcelado ");
			sql.append(" from IMOVEL_COBRANCA_ADMINISTR_ITEM icai  ");
			sql.append(" left join DEBITO_A_COBRAR_GERAL dacg on dacg.DBAC_ID = icai.DBAC_ID ");
			sql.append(" left join DEBITO_A_COBRAR_HISTORICO dach on dach.DBAC_ID = dacg.DBAC_ID ");
			sql.append(" where icai.DOTP_ID = :documentoTipo  ");
			sql.append("   and dacg.DAGE_ICHISTORICO = :indicadorSim  ");
			sql.append("   and icai.ISCB_ID = :idImovelCobrancaSituacao  ");
			sql.append("   and (icai.ICAI_VLREMUNERACAO is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOREINCID is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOESPEC is not null or  ");
			sql.append("        icai.ICAI_VLREMUNERACAOPARCEL is not null) ");
			sql.append("   and (icai.ICAI_PCREMUNERACAO is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOREINCID is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOESPEC is not null or  ");
			sql.append("        icai.ICAI_PCREMUNERACAOPARCEL is not null) ");
			sql.append("GROUP BY ");
			sql.append("   dach.DBAC_ID, ");
			sql.append("   dach.DAHI_AMREFERENCIADEBITO, ");
			sql.append("   dach.DAHI_VLDEBITO, ");
			sql.append("   icai.ICAI_VLREMUNERACAO, ");
			sql.append("   icai.ICAI_PCREMUNERACAO, ");
			sql.append("   icai.ICAI_VLREMUNERACAOREINCID, ");
			sql.append("   icai.ICAI_PCREMUNERACAOREINCID , ");
			sql.append("   icai.ICAI_VLREMUNERACAOESPEC, ");
			sql.append("   icai.ICAI_PCREMUNERACAOESPEC, ");
			sql.append("   icai.ICAI_PCREMUNERACAOPARCEL ");
			sql.append(" order by referencia ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("idDebitoACobrar", Hibernate.INTEGER);
			sqlQuery.addScalar("referencia", Hibernate.INTEGER);
			sqlQuery.addScalar("valorDebito", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemuneracao", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemunReincidencia", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemunReincidencia", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemunEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemunEspecial", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("valorRemunParcelado", Hibernate.BIG_DECIMAL);
			sqlQuery.addScalar("percentualRemunParcelado", Hibernate.BIG_DECIMAL);

			sqlQuery.setInteger("documentoTipo", DocumentoTipo.DEBITO_A_COBRAR);
			sqlQuery.setShort("indicadorNao", ConstantesSistema.NAO);
			sqlQuery.setShort("indicadorSim", ConstantesSistema.SIM);
			sqlQuery.setInteger("idImovelCobrancaSituacao", idImovelCobrancaSituacao);

			retorno = (Collection<Object[]>) sqlQuery.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarClienteUsuarioPorContaOuContaHistorico(java.lang
	 * .Integer)
	 */
	public Object[] pesquisarClienteUsuarioPorContaOuContaHistorico(Integer idConta) throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append("SELECT cc.CLIE_ID AS idCliente, c.CLIE_NMCLIENTE AS nomeCliente FROM CLIENTE_CONTA cc ");
			sql.append("INNER JOIN CLIENTE c ON cc.CLIE_ID = c.CLIE_ID ");
			sql.append("where cc.CNTA_ID = :idConta AND cc.CRTP_ID = :idClienteRelacaoTipo ");
			sql.append("UNION ");
			sql.append("SELECT cch.CLIE_ID AS idCliente, c.CLIE_NMCLIENTE AS nomeCliente FROM CLIENTE_CONTA_HISTORICO cch ");
			sql.append("INNER JOIN CLIENTE c ON cch.CLIE_ID = c.CLIE_ID ");
			sql.append("where cch.CNTA_ID = :idConta AND cch.CRTP_ID = :idClienteRelacaoTipo ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("idCliente", Hibernate.INTEGER);
			sqlQuery.addScalar("nomeCliente", Hibernate.STRING);

			sqlQuery.setInteger("idClienteRelacaoTipo", ClienteRelacaoTipo.USUARIO);
			sqlQuery.setInteger("idConta", idConta);

			retorno = (Object[]) sqlQuery.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Cancelar Aviso de Corte Pendente
	 * 
	 * @author Hebert Falcao
	 * @date 11/09/2013
	 */
	public Integer cancelarAvisoDeCortePendente(Integer idFaturamentoGrupo, Integer anoMesReferencia) throws ErroRepositorioException{

		Integer retorno = 0;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append(" UPDATE COBRANCA_DOCUMENTO SET CAST_ID = :situacaoAcaoCanceladaPrazo, ");
			sql.append("                               CBDO_DSPARECER = 'GSAN - ' || :dataAtual || ' - ' || CAST_ID ");
			sql.append(" WHERE CBAC_ID = :cobrancaAcaoAvisoCorte ");
			sql.append("   AND CACM_ID IS NOT NULL ");
			sql.append("   AND CAST_ID IN (:situacaoAcaoPendente, :situacaoAcaoEnviados, :situacaoAcaoNaoEntregue) ");
			sql.append("   AND IMOV_ID IN (SELECT IMOV.IMOV_ID ");
			sql.append("                   FROM FATURAMENTO_GRUPO_CRON_MENSAL FTCM ");
			sql.append("                   INNER JOIN FATURAMENTO_ATIVIDADE_CRON FTAC ON FTAC.FTCM_ID = FTCM.FTCM_ID ");
			sql.append("                   INNER JOIN FATURAMENTO_ATIV_CRON_ROTA FR ON FR.FTAC_ID = FTAC.FTAC_ID ");
			sql.append("                   INNER JOIN IMOVEL IMOV ON IMOV.ROTA_ID = FR.ROTA_ID ");
			sql.append("                   WHERE FTCM.FTGR_ID = :idFaturamentoGrupo ");
			sql.append("                     AND FTCM.FTCM_AMREFERENCIA = :anoMesReferencia ");
			sql.append("                     AND FTAC.FTAT_ID = :idFaturamentoAtividade) ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.setInteger("situacaoAcaoCanceladaPrazo", CobrancaAcaoSituacao.CANCELADA_PRAZO);
			sqlQuery.setDate("dataAtual", new Date());
			sqlQuery.setInteger("cobrancaAcaoAvisoCorte", CobrancaAcao.AVISO_CORTE);
			sqlQuery.setInteger("situacaoAcaoPendente", CobrancaAcaoSituacao.PENDENTE);
			sqlQuery.setInteger("situacaoAcaoEnviados", CobrancaAcaoSituacao.ENVIADOS);
			sqlQuery.setInteger("situacaoAcaoNaoEntregue", CobrancaAcaoSituacao.NAO_ENTREGUE);
			sqlQuery.setInteger("idFaturamentoGrupo", idFaturamentoGrupo);
			sqlQuery.setInteger("anoMesReferencia", anoMesReferencia);
			sqlQuery.setInteger("idFaturamentoAtividade", FaturamentoAtividade.GERAR_ARQUIVO_LEITURA);

			retorno = sqlQuery.executeUpdate();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Relacao dos Imoveis faturados do grupo
	 * 
	 * @date 19/09/2013
	 * @author Anderson Italo
	 */
	public Collection pesquisarMatriculasImoveisFaturadosPorGrupo(Integer idFaturamentoGrupo, Integer anoMesFaturamento)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("select im.imov_id as idImovel from imovel im ");
			consulta.append("inner join conta co on co.imov_id = im.imov_id ");
			consulta.append("inner join rota ro on ro.rota_id = im.rota_id ");
			consulta.append("where co.cnta_amreferenciaconta = :anoMesFaturamento ");
			consulta.append("and ro.ftgr_id = :idFaturamentoGrupo ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.setInteger("anoMesFaturamento", anoMesFaturamento).setInteger("idFaturamentoGrupo", idFaturamentoGrupo).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * gcom.cobranca.IRepositorioCobranca#pesquisarClienteUsuarioPorContaOuContaHistorico(java.lang
	 * .Integer)
	 */
	public Object[] pesquisarCamposGerarNuInscricaoCampanhaPremiacaoModelo1(Integer idImovel, Integer idCampanha)
					throws ErroRepositorioException{

		Object[] retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuffer sql = new StringBuffer();

		try{
			sql.append("select uneg.uneg_nmabreviado as nmAbreviadoUNEG, cmup.cmup_nnultimoseqinscricao as nuSequencial, uneg.uneg_id as idUNEG from imovel imov ");
			sql.append("inner join localidade loca on loca.loca_id = imov.loca_id ");
			sql.append("inner join unidade_negocio uneg on uneg.uneg_id = loca.uneg_id ");
			sql.append("inner join campanha_unidade_premiacao cmup on cmup.uneg_id = loca.uneg_id ");
			sql.append("where imov.imov_id = :idImovel and cmup.cmpn_id = :idCampanha ");

			SQLQuery sqlQuery = session.createSQLQuery(sql.toString());

			sqlQuery.addScalar("nmAbreviadoUNEG", Hibernate.STRING);
			sqlQuery.addScalar("nuSequencial", Hibernate.STRING);
			sqlQuery.addScalar("idUNEG", Hibernate.STRING);

			sqlQuery.setInteger("idImovel", idImovel);
			sqlQuery.setInteger("idCampanha", idCampanha);

			retorno = (Object[]) sqlQuery.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3109] Efetuar Sorteio Campanha Premiacao
	 * 
	 * @author Hiroshi Goncalves
	 * @date 03/10/2013
	 */
	public Collection<CampanhaPremio> pesquisarPremiosParaSorteio(Integer idCampanha) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<CampanhaPremio> retorno = null;
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" FROM CampanhaPremio cp ");

			consulta.append("where cp.campanha = :idCampanha ");
			consulta.append(" and cp.quantidadePremio > cp.quantidadePremioSorteada ");
			consulta.append(" order by cp.gerenciaRegional, cp.unidadeNegocio, cp.eloPremio, cp.numeroOrdemPremiacao ");

			retorno = (Collection<CampanhaPremio>) session.createQuery(consulta.toString()).setInteger("idCampanha", idCampanha).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3109] Efetuar Sorteio Campanha Premiacao
	 * 
	 * @author Hiroshi Goncalves
	 * @date 03/10/2013
	 */
	public Collection<CampanhaCadastro> pesquisarInscricoesPorUnidadePremiacao(Integer idCampanha, CampanhaPremio campanhaPremio)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<CampanhaCadastro> retorno = null;
		StringBuffer consulta = new StringBuffer();
		Integer vlUnidadePremiacao = null;

		String NOT_IN = " not in(" + " select cp.campanhaCadastro.id from CampanhaPremiacao cp "
						+ " where cp.campanhaPremiacaoMotCancel is null) ";

		try{
			consulta.append(" select a FROM CampanhaCadastro a ");
			consulta.append(" join fetch a.campanha ");

			if(campanhaPremio.getGerenciaRegional() != null){

				consulta.append(" join a.imovel b ");
				consulta.append(" join b.localidade c ");
				consulta.append(" where a.campanha.id = :idCampanha");
				consulta.append(" and a.indicadorComprovanteBloqueado = 2 ");

				consulta.append(" and c.gerenciaRegional.id = :vlUnidadePremiacao");
				consulta.append(" and a.id " + NOT_IN);

				vlUnidadePremiacao = campanhaPremio.getGerenciaRegional().getId();

			}else if(campanhaPremio.getUnidadeNegocio() != null){

				consulta.append(" join a.imovel b ");
				consulta.append(" join b.localidade c ");
				consulta.append(" where a.campanha.id = :idCampanha");
				consulta.append(" and a.indicadorComprovanteBloqueado = 2 ");

				consulta.append(" and c.unidadeNegocio.id = :vlUnidadePremiacao");
				consulta.append(" and a.id " + NOT_IN);

				vlUnidadePremiacao = campanhaPremio.getUnidadeNegocio().getId();

			}else if(campanhaPremio.getEloPremio() != null){

				consulta.append(" join a.imovel b ");
				consulta.append(" join b.localidade c ");
				consulta.append(" where a.campanha.id = :idCampanha");
				consulta.append(" and a.indicadorComprovanteBloqueado = 2 ");

				consulta.append(" and c.localidade = :vlUnidadePremiacao");
				consulta.append(" and a.id " + NOT_IN);

				vlUnidadePremiacao = campanhaPremio.getEloPremio().getId();

			}else if(campanhaPremio.getLocalidade() != null){

				consulta.append(" join a.imovel b ");
				consulta.append(" where a.campanha.id = :idCampanha");
				consulta.append(" and a.indicadorComprovanteBloqueado = 2 ");

				consulta.append(" and b.localidade.id = :vlUnidadePremiacao");
				consulta.append(" and a.id " + NOT_IN);

				vlUnidadePremiacao = campanhaPremio.getLocalidade().getId();

			}else{

				consulta.append(" where a.campanha.id = :idCampanha");
				consulta.append(" and a.indicadorComprovanteBloqueado = 2 ");
				consulta.append(" and a.id " + NOT_IN);

			}

			Query query = session.createQuery(consulta.toString()).setInteger("idCampanha", idCampanha);

			if(vlUnidadePremiacao != null){
				query = query.setInteger("vlUnidadePremiacao", vlUnidadePremiacao);
			}

			retorno = (Collection<CampanhaCadastro>) query.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<IEmitirRelatorioAvisoDebitoHelper> pesquisarCobrancaDocumentoRelatorioAvisoDebito(Integer idCobrancaAcaoCronograma,
					Integer idCobrancaAcaoComando) throws ErroRepositorioException{

		Collection<IEmitirRelatorioAvisoDebitoHelper> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT new gcom.cobranca.bean.EmitirRelatorioAvisoDebitoHelper(");
			consulta.append("	cbdo.id, ");
			consulta.append("	cbdo.localidade.id, ");
			consulta.append("	cbdo.localidade.descricao, ");
			consulta.append("	imovel.id, ");
			consulta.append("	setorComercial.id, ");
			consulta.append("	setorComercial.codigo, ");
			consulta.append("	quadra.id, ");
			consulta.append("	quadra.numeroQuadra, ");
			consulta.append("	imovel.lote, ");
			consulta.append("	imovel.subLote, ");
			consulta.append("	cliente.nome AS nomeCliente,  ");
			consulta.append("	bairro.nome,  ");
			consulta.append("	cbdo.emissao,  ");
			consulta.append(" (CASE ");
			consulta.append(" 	WHEN cbdo.cobrancaAcaoAtividadeComando.id IS NOT NULL THEN");
			consulta.append("		cbdo.cobrancaAcaoAtividadeComando.quantidadeDiasRealizacao ");
			consulta.append(" 	ELSE ");
			consulta.append("		ca.qtdDiasRealizacao ");
			consulta.append(" 	END) AS qtdDiasRealizacao, ");
			consulta.append(" 	os.id, ");
			consulta.append(" 	h.numero, ");
			consulta.append(" 	cbdo.valorDocumento, ");
			consulta.append(" 	cbdo.documentoTipo.id, ");
			consulta.append(" 	cbdo.numeroSequenciaDocumento ) ");
			consulta.append("FROM CobrancaDocumento cbdo ");
			consulta.append("LEFT JOIN cbdo.imovel imovel ");
			consulta.append("LEFT JOIN cbdo.cliente cliente ");
			consulta.append("LEFT JOIN cbdo.ordensServico os ");
			consulta.append("LEFT JOIN imovel.localidade loc ");
			consulta.append("LEFT JOIN imovel.setorComercial setorComercial ");
			consulta.append("LEFT JOIN imovel.quadra quadra ");
			consulta.append("LEFT JOIN imovel.logradouroBairro logbairro ");
			consulta.append("LEFT JOIN logbairro.bairro bairro ");
			consulta.append("LEFT JOIN cbdo.cobrancaAcao ca ");
			consulta.append("LEFT JOIN imovel.ligacaoAgua ligagua ");
			consulta.append("LEFT JOIN ligagua.hidrometroInstalacaoHistorico hih ");
			consulta.append("LEFT JOIN hih.hidrometro h ");
			consulta.append("WHERE 1 = 1 ");

			if(idCobrancaAcaoCronograma != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeCronograma = :idCobrancaAcaoCronograma ");
			}
			if(idCobrancaAcaoComando != null){
				consulta.append("AND cbdo.cobrancaAcaoAtividadeComando = :idCobrancaAcaoComando ");
			}

			consulta.append(" ORDER BY cbdo.localidade, ");
			consulta.append(" cbdo.codigoSetorComercial, ");
			consulta.append(" cbdo.quadra, ");
			consulta.append(" imovel.lote, ");
			consulta.append(" imovel.subLote ");

			Query query = session.createQuery(consulta.toString());

			if(idCobrancaAcaoCronograma != null){
				query.setInteger("idCobrancaAcaoCronograma", idCobrancaAcaoCronograma);
			}

			if(idCobrancaAcaoComando != null){
				query.setInteger("idCobrancaAcaoComando", idCobrancaAcaoComando);
			}

			retorno = query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * [UC0630] Solicitar Emissa£o do Extrato de Debitos
	 * Verifica se existem ocorrencias de um imovel em situacao de cobranca
	 * 
	 * @author Anderson Italo
	 * @date 28/11/2013
	 * @throws ErroRepositorioException
	 */
	public boolean existeProcessoCobrancaImovelPorSituacaoInformada(Integer idImovel, String idsSituacaoesCobranca)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Query query = null;

		boolean retorno = false;
		Collection<Integer> retornoConsulta = null;

		StringBuffer hql = new StringBuffer();

		try{
			hql.append(" select ics.id");
			hql.append(" from ImovelCobrancaSituacao ics ");
			hql.append(" where ics.imovel.id = :idImovel ");
			hql.append(" and ics.dataRetiradaCobranca is null ");
			hql.append(" and ics.cobrancaSituacao.id = :idsSituacaoesCobranca ");

			query = session.createQuery(hql.toString()).setInteger("idImovel", idImovel)
							.setString("idsSituacaoesCobranca", idsSituacaoesCobranca);

			retornoConsulta = query.list();

			if(!retornoConsulta.isEmpty()){
				retorno = true;
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0349] Emitir Documento de cobranca
	 * Seleciona os itens do documento de cobranca correspondentes a conta e
	 * ordenar por ano/mes de referencia da conta
	 * 
	 * @author Anderson Italo
	 * @data 09/12/2013
	 * @param idCobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection<CobrancaDocumentoItem> pesquisarCobrancaDocumentoItemContaAvisoDebitoModelo2(Integer idCobrancaDocumento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ");
			consulta.append("  FROM CobrancaDocumentoItem cdit ");
			consulta.append("  INNER JOIN fetch cdit.contaGeral cntaGeral ");
			consulta.append("  INNER JOIN fetch cntaGeral.conta  cnta ");
			consulta.append(" WHERE cdit.cobrancaDocumento.id = :idCobrancaDocumento ");
			consulta.append(" AND cnta.id IS NOT NULL ");
			consulta.append(" ORDER BY cnta.referencia desc");

			retorno = session.createQuery(consulta.toString()).setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0002] - Determinar situacao da Acao de cobranca
	 * 
	 * @author Anderson Italo
	 * @data 11/12/2013
	 * @param idCobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection<CobrancaDocumentoItem> pesquisarCobrancaDocumentoItemPorSituacao(Integer idCobrancaDocumento, Integer idSituacao)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = new ArrayList();

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{
			consulta.append("SELECT cdit ");
			consulta.append(" FROM CobrancaDocumentoItem cdit ");
			consulta.append(" WHERE ");
			consulta.append(" cdit.cobrancaDebitoSituacao.id = " + idSituacao.toString());
			consulta.append(" and cdit.cobrancaDocumento.id =  " + idCobrancaDocumento.toString());

			retorno = session.createQuery(consulta.toString()).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * [SB0013] - Verificar Titularidade do Debito
	 * 
	 * @author Anderson Italo
	 * @data 14/01/2014
	 */
	public Integer pesquisarIdClienteGuiaPagamentoComNomeConta(Integer idGuiaPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cgp.clie_id as idCliente from cliente_guia_pagamento cgp ");
			consulta.append(" inner join guia_pagamento gp on gp.gpag_id = cgp.gpag_id ");
			consulta.append(" and cgp.crtp_id = (select ci.crtp_id from cliente_imovel ci ");
			consulta.append(" where ci.imov_id = gp.imov_id and ci.clim_icnomeconta = " + ConstantesSistema.SIM.toString());
			consulta.append(" and ci.clim_dtrelacaofim is null) ");
			consulta.append(" and gp.gpag_id = " + idGuiaPagamento.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * [SB0013] - Verificar Titularidade do Debito
	 * 
	 * @author Anderson Italo
	 * @data 14/01/2014
	 */
	public Integer pesquisarIdClienteDebitoACobrarComNomeConta(Integer idDebitoACobrar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cda.clie_id as idCliente from cliente_debito_a_cobrar cda ");
			consulta.append(" inner join debito_a_cobrar dac on dac.dbac_id = cda.dbac_id ");
			consulta.append(" and cda.crtp_id = (select ci.crtp_id from cliente_imovel ci ");
			consulta.append(" where ci.imov_id = dac.imov_id and ci.clim_icnomeconta = " + ConstantesSistema.SIM.toString());
			consulta.append(" and ci.clim_dtrelacaofim is null) ");
			consulta.append(" and dac.dbac_id = " + idDebitoACobrar.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * [SB0013] - Verificar Titularidade do Debito
	 * 
	 * @author Anderson Italo
	 * @data 14/01/2014
	 */
	public Integer pesquisarIdClienteImovelPorTipoRelacao(Integer idImovel, Integer idClienteRelacaoTipo) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select ci.clie_id as idCliente from cliente_imovel ci ");
			consulta.append(" where ci.imov_id = " + idImovel.toString());
			consulta.append(" and ci.clim_dtrelacaofim is null ");
			consulta.append(" and ci.crtp_id = " + idClienteRelacaoTipo.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * [SB0013] - Verificar Titularidade do Debito
	 * 
	 * @author Anderson Italo
	 * @data 14/01/2014
	 */
	public Integer pesquisarIdClienteGuiaPagamentoTitularRelacao(Integer idGuiaPagamento, Integer idClienteRelacaoTipo)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cgp.clie_id as idCliente from cliente_guia_pagamento cgp ");
			consulta.append(" inner join guia_pagamento gp on gp.gpag_id = cgp.gpag_id ");
			consulta.append(" where cgp.crtp_id = " + idClienteRelacaoTipo.toString());
			consulta.append(" and gp.gpag_id = " + idGuiaPagamento.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC0251] Gerar Atividade de Acao de cobranca
	 * [SB0013] - Verificar Titularidade do Debito
	 * 
	 * @author Anderson Italo
	 * @data 14/01/2014
	 */
	public Integer pesquisarIdClienteDebitoACobrarTitularRelacao(Integer idDebitoACobrar, Integer idClienteRelacaoTipo)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cda.clie_id as idCliente from cliente_debito_a_cobrar cda ");
			consulta.append(" inner join debito_a_cobrar dac on dac.dbac_id = cda.dbac_id ");
			consulta.append(" and cda.crtp_id = " + idClienteRelacaoTipo.toString());
			consulta.append(" and dac.dbac_id = " + idDebitoACobrar.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC3044] Informar Entrega/Devolucao de Documentos de cobranca
	 * [FS0002] - Verificar existencia do documento de cobranca para entrega/Devolucao
	 * 
	 * @author Eduardo Oliveira
	 * @data 04/02/2014
	 */
	public Integer pesquisarIdDocumentoCobrancaEntregaDevolucao(Integer idImovel, Integer idDocumentoTipo) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();
		try{

			consulta.append(" select cbdo.cbdo_id as idCobrancaDocumento ");
			consulta.append(" from cobranca_documento cbdo ");
			consulta.append(" inner join cobranca_acao_atividade_comand caac ");
			consulta.append(" on caac.cacm_id = cbdo.cacm_id ");
			consulta.append(" where (cbdo.imov_id = " + idImovel.toString());
			consulta.append(" and cbdo.cbac_id = " + idDocumentoTipo.toString());
			consulta.append(" and cbdo.cbdo_tmemissao + caac.cacm_qtdiasrealizacao > CURRENT_TIMESTAMP ");
			consulta.append(" and cbdo.cast_id in (" + CobrancaAcaoSituacao.PENDENTE.toString() + ", ");
			consulta.append("" + CobrancaAcaoSituacao.NAO_ENTREGUE.toString() + ", ");
			consulta.append("" + CobrancaAcaoSituacao.ENTREGUE.toString() + "))");
			// OR
			consulta.append(" or (cbdo.imov_id = " + idImovel.toString());
			consulta.append(" and cbdo.cbac_id = " + idDocumentoTipo.toString());
			consulta.append(" and cbdo.cast_id = " + CobrancaAcaoSituacao.PENDENTE.toString() + ")");

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumento").setMaxResults(1).uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * @param anoMesReferenciaConta
	 * @param dataVencimentoConta
	 * @param idResolucaoDiretoria
	 * @param dataPagamento
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> obterResolucaoDiretoriaParametrosPagamentoAVista(Integer anoMesReferencia, Date dataVencimento,
					Integer idResolucaoDiretoria, Date dataPagamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" SELECT  ");
			consulta.append(" RDPV_ID as idRDPV, ");// 0
			consulta.append(" RDIR_ID as idRdir, ");// 1
			consulta.append(" RDPV_DTPAGAMENTOINICIO as dtPagamentoInicio, ");// 2
			consulta.append(" RDPV_DTPAGAMENTOFINAL as dtPagamentoFinal, ");// 3
			consulta.append(" RDPV_PCDESCONTOMULTA as pcDescontoMulta, ");// 4
			consulta.append(" RDPV_PCDESCONTOJUROSMORA as pcDescontoJurosMora, "); // 5
			consulta.append(" RDPV_PCDESCONTOCORRMONETARIA as pcDescontoCorrMonetaria, ");// 6
			consulta.append(" RDPV_DSMENSAGEMEXTRATO as dsMensgamemExtrato,");// 7
			consulta.append(" RDPV_TMULTIMAALTERACAO as tmUltimaAlteracao,");// 8
			consulta.append(" RDPV_AMREFERENCIAINICIAL as amReferenciaIncial, ");// 9
			consulta.append(" RDPV_AMREFERENCIAFINAL as amReferenciaFinal, ");// 10
			consulta.append(" RDPV_DTVENCIMENTOINICIAL as dtVencimentoInicial,");// 11
			consulta.append(" RDPV_DTVENCIMENTOFINAL as dtVencimentoFinal");// 12

			consulta.append("  From  Rd_Parametros_Pagmto_A_Vista  ");
			consulta.append(" Where  (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And  Rdpv_Dtvencimentofinal > :dataVencimentoConta )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And  Rdpv_Dtvencimentofinal Is Null)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal > :dataVencimentoConta)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal Is Null)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal  Is Null And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And  Rdpv_Dtvencimentofinal > :dataVencimentoConta)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal  Is Null And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And  Rdpv_Dtvencimentofinal Is Null )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal  Is Null And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal > :dataVencimentoConta)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial < :anoMesReferenciaConta And  Rdpv_Amreferenciafinal  Is Null And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal Is Null)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And   Rdpv_Dtvencimentofinal > :dataVencimentoConta )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial < :dataVencimentoConta And   Rdpv_Dtvencimentofinal Is Null )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal > :dataVencimentoConta )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal > :anoMesReferenciaConta And Rdpv_Dtvencimentoinicial Is Null And  Rdpv_Dtvencimentofinal Is Null )  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal Is Null And Rdpv_Dtvencimentoinicial  < :dataVencimentoConta And  Rdpv_Dtvencimentofinal > :dataVencimentoConta)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal Is Null And Rdpv_Dtvencimentoinicial  < :dataVencimentoConta  And  Rdpv_Dtvencimentofinal Is Null)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal Is Null And Rdpv_Dtvencimentoinicial  Is Null And  Rdpv_Dtvencimentofinal > :dataVencimentoConta)  ");
			consulta.append(" Or (Rdpv_Amreferenciainicial Is Null And  Rdpv_Amreferenciafinal Is Null And Rdpv_Dtvencimentoinicial  Is Null And  Rdpv_Dtvencimentofinal Is Null)  ");
			consulta.append(" and rdir_id = :idResolucaoDiretoria and  :dataPagamento between RDPV_DTPAGAMENTOINICIO and RDPV_DTPAGAMENTOFINAL ");
			consulta.append(" ORDER BY Rdpv_Amreferenciainicial, Rdpv_Amreferenciafinal, Rdpv_Dtvencimentoinicial, Rdpv_Dtvencimentofinal");

			SQLQuery sqlQuery = session.createSQLQuery(consulta.toString());

			sqlQuery.addScalar("idRDPV", Hibernate.STRING);
			sqlQuery.addScalar("idRdir", Hibernate.STRING);

			sqlQuery.addScalar("dtPagamentoInicio", Hibernate.DATE);
			sqlQuery.addScalar("dtPagamentoFinal", Hibernate.DATE);
			sqlQuery.addScalar("pcDescontoMulta", Hibernate.STRING);
			sqlQuery.addScalar("pcDescontoJurosMora", Hibernate.STRING);
			sqlQuery.addScalar("pcDescontoCorrMonetaria", Hibernate.STRING);
			sqlQuery.addScalar("dsMensgamemExtrato", Hibernate.STRING);
			sqlQuery.addScalar("tmUltimaAlteracao", Hibernate.DATE);
			sqlQuery.addScalar("amReferenciaIncial", Hibernate.STRING);
			sqlQuery.addScalar("amReferenciaFinal", Hibernate.STRING);
			sqlQuery.addScalar("dtVencimentoInicial", Hibernate.DATE);
			sqlQuery.addScalar("dtVencimentoFinal", Hibernate.DATE);

			sqlQuery.setInteger("anoMesReferenciaConta", anoMesReferencia);
			sqlQuery.setDate("dataVencimentoConta", dataVencimento);
			sqlQuery.setInteger("idResolucaoDiretoria", idResolucaoDiretoria);
			sqlQuery.setDate("dataPagamento", dataPagamento);

			retorno = sqlQuery.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3138] Filtrar Debito para prescricao
	 * Selecionar Imoveis com dados do filtro
	 * 
	 * @author Anderson Italo
	 * @date 24/02/2014
	 */
	public Collection pesquisarImoveisComandoPrescricaoDebitos(ComandoDebitosPrescritosHelper helper) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		String condicoes = "";
		Collection<String> colecaoBlocosMatriculas = new ArrayList<String>();

		try{

			consulta.append(" select im.imov_id as idImovel, im.loca_id idLocalidade, sc.stcm_cdsetorcomercial codigoSetor,");
			consulta.append(" qu.qdra_nnquadra as numeroQuadra, im.imov_nnlote as lote, imov_nnsublote as sublote, ");
			consulta.append(" im.last_id as idLigacaoAguaSituacao, im.lest_id as idLigacaoEsgotoSituacao, ");
			consulta.append(" lo.loca_nmlocalidade as nomeLocalidade ");
			consulta.append(" from imovel im");
			consulta.append(" inner join localidade lo on lo.loca_id = im.loca_id");
			consulta.append(" inner join quadra qu on qu.qdra_id = im.qdra_id");
			consulta.append(" inner join setor_comercial sc on sc.stcm_id = im.stcm_id");

			// Arquivo de Imoveis
			if(helper.getArquivoImoveis() != null && !Util.isVazioOrNulo(helper.getColecaoIdsImoveis())){

				if(helper.getColecaoIdsImoveis().size() > 1000){

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						// A cada bloco de 1000 matricula adiciona na Colecao
						if(colecaoMatriculasAuxiliar.size() == 1000){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}

					if(!Util.isVazioOrNulo(colecaoMatriculasAuxiliar)){

						colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
					}

				}else{

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";
					int tamanhoColecaoMatriculas = helper.getColecaoIdsImoveis().size();

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						if(colecaoMatriculasAuxiliar.size() == tamanhoColecaoMatriculas){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}
				}

				// Varre a Colecao de blocos 1000 matricula ou menos cada e gera a condicao
				String condicaoMatriculas = "";
				for(String blocoMatriculas : colecaoBlocosMatriculas){

					condicaoMatriculas += blocoMatriculas + " or";
				}

				condicoes += "and (" + condicaoMatriculas.substring(0, condicaoMatriculas.length() - 2) + ") ";

			}else if(helper.getIdCliente() != null){

				// Cliente
				String condicoesCliente = "";
				condicoesCliente += " and exists ( select 1 from  cliente_imovel ci inner join cliente cl on cl.clie_id = ci.clie_id where ci.imov_id = im.imov_id and";
				condicoesCliente += " cl.clie_id = " + helper.getIdCliente().toString();

				if(helper.getIdClienteRelacaoTipo() != null){

					condicoesCliente += " and ci.crtp_id = " + helper.getIdClienteRelacaoTipo().toString();
				}

				if(helper.getPeriodoRelacionamentoInicial() != null && helper.getPeriodoRelacionamentoFinal() != null){

					condicoesCliente += " and ci.clim_dtrelacaoinicio >= to_date('"
									+ Util.formatarData(helper.getPeriodoRelacionamentoInicial()) + "', 'dd/mm/yyyy') and";
					condicoesCliente += " ci.clim_dtrelacaofim <= to_date('" + Util.formatarData(helper.getPeriodoRelacionamentoFinal())
									+ "', 'dd/mm/yyyy') ";
				}

				condicoes += condicoesCliente.substring(0, condicoesCliente.length() - 3) + ")";

			}else{

				// Gerencia Regional
				if(helper.getIdGerenciaRegional() != null){

					condicoes += " and lo.greg_id =  " + helper.getIdGerenciaRegional().toString();
				}

				// Unidade de negocio
				if(helper.getIdUnidadeNegocio() != null){

					condicoes += " and lo.uneg_id =  " + helper.getIdUnidadeNegocio().toString();
				}

				// Elo
				if(helper.getIdElo() != null){

					condicoes += " and lo.loca_cdelo =  " + helper.getIdElo().toString();
				}

				// Quadra
				if(helper.getNumeroQuadraInicial() != null && helper.getNumeroQuadraFinal() != null){

					condicoes += " and (qu.qdra_nnquadra >= " + helper.getNumeroQuadraInicial().toString();
					condicoes += " and qu.qdra_nnquadra <= " + helper.getNumeroQuadraFinal().toString() + ") and";
					condicoes += " (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
					condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
					condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
					condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ")";

				}else if(helper.getCodigoSetorComercialInicial() != null && helper.getCodigoSetorComercialFinal() != null){

					// Setor Comercial
					condicoes += " and (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
					condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
					condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
					condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") ";

				}else if(helper.getIdLocalidadeInicial() != null && helper.getIdLocalidadeFinal() != null){

					// Localidade
					condicoes += " and (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
					condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") ";

				}
			}

			// Categoria
			if(!Util.isVazioOrNulo(helper.getColecaoIdsCategorias())){

				String condicoesCategoria = "";
				condicoesCategoria += " and exists ( select 1 from  imovel_subcategoria isc where isc.imov_id = im.imov_id and";

				String idsCategorias = "";
				for(Integer idCategoria : helper.getColecaoIdsCategorias()){

					idsCategorias += idCategoria.toString() + ",";
				}

				condicoesCategoria += " isc.catg_id in (" + idsCategorias.substring(0, idsCategorias.length() - 1) + ")";

				// Subcategoria
				if(!Util.isVazioOrNulo(helper.getColecaoIdsSubcategorias())){

					String idsSubcategorias = "";
					for(Integer idSubcategoria : helper.getColecaoIdsSubcategorias()){

						idsSubcategorias += idSubcategoria.toString() + ",";
					}

					condicoesCategoria += " and isc.scat_id in (" + idsSubcategorias.substring(0, idsSubcategorias.length() - 1) + ") ";
				}

				condicoes += condicoesCategoria + ")";
			}

			// situacao da Ligacao de agua
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoAguaSituacao())){

				String idsLigacaoAguaSituaco = "";
				for(Integer idLigacaoAguaSituacao : helper.getColecaoIdsLigacaoAguaSituacao()){

					idsLigacaoAguaSituaco += idLigacaoAguaSituacao.toString() + ",";
				}

				condicoes += " and im.last_id in (" + idsLigacaoAguaSituaco.substring(0, idsLigacaoAguaSituaco.length() - 1) + ") ";
			}

			// situacao da Ligacao de Esgoto
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoEsgotoSituacao())){

				String idsLigacaoEsgotoSituaco = "";
				for(Integer idLigacaoEsgotoSituacao : helper.getColecaoIdsLigacaoEsgotoSituacao()){

					idsLigacaoEsgotoSituaco += idLigacaoEsgotoSituacao.toString() + ",";
				}

				condicoes += " and im.lest_id in (" + idsLigacaoEsgotoSituaco.substring(0, idsLigacaoEsgotoSituaco.length() - 1) + ") ";
			}

			// // Periodo de referencia do Debito
			// if((helper.getPeriodoReferenciaDebitoInicial() != null &&
			// helper.getPeriodoReferenciaDebitoFinal() != null)
			// || (helper.getPeriodoVencimentoDebitoInicial() != null &&
			// helper.getPeriodoVencimentoDebitoFinal() != null)){

			// Apenas Imoveis com Debitos nao Precritos
			condicoes += " and ( exists (select 1 from conta co where co.imov_id = im.imov_id and co.dcst_idatual <> "
							+ DebitoCreditoSituacao.PRESCRITA.toString();

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){
				condicoes += " and (co.cnta_amreferenciaconta >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnta_amreferenciaconta <= " + helper.getPeriodoReferenciaDebitoFinal().toString() + ") ";
			}
			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes += " and (co.cnta_dtvencimentoconta >=" + " to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial()) + "', 'dd/mm/yyyy')"
								+ " and co.cnta_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy'))";
			}

			condicoes += ") or exists (select 1 from guia_pagamento gp "
								+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
							+ " where gp.imov_id = im.imov_id and gpp.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString();

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){
				condicoes += " and (gpp.gppr_amreferenciafaturamento >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and gpp.gppr_amreferenciafaturamento <= " + helper.getPeriodoReferenciaDebitoFinal().toString() + ") ";
			}
			;
			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){
				condicoes += " and (gpp.gppr_dtvencimento >= to_date('" + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')" + " and gpp.gppr_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy'))";

			}
			condicoes += ")) ";
			// }

			// // Periodo de Vencimento do Debito
			// if(helper.getPeriodoVencimentoDebitoInicial() != null &&
			// helper.getPeriodoVencimentoDebitoFinal() != null){
			//
			// condicoes += " ( exists (select 1 from conta co where co.imov_id = im.imov_id "
			// +
			// "and (co.cnta_dtvencimentoconta >="
			// + " to_date('" + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial()) +
			// "', 'dd/mm/yyyy')"
			// + " and co.cnta_dtvencimentoconta <= to_date('"
			// + Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) +
			// "', 'dd/mm/yyyy'))) or"
			// + " exists (select 1 from guia_pagamento gp "
			// + " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
			// + " where gp.imov_id = im.imov_id and (gpp.gppr_dtvencimento >= to_date('"
			// + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial()) + "', 'dd/mm/yyyy')"
			// + " and gpp.gppr_dtvencimento <= to_date('" +
			// Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
			// + "', 'dd/mm/yyyy')))) and";
			// }
			//
			// Situacoes de cobranca que Impedem a prescricao
			if(!Util.isVazioOrNulo(helper.getColecaoIdsCobrancaSituacao())){

				condicoes += " and not exists (select 1 from imovel_cobranca_situacao ics where ics.imov_id = im.imov_id and ics.iscb_dtretiradacobranca is null ";

				String idsCobrancaSituaco = "";
				for(Integer idCobrancaSituacao : helper.getColecaoIdsCobrancaSituacao()){

					idsCobrancaSituaco += idCobrancaSituacao.toString() + ",";
				}

				condicoes += " and ics.cbst_id in (" + idsCobrancaSituaco.substring(0, idsCobrancaSituaco.length() - 1) + "))";
			}

			// // Apenas Imoveis com Debitos nao Precritos
			// condicoes +=
			// " ( exists (select 1 from conta co where co.imov_id = im.imov_id and co.dcst_idatual not in ("
			// + DebitoCreditoSituacao.PRESCRITA.toString() +
			// ")) or exists (select 1 from guia_pagamento gp "
			// + " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
			// + " where gp.imov_id = im.imov_id  and gpp.dcst_id not in (" +
			// DebitoCreditoSituacao.PRESCRITA.toString()
			// + ")))";

			consulta.append(" where 1 = 1 " + condicoes);

			consulta.append(" order by im.loca_id, sc.stcm_cdsetorcomercial, qu.qdra_nnquadra, im.imov_nnlote, im.imov_nnsublote");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("idLocalidade", Hibernate.INTEGER).addScalar("codigoSetor", Hibernate.INTEGER)
							.addScalar("numeroQuadra", Hibernate.INTEGER).addScalar("lote", Hibernate.SHORT)
							.addScalar("sublote", Hibernate.SHORT).addScalar("idLigacaoAguaSituacao", Hibernate.INTEGER)
							.addScalar("idLigacaoEsgotoSituacao", Hibernate.INTEGER).addScalar("nomeLocalidade", Hibernate.STRING).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3138] Filtrar Debito para prescricao
	 * 
	 * @author Anderson Italo
	 * @date 24/02/2014
	 */
	public Collection pesquisarDadosContasComandoPrescricaoDebitos(Integer idImovel, Date dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico,
					Date dataCorrenteMenosNumeroAnosPrescDebParticular, ComandoDebitosPrescritosHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select co.cnta_id as idConta, co.cnta_amreferenciaconta as anoMesReferenciaConta, ");
			consulta.append(" ((coalesce(co.cnta_vlagua,0) + coalesce(co.cnta_vlesgoto,0) + coalesce(co.cnta_vldebitos,0)) - (coalesce(co.cnta_vlcreditos,0) + coalesce(co.cnta_vlimpostos,0))) as valorConta");
			consulta.append(" from conta co");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (co.cnta_amreferenciaconta >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnta_amreferenciaconta <= " + helper.getPeriodoReferenciaDebitoFinal().toString() + ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( co.cnta_dtvencimentoconta >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and co.cnta_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" co.imov_id = " + idImovel.toString() + " and");

			// Debito nao vinculado a  cobranca administrativa
			condicoes.append(" co.cnta_iccobrancaadministrativa = " + ConstantesSistema.NAO.toString() + " and");
			condicoes.append(" co.cnta_icremuneracobrancaadm = " + ConstantesSistema.NAO.toString() + " and");

			// Apenas contas nao prescritas
			condicoes.append(" co.dcst_idatual not in (" + DebitoCreditoSituacao.PRESCRITA.toString() + ") and");

			// Debito sem pagamento
			condicoes.append(" not exists (select 1 from pagamento pg where pg.cnta_id = co.cnta_id ) and");

			// Conta nao esteja em revisa£o
			condicoes.append(" co.cmrv_id is null and");

			// Debito com responsa¡vel do tipo orgao publico vencido ha numero de anos para
			// prescricao de Debito de orgao publico

			// CONTA com responsa¡vel do tipo orgao publico
			condicoes.append(" (((exists (select 1 from cliente_conta cc");
			condicoes.append(" inner join cliente cl on cl.clie_id = cc.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cc.cnta_id = co.cnta_id and cc.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + " and");
			condicoes.append(" ct.epod_id <> " + EsferaPoder.PARTICULAR.toString() + ")");

			condicoes.append(" or (not exists (select 1 from cliente_conta cc2");
			condicoes.append(" where cc2.cnta_id = co.cnta_id and cc2.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + ")");
			condicoes.append(" and  exists (select 1 from cliente_conta cc3");
			condicoes.append(" inner join cliente cl on cl.clie_id = cc3.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cc3.clct_icnomeconta = " + ConstantesSistema.SIM.toString() + " and");
			condicoes.append(" cc3.cnta_id = co.cnta_id and ct.epod_id <> " + EsferaPoder.PARTICULAR.toString() + "))) and");

			// CONTA vencida ha numero de anos para prescricao de Debito de orgao publico
			condicoes.append(" co.cnta_dtvencimentoconta <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico) + "', 'dd/mm/yyyy')) or ");

			// Debito com responsa¡vel do tipo particular vencido ha numero de anos para
			// prescricao
			// de Debito de particular,

			// CONTA com responsa¡vel do tipo particular
			condicoes.append(" ((exists (select 1 from cliente_conta cc");
			condicoes.append(" inner join cliente cl on cl.clie_id = cc.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cc.cnta_id = co.cnta_id and cc.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + " and");
			condicoes.append(" ct.epod_id = " + EsferaPoder.PARTICULAR.toString() + ")");

			condicoes.append(" or (not exists (select 1 from cliente_conta cc2");
			condicoes.append(" where cc2.cnta_id = co.cnta_id and cc2.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + ")");
			condicoes.append(" and  exists (select 1 from cliente_conta cc3");
			condicoes.append(" inner join cliente cl on cl.clie_id = cc3.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cc3.cnta_id = co.cnta_id and cc3.clct_icnomeconta = " + ConstantesSistema.SIM.toString() + " and");
			condicoes.append(" ct.epod_id = " + EsferaPoder.PARTICULAR.toString() + "))) and");

			// CONTA vencida ha numero de anos para prescricao de Debito de particular
			condicoes.append(" co.cnta_dtvencimentoconta <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebParticular) + "', 'dd/mm/yyyy')))");

			consulta.append(" where " + condicoes.toString());

			consulta.append(" order by co.cnta_amreferenciaconta");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idConta", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaConta", Hibernate.INTEGER).addScalar("valorConta", Hibernate.BIG_DECIMAL).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3138] Filtrar Debito para prescricao
	 * 
	 * @author Anderson Italo
	 * @date 24/02/2014
	 */
	public Collection pesquisarDadosGuiasPagamentoComandoPrescricaoDebitos(Integer idImovel,
					Date dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico, Date dataCorrenteMenosNumeroAnosPrescDebParticular,
					ComandoDebitosPrescritosHelper helper) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select gp.gpag_id as idGuia, ");
			consulta.append(" gpp.gppr_amreferenciafaturamento as anoMesReferenciaGuia,");
			consulta.append(" gpp.gppr_nnprestacao as numeroPrestacao,");
			consulta.append(" sum(coalesce(gpp.gppr_vlprestacao, 0)) as valorGuia,");
			consulta.append(" gpp.gppr_dtvencimento as dataVencimentoPrestacao");
			consulta.append(" from guia_pagamento gp");
			consulta.append(" inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (gpp.gppr_amreferenciafaturamento >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and gpp.gppr_amreferenciafaturamento <= " + helper.getPeriodoReferenciaDebitoFinal().toString()
								+ ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( gpp.gppr_dtvencimento >= to_date('" + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and gpp.gppr_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" gp.imov_id = " + idImovel.toString() + " and");

			// Debito nao vinculado a  cobranca administrativa
			condicoes.append(" gpp.gppr_iccobrancaadministrativa = " + ConstantesSistema.NAO.toString() + " and");
			condicoes.append(" gpp.gppr_icremuneracobrancaadm = " + ConstantesSistema.NAO.toString() + " and");

			// Apenas guias nao prescritas
			condicoes.append(" gpp.dcst_id not in (" + DebitoCreditoSituacao.PRESCRITA.toString() + ") and");

			// Debito sem pagamento
			condicoes.append(" not exists (select 1 from pagamento pg where pg.gpag_id = gp.gpag_id and pg.pgmt_nnprestacao = gpp.gppr_nnprestacao) and");

			// Debito com responsa¡vel do tipo orgao publico vencido ha numero de anos para
			// prescricao de Debito de orgao publico

			// GUIA com responsa¡vel do tipo orgao publico
			condicoes.append(" (((exists (select 1 from cliente_guia_pagamento cgp");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cgp.gpag_id = gp.gpag_id and cgp.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + " and");
			condicoes.append(" ct.epod_id <> " + EsferaPoder.PARTICULAR.toString() + ") or");
			condicoes.append(" (not exists (select 1 from cliente_guia_pagamento cgp");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cgp.gpag_id = gp.gpag_id and cgp.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + ") and");

			condicoes.append(" exists (select 1 from cliente_guia_pagamento cgp ");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where ct.epod_id <> " + EsferaPoder.PARTICULAR.toString() + ")))) or");

			// Debito com responsa¡vel do tipo particular vencido ha numero de anos para
			// prescricao
			// de Debito de particular

			// GUIA com responsa¡vel do tipo particular
			condicoes.append(" ((exists (select 1 from cliente_guia_pagamento cgp");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cgp.gpag_id = gp.gpag_id and cgp.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + " and");
			condicoes.append(" ct.epod_id = " + EsferaPoder.PARTICULAR.toString() + ") or");
			condicoes.append(" (not exists (select 1 from cliente_guia_pagamento cgp");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where cgp.gpag_id = gp.gpag_id and cgp.crtp_id = " + ClienteRelacaoTipo.RESPONSAVEL.toString() + ") and");

			condicoes.append(" exists (select 1 from cliente_guia_pagamento cgp ");
			condicoes.append(" inner join cliente cl on cgp.clie_id = cl.clie_id");
			condicoes.append(" inner join cliente_tipo ct on ct.cltp_id = cl.cltp_id");
			condicoes.append(" where ct.epod_id = " + EsferaPoder.PARTICULAR.toString() + "))))) and");

			// GUIA vencida ha numero de anos para prescricao de Debito de orgao publico
			// caso a guia nao seja uma guia de parcelamento
			condicoes.append(" ((( gp.parc_id is null and gpp.gppr_dtvencimento <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico) + "', 'dd/mm/yyyy')) or ");

			// caso a guia seja uma guia de parcelamento
			condicoes.append(" ( gp.parc_id is not null and (select p.parc_tmparcelamento from parcelamento p where p.parc_id = gp.parc_id) <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebOrgaoPublico) + "', 'dd/mm/yyyy')))  or");

			// GUIA vencida ha numero de anos para prescricao de Debito de particular
			// caso a guia nao seja uma guia de parcelamento
			condicoes.append(" (( gp.parc_id is null and gpp.gppr_dtvencimento <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebParticular) + "', 'dd/mm/yyyy')) or ");

			// caso a guia seja uma guia de parcelamento
			condicoes.append(" ( gp.parc_id is not null and (select p.parc_tmparcelamento from parcelamento p where p.parc_id = gp.parc_id) <= to_date('");
			condicoes.append(Util.formatarData(dataCorrenteMenosNumeroAnosPrescDebParticular) + "', 'dd/mm/yyyy'))))");

			consulta.append(" where " + condicoes.toString());
			consulta.append(" group by gp.gpag_id, gpp.gppr_amreferenciafaturamento, gpp.gppr_dtvencimento, gpp.gppr_nnprestacao");

			consulta.append(" order by gp.gpag_id, gpp.gppr_nnprestacao, gpp.gppr_dtvencimento ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idGuia", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaGuia", Hibernate.INTEGER).addScalar("numeroPrestacao", Hibernate.SHORT)
							.addScalar("valorGuia", Hibernate.BIG_DECIMAL).addScalar("dataVencimentoPrestacao", Hibernate.DATE).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection pesquisarImoveisComDebitosPrescritos(FiltroImoveisComDebitosPrescritosHelper helper, int pageOffset)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		String condicoes = "";
		Collection<String> colecaoBlocosMatriculas = new ArrayList<String>();
		Query query = null;

		try{

			consulta.append(" select im.imov_id as idImovel, im.loca_id idLocalidade, sc.stcm_cdsetorcomercial codigoSetor,");
			consulta.append(" qu.qdra_nnquadra as numeroQuadra, im.imov_nnlote as lote, imov_nnsublote as sublote, ");
			consulta.append(" im.last_id as idLigacaoAguaSituacao, im.lest_id as idLigacaoEsgotoSituacao, ");
			consulta.append(" imp.iper_dsimovelperfil as descricaoPerfilImovel, ");
			consulta.append(" las.last_dsligacaoaguasituacao as descricaoLigacaoAguaSituacao, les.lest_dsligacaoesgotosituacao as descricaoLigacaoEsgotoSituacao ");
			consulta.append(" ");
			consulta.append(" from imovel im");
			consulta.append(" inner join imovel_perfil imp on imp.iper_id = im.iper_id ");
			consulta.append(" inner join localidade lo on lo.loca_id = im.loca_id");
			consulta.append(" inner join quadra qu on qu.qdra_id = im.qdra_id");
			consulta.append(" inner join setor_comercial sc on sc.stcm_id = im.stcm_id");
			consulta.append(" inner join ligacao_agua_situacao las on las.last_id = im.last_id");
			consulta.append(" inner join ligacao_esgoto_situacao les on les.lest_id = im.lest_id");

			// Imovel
			if(helper.getIdImovel() != null){

				condicoes += " im.imov_id = " + helper.getIdImovel().toString() + " and";
			}

			// Arquivo de Imoveis
			if(helper.getArquivoImoveis() != null && !Util.isVazioOrNulo(helper.getColecaoIdsImoveis())){

				if(helper.getColecaoIdsImoveis().size() > 1000){

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						// A cada bloco de 1000 matricula adiciona na Colecao
						if(colecaoMatriculasAuxiliar.size() == 1000){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}

					if(!Util.isVazioOrNulo(colecaoMatriculasAuxiliar)){

						colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
					}

				}else{

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";
					int tamanhoColecaoMatriculas = helper.getColecaoIdsImoveis().size();

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						if(colecaoMatriculasAuxiliar.size() == tamanhoColecaoMatriculas){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}
				}

				// Varre a Colecao de blocos 1000 matricula ou menos cada e gera a condicao
				String condicaoMatriculas = "";
				for(String blocoMatriculas : colecaoBlocosMatriculas){

					condicaoMatriculas += blocoMatriculas + " or";
				}

				condicoes += "(" + condicaoMatriculas.substring(0, condicaoMatriculas.length() - 2) + ") and";

			}

			if(helper.getIdCliente() != null){

				// Cliente
				String condicoesCliente = "";
				condicoesCliente += " exists ( select 1 from  cliente_imovel ci inner join cliente cl on cl.clie_id = ci.clie_id where ci.imov_id = im.imov_id and";
				condicoesCliente += " cl.clie_id = " + helper.getIdCliente().toString() + " and";

				if(helper.getIdClienteRelacaoTipo() != null){

					condicoesCliente += " ci.crtp_id = " + helper.getIdClienteRelacaoTipo().toString() + " and";
				}

				if(helper.getPeriodoRelacionamentoInicial() != null && helper.getPeriodoRelacionamentoFinal() != null){

					condicoesCliente += " ci.clim_dtrelacaoinicio >= to_date('"
									+ Util.formatarData(helper.getPeriodoRelacionamentoInicial()) + "', 'dd/mm/yyyy') and";
					condicoesCliente += " ci.clim_dtrelacaofim <= to_date('" + Util.formatarData(helper.getPeriodoRelacionamentoFinal())
									+ "', 'dd/mm/yyyy') and";
				}

				condicoes += condicoesCliente.substring(0, condicoesCliente.length() - 3) + ") and";
			}

			// Gerencia Regional
			if(helper.getIdGerenciaRegional() != null){

				condicoes += " lo.greg_id =  " + helper.getIdGerenciaRegional().toString() + " and";
			}

			// Unidade de negocio
			if(helper.getIdUnidadeNegocio() != null){

				condicoes += " lo.uneg_id =  " + helper.getIdUnidadeNegocio().toString() + " and";
			}

			// Elo
			if(helper.getIdElo() != null){

				condicoes += " lo.loca_cdelo =  " + helper.getIdElo().toString() + " and";
			}

			// Quadra
			if(helper.getNumeroQuadraInicial() != null && helper.getNumeroQuadraFinal() != null){

				condicoes += " (qu.qdra_nnquadra >= " + helper.getNumeroQuadraInicial().toString();
				condicoes += " and qu.qdra_nnquadra <= " + helper.getNumeroQuadraFinal().toString() + ") and";
				condicoes += " (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
				condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}else if(helper.getCodigoSetorComercialInicial() != null && helper.getCodigoSetorComercialFinal() != null){

				// Setor Comercial
				condicoes += " (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
				condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}else if(helper.getIdLocalidadeInicial() != null && helper.getIdLocalidadeFinal() != null){

				// Localidade
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}

			// Categoria
			if(!Util.isVazioOrNulo(helper.getColecaoIdsCategorias())){

				String condicoesCategoria = "";
				condicoesCategoria += " exists ( select 1 from  imovel_subcategoria isc where isc.imov_id = im.imov_id and";

				String idsCategorias = "";
				for(Integer idCategoria : helper.getColecaoIdsCategorias()){

					idsCategorias += idCategoria.toString() + ",";
				}

				condicoesCategoria += " isc.catg_id in (" + idsCategorias.substring(0, idsCategorias.length() - 1) + ") and";

				// Subcategoria
				if(!Util.isVazioOrNulo(helper.getColecaoIdsSubcategorias())){

					String idsSubcategorias = "";
					for(Integer idSubcategoria : helper.getColecaoIdsSubcategorias()){

						idsSubcategorias += idSubcategoria.toString() + ",";
					}

					condicoesCategoria += " isc.scat_id in (" + idsSubcategorias.substring(0, idsSubcategorias.length() - 1) + ") and";
				}

				condicoes += condicoesCategoria.substring(0, condicoesCategoria.length() - 3) + ") and";
			}

			// situacao da Ligacao de agua
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoAguaSituacao())){

				String idsLigacaoAguaSituaco = "";
				for(Integer idLigacaoAguaSituacao : helper.getColecaoIdsLigacaoAguaSituacao()){

					idsLigacaoAguaSituaco += idLigacaoAguaSituacao.toString() + ",";
				}

				condicoes += " im.last_id in (" + idsLigacaoAguaSituaco.substring(0, idsLigacaoAguaSituaco.length() - 1) + ") and";
			}

			// situacao da Ligacao de Esgoto
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoEsgotoSituacao())){

				String idsLigacaoEsgotoSituaco = "";
				for(Integer idLigacaoEsgotoSituacao : helper.getColecaoIdsLigacaoEsgotoSituacao()){

					idsLigacaoEsgotoSituaco += idLigacaoEsgotoSituacao.toString() + ",";
				}

				condicoes += " im.lest_id in (" + idsLigacaoEsgotoSituaco.substring(0, idsLigacaoEsgotoSituaco.length() - 1) + ") and";
			}

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes += " ( exists (select 1 from conta co where co.imov_id = im.imov_id and (co.cnta_amreferenciaconta >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnta_amreferenciaconta <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString()
								+ ")) or"
								+ " exists (select 1 from conta_historico ch where ch.imov_id = im.imov_id and (ch.cnhi_amreferenciaconta >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and ch.cnhi_amreferenciaconta <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gpp.gppr_amreferenciafaturamento >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and gpp.gppr_amreferenciafaturamento <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gph.gpph_amreferenciafaturamento >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and gph.gpph_amreferenciafaturamento <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) ) and";
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes += " (exists (select 1 from conta co where co.imov_id = im.imov_id and (co.cnta_dtvencimentoconta >="
								+ " to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and co.cnta_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from conta_historico ch where ch.imov_id = im.imov_id and (ch.cnhi_dtvencimentoconta >="
								+ " to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and ch.cnhi_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gpp.gppr_dtvencimento >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and gpp.gppr_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gph.gpph_dtvencimento >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and gph.gpph_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy')))) and";
			}

			// Comando
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") ) )";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") ) )";

				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ") ) )";
				}
			}else{

				// Caso nao tenha informado o comando
				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") ) )";
				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") ) )";
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id) where cph.imov_id = im.imov_id ))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)" + " where cph.imov_id = im.imov_id ))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id ) )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id ) ) )";
				}
			}

			consulta.append(" where " + condicoes);

			consulta.append(" order by im.loca_id, sc.stcm_cdsetorcomercial, qu.qdra_nnquadra, im.imov_nnlote, im.imov_nnsublote");

			query = session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.addScalar("idLocalidade", Hibernate.INTEGER).addScalar("codigoSetor", Hibernate.INTEGER)
							.addScalar("numeroQuadra", Hibernate.INTEGER).addScalar("lote", Hibernate.SHORT)
							.addScalar("sublote", Hibernate.SHORT).addScalar("idLigacaoAguaSituacao", Hibernate.INTEGER)
							.addScalar("idLigacaoEsgotoSituacao", Hibernate.INTEGER).addScalar("descricaoPerfilImovel", Hibernate.STRING)
							.addScalar("descricaoLigacaoAguaSituacao", Hibernate.STRING)
							.addScalar("descricaoLigacaoEsgotoSituacao", Hibernate.STRING);

			if(pageOffset < 0){
				retorno = (List) query.list();
			}else{
				retorno = (List) query.setFirstResult(10 * pageOffset).setMaxResults(10).list();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Integer pesquisarQuantidadeImoveisComDebitosPrescritos(FiltroImoveisComDebitosPrescritosHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Integer retorno = 0;
		StringBuilder consulta = new StringBuilder();
		String condicoes = "";
		Collection<String> colecaoBlocosMatriculas = new ArrayList<String>();

		try{

			consulta.append(" select count(im.imov_id) as qtdImoveis");
			consulta.append(" from imovel im");
			consulta.append(" inner join localidade lo on lo.loca_id = im.loca_id");
			consulta.append(" inner join quadra qu on qu.qdra_id = im.qdra_id");
			consulta.append(" inner join setor_comercial sc on sc.stcm_id = im.stcm_id");

			// Imovel
			if(helper.getIdImovel() != null){

				condicoes += " im.imov_id = " + helper.getIdImovel().toString() + " and";
			}

			// Arquivo de Imoveis
			if(helper.getArquivoImoveis() != null && !Util.isVazioOrNulo(helper.getColecaoIdsImoveis())){

				if(helper.getColecaoIdsImoveis().size() > 1000){

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						// A cada bloco de 1000 matricula adiciona na Colecao
						if(colecaoMatriculasAuxiliar.size() == 1000){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}

					if(!Util.isVazioOrNulo(colecaoMatriculasAuxiliar)){

						colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
					}

				}else{

					Collection colecaoMatriculasAuxiliar = new ArrayList<Object>();
					String idsImoveis = "";
					int tamanhoColecaoMatriculas = helper.getColecaoIdsImoveis().size();

					for(Object idImovel : helper.getColecaoIdsImoveis()){

						idsImoveis += idImovel.toString() + ",";
						colecaoMatriculasAuxiliar.add(idImovel);

						if(colecaoMatriculasAuxiliar.size() == tamanhoColecaoMatriculas){

							colecaoBlocosMatriculas.add(" im.imov_id in (" + idsImoveis.substring(0, idsImoveis.length() - 1) + ")");
							colecaoMatriculasAuxiliar.clear();
							idsImoveis = "";
						}
					}
				}

				// Varre a Colecao de blocos 1000 matricula ou menos cada e gera a condicao
				String condicaoMatriculas = "";
				for(String blocoMatriculas : colecaoBlocosMatriculas){

					condicaoMatriculas += blocoMatriculas + " or";
				}

				condicoes += "(" + condicaoMatriculas.substring(0, condicaoMatriculas.length() - 2) + ") and";

			}

			if(helper.getIdCliente() != null){

				// Cliente
				String condicoesCliente = "";
				condicoesCliente += " exists ( select 1 from  cliente_imovel ci inner join cliente cl on cl.clie_id = ci.clie_id where ci.imov_id = im.imov_id and";
				condicoesCliente += " cl.clie_id = " + helper.getIdCliente().toString() + " and";

				if(helper.getIdClienteRelacaoTipo() != null){

					condicoesCliente += " ci.crtp_id = " + helper.getIdClienteRelacaoTipo().toString() + " and";
				}

				if(helper.getPeriodoRelacionamentoInicial() != null && helper.getPeriodoRelacionamentoFinal() != null){

					condicoesCliente += " ci.clim_dtrelacaoinicio >= to_date('"
									+ Util.formatarData(helper.getPeriodoRelacionamentoInicial()) + "', 'dd/mm/yyyy') and";
					condicoesCliente += " ci.clim_dtrelacaofim <= to_date('" + Util.formatarData(helper.getPeriodoRelacionamentoFinal())
									+ "', 'dd/mm/yyyy') and";
				}

				condicoes += condicoesCliente.substring(0, condicoesCliente.length() - 3) + ") and";

			}

			// Gerencia Regional
			if(helper.getIdGerenciaRegional() != null){

				condicoes += " lo.greg_id =  " + helper.getIdGerenciaRegional().toString() + " and";
			}

			// Unidade de negocio
			if(helper.getIdUnidadeNegocio() != null){

				condicoes += " lo.uneg_id =  " + helper.getIdUnidadeNegocio().toString() + " and";
			}

			// Elo
			if(helper.getIdElo() != null){

				condicoes += " lo.loca_cdelo =  " + helper.getIdElo().toString() + " and";
			}

			// Quadra
			if(helper.getNumeroQuadraInicial() != null && helper.getNumeroQuadraFinal() != null){

				condicoes += " (qu.qdra_nnquadra >= " + helper.getNumeroQuadraInicial().toString();
				condicoes += " and qu.qdra_nnquadra <= " + helper.getNumeroQuadraFinal().toString() + ") and";
				condicoes += " (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
				condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}else if(helper.getCodigoSetorComercialInicial() != null && helper.getCodigoSetorComercialFinal() != null){

				// Setor Comercial
				condicoes += " (sc.stcm_cdsetorcomercial >= " + helper.getCodigoSetorComercialInicial().toString();
				condicoes += " and sc.stcm_cdsetorcomercial <= " + helper.getCodigoSetorComercialFinal().toString() + ") and";
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}else if(helper.getIdLocalidadeInicial() != null && helper.getIdLocalidadeFinal() != null){

				// Localidade
				condicoes += " (lo.loca_id >= " + helper.getIdLocalidadeInicial().toString();
				condicoes += " and lo.loca_id <= " + helper.getIdLocalidadeFinal().toString() + ") and";

			}

			// Categoria
			if(!Util.isVazioOrNulo(helper.getColecaoIdsCategorias())){

				String condicoesCategoria = "";
				condicoesCategoria += " exists ( select 1 from  imovel_subcategoria isc where isc.imov_id = im.imov_id and";

				String idsCategorias = "";
				for(Integer idCategoria : helper.getColecaoIdsCategorias()){

					idsCategorias += idCategoria.toString() + ",";
				}

				condicoesCategoria += " isc.catg_id in (" + idsCategorias.substring(0, idsCategorias.length() - 1) + ") and";

				// Subcategoria
				if(!Util.isVazioOrNulo(helper.getColecaoIdsSubcategorias())){

					String idsSubcategorias = "";
					for(Integer idSubcategoria : helper.getColecaoIdsSubcategorias()){

						idsSubcategorias += idSubcategoria.toString() + ",";
					}

					condicoesCategoria += " isc.scat_id in (" + idsSubcategorias.substring(0, idsSubcategorias.length() - 1) + ") and";
				}

				condicoes += condicoesCategoria.substring(0, condicoesCategoria.length() - 3) + ") and";
			}

			// situacao da Ligacao de agua
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoAguaSituacao())){

				String idsLigacaoAguaSituaco = "";
				for(Integer idLigacaoAguaSituacao : helper.getColecaoIdsLigacaoAguaSituacao()){

					idsLigacaoAguaSituaco += idLigacaoAguaSituacao.toString() + ",";
				}

				condicoes += " im.last_id in (" + idsLigacaoAguaSituaco.substring(0, idsLigacaoAguaSituaco.length() - 1) + ") and";
			}

			// situacao da Ligacao de Esgoto
			if(!Util.isVazioOrNulo(helper.getColecaoIdsLigacaoEsgotoSituacao())){

				String idsLigacaoEsgotoSituaco = "";
				for(Integer idLigacaoEsgotoSituacao : helper.getColecaoIdsLigacaoEsgotoSituacao()){

					idsLigacaoEsgotoSituaco += idLigacaoEsgotoSituacao.toString() + ",";
				}

				condicoes += " im.lest_id in (" + idsLigacaoEsgotoSituaco.substring(0, idsLigacaoEsgotoSituaco.length() - 1) + ") and";
			}

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes += " ( exists (select 1 from conta co where co.imov_id = im.imov_id and (co.cnta_amreferenciaconta >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnta_amreferenciaconta <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString()
								+ ")) or"
								+ " exists (select 1 from conta_historico ch where ch.imov_id = im.imov_id and (ch.cnhi_amreferenciaconta >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and ch.cnhi_amreferenciaconta <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gpp.gppr_amreferenciafaturamento >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and gpp.gppr_amreferenciafaturamento <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gph.gpph_amreferenciafaturamento >= "
								+ helper.getPeriodoReferenciaDebitoInicial().toString() + " and gph.gpph_amreferenciafaturamento <= "
								+ helper.getPeriodoReferenciaDebitoFinal().toString() + ")) ) and";
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes += " (exists (select 1 from conta co where co.imov_id = im.imov_id and (co.cnta_dtvencimentoconta >="
								+ " to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and co.cnta_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from conta_historico ch where ch.imov_id = im.imov_id and (ch.cnhi_dtvencimentoconta >="
								+ " to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and ch.cnhi_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gpp.gppr_dtvencimento >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and gpp.gppr_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy'))) or"
								+ " exists (select 1 from guia_prescricao_historico gp "
								+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
								+ " where gp.imov_id = im.imov_id and (gph.gpph_dtvencimento >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy')"
								+ " and gph.gpph_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal())
								+ "', 'dd/mm/yyyy')))) and";
			}

			// Comando
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") ) )";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ") ) )";

				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gp.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ") ) )";
				}
			}else{

				// Caso nao tenha informado o comando
				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") ) )";
				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + "))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)"
									+ " where cph.imov_id = im.imov_id and ch.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + "))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gpp.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id and gph.dcst_id <> " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ") ) )";
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta co on (co.cnta_id = cph.cnta_id) where cph.imov_id = im.imov_id ))";

					condicoes += "  or ( exists (select 1 from conta_prescricao_historico cph "
									+ " inner join conta_historico ch on (ch.cnta_id = cph.cnta_id)" + " where cph.imov_id = im.imov_id ))";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id ) )";

					condicoes += " or (exists (select 1 from guia_prescricao_historico gp "
									+ " inner join guia_pagamento_prestacao_hist gph on gph.gpag_id = gp.gpag_id "
									+ " where gp.imov_id = im.imov_id ) ) )";
				}
			}

			consulta.append(" where " + condicoes);

			Number retornoConsulta = (Number) session.createSQLQuery(consulta.toString()).addScalar("qtdImoveis", Hibernate.INTEGER)
							.setMaxResults(1).uniqueResult();

			if(retornoConsulta != null){

				retorno = retornoConsulta.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection pesquisarContasPrescritasPorImovel(Integer idImovel, FiltroImoveisComDebitosPrescritosHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select co.cnta_id as idConta, co.cnta_amreferenciaconta as anoMesReferenciaConta, ");
			consulta.append(" ((coalesce(co.cnta_vlagua,0) + coalesce(co.cnta_vlesgoto,0) + coalesce(co.cnta_vldebitos,0)) - (coalesce(co.cnta_vlcreditos,0) + coalesce(co.cnta_vlimpostos,0))) as valorConta,");
			consulta.append(" co.dcst_idatual as idDebitoCreditoSituacaoAtual,");
			consulta.append(" dc.dcst_dsabreviado as descDebitoCredSituacao,");
			consulta.append(" co.cnta_dtvencimentoconta as dataVencimento,");
			consulta.append(" coalesce(co.cnta_vlagua,0) as valorAgua,");
			consulta.append(" coalesce(co.cnta_vlesgoto,0) as valorEsgoto,");
			consulta.append(" coalesce(co.cnta_vldebitos,0) as valorDebitos,");
			consulta.append(" coalesce(co.cnta_vlcreditos,0) as valorCreditos,");
			consulta.append(" coalesce(co.cnta_vlimpostos,0) as valorImpostos");

			consulta.append(" from conta co");
			consulta.append(" inner join debito_credito_situacao dc on dc.dcst_id = co.dcst_idatual ");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (co.cnta_amreferenciaconta >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnta_amreferenciaconta <= " + helper.getPeriodoReferenciaDebitoFinal().toString() + ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( co.cnta_dtvencimentoconta >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and co.cnta_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" co.imov_id = " + idImovel.toString() + " and");

			// Comando
			String condicoesAux = "";
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ")))";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + ")))";

				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ")))";
				}
			}else{

				// Caso nao tenha informado o comando
				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ")))";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + ")))";
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph where co.cnta_id = cph.cnta_id )))";
				}
			}

			condicoes.append(condicoesAux);
			consulta.append(" where " + condicoes.toString());

			consulta.append(" order by co.cnta_amreferenciaconta");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idConta", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaConta", Hibernate.INTEGER).addScalar("valorConta", Hibernate.BIG_DECIMAL)
							.addScalar("idDebitoCreditoSituacaoAtual", Hibernate.INTEGER)
							.addScalar("descDebitoCredSituacao", Hibernate.STRING).addScalar("dataVencimento", Hibernate.DATE)
							.addScalar("valorAgua", Hibernate.BIG_DECIMAL).addScalar("valorEsgoto", Hibernate.BIG_DECIMAL)
							.addScalar("valorDebitos", Hibernate.BIG_DECIMAL).addScalar("valorCreditos", Hibernate.BIG_DECIMAL)
							.addScalar("valorImpostos", Hibernate.BIG_DECIMAL).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection pesquisarContasHistoricoPrescritasPorImovel(Integer idImovel, FiltroImoveisComDebitosPrescritosHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select co.cnta_id as idConta, co.cnhi_amreferenciaconta as anoMesReferenciaConta, ");
			consulta.append(" ((coalesce(co.cnhi_vlagua,0) + coalesce(co.cnhi_vlesgoto,0) + coalesce(co.cnhi_vldebitos,0)) - (coalesce(co.cnhi_vlcreditos,0) + coalesce(co.cnhi_vlimpostos,0))) as valorConta,");
			consulta.append(" co.dcst_idatual as idDebitoCreditoSituacaoAtual, ");
			consulta.append(" dc.dcst_dsabreviado as descDebitoCredSituacao,");
			consulta.append(" co.cnhi_dtvencimentoconta as dataVencimento,");
			consulta.append(" coalesce(co.cnhi_vlagua,0) as valorAgua,");
			consulta.append(" coalesce(co.cnhi_vlesgoto,0) as valorEsgoto,");
			consulta.append(" coalesce(co.cnhi_vldebitos,0) as valorDebitos,");
			consulta.append(" coalesce(co.cnhi_vlcreditos,0) as valorCreditos,");
			consulta.append(" coalesce(co.cnhi_vlimpostos,0) as valorImpostos");

			consulta.append(" from conta_historico co");
			consulta.append(" inner join debito_credito_situacao dc on dc.dcst_id = co.dcst_idatual ");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (co.cnhi_amreferenciaconta >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and co.cnhi_amreferenciaconta <= " + helper.getPeriodoReferenciaDebitoFinal().toString() + ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( co.cnhi_dtvencimentoconta >= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and co.cnhi_dtvencimentoconta <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" co.imov_id = " + idImovel.toString() + " and");

			// Comando
			String condicoesAux = "";
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ " and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString() + ")))";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + " and cph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + ")))";

				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and cph.prcm_id =  " + helper.getIdPrescricaoComando().toString()
									+ ")))";
				}
			}else{

				// Caso nao tenha informado o comando
				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual = " + DebitoCreditoSituacao.PRESCRITA.toString()
									+ ")))";

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph "
									+ " where co.cnta_id = cph.cnta_id and co.dcst_idatual <> "
									+ DebitoCreditoSituacao.PRESCRITA.toString() + ")))";
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoesAux += " ( ( exists (select 1 from conta_prescricao_historico cph where co.cnta_id = cph.cnta_id )))";
				}
			}

			condicoes.append(condicoesAux);
			consulta.append(" where " + condicoes.toString());

			consulta.append(" order by co.cnhi_amreferenciaconta");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idConta", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaConta", Hibernate.INTEGER).addScalar("valorConta", Hibernate.BIG_DECIMAL)
							.addScalar("idDebitoCreditoSituacaoAtual", Hibernate.INTEGER)
							.addScalar("descDebitoCredSituacao", Hibernate.STRING).addScalar("dataVencimento", Hibernate.DATE)
							.addScalar("valorAgua", Hibernate.BIG_DECIMAL).addScalar("valorEsgoto", Hibernate.BIG_DECIMAL)
							.addScalar("valorDebitos", Hibernate.BIG_DECIMAL).addScalar("valorCreditos", Hibernate.BIG_DECIMAL)
							.addScalar("valorImpostos", Hibernate.BIG_DECIMAL).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection pesquisarGuiasPagamentoPrestacaoPrescritasPorImovel(Integer idImovel, FiltroImoveisComDebitosPrescritosHelper helper)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select gp.gpag_id as idGuia, ");
			consulta.append(" gpp.gppr_amreferenciafaturamento as anoMesReferenciaGuia,");
			consulta.append(" gpp.gppr_nnprestacao as numeroPrestacao,");
			consulta.append(" sum(coalesce(gpp.gppr_vlprestacao, 0)) as valorGuia,");
			consulta.append(" gpp.gppr_dtvencimento as dataVencimentoPrestacao,");
			consulta.append(" dcs.dcst_id as idDebitoCreditoSituacaoAtual, ");
			consulta.append(" dcs.dcst_dsabreviado as descDebitoCreditoSituacaoAtual, ");
			consulta.append(" dt.dbtp_id as idDebitoTipo, ");
			consulta.append(" dt.dbtp_dsdebitotipo as descDebitoTipo, ");
			consulta.append(" gpp.gppr_dtemissao as dataEmissao ");

			consulta.append(" from guia_pagamento gp");
			consulta.append(" inner join guia_pagamento_prestacao gpp on gpp.gpag_id = gp.gpag_id");
			consulta.append(" inner join debito_tipo dt on dt.dbtp_id = gpp.dbtp_id ");
			consulta.append(" inner join debito_credito_situacao dcs on dcs.dcst_id = gpp.dcst_id ");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (gpp.gppr_amreferenciafaturamento >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and gpp.gppr_amreferenciafaturamento <= " + helper.getPeriodoReferenciaDebitoFinal().toString()
								+ ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( gpp.gppr_dtvencimento >= to_date('" + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and gpp.gppr_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" gp.imov_id = " + idImovel.toString() + " and");

			// Comando
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes.append(" gpp.dcst_id = ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes.append(" gpp.dcst_id <> ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes.append(" exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");
				}
			}else{

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes.append(" gpp.dcst_id = ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes.append(" gpp.dcst_id <> ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes.append(" exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");
				}
			}

			consulta.append(" where " + condicoes.toString());
			consulta.append(" group by gp.gpag_id, gpp.gppr_amreferenciafaturamento, gpp.gppr_dtvencimento, gpp.gppr_nnprestacao, dcs.dcst_id, dcs.dcst_dsabreviado, dt.dbtp_id, dt.dbtp_dsdebitotipo, gpp.gppr_dtemissao");

			consulta.append(" order by gp.gpag_id, gpp.gppr_nnprestacao, gpp.gppr_amreferenciafaturamento, gpp.gppr_dtvencimento, dcs.dcst_id ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idGuia", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaGuia", Hibernate.INTEGER).addScalar("numeroPrestacao", Hibernate.SHORT)
							.addScalar("valorGuia", Hibernate.BIG_DECIMAL).addScalar("dataVencimentoPrestacao", Hibernate.DATE)
							.addScalar("idDebitoCreditoSituacaoAtual", Hibernate.INTEGER)
							.addScalar("descDebitoCreditoSituacaoAtual", Hibernate.STRING).addScalar("idDebitoTipo", Hibernate.INTEGER)
							.addScalar("descDebitoTipo", Hibernate.STRING).addScalar("dataEmissao", Hibernate.DATE).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3141] Filtrar Imoveis com Debitos Prescritos
	 * 
	 * @author Anderson Italo
	 * @date 02/04/2014
	 */
	public Collection pesquisarGuiasPagamentoPrestacaoHistoricoPrescritasPorImovel(Integer idImovel,
					FiltroImoveisComDebitosPrescritosHelper helper) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection retorno = new ArrayList<Object>();
		StringBuilder consulta = new StringBuilder();
		StringBuilder condicoes = new StringBuilder();

		try{

			consulta.append(" select gp.gpag_id as idGuia, ");
			consulta.append(" gpp.gpph_amreferenciafaturamento as anoMesReferenciaGuia,");
			consulta.append(" gpp.gpph_nnprestacao as numeroPrestacao,");
			consulta.append(" sum(coalesce(gpp.gpph_vlprestacao, 0)) as valorGuia,");
			consulta.append(" gpp.gpph_dtvencimento as dataVencimentoPrestacao,");
			consulta.append(" dcs.dcst_id as idDebitoCreditoSituacaoAtual, ");
			consulta.append(" dcs.dcst_dsabreviado as descDebitoCreditoSituacaoAtual, ");
			consulta.append(" dt.dbtp_id as idDebitoTipo, ");
			consulta.append(" dt.dbtp_dsdebitotipo as descDebitoTipo, ");
			consulta.append(" gpp.gpph_dtemissao as dataEmissao ");

			consulta.append(" from guia_pagamento gp");
			consulta.append(" inner join guia_pagamento_prestacao_hist gpp on gpp.gpag_id = gp.gpag_id");
			consulta.append(" inner join debito_tipo dt on dt.dbtp_id = gpp.dbtp_id ");
			consulta.append(" inner join debito_credito_situacao dcs on dcs.dcst_id = gpp.dcst_id ");

			// Periodo de referencia do Debito
			if(helper.getPeriodoReferenciaDebitoInicial() != null && helper.getPeriodoReferenciaDebitoFinal() != null){

				condicoes.append(" (gpp.gpph_amreferenciafaturamento >= " + helper.getPeriodoReferenciaDebitoInicial().toString()
								+ " and gpp.gpph_amreferenciafaturamento <= " + helper.getPeriodoReferenciaDebitoFinal().toString()
								+ ") and");
			}

			// Periodo de Vencimento do Debito
			if(helper.getPeriodoVencimentoDebitoInicial() != null && helper.getPeriodoVencimentoDebitoFinal() != null){

				condicoes.append(" ( gpp.gpph_dtvencimento >= to_date('" + Util.formatarData(helper.getPeriodoVencimentoDebitoInicial())
								+ "', 'dd/mm/yyyy') and gpp.gpph_dtvencimento <= to_date('"
								+ Util.formatarData(helper.getPeriodoVencimentoDebitoFinal()) + "', 'dd/mm/yyyy')) and");
			}

			// Imovel
			condicoes.append(" gp.imov_id = " + idImovel.toString() + " and");

			// Comando
			if(helper.getIdPrescricaoComando() != null && Util.verificarIdNaoVazio(helper.getIdPrescricaoComando().toString())){

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes.append(" gpp.dcst_id = ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes.append(" gpp.dcst_id <> ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes.append(" exists (select 1 from guia_prescricao_historico gph where gph.prcm_id =  "
									+ helper.getIdPrescricaoComando().toString() + " and gph.gpag_id = gp.gpag_id)");
				}
			}else{

				if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.MARCADO)){

					// Apenas Imoveis com Debitos Precritos Marcados
					condicoes.append(" gpp.dcst_id = ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");

				}else if(helper.getIndicadorSituacaoDebito().equals(FiltroImoveisComDebitosPrescritosHelper.DESMARCADO)){

					// Apenas Imoveis com Debitos Precritos Desmarcados
					condicoes.append(" gpp.dcst_id <> ");
					condicoes.append(DebitoCreditoSituacao.PRESCRITA.toString());
					condicoes.append("and exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");
				}else{

					// Apenas Imoveis com Debitos Precritos Marcados ou Desmarcados (Todos)
					condicoes.append(" exists (select 1 from guia_prescricao_historico gph where gph.gpag_id = gp.gpag_id)");
				}
			}

			consulta.append(" where " + condicoes.toString());
			consulta.append(" group by gp.gpag_id, gpp.gpph_amreferenciafaturamento, gpp.gpph_dtvencimento, gpp.gpph_nnprestacao, dcs.dcst_id, dcs.dcst_dsabreviado, dt.dbtp_id, dt.dbtp_dsdebitotipo, gpp.gpph_dtemissao");

			consulta.append(" order by gp.gpag_id, gpp.gpph_nnprestacao, gpp.gpph_amreferenciafaturamento, gpp.gpph_dtvencimento, dcs.dcst_id ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idGuia", Hibernate.INTEGER)
							.addScalar("anoMesReferenciaGuia", Hibernate.INTEGER).addScalar("numeroPrestacao", Hibernate.SHORT)
							.addScalar("valorGuia", Hibernate.BIG_DECIMAL).addScalar("dataVencimentoPrestacao", Hibernate.DATE)
							.addScalar("idDebitoCreditoSituacaoAtual", Hibernate.INTEGER)
							.addScalar("descDebitoCreditoSituacaoAtual", Hibernate.STRING).addScalar("idDebitoTipo", Hibernate.INTEGER)
							.addScalar("descDebitoTipo", Hibernate.STRING).addScalar("dataEmissao", Hibernate.DATE).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC0614] Gerar Resumo das Acoes de cobranca Eventuais
	 * [SB0004] - Tratar cobranca Administrativa
	 */

	public ImovelCobrancaSituacao pesquisarImovelEmCobrancaAdministrativa(Integer idImovel, Integer idComando)
					throws ErroRepositorioException{

		ImovelCobrancaSituacao retorno = null;
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("from ImovelCobrancaSituacao imovCobrancaSit where imovCobrancaSit.imovel.id = :idImovel ");
			consulta.append("and imovCobrancaSit.cobrancaSituacao.id = :idSituacao ");
			consulta.append("and imovCobrancaSit.cobrancaAcaoAtividadeComando.id = :idComando ");
			consulta.append("and imovCobrancaSit.dataRetiradaCobranca is null ");

			retorno = (ImovelCobrancaSituacao) session.createQuery(consulta.toString()).setInteger("idImovel", idImovel)
							.setInteger("idSituacao", CobrancaSituacao.COBRANCA_ADMINISTRATIVA).setInteger("idComando", idComando)
							.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarImovelEmCobrancaAdministrativaAjuste() throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select distinct a.imov_id as idImovel ");
			consulta.append("from imovel_cobranca_situacao a ");
			consulta.append("inner join cobranca_documento b on b.cacm_id=a.cacm_id ");
			consulta.append("and b.imov_id=a.imov_id ");
			consulta.append("and b.cdst_id=1 ");
			consulta.append("where iscb_dtretiradacobranca is not null ");
			consulta.append("and cbst_id=4 ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UC3153] - Verificar Titularidade Debito/Credito
	 * 
	 * @author Yara Souza
	 * @data 30/07/2014
	 */
	public Integer pesquisarIdClienteCreditoARealizarComNomeConta(Integer idCreditoARealizar) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cda.clie_id as idCliente from cliente_credito_a_realizar ccr ");
			consulta.append(" inner join credito_a_realizar car on car.crar_id = ccr.crar_id ");
			consulta.append(" and cda.crtp_id = (select ci.crtp_id from cliente_imovel ci ");
			consulta.append(" where ci.imov_id = car.imov_id and ci.clim_icnomeconta = " + ConstantesSistema.SIM.toString());
			consulta.append(" and ci.clim_dtrelacaofim is null) ");
			consulta.append(" and car.dbac_id = " + idCreditoARealizar.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente", Hibernate.INTEGER).setMaxResults(1)
							.uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * [UC3153] - Verificar Titularidade Debito/Credito
	 * 
	 * @author Yara Souza
	 * @data 30/07/2014
	 */
	public Integer pesquisarIdClienteCreditoARealizarTitularRelacao(Integer idCreditoARealizar, Integer idClienteRelacaoTipo)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Number retorno = null;
		Integer retornoConsulta = null;
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select cca.clie_id as idCliente from cliente_credito_a_realizar cca ");
			consulta.append(" inner join credito_a_realizar car on car.crar_id = cca.crar_id ");
			consulta.append(" and cca.crtp_id = " + idClienteRelacaoTipo.toString());
			consulta.append(" and car.crar_id = " + idCreditoARealizar.toString());

			retorno = (Number) session.createSQLQuery(consulta.toString()).addScalar("idCliente", Hibernate.INTEGER).setMaxResults(1)
							.uniqueResult();

			if(retorno != null){

				retornoConsulta = retorno.intValue();
			}

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retornoConsulta;
	}

	/**
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarIdParcelamento() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Integer> retorno = new ArrayList<Integer>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" select p.parc_id as idParcelamento from parcelamento p ");

			retorno = (Collection<Integer>) session.createSQLQuery(consulta.toString()).addScalar("idParcelamento", Hibernate.INTEGER)
							.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarDebitoACobrarPorParcelamento() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select dbac_id as idDebitoACobrar, imov_id as idImovel , DBAC_TMATUDEBITO as dataGeracaoDebito From Debito_A_Cobrar  ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idDebitoACobrar", Hibernate.INTEGER)
							.addScalar("idImovel", Hibernate.INTEGER).addScalar("dataGeracaoDebito", Hibernate.DATE).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param dataGeracaoDebito
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection<Object[]> pesquisarClienteImovelPorDataEImovel(Date dataGeracaoDebito, Integer idImovel)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select clie_id as idCliente, crtp_id as idClienteRelacaoTipo  From Cliente_Imovel where "
							+ " imov_id =:idImovel "
							+ " and ((:dataGeracaoDebito between CLIM_DTRELACAOINICIO and CLIM_DTRELACAOFIM) OR  (CLIM_DTRELACAOINICIO <:dataGeracaoDebito and Clim_Dtrelacaofim is null )) ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idCliente", Hibernate.INTEGER)
							.addScalar("idClienteRelacaoTipo", Hibernate.INTEGER).setInteger("idImovel", idImovel)
							.setDate("dataGeracaoDebito", dataGeracaoDebito).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Object[]> pesquisarCreditoARealizarPorParcelamento() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select crar_id as idCreditoARealizar, imov_id as idImovel , crar_tmatucredito as dataGeracaoCredito From credito_a_realizar  ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idCreditoARealizar", Hibernate.INTEGER)
							.addScalar("idImovel", Hibernate.INTEGER).addScalar("dataGeracaoCredito", Hibernate.DATE).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	public Collection<Object[]> pesquisarClienteImovelPorImovel(Integer idImovel) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select clie_id as idCliente, crtp_id as idClienteRelacaoTipo  From Cliente_Imovel where "
							+ " imov_id =:idImovel " + " and  Clim_Dtrelacaofim is null  ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idCliente", Hibernate.INTEGER)
							.addScalar("idClienteRelacaoTipo", Hibernate.INTEGER).setInteger("idImovel", idImovel).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param periodoInicial
	 * @param periodoFinal
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection<Object[]> pesquisarImovelPorPeriodoVencimentoConta(Date periodoInicial, Date periodoFinal, Integer idSetorComercial)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{
			
			 

			consulta.append(" Select distinct imov_id as idImovel From Conta c " + " inner join rota r on r.rota_id = c.rota_id "
							+ " inner join setor_comercial sc on sc.STCM_ID = r.STCM_ID " + " where "
							+ "   CNTA_DTVENCIMENTOCONTA between :periodoInicial and :periodoFinal  " + "   and cnta_icdividaativa <> 1 "
							+ "   AND sc.STCM_ID =:idSetorComercial");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.setDate("periodoInicial", periodoInicial).setDate("periodoFinal", periodoFinal)
							.setInteger("idSetorComercial", idSetorComercial).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * @param periodoInicial
	 * @param periodoFinal
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection<Object[]> pesquisarImovelPorPeriodoVencimentoGuiaPagamento(Date periodoInicial, Date periodoFinal,
					Integer idSetorComercial)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select distinct imov_id as idImovel" + " From GUIA_PAGAMENTO GP "
							+ "INNER JOIN GUIA_PAGAMENTO_PRESTACAO GPP ON GPP.GPAG_ID = GP.GPAG_ID " + " where "
							+ "   GPP.GPPR_DTVENCIMENTO between :periodoInicial and :periodoFinal and gppr_icdividaativa <> 1 "
							+ " and GP.STCM_ID =:idSetorComercial ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idImovel", Hibernate.INTEGER)
							.setDate("periodoInicial", periodoInicial).setDate("periodoFinal", periodoFinal)
							.setInteger("idSetorComercial", idSetorComercial).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * [UCXXXX] Gerar Notificacao Amigavel
	 * Pesquisar Documento de Cobrança
	 * 
	 * @author Genival Barbosa
	 * @date 09/09/2014
	 */
	public Collection<CobrancaDocumentoItem> pesquisarCobrancaDocumentoParaNotificacaoAmigavel(Integer idImovel,
					Integer anoMesReferenciaFaturamento) throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select cdit ");
			consulta.append("from CobrancaDocumentoItem cdit ");
			consulta.append("INNER JOIN FETCH cdit.contaGeral cnge ");
			consulta.append("INNER JOIN FETCH cdit.contaGeral.conta cnta ");
			consulta.append("INNER JOIN FETCH cdit.cobrancaDocumento codo ");
			consulta.append("INNER JOIN FETCH codo.cobrancaAcaoAtividadeComando caac ");
			consulta.append("where codo.imovel.id = :idImovel ");
			consulta.append("  and caac.cobrancaAcao.id = :idCobrancaAcaoNotificacaoAmigavel ");
			consulta.append("  and caac.descricaoTitulo like '%");
			consulta.append(anoMesReferenciaFaturamento);
			consulta.append("%'");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaAcaoNotificacaoAmigavel", CobrancaAcao.NOTIFICACAO_AMIGAVEL);

			retorno = (Collection<CobrancaDocumentoItem>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Pesquisar Documento de Cobrança
	 * 
	 * @author Anderson Italo
	 * @date 21/10/2014
	 */
	public Collection<CobrancaDocumentoItem> pesquisarCobrancaDocumentoParaAvisoCorte(Integer idImovel, Integer anoMesReferenciaFaturamento)
					throws ErroRepositorioException{

		Collection<CobrancaDocumentoItem> retorno = null;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{
			consulta.append("select cdit ");
			consulta.append("from CobrancaDocumentoItem cdit ");
			consulta.append("INNER JOIN FETCH cdit.contaGeral cnge ");
			consulta.append("INNER JOIN FETCH cdit.contaGeral.conta cnta ");
			consulta.append("INNER JOIN FETCH cdit.cobrancaDocumento codo ");
			consulta.append("INNER JOIN FETCH codo.cobrancaAcaoAtividadeComando caac ");
			consulta.append("where codo.imovel.id = :idImovel ");
			consulta.append("  and caac.cobrancaAcao.id = :idCobrancaAcao ");
			consulta.append("  and caac.descricaoTitulo like '%");
			consulta.append(anoMesReferenciaFaturamento);
			consulta.append("%'");

			Query query = session.createQuery(consulta.toString());

			query.setInteger("idImovel", idImovel);
			query.setInteger("idCobrancaAcao", CobrancaAcao.AVISO_CORTE);

			retorno = (Collection<CobrancaDocumentoItem>) query.list();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/*
	 * (non-Javadoc)
	 * @see gcom.cobranca.IRepositorioCobranca#boletoBancarioPodeSerCancelado(java.lang.Integer)
	 */
	public boolean boletoBancarioPodeSerCancelado(Integer boletoBancarioId) throws ErroRepositorioException{

		Integer retornoHQL = null;
		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("SELECT a.bbco_id AS bbco_id ");
			consulta.append("FROM   boleto_bancario a ");
			consulta.append("WHERE  bbmc_id IS NULL ");
			consulta.append("       AND bbco_id = :boletoBancarioId ");
			consulta.append("       AND ( ( EXISTS (SELECT B.bbco_id ");
			consulta.append("                       FROM   boleto_bancario_movimentacao b ");
			consulta.append("                       WHERE  b.bbco_id = a.bbco_id ");
			consulta.append("                              AND amit_id IS NULL ");
			consulta.append("                              AND blen_id = 1) ) ");
			consulta.append("              OR ( cbdo_id IS NOT NULL ");
			consulta.append("                   AND bbst_idatual = (SELECT bbst.bbst_id ");
			consulta.append("                                       FROM   boleto_bancario_situacao bbst ");
			consulta.append("                                       WHERE  Trim(bbst.bbst_dssituacaoboleto) ");
			consulta.append("                                              LIKE ");
			consulta.append("                                              'BAIXA' ");
			consulta.append("                                      ) ");
			consulta.append("                   AND EXISTS (SELECT C.bbmv_id ");
			consulta.append("                               FROM   boleto_bancario_ocorrencias c ");
			consulta.append("                                      join boleto_bancario_movimentacao D ");
			consulta.append("                                        ON D.bbmv_id = C.bbmv_id ");
			consulta.append("                               WHERE  d.bbco_id = a.bbco_id ");
			consulta.append("                                      AND bmto_id = (SELECT bmto.bmto_id ");
			consulta.append("                                                     FROM ");
			consulta.append("                                          boleto_bancario_motivo_ocorr ");
			consulta.append("                                          bmto ");
			consulta.append("                                                     WHERE ");
			consulta.append("                                          Trim(bmto.bmto_dsmotivoocorrencia) ");
			consulta.append("                                          LIKE ");
			consulta.append("                                          'PROTESTADO')");
			consulta.append("                              ) ");
			consulta.append("                  ) ");
			consulta.append("            ) ");

			retornoHQL = (Integer) session.createSQLQuery(consulta.toString()).addScalar("bbco_id", Hibernate.INTEGER)
							.setInteger("boletoBancarioId", boletoBancarioId).setMaxResults(1).uniqueResult();

			if(retornoHQL != null){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * TODO Saulo Lima - 12/11/2014
	 * Remover código. Soluçao paleativa enquanto existem problemas de migraçao
	 */
	public Integer recuperarCobrancaDocumentoLegado(Integer idConta) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Integer retorno = null;
		try{

			String consulta = "SELECT MIN(cdi.cbdo_id) idCobrancaDocumento FROM cobranca_documento_item cdi "
							+ "INNER JOIN aviso_inteligest ai ON ai.aint_nnsequencial = cdi.cbdo_id WHERE cdi.cnta_id = :idConta";

			retorno = (Integer) session.createSQLQuery(consulta).addScalar("idCobrancaDocumento", Hibernate.INTEGER)
							.setInteger("idConta", idConta).setMaxResults(1).uniqueResult();

		}catch(HibernateException e){
			e.printStackTrace();
			throw new ErroRepositorioException("Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * <p>
	 * [OC1366820]
	 * </p>
	 * 
	 * @author Magno Silveira (magno.silveira@procenge.com.br)
	 * @since 10/10/2014
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean verificarSeImovelPossuiDebitos(Integer idImovel) throws ErroRepositorioException{

		boolean retorno = false;

		Session session = HibernateUtil.getSession();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append("SELECT * FROM DEBITO_A_COBRAR dc ");
			consulta.append("LEFT JOIN GUIA_PAGAMENTO gp ON gp.IMOV_ID = dc.IMOV_ID ");
			consulta.append("LEFT JOIN CONTA c ON c.IMOV_ID = gp.IMOV_ID ");
			consulta.append("WHERE dc.IMOV_ID = :idImovel");

			SQLQuery query = session.createSQLQuery(consulta.toString());

			List result = query.setInteger("idImovel", idImovel).list();

			if(result != null && result.size() > 0){
				retorno = true;
			}

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
			consulta = null;
		}

		return retorno;
	}

	/**
	 * Existe ocorrência na tabela DEBITO_A_COBRAR com IMOV_ID=IMOV_ID da tabela COBRANCA_DOCUMENTO
	 * e DBAC_ICREMUNERACOBRANCAADM=1 (um)
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitoACobrarEmCobAdm(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select d.dbac_id  as idDebitoACobrar ");
			consulta.append("from DEBITO_A_COBRAR d ");
			consulta.append("inner join cobranca_documento cd on cd.IMOV_ID = d.IMOV_ID ");
			consulta.append("where d.DBAC_ICREMUNERACOBRANCAADM = 1 ");
			consulta.append("and cd.CBDO_ID =:idCobrancaDocumento ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idDebitoACobrar", Hibernate.INTEGER)
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Existe ocorrência na
	 * tabela DEBITO_COBRADO com CNTA_ID=[CNTA_ID da tabela CONTA com
	 * IMOV_ID=IMOV_ID da tabela
	 * COBRANCA_DOCUMENTO] e DBCB_ICREMUNERACOBRANCAADM=1 (um)
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitoCobradoEmCobAdm(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select d.dbcb_id  as idDebitoCobrado ");
			consulta.append("from DEBITO_COBRADO d ");
			consulta.append("inner join conta c on c.CNTA_ID = d.CNTA_ID ");
			consulta.append("inner join cobranca_documento cd on cd.IMOV_ID = c.IMOV_ID ");
			consulta.append("where d.DBCB_ICREMUNERACOBRANCAADM = 1 ");
			consulta.append("and cd.CBDO_ID =:idCobrancaDocumento ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idDebitoCobrado", Hibernate.INTEGER)
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * 
	 Existe ocorrência na tabela
	 * GUIA_PAGAMENTO_PRESTACAO com GPAG_ID=[GPAG_ID da tabela
	 * GUIA_PAGAMENTO com IMOV_ID=IMOV_ID da
	 * tabela COBRANCA_DOCUMENTO] e GPPR_ICREMUNERACOBRANCAADM=1 (um)):
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarGuiaPagamentoPrestacaoEmCobAdm(Integer idCobrancaDocumento) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select distinct gg.GPAG_ID  as idGuiaPagamento ");
			consulta.append("from GUIA_PAGAMENTO_PRESTACAO gg ");
			consulta.append("inner join GUIA_PAGAMENTO g on g.GPAG_ID = gg.GPAG_ID ");
			consulta.append("inner join cobranca_documento cd on cd.IMOV_ID = g.IMOV_ID ");
			consulta.append("where gg.GPPR_ICREMUNERACOBRANCAADM = 1 ");
			consulta.append("and cd.CBDO_ID =:idCobrancaDocumento ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idGuiaPagamento", Hibernate.INTEGER)
							.setInteger("idCobrancaDocumento", idCobrancaDocumento).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}

	/**
	 * Caso nao existam itens da cobrança administrativa parcelados (nao existe ocorrência na
	 * tabela COBRANCA_DOCUMENTO_ITEM com CDST_ID=(CDST_ID da tabela COBRANCA_DEBITO_SITUACAO com
	 * CDST_DSSITUACAODEBITO="PARCELADO") e CBDO_ID=CBDO_ID da tabela COBRANCA_DOCUMENTO com
	 * IMOV_ID=IMOV_ID da tabela IMOVEL_COBRANCA_SITUACAO e CACM_ID=CACM_ID da tabela
	 * IMOVEL_COBRANCA_SITUACAO):
	 * 
	 * @author Yara Souza
	 * @data 29/10/2014
	 * @param idCobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */

	public Collection pesquisarCobrancaDocumentoItemParcelado(Integer idImovel) throws ErroRepositorioException{

		Collection retorno = new ArrayList();
		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append("select  cdi.CDIT_ID  as idCobrancaDocumentoItem ");
			consulta.append("from COBRANCA_DOCUMENTO_ITEM cdi ");
			consulta.append("inner join COBRANCA_DOCUMENTO cd on cd.CBDO_ID = cdi.CBDO_ID ");
			consulta.append("where cdi.CDST_ID =:idCobrancaDebitoSituacaoParcelado ");
			consulta.append("and cd.IMOV_ID IN (SELECT IMOV_ID FROM IMOVEL_COBRANCA_SITUACAO WHERE CACM_ID = cd.CACM_ID ) ");
			consulta.append("and cd.IMOV_ID =:idImovel ");

			retorno = (Collection) session.createSQLQuery(consulta.toString()).addScalar("idCobrancaDocumentoItem", Hibernate.INTEGER)
							.setInteger("idCobrancaDebitoSituacaoParcelado", CobrancaDebitoSituacao.PARCELADO)
							.setInteger("idImovel", idImovel).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}
	
	
	/**
	 * @throws ErroRepositorioException
	 */
	public void removerDividaAtivaInscricaoDebito() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String remover;

		try{

			remover = "delete gcom.dividaativa.DividaAtivaInscricaoDebito ";

			session.createQuery(remover).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * @throws ErroRepositorioException
	 */
	public void removerDividaAtivaInscricaoResumo() throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();

		String remover;

		try{

			remover = "delete gcom.dividaativa.DividaAtivaInscricaoResumo ";

			session.createQuery(remover).executeUpdate();
		}catch(HibernateException e){
			// levanta a execucao para a proxima camada
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			// fecha a sessao
			HibernateUtil.closeSession(session);
		}
	}

	/**
	 * @param periodoInicial
	 * @param periodoFinal
	 * @return
	 * @throws ErroRepositorioException
	 */

	public Collection<Object[]> pesquisarClientePorPeriodoVencimentoGuiaPagamento(Date periodoInicial, Date periodoFinal,
					Integer idSetorComercial)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		Collection<Object[]> retorno = new ArrayList<Object[]>();
		StringBuilder consulta = new StringBuilder();

		try{

			consulta.append(" Select distinct clie_id as idCliente From GUIA_PAGAMENTO GP INNER JOIN GUIA_PAGAMENTO_PRESTACAO GPP ON GPP.GPAG_ID = GP.GPAG_ID where "
							+ "   GPP.GPPR_DTVENCIMENTO between :periodoInicial and :periodoFinal and clie_id is not null and imov_id is null and GP.stcm_id =:idSetorComercial ");

			retorno = (Collection<Object[]>) session.createSQLQuery(consulta.toString()).addScalar("idCliente", Hibernate.INTEGER)
							.setDate("periodoInicial", periodoInicial).setDate("periodoFinal", periodoFinal)
							.setInteger("idSetorComercial", idSetorComercial).list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

		return retorno;
	}


	public Long quantidadeRegistrosRelatorioContasReceberValoresCorrigidos(Integer matriculaImovel, Integer referencia)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" select count ( * )");

			consulta.append(" from Conta ct");
			consulta.append(" inner join ct.imovel im ");
			consulta.append(" inner join ct.localidade lc ");
			consulta.append(" inner join im.logradouroBairro lb ");
			consulta.append(" inner join lb.logradouro lg ");
			consulta.append(" inner join lg.logradouroTipo lt ");
			consulta.append(" left outer join lg.logradouroTitulo lx ");
			consulta.append(" inner join lb.bairro ba  ");
			consulta.append(" inner join ba.municipio mu  ");
			consulta.append(" inner join im.logradouroCep lw   ");
			consulta.append(" inner join lw.cep ce  ");
			consulta.append(" inner join  im.clienteImoveis ci  ");
			consulta.append(" inner join  im.clienteImoveis ci  ");
			consulta.append(" inner join  im.ligacaoAguaSituacao la  ");
			consulta.append(" inner join  im.ligacaoAguaSituacao la  ");
			consulta.append(" where ci.dataFimRelacao is null  ");
			consulta.append(" and ci.indicadorNomeConta = 1  ");

			if(matriculaImovel != null){
				consulta.append(" and im.id =:matriculaImovel ");

			}

			if(referencia != null){
				consulta.append(" and ct.referencia =:referencia ");
			}

			Query query = session.createQuery(consulta.toString());

			if(matriculaImovel != null){
				query.setParameter("matriculaImovel", matriculaImovel);
			}

			if(referencia != null){
				query.setParameter("referencia", referencia);
			}

			return (Long) query.setMaxResults(1).uniqueResult();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

	}

	public List<Object[]> gerarRelatorioContasReceberValoresCorrigidos(Integer matriculaImovel, Integer referencia)
					throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		StringBuffer consulta = new StringBuffer();

		try{

			consulta.append(" select distinct ");

			consulta.append(" lc.gerenciaRegional.id , ");
			consulta.append("  ct.localidade.id ,  ");
			consulta.append("  im.id ,  ");
			consulta.append("  lt.descricaoAbreviada ,  ");
			consulta.append("  lx.descricaoAbreviada ,  ");
			consulta.append("  lg.nome ,  ");
			consulta.append("  im.numeroImovel ,  ");
			consulta.append("  ba.nome ,  ");
			consulta.append("  mu.nome ,  ");
			consulta.append("  ce.codigo ,  ");
			consulta.append("  im.complementoEndereco ,  ");
			consulta.append("  la.descricao ,  ");

			consulta.append(" ( select count(*) ");
			consulta.append("    from Conta cx where cx.debitoCreditoSituacaoAtual.id <> 9 and cx.imovel.id = im.id ) , ");

			consulta.append(" ( ct.valorAgua + ct.valorEsgoto  + ct.debitos - ct.valorCreditos - ct.valorImposto ) ,   ");
			consulta.append(" ct.referencia , ");
			consulta.append(" ct.id  ");

			consulta.append(" from Conta ct");
			consulta.append(" inner join ct.imovel im ");
			consulta.append(" inner join ct.localidade lc ");
			consulta.append(" inner join im.logradouroBairro lb ");
			consulta.append(" inner join lb.logradouro lg ");
			consulta.append(" inner join lg.logradouroTipo lt ");
			consulta.append(" left outer join lg.logradouroTitulo lx ");
			consulta.append(" inner join lb.bairro ba  ");
			consulta.append(" inner join ba.municipio mu  ");
			consulta.append(" inner join im.logradouroCep lw   ");
			consulta.append(" inner join lw.cep ce  ");
			consulta.append(" inner join  im.clienteImoveis ci  ");
			consulta.append(" inner join  im.clienteImoveis ci  ");
			consulta.append(" inner join  im.ligacaoAguaSituacao la  ");
			consulta.append(" inner join  im.ligacaoAguaSituacao la  ");

			consulta.append(" where ci.dataFimRelacao is null  ");
			consulta.append(" and ci.indicadorNomeConta = 1  ");

			if(matriculaImovel != null){
				consulta.append(" and im.id =:matriculaImovel ");

			}

			if(referencia != null){
				consulta.append(" and ct.referencia =:referencia ");
			}

			consulta.append(" order by ct.localidade.id ");

			Query query = session.createQuery(consulta.toString());

			if(matriculaImovel != null){
				query.setParameter("matriculaImovel", matriculaImovel);
			}

			if(referencia != null){
				query.setParameter("referencia", referencia);
			}

			return query.list();

		}catch(HibernateException e){

			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{

			HibernateUtil.closeSession(session);
		}

	}

	public void atualizarContaHistoricoIdParcelamento(Collection<Integer> idContas, Integer idParcelamento) throws ErroRepositorioException{

		Session session = HibernateUtil.getSession();
		String sql;

		try{
			// Atualiza o PARC_ID em CONTA_HISTORICO
			sql = "update CONTA_HISTORICO set PARC_ID = :idParcelamento where CNTA_ID in (:idContas)";

			session.createSQLQuery(sql).setInteger("idParcelamento", idParcelamento).setParameterList("idContas", idContas).executeUpdate();

		}catch(HibernateException e){
			throw new ErroRepositorioException(e, "Erro no Hibernate");
		}finally{
			HibernateUtil.closeSession(session);
		}

	}
}
