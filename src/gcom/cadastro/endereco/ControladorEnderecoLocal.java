/*
 * Copyright (C) 2007-2007 the GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place – Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 * 
 * GSANPCG
 * Saulo Vasconcelos de Lima
 */

package gcom.cadastro.endereco;

import gcom.agenciavirtual.cadastro.endereco.LogradouroJSONHelper;
import gcom.arrecadacao.pagamento.bean.PagamentoHistoricoAdmiteDevolucaoHelper;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;
import gcom.cadastro.endereco.bean.AtualizarLogradouroBairroHelper;
import gcom.cadastro.endereco.bean.AtualizarLogradouroCepHelper;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.imovel.Imovel;
import gcom.seguranca.acesso.OperacaoEfetuada;
import gcom.seguranca.acesso.usuario.UsuarioAcaoUsuarioHelper;
import gcom.util.ControladorException;
import gcom.util.ErroRepositorioException;

import java.util.Collection;
import java.util.List;

/**
 * Description of the Interface
 * 
 * @author Sávio Luiz
 * @created 20 de Julho de 2005
 */
public interface ControladorEnderecoLocal
				extends javax.ejb.EJBLocalObject {

	/**
	 * inseri um logradouro na base e se tiver um bairro inseri na tabela de
	 * ligação logradouroBairro
	 * 
	 * @param logradouro
	 *            Description of the Parameter
	 * @param bairro
	 *            Description of the Parameter
	 * @return Description of the Return Value
	 */
	public Integer inserirLogradouro(Logradouro logradouro, Collection<Bairro> colecaoBairros, Collection<Cep> colecaoCeps)
					throws ControladorException;

	/**
	 * atualiza um logradouro na base e se tiver um bairro inseri na tabela de
	 * ligação logradouroBairro
	 * 
	 * @param logradouro
	 *            Description of the Parameter
	 * @param bairro
	 *            Description of the Parameter
	 */
	public void atualizarLogradouro(Logradouro logradouro, Collection colecaoBairros, Collection colecaoCeps,
					Collection<AtualizarLogradouroBairroHelper> colecaoBairrosAtualizacao,
					Collection<AtualizarLogradouroCepHelper> colecaoCepsAtualizacao) throws ControladorException;

	/**
	 * remove um logradouro e o bairro ta tabela ligação logradouroBairro do
	 * logradouro removido.
	 * 
	 * @param ids
	 *            Description of the Parameter
	 * @param pacoteLogradouro
	 *            Description of the Parameter
	 */
	public void removerLogradouro(String[] ids, String pacoteLogradouro, OperacaoEfetuada operacaoEfetuada,
					Collection<UsuarioAcaoUsuarioHelper> acaoUsuarioHelper) throws ControladorException;

	/**
	 * inseri os ceps importados
	 * 
	 * @param cepsImportados
	 *            Coleção contendo todos os CEPs lidos no arquivo
	 * @return retorno
	 *         Array de String contendo nas posições:
	 *         0- Total de CEPs
	 *         1- CEPs Inseridos
	 *         2- CEPs Atualizados
	 *         3- CEPs Desprezados
	 */
	public String[] inserirCepImportados(Collection cepsImportados) throws ControladorException;

	public String pesquisarEndereco(Integer idImovel) throws ControladorException;

	public String pesquisarEnderecoFormatado(Integer idImovel) throws ControladorException;

	/**
	 * @author Saulo Lima
	 * @date 26/03/2010
	 *       Mudança no tipo de retorno para Object[]:
	 *       0 - endereco (String)
	 *       1 - idLogradouro (Integer)
	 *       2 - numeroImovel (String)
	 *       3 - cepImovel (String)
	 *       4 - imovel (Imovel)
	 */
	public Object[] pesquisarEnderecoFormatadoLista(Integer idImovel) throws ControladorException;

	/**
	 * Obtém o CEP PADRÃO para um determinado município
	 * 
	 * @author Raphael Rossiter
	 * @date 04/05/2006
	 * @param municipio
	 * @return Cep
	 */
	public Cep obterCepInicialMunicipio(Municipio municipio) throws ControladorException;

	/**
	 * Verifica se o CEP é único de município
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param cep
	 * @return boolean
	 */
	public boolean verificarCepUnicoMunicipio(Cep cep) throws ControladorException;

	/**
	 * Verifica se o Bairro é do tipo "BAIRRO NAO INFORMADO"
	 * 
	 * @author Raphael Rossiter
	 * @date 22/02/2007
	 * @param bairro
	 * @return boolean
	 */
	public boolean verificarBairroTipoBairroNaoInformado(Bairro bairro) throws ControladorException;

	/**
	 * Verificar se o CEP está associado a outro logradouro
	 * 
	 * @author Raphael Rossiter
	 * @date 04/05/2006
	 * @param cep
	 * @return Logradouro
	 */
	public Logradouro verificarCepAssociadoOutroLogradouro(Cep cep) throws ControladorException;

	/**
	 * Seleciona os bairros em que o logradouro está contido
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param Logradouro
	 * @return Collection<Bairro>
	 */
	public Collection<Bairro> obterBairrosPorLogradouro(Logradouro logradouro) throws ControladorException;

	/**
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param Logradouro
	 * @return Integer
	 */
	public Integer inserirAssociacaoLogradouroCep(LogradouroCep logradouroCep) throws ControladorException;

	/**
	 * [UC0003] Informar Endereço
	 * Pesquisar associação de LogradouroCep apenas por logradouro
	 * 
	 * @author Raphael Rossiter
	 * @data 12/05/2006
	 * @param idLogradouro
	 * @return LogradouroCep
	 */
	public Collection<LogradouroCep> pesquisarAssociacaoLogradouroCepPorLogradouro(Logradouro logradouro) throws ControladorException;

	/**
	 * Verifica se o logradouro já está associado a CEPs do tipo logradouro
	 * 
	 * @author Raphael Rossiter
	 * @date 17/05/2006
	 * @param logradouro
	 * @return boolean
	 */
	public boolean verificarLogradouroAssociadoCepTipoLogradouro(Logradouro logradouro) throws ControladorException;

	/**
	 * Obtém o CEP Único para um determinado município
	 * 
	 * @author Raphael Rossiter
	 * @date 23/05/2006
	 * @param municipio
	 * @return Cep
	 */
	public Cep obterCepUnicoMunicipio(Municipio municipio) throws ControladorException;

	/**
	 * [UC0003] Informar Endereço
	 * Pesquisar associação de LogradouroBairro já existente
	 * 
	 * @author Raphael Rossiter
	 * @data 24/05/2006
	 * @param idBairro
	 *            , idLogradouro
	 * @return LogradouroBairro
	 */
	public LogradouroBairro pesquisarAssociacaoLogradouroBairro(Integer idBairro, Integer idLogradouro) throws ControladorException;

	/**
	 * [UC0003] Informar Endereço
	 * Pesquisar associação de LogradouroCep já existente
	 * 
	 * @author Raphael Rossiter
	 * @data 24/05/2006
	 * @param idCep
	 *            , idLogradouro
	 * @return LogradouroBairro
	 */
	public LogradouroCep pesquisarAssociacaoLogradouroCep(Integer idCep, Integer idLogradouro) throws ControladorException;

	public Collection<Logradouro> pesquisarLogradouro(FiltroLogradouro filtroLogradouro, Integer numeroPaginas) throws ControladorException;

	public Integer pesquisarLogradouroCount(FiltroLogradouro filtroLogradouro) throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço
	 * 
	 * @author Sávio Luiz
	 * @date 14/06/2006
	 * @param idCliente
	 * @return String
	 */
	public String pesquisarEnderecoClienteAbreviado(Integer idCliente) throws ControladorException;

	/**
	 * @author Saulo Lima
	 * @date 24/03/2010
	 * @param idCliente
	 * @return Object[]:
	 *         0 - endereco (String)
	 *         1 - idLogradouro (Integer)
	 *         2 - numeroImovel (String)
	 */
	public Object[] pesquisarEnderecoClienteAbreviadoLista(Integer idCliente, boolean indicadorAbreviado) throws ControladorException;

	// metodo que serve para fazer a pesquisa do logradouro
	// apartir dos parametros informados
	public Collection pesquisarLogradouroCompleto(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular, Integer numeroPaginas) throws ControladorException;

	public Collection pesquisarLogradouroCompletoRelatorio(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular) throws ControladorException;

	public Integer pesquisarLogradouroCompletoCount(String codigoMunicipio, String codigoBairro, String nome, String nomePopular,
					String logradouroTipo, String logradouroTitulo, String cep, String codigoLogradouro, String indicadorUso,
					String tipoPesquisa, String tipoPesquisaPopular)
					throws ControladorException;

	/**
	 * Verifica se o CEP é inicial de município
	 * 
	 * @author Raphael Rossiter
	 * @date 10/05/2006
	 * @param cep
	 * @return boolean
	 */
	public boolean verificarCepInicialMunicipio(Cep cep) throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço Autor: Ana Maria
	 */
	public String pesquisarEnderecoRegistroAtendimentoFormatado(Integer idRegistroAtendimento) throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço - refatoração: André Lopes
	 */
	public RegistroAtendimento pesquisarRegistroAtendimentoDadosEnderecoFormatado(Integer idRegistroAtendimento)
					throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço Autor: Ana Maria
	 */

	public String pesquisarEnderecoRegistroAtendimentoSolicitanteFormatado(Integer idRegistroAtendimentoSolicitante)
					throws ControladorException;

	/**
	 * Obter o objeto de registro atendimento para recuperar Endereço Autor:
	 * Sávio Luiz
	 */

	public RegistroAtendimento pesquisarRegistroAtendimentoEndereco(Integer idRegistroAtendimento) throws ControladorException;

	/**
	 * Obter os parametros de logradouroCep para o endereço Autor: Sávio Luiz
	 */

	public LogradouroCep pesquisarLogradouroCepEndereco(Integer idLogradouroCep) throws ControladorException;

	/**
	 * Obter os parametros de logradouroBairro para o endereço Autor: Sávio Luiz
	 */

	public LogradouroBairro pesquisarLogradouroBairroEndereco(Integer idLogradouroBairro) throws ControladorException;

	/**
	 * Obter os campos necessário para o endereço do imóvel Autor:Sávio Luiz
	 */

	public Imovel pesquisarImovelParaEndereco(Integer idImovel) throws ControladorException;

	/**
	 * Pesquisar os Endereços do Cliente
	 * [UC0474] Consultar Imóvel
	 * 
	 * @author Rafael Santos
	 * @date 19/09/2006
	 * @param idCliente
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarClientesEnderecosAbreviado(Integer idCliente) throws ControladorException;

	/**
	 * Pesquisar o endereço abreviado a partir do id do imóvel
	 * [UC0483] - Obter Endereço Abreviado
	 * 
	 * @author Rafael Corrêa
	 * @date 18/10/2006
	 * @param idImovel
	 * @return String
	 * @throws ControladorException
	 */

	public String obterEnderecoAbreviadoImovel(Integer idImovel) throws ControladorException;

	/**
	 * Pesquisar o endereço abreviado a partir do id do ra
	 * [UC0483] - Obter Endereço Abreviado
	 * 
	 * @author Rafael Corrêa
	 * @date 18/10/2006
	 * @param idRA
	 * @return String
	 * @throws ControladorException
	 */

	public String obterEnderecoAbreviadoRA(Integer idRA) throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço Autor: Sávio Luiz Data: 09/04/2007 Recupera o
	 * endereço em 3 partes:o endereço abreviado formatado sem o municipio e a
	 * unidade federação,a descrição do municipio e a terceira parte a sigla da
	 * unidade federação
	 */

	public String[] pesquisarEnderecoClienteAbreviadoDividido(Integer idCliente) throws ControladorException;

	/**
	 * [UC0210] - Obter Endereço Autor: Sávio Luiz
	 */

	public String[] pesquisarEnderecoFormatadoDividido(Integer idImovel) throws ControladorException;

	public String[] pesquisarEnderecoFormatadoDividido(Integer idImovel, int limiteEndereco) throws ControladorException;

	/**
	 * [UC0348] Emitir Contas por cliente responsavel CAERN
	 * Pesquisar endereco formatado para cliente
	 * 
	 * @author Raphael Rossiter
	 * @data 22/05/2007
	 * @param idCliente
	 *            ,
	 * @return Collection
	 */
	public String[] pesquisarEnderecoFormatadoClienteDividido(Integer idCliente) throws ControladorException;

	/**
	 * [UC0210] - Obter Endereço Autor: Sávio Luiz
	 */

	public String pesquisarEnderecoAbreviadoCAER(Integer idImovel) throws ControladorException;

	/**
	 * Pesquisar o cep pelo codigo do cep
	 * 
	 * @author Sávio Luiz
	 * @date 05/11/2007
	 */

	public Cep pesquisarCep(Integer codigoCep) throws ControladorException;

	/**
	 * Verifica a existência do endereço de correspondência do cliente pelo seu id
	 */
	public boolean verificarExistenciaClienteEndereco(Integer idCliente) throws ControladorException;

	/**
	 * Pesquisar Logradouro Bairro
	 * 
	 * @author Virgínia Melo
	 * @date 24/07/2009
	 * @param idLogradouroBairro
	 * @return LogradouroBairro
	 * @throws ControladorException
	 */
	public LogradouroBairro pesquisarLogradouroBairro(Integer idLogradouroBairro) throws ControladorException;

	public String pesquisarEnderecoClienteAbreviado(Integer idCliente, boolean indicadorAbreviado) throws ControladorException;

	/**
	 * [UC0XXX] Gerar Relatório Logradouro Geral
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011 Obter dados dos Logradouros pelos parametros informados
	 */
	public Collection pesquisarLogradourosPorMunicipio(Integer idMunicipio) throws ControladorException;

	/**
	 * [UC0XXX] Gerar Relatório Logradouro Geral
	 * 
	 * @author Anderson Italo
	 * @date 26/01/2011
	 *       Obter total dos Logradouros pelos por Município
	 */
	public Integer calcularTotalLogradourosPorMunicipio(Integer idMunicipio) throws ControladorException;

	/**
	 * Obtem o Bairro pelo id do imóvel (se informado), caso não informado o id do imóvel ou não
	 * encontrado bairro para aquele imóvel, então procura o bairro pelo id do RA
	 * 
	 * @author isilva
	 * @param idImovel
	 * @param idRegistroAtendimento
	 * @return
	 * @throws ControladorException
	 */
	public Bairro obterBairroPorImovelOuRA(Integer idImovel, Integer idRegistroAtendimento) throws ControladorException;

	/**
	 * Inserir o cep
	 * 
	 * @param codigo
	 * @param sigla
	 * @param municipio
	 * @param bairro
	 * @param logradouro
	 * @param descricaoTipoLogradouro
	 * @return id da entidade inserida
	 * @throws ControladorException
	 */
	public Integer inserirCep(Integer codigo, String sigla, String municipio, String bairro, String logradouro,
					String descricaoTipoLogradouro) throws ControladorException;

	/**
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Object[] obterDadosEndereco(Integer idImovel) throws ControladorException;

	/**
	 * [UC0085] - Obter Endereço Autor: Sávio Luiz Data: 26/12/2005
	 * Para atender o Caso de Uso [UC0349], foi criado este método que retorna o endereço quebrado
	 * em duas Strings, de acordo com o tamanho limite informado
	 * 
	 * @param idImovel
	 * @param limiteTamanhoEndereco
	 */

	public String[] pesquisarEndereco(Integer idImovel, int limiteTamanhoEndereco) throws ControladorException;

	/**
	 * [UC0210] - Obter Endereço
	 * 
	 * @author Saulo Lima
	 *         Alterado por Luciano Galvão em 22/06/2012
	 * @date 26/03/2010
	 * @param idImovel
	 * @return Object[]
	 *         0 - endereco (String)
	 *         1 - idLogradouro (Integer)
	 *         2 - numeroImovel (String)
	 *         3 - cepImovel (String)
	 *         4 - imovel (Imovel)
	 *         5 - municipio (String)
	 *         6 - enderecoParticionado1 (String)
	 *         7 - enderecoParticionado2 (String)
	 */
	public Object[] pesquisarEnderecoFormatadoLista(Integer idImovel, int limiteTamanhoEndereco) throws ControladorException;

	/**
	 * Pesquisa na View logradouro por munícipio, bairro, noemLogradouro e retorna uma lista de
	 * logradouros
	 * 
	 * @author Josenildo Neves
	 * @date 08/08/2012
	 */
	public List<LogradouroJSONHelper> pesquisarViewLogradouro(Integer idMunicipio, Integer idBairro, String nomeLogradouro)
					throws ControladorException;

	/**
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public Integer obterMunicipio(Integer idImovel) throws ControladorException;

	public Integer pesquisarCepFiltroCount(String nomeLogradouro, String codigoLado, String faixa, String nomeMunicipio)
					throws ControladorException;

	public Collection pesquisarCepFiltro(String nomeLogradouro, String codigoLado, String faixa, Integer numeroPaginas, String nomeMunicipio)
					throws ControladorException;

	/**
	 * @author Felipe rosacruz
	 * @date 22/08/2013
	 * @throws ControladorException
	 */
	public String pesquisarEnderecoFormatadoEmpresa() throws ControladorException;

	public String pesquisarEnderecoComDetalhamento(Integer idImovel) throws ControladorException;

	public String pesquisarEnderecoClienteAbreviadoComDetalhamento(Integer idCliente) throws ControladorException;

	/**
	 * FIXME - MOVER PARA CONTROLADOR FATURAMENTO APOS IMPLEMENTAÇÃO
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<PagamentoHistoricoAdmiteDevolucaoHelper> consultarPagamentosHistoricoAdmiteDevolucao(Integer idImovel,
					boolean creditoARealizar)
					throws ControladorException;

	/**
	 * FIXME - MOVER PARA CONTROLADOR FATURAMENTO APOS IMPLEMENTAÇÃO
	 */
	public Integer pesquisarQuantidadePagamentosHistoricoCount(PagamentoHistoricoAdmiteDevolucaoHelper pagamento, String matriculaImovel)
					throws ControladorException;

	/**
	 * Pesquisar endereço sem referência
	 * 
	 * @author Hebert Falcão
	 * @date 12/11/2013
	 */
	public String pesquisarEnderecoSemReferencia(Integer idImovel) throws ControladorException;

	public String obterLogradouroTipoImovel(Integer idImovel) throws ControladorException;

	/**
	 * @author Saulo Lima
	 * @date 24/03/2010
	 * @param idCliente
	 * @return Object[]:
	 *         0 - endereco (String)
	 *         1 - idLogradouro (Integer)
	 *         2 - numeroImovel (String)
	 */
	public Object[] pesquisarEnderecoClienteAbreviadoListaComDetalhamento(Integer idCliente, boolean indicadorAbreviado)
					throws ControladorException;

	/**
	 * Agencia Virtual - Consultar Cep Por Logradouro e Bairro
	 * 
	 * @author Anderson Italo
	 * @date 16/03/2014
	 */
	public List<Object[]> pesquisarCepPorLogradouroEBairro(Integer idLogradouro, Integer idBairro) throws ControladorException;

	/**
	 * [UC0083] Gerar Dados para Leitura
	 * [SB0001] - Gerar Arquivo Convencional
	 * [SB0010] - Gerar Arquivo - Modelo 2
	 * <<Inclui>> [UC3148 - Obter Endereço de Entrega]
	 * 
	 * @author Anderson Italo
	 * @throws ControladorException
	 * @date 27/05/2014
	 */
	public Object[] obterEnderecoEntrega(Integer idImovel, Integer idImovelContaEnvio) throws ControladorException;

}
